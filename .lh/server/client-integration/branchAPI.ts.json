{
    "sourceFile": "server/client-integration/branchAPI.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1761125384363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1761125384363,
            "name": "Commit-0",
            "content": "// 기존 IndexedDB 코드를 서버 API 호출로 변환\n// src/utils/branchAPI.ts (또는 apiClient.ts에 추가)\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// API 응답 타입 정의\ninterface ApiResponse<T> {\n  success: boolean;\n  message?: string;\n  data?: T;\n  count?: number;\n  total?: number;\n  currentPage?: number;\n  totalPages?: number;\n  validationErrors?: any[];\n}\n\n// 지점 타입 (기존과 동일하지만 id가 string)\nexport interface Branch {\n  id: string;\n  name: string;\n  address?: string;\n  phone?: string;\n  isActive: boolean;\n  createdAt: string; // ISO string\n  updatedAt: string; // ISO string\n}\n\nclass BranchAPIClient {\n  private async request<T>(\n    endpoint: string, \n    options: RequestInit = {}\n  ): Promise<ApiResponse<T>> {\n    const url = `${API_BASE_URL}${endpoint}`;\n    \n    const defaultHeaders = {\n      'Content-Type': 'application/json',\n      // Authorization 헤더는 실제 인증 구현 시 추가\n      // 'Authorization': `Bearer ${getAuthToken()}`\n    };\n\n    const config: RequestInit = {\n      headers: defaultHeaders,\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'API 요청 실패');\n      }\n\n      return data;\n    } catch (error) {\n      console.error('API 요청 에러:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 모든 지점 조회 (기존 getAllBranches와 호환)\n   */\n  async getAllBranches(): Promise<Branch[]> {\n    const response = await this.request<Branch[]>('/branches');\n    return response.data || [];\n  }\n\n  /**\n   * ID로 지점 조회 (기존 getBranchById와 호환)\n   */\n  async getBranchById(id: string): Promise<Branch | null> {\n    try {\n      const response = await this.request<Branch>(`/branches/${id}`);\n      return response.data || null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * 지점 추가 (기존 addBranch와 호환)\n   */\n  async addBranch(branchData: Omit<Branch, 'id' | 'createdAt' | 'updatedAt'>): Promise<Branch> {\n    const response = await this.request<Branch>('/branches', {\n      method: 'POST',\n      body: JSON.stringify(branchData),\n    });\n\n    if (!response.data) {\n      throw new Error('지점 생성 실패');\n    }\n\n    return response.data;\n  }\n\n  /**\n   * 지점 수정 (기존 updateBranch와 호환)\n   */\n  async updateBranch(\n    id: string, \n    updates: Partial<Omit<Branch, 'id' | 'createdAt' | 'updatedAt'>>\n  ): Promise<Branch | null> {\n    try {\n      const response = await this.request<Branch>(`/branches/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(updates),\n      });\n      return response.data || null;\n    } catch (error) {\n      console.error('지점 수정 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 지점 삭제 (기존 deleteBranch와 호환)\n   */\n  async deleteBranch(id: string): Promise<boolean> {\n    try {\n      await this.request(`/branches/${id}`, {\n        method: 'DELETE',\n      });\n      return true;\n    } catch (error) {\n      console.error('지점 삭제 실패:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 활성 지점만 조회 (기존 getActiveBranches와 호환)\n   */\n  async getActiveBranches(): Promise<Branch[]> {\n    const response = await this.request<Branch[]>('/branches/active');\n    return response.data || [];\n  }\n\n  /**\n   * 지점명으로 검색 (기존 searchBranchesByName과 호환)\n   */\n  async searchBranchesByName(name: string): Promise<Branch[]> {\n    const response = await this.request<Branch[]>(`/branches/search/${encodeURIComponent(name)}`);\n    return response.data || [];\n  }\n\n  /**\n   * 지점명으로 정확히 일치하는 지점 조회 (기존 getBranchByName과 호환)\n   */\n  async getBranchByName(name: string): Promise<Branch | null> {\n    try {\n      const branches = await this.searchBranchesByName(name);\n      const exactMatch = branches.find(branch => branch.name === name);\n      return exactMatch || null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * 지점 상태 토글 (새로운 기능)\n   */\n  async toggleBranchStatus(id: string): Promise<Branch | null> {\n    try {\n      const response = await this.request<Branch>(`/branches/${id}/toggle-status`, {\n        method: 'PATCH',\n      });\n      return response.data || null;\n    } catch (error) {\n      console.error('지점 상태 변경 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 지점 통계 조회 (새로운 기능)\n   */\n  async getBranchStats(): Promise<{\n    totalBranches: number;\n    activeBranches: number;\n    inactiveBranches: number;\n    recentBranches: Branch[];\n  }> {\n    const response = await this.request<any>('/branches/stats');\n    return response.data || {\n      totalBranches: 0,\n      activeBranches: 0,\n      inactiveBranches: 0,\n      recentBranches: []\n    };\n  }\n\n  /**\n   * 페이지네이션을 지원하는 지점 목록 조회 (새로운 기능)\n   */\n  async getBranchesWithPagination(options: {\n    page?: number;\n    limit?: number;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n    isActive?: boolean;\n  } = {}): Promise<{\n    branches: Branch[];\n    total: number;\n    currentPage: number;\n    totalPages: number;\n  }> {\n    const params = new URLSearchParams();\n    \n    if (options.page) params.append('page', options.page.toString());\n    if (options.limit) params.append('limit', options.limit.toString());\n    if (options.sortBy) params.append('sortBy', options.sortBy);\n    if (options.sortOrder) params.append('sortOrder', options.sortOrder);\n    if (options.isActive !== undefined) params.append('isActive', options.isActive.toString());\n\n    const queryString = params.toString();\n    const endpoint = queryString ? `/branches?${queryString}` : '/branches';\n    \n    const response = await this.request<Branch[]>(endpoint);\n    \n    return {\n      branches: response.data || [],\n      total: response.total || 0,\n      currentPage: response.currentPage || 1,\n      totalPages: response.totalPages || 1\n    };\n  }\n}\n\n// 싱글톤 인스턴스 생성\nexport const branchAPI = new BranchAPIClient();\n\n// 기존 IndexedDB 관리자와 호환성을 위한 래퍼\nexport const apiManager = {\n  // 지점 관련 메소드들\n  getAllBranches: () => branchAPI.getAllBranches(),\n  getBranchById: (id: string) => branchAPI.getBranchById(id),\n  addBranch: (branchData: Omit<Branch, 'id' | 'createdAt' | 'updatedAt'>) => \n    branchAPI.addBranch(branchData),\n  updateBranch: (id: string, updates: Partial<Omit<Branch, 'id' | 'createdAt' | 'updatedAt'>>) => \n    branchAPI.updateBranch(id, updates),\n  deleteBranch: (id: string) => branchAPI.deleteBranch(id),\n  getActiveBranches: () => branchAPI.getActiveBranches(),\n  getBranchByName: (name: string) => branchAPI.getBranchByName(name),\n  searchBranchesByName: (name: string) => branchAPI.searchBranchesByName(name),\n};\n\nexport default branchAPI;"
        }
    ]
}