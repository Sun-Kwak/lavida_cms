{
    "sourceFile": "server/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1761125384345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1761125384345,
            "name": "Commit-0",
            "content": "# Lavida 백엔드 서버 - 지점 관리 API\n\nIndexedDB에서 MongoDB로 마이그레이션된 지점 관리 시스템\n\n## 주요 기능\n\n- 지점 CRUD 작업\n- 지점 검색 및 필터링\n- 활성/비활성 상태 관리\n- 페이지네이션 및 정렬\n- 유효성 검사 및 에러 핸들링\n\n## API 엔드포인트\n\n### 지점 관리\n\n#### 1. 모든 지점 조회\n```\nGET /api/branches\nQuery Parameters:\n- isActive: boolean (true/false)\n- sortBy: string (name/createdAt/updatedAt/isActive)\n- sortOrder: string (asc/desc)\n- page: number (default: 1)\n- limit: number (default: 50, max: 100)\n```\n\n#### 2. 활성 지점만 조회\n```\nGET /api/branches/active\n```\n\n#### 3. 지점 통계 조회\n```\nGET /api/branches/stats\n```\n\n#### 4. ID로 지점 조회\n```\nGET /api/branches/:id\n```\n\n#### 5. 지점명으로 검색\n```\nGET /api/branches/search/:name\nQuery Parameters:\n- isActive: boolean (true/false)\n```\n\n#### 6. 새 지점 생성\n```\nPOST /api/branches\nBody: {\n  \"name\": \"지점명\", // required\n  \"address\": \"주소\", // optional\n  \"phone\": \"전화번호\", // optional\n  \"isActive\": true // optional, default: true\n}\n```\n\n#### 7. 지점 정보 수정\n```\nPUT /api/branches/:id\nBody: {\n  \"name\": \"지점명\", // optional\n  \"address\": \"주소\", // optional\n  \"phone\": \"전화번호\", // optional\n  \"isActive\": true // optional\n}\n```\n\n#### 8. 지점 활성/비활성 토글\n```\nPATCH /api/branches/:id/toggle-status\n```\n\n#### 9. 지점 삭제\n```\nDELETE /api/branches/:id\n```\n\n## 응답 형식\n\n### 성공 응답\n```json\n{\n  \"success\": true,\n  \"message\": \"성공 메시지\",\n  \"data\": { /* 데이터 */ },\n  \"count\": 10, // 목록 조회 시\n  \"total\": 100, // 전체 개수\n  \"currentPage\": 1, // 현재 페이지\n  \"totalPages\": 10 // 전체 페이지\n}\n```\n\n### 에러 응답\n```json\n{\n  \"success\": false,\n  \"message\": \"에러 메시지\",\n  \"validationErrors\": [/* 유효성 검사 에러 */] // optional\n}\n```\n\n## 데이터 모델\n\n### Branch (지점)\n```javascript\n{\n  id: String, // MongoDB ObjectId\n  name: String, // 지점명 (required, unique)\n  address: String, // 주소 (optional)\n  phone: String, // 전화번호 (optional)\n  isActive: Boolean, // 활성 상태 (default: true)\n  createdAt: Date, // 생성일시\n  updatedAt: Date // 수정일시\n}\n```\n\n## IndexedDB에서 MongoDB 마이그레이션 차이점\n\n### 1. 데이터 구조\n- **IndexedDB**: 브라우저 로컬 저장소, 클라이언트 사이드\n- **MongoDB**: 서버 데이터베이스, 중앙 집중식 관리\n\n### 2. ID 생성 방식\n- **IndexedDB**: UUID v4 (`generateUUID()`)\n- **MongoDB**: ObjectId (자동 생성)\n\n### 3. 트랜잭션 처리\n- **IndexedDB**: `executeTransaction()` 메소드\n- **MongoDB**: Mongoose의 기본 트랜잭션 처리\n\n### 4. 인덱싱\n- **IndexedDB**: 수동 인덱스 생성\n- **MongoDB**: Mongoose 스키마 기반 자동 인덱싱\n\n### 5. 유효성 검사\n- **IndexedDB**: 클라이언트 사이드 검증\n- **MongoDB**: 서버 사이드 Mongoose 스키마 + express-validator\n\n### 6. 에러 처리\n- **IndexedDB**: try-catch 기반\n- **MongoDB**: 미들웨어 기반 중앙집중식 에러 처리\n\n## 기존 IndexedDB 코드와의 매핑\n\n| IndexedDB 메소드 | MongoDB API 엔드포인트 |\n|------------------|----------------------|\n| `getAllBranches()` | `GET /api/branches` |\n| `getBranchById(id)` | `GET /api/branches/:id` |\n| `addBranch(data)` | `POST /api/branches` |\n| `updateBranch(id, data)` | `PUT /api/branches/:id` |\n| `deleteBranch(id)` | `DELETE /api/branches/:id` |\n| `getActiveBranches()` | `GET /api/branches/active` |\n| `getBranchByName(name)` | `GET /api/branches/search/:name` |\n\n## 설치 및 실행\n\n```bash\n# 의존성 설치\nnpm install\n\n# 개발 모드 실행\nnpm run dev\n\n# 프로덕션 모드 실행\nnpm start\n```\n\n## 환경 변수 설정\n\n`.env` 파일을 생성하고 `.env.example`을 참고하여 설정값을 입력하세요."
        }
    ]
}