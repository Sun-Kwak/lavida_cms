{
    "sourceFile": "server/controllers/branchController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1761125384168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1761125384168,
            "name": "Commit-0",
            "content": "const Branch = require('../models/Branch');\nconst { validationResult } = require('express-validator');\nconst asyncHandler = require('../utils/asyncHandler');\nconst AppError = require('../utils/AppError');\n\n/**\n * @desc    모든 지점 조회\n * @route   GET /api/branches\n * @access  Private\n */\nconst getAllBranches = asyncHandler(async (req, res) => {\n  const { isActive, sortBy = 'createdAt', sortOrder = 'asc', page = 1, limit = 50 } = req.query;\n  \n  // 필터 조건 구성\n  const filter = {};\n  if (isActive !== undefined) {\n    filter.isActive = isActive === 'true';\n  }\n  \n  // 정렬 조건 구성\n  const sortOptions = {};\n  sortOptions[sortBy] = sortOrder === 'desc' ? -1 : 1;\n  \n  // 페이지네이션\n  const skip = (parseInt(page) - 1) * parseInt(limit);\n  \n  const branches = await Branch.find(filter)\n    .sort(sortOptions)\n    .skip(skip)\n    .limit(parseInt(limit));\n    \n  const total = await Branch.countDocuments(filter);\n  \n  res.status(200).json({\n    success: true,\n    count: branches.length,\n    total,\n    currentPage: parseInt(page),\n    totalPages: Math.ceil(total / parseInt(limit)),\n    data: branches\n  });\n});\n\n/**\n * @desc    활성 지점만 조회\n * @route   GET /api/branches/active\n * @access  Private\n */\nconst getActiveBranches = asyncHandler(async (req, res) => {\n  const branches = await Branch.findActive();\n  \n  res.status(200).json({\n    success: true,\n    count: branches.length,\n    data: branches\n  });\n});\n\n/**\n * @desc    ID로 지점 조회\n * @route   GET /api/branches/:id\n * @access  Private\n */\nconst getBranchById = asyncHandler(async (req, res) => {\n  const branch = await Branch.findById(req.params.id);\n  \n  if (!branch) {\n    throw new AppError('지점을 찾을 수 없습니다', 404);\n  }\n  \n  res.status(200).json({\n    success: true,\n    data: branch\n  });\n});\n\n/**\n * @desc    지점명으로 검색\n * @route   GET /api/branches/search/:name\n * @access  Private\n */\nconst searchBranchesByName = asyncHandler(async (req, res) => {\n  const { name } = req.params;\n  const { isActive } = req.query;\n  \n  const filter = {\n    name: { $regex: name, $options: 'i' } // 대소문자 구분 없이 검색\n  };\n  \n  if (isActive !== undefined) {\n    filter.isActive = isActive === 'true';\n  }\n  \n  const branches = await Branch.find(filter).sort({ name: 1 });\n  \n  res.status(200).json({\n    success: true,\n    count: branches.length,\n    data: branches\n  });\n});\n\n/**\n * @desc    지점 생성\n * @route   POST /api/branches\n * @access  Private\n */\nconst createBranch = asyncHandler(async (req, res) => {\n  // 유효성 검사 에러 체크\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    throw new AppError('입력 데이터가 유효하지 않습니다', 400, errors.array());\n  }\n  \n  const { name, address, phone, isActive = true } = req.body;\n  \n  const branch = await Branch.create({\n    name: name.trim(),\n    address: address?.trim(),\n    phone: phone?.trim(),\n    isActive\n  });\n  \n  res.status(201).json({\n    success: true,\n    message: '지점이 성공적으로 생성되었습니다',\n    data: branch\n  });\n});\n\n/**\n * @desc    지점 수정\n * @route   PUT /api/branches/:id\n * @access  Private\n */\nconst updateBranch = asyncHandler(async (req, res) => {\n  // 유효성 검사 에러 체크\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    throw new AppError('입력 데이터가 유효하지 않습니다', 400, errors.array());\n  }\n  \n  const { name, address, phone, isActive } = req.body;\n  \n  const updateData = {};\n  if (name !== undefined) updateData.name = name.trim();\n  if (address !== undefined) updateData.address = address?.trim();\n  if (phone !== undefined) updateData.phone = phone?.trim();\n  if (isActive !== undefined) updateData.isActive = isActive;\n  \n  const branch = await Branch.findByIdAndUpdate(\n    req.params.id,\n    updateData,\n    {\n      new: true, // 수정된 문서 반환\n      runValidators: true // 스키마 유효성 검사 실행\n    }\n  );\n  \n  if (!branch) {\n    throw new AppError('지점을 찾을 수 없습니다', 404);\n  }\n  \n  res.status(200).json({\n    success: true,\n    message: '지점이 성공적으로 수정되었습니다',\n    data: branch\n  });\n});\n\n/**\n * @desc    지점 삭제\n * @route   DELETE /api/branches/:id\n * @access  Private\n */\nconst deleteBranch = asyncHandler(async (req, res) => {\n  const branch = await Branch.findById(req.params.id);\n  \n  if (!branch) {\n    throw new AppError('지점을 찾을 수 없습니다', 404);\n  }\n  \n  // 관련 데이터 체크 (실제 구현에서는 직원, 회원 등이 있는지 확인)\n  // const hasRelatedData = await checkRelatedData(branch._id);\n  // if (hasRelatedData) {\n  //   throw new AppError('관련 데이터가 있는 지점은 삭제할 수 없습니다', 400);\n  // }\n  \n  await branch.deleteOne();\n  \n  res.status(200).json({\n    success: true,\n    message: '지점이 성공적으로 삭제되었습니다',\n    data: { id: req.params.id }\n  });\n});\n\n/**\n * @desc    지점 활성/비활성 토글\n * @route   PATCH /api/branches/:id/toggle-status\n * @access  Private\n */\nconst toggleBranchStatus = asyncHandler(async (req, res) => {\n  const branch = await Branch.findById(req.params.id);\n  \n  if (!branch) {\n    throw new AppError('지점을 찾을 수 없습니다', 404);\n  }\n  \n  await branch.toggleActive();\n  \n  res.status(200).json({\n    success: true,\n    message: `지점이 ${branch.isActive ? '활성화' : '비활성화'}되었습니다`,\n    data: branch\n  });\n});\n\n/**\n * @desc    지점 통계 조회\n * @route   GET /api/branches/stats\n * @access  Private\n */\nconst getBranchStats = asyncHandler(async (req, res) => {\n  const totalBranches = await Branch.countDocuments();\n  const activeBranches = await Branch.countDocuments({ isActive: true });\n  const inactiveBranches = await Branch.countDocuments({ isActive: false });\n  \n  // 최근 생성된 지점들\n  const recentBranches = await Branch.find()\n    .sort({ createdAt: -1 })\n    .limit(5)\n    .select('name createdAt isActive');\n  \n  res.status(200).json({\n    success: true,\n    data: {\n      totalBranches,\n      activeBranches,\n      inactiveBranches,\n      recentBranches\n    }\n  });\n});\n\nmodule.exports = {\n  getAllBranches,\n  getActiveBranches,\n  getBranchById,\n  searchBranchesByName,\n  createBranch,\n  updateBranch,\n  deleteBranch,\n  toggleBranchStatus,\n  getBranchStats\n};"
        }
    ]
}