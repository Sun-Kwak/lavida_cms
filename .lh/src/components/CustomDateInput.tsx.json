{
    "sourceFile": "src/components/CustomDateInput.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1759902049199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759902957547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,10 @@\n   placeholder?: string;\n   disabled?: boolean;\n   error?: boolean;\n   required?: boolean;\n+  min?: string; // 최소 날짜 (YYYY-MM-DD 형식)\n+  max?: string; // 최대 날짜 (YYYY-MM-DD 형식)\n }\n \n const DateInputContainer = styled.div`\n   position: relative;\n@@ -71,9 +73,11 @@\n   onChange,\n   placeholder = \"날짜를 선택하세요\",\n   disabled = false,\n   error = false,\n-  required = false\n+  required = false,\n+  min,\n+  max\n }) => {\n   const hiddenInputRef = useRef<HTMLInputElement>(null);\n \n   const formatDateForDisplay = (dateValue: string): string => {\n@@ -125,8 +129,10 @@\n         value={value}\n         onChange={handleInputChange}\n         disabled={disabled}\n         required={required}\n+        min={min}\n+        max={max}\n       />\n     </DateInputContainer>\n   );\n };\n"
                },
                {
                    "date": 1759908854318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,30 +18,34 @@\n   position: relative;\n   width: 100%;\n `;\n \n-const DateInputWrapper = styled.div<{ $error?: boolean; $hasValue: boolean }>`\n+const DateInputWrapper = styled.div<{ $error?: boolean; $hasValue: boolean; $disabled?: boolean }>`\n   height: 48px;\n   padding: 0 16px;\n   border: 1px solid ${props => props.$error ? AppColors.error : AppColors.borderLight};\n   border-radius: 12px;\n-  background: ${AppColors.surface};\n-  color: ${AppColors.onSurface};\n+  background: ${props => props.$disabled ? AppColors.background : AppColors.surface};\n+  color: ${props => props.$disabled ? AppColors.disabled : AppColors.onSurface};\n   transition: all 0.2s ease;\n   box-sizing: border-box;\n   display: flex;\n   align-items: center;\n   justify-content: space-between;\n-  cursor: pointer;\n+  cursor: ${props => props.$disabled ? 'not-allowed' : 'pointer'};\n   \n   &:hover {\n-    border-color: ${props => props.$error ? AppColors.error : AppColors.primary};\n-    box-shadow: 0 2px 8px rgba(55, 187, 214, 0.1);\n+    ${props => !props.$disabled && `\n+      border-color: ${props.$error ? AppColors.error : AppColors.primary};\n+      box-shadow: 0 2px 8px rgba(55, 187, 214, 0.1);\n+    `}\n   }\n   \n   &:focus-within {\n-    border-color: ${props => props.$error ? AppColors.error : AppColors.primary};\n-    box-shadow: 0 0 0 3px rgba(55, 187, 214, 0.1);\n+    ${props => !props.$disabled && `\n+      border-color: ${props.$error ? AppColors.error : AppColors.primary};\n+      box-shadow: 0 0 0 3px rgba(55, 187, 214, 0.1);\n+    `}\n   }\n `;\n \n const HiddenDateInput = styled.input.attrs({ type: 'date' })`\n@@ -51,21 +55,24 @@\n   width: 100%;\n   height: 100%;\n `;\n \n-const DateDisplay = styled.span<{ $hasValue: boolean }>`\n+const DateDisplay = styled.span<{ $hasValue: boolean; $disabled?: boolean }>`\n   font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${props => props.$hasValue ? AppColors.onSurface : AppColors.onInput1};\n+  color: ${props => {\n+    if (props.$disabled) return AppColors.disabled;\n+    return props.$hasValue ? AppColors.onSurface : AppColors.onInput1;\n+  }};\n   flex: 1;\n `;\n \n-const CalendarIcon = styled.div`\n+const CalendarIcon = styled.div<{ $disabled?: boolean }>`\n   width: 20px;\n   height: 20px;\n   display: flex;\n   align-items: center;\n   justify-content: center;\n-  color: ${AppColors.onInput1};\n+  color: ${props => props.$disabled ? AppColors.disabled : AppColors.onInput1};\n   margin-left: 8px;\n `;\n \n const CustomDateInput: React.FC<CustomDateInputProps> = ({\n@@ -113,14 +120,15 @@\n     <DateInputContainer>\n       <DateInputWrapper\n         $error={error}\n         $hasValue={!!value}\n+        $disabled={disabled}\n         onClick={handleWrapperClick}\n       >\n-        <DateDisplay $hasValue={!!value}>\n+        <DateDisplay $hasValue={!!value} $disabled={disabled}>\n           {value ? formatDateForDisplay(value) : placeholder}\n         </DateDisplay>\n-        <CalendarIcon>\n+        <CalendarIcon $disabled={disabled}>\n           📅\n         </CalendarIcon>\n       </DateInputWrapper>\n       \n"
                },
                {
                    "date": 1760249521832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n   error?: boolean;\n   required?: boolean;\n   min?: string; // 최소 날짜 (YYYY-MM-DD 형식)\n   max?: string; // 최대 날짜 (YYYY-MM-DD 형식)\n+  defaultViewDate?: string; // 기본 달력 뷰 날짜 (값이 없을 때 표시할 날짜)\n }\n \n const DateInputContainer = styled.div`\n   position: relative;\n@@ -82,9 +83,10 @@\n   disabled = false,\n   error = false,\n   required = false,\n   min,\n-  max\n+  max,\n+  defaultViewDate = '1970-01-01'\n }) => {\n   const hiddenInputRef = useRef<HTMLInputElement>(null);\n \n   const formatDateForDisplay = (dateValue: string): string => {\n@@ -103,12 +105,30 @@\n   };\n \n   const handleWrapperClick = () => {\n     if (!disabled && hiddenInputRef.current) {\n-      if (hiddenInputRef.current.showPicker) {\n-        hiddenInputRef.current.showPicker();\n+      // 값이 없을 때만 임시로 defaultViewDate 설정\n+      if (!value) {\n+        hiddenInputRef.current.value = defaultViewDate;\n+        \n+        if (hiddenInputRef.current.showPicker) {\n+          hiddenInputRef.current.showPicker();\n+        } else {\n+          hiddenInputRef.current.focus();\n+        }\n+        \n+        // 사용자가 날짜를 선택하지 않으면 원래 값으로 복원\n+        setTimeout(() => {\n+          if (hiddenInputRef.current && hiddenInputRef.current.value === defaultViewDate && !value) {\n+            hiddenInputRef.current.value = '';\n+          }\n+        }, 100);\n       } else {\n-        hiddenInputRef.current.focus();\n+        if (hiddenInputRef.current.showPicker) {\n+          hiddenInputRef.current.showPicker();\n+        } else {\n+          hiddenInputRef.current.focus();\n+        }\n       }\n     }\n   };\n \n"
                },
                {
                    "date": 1761450440002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n   error = false,\n   required = false,\n   min,\n   max,\n-  defaultViewDate = '1970-01-01'\n+  defaultViewDate\n }) => {\n   const hiddenInputRef = useRef<HTMLInputElement>(null);\n \n   const formatDateForDisplay = (dateValue: string): string => {\n@@ -107,9 +107,10 @@\n   const handleWrapperClick = () => {\n     if (!disabled && hiddenInputRef.current) {\n       // 값이 없을 때만 임시로 defaultViewDate 설정\n       if (!value) {\n-        hiddenInputRef.current.value = defaultViewDate;\n+        const viewDate = defaultViewDate || new Date().toISOString().split('T')[0];\n+        hiddenInputRef.current.value = viewDate;\n         \n         if (hiddenInputRef.current.showPicker) {\n           hiddenInputRef.current.showPicker();\n         } else {\n@@ -117,9 +118,9 @@\n         }\n         \n         // 사용자가 날짜를 선택하지 않으면 원래 값으로 복원\n         setTimeout(() => {\n-          if (hiddenInputRef.current && hiddenInputRef.current.value === defaultViewDate && !value) {\n+          if (hiddenInputRef.current && hiddenInputRef.current.value === viewDate && !value) {\n             hiddenInputRef.current.value = '';\n           }\n         }, 100);\n       } else {\n"
                }
            ],
            "date": 1759902049199,
            "name": "Commit-0",
            "content": "import React, { useRef } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../styles/colors';\nimport { AppTextStyles } from '../styles/textStyles';\n\ninterface CustomDateInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  error?: boolean;\n  required?: boolean;\n}\n\nconst DateInputContainer = styled.div`\n  position: relative;\n  width: 100%;\n`;\n\nconst DateInputWrapper = styled.div<{ $error?: boolean; $hasValue: boolean }>`\n  height: 48px;\n  padding: 0 16px;\n  border: 1px solid ${props => props.$error ? AppColors.error : AppColors.borderLight};\n  border-radius: 12px;\n  background: ${AppColors.surface};\n  color: ${AppColors.onSurface};\n  transition: all 0.2s ease;\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  cursor: pointer;\n  \n  &:hover {\n    border-color: ${props => props.$error ? AppColors.error : AppColors.primary};\n    box-shadow: 0 2px 8px rgba(55, 187, 214, 0.1);\n  }\n  \n  &:focus-within {\n    border-color: ${props => props.$error ? AppColors.error : AppColors.primary};\n    box-shadow: 0 0 0 3px rgba(55, 187, 214, 0.1);\n  }\n`;\n\nconst HiddenDateInput = styled.input.attrs({ type: 'date' })`\n  position: absolute;\n  opacity: 0;\n  pointer-events: none;\n  width: 100%;\n  height: 100%;\n`;\n\nconst DateDisplay = styled.span<{ $hasValue: boolean }>`\n  font-size: ${AppTextStyles.body1.fontSize};\n  color: ${props => props.$hasValue ? AppColors.onSurface : AppColors.onInput1};\n  flex: 1;\n`;\n\nconst CalendarIcon = styled.div`\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: ${AppColors.onInput1};\n  margin-left: 8px;\n`;\n\nconst CustomDateInput: React.FC<CustomDateInputProps> = ({\n  value,\n  onChange,\n  placeholder = \"날짜를 선택하세요\",\n  disabled = false,\n  error = false,\n  required = false\n}) => {\n  const hiddenInputRef = useRef<HTMLInputElement>(null);\n\n  const formatDateForDisplay = (dateValue: string): string => {\n    if (!dateValue) return '';\n    \n    try {\n      const date = new Date(dateValue);\n      return date.toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    } catch {\n      return dateValue;\n    }\n  };\n\n  const handleWrapperClick = () => {\n    if (!disabled && hiddenInputRef.current) {\n      if (hiddenInputRef.current.showPicker) {\n        hiddenInputRef.current.showPicker();\n      } else {\n        hiddenInputRef.current.focus();\n      }\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(e.target.value);\n  };\n\n  return (\n    <DateInputContainer>\n      <DateInputWrapper\n        $error={error}\n        $hasValue={!!value}\n        onClick={handleWrapperClick}\n      >\n        <DateDisplay $hasValue={!!value}>\n          {value ? formatDateForDisplay(value) : placeholder}\n        </DateDisplay>\n        <CalendarIcon>\n          📅\n        </CalendarIcon>\n      </DateInputWrapper>\n      \n      <HiddenDateInput\n        ref={hiddenInputRef}\n        value={value}\n        onChange={handleInputChange}\n        disabled={disabled}\n        required={required}\n      />\n    </DateInputContainer>\n  );\n};\n\nexport default CustomDateInput;\n"
        }
    ]
}