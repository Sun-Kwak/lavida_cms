{
    "sourceFile": "src/components/CMSRootLayout.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1760162638390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760258120514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,11 @@\n   background-color: ${AppColors.background};\n   width: 100%;\n `;\n \n-const ContentContainer = styled.main`\n-  min-height: 100vh; /* 전체 뷰포트 높이 사용 */\n+const ContentContainer = styled.main<{ $appBarHeight?: number }>`\n+  /* 앱바 높이를 동적으로 계산 */\n+  min-height: ${props => `calc(100vh - ${props.$appBarHeight || 124}px)`};\n   padding-left: 0; /* 사이드바가 없으므로 좌측 패딩 제거 */\n   padding-right: 0; /* 우측 패딩도 제거하여 전체 너비 활용 */\n   padding-bottom: 24px;\n   width: 100%;\n@@ -60,8 +61,23 @@\n   const handleProgramRefresh = useCallback((refreshFunction: () => Promise<void>) => {\n     globalProgramRefreshFunction = refreshFunction;\n   }, []);\n \n+  // 앱바 높이 계산: 기본 TopBar 64px + SubMenu 있을 때 약 60px\n+  const calculateAppBarHeight = () => {\n+    // 현재 경로에 따라 서브메뉴 표시 여부 결정\n+    const hasSubMenu = location.pathname && (\n+      location.pathname.includes('/cms/staff/') ||\n+      location.pathname.includes('/cms/member/') ||\n+      location.pathname.includes('/cms/reservation/') ||\n+      location.pathname.includes('/cms/program/') ||\n+      location.pathname.includes('/cms/terms/') ||\n+      location.pathname.includes('/cms/assets/')\n+    );\n+    \n+    return hasSubMenu ? 124 : 64; // 서브메뉴 있으면 124px, 없으면 64px\n+  };\n+\n   // 로그인 페이지라면 AppBar 없이 children만 렌더링\n   if (isLoginPage) {\n     return <>{children}</>;\n   }\n@@ -73,9 +89,9 @@\n         <CMSAppBar \n           currentPath={location.pathname}\n           onRefreshPrograms={handleProgramRefresh}\n         />\n-        <ContentContainer>\n+        <ContentContainer $appBarHeight={calculateAppBarHeight()}>\n           <ContentWrapper>\n             {children}\n           </ContentWrapper>\n         </ContentContainer>\n"
                },
                {
                    "date": 1760258231450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,22 +16,25 @@\n   width: 100%;\n `;\n \n const ContentContainer = styled.main<{ $appBarHeight?: number }>`\n-  /* 앱바 높이를 동적으로 계산 */\n-  min-height: ${props => `calc(100vh - ${props.$appBarHeight || 124}px)`};\n+  /* 앱바 높이를 고려한 정확한 높이 계산 */\n+  height: ${props => `calc(100vh - ${props.$appBarHeight || 124}px)`};\n   padding-left: 0; /* 사이드바가 없으므로 좌측 패딩 제거 */\n   padding-right: 0; /* 우측 패딩도 제거하여 전체 너비 활용 */\n-  padding-bottom: 24px;\n+  padding-bottom: 0; /* 하단 패딩 제거하여 스크롤 방지 */\n   width: 100%;\n   transition: all 0.2s ease; /* 부드러운 트랜지션 추가 */\n+  overflow-y: auto; /* 필요시에만 스크롤 */\n `;\n \n const ContentWrapper = styled.div`\n   width: 100%; /* 전체 너비 사용 */\n   padding: 24px; /* 내부 콘텐츠 여백은 여기서 처리 */\n   box-sizing: border-box; /* 패딩이 너비에 포함되도록 */\n   transition: all 0.2s ease; /* 부드러운 트랜지션 추가 */\n+  height: 100%; /* 부모 컨테이너의 전체 높이 사용 */\n+  overflow-y: auto; /* 콘텐츠가 넘치면 스크롤 */\n `;\n \n interface CMSRootLayoutProps {\n   children: React.ReactNode;\n"
                }
            ],
            "date": 1760162638390,
            "name": "Commit-0",
            "content": "import React, { useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\nimport CMSAppBar from './CMSAppBar';\nimport { AppColors } from '../styles/colors';\n\n// 전체 CMS를 감싸는 최소 너비 컨테이너\nconst CMSContainer = styled.div`\n  min-width: 1200px;\n  width: 100%;\n`;\n\nconst LayoutContainer = styled.div`\n  min-height: 100vh;\n  background-color: ${AppColors.background};\n  width: 100%;\n`;\n\nconst ContentContainer = styled.main`\n  min-height: 100vh; /* 전체 뷰포트 높이 사용 */\n  padding-left: 0; /* 사이드바가 없으므로 좌측 패딩 제거 */\n  padding-right: 0; /* 우측 패딩도 제거하여 전체 너비 활용 */\n  padding-bottom: 24px;\n  width: 100%;\n  transition: all 0.2s ease; /* 부드러운 트랜지션 추가 */\n`;\n\nconst ContentWrapper = styled.div`\n  width: 100%; /* 전체 너비 사용 */\n  padding: 24px; /* 내부 콘텐츠 여백은 여기서 처리 */\n  box-sizing: border-box; /* 패딩이 너비에 포함되도록 */\n  transition: all 0.2s ease; /* 부드러운 트랜지션 추가 */\n`;\n\ninterface CMSRootLayoutProps {\n  children: React.ReactNode;\n}\n\n// 전역 프로그램 새로고침 함수를 저장할 변수\nlet globalProgramRefreshFunction: (() => Promise<void>) | null = null;\n\n// 외부에서 프로그램 목록을 새로고침할 수 있는 유틸리티 함수\nexport const refreshProgramsInNavigation = async () => {\n  if (globalProgramRefreshFunction) {\n    try {\n      await (globalProgramRefreshFunction as () => Promise<void>)();\n    } catch (error) {\n      console.error('프로그램 네비게이션 새로고침 실패:', error);\n    }\n  }\n};\n\nconst CMSRootLayout: React.FC<CMSRootLayoutProps> = React.memo(({ children }) => {\n  const location = useLocation();\n  \n  // 로그인 페이지인지 확인\n  const isLoginPage = location.pathname === '/cms/login';\n  \n  // 프로그램 새로고침 함수를 전역 변수에 저장\n  const handleProgramRefresh = useCallback((refreshFunction: () => Promise<void>) => {\n    globalProgramRefreshFunction = refreshFunction;\n  }, []);\n\n  // 로그인 페이지라면 AppBar 없이 children만 렌더링\n  if (isLoginPage) {\n    return <>{children}</>;\n  }\n\n  // 다른 CMS 페이지들은 AppBar와 함께 렌더링\n  return (\n    <CMSContainer>\n      <LayoutContainer>\n        <CMSAppBar \n          currentPath={location.pathname}\n          onRefreshPrograms={handleProgramRefresh}\n        />\n        <ContentContainer>\n          <ContentWrapper>\n            {children}\n          </ContentWrapper>\n        </ContentContainer>\n      </LayoutContainer>\n    </CMSContainer>\n  );\n});\n\nCMSRootLayout.displayName = 'CMSRootLayout';\n\nexport default CMSRootLayout;\n"
        }
    ]
}