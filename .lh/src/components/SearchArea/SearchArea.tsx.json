{
    "sourceFile": "src/components/SearchArea/SearchArea.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1760760936031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760761344577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React from 'react';\n+import React, { useState, useRef, useEffect } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '../../styles/colors';\n import { AppTextStyles } from '../../styles/textStyles';\n \n@@ -63,25 +63,69 @@\n   align-items: center;\n   flex-wrap: wrap;\n `;\n \n-const PeriodLabel = styled.span`\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  color: ${AppColors.onSurface};\n-  font-weight: 500;\n-  min-width: 40px;\n-`;\n-\n-const PeriodDisplay = styled.div`\n+const PeriodDisplay = styled.div<{ $clickable?: boolean }>`\n   font-size: ${AppTextStyles.body2.fontSize};\n   color: ${AppColors.onInput1};\n   background: #f8f9fa;\n   padding: 8px 12px;\n   border-radius: 6px;\n   border: 1px solid ${AppColors.borderLight};\n   min-width: 200px;\n+  cursor: ${props => props.$clickable ? 'pointer' : 'default'};\n+  position: relative;\n+  \n+  &:hover {\n+    ${props => props.$clickable && `\n+      border-color: ${AppColors.primary};\n+      background: rgba(0, 123, 255, 0.05);\n+    `}\n+  }\n `;\n \n+const DatePickerModal = styled.div<{ $visible: boolean }>`\n+  position: absolute;\n+  top: 100%;\n+  left: 0;\n+  z-index: 1000;\n+  background: ${AppColors.surface};\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n+  padding: 16px;\n+  margin-top: 4px;\n+  min-width: 300px;\n+  display: ${props => props.$visible ? 'block' : 'none'};\n+`;\n+\n+const DatePickerHeader = styled.div`\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  margin-bottom: 12px;\n+`;\n+\n+const DatePickerTitle = styled.h4`\n+  margin: 0;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+`;\n+\n+const CloseButton = styled.button`\n+  background: none;\n+  border: none;\n+  font-size: 18px;\n+  cursor: pointer;\n+  color: ${AppColors.onInput1};\n+  padding: 4px;\n+  \n+  &:hover {\n+    color: ${AppColors.onSurface};\n+  }\n+`;\n+\n const PeriodButton = styled.button<{ $active: boolean }>`\n   padding: 8px 16px;\n   border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n   border-radius: 8px;\n@@ -99,18 +143,20 @@\n `;\n \n const DateRangeInputs = styled.div`\n   display: flex;\n-  gap: 8px;\n+  gap: 12px;\n   align-items: center;\n+  justify-content: center;\n `;\n \n const DateInput = styled.input`\n-  padding: 8px 12px;\n+  padding: 10px 12px;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 6px;\n   font-size: ${AppTextStyles.body2.fontSize};\n   outline: none;\n+  flex: 1;\n   \n   &:focus {\n     border-color: ${AppColors.primary};\n   }\n@@ -187,14 +233,43 @@\n   onSearchChange,\n   onSearch,\n   searchPlaceholder = \"검색어를 입력하세요...\"\n }) => {\n+  const [showDatePicker, setShowDatePicker] = useState(false);\n+  const datePickerRef = useRef<HTMLDivElement>(null);\n+\n   const handleKeyPress = (e: React.KeyboardEvent) => {\n     if (e.key === 'Enter') {\n       onSearch();\n     }\n   };\n \n+  // 외부 클릭 감지해서 달력 닫기\n+  useEffect(() => {\n+    const handleClickOutside = (event: MouseEvent) => {\n+      if (datePickerRef.current && !datePickerRef.current.contains(event.target as Node)) {\n+        setShowDatePicker(false);\n+      }\n+    };\n+\n+    if (showDatePicker) {\n+      document.addEventListener('mousedown', handleClickOutside);\n+    }\n+\n+    return () => {\n+      document.removeEventListener('mousedown', handleClickOutside);\n+    };\n+  }, [showDatePicker]);\n+\n+  const handleDateRangeClick = () => {\n+    if (selectedPeriod === 'custom') {\n+      setShowDatePicker(!showDatePicker);\n+    } else {\n+      onPeriodChange('custom');\n+      setShowDatePicker(true);\n+    }\n+  };\n+\n   return (\n     <SearchContainer>\n       {/* 메타 정보 영역 */}\n       <MetaRow $hasContent={!!metaContent}>\n@@ -204,54 +279,80 @@\n       {/* 메인 검색 영역 */}\n       <MainRow>\n         {/* 기간 선택 영역 */}\n         <PeriodSection>\n-          <PeriodLabel>범위:</PeriodLabel>\n-          <PeriodDisplay>{dateRangeDisplay}</PeriodDisplay>\n+          <div style={{ position: 'relative' }} ref={datePickerRef}>\n+            <PeriodDisplay \n+              $clickable={true}\n+              onClick={handleDateRangeClick}\n+            >\n+              {dateRangeDisplay}\n+            </PeriodDisplay>\n+            \n+            {/* 달력 모달 */}\n+            <DatePickerModal $visible={showDatePicker}>\n+              <DatePickerHeader>\n+                <DatePickerTitle>기간 선택</DatePickerTitle>\n+                <CloseButton onClick={() => setShowDatePicker(false)}>\n+                  ×\n+                </CloseButton>\n+              </DatePickerHeader>\n+              \n+              <DateRangeInputs>\n+                <DateInput\n+                  type=\"date\"\n+                  value={customStartDate}\n+                  onChange={(e) => onCustomStartDateChange?.(e.target.value)}\n+                />\n+                <DateSeparator>~</DateSeparator>\n+                <DateInput\n+                  type=\"date\"\n+                  value={customEndDate}\n+                  onChange={(e) => onCustomEndDateChange?.(e.target.value)}\n+                />\n+              </DateRangeInputs>\n+            </DatePickerModal>\n+          </div>\n           \n           <PeriodButton \n             $active={selectedPeriod === '1month'}\n-            onClick={() => onPeriodChange('1month')}\n+            onClick={() => {\n+              onPeriodChange('1month');\n+              setShowDatePicker(false);\n+            }}\n           >\n             1개월\n           </PeriodButton>\n           \n           <PeriodButton \n             $active={selectedPeriod === '3month'}\n-            onClick={() => onPeriodChange('3month')}\n+            onClick={() => {\n+              onPeriodChange('3month');\n+              setShowDatePicker(false);\n+            }}\n           >\n             3개월\n           </PeriodButton>\n           \n           <PeriodButton \n             $active={selectedPeriod === '6month'}\n-            onClick={() => onPeriodChange('6month')}\n+            onClick={() => {\n+              onPeriodChange('6month');\n+              setShowDatePicker(false);\n+            }}\n           >\n             6개월\n           </PeriodButton>\n           \n           <PeriodButton \n             $active={selectedPeriod === 'custom'}\n-            onClick={() => onPeriodChange('custom')}\n+            onClick={() => {\n+              onPeriodChange('custom');\n+              setShowDatePicker(true);\n+            }}\n           >\n             지정\n           </PeriodButton>\n-          \n-          {selectedPeriod === 'custom' && (\n-            <DateRangeInputs>\n-              <DateInput\n-                type=\"date\"\n-                value={customStartDate}\n-                onChange={(e) => onCustomStartDateChange?.(e.target.value)}\n-              />\n-              <DateSeparator>~</DateSeparator>\n-              <DateInput\n-                type=\"date\"\n-                value={customEndDate}\n-                onChange={(e) => onCustomEndDateChange?.(e.target.value)}\n-              />\n-            </DateRangeInputs>\n-          )}\n         </PeriodSection>\n \n         {/* 검색 영역 */}\n         <SearchSection>\n"
                },
                {
                    "date": 1760761593496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,19 +91,19 @@\n   background: ${AppColors.surface};\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n   box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n-  padding: 16px;\n+  padding: 20px;\n   margin-top: 4px;\n-  min-width: 300px;\n+  min-width: 350px;\n   display: ${props => props.$visible ? 'block' : 'none'};\n `;\n \n const DatePickerHeader = styled.div`\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n-  margin-bottom: 12px;\n+  margin-bottom: 16px;\n `;\n \n const DatePickerTitle = styled.h4`\n   margin: 0;\n@@ -114,60 +114,213 @@\n \n const CloseButton = styled.button`\n   background: none;\n   border: none;\n-  font-size: 18px;\n+  font-size: 20px;\n   cursor: pointer;\n   color: ${AppColors.onInput1};\n   padding: 4px;\n+  line-height: 1;\n   \n   &:hover {\n     color: ${AppColors.onSurface};\n   }\n `;\n \n-const PeriodButton = styled.button<{ $active: boolean }>`\n-  padding: 8px 16px;\n-  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n-  border-radius: 8px;\n-  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n-  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n+const CalendarContainer = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 16px;\n+`;\n+\n+const DateSelectionInfo = styled.div`\n+  text-align: center;\n+  padding: 12px;\n+  background: #f8f9fa;\n+  border-radius: 6px;\n   font-size: ${AppTextStyles.body2.fontSize};\n-  font-weight: 500;\n+  color: ${AppColors.onInput1};\n+`;\n+\n+const CalendarGrid = styled.div`\n+  display: grid;\n+  grid-template-columns: repeat(7, 1fr);\n+  gap: 4px;\n+  text-align: center;\n+`;\n+\n+const CalendarHeader = styled.div`\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  margin-bottom: 12px;\n+`;\n+\n+const MonthNavButton = styled.button`\n+  background: none;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 4px;\n+  padding: 6px 10px;\n   cursor: pointer;\n-  transition: all 0.2s;\n+  font-size: ${AppTextStyles.body2.fontSize};\n   \n   &:hover {\n+    background: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n     border-color: ${AppColors.primary};\n-    background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n   }\n `;\n \n-const DateRangeInputs = styled.div`\n+const MonthTitle = styled.div<{ $clickable?: boolean }>`\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  cursor: ${props => props.$clickable ? 'pointer' : 'default'};\n+  padding: 6px 12px;\n+  border-radius: 4px;\n+  \n+  &:hover {\n+    ${props => props.$clickable && `\n+      background: rgba(0, 123, 255, 0.1);\n+    `}\n+  }\n+`;\n+\n+const YearMonthSelector = styled.div<{ $visible: boolean }>`\n+  position: absolute;\n+  top: 40px;\n+  left: 50%;\n+  transform: translateX(-50%);\n+  z-index: 1001;\n+  background: ${AppColors.surface};\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n+  padding: 16px;\n+  display: ${props => props.$visible ? 'block' : 'none'};\n+  min-width: 200px;\n+`;\n+\n+const YearMonthGrid = styled.div`\n   display: flex;\n   gap: 12px;\n   align-items: center;\n-  justify-content: center;\n+  margin-bottom: 12px;\n `;\n \n-const DateInput = styled.input`\n-  padding: 10px 12px;\n+const YearMonthLabel = styled.label`\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  font-weight: 500;\n+  color: ${AppColors.onSurface};\n+  min-width: 30px;\n+`;\n+\n+const YearMonthSelect = styled.select`\n+  flex: 1;\n+  padding: 6px 8px;\n   border: 1px solid ${AppColors.borderLight};\n-  border-radius: 6px;\n+  border-radius: 4px;\n   font-size: ${AppTextStyles.body2.fontSize};\n   outline: none;\n-  flex: 1;\n   \n   &:focus {\n     border-color: ${AppColors.primary};\n   }\n `;\n \n-const DateSeparator = styled.span`\n+const YearMonthApplyButton = styled.button`\n+  width: 100%;\n+  padding: 8px;\n+  border: none;\n+  border-radius: 4px;\n+  background: ${AppColors.primary};\n+  color: ${AppColors.onPrimary};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  font-weight: 500;\n+  cursor: pointer;\n+  \n+  &:hover {\n+    opacity: 0.9;\n+  }\n+`;\n+\n+const DayHeader = styled.div`\n+  padding: 8px 4px;\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  font-weight: 500;\n   color: ${AppColors.onInput1};\n+`;\n+\n+const DayCell = styled.button<{ \n+  $isSelected?: boolean; \n+  $isInRange?: boolean; \n+  $isToday?: boolean;\n+  $isDisabled?: boolean;\n+}>`\n+  padding: 8px 4px;\n+  border: none;\n+  background: ${props => {\n+    if (props.$isSelected) return AppColors.primary;\n+    if (props.$isInRange) return 'rgba(0, 123, 255, 0.1)';\n+    return 'transparent';\n+  }};\n+  color: ${props => {\n+    if (props.$isDisabled) return AppColors.onInput1;\n+    if (props.$isSelected) return AppColors.onPrimary;\n+    if (props.$isToday) return AppColors.primary;\n+    return AppColors.onSurface;\n+  }};\n+  border-radius: 4px;\n+  cursor: ${props => props.$isDisabled ? 'not-allowed' : 'pointer'};\n   font-size: ${AppTextStyles.body2.fontSize};\n+  opacity: ${props => props.$isDisabled ? 0.5 : 1};\n+  \n+  &:hover {\n+    ${props => !props.$isDisabled && !props.$isSelected && `\n+      background: rgba(0, 123, 255, 0.1);\n+    `}\n+  }\n `;\n \n+const ApplyButton = styled.button`\n+  width: 100%;\n+  padding: 12px;\n+  border: none;\n+  border-radius: 6px;\n+  background: ${AppColors.primary};\n+  color: ${AppColors.onPrimary};\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  font-weight: 600;\n+  cursor: pointer;\n+  margin-top: 12px;\n+  \n+  &:hover {\n+    opacity: 0.9;\n+  }\n+  \n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const PeriodButton = styled.button<{ $active: boolean }>`\n+  padding: 8px 16px;\n+  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n+  border-radius: 8px;\n+  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n+  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  font-weight: 500;\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    border-color: ${AppColors.primary};\n+    background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n+  }\n+`;\n+\n const SearchSection = styled.div`\n   display: flex;\n   gap: 12px;\n   align-items: center;\n@@ -234,8 +387,15 @@\n   onSearch,\n   searchPlaceholder = \"검색어를 입력하세요...\"\n }) => {\n   const [showDatePicker, setShowDatePicker] = useState(false);\n+  const [showYearMonthSelector, setShowYearMonthSelector] = useState(false);\n+  const [currentMonth, setCurrentMonth] = useState(new Date());\n+  const [tempStartDate, setTempStartDate] = useState<Date | null>(null);\n+  const [tempEndDate, setTempEndDate] = useState<Date | null>(null);\n+  const [selectingStart, setSelectingStart] = useState(true);\n+  const [tempYear, setTempYear] = useState(new Date().getFullYear());\n+  const [tempMonth, setTempMonth] = useState(new Date().getMonth());\n   const datePickerRef = useRef<HTMLDivElement>(null);\n \n   const handleKeyPress = (e: React.KeyboardEvent) => {\n     if (e.key === 'Enter') {\n@@ -247,8 +407,10 @@\n   useEffect(() => {\n     const handleClickOutside = (event: MouseEvent) => {\n       if (datePickerRef.current && !datePickerRef.current.contains(event.target as Node)) {\n         setShowDatePicker(false);\n+        setShowYearMonthSelector(false);\n+        resetTempDates();\n       }\n     };\n \n     if (showDatePicker) {\n@@ -259,17 +421,157 @@\n       document.removeEventListener('mousedown', handleClickOutside);\n     };\n   }, [showDatePicker]);\n \n+  const resetTempDates = () => {\n+    setTempStartDate(null);\n+    setTempEndDate(null);\n+    setSelectingStart(true);\n+  };\n+\n   const handleDateRangeClick = () => {\n     if (selectedPeriod === 'custom') {\n       setShowDatePicker(!showDatePicker);\n     } else {\n       onPeriodChange('custom');\n       setShowDatePicker(true);\n     }\n+    resetTempDates();\n+    setShowYearMonthSelector(false);\n   };\n \n+  const handleMonthTitleClick = () => {\n+    setTempYear(currentMonth.getFullYear());\n+    setTempMonth(currentMonth.getMonth());\n+    setShowYearMonthSelector(!showYearMonthSelector);\n+  };\n+\n+  const handleYearMonthApply = () => {\n+    setCurrentMonth(new Date(tempYear, tempMonth, 1));\n+    setShowYearMonthSelector(false);\n+  };\n+\n+  const generateYearOptions = () => {\n+    const currentYear = new Date().getFullYear();\n+    const years = [];\n+    for (let i = currentYear - 10; i <= currentYear + 5; i++) {\n+      years.push(i);\n+    }\n+    return years;\n+  };\n+\n+  const monthNames = [\n+    '1월', '2월', '3월', '4월', '5월', '6월',\n+    '7월', '8월', '9월', '10월', '11월', '12월'\n+  ];\n+\n+  const handleDateClick = (date: Date) => {\n+    if (selectingStart) {\n+      setTempStartDate(date);\n+      setTempEndDate(null);\n+      setSelectingStart(false);\n+    } else {\n+      if (tempStartDate && date < tempStartDate) {\n+        // 종료일이 시작일보다 앞서면 시작일을 다시 설정\n+        setTempStartDate(date);\n+        setTempEndDate(null);\n+        setSelectingStart(false);\n+      } else {\n+        setTempEndDate(date);\n+      }\n+    }\n+  };\n+\n+  const handleApplyDates = () => {\n+    if (tempStartDate && tempEndDate) {\n+      const startDateStr = tempStartDate.toISOString().split('T')[0];\n+      const endDateStr = tempEndDate.toISOString().split('T')[0];\n+      onCustomStartDateChange?.(startDateStr);\n+      onCustomEndDateChange?.(endDateStr);\n+      setShowDatePicker(false);\n+      resetTempDates();\n+    }\n+  };\n+\n+  const formatDate = (date: Date) => {\n+    return date.toLocaleDateString('ko-KR', {\n+      month: 'short',\n+      day: 'numeric'\n+    });\n+  };\n+\n+  const isDateInRange = (date: Date) => {\n+    if (!tempStartDate || !tempEndDate) return false;\n+    return date >= tempStartDate && date <= tempEndDate;\n+  };\n+\n+  const isDateSelected = (date: Date) => {\n+    if (!tempStartDate) return false;\n+    if (tempEndDate) {\n+      return date.getTime() === tempStartDate.getTime() || date.getTime() === tempEndDate.getTime();\n+    }\n+    return date.getTime() === tempStartDate.getTime();\n+  };\n+\n+  const renderCalendar = () => {\n+    const year = currentMonth.getFullYear();\n+    const month = currentMonth.getMonth();\n+    const firstDay = new Date(year, month, 1);\n+    const startDate = new Date(firstDay);\n+    startDate.setDate(startDate.getDate() - firstDay.getDay());\n+\n+    const days = [];\n+    const today = new Date();\n+    \n+    // 요일 헤더\n+    const dayHeaders = ['일', '월', '화', '수', '목', '금', '토'];\n+    dayHeaders.forEach(day => {\n+      days.push(\n+        <DayHeader key={`header-${day}`}>\n+          {day}\n+        </DayHeader>\n+      );\n+    });\n+\n+    // 날짜 셀들\n+    for (let i = 0; i < 42; i++) {\n+      const date = new Date(startDate);\n+      date.setDate(startDate.getDate() + i);\n+      \n+      const isCurrentMonth = date.getMonth() === month;\n+      const isToday = date.toDateString() === today.toDateString();\n+      const isSelected = isDateSelected(date);\n+      const isInRange = isDateInRange(date);\n+      \n+      days.push(\n+        <DayCell\n+          key={date.toISOString()}\n+          $isSelected={isSelected}\n+          $isInRange={isInRange}\n+          $isToday={isToday}\n+          $isDisabled={!isCurrentMonth}\n+          onClick={() => isCurrentMonth && handleDateClick(date)}\n+        >\n+          {date.getDate()}\n+        </DayCell>\n+      );\n+    }\n+\n+    return days;\n+  };\n+\n+  const navigateMonth = (direction: 'prev' | 'next') => {\n+    setCurrentMonth(prev => {\n+      const newMonth = new Date(prev);\n+      if (direction === 'prev') {\n+        newMonth.setMonth(prev.getMonth() - 1);\n+      } else {\n+        newMonth.setMonth(prev.getMonth() + 1);\n+      }\n+      return newMonth;\n+    });\n+  };\n+\n   return (\n     <SearchContainer>\n       {/* 메타 정보 영역 */}\n       <MetaRow $hasContent={!!metaContent}>\n@@ -291,26 +593,91 @@\n             {/* 달력 모달 */}\n             <DatePickerModal $visible={showDatePicker}>\n               <DatePickerHeader>\n                 <DatePickerTitle>기간 선택</DatePickerTitle>\n-                <CloseButton onClick={() => setShowDatePicker(false)}>\n+                <CloseButton onClick={() => {\n+                  setShowDatePicker(false);\n+                  setShowYearMonthSelector(false);\n+                  resetTempDates();\n+                }}>\n                   ×\n                 </CloseButton>\n               </DatePickerHeader>\n               \n-              <DateRangeInputs>\n-                <DateInput\n-                  type=\"date\"\n-                  value={customStartDate}\n-                  onChange={(e) => onCustomStartDateChange?.(e.target.value)}\n-                />\n-                <DateSeparator>~</DateSeparator>\n-                <DateInput\n-                  type=\"date\"\n-                  value={customEndDate}\n-                  onChange={(e) => onCustomEndDateChange?.(e.target.value)}\n-                />\n-              </DateRangeInputs>\n+              <CalendarContainer>\n+                {/* 선택 상태 정보 */}\n+                <DateSelectionInfo>\n+                  {tempStartDate && !tempEndDate && \"종료일을 선택하세요\"}\n+                  {tempStartDate && tempEndDate && \n+                    `${formatDate(tempStartDate)} ~ ${formatDate(tempEndDate)}`\n+                  }\n+                  {!tempStartDate && \"시작일을 선택하세요\"}\n+                </DateSelectionInfo>\n+                \n+                {/* 월 네비게이션 */}\n+                <CalendarHeader style={{ position: 'relative' }}>\n+                  <MonthNavButton onClick={() => navigateMonth('prev')}>\n+                    ‹\n+                  </MonthNavButton>\n+                  <MonthTitle \n+                    $clickable={true}\n+                    onClick={handleMonthTitleClick}\n+                  >\n+                    {currentMonth.getFullYear()}년 {currentMonth.getMonth() + 1}월\n+                  </MonthTitle>\n+                  <MonthNavButton onClick={() => navigateMonth('next')}>\n+                    ›\n+                  </MonthNavButton>\n+                  \n+                  {/* 년/월 선택 드롭다운 */}\n+                  <YearMonthSelector $visible={showYearMonthSelector}>\n+                    <YearMonthGrid>\n+                      <YearMonthLabel>년:</YearMonthLabel>\n+                      <YearMonthSelect\n+                        value={tempYear}\n+                        onChange={(e) => setTempYear(Number(e.target.value))}\n+                      >\n+                        {generateYearOptions().map(year => (\n+                          <option key={year} value={year}>\n+                            {year}\n+                          </option>\n+                        ))}\n+                      </YearMonthSelect>\n+                    </YearMonthGrid>\n+                    \n+                    <YearMonthGrid>\n+                      <YearMonthLabel>월:</YearMonthLabel>\n+                      <YearMonthSelect\n+                        value={tempMonth}\n+                        onChange={(e) => setTempMonth(Number(e.target.value))}\n+                      >\n+                        {monthNames.map((month, index) => (\n+                          <option key={index} value={index}>\n+                            {month}\n+                          </option>\n+                        ))}\n+                      </YearMonthSelect>\n+                    </YearMonthGrid>\n+                    \n+                    <YearMonthApplyButton onClick={handleYearMonthApply}>\n+                      적용\n+                    </YearMonthApplyButton>\n+                  </YearMonthSelector>\n+                </CalendarHeader>\n+                \n+                {/* 달력 그리드 */}\n+                <CalendarGrid>\n+                  {renderCalendar()}\n+                </CalendarGrid>\n+                \n+                {/* 적용 버튼 */}\n+                <ApplyButton \n+                  onClick={handleApplyDates}\n+                  disabled={!tempStartDate || !tempEndDate}\n+                >\n+                  적용\n+                </ApplyButton>\n+              </CalendarContainer>\n             </DatePickerModal>\n           </div>\n           \n           <PeriodButton \n"
                },
                {
                    "date": 1760761813193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,11 @@\n   searchValue: string;\n   onSearchChange: (value: string) => void;\n   onSearch: () => void;\n   searchPlaceholder?: string;\n+  \n+  // 자동 검색 옵션\n+  autoSearchOnDateChange?: boolean;\n }\n \n const SearchContainer = styled.div`\n   background: ${AppColors.surface};\n@@ -384,9 +387,10 @@\n   dateRangeDisplay,\n   searchValue,\n   onSearchChange,\n   onSearch,\n-  searchPlaceholder = \"검색어를 입력하세요...\"\n+  searchPlaceholder = \"검색어를 입력하세요...\",\n+  autoSearchOnDateChange = false\n }) => {\n   const [showDatePicker, setShowDatePicker] = useState(false);\n   const [showYearMonthSelector, setShowYearMonthSelector] = useState(false);\n   const [currentMonth, setCurrentMonth] = useState(new Date());\n@@ -488,8 +492,15 @@\n       onCustomStartDateChange?.(startDateStr);\n       onCustomEndDateChange?.(endDateStr);\n       setShowDatePicker(false);\n       resetTempDates();\n+      \n+      // 자동 검색 옵션이 켜져있으면 적용과 동시에 검색 실행\n+      if (autoSearchOnDateChange) {\n+        setTimeout(() => {\n+          onSearch();\n+        }, 100); // 약간의 지연을 줘서 상태 업데이트 완료 후 검색\n+      }\n     }\n   };\n \n   const formatDate = (date: Date) => {\n@@ -684,8 +695,11 @@\n             $active={selectedPeriod === '1month'}\n             onClick={() => {\n               onPeriodChange('1month');\n               setShowDatePicker(false);\n+              if (autoSearchOnDateChange) {\n+                setTimeout(() => onSearch(), 100);\n+              }\n             }}\n           >\n             1개월\n           </PeriodButton>\n@@ -694,8 +708,11 @@\n             $active={selectedPeriod === '3month'}\n             onClick={() => {\n               onPeriodChange('3month');\n               setShowDatePicker(false);\n+              if (autoSearchOnDateChange) {\n+                setTimeout(() => onSearch(), 100);\n+              }\n             }}\n           >\n             3개월\n           </PeriodButton>\n@@ -704,8 +721,11 @@\n             $active={selectedPeriod === '6month'}\n             onClick={() => {\n               onPeriodChange('6month');\n               setShowDatePicker(false);\n+              if (autoSearchOnDateChange) {\n+                setTimeout(() => onSearch(), 100);\n+              }\n             }}\n           >\n             6개월\n           </PeriodButton>\n@@ -714,8 +734,9 @@\n             $active={selectedPeriod === 'custom'}\n             onClick={() => {\n               onPeriodChange('custom');\n               setShowDatePicker(true);\n+              // custom은 날짜 선택 후 적용 버튼에서 자동 검색 처리\n             }}\n           >\n             지정\n           </PeriodButton>\n"
                },
                {
                    "date": 1760761975192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,23 +61,27 @@\n `;\n \n const PeriodSection = styled.div`\n   display: flex;\n-  gap: 12px;\n+  gap: 8px;\n   align-items: center;\n   flex-wrap: wrap;\n `;\n \n const PeriodDisplay = styled.div<{ $clickable?: boolean }>`\n   font-size: ${AppTextStyles.body2.fontSize};\n   color: ${AppColors.onInput1};\n   background: #f8f9fa;\n-  padding: 8px 12px;\n-  border-radius: 6px;\n+  padding: 12px;\n+  border-radius: 8px;\n   border: 1px solid ${AppColors.borderLight};\n   min-width: 200px;\n   cursor: ${props => props.$clickable ? 'pointer' : 'default'};\n   position: relative;\n+  height: 43px; /* 검색 input과 동일한 전체 높이 */\n+  box-sizing: border-box;\n+  display: flex;\n+  align-items: center;\n   \n   &:hover {\n     ${props => props.$clickable && `\n       border-color: ${AppColors.primary};\n@@ -306,17 +310,22 @@\n   }\n `;\n \n const PeriodButton = styled.button<{ $active: boolean }>`\n-  padding: 8px 16px;\n+  padding: 12px 16px;\n   border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n   border-radius: 8px;\n   background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n   color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n   font-size: ${AppTextStyles.body2.fontSize};\n   font-weight: 500;\n   cursor: pointer;\n   transition: all 0.2s;\n+  height: 43px; /* 검색 input과 동일한 전체 높이 */\n+  box-sizing: border-box;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n   \n   &:hover {\n     border-color: ${AppColors.primary};\n     background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n@@ -362,8 +371,13 @@\n   font-weight: 600;\n   cursor: pointer;\n   transition: all 0.2s;\n   white-space: nowrap;\n+  height: 43px; /* 검색 input과 동일한 전체 높이 */\n+  box-sizing: border-box;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n   \n   &:hover {\n     opacity: 0.9;\n     transform: translateY(-1px);\n"
                }
            ],
            "date": 1760760936031,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../styles/colors';\nimport { AppTextStyles } from '../../styles/textStyles';\n\n// 기간 옵션 타입\nexport type PeriodOption = '1month' | '3month' | '6month' | 'custom';\n\n// Props 타입 정의\ninterface SearchAreaProps {\n  // 메타 정보 영역 (선택적)\n  metaContent?: React.ReactNode;\n  \n  // 기간 선택 관련\n  selectedPeriod: PeriodOption;\n  onPeriodChange: (period: PeriodOption) => void;\n  customStartDate?: string;\n  customEndDate?: string;\n  onCustomStartDateChange?: (date: string) => void;\n  onCustomEndDateChange?: (date: string) => void;\n  dateRangeDisplay: string;\n  \n  // 검색 관련\n  searchValue: string;\n  onSearchChange: (value: string) => void;\n  onSearch: () => void;\n  searchPlaceholder?: string;\n}\n\nconst SearchContainer = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  padding: 20px 24px;\n  margin-bottom: 24px;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n`;\n\nconst MetaRow = styled.div<{ $hasContent: boolean }>`\n  display: ${props => props.$hasContent ? 'flex' : 'none'};\n  gap: 12px;\n  align-items: center;\n  margin-bottom: 16px;\n  flex-wrap: wrap;\n`;\n\nconst MainRow = styled.div`\n  display: flex;\n  gap: 20px;\n  align-items: center;\n  flex-wrap: wrap;\n  \n  @media (max-width: 768px) {\n    flex-direction: column;\n    gap: 16px;\n    align-items: stretch;\n  }\n`;\n\nconst PeriodSection = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst PeriodLabel = styled.span`\n  font-size: ${AppTextStyles.label2.fontSize};\n  color: ${AppColors.onSurface};\n  font-weight: 500;\n  min-width: 40px;\n`;\n\nconst PeriodDisplay = styled.div`\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onInput1};\n  background: #f8f9fa;\n  padding: 8px 12px;\n  border-radius: 6px;\n  border: 1px solid ${AppColors.borderLight};\n  min-width: 200px;\n`;\n\nconst PeriodButton = styled.button<{ $active: boolean }>`\n  padding: 8px 16px;\n  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n  border-radius: 8px;\n  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n  font-size: ${AppTextStyles.body2.fontSize};\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    border-color: ${AppColors.primary};\n    background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n  }\n`;\n\nconst DateRangeInputs = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n`;\n\nconst DateInput = styled.input`\n  padding: 8px 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 6px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  outline: none;\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n`;\n\nconst DateSeparator = styled.span`\n  color: ${AppColors.onInput1};\n  font-size: ${AppTextStyles.body2.fontSize};\n`;\n\nconst SearchSection = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: center;\n  flex: 1;\n  min-width: 300px;\n  \n  @media (max-width: 768px) {\n    min-width: auto;\n  }\n`;\n\nconst SearchInput = styled.input`\n  flex: 1;\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  outline: none;\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst SearchButton = styled.button`\n  padding: 12px 18px;\n  border: none;\n  border-radius: 8px;\n  background: ${AppColors.primary};\n  color: ${AppColors.onPrimary};\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n  white-space: nowrap;\n  \n  &:hover {\n    opacity: 0.9;\n    transform: translateY(-1px);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst SearchArea: React.FC<SearchAreaProps> = ({\n  metaContent,\n  selectedPeriod,\n  onPeriodChange,\n  customStartDate = '',\n  customEndDate = '',\n  onCustomStartDateChange,\n  onCustomEndDateChange,\n  dateRangeDisplay,\n  searchValue,\n  onSearchChange,\n  onSearch,\n  searchPlaceholder = \"검색어를 입력하세요...\"\n}) => {\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      onSearch();\n    }\n  };\n\n  return (\n    <SearchContainer>\n      {/* 메타 정보 영역 */}\n      <MetaRow $hasContent={!!metaContent}>\n        {metaContent}\n      </MetaRow>\n\n      {/* 메인 검색 영역 */}\n      <MainRow>\n        {/* 기간 선택 영역 */}\n        <PeriodSection>\n          <PeriodLabel>범위:</PeriodLabel>\n          <PeriodDisplay>{dateRangeDisplay}</PeriodDisplay>\n          \n          <PeriodButton \n            $active={selectedPeriod === '1month'}\n            onClick={() => onPeriodChange('1month')}\n          >\n            1개월\n          </PeriodButton>\n          \n          <PeriodButton \n            $active={selectedPeriod === '3month'}\n            onClick={() => onPeriodChange('3month')}\n          >\n            3개월\n          </PeriodButton>\n          \n          <PeriodButton \n            $active={selectedPeriod === '6month'}\n            onClick={() => onPeriodChange('6month')}\n          >\n            6개월\n          </PeriodButton>\n          \n          <PeriodButton \n            $active={selectedPeriod === 'custom'}\n            onClick={() => onPeriodChange('custom')}\n          >\n            지정\n          </PeriodButton>\n          \n          {selectedPeriod === 'custom' && (\n            <DateRangeInputs>\n              <DateInput\n                type=\"date\"\n                value={customStartDate}\n                onChange={(e) => onCustomStartDateChange?.(e.target.value)}\n              />\n              <DateSeparator>~</DateSeparator>\n              <DateInput\n                type=\"date\"\n                value={customEndDate}\n                onChange={(e) => onCustomEndDateChange?.(e.target.value)}\n              />\n            </DateRangeInputs>\n          )}\n        </PeriodSection>\n\n        {/* 검색 영역 */}\n        <SearchSection>\n          <SearchInput\n            value={searchValue}\n            onChange={(e) => onSearchChange(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder={searchPlaceholder}\n          />\n          <SearchButton onClick={onSearch}>\n            조회\n          </SearchButton>\n        </SearchSection>\n      </MainRow>\n    </SearchContainer>\n  );\n};\n\nexport default SearchArea;\n"
        }
    ]
}