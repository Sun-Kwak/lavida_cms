{
    "sourceFile": "src/components/TextField.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757743163643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757743163643,
            "name": "Commit-0",
            "content": "'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { AppColors } from '../styles/colors';\nimport { DeviceType } from '../types/device';\nimport { useDevice } from '../context/DeviceContext';\nimport { StyledInput, StyledTextarea } from '../elements/InputElement';\nimport { InputStyles, LabelStyles } from '../constants/componentConstants';\n\nconst Label = styled.label<{ $labelPosition: 'vertical' | 'horizontal' | 'outlined' }>`\n  margin-left: 8px;\n  margin-bottom: ${({ $labelPosition }) => ($labelPosition === 'vertical' ? '8px' : '0')};\n  flex: ${({ $labelPosition }) => ($labelPosition === 'horizontal' ? '1' : 'none')};\n`;\n\nconst OutlinedLabel = styled.label<{ \n  $device: DeviceType; \n  $hasValue: boolean; \n  $isFocused: boolean;\n  $labelBackgroundColor?: string;\n  $labelTextColor?: string;\n  $errorLabelColor?: string;\n  $readOnlyLabelColor?: string;\n  $hasError?: boolean;\n  $isReadOnly?: boolean;\n  $labelColor?: string;\n}>`\n  position: absolute;\n  left: 12px;\n  top: ${({ $hasValue, $isFocused, $hasError }) => ($hasValue || $isFocused || $hasError ? '-8px' : '50%')};\n  transform: ${({ $hasValue, $isFocused, $hasError }) => ($hasValue || $isFocused || $hasError ? 'translateY(0)' : 'translateY(-50%)')};\n  background-color: ${({ $hasValue, $isFocused, $hasError, $labelBackgroundColor }) => \n    ($hasValue || $isFocused || $hasError) ? ($labelBackgroundColor || 'white') : 'transparent'};\n  padding: 0 4px;\n  font-size: ${({ $hasValue, $isFocused, $hasError, $device }) => {\n    const baseSize = $device === 'mobile' ? '14px' : '16px';\n    return ($hasValue || $isFocused || $hasError) ? '12px' : baseSize;\n  }};\n  color: ${({ $hasError, $isReadOnly, $labelTextColor, $errorLabelColor, $readOnlyLabelColor, $labelColor }) => {\n    if ($hasError && $errorLabelColor) return $errorLabelColor;\n    if ($isReadOnly && $readOnlyLabelColor) return $readOnlyLabelColor;\n    if ($labelColor) return $labelColor;\n    if ($labelTextColor) return $labelTextColor;\n    return AppColors.primary;\n  }};\n  transition: all 0.2s ease-in-out;\n  cursor: text;\n  z-index: 1;\n`;\n\nconst Container = styled.div<{ $device: DeviceType; $labelPosition: 'vertical' | 'horizontal' | 'outlined' }>`\n  display: flex;\n  flex-direction: ${({ $labelPosition }) => ($labelPosition === 'vertical' ? 'column' : 'row')};\n  width: 100%;\n  padding: ${({ $device }) => InputStyles.containerPadding[$device]};\n  align-items: ${({ $labelPosition }) => ($labelPosition === 'horizontal' ? 'center' : 'flex-start')};\n  position: ${({ $labelPosition }) => ($labelPosition === 'outlined' ? 'relative' : 'static')};\n`;\n\nconst InputWrapper = styled.div<{ $labelPosition: 'vertical' | 'horizontal' | 'outlined'; $hasRightElement?: boolean }>`\n  display: flex;\n  flex-direction: column;\n  flex: ${({ $labelPosition }) => ($labelPosition === 'horizontal' ? '5' : '1')};\n  width: ${({ $labelPosition }) => ($labelPosition === 'horizontal' ? 'auto' : '100%')};\n  position: ${({ $labelPosition }) => ($labelPosition === 'outlined' ? 'relative' : 'static')};\n`;\n\nconst InputSection = styled.div<{ $labelPosition: 'vertical' | 'horizontal' | 'outlined' }>`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  position: ${({ $labelPosition }) => ($labelPosition === 'outlined' ? 'relative' : 'static')};\n`;\n\nconst InputWithRightElementWrapper = styled.div<{ $hasRightElement?: boolean }>`\n  display: flex;\n  flex-direction: ${({ $hasRightElement }) => $hasRightElement ? 'row' : 'column'};\n  align-items: ${({ $hasRightElement }) => $hasRightElement ? 'center' : 'stretch'};\n  width: 100%;\n`;\n\nconst InputFieldWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  width: 100%;\n`;\n\nconst ErrorText = styled.span<{ $errorColor?: string }>`\n  color: ${({ $errorColor }) => $errorColor || AppColors.error};\n  font-size: 12px;\n  margin-top: 4px;\n  margin-left: 4px;\n  display: block;\n  text-align: left;\n  width: 100%;\n`;\n\nconst SuffixIconWrapper = styled.div<{\n  $isPasswordVisible?: boolean;\n  $device: DeviceType;\n}>`\n  position: absolute;\n  right: ${({ $device }) => InputStyles.suffixIconRight[$device]};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  color: ${({ $isPasswordVisible }) =>\n    $isPasswordVisible ? AppColors.iconPrimary : AppColors.iconDisabled};\n`;\n\nconst RightElementWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 12px;\n  flex-shrink: 0;\n  height: 48px; /* input의 기본 높이와 맞춤 */\n`;\n\nexport interface TextFieldProps {\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n  placeholder?: string;\n  errorMessage?: string;\n  showSuffixIcon?: boolean;\n  isPasswordField?: boolean;\n  readOnly?: boolean;\n  background?: string;\n  border?: string; \n  multiline?: boolean;\n  minLines?: number;\n  maxLines?: number;\n\n  radius?: string;\n  fontSize?: string;\n  height?: string;\n  padding?: string;\n  paddingRight?: string;\n  label?: string;\n  labelColor?: string;\n  $labelPosition?: 'vertical' | 'horizontal' | 'outlined';\n  type?: string; // 추가: type 속성\n  inputMode?: 'text' | 'search' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal';\n  $readOnlyBackground?: string; // 추가\n  $readOnlyColor?: string;      // 추가\n\n  autoComplete?: string;\n  autoFocus?: boolean;\n  \n  // 우측 요소 (버튼, 카운터 등)\n  rightElement?: React.ReactNode;\n  \n  // AppTextField용 색상 커스터마이징 props\n  borderColor?: string;\n  focusBorderColor?: string;\n  placeholderColor?: string;\n  labelBackgroundColor?: string;\n  labelTextColor?: string;\n  inputTextColor?: string;\n  errorBorderColor?: string;\n  errorLabelColor?: string;\n  readOnlyBorderColor?: string;\n  readOnlyLabelColor?: string;\n  readOnlyTextColor?: string;\n}\n\nexport const TextField = ({\n  value,\n  onChange,\n  placeholder,\n  errorMessage,\n  showSuffixIcon,\n  isPasswordField = false,\n  readOnly = false,\n  background,\n  border,\n\n  multiline = false,\n  minLines,\n  maxLines,\n\n  radius,\n  fontSize,\n  height,\n  padding,\n  paddingRight,\n  label,\n  labelColor,\n  $labelPosition = 'vertical',\n  autoComplete,\n  type = 'text', // 기본값을 'text'로 설정\n  inputMode = 'text', // 기본값을 'text'로 설정\n\n  $readOnlyBackground,\n  $readOnlyColor,\n  autoFocus = false,\n  \n  // 우측 요소\n  rightElement,\n  \n  // AppTextField용 색상 props\n  borderColor,\n  focusBorderColor,\n  placeholderColor,\n  labelBackgroundColor,\n  labelTextColor,\n  inputTextColor,\n  errorBorderColor,\n  errorLabelColor,\n  readOnlyBorderColor,\n  readOnlyLabelColor,\n  readOnlyTextColor,\n}: TextFieldProps) => {\n  const device = useDevice();\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleToggleVisibility = () => setIsPasswordVisible((prev) => !prev);\n\n  // 라벨 클릭 시 input에 포커스\n  const handleLabelClick = () => {\n    if (!readOnly && containerRef.current) {\n      const input = containerRef.current.querySelector('input, textarea') as HTMLInputElement | HTMLTextAreaElement;\n      if (input) {\n        input.focus();\n      }\n    }\n  };\n\n\n  // iOS에서 autoFocus 작동을 위한 useEffect\n  useEffect(() => {\n    if (autoFocus && !readOnly && containerRef.current) {\n      const timer = setTimeout(() => {\n        const input = containerRef.current?.querySelector('input, textarea') as HTMLInputElement | HTMLTextAreaElement;\n        if (input) {\n          input.focus();\n        }\n      }, 100); // 약간의 딜레이 추가\n      \n      return () => clearTimeout(timer);\n    }\n  }, [autoFocus, readOnly]);\n\n  const resolvedInputType = isPasswordField && !isPasswordVisible ? 'password' : 'text';\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setIsFocused(true);\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setIsFocused(false);\n  };\n\n  const commonProps = {\n    value,\n    onChange,\n    placeholder: (() => {\n      // outlined 라벨이 있고, 라벨이 input 내부에 있을 때는 placeholder 숨김\n      if ($labelPosition === 'outlined' && label && !value && !isFocused && !errorMessage) {\n        return '';\n      }\n      return placeholder;\n    })(),\n    radius,\n    fontSize,\n    background,\n    height,\n    border: (() => {\n      if (errorMessage && errorBorderColor) return `1px solid ${errorBorderColor}`;\n      if (readOnly && readOnlyBorderColor) return `1px solid ${readOnlyBorderColor}`;\n      if (borderColor) return `1px solid ${borderColor}`;\n      return border;\n    })(),\n    padding,\n    paddingRight,\n    readOnly,\n    $hasSuffix: !!(showSuffixIcon && isPasswordField),\n    $device: device,\n    autoComplete,\n    type: resolvedInputType,\n    inputMode,\n    $readOnlyBackground,\n    $readOnlyColor,\n    autoFocus,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    style: {\n      color: (() => {\n        if (readOnly && readOnlyTextColor) return readOnlyTextColor;\n        if (inputTextColor) return inputTextColor;\n        return undefined;\n      })(),\n    }\n  };\n\n  // styled-components 전용 props\n  const styledProps = {\n    placeholderColor,\n    focusBorderColor: (() => {\n      if (errorMessage && errorBorderColor) return errorBorderColor;\n      if (readOnly && readOnlyBorderColor) return readOnlyBorderColor;\n      if (focusBorderColor) return focusBorderColor;\n      return undefined;\n    })(),\n  };\n\n  return (\n    <Container ref={containerRef} $device={device} $labelPosition={$labelPosition}>\n      {label && $labelPosition !== 'outlined' && (\n        <Label\n          $labelPosition={$labelPosition}\n          style={{\n            fontSize: LabelStyles.fontSize[device],\n            color: labelColor || LabelStyles.color,\n          }}\n        >\n          {label}\n        </Label>\n      )}\n\n      <InputWrapper $labelPosition={$labelPosition} $hasRightElement={!!rightElement}>\n        {label && $labelPosition === 'outlined' && (\n          <OutlinedLabel\n            $device={device}\n            $hasValue={!!value}\n            $isFocused={isFocused}\n            $labelBackgroundColor={labelBackgroundColor}\n            $labelTextColor={labelTextColor}\n            $errorLabelColor={errorLabelColor}\n            $readOnlyLabelColor={readOnlyLabelColor}\n            $hasError={!!errorMessage}\n            $isReadOnly={readOnly}\n            $labelColor={labelColor}\n            onClick={handleLabelClick}\n          >\n            {label}\n          </OutlinedLabel>\n        )}\n        \n        <InputWithRightElementWrapper $hasRightElement={!!rightElement}>\n          <InputSection $labelPosition={$labelPosition}>\n            <InputFieldWrapper>\n              {multiline ? (\n                <StyledTextarea\n                  {...commonProps}\n                  {...styledProps}\n                  rows={minLines || 1}\n                  resize=\"none\"\n                />\n              ) : (\n                <>\n                  <StyledInput\n                    {...commonProps}\n                    {...styledProps}\n                    type={resolvedInputType}\n                  />\n                  {showSuffixIcon && isPasswordField && (\n                    <SuffixIconWrapper\n                      onClick={handleToggleVisibility}\n                      $isPasswordVisible={isPasswordVisible}\n                      $device={device}\n                    >\n                      {isPasswordVisible ? <VisibilityOff /> : <Visibility />}\n                    </SuffixIconWrapper>\n                  )}\n                </>\n              )}\n            </InputFieldWrapper>\n          </InputSection>\n\n          {rightElement && (\n            <RightElementWrapper>\n              {rightElement}\n            </RightElementWrapper>\n          )}\n        </InputWithRightElementWrapper>\n\n        {errorMessage && <ErrorText $errorColor={errorBorderColor}>{errorMessage}</ErrorText>}\n      </InputWrapper>\n    </Container>\n  );\n};\n"
        }
    ]
}