{
    "sourceFile": "src/components/DaumAddressSearch.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1760248357527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760248513902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,10 @@\n   border: 1px solid #ddd;\n   border-radius: 4px;\n   font-size: 14px;\n   box-sizing: border-box;\n+  cursor: pointer;\n+  background-color: white;\n   \n   &:focus {\n     outline: none;\n     border-color: #007bff;\n@@ -29,9 +31,14 @@\n   \n   &:disabled {\n     background-color: #f5f5f5;\n     color: #999;\n+    cursor: not-allowed;\n   }\n+  \n+  &:hover:not(:disabled) {\n+    border-color: #007bff;\n+  }\n `;\n \n const SearchButton = styled.button`\n   position: absolute;\n@@ -72,9 +79,9 @@\n }\n \n const DaumAddressSearch: React.FC<DaumAddressSearchProps> = ({\n   onAddressSelect,\n-  placeholder = \"주소를 검색하세요\",\n+  placeholder = \"클릭하여 주소를 검색하세요\",\n   disabled = false,\n   value = \"\"\n }) => {\n   const [address, setAddress] = useState(value);\n@@ -144,18 +151,29 @@\n       onresize: function(size: any) {\n         // 팝업 크기 조정 시 처리할 내용\n       },\n       width: '100%',\n-      height: '100%'\n+      height: '100%',\n+      theme: {\n+        bgColor: \"#FFFFFF\", // 배경색\n+        searchBgColor: \"#0B65C8\", // 검색창 배경색\n+        contentBgColor: \"#FFFFFF\", // 본문 배경색\n+        pageBgColor: \"#FAFAFA\", // 페이지 배경색\n+        textColor: \"#333333\", // 기본 글자색\n+        queryTextColor: \"#FFFFFF\", // 검색창 글자색\n+        postcodeTextColor: \"#FA4256\", // 우편번호 글자색\n+        emphTextColor: \"#008BD3\", // 강조 글자색\n+        outlineColor: \"#E0E0E0\" // 테두리\n+      }\n     }).open();\n   };\n \n   return (\n     <SearchContainer>\n       <SearchInput\n         type=\"text\"\n         value={address}\n-        onChange={(e) => setAddress(e.target.value)}\n+        onClick={handleSearch}\n         placeholder={placeholder}\n         disabled={disabled}\n         readOnly\n       />\n"
                }
            ],
            "date": 1760248357527,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { AddressInfo } from '../pages/CMS/Member/types';\n\ninterface DaumAddressSearchProps {\n  onAddressSelect: (addressInfo: AddressInfo) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  value?: string;\n}\n\nconst SearchContainer = styled.div`\n  position: relative;\n  width: 100%;\n`;\n\nconst SearchInput = styled.input`\n  width: 100%;\n  padding: 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n  box-sizing: border-box;\n  \n  &:focus {\n    outline: none;\n    border-color: #007bff;\n  }\n  \n  &:disabled {\n    background-color: #f5f5f5;\n    color: #999;\n  }\n`;\n\nconst SearchButton = styled.button`\n  position: absolute;\n  right: 8px;\n  top: 50%;\n  transform: translateY(-50%);\n  padding: 6px 12px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 12px;\n  \n  &:hover {\n    background-color: #0056b3;\n  }\n  \n  &:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n  }\n`;\n\nconst AddressDetails = styled.div`\n  margin-top: 8px;\n  padding: 8px;\n  background-color: #f8f9fa;\n  border-radius: 4px;\n  font-size: 12px;\n  color: #666;\n`;\n\ndeclare global {\n  interface Window {\n    daum: any;\n  }\n}\n\nconst DaumAddressSearch: React.FC<DaumAddressSearchProps> = ({\n  onAddressSelect,\n  placeholder = \"주소를 검색하세요\",\n  disabled = false,\n  value = \"\"\n}) => {\n  const [address, setAddress] = useState(value);\n  const [addressDetails, setAddressDetails] = useState<AddressInfo | null>(null);\n  const [isScriptLoaded, setIsScriptLoaded] = useState(false);\n\n  useEffect(() => {\n    setAddress(value);\n  }, [value]);\n\n  useEffect(() => {\n    // Daum 우편번호 서비스 스크립트 로드\n    const loadDaumScript = () => {\n      if (window.daum && window.daum.Postcode) {\n        setIsScriptLoaded(true);\n        return;\n      }\n\n      const script = document.createElement('script');\n      script.src = '//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js';\n      script.async = true;\n      script.onload = () => {\n        setIsScriptLoaded(true);\n      };\n      script.onerror = () => {\n        console.error('Daum 우편번호 서비스 스크립트 로드 실패');\n      };\n      document.head.appendChild(script);\n    };\n\n    loadDaumScript();\n  }, []);\n\n  const handleSearch = () => {\n    if (!isScriptLoaded || !window.daum || !window.daum.Postcode) {\n      alert('주소 검색 서비스를 불러오는 중입니다. 잠시 후 다시 시도해주세요.');\n      return;\n    }\n\n    new window.daum.Postcode({\n      oncomplete: function(data: any) {\n        console.log('Daum 주소 데이터:', data); // 디버깅용 로그\n        \n        // 도로명 주소 또는 지번 주소 선택\n        const fullAddress = data.userSelectedType === 'R' ? data.roadAddress : data.jibunAddress;\n        \n        // 시군구 코드는 법정동 코드에서 추출 (앞 5자리)\n        const sigunguCode = data.bcode ? data.bcode.substring(0, 5) : '';\n        \n        // 동 정보는 법정동명 우선, 없으면 행정동명\n        const dong = data.bname || data.hname || '';\n\n        const addressInfo: AddressInfo = {\n          address: fullAddress,\n          sigunguCode: sigunguCode,\n          dong: dong,\n          roadAddress: data.roadAddress || '',\n          jibunAddress: data.jibunAddress || ''\n        };\n\n        console.log('추출된 주소 정보:', addressInfo); // 디버깅용 로그\n\n        setAddress(fullAddress);\n        setAddressDetails(addressInfo);\n        onAddressSelect(addressInfo);\n      },\n      onresize: function(size: any) {\n        // 팝업 크기 조정 시 처리할 내용\n      },\n      width: '100%',\n      height: '100%'\n    }).open();\n  };\n\n  return (\n    <SearchContainer>\n      <SearchInput\n        type=\"text\"\n        value={address}\n        onChange={(e) => setAddress(e.target.value)}\n        placeholder={placeholder}\n        disabled={disabled}\n        readOnly\n      />\n      <SearchButton\n        type=\"button\"\n        onClick={handleSearch}\n        disabled={disabled || !isScriptLoaded}\n      >\n        {!isScriptLoaded ? '로딩중...' : '주소검색'}\n      </SearchButton>\n      \n      {addressDetails && (\n        <AddressDetails>\n          <div><strong>도로명:</strong> {addressDetails.roadAddress}</div>\n          <div><strong>지번:</strong> {addressDetails.jibunAddress}</div>\n          <div><strong>시군구코드:</strong> {addressDetails.sigunguCode} (법정동코드 앞 5자리)</div>\n          <div><strong>동 정보:</strong> {addressDetails.dong}</div>\n        </AddressDetails>\n      )}\n    </SearchContainer>\n  );\n};\n\nexport default DaumAddressSearch;\n"
        }
    ]
}