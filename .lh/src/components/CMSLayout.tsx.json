{
    "sourceFile": "src/components/CMSLayout.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1757828417756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757829599715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React from 'react';\n+import React, { useState } from 'react';\n import styled from 'styled-components';\n import CMSAppBar from './CMSAppBar';\n import { AppColors } from '../styles/colors';\n \n@@ -7,20 +7,19 @@\n   min-height: 100vh;\n   background-color: ${AppColors.background};\n `;\n \n-const ContentContainer = styled.main`\n-  padding-top: 64px; /* AppBar 높이만큼 상단 패딩 */\n-  min-height: calc(100vh - 64px);\n-  padding-left: 24px;\n-  padding-right: 24px;\n+const ContentContainer = styled.main<{ $appBarHeight: number }>`\n+  padding-top: ${props => props.$appBarHeight}px; /* AppBar 실제 높이만큼 상단 패딩 */\n+  min-height: calc(100vh - ${props => props.$appBarHeight}px);\n+  padding-left: 0; /* 사이드바가 없으므로 좌측 패딩 제거 */\n+  padding-right: 0; /* 우측 패딩도 제거하여 전체 너비 활용 */\n   padding-bottom: 24px;\n `;\n \n const ContentWrapper = styled.div`\n-  max-width: 1200px;\n-  margin: 0 auto;\n-  padding-top: 24px;\n+  width: 100%; /* 전체 너비 사용 */\n+  padding: 24px; /* 내부 콘텐츠 여백은 여기서 처리 */\n `;\n \n interface CMSLayoutProps {\n   children: React.ReactNode;\n@@ -32,15 +31,22 @@\n   children, \n   currentPath, \n   onMenuClick \n }) => {\n+  const [appBarHeight, setAppBarHeight] = useState<number>(64); // 기본값 64px\n+\n+  const handleAppBarHeightChange = (height: number) => {\n+    setAppBarHeight(height);\n+  };\n+\n   return (\n     <LayoutContainer>\n       <CMSAppBar \n         currentPath={currentPath} \n-        onMenuClick={onMenuClick} \n+        onMenuClick={onMenuClick}\n+        onHeightChange={handleAppBarHeightChange}\n       />\n-      <ContentContainer>\n+      <ContentContainer $appBarHeight={appBarHeight}>\n         <ContentWrapper>\n           {children}\n         </ContentWrapper>\n       </ContentContainer>\n"
                },
                {
                    "date": 1757829768993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n \n const ContentWrapper = styled.div`\n   width: 100%; /* 전체 너비 사용 */\n   padding: 24px; /* 내부 콘텐츠 여백은 여기서 처리 */\n+  box-sizing: border-box; /* 패딩이 너비에 포함되도록 */\n `;\n \n interface CMSLayoutProps {\n   children: React.ReactNode;\n"
                },
                {
                    "date": 1759895795255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,19 +2,28 @@\n import styled from 'styled-components';\n import CMSAppBar from './CMSAppBar';\n import { AppColors } from '../styles/colors';\n \n+// 전체 CMS를 감싸는 최소 너비 컨테이너\n+const CMSContainer = styled.div`\n+  min-width: 1200px;\n+  width: 100%;\n+  overflow-x: auto;\n+`;\n+\n const LayoutContainer = styled.div`\n   min-height: 100vh;\n   background-color: ${AppColors.background};\n+  width: 100%;\n `;\n \n const ContentContainer = styled.main<{ $appBarHeight: number }>`\n   padding-top: ${props => props.$appBarHeight}px; /* AppBar 실제 높이만큼 상단 패딩 */\n   min-height: calc(100vh - ${props => props.$appBarHeight}px);\n   padding-left: 0; /* 사이드바가 없으므로 좌측 패딩 제거 */\n   padding-right: 0; /* 우측 패딩도 제거하여 전체 너비 활용 */\n   padding-bottom: 24px;\n+  width: 100%;\n `;\n \n const ContentWrapper = styled.div`\n   width: 100%; /* 전체 너비 사용 */\n@@ -39,20 +48,22 @@\n     setAppBarHeight(height);\n   };\n \n   return (\n-    <LayoutContainer>\n-      <CMSAppBar \n-        currentPath={currentPath} \n-        onMenuClick={onMenuClick}\n-        onHeightChange={handleAppBarHeightChange}\n-      />\n-      <ContentContainer $appBarHeight={appBarHeight}>\n-        <ContentWrapper>\n-          {children}\n-        </ContentWrapper>\n-      </ContentContainer>\n-    </LayoutContainer>\n+    <CMSContainer>\n+      <LayoutContainer>\n+        <CMSAppBar \n+          currentPath={currentPath} \n+          onMenuClick={onMenuClick}\n+          onHeightChange={handleAppBarHeightChange}\n+        />\n+        <ContentContainer $appBarHeight={appBarHeight}>\n+          <ContentWrapper>\n+            {children}\n+          </ContentWrapper>\n+        </ContentContainer>\n+      </LayoutContainer>\n+    </CMSContainer>\n   );\n };\n \n export default CMSLayout;\n"
                },
                {
                    "date": 1759896032695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n // 전체 CMS를 감싸는 최소 너비 컨테이너\n const CMSContainer = styled.div`\n   min-width: 1200px;\n   width: 100%;\n-  overflow-x: auto;\n+  /* overflow-x: auto를 제거하여 상위에서 처리하도록 함 */\n `;\n \n const LayoutContainer = styled.div`\n   min-height: 100vh;\n"
                },
                {
                    "date": 1759896149540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState } from 'react';\n+import React from 'react';\n import styled from 'styled-components';\n import CMSAppBar from './CMSAppBar';\n import { AppColors } from '../styles/colors';\n \n@@ -15,11 +15,10 @@\n   background-color: ${AppColors.background};\n   width: 100%;\n `;\n \n-const ContentContainer = styled.main<{ $appBarHeight: number }>`\n-  padding-top: ${props => props.$appBarHeight}px; /* AppBar 실제 높이만큼 상단 패딩 */\n-  min-height: calc(100vh - ${props => props.$appBarHeight}px);\n+const ContentContainer = styled.main`\n+  min-height: 100vh; /* 전체 뷰포트 높이 사용 */\n   padding-left: 0; /* 사이드바가 없으므로 좌측 패딩 제거 */\n   padding-right: 0; /* 우측 패딩도 제거하여 전체 너비 활용 */\n   padding-bottom: 24px;\n   width: 100%;\n@@ -41,23 +40,16 @@\n   children, \n   currentPath, \n   onMenuClick \n }) => {\n-  const [appBarHeight, setAppBarHeight] = useState<number>(64); // 기본값 64px\n-\n-  const handleAppBarHeightChange = (height: number) => {\n-    setAppBarHeight(height);\n-  };\n-\n   return (\n     <CMSContainer>\n       <LayoutContainer>\n         <CMSAppBar \n           currentPath={currentPath} \n           onMenuClick={onMenuClick}\n-          onHeightChange={handleAppBarHeightChange}\n         />\n-        <ContentContainer $appBarHeight={appBarHeight}>\n+        <ContentContainer>\n           <ContentWrapper>\n             {children}\n           </ContentWrapper>\n         </ContentContainer>\n"
                },
                {
                    "date": 1759911046493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import React from 'react';\n import styled from 'styled-components';\n import CMSAppBar from './CMSAppBar';\n import { AppColors } from '../styles/colors';\n+import { useSystemSetupCheck } from './SystemAdminSetupModal';\n \n // 전체 CMS를 감싸는 최소 너비 컨테이너\n const CMSContainer = styled.div`\n   min-width: 1200px;\n@@ -40,8 +41,10 @@\n   children, \n   currentPath, \n   onMenuClick \n }) => {\n+  const { SystemAdminSetupModal } = useSystemSetupCheck();\n+\n   return (\n     <CMSContainer>\n       <LayoutContainer>\n         <CMSAppBar \n@@ -53,8 +56,11 @@\n             {children}\n           </ContentWrapper>\n         </ContentContainer>\n       </LayoutContainer>\n+      \n+      {/* 시스템 관리자 초기 설정 모달 */}\n+      <SystemAdminSetupModal />\n     </CMSContainer>\n   );\n };\n \n"
                },
                {
                    "date": 1759912858905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import React from 'react';\n import styled from 'styled-components';\n import CMSAppBar from './CMSAppBar';\n import { AppColors } from '../styles/colors';\n-import { useSystemSetupCheck } from './SystemAdminSetupModal';\n \n // 전체 CMS를 감싸는 최소 너비 컨테이너\n const CMSContainer = styled.div`\n   min-width: 1200px;\n@@ -41,10 +40,8 @@\n   children, \n   currentPath, \n   onMenuClick \n }) => {\n-  const { SystemAdminSetupModal } = useSystemSetupCheck();\n-\n   return (\n     <CMSContainer>\n       <LayoutContainer>\n         <CMSAppBar \n@@ -56,11 +53,8 @@\n             {children}\n           </ContentWrapper>\n         </ContentContainer>\n       </LayoutContainer>\n-      \n-      {/* 시스템 관리자 초기 설정 모달 */}\n-      <SystemAdminSetupModal />\n     </CMSContainer>\n   );\n };\n \n"
                },
                {
                    "date": 1760152441068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,19 +35,39 @@\n   currentPath?: string;\n   onMenuClick?: (path: string) => void;\n }\n \n+// 전역 프로그램 새로고침 함수를 저장할 변수\n+let globalProgramRefreshFunction: (() => Promise<void>) | null = null;\n+\n+// 외부에서 프로그램 목록을 새로고침할 수 있는 유틸리티 함수\n+export const refreshProgramsInNavigation = async () => {\n+  if (globalProgramRefreshFunction) {\n+    try {\n+      await (globalProgramRefreshFunction as () => Promise<void>)();\n+    } catch (error) {\n+      console.error('프로그램 네비게이션 새로고침 실패:', error);\n+    }\n+  }\n+};\n+\n const CMSLayout: React.FC<CMSLayoutProps> = ({ \n   children, \n   currentPath, \n   onMenuClick \n }) => {\n+  // 프로그램 새로고침 함수를 전역 변수에 저장\n+  const handleProgramRefresh = (refreshFunction: () => Promise<void>) => {\n+    globalProgramRefreshFunction = refreshFunction;\n+  };\n+\n   return (\n     <CMSContainer>\n       <LayoutContainer>\n         <CMSAppBar \n           currentPath={currentPath} \n           onMenuClick={onMenuClick}\n+          onRefreshPrograms={handleProgramRefresh}\n         />\n         <ContentContainer>\n           <ContentWrapper>\n             {children}\n"
                },
                {
                    "date": 1760162316238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React from 'react';\n+import React, { useCallback } from 'react';\n import styled from 'styled-components';\n import CMSAppBar from './CMSAppBar';\n import { AppColors } from '../styles/colors';\n \n@@ -21,14 +21,16 @@\n   padding-left: 0; /* 사이드바가 없으므로 좌측 패딩 제거 */\n   padding-right: 0; /* 우측 패딩도 제거하여 전체 너비 활용 */\n   padding-bottom: 24px;\n   width: 100%;\n+  transition: all 0.2s ease; /* 부드러운 트랜지션 추가 */\n `;\n \n const ContentWrapper = styled.div`\n   width: 100%; /* 전체 너비 사용 */\n   padding: 24px; /* 내부 콘텐츠 여백은 여기서 처리 */\n   box-sizing: border-box; /* 패딩이 너비에 포함되도록 */\n+  transition: all 0.2s ease; /* 부드러운 트랜지션 추가 */\n `;\n \n interface CMSLayoutProps {\n   children: React.ReactNode;\n@@ -49,17 +51,17 @@\n     }\n   }\n };\n \n-const CMSLayout: React.FC<CMSLayoutProps> = ({ \n+const CMSLayout: React.FC<CMSLayoutProps> = React.memo(({ \n   children, \n   currentPath, \n   onMenuClick \n }) => {\n   // 프로그램 새로고침 함수를 전역 변수에 저장\n-  const handleProgramRefresh = (refreshFunction: () => Promise<void>) => {\n+  const handleProgramRefresh = useCallback((refreshFunction: () => Promise<void>) => {\n     globalProgramRefreshFunction = refreshFunction;\n-  };\n+  }, []);\n \n   return (\n     <CMSContainer>\n       <LayoutContainer>\n@@ -75,7 +77,9 @@\n         </ContentContainer>\n       </LayoutContainer>\n     </CMSContainer>\n   );\n-};\n+});\n \n+CMSLayout.displayName = 'CMSLayout';\n+\n export default CMSLayout;\n"
                },
                {
                    "date": 1760258120514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,11 @@\n   background-color: ${AppColors.background};\n   width: 100%;\n `;\n \n-const ContentContainer = styled.main`\n-  min-height: 100vh; /* 전체 뷰포트 높이 사용 */\n+const ContentContainer = styled.main<{ $appBarHeight?: number }>`\n+  /* 앱바 높이를 동적으로 계산 */\n+  min-height: ${props => `calc(100vh - ${props.$appBarHeight || 124}px)`};\n   padding-left: 0; /* 사이드바가 없으므로 좌측 패딩 제거 */\n   padding-right: 0; /* 우측 패딩도 제거하여 전체 너비 활용 */\n   padding-bottom: 24px;\n   width: 100%;\n@@ -61,17 +62,32 @@\n   const handleProgramRefresh = useCallback((refreshFunction: () => Promise<void>) => {\n     globalProgramRefreshFunction = refreshFunction;\n   }, []);\n \n+  // 앱바 높이 계산: 기본 TopBar 64px + SubMenu 있을 때 약 60px\n+  const calculateAppBarHeight = () => {\n+    // 현재 경로에 따라 서브메뉴 표시 여부 결정\n+    const hasSubMenu = currentPath && (\n+      currentPath.includes('/cms/staff/') ||\n+      currentPath.includes('/cms/member/') ||\n+      currentPath.includes('/cms/reservation/') ||\n+      currentPath.includes('/cms/program/') ||\n+      currentPath.includes('/cms/terms/') ||\n+      currentPath.includes('/cms/assets/')\n+    );\n+    \n+    return hasSubMenu ? 124 : 64; // 서브메뉴 있으면 124px, 없으면 64px\n+  };\n+\n   return (\n     <CMSContainer>\n       <LayoutContainer>\n         <CMSAppBar \n           currentPath={currentPath} \n           onMenuClick={onMenuClick}\n           onRefreshPrograms={handleProgramRefresh}\n         />\n-        <ContentContainer>\n+        <ContentContainer $appBarHeight={calculateAppBarHeight()}>\n           <ContentWrapper>\n             {children}\n           </ContentWrapper>\n         </ContentContainer>\n"
                },
                {
                    "date": 1760258231429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,22 +16,25 @@\n   width: 100%;\n `;\n \n const ContentContainer = styled.main<{ $appBarHeight?: number }>`\n-  /* 앱바 높이를 동적으로 계산 */\n-  min-height: ${props => `calc(100vh - ${props.$appBarHeight || 124}px)`};\n+  /* 앱바 높이를 고려한 정확한 높이 계산 */\n+  height: ${props => `calc(100vh - ${props.$appBarHeight || 124}px)`};\n   padding-left: 0; /* 사이드바가 없으므로 좌측 패딩 제거 */\n   padding-right: 0; /* 우측 패딩도 제거하여 전체 너비 활용 */\n-  padding-bottom: 24px;\n+  padding-bottom: 0; /* 하단 패딩 제거하여 스크롤 방지 */\n   width: 100%;\n   transition: all 0.2s ease; /* 부드러운 트랜지션 추가 */\n+  overflow-y: auto; /* 필요시에만 스크롤 */\n `;\n \n const ContentWrapper = styled.div`\n   width: 100%; /* 전체 너비 사용 */\n   padding: 24px; /* 내부 콘텐츠 여백은 여기서 처리 */\n   box-sizing: border-box; /* 패딩이 너비에 포함되도록 */\n   transition: all 0.2s ease; /* 부드러운 트랜지션 추가 */\n+  height: 100%; /* 부모 컨테이너의 전체 높이 사용 */\n+  overflow-y: auto; /* 콘텐츠가 넘치면 스크롤 */\n `;\n \n interface CMSLayoutProps {\n   children: React.ReactNode;\n"
                }
            ],
            "date": 1757828417756,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport styled from 'styled-components';\nimport CMSAppBar from './CMSAppBar';\nimport { AppColors } from '../styles/colors';\n\nconst LayoutContainer = styled.div`\n  min-height: 100vh;\n  background-color: ${AppColors.background};\n`;\n\nconst ContentContainer = styled.main`\n  padding-top: 64px; /* AppBar 높이만큼 상단 패딩 */\n  min-height: calc(100vh - 64px);\n  padding-left: 24px;\n  padding-right: 24px;\n  padding-bottom: 24px;\n`;\n\nconst ContentWrapper = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding-top: 24px;\n`;\n\ninterface CMSLayoutProps {\n  children: React.ReactNode;\n  currentPath?: string;\n  onMenuClick?: (path: string) => void;\n}\n\nconst CMSLayout: React.FC<CMSLayoutProps> = ({ \n  children, \n  currentPath, \n  onMenuClick \n}) => {\n  return (\n    <LayoutContainer>\n      <CMSAppBar \n        currentPath={currentPath} \n        onMenuClick={onMenuClick} \n      />\n      <ContentContainer>\n        <ContentWrapper>\n          {children}\n        </ContentWrapper>\n      </ContentContainer>\n    </LayoutContainer>\n  );\n};\n\nexport default CMSLayout;\n"
        }
    ]
}