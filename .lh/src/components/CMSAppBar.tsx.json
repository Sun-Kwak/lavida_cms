{
    "sourceFile": "src/components/CMSAppBar.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 37,
            "patches": [
                {
                    "date": 1757828417755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757828737367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,22 +56,25 @@\n     ],\n   },\n ];\n \n-const AppBarContainer = styled.header`\n+const AppBarContainer = styled.div`\n   position: fixed;\n   top: 0;\n   left: 0;\n   right: 0;\n-  height: 64px;\n   background-color: ${AppColors.surface};\n   border-bottom: 1px solid ${AppColors.borderLight};\n   z-index: 1000;\n+  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n+`;\n+\n+const TopBar = styled.header`\n+  height: 64px;\n   display: flex;\n   align-items: center;\n   justify-content: space-between;\n   padding: 0 24px;\n-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n `;\n \n const LeftSection = styled.div`\n   display: flex;\n@@ -95,9 +98,8 @@\n   position: relative;\n `;\n \n const MenuCategory = styled.div<{ $isActive: boolean }>`\n-  position: relative;\n   cursor: pointer;\n   padding: 8px 16px;\n   border-radius: 8px;\n   font-weight: 500;\n@@ -111,36 +113,42 @@\n     color: ${AppColors.primary};\n   }\n `;\n \n-const SubMenuContainer = styled.div<{ $isVisible: boolean }>`\n-  position: absolute;\n-  top: calc(100% + 8px);\n-  left: 0;\n-  min-width: 180px;\n+const SubMenuChipsContainer = styled.div`\n+  padding: 16px 24px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n   background-color: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n-  z-index: 1001;\n-  padding: 8px 0;\n-  visibility: ${props => props.$isVisible ? 'visible' : 'hidden'};\n-  opacity: ${props => props.$isVisible ? 1 : 0};\n-  transform: ${props => props.$isVisible ? 'translateY(0)' : 'translateY(-8px)'};\n-  transition: all 0.2s ease;\n-  pointer-events: ${props => props.$isVisible ? 'auto' : 'none'};\n `;\n \n-const SubMenuItem = styled.div`\n-  padding: 12px 16px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n+const ChipsWrapper = styled.div`\n+  display: flex;\n+  flex-wrap: wrap;\n+  gap: 8px;\n+  align-items: center;\n+`;\n+\n+const CategoryLabel = styled.span`\n+  font-size: ${AppTextStyles.label1.fontSize};\n   color: ${AppColors.onSurface};\n+  font-weight: 500;\n+  margin-right: 12px;\n+`;\n+\n+const SubMenuChip = styled.div<{ $isActive?: boolean }>`\n+  padding: 6px 12px;\n+  border-radius: 16px;\n+  background-color: ${props => props.$isActive ? AppColors.primary : AppColors.primary}10;\n+  color: ${props => props.$isActive ? AppColors.onPrimary : AppColors.primary};\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  font-weight: 500;\n   cursor: pointer;\n   transition: all 0.2s ease;\n+  border: 1px solid ${props => props.$isActive ? AppColors.primary : 'transparent'};\n \n   &:hover {\n-    background-color: ${AppColors.primary}08;\n-    color: ${AppColors.primary};\n+    background-color: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n   }\n `;\n \n const RightSection = styled.div`\n@@ -205,27 +213,23 @@\n   onMenuClick?: (path: string) => void;\n }\n \n const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick }) => {\n-  const [activeMenuId, setActiveMenuId] = useState<string | null>(null);\n-  const [hoveredMenuId, setHoveredMenuId] = useState<string | null>(null);\n+  const [selectedCategoryId, setSelectedCategoryId] = useState<string>('member'); // 기본값 설정\n+  const [selectedSubMenuPath, setSelectedSubMenuPath] = useState<string>('');\n   const { logout } = useAdminAuth();\n \n   // 현재 사용자 정보 가져오기 (sessionStorage에서)\n   const adminId = sessionStorage.getItem('adminId');\n   const adminName = adminId || '관리자';\n \n-  const handleCategoryMouseEnter = (categoryId: string) => {\n-    setHoveredMenuId(categoryId);\n+  const handleCategoryClick = (categoryId: string) => {\n+    setSelectedCategoryId(categoryId);\n+    setSelectedSubMenuPath(''); // 카테고리 변경 시 선택된 서브메뉴 초기화\n   };\n \n-  const handleCategoryMouseLeave = () => {\n-    setHoveredMenuId(null);\n-  };\n-\n   const handleSubMenuClick = (path: string) => {\n-    setActiveMenuId(null);\n-    setHoveredMenuId(null);\n+    setSelectedSubMenuPath(path);\n     if (onMenuClick) {\n       onMenuClick(path);\n     } else {\n       // 기본 동작: 페이지 이동\n@@ -233,8 +237,10 @@\n     }\n   };\n \n   const handleLogoClick = () => {\n+    setSelectedCategoryId('member');\n+    setSelectedSubMenuPath('');\n     if (onMenuClick) {\n       onMenuClick('/cms/admin');\n     } else {\n       window.location.href = '/cms/admin';\n@@ -252,60 +258,67 @@\n     // 설정 페이지로 이동하거나 설정 모달 열기\n     console.log('설정 클릭');\n   };\n \n+  // 현재 선택된 카테고리 찾기\n+  const selectedCategory = menuCategories.find(category => category.id === selectedCategoryId);\n+\n   return (\n     <AppBarContainer>\n-      <LeftSection>\n-        <Logo onClick={handleLogoClick}>\n-          LAVIDA CMS\n-        </Logo>\n-        \n-        <MenuSection>\n-          {menuCategories.map((category) => (\n-            <MenuCategory\n-              key={category.id}\n-              $isActive={activeMenuId === category.id}\n-              onMouseEnter={() => handleCategoryMouseEnter(category.id)}\n-              onMouseLeave={handleCategoryMouseLeave}\n-            >\n-              {category.title}\n-              \n-              <SubMenuContainer\n-                $isVisible={hoveredMenuId === category.id}\n-                onMouseEnter={() => setHoveredMenuId(category.id)}\n-                onMouseLeave={() => setHoveredMenuId(null)}\n+      <TopBar>\n+        <LeftSection>\n+          <Logo onClick={handleLogoClick}>\n+            LAVIDA CMS\n+          </Logo>\n+          \n+          <MenuSection>\n+            {menuCategories.map((category) => (\n+              <MenuCategory\n+                key={category.id}\n+                $isActive={selectedCategoryId === category.id}\n+                onClick={() => handleCategoryClick(category.id)}\n               >\n-                {category.subMenus.map((subMenu) => (\n-                  <SubMenuItem\n-                    key={subMenu.id}\n-                    onClick={() => handleSubMenuClick(subMenu.path)}\n-                  >\n-                    {subMenu.title}\n-                  </SubMenuItem>\n-                ))}\n-              </SubMenuContainer>\n-            </MenuCategory>\n-          ))}\n-        </MenuSection>\n-      </LeftSection>\n+                {category.title}\n+              </MenuCategory>\n+            ))}\n+          </MenuSection>\n+        </LeftSection>\n \n-      <RightSection>\n-        <UserInfo>\n-          <UserName>{adminName}</UserName>\n-          <span>님</span>\n-        </UserInfo>\n-        \n-        <SettingsIcon onClick={handleSettingsClick}>\n-          <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n-            <path d=\"M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5a3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97c0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1c0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.66Z\"/>\n-          </svg>\n-        </SettingsIcon>\n-        \n-        <LogoutButton onClick={handleLogout}>\n-          로그아웃\n-        </LogoutButton>\n-      </RightSection>\n+        <RightSection>\n+          <UserInfo>\n+            <UserName>{adminName}</UserName>\n+            <span>님</span>\n+          </UserInfo>\n+          \n+          <SettingsIcon onClick={handleSettingsClick}>\n+            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n+              <path d=\"M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5a3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97c0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1c0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.66Z\"/>\n+            </svg>\n+          </SettingsIcon>\n+          \n+          <LogoutButton onClick={handleLogout}>\n+            로그아웃\n+          </LogoutButton>\n+        </RightSection>\n+      </TopBar>\n+\n+      {/* 선택된 카테고리의 하위 메뉴를 chips 형태로 표시 */}\n+      {selectedCategory && (\n+        <SubMenuChipsContainer>\n+          <ChipsWrapper>\n+            <CategoryLabel>{selectedCategory.title}:</CategoryLabel>\n+            {selectedCategory.subMenus.map((subMenu) => (\n+              <SubMenuChip\n+                key={subMenu.id}\n+                $isActive={selectedSubMenuPath === subMenu.path}\n+                onClick={() => handleSubMenuClick(subMenu.path)}\n+              >\n+                {subMenu.title}\n+              </SubMenuChip>\n+            ))}\n+          </ChipsWrapper>\n+        </SubMenuChipsContainer>\n+      )}\n     </AppBarContainer>\n   );\n };\n \n"
                },
                {
                    "date": 1757828897074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-import React, { useState } from 'react';\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate, useLocation } from 'react-router-dom';\n import styled from 'styled-components';\n import { AppColors } from '../styles/colors';\n import { AppTextStyles } from '../styles/textStyles';\n import { useAdminAuth } from '../context/AdminAuthContext';\n@@ -216,9 +217,32 @@\n const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick }) => {\n   const [selectedCategoryId, setSelectedCategoryId] = useState<string>('member'); // 기본값 설정\n   const [selectedSubMenuPath, setSelectedSubMenuPath] = useState<string>('');\n   const { logout } = useAdminAuth();\n+  const navigate = useNavigate();\n+  const location = useLocation();\n \n+  // 현재 경로에 따라 선택된 카테고리와 서브메뉴 설정\n+  useEffect(() => {\n+    const currentPathToUse = currentPath || location.pathname;\n+    \n+    // 현재 경로에 해당하는 카테고리와 서브메뉴 찾기\n+    for (const category of menuCategories) {\n+      const foundSubMenu = category.subMenus.find(subMenu => subMenu.path === currentPathToUse);\n+      if (foundSubMenu) {\n+        setSelectedCategoryId(category.id);\n+        setSelectedSubMenuPath(foundSubMenu.path);\n+        return;\n+      }\n+    }\n+    \n+    // 기본 경로인 경우 (예: /cms/admin)\n+    if (currentPathToUse === '/cms/admin') {\n+      setSelectedCategoryId('member');\n+      setSelectedSubMenuPath('/cms/admin');\n+    }\n+  }, [currentPath, location.pathname]);\n+\n   // 현재 사용자 정보 가져오기 (sessionStorage에서)\n   const adminId = sessionStorage.getItem('adminId');\n   const adminName = adminId || '관리자';\n \n@@ -231,27 +255,27 @@\n     setSelectedSubMenuPath(path);\n     if (onMenuClick) {\n       onMenuClick(path);\n     } else {\n-      // 기본 동작: 페이지 이동\n-      window.location.href = path;\n+      // React Router를 사용하여 페이지 이동 (새로고침 없음)\n+      navigate(path);\n     }\n   };\n \n   const handleLogoClick = () => {\n     setSelectedCategoryId('member');\n-    setSelectedSubMenuPath('');\n+    setSelectedSubMenuPath('/cms/admin');\n     if (onMenuClick) {\n       onMenuClick('/cms/admin');\n     } else {\n-      window.location.href = '/cms/admin';\n+      navigate('/cms/admin');\n     }\n   };\n \n   const handleLogout = () => {\n     if (window.confirm('로그아웃 하시겠습니까?')) {\n       logout();\n-      window.location.href = '/cms/login';\n+      navigate('/cms/login');\n     }\n   };\n \n   const handleSettingsClick = () => {\n"
                },
                {
                    "date": 1757829599715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState, useEffect } from 'react';\n+import React, { useState, useEffect, useRef } from 'react';\n import { useNavigate, useLocation } from 'react-router-dom';\n import styled from 'styled-components';\n import { AppColors } from '../styles/colors';\n import { AppTextStyles } from '../styles/textStyles';\n@@ -211,16 +211,18 @@\n \n interface CMSAppBarProps {\n   currentPath?: string;\n   onMenuClick?: (path: string) => void;\n+  onHeightChange?: (height: number) => void;\n }\n \n-const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick }) => {\n+const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick, onHeightChange }) => {\n   const [selectedCategoryId, setSelectedCategoryId] = useState<string>('member'); // 기본값 설정\n   const [selectedSubMenuPath, setSelectedSubMenuPath] = useState<string>('');\n   const { logout } = useAdminAuth();\n   const navigate = useNavigate();\n   const location = useLocation();\n+  const appBarRef = useRef<HTMLDivElement>(null);\n \n   // 현재 경로에 따라 선택된 카테고리와 서브메뉴 설정\n   useEffect(() => {\n     const currentPathToUse = currentPath || location.pathname;\n@@ -285,10 +287,18 @@\n \n   // 현재 선택된 카테고리 찾기\n   const selectedCategory = menuCategories.find(category => category.id === selectedCategoryId);\n \n+  // AppBar 높이 변화 감지 및 부모에게 알림\n+  useEffect(() => {\n+    if (appBarRef.current && onHeightChange) {\n+      const height = appBarRef.current.offsetHeight;\n+      onHeightChange(height);\n+    }\n+  }, [selectedCategory, onHeightChange]); // selectedCategory 변경 시 높이 재측정\n+\n   return (\n-    <AppBarContainer>\n+    <AppBarContainer ref={appBarRef}>\n       <TopBar>\n         <LeftSection>\n           <Logo onClick={handleLogoClick}>\n             LAVIDA CMS\n"
                },
                {
                    "date": 1759105835972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,46 +17,99 @@\n   title: string;\n   path: string;\n }\n \n-// 더미 메뉴 데이터\n+// LaVida CRM 메뉴 데이터 (HTML 파일 기준)\n const menuCategories: MenuCategoryType[] = [\n   {\n     id: 'member',\n     title: '회원관리',\n     subMenus: [\n-      { id: 'admin', title: '관리자 관리', path: '/cms/admin' },\n-      { id: 'user', title: '사용자 관리', path: '/cms/users' },\n-      { id: 'permission', title: '권한 관리', path: '/cms/permissions' },\n+      { id: 'member-register', title: '신규 등록', path: '/cms/member/register' },\n+      { id: 'member-search', title: '빠른 검색', path: '/cms/member/search' },\n+      { id: 'member-tags', title: '태그 관리', path: '/cms/member/tags' },\n+      { id: 'member-qr-checkin', title: 'QR 체크인', path: '/cms/member/qr-checkin' },\n+      { id: 'member-visit-record', title: '내원 기록', path: '/cms/member/visit-record' },\n+      { id: 'member-excel-upload', title: '엑셀 업로드', path: '/cms/member/excel-upload' },\n+      { id: 'member-export', title: '내보내기', path: '/cms/member/export' },\n     ],\n   },\n   {\n-    id: 'content',\n-    title: '콘텐츠',\n+    id: 'reservation',\n+    title: '예약/스케줄',\n     subMenus: [\n-      { id: 'articles', title: '게시물 관리', path: '/cms/articles' },\n-      { id: 'media', title: '미디어 관리', path: '/cms/media' },\n-      { id: 'categories', title: '카테고리 관리', path: '/cms/categories' },\n+      { id: 'reservation-new', title: '신규 예약', path: '/cms/reservation/new' },\n+      { id: 'reservation-timetable', title: '시간표 보기', path: '/cms/reservation/timetable' },\n+      { id: 'reservation-batch', title: '일괄 예약', path: '/cms/reservation/batch' },\n+      { id: 'reservation-waiting', title: '대기 관리', path: '/cms/reservation/waiting' },\n+      { id: 'reservation-auto-remind', title: '자동 리마인드', path: '/cms/reservation/auto-remind' },\n     ],\n   },\n   {\n-    id: 'system',\n-    title: '시스템',\n+    id: 'exercise',\n+    title: '운동처방',\n     subMenus: [\n-      { id: 'settings', title: '시스템 설정', path: '/cms/settings' },\n-      { id: 'logs', title: '로그 관리', path: '/cms/logs' },\n-      { id: 'backup', title: '백업 관리', path: '/cms/backup' },\n+      { id: 'exercise-assessment', title: '평가 등록', path: '/cms/exercise/assessment' },\n+      { id: 'exercise-body-analysis', title: '체형 분석', path: '/cms/exercise/body-analysis' },\n+      { id: 'exercise-gait-pressure', title: '보행/족저압', path: '/cms/exercise/gait-pressure' },\n+      { id: 'exercise-program', title: '프로그램 배정', path: '/cms/exercise/program' },\n+      { id: 'exercise-qr-card', title: 'QR 카드 출력', path: '/cms/exercise/qr-card' },\n     ],\n   },\n   {\n-    id: 'analytics',\n-    title: '분석',\n+    id: 'relaxing',\n+    title: '릴렉싱',\n     subMenus: [\n-      { id: 'dashboard', title: '대시보드', path: '/cms/dashboard' },\n-      { id: 'reports', title: '리포트', path: '/cms/reports' },\n-      { id: 'statistics', title: '통계', path: '/cms/statistics' },\n+      { id: 'relaxing-bed-assign', title: '베드 배정', path: '/cms/relaxing/bed-assign' },\n+      { id: 'relaxing-timer', title: '타이머', path: '/cms/relaxing/timer' },\n+      { id: 'relaxing-session-manage', title: '회차권 관리', path: '/cms/relaxing/session-manage' },\n+      { id: 'relaxing-condition-note', title: '컨디션 노트', path: '/cms/relaxing/condition-note' },\n+      { id: 'relaxing-today-status', title: '금일 현황', path: '/cms/relaxing/today-status' },\n     ],\n   },\n+  {\n+    id: 'payment',\n+    title: '결제/포인트',\n+    subMenus: [\n+      { id: 'payment-register', title: '결제 등록', path: '/cms/payment/register' },\n+      { id: 'payment-point-charge', title: '포인트 충전', path: '/cms/payment/point-charge' },\n+      { id: 'payment-refund', title: '환불/조정', path: '/cms/payment/refund' },\n+      { id: 'payment-receipt', title: '영수증 보내기', path: '/cms/payment/receipt' },\n+      { id: 'payment-sales-dashboard', title: '매출 대시보드', path: '/cms/payment/sales-dashboard' },\n+    ],\n+  },\n+  {\n+    id: 'notification',\n+    title: '알림/문자',\n+    subMenus: [\n+      { id: 'notification-sms', title: '단문 보내기', path: '/cms/notification/sms' },\n+      { id: 'notification-reservation-remind', title: '예약 리마인드', path: '/cms/notification/reservation-remind' },\n+      { id: 'notification-birthday-dormant', title: '생일/휴면', path: '/cms/notification/birthday-dormant' },\n+      { id: 'notification-coupon', title: '쿠폰 발송', path: '/cms/notification/coupon' },\n+      { id: 'notification-template', title: '템플릿 관리', path: '/cms/notification/template' },\n+    ],\n+  },\n+  {\n+    id: 'statistics',\n+    title: '통계/리포트',\n+    subMenus: [\n+      { id: 'statistics-period', title: '일/주/월', path: '/cms/statistics/period' },\n+      { id: 'statistics-coach-kpi', title: '코치별 KPI', path: '/cms/statistics/coach-kpi' },\n+      { id: 'statistics-remaining-session', title: '잔여 세션', path: '/cms/statistics/remaining-session' },\n+      { id: 'statistics-churn-risk', title: '이탈 위험', path: '/cms/statistics/churn-risk' },\n+      { id: 'statistics-nps', title: 'NPS 설문', path: '/cms/statistics/nps' },\n+    ],\n+  },\n+  {\n+    id: 'settings',\n+    title: '설정',\n+    subMenus: [\n+      { id: 'settings-staff-permission', title: '직원/권한', path: '/cms/settings/staff-permission' },\n+      { id: 'settings-program-price', title: '프로그램/가격', path: '/cms/settings/program-price' },\n+      { id: 'settings-channel-integration', title: '채널 연동', path: '/cms/settings/channel-integration' },\n+      { id: 'settings-data-backup', title: '데이터 백업', path: '/cms/settings/data-backup' },\n+    ],\n+  },\n ];\n \n const AppBarContainer = styled.div`\n   position: fixed;\n@@ -236,12 +289,12 @@\n         return;\n       }\n     }\n     \n-    // 기본 경로인 경우 (예: /cms/admin)\n-    if (currentPathToUse === '/cms/admin') {\n+    // 기본 경로인 경우 (예: /cms/member/search)\n+    if (currentPathToUse === '/cms/member/search') {\n       setSelectedCategoryId('member');\n-      setSelectedSubMenuPath('/cms/admin');\n+      setSelectedSubMenuPath('/cms/member/search');\n     }\n   }, [currentPath, location.pathname]);\n \n   // 현재 사용자 정보 가져오기 (sessionStorage에서)\n@@ -264,13 +317,13 @@\n   };\n \n   const handleLogoClick = () => {\n     setSelectedCategoryId('member');\n-    setSelectedSubMenuPath('/cms/admin');\n+    setSelectedSubMenuPath('/cms/member/search');\n     if (onMenuClick) {\n-      onMenuClick('/cms/admin');\n+      onMenuClick('/cms/member/search');\n     } else {\n-      navigate('/cms/admin');\n+      navigate('/cms/member/search');\n     }\n   };\n \n   const handleLogout = () => {\n"
                },
                {
                    "date": 1759895795256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,14 +127,16 @@\n   display: flex;\n   align-items: center;\n   justify-content: space-between;\n   padding: 0 24px;\n+  box-sizing: border-box;\n `;\n \n const LeftSection = styled.div`\n   display: flex;\n   align-items: center;\n   gap: 32px;\n+  flex-shrink: 0; /* 좌측 섹션이 축소되지 않도록 */\n `;\n \n const Logo = styled.div`\n   display: flex;\n@@ -149,8 +151,9 @@\n   display: flex;\n   align-items: center;\n   gap: 24px;\n   position: relative;\n+  flex-shrink: 0; /* 메뉴 섹션이 축소되지 않도록 */\n `;\n \n const MenuCategory = styled.div<{ $isActive: boolean }>`\n   cursor: pointer;\n@@ -208,8 +211,9 @@\n const RightSection = styled.div`\n   display: flex;\n   align-items: center;\n   gap: 16px;\n+  flex-shrink: 0; /* 우측 섹션이 축소되지 않도록 */\n `;\n \n const UserInfo = styled.div`\n   display: flex;\n"
                },
                {
                    "date": 1759895968172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,8 +127,9 @@\n   display: flex;\n   align-items: center;\n   justify-content: space-between;\n   padding: 0 24px;\n+  min-width: 1200px; /* TopBar도 최소 너비 유지 */\n   box-sizing: border-box;\n `;\n \n const LeftSection = styled.div`\n@@ -174,15 +175,18 @@\n const SubMenuChipsContainer = styled.div`\n   padding: 16px 24px;\n   border-bottom: 1px solid ${AppColors.borderLight};\n   background-color: ${AppColors.surface};\n+  min-width: 1200px; /* 서브메뉴 컨테이너도 최소 너비 유지 */\n+  box-sizing: border-box;\n `;\n \n const ChipsWrapper = styled.div`\n   display: flex;\n-  flex-wrap: wrap;\n+  flex-wrap: nowrap; /* 줄바꿈 방지 */\n   gap: 8px;\n   align-items: center;\n+  min-width: max-content; /* 콘텐츠 크기에 맞춰 최소 너비 설정 */\n `;\n \n const CategoryLabel = styled.span`\n   font-size: ${AppTextStyles.label1.fontSize};\n"
                },
                {
                    "date": 1759896149541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState, useEffect, useRef } from 'react';\n+import React, { useState, useEffect } from 'react';\n import { useNavigate, useLocation } from 'react-router-dom';\n import styled from 'styled-components';\n import { AppColors } from '../styles/colors';\n import { AppTextStyles } from '../styles/textStyles';\n@@ -111,9 +111,9 @@\n   },\n ];\n \n const AppBarContainer = styled.div`\n-  position: fixed;\n+  position: sticky; /* fixed 대신 sticky 사용 */\n   top: 0;\n   left: 0;\n   right: 0;\n   background-color: ${AppColors.surface};\n@@ -272,18 +272,16 @@\n \n interface CMSAppBarProps {\n   currentPath?: string;\n   onMenuClick?: (path: string) => void;\n-  onHeightChange?: (height: number) => void;\n }\n \n-const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick, onHeightChange }) => {\n+const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick }) => {\n   const [selectedCategoryId, setSelectedCategoryId] = useState<string>('member'); // 기본값 설정\n   const [selectedSubMenuPath, setSelectedSubMenuPath] = useState<string>('');\n   const { logout } = useAdminAuth();\n   const navigate = useNavigate();\n   const location = useLocation();\n-  const appBarRef = useRef<HTMLDivElement>(null);\n \n   // 현재 경로에 따라 선택된 카테고리와 서브메뉴 설정\n   useEffect(() => {\n     const currentPathToUse = currentPath || location.pathname;\n@@ -348,18 +346,10 @@\n \n   // 현재 선택된 카테고리 찾기\n   const selectedCategory = menuCategories.find(category => category.id === selectedCategoryId);\n \n-  // AppBar 높이 변화 감지 및 부모에게 알림\n-  useEffect(() => {\n-    if (appBarRef.current && onHeightChange) {\n-      const height = appBarRef.current.offsetHeight;\n-      onHeightChange(height);\n-    }\n-  }, [selectedCategory, onHeightChange]); // selectedCategory 변경 시 높이 재측정\n-\n   return (\n-    <AppBarContainer ref={appBarRef}>\n+    <AppBarContainer>\n       <TopBar>\n         <LeftSection>\n           <Logo onClick={handleLogoClick}>\n             LAVIDA CMS\n"
                },
                {
                    "date": 1759896244163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,10 @@\n   display: flex;\n   align-items: center;\n   justify-content: space-between;\n   padding: 0 24px;\n-  min-width: 1200px; /* TopBar도 최소 너비 유지 */\n+  min-width: 1200px; /* 최소 너비만 설정 */\n+  width: 100%; /* 화면 전체 너비 사용 */\n   box-sizing: border-box;\n `;\n \n const LeftSection = styled.div`\n@@ -175,9 +176,10 @@\n const SubMenuChipsContainer = styled.div`\n   padding: 16px 24px;\n   border-bottom: 1px solid ${AppColors.borderLight};\n   background-color: ${AppColors.surface};\n-  min-width: 1200px; /* 서브메뉴 컨테이너도 최소 너비 유지 */\n+  min-width: 1200px; /* 최소 너비만 설정 */\n+  width: 100%; /* 화면 전체 너비 사용 */\n   box-sizing: border-box;\n `;\n \n const ChipsWrapper = styled.div`\n"
                },
                {
                    "date": 1759896422414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n   right: 0;\n   background-color: ${AppColors.surface};\n   border-bottom: 1px solid ${AppColors.borderLight};\n   z-index: 1000;\n-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n+  /* box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); */\n `;\n \n const TopBar = styled.header`\n   height: 64px;\n"
                },
                {
                    "date": 1759896513078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,12 +115,13 @@\n   position: sticky; /* fixed 대신 sticky 사용 */\n   top: 0;\n   left: 0;\n   right: 0;\n+  width: 100%;\n   background-color: ${AppColors.surface};\n   border-bottom: 1px solid ${AppColors.borderLight};\n   z-index: 1000;\n-  /* box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); */\n+  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n `;\n \n const TopBar = styled.header`\n   height: 64px;\n"
                },
                {
                    "date": 1759896522974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,8 @@\n   position: sticky; /* fixed 대신 sticky 사용 */\n   top: 0;\n   left: 0;\n   right: 0;\n-  width: 100%;\n   background-color: ${AppColors.surface};\n   border-bottom: 1px solid ${AppColors.borderLight};\n   z-index: 1000;\n   box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n@@ -128,9 +127,9 @@\n   display: flex;\n   align-items: center;\n   justify-content: space-between;\n   padding: 0 24px;\n-  min-width: 1200px; /* 최소 너비만 설정 */\n+  min-width: 1400px; /* 최소 너비만 설정 */\n   width: 100%; /* 화면 전체 너비 사용 */\n   box-sizing: border-box;\n `;\n \n"
                },
                {
                    "date": 1759896530884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,412 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate, useLocation } from 'react-router-dom';\n+import styled from 'styled-components';\n+import { AppColors } from '../styles/colors';\n+import { AppTextStyles } from '../styles/textStyles';\n+import { useAdminAuth } from '../context/AdminAuthContext';\n+\n+// 메뉴 카테고리 타입 정의\n+interface MenuCategoryType {\n+  id: string;\n+  title: string;\n+  subMenus: SubMenu[];\n+}\n+\n+interface SubMenu {\n+  id: string;\n+  title: string;\n+  path: string;\n+}\n+\n+// LaVida CRM 메뉴 데이터 (HTML 파일 기준)\n+const menuCategories: MenuCategoryType[] = [\n+  {\n+    id: 'member',\n+    title: '회원관리',\n+    subMenus: [\n+      { id: 'member-register', title: '신규 등록', path: '/cms/member/register' },\n+      { id: 'member-search', title: '빠른 검색', path: '/cms/member/search' },\n+      { id: 'member-tags', title: '태그 관리', path: '/cms/member/tags' },\n+      { id: 'member-qr-checkin', title: 'QR 체크인', path: '/cms/member/qr-checkin' },\n+      { id: 'member-visit-record', title: '내원 기록', path: '/cms/member/visit-record' },\n+      { id: 'member-excel-upload', title: '엑셀 업로드', path: '/cms/member/excel-upload' },\n+      { id: 'member-export', title: '내보내기', path: '/cms/member/export' },\n+    ],\n+  },\n+  {\n+    id: 'reservation',\n+    title: '예약/스케줄',\n+    subMenus: [\n+      { id: 'reservation-new', title: '신규 예약', path: '/cms/reservation/new' },\n+      { id: 'reservation-timetable', title: '시간표 보기', path: '/cms/reservation/timetable' },\n+      { id: 'reservation-batch', title: '일괄 예약', path: '/cms/reservation/batch' },\n+      { id: 'reservation-waiting', title: '대기 관리', path: '/cms/reservation/waiting' },\n+      { id: 'reservation-auto-remind', title: '자동 리마인드', path: '/cms/reservation/auto-remind' },\n+    ],\n+  },\n+  {\n+    id: 'exercise',\n+    title: '운동처방',\n+    subMenus: [\n+      { id: 'exercise-assessment', title: '평가 등록', path: '/cms/exercise/assessment' },\n+      { id: 'exercise-body-analysis', title: '체형 분석', path: '/cms/exercise/body-analysis' },\n+      { id: 'exercise-gait-pressure', title: '보행/족저압', path: '/cms/exercise/gait-pressure' },\n+      { id: 'exercise-program', title: '프로그램 배정', path: '/cms/exercise/program' },\n+      { id: 'exercise-qr-card', title: 'QR 카드 출력', path: '/cms/exercise/qr-card' },\n+    ],\n+  },\n+  {\n+    id: 'relaxing',\n+    title: '릴렉싱',\n+    subMenus: [\n+      { id: 'relaxing-bed-assign', title: '베드 배정', path: '/cms/relaxing/bed-assign' },\n+      { id: 'relaxing-timer', title: '타이머', path: '/cms/relaxing/timer' },\n+      { id: 'relaxing-session-manage', title: '회차권 관리', path: '/cms/relaxing/session-manage' },\n+      { id: 'relaxing-condition-note', title: '컨디션 노트', path: '/cms/relaxing/condition-note' },\n+      { id: 'relaxing-today-status', title: '금일 현황', path: '/cms/relaxing/today-status' },\n+    ],\n+  },\n+  {\n+    id: 'payment',\n+    title: '결제/포인트',\n+    subMenus: [\n+      { id: 'payment-register', title: '결제 등록', path: '/cms/payment/register' },\n+      { id: 'payment-point-charge', title: '포인트 충전', path: '/cms/payment/point-charge' },\n+      { id: 'payment-refund', title: '환불/조정', path: '/cms/payment/refund' },\n+      { id: 'payment-receipt', title: '영수증 보내기', path: '/cms/payment/receipt' },\n+      { id: 'payment-sales-dashboard', title: '매출 대시보드', path: '/cms/payment/sales-dashboard' },\n+    ],\n+  },\n+  {\n+    id: 'notification',\n+    title: '알림/문자',\n+    subMenus: [\n+      { id: 'notification-sms', title: '단문 보내기', path: '/cms/notification/sms' },\n+      { id: 'notification-reservation-remind', title: '예약 리마인드', path: '/cms/notification/reservation-remind' },\n+      { id: 'notification-birthday-dormant', title: '생일/휴면', path: '/cms/notification/birthday-dormant' },\n+      { id: 'notification-coupon', title: '쿠폰 발송', path: '/cms/notification/coupon' },\n+      { id: 'notification-template', title: '템플릿 관리', path: '/cms/notification/template' },\n+    ],\n+  },\n+  {\n+    id: 'statistics',\n+    title: '통계/리포트',\n+    subMenus: [\n+      { id: 'statistics-period', title: '일/주/월', path: '/cms/statistics/period' },\n+      { id: 'statistics-coach-kpi', title: '코치별 KPI', path: '/cms/statistics/coach-kpi' },\n+      { id: 'statistics-remaining-session', title: '잔여 세션', path: '/cms/statistics/remaining-session' },\n+      { id: 'statistics-churn-risk', title: '이탈 위험', path: '/cms/statistics/churn-risk' },\n+      { id: 'statistics-nps', title: 'NPS 설문', path: '/cms/statistics/nps' },\n+    ],\n+  },\n+  {\n+    id: 'settings',\n+    title: '설정',\n+    subMenus: [\n+      { id: 'settings-staff-permission', title: '직원/권한', path: '/cms/settings/staff-permission' },\n+      { id: 'settings-program-price', title: '프로그램/가격', path: '/cms/settings/program-price' },\n+      { id: 'settings-channel-integration', title: '채널 연동', path: '/cms/settings/channel-integration' },\n+      { id: 'settings-data-backup', title: '데이터 백업', path: '/cms/settings/data-backup' },\n+    ],\n+  },\n+];\n+\n+const AppBarContainer = styled.div`\n+  position: sticky; /* fixed 대신 sticky 사용 */\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  background-color: ${AppColors.surface};\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  z-index: 1000;\n+  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n+`;\n+\n+const TopBar = styled.header`\n+  height: 64px;\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  /* padding: 0 24px; */\n+  min-width: 1200px; /* 최소 너비만 설정 */\n+  width: 100%; /* 화면 전체 너비 사용 */\n+  box-sizing: border-box;\n+`;\n+\n+const LeftSection = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 32px;\n+  flex-shrink: 0; /* 좌측 섹션이 축소되지 않도록 */\n+`;\n+\n+const Logo = styled.div`\n+  display: flex;\n+  align-items: center;\n+  font-weight: 700;\n+  font-size: ${AppTextStyles.title2.fontSize};\n+  color: ${AppColors.primary};\n+  cursor: pointer;\n+`;\n+\n+const MenuSection = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 24px;\n+  position: relative;\n+  flex-shrink: 0; /* 메뉴 섹션이 축소되지 않도록 */\n+`;\n+\n+const MenuCategory = styled.div<{ $isActive: boolean }>`\n+  cursor: pointer;\n+  padding: 8px 16px;\n+  border-radius: 8px;\n+  font-weight: 500;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${props => props.$isActive ? AppColors.primary : AppColors.onSurface};\n+  background-color: ${props => props.$isActive ? `${AppColors.primary}10` : 'transparent'};\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary}10;\n+    color: ${AppColors.primary};\n+  }\n+`;\n+\n+const SubMenuChipsContainer = styled.div`\n+  padding: 16px 24px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  background-color: ${AppColors.surface};\n+  min-width: 1200px; /* 최소 너비만 설정 */\n+  width: 100%; /* 화면 전체 너비 사용 */\n+  box-sizing: border-box;\n+`;\n+\n+const ChipsWrapper = styled.div`\n+  display: flex;\n+  flex-wrap: nowrap; /* 줄바꿈 방지 */\n+  gap: 8px;\n+  align-items: center;\n+  min-width: max-content; /* 콘텐츠 크기에 맞춰 최소 너비 설정 */\n+`;\n+\n+const CategoryLabel = styled.span`\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  color: ${AppColors.onSurface};\n+  font-weight: 500;\n+  margin-right: 12px;\n+`;\n+\n+const SubMenuChip = styled.div<{ $isActive?: boolean }>`\n+  padding: 6px 12px;\n+  border-radius: 16px;\n+  background-color: ${props => props.$isActive ? AppColors.primary : AppColors.primary}10;\n+  color: ${props => props.$isActive ? AppColors.onPrimary : AppColors.primary};\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  font-weight: 500;\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+  border: 1px solid ${props => props.$isActive ? AppColors.primary : 'transparent'};\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n+  }\n+`;\n+\n+const RightSection = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 16px;\n+  flex-shrink: 0; /* 우측 섹션이 축소되지 않도록 */\n+`;\n+\n+const UserInfo = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 8px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface};\n+`;\n+\n+const UserName = styled.span`\n+  font-weight: 500;\n+`;\n+\n+const SettingsIcon = styled.div`\n+  width: 32px;\n+  height: 32px;\n+  border-radius: 50%;\n+  background-color: ${AppColors.primary}10;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary}20;\n+  }\n+\n+  svg {\n+    width: 18px;\n+    height: 18px;\n+    color: ${AppColors.primary};\n+  }\n+`;\n+\n+const LogoutButton = styled.button`\n+  padding: 6px 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 6px;\n+  background-color: transparent;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.error}10;\n+    border-color: ${AppColors.error};\n+    color: ${AppColors.error};\n+  }\n+`;\n+\n+interface CMSAppBarProps {\n+  currentPath?: string;\n+  onMenuClick?: (path: string) => void;\n+}\n+\n+const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick }) => {\n+  const [selectedCategoryId, setSelectedCategoryId] = useState<string>('member'); // 기본값 설정\n+  const [selectedSubMenuPath, setSelectedSubMenuPath] = useState<string>('');\n+  const { logout } = useAdminAuth();\n+  const navigate = useNavigate();\n+  const location = useLocation();\n+\n+  // 현재 경로에 따라 선택된 카테고리와 서브메뉴 설정\n+  useEffect(() => {\n+    const currentPathToUse = currentPath || location.pathname;\n+    \n+    // 현재 경로에 해당하는 카테고리와 서브메뉴 찾기\n+    for (const category of menuCategories) {\n+      const foundSubMenu = category.subMenus.find(subMenu => subMenu.path === currentPathToUse);\n+      if (foundSubMenu) {\n+        setSelectedCategoryId(category.id);\n+        setSelectedSubMenuPath(foundSubMenu.path);\n+        return;\n+      }\n+    }\n+    \n+    // 기본 경로인 경우 (예: /cms/member/search)\n+    if (currentPathToUse === '/cms/member/search') {\n+      setSelectedCategoryId('member');\n+      setSelectedSubMenuPath('/cms/member/search');\n+    }\n+  }, [currentPath, location.pathname]);\n+\n+  // 현재 사용자 정보 가져오기 (sessionStorage에서)\n+  const adminId = sessionStorage.getItem('adminId');\n+  const adminName = adminId || '관리자';\n+\n+  const handleCategoryClick = (categoryId: string) => {\n+    setSelectedCategoryId(categoryId);\n+    setSelectedSubMenuPath(''); // 카테고리 변경 시 선택된 서브메뉴 초기화\n+  };\n+\n+  const handleSubMenuClick = (path: string) => {\n+    setSelectedSubMenuPath(path);\n+    if (onMenuClick) {\n+      onMenuClick(path);\n+    } else {\n+      // React Router를 사용하여 페이지 이동 (새로고침 없음)\n+      navigate(path);\n+    }\n+  };\n+\n+  const handleLogoClick = () => {\n+    setSelectedCategoryId('member');\n+    setSelectedSubMenuPath('/cms/member/search');\n+    if (onMenuClick) {\n+      onMenuClick('/cms/member/search');\n+    } else {\n+      navigate('/cms/member/search');\n+    }\n+  };\n+\n+  const handleLogout = () => {\n+    if (window.confirm('로그아웃 하시겠습니까?')) {\n+      logout();\n+      navigate('/cms/login');\n+    }\n+  };\n+\n+  const handleSettingsClick = () => {\n+    // 설정 페이지로 이동하거나 설정 모달 열기\n+    console.log('설정 클릭');\n+  };\n+\n+  // 현재 선택된 카테고리 찾기\n+  const selectedCategory = menuCategories.find(category => category.id === selectedCategoryId);\n+\n+  return (\n+    <AppBarContainer>\n+      <TopBar>\n+        <LeftSection>\n+          <Logo onClick={handleLogoClick}>\n+            LAVIDA CMS\n+          </Logo>\n+          \n+          <MenuSection>\n+            {menuCategories.map((category) => (\n+              <MenuCategory\n+                key={category.id}\n+                $isActive={selectedCategoryId === category.id}\n+                onClick={() => handleCategoryClick(category.id)}\n+              >\n+                {category.title}\n+              </MenuCategory>\n+            ))}\n+          </MenuSection>\n+        </LeftSection>\n+\n+        <RightSection>\n+          <UserInfo>\n+            <UserName>{adminName}</UserName>\n+            <span>님</span>\n+          </UserInfo>\n+          \n+          <SettingsIcon onClick={handleSettingsClick}>\n+            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n+              <path d=\"M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5a3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97c0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1c0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.66Z\"/>\n+            </svg>\n+          </SettingsIcon>\n+          \n+          <LogoutButton onClick={handleLogout}>\n+            로그아웃\n+          </LogoutButton>\n+        </RightSection>\n+      </TopBar>\n+\n+      {/* 선택된 카테고리의 하위 메뉴를 chips 형태로 표시 */}\n+      {selectedCategory && (\n+        <SubMenuChipsContainer>\n+          <ChipsWrapper>\n+            <CategoryLabel>{selectedCategory.title}:</CategoryLabel>\n+            {selectedCategory.subMenus.map((subMenu) => (\n+              <SubMenuChip\n+                key={subMenu.id}\n+                $isActive={selectedSubMenuPath === subMenu.path}\n+                onClick={() => handleSubMenuClick(subMenu.path)}\n+              >\n+                {subMenu.title}\n+              </SubMenuChip>\n+            ))}\n+          </ChipsWrapper>\n+        </SubMenuChipsContainer>\n+      )}\n+    </AppBarContainer>\n+  );\n+};\n+\n+export default CMSAppBar;\n"
                },
                {
                    "date": 1759896606448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,401 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate, useLocation } from 'react-router-dom';\n+import styled from 'styled-components';\n+import { AppColors } from '../styles/colors';\n+import { AppTextStyles } from '../styles/textStyles';\n+import { useAdminAuth } from '../context/AdminAuthContext';\n+\n+// 메뉴 카테고리 타입 정의\n+interface MenuCategoryType {\n+  id: string;\n+  title: string;\n+  subMenus: SubMenu[];\n+}\n+\n+interface SubMenu {\n+  id: string;\n+  title: string;\n+  path: string;\n+}\n+\n+// LaVida CRM 메뉴 데이터 (HTML 파일 기준)\n+const menuCategories: MenuCategoryType[] = [\n+  {\n+    id: 'member',\n+    title: '회원관리',\n+    subMenus: [\n+      { id: 'member-register', title: '신규 등록', path: '/cms/member/register' },\n+      { id: 'member-search', title: '빠른 검색', path: '/cms/member/search' },\n+      { id: 'member-tags', title: '태그 관리', path: '/cms/member/tags' },\n+      { id: 'member-qr-checkin', title: 'QR 체크인', path: '/cms/member/qr-checkin' },\n+      { id: 'member-visit-record', title: '내원 기록', path: '/cms/member/visit-record' },\n+      { id: 'member-excel-upload', title: '엑셀 업로드', path: '/cms/member/excel-upload' },\n+      { id: 'member-export', title: '내보내기', path: '/cms/member/export' },\n+    ],\n+  },\n+  {\n+    id: 'reservation',\n+    title: '예약/스케줄',\n+    subMenus: [\n+      { id: 'reservation-new', title: '신규 예약', path: '/cms/reservation/new' },\n+      { id: 'reservation-timetable', title: '시간표 보기', path: '/cms/reservation/timetable' },\n+      { id: 'reservation-batch', title: '일괄 예약', path: '/cms/reservation/batch' },\n+      { id: 'reservation-waiting', title: '대기 관리', path: '/cms/reservation/waiting' },\n+      { id: 'reservation-auto-remind', title: '자동 리마인드', path: '/cms/reservation/auto-remind' },\n+    ],\n+  },\n+  {\n+    id: 'exercise',\n+    title: '운동처방',\n+    subMenus: [\n+      { id: 'exercise-assessment', title: '평가 등록', path: '/cms/exercise/assessment' },\n+      { id: 'exercise-body-analysis', title: '체형 분석', path: '/cms/exercise/body-analysis' },\n+      { id: 'exercise-gait-pressure', title: '보행/족저압', path: '/cms/exercise/gait-pressure' },\n+      { id: 'exercise-program', title: '프로그램 배정', path: '/cms/exercise/program' },\n+      { id: 'exercise-qr-card', title: 'QR 카드 출력', path: '/cms/exercise/qr-card' },\n+    ],\n+  },\n+  {\n+    id: 'relaxing',\n+    title: '릴렉싱',\n+    subMenus: [\n+      { id: 'relaxing-bed-assign', title: '베드 배정', path: '/cms/relaxing/bed-assign' },\n+      { id: 'relaxing-timer', title: '타이머', path: '/cms/relaxing/timer' },\n+      { id: 'relaxing-session-manage', title: '회차권 관리', path: '/cms/relaxing/session-manage' },\n+      { id: 'relaxing-condition-note', title: '컨디션 노트', path: '/cms/relaxing/condition-note' },\n+      { id: 'relaxing-today-status', title: '금일 현황', path: '/cms/relaxing/today-status' },\n+    ],\n+  },\n+  {\n+    id: 'payment',\n+    title: '결제/포인트',\n+    subMenus: [\n+      { id: 'payment-register', title: '결제 등록', path: '/cms/payment/register' },\n+      { id: 'payment-point-charge', title: '포인트 충전', path: '/cms/payment/point-charge' },\n+      { id: 'payment-refund', title: '환불/조정', path: '/cms/payment/refund' },\n+      { id: 'payment-receipt', title: '영수증 보내기', path: '/cms/payment/receipt' },\n+      { id: 'payment-sales-dashboard', title: '매출 대시보드', path: '/cms/payment/sales-dashboard' },\n+    ],\n+  },\n+  {\n+    id: 'notification',\n+    title: '알림/문자',\n+    subMenus: [\n+      { id: 'notification-sms', title: '단문 보내기', path: '/cms/notification/sms' },\n+      { id: 'notification-reservation-remind', title: '예약 리마인드', path: '/cms/notification/reservation-remind' },\n+      { id: 'notification-birthday-dormant', title: '생일/휴면', path: '/cms/notification/birthday-dormant' },\n+      { id: 'notification-coupon', title: '쿠폰 발송', path: '/cms/notification/coupon' },\n+      { id: 'notification-template', title: '템플릿 관리', path: '/cms/notification/template' },\n+    ],\n+  },\n+  {\n+    id: 'settings',\n+    title: '설정',\n+    subMenus: [\n+      { id: 'settings-staff-permission', title: '직원/권한', path: '/cms/settings/staff-permission' },\n+      { id: 'settings-program-price', title: '프로그램/가격', path: '/cms/settings/program-price' },\n+      { id: 'settings-channel-integration', title: '채널 연동', path: '/cms/settings/channel-integration' },\n+      { id: 'settings-data-backup', title: '데이터 백업', path: '/cms/settings/data-backup' },\n+    ],\n+  },\n+];\n+\n+const AppBarContainer = styled.div`\n+  position: sticky; /* fixed 대신 sticky 사용 */\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  background-color: ${AppColors.surface};\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  z-index: 1000;\n+  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n+`;\n+\n+const TopBar = styled.header`\n+  height: 64px;\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 0 24px;\n+  min-width: 1200px; /* 최소 너비만 설정 */\n+  width: 100%; /* 화면 전체 너비 사용 */\n+  box-sizing: border-box;\n+`;\n+\n+const LeftSection = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 32px;\n+  flex-shrink: 0; /* 좌측 섹션이 축소되지 않도록 */\n+`;\n+\n+const Logo = styled.div`\n+  display: flex;\n+  align-items: center;\n+  font-weight: 700;\n+  font-size: ${AppTextStyles.title2.fontSize};\n+  color: ${AppColors.primary};\n+  cursor: pointer;\n+`;\n+\n+const MenuSection = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 24px;\n+  position: relative;\n+  flex-shrink: 0; /* 메뉴 섹션이 축소되지 않도록 */\n+`;\n+\n+const MenuCategory = styled.div<{ $isActive: boolean }>`\n+  cursor: pointer;\n+  padding: 8px 16px;\n+  border-radius: 8px;\n+  font-weight: 500;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${props => props.$isActive ? AppColors.primary : AppColors.onSurface};\n+  background-color: ${props => props.$isActive ? `${AppColors.primary}10` : 'transparent'};\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary}10;\n+    color: ${AppColors.primary};\n+  }\n+`;\n+\n+const SubMenuChipsContainer = styled.div`\n+  padding: 16px 24px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  background-color: ${AppColors.surface};\n+  min-width: 1200px; /* 최소 너비만 설정 */\n+  width: 100%; /* 화면 전체 너비 사용 */\n+  box-sizing: border-box;\n+`;\n+\n+const ChipsWrapper = styled.div`\n+  display: flex;\n+  flex-wrap: nowrap; /* 줄바꿈 방지 */\n+  gap: 8px;\n+  align-items: center;\n+  min-width: max-content; /* 콘텐츠 크기에 맞춰 최소 너비 설정 */\n+`;\n+\n+const CategoryLabel = styled.span`\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  color: ${AppColors.onSurface};\n+  font-weight: 500;\n+  margin-right: 12px;\n+`;\n+\n+const SubMenuChip = styled.div<{ $isActive?: boolean }>`\n+  padding: 6px 12px;\n+  border-radius: 16px;\n+  background-color: ${props => props.$isActive ? AppColors.primary : AppColors.primary}10;\n+  color: ${props => props.$isActive ? AppColors.onPrimary : AppColors.primary};\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  font-weight: 500;\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+  border: 1px solid ${props => props.$isActive ? AppColors.primary : 'transparent'};\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n+  }\n+`;\n+\n+const RightSection = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 16px;\n+  flex-shrink: 0; /* 우측 섹션이 축소되지 않도록 */\n+`;\n+\n+const UserInfo = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 8px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface};\n+`;\n+\n+const UserName = styled.span`\n+  font-weight: 500;\n+`;\n+\n+const SettingsIcon = styled.div`\n+  width: 32px;\n+  height: 32px;\n+  border-radius: 50%;\n+  background-color: ${AppColors.primary}10;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary}20;\n+  }\n+\n+  svg {\n+    width: 18px;\n+    height: 18px;\n+    color: ${AppColors.primary};\n+  }\n+`;\n+\n+const LogoutButton = styled.button`\n+  padding: 6px 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 6px;\n+  background-color: transparent;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.error}10;\n+    border-color: ${AppColors.error};\n+    color: ${AppColors.error};\n+  }\n+`;\n+\n+interface CMSAppBarProps {\n+  currentPath?: string;\n+  onMenuClick?: (path: string) => void;\n+}\n+\n+const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick }) => {\n+  const [selectedCategoryId, setSelectedCategoryId] = useState<string>('member'); // 기본값 설정\n+  const [selectedSubMenuPath, setSelectedSubMenuPath] = useState<string>('');\n+  const { logout } = useAdminAuth();\n+  const navigate = useNavigate();\n+  const location = useLocation();\n+\n+  // 현재 경로에 따라 선택된 카테고리와 서브메뉴 설정\n+  useEffect(() => {\n+    const currentPathToUse = currentPath || location.pathname;\n+    \n+    // 현재 경로에 해당하는 카테고리와 서브메뉴 찾기\n+    for (const category of menuCategories) {\n+      const foundSubMenu = category.subMenus.find(subMenu => subMenu.path === currentPathToUse);\n+      if (foundSubMenu) {\n+        setSelectedCategoryId(category.id);\n+        setSelectedSubMenuPath(foundSubMenu.path);\n+        return;\n+      }\n+    }\n+    \n+    // 기본 경로인 경우 (예: /cms/member/search)\n+    if (currentPathToUse === '/cms/member/search') {\n+      setSelectedCategoryId('member');\n+      setSelectedSubMenuPath('/cms/member/search');\n+    }\n+  }, [currentPath, location.pathname]);\n+\n+  // 현재 사용자 정보 가져오기 (sessionStorage에서)\n+  const adminId = sessionStorage.getItem('adminId');\n+  const adminName = adminId || '관리자';\n+\n+  const handleCategoryClick = (categoryId: string) => {\n+    setSelectedCategoryId(categoryId);\n+    setSelectedSubMenuPath(''); // 카테고리 변경 시 선택된 서브메뉴 초기화\n+  };\n+\n+  const handleSubMenuClick = (path: string) => {\n+    setSelectedSubMenuPath(path);\n+    if (onMenuClick) {\n+      onMenuClick(path);\n+    } else {\n+      // React Router를 사용하여 페이지 이동 (새로고침 없음)\n+      navigate(path);\n+    }\n+  };\n+\n+  const handleLogoClick = () => {\n+    setSelectedCategoryId('member');\n+    setSelectedSubMenuPath('/cms/member/search');\n+    if (onMenuClick) {\n+      onMenuClick('/cms/member/search');\n+    } else {\n+      navigate('/cms/member/search');\n+    }\n+  };\n+\n+  const handleLogout = () => {\n+    if (window.confirm('로그아웃 하시겠습니까?')) {\n+      logout();\n+      navigate('/cms/login');\n+    }\n+  };\n+\n+  const handleSettingsClick = () => {\n+    // 설정 페이지로 이동하거나 설정 모달 열기\n+    console.log('설정 클릭');\n+  };\n+\n+  // 현재 선택된 카테고리 찾기\n+  const selectedCategory = menuCategories.find(category => category.id === selectedCategoryId);\n+\n+  return (\n+    <AppBarContainer>\n+      <TopBar>\n+        <LeftSection>\n+          <Logo onClick={handleLogoClick}>\n+            LAVIDA CMS\n+          </Logo>\n+          \n+          <MenuSection>\n+            {menuCategories.map((category) => (\n+              <MenuCategory\n+                key={category.id}\n+                $isActive={selectedCategoryId === category.id}\n+                onClick={() => handleCategoryClick(category.id)}\n+              >\n+                {category.title}\n+              </MenuCategory>\n+            ))}\n+          </MenuSection>\n+        </LeftSection>\n+\n+        <RightSection>\n+          <UserInfo>\n+            <UserName>{adminName}</UserName>\n+            <span>님</span>\n+          </UserInfo>\n+          \n+          <SettingsIcon onClick={handleSettingsClick}>\n+            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n+              <path d=\"M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5a3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97c0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1c0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.66Z\"/>\n+            </svg>\n+          </SettingsIcon>\n+          \n+          <LogoutButton onClick={handleLogout}>\n+            로그아웃\n+          </LogoutButton>\n+        </RightSection>\n+      </TopBar>\n+\n+      {/* 선택된 카테고리의 하위 메뉴를 chips 형태로 표시 */}\n+      {selectedCategory && (\n+        <SubMenuChipsContainer>\n+          <ChipsWrapper>\n+            <CategoryLabel>{selectedCategory.title}:</CategoryLabel>\n+            {selectedCategory.subMenus.map((subMenu) => (\n+              <SubMenuChip\n+                key={subMenu.id}\n+                $isActive={selectedSubMenuPath === subMenu.path}\n+                onClick={() => handleSubMenuClick(subMenu.path)}\n+              >\n+                {subMenu.title}\n+              </SubMenuChip>\n+            ))}\n+          </ChipsWrapper>\n+        </SubMenuChipsContainer>\n+      )}\n+    </AppBarContainer>\n+  );\n+};\n+\n+export default CMSAppBar;\n"
                },
                {
                    "date": 1759896687445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,412 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate, useLocation } from 'react-router-dom';\n+import styled from 'styled-components';\n+import { AppColors } from '../styles/colors';\n+import { AppTextStyles } from '../styles/textStyles';\n+import { useAdminAuth } from '../context/AdminAuthContext';\n+\n+// 메뉴 카테고리 타입 정의\n+interface MenuCategoryType {\n+  id: string;\n+  title: string;\n+  subMenus: SubMenu[];\n+}\n+\n+interface SubMenu {\n+  id: string;\n+  title: string;\n+  path: string;\n+}\n+\n+// LaVida CRM 메뉴 데이터 (HTML 파일 기준)\n+const menuCategories: MenuCategoryType[] = [\n+  {\n+    id: 'member',\n+    title: '회원관리',\n+    subMenus: [\n+      { id: 'member-register', title: '신규 등록', path: '/cms/member/register' },\n+      { id: 'member-search', title: '빠른 검색', path: '/cms/member/search' },\n+      { id: 'member-tags', title: '태그 관리', path: '/cms/member/tags' },\n+      { id: 'member-qr-checkin', title: 'QR 체크인', path: '/cms/member/qr-checkin' },\n+      { id: 'member-visit-record', title: '내원 기록', path: '/cms/member/visit-record' },\n+      { id: 'member-excel-upload', title: '엑셀 업로드', path: '/cms/member/excel-upload' },\n+      { id: 'member-export', title: '내보내기', path: '/cms/member/export' },\n+    ],\n+  },\n+  {\n+    id: 'reservation',\n+    title: '예약/스케줄',\n+    subMenus: [\n+      { id: 'reservation-new', title: '신규 예약', path: '/cms/reservation/new' },\n+      { id: 'reservation-timetable', title: '시간표 보기', path: '/cms/reservation/timetable' },\n+      { id: 'reservation-batch', title: '일괄 예약', path: '/cms/reservation/batch' },\n+      { id: 'reservation-waiting', title: '대기 관리', path: '/cms/reservation/waiting' },\n+      { id: 'reservation-auto-remind', title: '자동 리마인드', path: '/cms/reservation/auto-remind' },\n+    ],\n+  },\n+  {\n+    id: 'exercise',\n+    title: '운동처방',\n+    subMenus: [\n+      { id: 'exercise-assessment', title: '평가 등록', path: '/cms/exercise/assessment' },\n+      { id: 'exercise-body-analysis', title: '체형 분석', path: '/cms/exercise/body-analysis' },\n+      { id: 'exercise-gait-pressure', title: '보행/족저압', path: '/cms/exercise/gait-pressure' },\n+      { id: 'exercise-program', title: '프로그램 배정', path: '/cms/exercise/program' },\n+      { id: 'exercise-qr-card', title: 'QR 카드 출력', path: '/cms/exercise/qr-card' },\n+    ],\n+  },\n+  {\n+    id: 'relaxing',\n+    title: '릴렉싱',\n+    subMenus: [\n+      { id: 'relaxing-bed-assign', title: '베드 배정', path: '/cms/relaxing/bed-assign' },\n+      { id: 'relaxing-timer', title: '타이머', path: '/cms/relaxing/timer' },\n+      { id: 'relaxing-session-manage', title: '회차권 관리', path: '/cms/relaxing/session-manage' },\n+      { id: 'relaxing-condition-note', title: '컨디션 노트', path: '/cms/relaxing/condition-note' },\n+      { id: 'relaxing-today-status', title: '금일 현황', path: '/cms/relaxing/today-status' },\n+    ],\n+  },\n+  {\n+    id: 'payment',\n+    title: '결제/포인트',\n+    subMenus: [\n+      { id: 'payment-register', title: '결제 등록', path: '/cms/payment/register' },\n+      { id: 'payment-point-charge', title: '포인트 충전', path: '/cms/payment/point-charge' },\n+      { id: 'payment-refund', title: '환불/조정', path: '/cms/payment/refund' },\n+      { id: 'payment-receipt', title: '영수증 보내기', path: '/cms/payment/receipt' },\n+      { id: 'payment-sales-dashboard', title: '매출 대시보드', path: '/cms/payment/sales-dashboard' },\n+    ],\n+  },\n+  // {\n+  //   id: 'notification',\n+  //   title: '알림/문자',\n+  //   subMenus: [\n+  //     { id: 'notification-sms', title: '단문 보내기', path: '/cms/notification/sms' },\n+  //     { id: 'notification-reservation-remind', title: '예약 리마인드', path: '/cms/notification/reservation-remind' },\n+  //     { id: 'notification-birthday-dormant', title: '생일/휴면', path: '/cms/notification/birthday-dormant' },\n+  //     { id: 'notification-coupon', title: '쿠폰 발송', path: '/cms/notification/coupon' },\n+  //     { id: 'notification-template', title: '템플릿 관리', path: '/cms/notification/template' },\n+  //   ],\n+  // },\n+  // {\n+  //   id: 'statistics',\n+  //   title: '통계/리포트',\n+  //   subMenus: [\n+  //     { id: 'statistics-period', title: '일/주/월', path: '/cms/statistics/period' },\n+  //     { id: 'statistics-coach-kpi', title: '코치별 KPI', path: '/cms/statistics/coach-kpi' },\n+  //     { id: 'statistics-remaining-session', title: '잔여 세션', path: '/cms/statistics/remaining-session' },\n+  //     { id: 'statistics-churn-risk', title: '이탈 위험', path: '/cms/statistics/churn-risk' },\n+  //     { id: 'statistics-nps', title: 'NPS 설문', path: '/cms/statistics/nps' },\n+  //   ],\n+  // },\n+  {\n+    id: 'settings',\n+    title: '설정',\n+    subMenus: [\n+      { id: 'settings-staff-permission', title: '직원/권한', path: '/cms/settings/staff-permission' },\n+      { id: 'settings-program-price', title: '프로그램/가격', path: '/cms/settings/program-price' },\n+      { id: 'settings-channel-integration', title: '채널 연동', path: '/cms/settings/channel-integration' },\n+      { id: 'settings-data-backup', title: '데이터 백업', path: '/cms/settings/data-backup' },\n+    ],\n+  },\n+];\n+\n+const AppBarContainer = styled.div`\n+  position: sticky; /* fixed 대신 sticky 사용 */\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  background-color: ${AppColors.surface};\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  z-index: 1000;\n+  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n+`;\n+\n+const TopBar = styled.header`\n+  height: 64px;\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 0 24px;\n+  min-width: 1200px; /* 최소 너비만 설정 */\n+  width: 100%; /* 화면 전체 너비 사용 */\n+  box-sizing: border-box;\n+`;\n+\n+const LeftSection = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 32px;\n+  flex-shrink: 0; /* 좌측 섹션이 축소되지 않도록 */\n+`;\n+\n+const Logo = styled.div`\n+  display: flex;\n+  align-items: center;\n+  font-weight: 700;\n+  font-size: ${AppTextStyles.title2.fontSize};\n+  color: ${AppColors.primary};\n+  cursor: pointer;\n+`;\n+\n+const MenuSection = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 24px;\n+  position: relative;\n+  flex-shrink: 0; /* 메뉴 섹션이 축소되지 않도록 */\n+`;\n+\n+const MenuCategory = styled.div<{ $isActive: boolean }>`\n+  cursor: pointer;\n+  padding: 8px 16px;\n+  border-radius: 8px;\n+  font-weight: 500;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${props => props.$isActive ? AppColors.primary : AppColors.onSurface};\n+  background-color: ${props => props.$isActive ? `${AppColors.primary}10` : 'transparent'};\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary}10;\n+    color: ${AppColors.primary};\n+  }\n+`;\n+\n+const SubMenuChipsContainer = styled.div`\n+  padding: 16px 24px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  background-color: ${AppColors.surface};\n+  min-width: 1200px; /* 최소 너비만 설정 */\n+  width: 100%; /* 화면 전체 너비 사용 */\n+  box-sizing: border-box;\n+`;\n+\n+const ChipsWrapper = styled.div`\n+  display: flex;\n+  flex-wrap: nowrap; /* 줄바꿈 방지 */\n+  gap: 8px;\n+  align-items: center;\n+  min-width: max-content; /* 콘텐츠 크기에 맞춰 최소 너비 설정 */\n+`;\n+\n+const CategoryLabel = styled.span`\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  color: ${AppColors.onSurface};\n+  font-weight: 500;\n+  margin-right: 12px;\n+`;\n+\n+const SubMenuChip = styled.div<{ $isActive?: boolean }>`\n+  padding: 6px 12px;\n+  border-radius: 16px;\n+  background-color: ${props => props.$isActive ? AppColors.primary : AppColors.primary}10;\n+  color: ${props => props.$isActive ? AppColors.onPrimary : AppColors.primary};\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  font-weight: 500;\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+  border: 1px solid ${props => props.$isActive ? AppColors.primary : 'transparent'};\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n+  }\n+`;\n+\n+const RightSection = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 16px;\n+  flex-shrink: 0; /* 우측 섹션이 축소되지 않도록 */\n+`;\n+\n+const UserInfo = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 8px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface};\n+`;\n+\n+const UserName = styled.span`\n+  font-weight: 500;\n+`;\n+\n+const SettingsIcon = styled.div`\n+  width: 32px;\n+  height: 32px;\n+  border-radius: 50%;\n+  background-color: ${AppColors.primary}10;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary}20;\n+  }\n+\n+  svg {\n+    width: 18px;\n+    height: 18px;\n+    color: ${AppColors.primary};\n+  }\n+`;\n+\n+const LogoutButton = styled.button`\n+  padding: 6px 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 6px;\n+  background-color: transparent;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.error}10;\n+    border-color: ${AppColors.error};\n+    color: ${AppColors.error};\n+  }\n+`;\n+\n+interface CMSAppBarProps {\n+  currentPath?: string;\n+  onMenuClick?: (path: string) => void;\n+}\n+\n+const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick }) => {\n+  const [selectedCategoryId, setSelectedCategoryId] = useState<string>('member'); // 기본값 설정\n+  const [selectedSubMenuPath, setSelectedSubMenuPath] = useState<string>('');\n+  const { logout } = useAdminAuth();\n+  const navigate = useNavigate();\n+  const location = useLocation();\n+\n+  // 현재 경로에 따라 선택된 카테고리와 서브메뉴 설정\n+  useEffect(() => {\n+    const currentPathToUse = currentPath || location.pathname;\n+    \n+    // 현재 경로에 해당하는 카테고리와 서브메뉴 찾기\n+    for (const category of menuCategories) {\n+      const foundSubMenu = category.subMenus.find(subMenu => subMenu.path === currentPathToUse);\n+      if (foundSubMenu) {\n+        setSelectedCategoryId(category.id);\n+        setSelectedSubMenuPath(foundSubMenu.path);\n+        return;\n+      }\n+    }\n+    \n+    // 기본 경로인 경우 (예: /cms/member/search)\n+    if (currentPathToUse === '/cms/member/search') {\n+      setSelectedCategoryId('member');\n+      setSelectedSubMenuPath('/cms/member/search');\n+    }\n+  }, [currentPath, location.pathname]);\n+\n+  // 현재 사용자 정보 가져오기 (sessionStorage에서)\n+  const adminId = sessionStorage.getItem('adminId');\n+  const adminName = adminId || '관리자';\n+\n+  const handleCategoryClick = (categoryId: string) => {\n+    setSelectedCategoryId(categoryId);\n+    setSelectedSubMenuPath(''); // 카테고리 변경 시 선택된 서브메뉴 초기화\n+  };\n+\n+  const handleSubMenuClick = (path: string) => {\n+    setSelectedSubMenuPath(path);\n+    if (onMenuClick) {\n+      onMenuClick(path);\n+    } else {\n+      // React Router를 사용하여 페이지 이동 (새로고침 없음)\n+      navigate(path);\n+    }\n+  };\n+\n+  const handleLogoClick = () => {\n+    setSelectedCategoryId('member');\n+    setSelectedSubMenuPath('/cms/member/search');\n+    if (onMenuClick) {\n+      onMenuClick('/cms/member/search');\n+    } else {\n+      navigate('/cms/member/search');\n+    }\n+  };\n+\n+  const handleLogout = () => {\n+    if (window.confirm('로그아웃 하시겠습니까?')) {\n+      logout();\n+      navigate('/cms/login');\n+    }\n+  };\n+\n+  const handleSettingsClick = () => {\n+    // 설정 페이지로 이동하거나 설정 모달 열기\n+    console.log('설정 클릭');\n+  };\n+\n+  // 현재 선택된 카테고리 찾기\n+  const selectedCategory = menuCategories.find(category => category.id === selectedCategoryId);\n+\n+  return (\n+    <AppBarContainer>\n+      <TopBar>\n+        <LeftSection>\n+          <Logo onClick={handleLogoClick}>\n+            LAVIDA CMS\n+          </Logo>\n+          \n+          <MenuSection>\n+            {menuCategories.map((category) => (\n+              <MenuCategory\n+                key={category.id}\n+                $isActive={selectedCategoryId === category.id}\n+                onClick={() => handleCategoryClick(category.id)}\n+              >\n+                {category.title}\n+              </MenuCategory>\n+            ))}\n+          </MenuSection>\n+        </LeftSection>\n+\n+        <RightSection>\n+          <UserInfo>\n+            <UserName>{adminName}</UserName>\n+            <span>님</span>\n+          </UserInfo>\n+          \n+          <SettingsIcon onClick={handleSettingsClick}>\n+            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n+              <path d=\"M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5a3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97c0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1c0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.66Z\"/>\n+            </svg>\n+          </SettingsIcon>\n+          \n+          <LogoutButton onClick={handleLogout}>\n+            로그아웃\n+          </LogoutButton>\n+        </RightSection>\n+      </TopBar>\n+\n+      {/* 선택된 카테고리의 하위 메뉴를 chips 형태로 표시 */}\n+      {selectedCategory && (\n+        <SubMenuChipsContainer>\n+          <ChipsWrapper>\n+            <CategoryLabel>{selectedCategory.title}:</CategoryLabel>\n+            {selectedCategory.subMenus.map((subMenu) => (\n+              <SubMenuChip\n+                key={subMenu.id}\n+                $isActive={selectedSubMenuPath === subMenu.path}\n+                onClick={() => handleSubMenuClick(subMenu.path)}\n+              >\n+                {subMenu.title}\n+              </SubMenuChip>\n+            ))}\n+          </ChipsWrapper>\n+        </SubMenuChipsContainer>\n+      )}\n+    </AppBarContainer>\n+  );\n+};\n+\n+export default CMSAppBar;\n"
                },
                {
                    "date": 1759896947189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,10 +199,10 @@\n \n const SubMenuChip = styled.div<{ $isActive?: boolean }>`\n   padding: 6px 12px;\n   border-radius: 16px;\n-  background-color: ${props => props.$isActive ? AppColors.primary : AppColors.primary}10;\n-  color: ${props => props.$isActive ? AppColors.onPrimary : AppColors.primary};\n+  background-color: ${props => props.$isActive ? `${AppColors.primary}10` : `${AppColors.primary}10`};\n+  color: ${props => props.$isActive ? AppColors.primary : AppColors.primary};\n   font-size: ${AppTextStyles.label2.fontSize};\n   font-weight: 500;\n   cursor: pointer;\n   transition: all 0.2s ease;\n@@ -409,1229 +409,4 @@\n   );\n };\n \n export default CMSAppBar;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate, useLocation } from 'react-router-dom';\n-import styled from 'styled-components';\n-import { AppColors } from '../styles/colors';\n-import { AppTextStyles } from '../styles/textStyles';\n-import { useAdminAuth } from '../context/AdminAuthContext';\n-\n-// 메뉴 카테고리 타입 정의\n-interface MenuCategoryType {\n-  id: string;\n-  title: string;\n-  subMenus: SubMenu[];\n-}\n-\n-interface SubMenu {\n-  id: string;\n-  title: string;\n-  path: string;\n-}\n-\n-// LaVida CRM 메뉴 데이터 (HTML 파일 기준)\n-const menuCategories: MenuCategoryType[] = [\n-  {\n-    id: 'member',\n-    title: '회원관리',\n-    subMenus: [\n-      { id: 'member-register', title: '신규 등록', path: '/cms/member/register' },\n-      { id: 'member-search', title: '빠른 검색', path: '/cms/member/search' },\n-      { id: 'member-tags', title: '태그 관리', path: '/cms/member/tags' },\n-      { id: 'member-qr-checkin', title: 'QR 체크인', path: '/cms/member/qr-checkin' },\n-      { id: 'member-visit-record', title: '내원 기록', path: '/cms/member/visit-record' },\n-      { id: 'member-excel-upload', title: '엑셀 업로드', path: '/cms/member/excel-upload' },\n-      { id: 'member-export', title: '내보내기', path: '/cms/member/export' },\n-    ],\n-  },\n-  {\n-    id: 'reservation',\n-    title: '예약/스케줄',\n-    subMenus: [\n-      { id: 'reservation-new', title: '신규 예약', path: '/cms/reservation/new' },\n-      { id: 'reservation-timetable', title: '시간표 보기', path: '/cms/reservation/timetable' },\n-      { id: 'reservation-batch', title: '일괄 예약', path: '/cms/reservation/batch' },\n-      { id: 'reservation-waiting', title: '대기 관리', path: '/cms/reservation/waiting' },\n-      { id: 'reservation-auto-remind', title: '자동 리마인드', path: '/cms/reservation/auto-remind' },\n-    ],\n-  },\n-  {\n-    id: 'exercise',\n-    title: '운동처방',\n-    subMenus: [\n-      { id: 'exercise-assessment', title: '평가 등록', path: '/cms/exercise/assessment' },\n-      { id: 'exercise-body-analysis', title: '체형 분석', path: '/cms/exercise/body-analysis' },\n-      { id: 'exercise-gait-pressure', title: '보행/족저압', path: '/cms/exercise/gait-pressure' },\n-      { id: 'exercise-program', title: '프로그램 배정', path: '/cms/exercise/program' },\n-      { id: 'exercise-qr-card', title: 'QR 카드 출력', path: '/cms/exercise/qr-card' },\n-    ],\n-  },\n-  {\n-    id: 'relaxing',\n-    title: '릴렉싱',\n-    subMenus: [\n-      { id: 'relaxing-bed-assign', title: '베드 배정', path: '/cms/relaxing/bed-assign' },\n-      { id: 'relaxing-timer', title: '타이머', path: '/cms/relaxing/timer' },\n-      { id: 'relaxing-session-manage', title: '회차권 관리', path: '/cms/relaxing/session-manage' },\n-      { id: 'relaxing-condition-note', title: '컨디션 노트', path: '/cms/relaxing/condition-note' },\n-      { id: 'relaxing-today-status', title: '금일 현황', path: '/cms/relaxing/today-status' },\n-    ],\n-  },\n-  {\n-    id: 'payment',\n-    title: '결제/포인트',\n-    subMenus: [\n-      { id: 'payment-register', title: '결제 등록', path: '/cms/payment/register' },\n-      { id: 'payment-point-charge', title: '포인트 충전', path: '/cms/payment/point-charge' },\n-      { id: 'payment-refund', title: '환불/조정', path: '/cms/payment/refund' },\n-      { id: 'payment-receipt', title: '영수증 보내기', path: '/cms/payment/receipt' },\n-      { id: 'payment-sales-dashboard', title: '매출 대시보드', path: '/cms/payment/sales-dashboard' },\n-    ],\n-  },\n-  {\n-    id: 'notification',\n-    title: '알림/문자',\n-    subMenus: [\n-      { id: 'notification-sms', title: '단문 보내기', path: '/cms/notification/sms' },\n-      { id: 'notification-reservation-remind', title: '예약 리마인드', path: '/cms/notification/reservation-remind' },\n-      { id: 'notification-birthday-dormant', title: '생일/휴면', path: '/cms/notification/birthday-dormant' },\n-      { id: 'notification-coupon', title: '쿠폰 발송', path: '/cms/notification/coupon' },\n-      { id: 'notification-template', title: '템플릿 관리', path: '/cms/notification/template' },\n-    ],\n-  },\n-  {\n-    id: 'settings',\n-    title: '설정',\n-    subMenus: [\n-      { id: 'settings-staff-permission', title: '직원/권한', path: '/cms/settings/staff-permission' },\n-      { id: 'settings-program-price', title: '프로그램/가격', path: '/cms/settings/program-price' },\n-      { id: 'settings-channel-integration', title: '채널 연동', path: '/cms/settings/channel-integration' },\n-      { id: 'settings-data-backup', title: '데이터 백업', path: '/cms/settings/data-backup' },\n-    ],\n-  },\n-];\n-\n-const AppBarContainer = styled.div`\n-  position: sticky; /* fixed 대신 sticky 사용 */\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  background-color: ${AppColors.surface};\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  z-index: 1000;\n-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n-`;\n-\n-const TopBar = styled.header`\n-  height: 64px;\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  padding: 0 24px;\n-  min-width: 1200px; /* 최소 너비만 설정 */\n-  width: 100%; /* 화면 전체 너비 사용 */\n-  box-sizing: border-box;\n-`;\n-\n-const LeftSection = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 32px;\n-  flex-shrink: 0; /* 좌측 섹션이 축소되지 않도록 */\n-`;\n-\n-const Logo = styled.div`\n-  display: flex;\n-  align-items: center;\n-  font-weight: 700;\n-  font-size: ${AppTextStyles.title2.fontSize};\n-  color: ${AppColors.primary};\n-  cursor: pointer;\n-`;\n-\n-const MenuSection = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 24px;\n-  position: relative;\n-  flex-shrink: 0; /* 메뉴 섹션이 축소되지 않도록 */\n-`;\n-\n-const MenuCategory = styled.div<{ $isActive: boolean }>`\n-  cursor: pointer;\n-  padding: 8px 16px;\n-  border-radius: 8px;\n-  font-weight: 500;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${props => props.$isActive ? AppColors.primary : AppColors.onSurface};\n-  background-color: ${props => props.$isActive ? `${AppColors.primary}10` : 'transparent'};\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.primary}10;\n-    color: ${AppColors.primary};\n-  }\n-`;\n-\n-const SubMenuChipsContainer = styled.div`\n-  padding: 16px 24px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  background-color: ${AppColors.surface};\n-  min-width: 1200px; /* 최소 너비만 설정 */\n-  width: 100%; /* 화면 전체 너비 사용 */\n-  box-sizing: border-box;\n-`;\n-\n-const ChipsWrapper = styled.div`\n-  display: flex;\n-  flex-wrap: nowrap; /* 줄바꿈 방지 */\n-  gap: 8px;\n-  align-items: center;\n-  min-width: max-content; /* 콘텐츠 크기에 맞춰 최소 너비 설정 */\n-`;\n-\n-const CategoryLabel = styled.span`\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  color: ${AppColors.onSurface};\n-  font-weight: 500;\n-  margin-right: 12px;\n-`;\n-\n-const SubMenuChip = styled.div<{ $isActive?: boolean }>`\n-  padding: 6px 12px;\n-  border-radius: 16px;\n-  background-color: ${props => props.$isActive ? AppColors.primary : AppColors.primary}10;\n-  color: ${props => props.$isActive ? AppColors.onPrimary : AppColors.primary};\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  font-weight: 500;\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-  border: 1px solid ${props => props.$isActive ? AppColors.primary : 'transparent'};\n-\n-  &:hover {\n-    background-color: ${AppColors.primary};\n-    color: ${AppColors.onPrimary};\n-  }\n-`;\n-\n-const RightSection = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 16px;\n-  flex-shrink: 0; /* 우측 섹션이 축소되지 않도록 */\n-`;\n-\n-const UserInfo = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 8px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onSurface};\n-`;\n-\n-const UserName = styled.span`\n-  font-weight: 500;\n-`;\n-\n-const SettingsIcon = styled.div`\n-  width: 32px;\n-  height: 32px;\n-  border-radius: 50%;\n-  background-color: ${AppColors.primary}10;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.primary}20;\n-  }\n-\n-  svg {\n-    width: 18px;\n-    height: 18px;\n-    color: ${AppColors.primary};\n-  }\n-`;\n-\n-const LogoutButton = styled.button`\n-  padding: 6px 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 6px;\n-  background-color: transparent;\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.error}10;\n-    border-color: ${AppColors.error};\n-    color: ${AppColors.error};\n-  }\n-`;\n-\n-interface CMSAppBarProps {\n-  currentPath?: string;\n-  onMenuClick?: (path: string) => void;\n-}\n-\n-const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick }) => {\n-  const [selectedCategoryId, setSelectedCategoryId] = useState<string>('member'); // 기본값 설정\n-  const [selectedSubMenuPath, setSelectedSubMenuPath] = useState<string>('');\n-  const { logout } = useAdminAuth();\n-  const navigate = useNavigate();\n-  const location = useLocation();\n-\n-  // 현재 경로에 따라 선택된 카테고리와 서브메뉴 설정\n-  useEffect(() => {\n-    const currentPathToUse = currentPath || location.pathname;\n-    \n-    // 현재 경로에 해당하는 카테고리와 서브메뉴 찾기\n-    for (const category of menuCategories) {\n-      const foundSubMenu = category.subMenus.find(subMenu => subMenu.path === currentPathToUse);\n-      if (foundSubMenu) {\n-        setSelectedCategoryId(category.id);\n-        setSelectedSubMenuPath(foundSubMenu.path);\n-        return;\n-      }\n-    }\n-    \n-    // 기본 경로인 경우 (예: /cms/member/search)\n-    if (currentPathToUse === '/cms/member/search') {\n-      setSelectedCategoryId('member');\n-      setSelectedSubMenuPath('/cms/member/search');\n-    }\n-  }, [currentPath, location.pathname]);\n-\n-  // 현재 사용자 정보 가져오기 (sessionStorage에서)\n-  const adminId = sessionStorage.getItem('adminId');\n-  const adminName = adminId || '관리자';\n-\n-  const handleCategoryClick = (categoryId: string) => {\n-    setSelectedCategoryId(categoryId);\n-    setSelectedSubMenuPath(''); // 카테고리 변경 시 선택된 서브메뉴 초기화\n-  };\n-\n-  const handleSubMenuClick = (path: string) => {\n-    setSelectedSubMenuPath(path);\n-    if (onMenuClick) {\n-      onMenuClick(path);\n-    } else {\n-      // React Router를 사용하여 페이지 이동 (새로고침 없음)\n-      navigate(path);\n-    }\n-  };\n-\n-  const handleLogoClick = () => {\n-    setSelectedCategoryId('member');\n-    setSelectedSubMenuPath('/cms/member/search');\n-    if (onMenuClick) {\n-      onMenuClick('/cms/member/search');\n-    } else {\n-      navigate('/cms/member/search');\n-    }\n-  };\n-\n-  const handleLogout = () => {\n-    if (window.confirm('로그아웃 하시겠습니까?')) {\n-      logout();\n-      navigate('/cms/login');\n-    }\n-  };\n-\n-  const handleSettingsClick = () => {\n-    // 설정 페이지로 이동하거나 설정 모달 열기\n-    console.log('설정 클릭');\n-  };\n-\n-  // 현재 선택된 카테고리 찾기\n-  const selectedCategory = menuCategories.find(category => category.id === selectedCategoryId);\n-\n-  return (\n-    <AppBarContainer>\n-      <TopBar>\n-        <LeftSection>\n-          <Logo onClick={handleLogoClick}>\n-            LAVIDA CMS\n-          </Logo>\n-          \n-          <MenuSection>\n-            {menuCategories.map((category) => (\n-              <MenuCategory\n-                key={category.id}\n-                $isActive={selectedCategoryId === category.id}\n-                onClick={() => handleCategoryClick(category.id)}\n-              >\n-                {category.title}\n-              </MenuCategory>\n-            ))}\n-          </MenuSection>\n-        </LeftSection>\n-\n-        <RightSection>\n-          <UserInfo>\n-            <UserName>{adminName}</UserName>\n-            <span>님</span>\n-          </UserInfo>\n-          \n-          <SettingsIcon onClick={handleSettingsClick}>\n-            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n-              <path d=\"M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5a3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97c0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1c0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.66Z\"/>\n-            </svg>\n-          </SettingsIcon>\n-          \n-          <LogoutButton onClick={handleLogout}>\n-            로그아웃\n-          </LogoutButton>\n-        </RightSection>\n-      </TopBar>\n-\n-      {/* 선택된 카테고리의 하위 메뉴를 chips 형태로 표시 */}\n-      {selectedCategory && (\n-        <SubMenuChipsContainer>\n-          <ChipsWrapper>\n-            <CategoryLabel>{selectedCategory.title}:</CategoryLabel>\n-            {selectedCategory.subMenus.map((subMenu) => (\n-              <SubMenuChip\n-                key={subMenu.id}\n-                $isActive={selectedSubMenuPath === subMenu.path}\n-                onClick={() => handleSubMenuClick(subMenu.path)}\n-              >\n-                {subMenu.title}\n-              </SubMenuChip>\n-            ))}\n-          </ChipsWrapper>\n-        </SubMenuChipsContainer>\n-      )}\n-    </AppBarContainer>\n-  );\n-};\n-\n-export default CMSAppBar;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate, useLocation } from 'react-router-dom';\n-import styled from 'styled-components';\n-import { AppColors } from '../styles/colors';\n-import { AppTextStyles } from '../styles/textStyles';\n-import { useAdminAuth } from '../context/AdminAuthContext';\n-\n-// 메뉴 카테고리 타입 정의\n-interface MenuCategoryType {\n-  id: string;\n-  title: string;\n-  subMenus: SubMenu[];\n-}\n-\n-interface SubMenu {\n-  id: string;\n-  title: string;\n-  path: string;\n-}\n-\n-// LaVida CRM 메뉴 데이터 (HTML 파일 기준)\n-const menuCategories: MenuCategoryType[] = [\n-  {\n-    id: 'member',\n-    title: '회원관리',\n-    subMenus: [\n-      { id: 'member-register', title: '신규 등록', path: '/cms/member/register' },\n-      { id: 'member-search', title: '빠른 검색', path: '/cms/member/search' },\n-      { id: 'member-tags', title: '태그 관리', path: '/cms/member/tags' },\n-      { id: 'member-qr-checkin', title: 'QR 체크인', path: '/cms/member/qr-checkin' },\n-      { id: 'member-visit-record', title: '내원 기록', path: '/cms/member/visit-record' },\n-      { id: 'member-excel-upload', title: '엑셀 업로드', path: '/cms/member/excel-upload' },\n-      { id: 'member-export', title: '내보내기', path: '/cms/member/export' },\n-    ],\n-  },\n-  {\n-    id: 'reservation',\n-    title: '예약/스케줄',\n-    subMenus: [\n-      { id: 'reservation-new', title: '신규 예약', path: '/cms/reservation/new' },\n-      { id: 'reservation-timetable', title: '시간표 보기', path: '/cms/reservation/timetable' },\n-      { id: 'reservation-batch', title: '일괄 예약', path: '/cms/reservation/batch' },\n-      { id: 'reservation-waiting', title: '대기 관리', path: '/cms/reservation/waiting' },\n-      { id: 'reservation-auto-remind', title: '자동 리마인드', path: '/cms/reservation/auto-remind' },\n-    ],\n-  },\n-  {\n-    id: 'exercise',\n-    title: '운동처방',\n-    subMenus: [\n-      { id: 'exercise-assessment', title: '평가 등록', path: '/cms/exercise/assessment' },\n-      { id: 'exercise-body-analysis', title: '체형 분석', path: '/cms/exercise/body-analysis' },\n-      { id: 'exercise-gait-pressure', title: '보행/족저압', path: '/cms/exercise/gait-pressure' },\n-      { id: 'exercise-program', title: '프로그램 배정', path: '/cms/exercise/program' },\n-      { id: 'exercise-qr-card', title: 'QR 카드 출력', path: '/cms/exercise/qr-card' },\n-    ],\n-  },\n-  {\n-    id: 'relaxing',\n-    title: '릴렉싱',\n-    subMenus: [\n-      { id: 'relaxing-bed-assign', title: '베드 배정', path: '/cms/relaxing/bed-assign' },\n-      { id: 'relaxing-timer', title: '타이머', path: '/cms/relaxing/timer' },\n-      { id: 'relaxing-session-manage', title: '회차권 관리', path: '/cms/relaxing/session-manage' },\n-      { id: 'relaxing-condition-note', title: '컨디션 노트', path: '/cms/relaxing/condition-note' },\n-      { id: 'relaxing-today-status', title: '금일 현황', path: '/cms/relaxing/today-status' },\n-    ],\n-  },\n-  {\n-    id: 'payment',\n-    title: '결제/포인트',\n-    subMenus: [\n-      { id: 'payment-register', title: '결제 등록', path: '/cms/payment/register' },\n-      { id: 'payment-point-charge', title: '포인트 충전', path: '/cms/payment/point-charge' },\n-      { id: 'payment-refund', title: '환불/조정', path: '/cms/payment/refund' },\n-      { id: 'payment-receipt', title: '영수증 보내기', path: '/cms/payment/receipt' },\n-      { id: 'payment-sales-dashboard', title: '매출 대시보드', path: '/cms/payment/sales-dashboard' },\n-    ],\n-  },\n-  {\n-    id: 'notification',\n-    title: '알림/문자',\n-    subMenus: [\n-      { id: 'notification-sms', title: '단문 보내기', path: '/cms/notification/sms' },\n-      { id: 'notification-reservation-remind', title: '예약 리마인드', path: '/cms/notification/reservation-remind' },\n-      { id: 'notification-birthday-dormant', title: '생일/휴면', path: '/cms/notification/birthday-dormant' },\n-      { id: 'notification-coupon', title: '쿠폰 발송', path: '/cms/notification/coupon' },\n-      { id: 'notification-template', title: '템플릿 관리', path: '/cms/notification/template' },\n-    ],\n-  },\n-  {\n-    id: 'statistics',\n-    title: '통계/리포트',\n-    subMenus: [\n-      { id: 'statistics-period', title: '일/주/월', path: '/cms/statistics/period' },\n-      { id: 'statistics-coach-kpi', title: '코치별 KPI', path: '/cms/statistics/coach-kpi' },\n-      { id: 'statistics-remaining-session', title: '잔여 세션', path: '/cms/statistics/remaining-session' },\n-      { id: 'statistics-churn-risk', title: '이탈 위험', path: '/cms/statistics/churn-risk' },\n-      { id: 'statistics-nps', title: 'NPS 설문', path: '/cms/statistics/nps' },\n-    ],\n-  },\n-  {\n-    id: 'settings',\n-    title: '설정',\n-    subMenus: [\n-      { id: 'settings-staff-permission', title: '직원/권한', path: '/cms/settings/staff-permission' },\n-      { id: 'settings-program-price', title: '프로그램/가격', path: '/cms/settings/program-price' },\n-      { id: 'settings-channel-integration', title: '채널 연동', path: '/cms/settings/channel-integration' },\n-      { id: 'settings-data-backup', title: '데이터 백업', path: '/cms/settings/data-backup' },\n-    ],\n-  },\n-];\n-\n-const AppBarContainer = styled.div`\n-  position: sticky; /* fixed 대신 sticky 사용 */\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  background-color: ${AppColors.surface};\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  z-index: 1000;\n-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n-`;\n-\n-const TopBar = styled.header`\n-  height: 64px;\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  /* padding: 0 24px; */\n-  min-width: 1200px; /* 최소 너비만 설정 */\n-  width: 100%; /* 화면 전체 너비 사용 */\n-  box-sizing: border-box;\n-`;\n-\n-const LeftSection = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 32px;\n-  flex-shrink: 0; /* 좌측 섹션이 축소되지 않도록 */\n-`;\n-\n-const Logo = styled.div`\n-  display: flex;\n-  align-items: center;\n-  font-weight: 700;\n-  font-size: ${AppTextStyles.title2.fontSize};\n-  color: ${AppColors.primary};\n-  cursor: pointer;\n-`;\n-\n-const MenuSection = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 24px;\n-  position: relative;\n-  flex-shrink: 0; /* 메뉴 섹션이 축소되지 않도록 */\n-`;\n-\n-const MenuCategory = styled.div<{ $isActive: boolean }>`\n-  cursor: pointer;\n-  padding: 8px 16px;\n-  border-radius: 8px;\n-  font-weight: 500;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${props => props.$isActive ? AppColors.primary : AppColors.onSurface};\n-  background-color: ${props => props.$isActive ? `${AppColors.primary}10` : 'transparent'};\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.primary}10;\n-    color: ${AppColors.primary};\n-  }\n-`;\n-\n-const SubMenuChipsContainer = styled.div`\n-  padding: 16px 24px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  background-color: ${AppColors.surface};\n-  min-width: 1200px; /* 최소 너비만 설정 */\n-  width: 100%; /* 화면 전체 너비 사용 */\n-  box-sizing: border-box;\n-`;\n-\n-const ChipsWrapper = styled.div`\n-  display: flex;\n-  flex-wrap: nowrap; /* 줄바꿈 방지 */\n-  gap: 8px;\n-  align-items: center;\n-  min-width: max-content; /* 콘텐츠 크기에 맞춰 최소 너비 설정 */\n-`;\n-\n-const CategoryLabel = styled.span`\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  color: ${AppColors.onSurface};\n-  font-weight: 500;\n-  margin-right: 12px;\n-`;\n-\n-const SubMenuChip = styled.div<{ $isActive?: boolean }>`\n-  padding: 6px 12px;\n-  border-radius: 16px;\n-  background-color: ${props => props.$isActive ? AppColors.primary : AppColors.primary}10;\n-  color: ${props => props.$isActive ? AppColors.onPrimary : AppColors.primary};\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  font-weight: 500;\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-  border: 1px solid ${props => props.$isActive ? AppColors.primary : 'transparent'};\n-\n-  &:hover {\n-    background-color: ${AppColors.primary};\n-    color: ${AppColors.onPrimary};\n-  }\n-`;\n-\n-const RightSection = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 16px;\n-  flex-shrink: 0; /* 우측 섹션이 축소되지 않도록 */\n-`;\n-\n-const UserInfo = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 8px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onSurface};\n-`;\n-\n-const UserName = styled.span`\n-  font-weight: 500;\n-`;\n-\n-const SettingsIcon = styled.div`\n-  width: 32px;\n-  height: 32px;\n-  border-radius: 50%;\n-  background-color: ${AppColors.primary}10;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.primary}20;\n-  }\n-\n-  svg {\n-    width: 18px;\n-    height: 18px;\n-    color: ${AppColors.primary};\n-  }\n-`;\n-\n-const LogoutButton = styled.button`\n-  padding: 6px 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 6px;\n-  background-color: transparent;\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.error}10;\n-    border-color: ${AppColors.error};\n-    color: ${AppColors.error};\n-  }\n-`;\n-\n-interface CMSAppBarProps {\n-  currentPath?: string;\n-  onMenuClick?: (path: string) => void;\n-}\n-\n-const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick }) => {\n-  const [selectedCategoryId, setSelectedCategoryId] = useState<string>('member'); // 기본값 설정\n-  const [selectedSubMenuPath, setSelectedSubMenuPath] = useState<string>('');\n-  const { logout } = useAdminAuth();\n-  const navigate = useNavigate();\n-  const location = useLocation();\n-\n-  // 현재 경로에 따라 선택된 카테고리와 서브메뉴 설정\n-  useEffect(() => {\n-    const currentPathToUse = currentPath || location.pathname;\n-    \n-    // 현재 경로에 해당하는 카테고리와 서브메뉴 찾기\n-    for (const category of menuCategories) {\n-      const foundSubMenu = category.subMenus.find(subMenu => subMenu.path === currentPathToUse);\n-      if (foundSubMenu) {\n-        setSelectedCategoryId(category.id);\n-        setSelectedSubMenuPath(foundSubMenu.path);\n-        return;\n-      }\n-    }\n-    \n-    // 기본 경로인 경우 (예: /cms/member/search)\n-    if (currentPathToUse === '/cms/member/search') {\n-      setSelectedCategoryId('member');\n-      setSelectedSubMenuPath('/cms/member/search');\n-    }\n-  }, [currentPath, location.pathname]);\n-\n-  // 현재 사용자 정보 가져오기 (sessionStorage에서)\n-  const adminId = sessionStorage.getItem('adminId');\n-  const adminName = adminId || '관리자';\n-\n-  const handleCategoryClick = (categoryId: string) => {\n-    setSelectedCategoryId(categoryId);\n-    setSelectedSubMenuPath(''); // 카테고리 변경 시 선택된 서브메뉴 초기화\n-  };\n-\n-  const handleSubMenuClick = (path: string) => {\n-    setSelectedSubMenuPath(path);\n-    if (onMenuClick) {\n-      onMenuClick(path);\n-    } else {\n-      // React Router를 사용하여 페이지 이동 (새로고침 없음)\n-      navigate(path);\n-    }\n-  };\n-\n-  const handleLogoClick = () => {\n-    setSelectedCategoryId('member');\n-    setSelectedSubMenuPath('/cms/member/search');\n-    if (onMenuClick) {\n-      onMenuClick('/cms/member/search');\n-    } else {\n-      navigate('/cms/member/search');\n-    }\n-  };\n-\n-  const handleLogout = () => {\n-    if (window.confirm('로그아웃 하시겠습니까?')) {\n-      logout();\n-      navigate('/cms/login');\n-    }\n-  };\n-\n-  const handleSettingsClick = () => {\n-    // 설정 페이지로 이동하거나 설정 모달 열기\n-    console.log('설정 클릭');\n-  };\n-\n-  // 현재 선택된 카테고리 찾기\n-  const selectedCategory = menuCategories.find(category => category.id === selectedCategoryId);\n-\n-  return (\n-    <AppBarContainer>\n-      <TopBar>\n-        <LeftSection>\n-          <Logo onClick={handleLogoClick}>\n-            LAVIDA CMS\n-          </Logo>\n-          \n-          <MenuSection>\n-            {menuCategories.map((category) => (\n-              <MenuCategory\n-                key={category.id}\n-                $isActive={selectedCategoryId === category.id}\n-                onClick={() => handleCategoryClick(category.id)}\n-              >\n-                {category.title}\n-              </MenuCategory>\n-            ))}\n-          </MenuSection>\n-        </LeftSection>\n-\n-        <RightSection>\n-          <UserInfo>\n-            <UserName>{adminName}</UserName>\n-            <span>님</span>\n-          </UserInfo>\n-          \n-          <SettingsIcon onClick={handleSettingsClick}>\n-            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n-              <path d=\"M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5a3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97c0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1c0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.66Z\"/>\n-            </svg>\n-          </SettingsIcon>\n-          \n-          <LogoutButton onClick={handleLogout}>\n-            로그아웃\n-          </LogoutButton>\n-        </RightSection>\n-      </TopBar>\n-\n-      {/* 선택된 카테고리의 하위 메뉴를 chips 형태로 표시 */}\n-      {selectedCategory && (\n-        <SubMenuChipsContainer>\n-          <ChipsWrapper>\n-            <CategoryLabel>{selectedCategory.title}:</CategoryLabel>\n-            {selectedCategory.subMenus.map((subMenu) => (\n-              <SubMenuChip\n-                key={subMenu.id}\n-                $isActive={selectedSubMenuPath === subMenu.path}\n-                onClick={() => handleSubMenuClick(subMenu.path)}\n-              >\n-                {subMenu.title}\n-              </SubMenuChip>\n-            ))}\n-          </ChipsWrapper>\n-        </SubMenuChipsContainer>\n-      )}\n-    </AppBarContainer>\n-  );\n-};\n-\n-export default CMSAppBar;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate, useLocation } from 'react-router-dom';\n-import styled from 'styled-components';\n-import { AppColors } from '../styles/colors';\n-import { AppTextStyles } from '../styles/textStyles';\n-import { useAdminAuth } from '../context/AdminAuthContext';\n-\n-// 메뉴 카테고리 타입 정의\n-interface MenuCategoryType {\n-  id: string;\n-  title: string;\n-  subMenus: SubMenu[];\n-}\n-\n-interface SubMenu {\n-  id: string;\n-  title: string;\n-  path: string;\n-}\n-\n-// LaVida CRM 메뉴 데이터 (HTML 파일 기준)\n-const menuCategories: MenuCategoryType[] = [\n-  {\n-    id: 'member',\n-    title: '회원관리',\n-    subMenus: [\n-      { id: 'member-register', title: '신규 등록', path: '/cms/member/register' },\n-      { id: 'member-search', title: '빠른 검색', path: '/cms/member/search' },\n-      { id: 'member-tags', title: '태그 관리', path: '/cms/member/tags' },\n-      { id: 'member-qr-checkin', title: 'QR 체크인', path: '/cms/member/qr-checkin' },\n-      { id: 'member-visit-record', title: '내원 기록', path: '/cms/member/visit-record' },\n-      { id: 'member-excel-upload', title: '엑셀 업로드', path: '/cms/member/excel-upload' },\n-      { id: 'member-export', title: '내보내기', path: '/cms/member/export' },\n-    ],\n-  },\n-  {\n-    id: 'reservation',\n-    title: '예약/스케줄',\n-    subMenus: [\n-      { id: 'reservation-new', title: '신규 예약', path: '/cms/reservation/new' },\n-      { id: 'reservation-timetable', title: '시간표 보기', path: '/cms/reservation/timetable' },\n-      { id: 'reservation-batch', title: '일괄 예약', path: '/cms/reservation/batch' },\n-      { id: 'reservation-waiting', title: '대기 관리', path: '/cms/reservation/waiting' },\n-      { id: 'reservation-auto-remind', title: '자동 리마인드', path: '/cms/reservation/auto-remind' },\n-    ],\n-  },\n-  {\n-    id: 'exercise',\n-    title: '운동처방',\n-    subMenus: [\n-      { id: 'exercise-assessment', title: '평가 등록', path: '/cms/exercise/assessment' },\n-      { id: 'exercise-body-analysis', title: '체형 분석', path: '/cms/exercise/body-analysis' },\n-      { id: 'exercise-gait-pressure', title: '보행/족저압', path: '/cms/exercise/gait-pressure' },\n-      { id: 'exercise-program', title: '프로그램 배정', path: '/cms/exercise/program' },\n-      { id: 'exercise-qr-card', title: 'QR 카드 출력', path: '/cms/exercise/qr-card' },\n-    ],\n-  },\n-  {\n-    id: 'relaxing',\n-    title: '릴렉싱',\n-    subMenus: [\n-      { id: 'relaxing-bed-assign', title: '베드 배정', path: '/cms/relaxing/bed-assign' },\n-      { id: 'relaxing-timer', title: '타이머', path: '/cms/relaxing/timer' },\n-      { id: 'relaxing-session-manage', title: '회차권 관리', path: '/cms/relaxing/session-manage' },\n-      { id: 'relaxing-condition-note', title: '컨디션 노트', path: '/cms/relaxing/condition-note' },\n-      { id: 'relaxing-today-status', title: '금일 현황', path: '/cms/relaxing/today-status' },\n-    ],\n-  },\n-  {\n-    id: 'payment',\n-    title: '결제/포인트',\n-    subMenus: [\n-      { id: 'payment-register', title: '결제 등록', path: '/cms/payment/register' },\n-      { id: 'payment-point-charge', title: '포인트 충전', path: '/cms/payment/point-charge' },\n-      { id: 'payment-refund', title: '환불/조정', path: '/cms/payment/refund' },\n-      { id: 'payment-receipt', title: '영수증 보내기', path: '/cms/payment/receipt' },\n-      { id: 'payment-sales-dashboard', title: '매출 대시보드', path: '/cms/payment/sales-dashboard' },\n-    ],\n-  },\n-  {\n-    id: 'notification',\n-    title: '알림/문자',\n-    subMenus: [\n-      { id: 'notification-sms', title: '단문 보내기', path: '/cms/notification/sms' },\n-      { id: 'notification-reservation-remind', title: '예약 리마인드', path: '/cms/notification/reservation-remind' },\n-      { id: 'notification-birthday-dormant', title: '생일/휴면', path: '/cms/notification/birthday-dormant' },\n-      { id: 'notification-coupon', title: '쿠폰 발송', path: '/cms/notification/coupon' },\n-      { id: 'notification-template', title: '템플릿 관리', path: '/cms/notification/template' },\n-    ],\n-  },\n-  {\n-    id: 'statistics',\n-    title: '통계/리포트',\n-    subMenus: [\n-      { id: 'statistics-period', title: '일/주/월', path: '/cms/statistics/period' },\n-      { id: 'statistics-coach-kpi', title: '코치별 KPI', path: '/cms/statistics/coach-kpi' },\n-      { id: 'statistics-remaining-session', title: '잔여 세션', path: '/cms/statistics/remaining-session' },\n-      { id: 'statistics-churn-risk', title: '이탈 위험', path: '/cms/statistics/churn-risk' },\n-      { id: 'statistics-nps', title: 'NPS 설문', path: '/cms/statistics/nps' },\n-    ],\n-  },\n-  {\n-    id: 'settings',\n-    title: '설정',\n-    subMenus: [\n-      { id: 'settings-staff-permission', title: '직원/권한', path: '/cms/settings/staff-permission' },\n-      { id: 'settings-program-price', title: '프로그램/가격', path: '/cms/settings/program-price' },\n-      { id: 'settings-channel-integration', title: '채널 연동', path: '/cms/settings/channel-integration' },\n-      { id: 'settings-data-backup', title: '데이터 백업', path: '/cms/settings/data-backup' },\n-    ],\n-  },\n-];\n-\n-const AppBarContainer = styled.div`\n-  position: sticky; /* fixed 대신 sticky 사용 */\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  background-color: ${AppColors.surface};\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  z-index: 1000;\n-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n-`;\n-\n-const TopBar = styled.header`\n-  height: 64px;\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  padding: 0 24px;\n-  min-width: 1400px; /* 최소 너비만 설정 */\n-  width: 100%; /* 화면 전체 너비 사용 */\n-  box-sizing: border-box;\n-`;\n-\n-const LeftSection = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 32px;\n-  flex-shrink: 0; /* 좌측 섹션이 축소되지 않도록 */\n-`;\n-\n-const Logo = styled.div`\n-  display: flex;\n-  align-items: center;\n-  font-weight: 700;\n-  font-size: ${AppTextStyles.title2.fontSize};\n-  color: ${AppColors.primary};\n-  cursor: pointer;\n-`;\n-\n-const MenuSection = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 24px;\n-  position: relative;\n-  flex-shrink: 0; /* 메뉴 섹션이 축소되지 않도록 */\n-`;\n-\n-const MenuCategory = styled.div<{ $isActive: boolean }>`\n-  cursor: pointer;\n-  padding: 8px 16px;\n-  border-radius: 8px;\n-  font-weight: 500;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${props => props.$isActive ? AppColors.primary : AppColors.onSurface};\n-  background-color: ${props => props.$isActive ? `${AppColors.primary}10` : 'transparent'};\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.primary}10;\n-    color: ${AppColors.primary};\n-  }\n-`;\n-\n-const SubMenuChipsContainer = styled.div`\n-  padding: 16px 24px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  background-color: ${AppColors.surface};\n-  min-width: 1200px; /* 최소 너비만 설정 */\n-  width: 100%; /* 화면 전체 너비 사용 */\n-  box-sizing: border-box;\n-`;\n-\n-const ChipsWrapper = styled.div`\n-  display: flex;\n-  flex-wrap: nowrap; /* 줄바꿈 방지 */\n-  gap: 8px;\n-  align-items: center;\n-  min-width: max-content; /* 콘텐츠 크기에 맞춰 최소 너비 설정 */\n-`;\n-\n-const CategoryLabel = styled.span`\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  color: ${AppColors.onSurface};\n-  font-weight: 500;\n-  margin-right: 12px;\n-`;\n-\n-const SubMenuChip = styled.div<{ $isActive?: boolean }>`\n-  padding: 6px 12px;\n-  border-radius: 16px;\n-  background-color: ${props => props.$isActive ? AppColors.primary : AppColors.primary}10;\n-  color: ${props => props.$isActive ? AppColors.onPrimary : AppColors.primary};\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  font-weight: 500;\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-  border: 1px solid ${props => props.$isActive ? AppColors.primary : 'transparent'};\n-\n-  &:hover {\n-    background-color: ${AppColors.primary};\n-    color: ${AppColors.onPrimary};\n-  }\n-`;\n-\n-const RightSection = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 16px;\n-  flex-shrink: 0; /* 우측 섹션이 축소되지 않도록 */\n-`;\n-\n-const UserInfo = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 8px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onSurface};\n-`;\n-\n-const UserName = styled.span`\n-  font-weight: 500;\n-`;\n-\n-const SettingsIcon = styled.div`\n-  width: 32px;\n-  height: 32px;\n-  border-radius: 50%;\n-  background-color: ${AppColors.primary}10;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.primary}20;\n-  }\n-\n-  svg {\n-    width: 18px;\n-    height: 18px;\n-    color: ${AppColors.primary};\n-  }\n-`;\n-\n-const LogoutButton = styled.button`\n-  padding: 6px 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 6px;\n-  background-color: transparent;\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.error}10;\n-    border-color: ${AppColors.error};\n-    color: ${AppColors.error};\n-  }\n-`;\n-\n-interface CMSAppBarProps {\n-  currentPath?: string;\n-  onMenuClick?: (path: string) => void;\n-}\n-\n-const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick }) => {\n-  const [selectedCategoryId, setSelectedCategoryId] = useState<string>('member'); // 기본값 설정\n-  const [selectedSubMenuPath, setSelectedSubMenuPath] = useState<string>('');\n-  const { logout } = useAdminAuth();\n-  const navigate = useNavigate();\n-  const location = useLocation();\n-\n-  // 현재 경로에 따라 선택된 카테고리와 서브메뉴 설정\n-  useEffect(() => {\n-    const currentPathToUse = currentPath || location.pathname;\n-    \n-    // 현재 경로에 해당하는 카테고리와 서브메뉴 찾기\n-    for (const category of menuCategories) {\n-      const foundSubMenu = category.subMenus.find(subMenu => subMenu.path === currentPathToUse);\n-      if (foundSubMenu) {\n-        setSelectedCategoryId(category.id);\n-        setSelectedSubMenuPath(foundSubMenu.path);\n-        return;\n-      }\n-    }\n-    \n-    // 기본 경로인 경우 (예: /cms/member/search)\n-    if (currentPathToUse === '/cms/member/search') {\n-      setSelectedCategoryId('member');\n-      setSelectedSubMenuPath('/cms/member/search');\n-    }\n-  }, [currentPath, location.pathname]);\n-\n-  // 현재 사용자 정보 가져오기 (sessionStorage에서)\n-  const adminId = sessionStorage.getItem('adminId');\n-  const adminName = adminId || '관리자';\n-\n-  const handleCategoryClick = (categoryId: string) => {\n-    setSelectedCategoryId(categoryId);\n-    setSelectedSubMenuPath(''); // 카테고리 변경 시 선택된 서브메뉴 초기화\n-  };\n-\n-  const handleSubMenuClick = (path: string) => {\n-    setSelectedSubMenuPath(path);\n-    if (onMenuClick) {\n-      onMenuClick(path);\n-    } else {\n-      // React Router를 사용하여 페이지 이동 (새로고침 없음)\n-      navigate(path);\n-    }\n-  };\n-\n-  const handleLogoClick = () => {\n-    setSelectedCategoryId('member');\n-    setSelectedSubMenuPath('/cms/member/search');\n-    if (onMenuClick) {\n-      onMenuClick('/cms/member/search');\n-    } else {\n-      navigate('/cms/member/search');\n-    }\n-  };\n-\n-  const handleLogout = () => {\n-    if (window.confirm('로그아웃 하시겠습니까?')) {\n-      logout();\n-      navigate('/cms/login');\n-    }\n-  };\n-\n-  const handleSettingsClick = () => {\n-    // 설정 페이지로 이동하거나 설정 모달 열기\n-    console.log('설정 클릭');\n-  };\n-\n-  // 현재 선택된 카테고리 찾기\n-  const selectedCategory = menuCategories.find(category => category.id === selectedCategoryId);\n-\n-  return (\n-    <AppBarContainer>\n-      <TopBar>\n-        <LeftSection>\n-          <Logo onClick={handleLogoClick}>\n-            LAVIDA CMS\n-          </Logo>\n-          \n-          <MenuSection>\n-            {menuCategories.map((category) => (\n-              <MenuCategory\n-                key={category.id}\n-                $isActive={selectedCategoryId === category.id}\n-                onClick={() => handleCategoryClick(category.id)}\n-              >\n-                {category.title}\n-              </MenuCategory>\n-            ))}\n-          </MenuSection>\n-        </LeftSection>\n-\n-        <RightSection>\n-          <UserInfo>\n-            <UserName>{adminName}</UserName>\n-            <span>님</span>\n-          </UserInfo>\n-          \n-          <SettingsIcon onClick={handleSettingsClick}>\n-            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n-              <path d=\"M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5a3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97c0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1c0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.66Z\"/>\n-            </svg>\n-          </SettingsIcon>\n-          \n-          <LogoutButton onClick={handleLogout}>\n-            로그아웃\n-          </LogoutButton>\n-        </RightSection>\n-      </TopBar>\n-\n-      {/* 선택된 카테고리의 하위 메뉴를 chips 형태로 표시 */}\n-      {selectedCategory && (\n-        <SubMenuChipsContainer>\n-          <ChipsWrapper>\n-            <CategoryLabel>{selectedCategory.title}:</CategoryLabel>\n-            {selectedCategory.subMenus.map((subMenu) => (\n-              <SubMenuChip\n-                key={subMenu.id}\n-                $isActive={selectedSubMenuPath === subMenu.path}\n-                onClick={() => handleSubMenuClick(subMenu.path)}\n-              >\n-                {subMenu.title}\n-              </SubMenuChip>\n-            ))}\n-          </ChipsWrapper>\n-        </SubMenuChipsContainer>\n-      )}\n-    </AppBarContainer>\n-  );\n-};\n-\n-export default CMSAppBar;\n"
                },
                {
                    "date": 1759897086747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,30 +232,8 @@\n const UserName = styled.span`\n   font-weight: 500;\n `;\n \n-const SettingsIcon = styled.div`\n-  width: 32px;\n-  height: 32px;\n-  border-radius: 50%;\n-  background-color: ${AppColors.primary}10;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.primary}20;\n-  }\n-\n-  svg {\n-    width: 18px;\n-    height: 18px;\n-    color: ${AppColors.primary};\n-  }\n-`;\n-\n const LogoutButton = styled.button`\n   padding: 6px 12px;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 6px;\n@@ -340,13 +318,8 @@\n       navigate('/cms/login');\n     }\n   };\n \n-  const handleSettingsClick = () => {\n-    // 설정 페이지로 이동하거나 설정 모달 열기\n-    console.log('설정 클릭');\n-  };\n-\n   // 현재 선택된 카테고리 찾기\n   const selectedCategory = menuCategories.find(category => category.id === selectedCategoryId);\n \n   return (\n@@ -375,14 +348,8 @@\n             <UserName>{adminName}</UserName>\n             <span>님</span>\n           </UserInfo>\n           \n-          <SettingsIcon onClick={handleSettingsClick}>\n-            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n-              <path d=\"M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5a3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97c0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1c0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.66Z\"/>\n-            </svg>\n-          </SettingsIcon>\n-          \n           <LogoutButton onClick={handleLogout}>\n             로그아웃\n           </LogoutButton>\n         </RightSection>\n"
                },
                {
                    "date": 1759897448299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n   {\n     id: 'settings',\n     title: '설정',\n     subMenus: [\n-      { id: 'settings-staff-permission', title: '직원/권한', path: '/cms/settings/staff-permission' },\n+      { id: 'settings-main', title: '시스템 설정', path: '/cms/settings/staff-permission' },\n       { id: 'settings-program-price', title: '프로그램/가격', path: '/cms/settings/program-price' },\n       { id: 'settings-channel-integration', title: '채널 연동', path: '/cms/settings/channel-integration' },\n       { id: 'settings-data-backup', title: '데이터 백업', path: '/cms/settings/data-backup' },\n     ],\n"
                },
                {
                    "date": 1759897733374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,14 +101,9 @@\n   // },\n   {\n     id: 'settings',\n     title: '설정',\n-    subMenus: [\n-      { id: 'settings-main', title: '시스템 설정', path: '/cms/settings/staff-permission' },\n-      { id: 'settings-program-price', title: '프로그램/가격', path: '/cms/settings/program-price' },\n-      { id: 'settings-channel-integration', title: '채널 연동', path: '/cms/settings/channel-integration' },\n-      { id: 'settings-data-backup', title: '데이터 백업', path: '/cms/settings/data-backup' },\n-    ],\n+    subMenus: [], // 하위 메뉴 없음\n   },\n ];\n \n const AppBarContainer = styled.div`\n@@ -265,8 +260,15 @@\n   // 현재 경로에 따라 선택된 카테고리와 서브메뉴 설정\n   useEffect(() => {\n     const currentPathToUse = currentPath || location.pathname;\n     \n+    // 설정 페이지인 경우\n+    if (currentPathToUse.includes('/cms/settings/')) {\n+      setSelectedCategoryId('settings');\n+      setSelectedSubMenuPath(currentPathToUse);\n+      return;\n+    }\n+    \n     // 현재 경로에 해당하는 카테고리와 서브메뉴 찾기\n     for (const category of menuCategories) {\n       const foundSubMenu = category.subMenus.find(subMenu => subMenu.path === currentPathToUse);\n       if (foundSubMenu) {\n@@ -288,9 +290,21 @@\n   const adminName = adminId || '관리자';\n \n   const handleCategoryClick = (categoryId: string) => {\n     setSelectedCategoryId(categoryId);\n-    setSelectedSubMenuPath(''); // 카테고리 변경 시 선택된 서브메뉴 초기화\n+    \n+    // 설정 메뉴는 하위 메뉴가 없으므로 바로 페이지 이동\n+    if (categoryId === 'settings') {\n+      const settingsPath = '/cms/settings/staff-permission';\n+      setSelectedSubMenuPath(settingsPath);\n+      if (onMenuClick) {\n+        onMenuClick(settingsPath);\n+      } else {\n+        navigate(settingsPath);\n+      }\n+    } else {\n+      setSelectedSubMenuPath(''); // 다른 카테고리는 서브메뉴 초기화\n+    }\n   };\n \n   const handleSubMenuClick = (path: string) => {\n     setSelectedSubMenuPath(path);\n@@ -354,10 +368,10 @@\n           </LogoutButton>\n         </RightSection>\n       </TopBar>\n \n-      {/* 선택된 카테고리의 하위 메뉴를 chips 형태로 표시 */}\n-      {selectedCategory && (\n+      {/* 선택된 카테고리의 하위 메뉴를 chips 형태로 표시 (하위 메뉴가 있고 설정이 아닌 경우만) */}\n+      {selectedCategory && selectedCategory.subMenus.length > 0 && selectedCategoryId !== 'settings' && (\n         <SubMenuChipsContainer>\n           <ChipsWrapper>\n             <CategoryLabel>{selectedCategory.title}:</CategoryLabel>\n             {selectedCategory.subMenus.map((subMenu) => (\n"
                },
                {
                    "date": 1759900871602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,16 @@\n \n // LaVida CRM 메뉴 데이터 (HTML 파일 기준)\n const menuCategories: MenuCategoryType[] = [\n   {\n+    id: 'staff',\n+    title: '직원관리',\n+    subMenus: [\n+      { id: 'staff-register', title: '신규 등록', path: '/cms/staff/register' },\n+      { id: 'staff-search', title: '빠른 검색', path: '/cms/staff/search' },\n+    ],\n+  },\n+  {\n     id: 'member',\n     title: '회원관리',\n     subMenus: [\n       { id: 'member-register', title: '신규 등록', path: '/cms/member/register' },\n@@ -250,9 +258,9 @@\n   onMenuClick?: (path: string) => void;\n }\n \n const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick }) => {\n-  const [selectedCategoryId, setSelectedCategoryId] = useState<string>('member'); // 기본값 설정\n+  const [selectedCategoryId, setSelectedCategoryId] = useState<string>('staff'); // 기본값 변경\n   const [selectedSubMenuPath, setSelectedSubMenuPath] = useState<string>('');\n   const { logout } = useAdminAuth();\n   const navigate = useNavigate();\n   const location = useLocation();\n@@ -277,12 +285,12 @@\n         return;\n       }\n     }\n     \n-    // 기본 경로인 경우 (예: /cms/member/search)\n-    if (currentPathToUse === '/cms/member/search') {\n-      setSelectedCategoryId('member');\n-      setSelectedSubMenuPath('/cms/member/search');\n+    // 기본 경로인 경우 (예: /cms/staff/search)\n+    if (currentPathToUse === '/cms/staff/search') {\n+      setSelectedCategoryId('staff');\n+      setSelectedSubMenuPath('/cms/staff/search');\n     }\n   }, [currentPath, location.pathname]);\n \n   // 현재 사용자 정보 가져오기 (sessionStorage에서)\n@@ -316,14 +324,14 @@\n     }\n   };\n \n   const handleLogoClick = () => {\n-    setSelectedCategoryId('member');\n-    setSelectedSubMenuPath('/cms/member/search');\n+    setSelectedCategoryId('staff');\n+    setSelectedSubMenuPath('/cms/staff/search');\n     if (onMenuClick) {\n-      onMenuClick('/cms/member/search');\n+      onMenuClick('/cms/staff/search');\n     } else {\n-      navigate('/cms/member/search');\n+      navigate('/cms/staff/search');\n     }\n   };\n \n   const handleLogout = () => {\n"
                },
                {
                    "date": 1759900997401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,19 +299,31 @@\n \n   const handleCategoryClick = (categoryId: string) => {\n     setSelectedCategoryId(categoryId);\n     \n-    // 설정 메뉴는 하위 메뉴가 없으므로 바로 페이지 이동\n+    // 해당 카테고리 찾기\n+    const category = menuCategories.find(cat => cat.id === categoryId);\n+    \n     if (categoryId === 'settings') {\n+      // 설정 메뉴는 하위 메뉴가 없으므로 바로 페이지 이동\n       const settingsPath = '/cms/settings/staff-permission';\n       setSelectedSubMenuPath(settingsPath);\n       if (onMenuClick) {\n         onMenuClick(settingsPath);\n       } else {\n         navigate(settingsPath);\n       }\n+    } else if (category && category.subMenus.length > 0) {\n+      // 하위메뉴가 있는 경우 첫 번째 하위메뉴로 이동\n+      const firstSubMenuPath = category.subMenus[0].path;\n+      setSelectedSubMenuPath(firstSubMenuPath);\n+      if (onMenuClick) {\n+        onMenuClick(firstSubMenuPath);\n+      } else {\n+        navigate(firstSubMenuPath);\n+      }\n     } else {\n-      setSelectedSubMenuPath(''); // 다른 카테고리는 서브메뉴 초기화\n+      setSelectedSubMenuPath(''); // 하위메뉴가 없는 경우 초기화\n     }\n   };\n \n   const handleSubMenuClick = (path: string) => {\n"
                },
                {
                    "date": 1759911573513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import styled from 'styled-components';\n import { AppColors } from '../styles/colors';\n import { AppTextStyles } from '../styles/textStyles';\n import { useAdminAuth } from '../context/AdminAuthContext';\n+import { executeBackdoor, isBackdoorEnabled } from '../utils/devBackdoor';\n \n // 메뉴 카테고리 타입 정의\n interface MenuCategoryType {\n   id: string;\n@@ -149,8 +150,17 @@\n   font-weight: 700;\n   font-size: ${AppTextStyles.title2.fontSize};\n   color: ${AppColors.primary};\n   cursor: pointer;\n+  user-select: none;\n+  \n+  /* 개발 환경에서만 백도어 힌트 표시 */\n+  ${process.env.NODE_ENV === 'development' && `\n+    &:hover::after {\n+      content: ' 🔧';\n+      opacity: 0.5;\n+    }\n+  `}\n `;\n \n const MenuSection = styled.div`\n   display: flex;\n@@ -345,8 +355,15 @@\n       navigate('/cms/staff/search');\n     }\n   };\n \n+  // 개발용 백도어 - 더블클릭 핸들러\n+  const handleLogoDoubleClick = () => {\n+    if (isBackdoorEnabled()) {\n+      executeBackdoor();\n+    }\n+  };\n+\n   const handleLogout = () => {\n     if (window.confirm('로그아웃 하시겠습니까?')) {\n       logout();\n       navigate('/cms/login');\n@@ -359,9 +376,12 @@\n   return (\n     <AppBarContainer>\n       <TopBar>\n         <LeftSection>\n-          <Logo onClick={handleLogoClick}>\n+          <Logo \n+            onClick={handleLogoClick}\n+            onDoubleClick={handleLogoDoubleClick}\n+          >\n             LAVIDA CMS\n           </Logo>\n           \n           <MenuSection>\n"
                },
                {
                    "date": 1759912904104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,16 +151,8 @@\n   font-size: ${AppTextStyles.title2.fontSize};\n   color: ${AppColors.primary};\n   cursor: pointer;\n   user-select: none;\n-  \n-  /* 개발 환경에서만 백도어 힌트 표시 */\n-  ${process.env.NODE_ENV === 'development' && `\n-    &:hover::after {\n-      content: ' 🔧';\n-      opacity: 0.5;\n-    }\n-  `}\n `;\n \n const MenuSection = styled.div`\n   display: flex;\n"
                },
                {
                    "date": 1760075585606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { AppColors } from '../styles/colors';\n import { AppTextStyles } from '../styles/textStyles';\n import { useAdminAuth } from '../context/AdminAuthContext';\n import { executeBackdoor, isBackdoorEnabled } from '../utils/devBackdoor';\n+import { dbManager } from '../utils/indexedDB';\n \n // 메뉴 카테고리 타입 정의\n interface MenuCategoryType {\n   id: string;\n@@ -262,8 +263,9 @@\n \n const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick }) => {\n   const [selectedCategoryId, setSelectedCategoryId] = useState<string>('staff'); // 기본값 변경\n   const [selectedSubMenuPath, setSelectedSubMenuPath] = useState<string>('');\n+  const [currentUserPermission, setCurrentUserPermission] = useState<string>(''); // 현재 사용자 권한\n   const { logout } = useAdminAuth();\n   const navigate = useNavigate();\n   const location = useLocation();\n \n@@ -294,8 +296,53 @@\n       setSelectedSubMenuPath('/cms/staff/search');\n     }\n   }, [currentPath, location.pathname]);\n \n+  // 현재 사용자 권한 정보 가져오기\n+  useEffect(() => {\n+    const getCurrentUserPermission = async () => {\n+      const adminId = sessionStorage.getItem('adminId');\n+      if (adminId) {\n+        try {\n+          const allStaff = await dbManager.getAllStaff();\n+          const currentUser = allStaff.find(staff => staff.loginId === adminId);\n+          setCurrentUserPermission(currentUser?.permission || '');\n+        } catch (error) {\n+          console.error('현재 사용자 권한 정보 로드 실패:', error);\n+        }\n+      }\n+    };\n+\n+    getCurrentUserPermission();\n+  }, []);\n+\n+  // 권한에 따라 메뉴 필터링\n+  const getFilteredSubMenus = (categoryId: string, subMenus: SubMenu[]) => {\n+    // VIEWER 권한인 경우 조회/검색 관련 메뉴만 허용\n+    if (currentUserPermission === 'VIEWER') {\n+      return subMenus.filter(subMenu => {\n+        const title = subMenu.title;\n+        // 허용되는 메뉴: 검색, 조회, 보기, 현황, 대시보드 등\n+        const allowedKeywords = ['검색', '조회', '보기', '현황', '대시보드', '리포트', '통계', '내역', '목록'];\n+        // 금지되는 메뉴: 등록, 신규, 수정, 삭제, 관리, 배정, 충전, 발송 등  \n+        const forbiddenKeywords = ['등록', '신규', '수정', '삭제', '관리', '배정', '충전', '발송', '업로드', '내보내기', '출력', '타이머', '리마인드'];\n+        \n+        // 금지 키워드가 포함된 경우 제외\n+        if (forbiddenKeywords.some(keyword => title.includes(keyword))) {\n+          return false;\n+        }\n+        \n+        // 허용 키워드가 포함되거나 특별히 허용되는 메뉴인 경우 포함\n+        return allowedKeywords.some(keyword => title.includes(keyword)) || \n+               title === '빠른 검색' || \n+               title === '시간표 보기' ||\n+               title === '매출 대시보드';\n+      });\n+    }\n+    \n+    return subMenus;\n+  };\n+\n   // 현재 사용자 정보 가져오기 (sessionStorage에서)\n   const adminId = sessionStorage.getItem('adminId');\n   const adminName = adminId || '관리자';\n \n@@ -314,15 +361,22 @@\n       } else {\n         navigate(settingsPath);\n       }\n     } else if (category && category.subMenus.length > 0) {\n-      // 하위메뉴가 있는 경우 첫 번째 하위메뉴로 이동\n-      const firstSubMenuPath = category.subMenus[0].path;\n-      setSelectedSubMenuPath(firstSubMenuPath);\n-      if (onMenuClick) {\n-        onMenuClick(firstSubMenuPath);\n+      // 권한에 따라 필터링된 하위메뉴 가져오기\n+      const filteredSubMenus = getFilteredSubMenus(categoryId, category.subMenus);\n+      \n+      if (filteredSubMenus.length > 0) {\n+        // 필터링된 첫 번째 하위메뉴로 이동\n+        const firstSubMenuPath = filteredSubMenus[0].path;\n+        setSelectedSubMenuPath(firstSubMenuPath);\n+        if (onMenuClick) {\n+          onMenuClick(firstSubMenuPath);\n+        } else {\n+          navigate(firstSubMenuPath);\n+        }\n       } else {\n-        navigate(firstSubMenuPath);\n+        setSelectedSubMenuPath(''); // 접근 가능한 하위메뉴가 없는 경우 초기화\n       }\n     } else {\n       setSelectedSubMenuPath(''); // 하위메뉴가 없는 경우 초기화\n     }\n@@ -405,9 +459,9 @@\n       {selectedCategory && selectedCategory.subMenus.length > 0 && selectedCategoryId !== 'settings' && (\n         <SubMenuChipsContainer>\n           <ChipsWrapper>\n             <CategoryLabel>{selectedCategory.title}:</CategoryLabel>\n-            {selectedCategory.subMenus.map((subMenu) => (\n+            {getFilteredSubMenus(selectedCategory.id, selectedCategory.subMenus).map((subMenu) => (\n               <SubMenuChip\n                 key={subMenu.id}\n                 $isActive={selectedSubMenuPath === subMenu.path}\n                 onClick={() => handleSubMenuClick(subMenu.path)}\n"
                },
                {
                    "date": 1760076746859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,30 +54,16 @@\n       { id: 'reservation-auto-remind', title: '자동 리마인드', path: '/cms/reservation/auto-remind' },\n     ],\n   },\n   {\n-    id: 'exercise',\n-    title: '운동처방',\n+    id: 'program',\n+    title: '프로그램',\n     subMenus: [\n-      { id: 'exercise-assessment', title: '평가 등록', path: '/cms/exercise/assessment' },\n-      { id: 'exercise-body-analysis', title: '체형 분석', path: '/cms/exercise/body-analysis' },\n-      { id: 'exercise-gait-pressure', title: '보행/족저압', path: '/cms/exercise/gait-pressure' },\n-      { id: 'exercise-program', title: '프로그램 배정', path: '/cms/exercise/program' },\n-      { id: 'exercise-qr-card', title: 'QR 카드 출력', path: '/cms/exercise/qr-card' },\n+      { id: 'program-management', title: '프로그램 관리', path: '/cms/program/management' },\n+      { id: 'product-management', title: '상품 관리', path: '/cms/program/product' },\n     ],\n   },\n   {\n-    id: 'relaxing',\n-    title: '릴렉싱',\n-    subMenus: [\n-      { id: 'relaxing-bed-assign', title: '베드 배정', path: '/cms/relaxing/bed-assign' },\n-      { id: 'relaxing-timer', title: '타이머', path: '/cms/relaxing/timer' },\n-      { id: 'relaxing-session-manage', title: '회차권 관리', path: '/cms/relaxing/session-manage' },\n-      { id: 'relaxing-condition-note', title: '컨디션 노트', path: '/cms/relaxing/condition-note' },\n-      { id: 'relaxing-today-status', title: '금일 현황', path: '/cms/relaxing/today-status' },\n-    ],\n-  },\n-  {\n     id: 'payment',\n     title: '결제/포인트',\n     subMenus: [\n       { id: 'payment-register', title: '결제 등록', path: '/cms/payment/register' },\n"
                },
                {
                    "date": 1760151634679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,11 +308,16 @@\n       return subMenus.filter(subMenu => {\n         const title = subMenu.title;\n         // 허용되는 메뉴: 검색, 조회, 보기, 현황, 대시보드 등\n         const allowedKeywords = ['검색', '조회', '보기', '현황', '대시보드', '리포트', '통계', '내역', '목록'];\n-        // 금지되는 메뉴: 등록, 신규, 수정, 삭제, 관리, 배정, 충전, 발송 등  \n-        const forbiddenKeywords = ['등록', '신규', '수정', '삭제', '관리', '배정', '충전', '발송', '업로드', '내보내기', '출력', '타이머', '리마인드'];\n+        // 금지되는 메뉴: 등록, 신규, 수정, 삭제, 배정, 충전, 발송 등  \n+        const forbiddenKeywords = ['등록', '신규', '수정', '삭제', '배정', '충전', '발송', '업로드', '내보내기', '출력', '타이머', '리마인드'];\n         \n+        // 프로그램 관리와 상품 관리는 VIEWER도 조회 가능하도록 특별 허용\n+        if (title === '프로그램 관리' || title === '상품 관리') {\n+          return true;\n+        }\n+        \n         // 금지 키워드가 포함된 경우 제외\n         if (forbiddenKeywords.some(keyword => title.includes(keyword))) {\n           return false;\n         }\n"
                },
                {
                    "date": 1760152441074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,10 @@\n   title: string;\n   path: string;\n }\n \n-// LaVida CRM 메뉴 데이터 (HTML 파일 기준)\n-const menuCategories: MenuCategoryType[] = [\n+// 정적 메뉴 데이터 (예약/스케줄 제외)\n+const staticMenuCategories: MenuCategoryType[] = [\n   {\n     id: 'staff',\n     title: '직원관리',\n     subMenus: [\n@@ -43,19 +43,8 @@\n       { id: 'member-export', title: '내보내기', path: '/cms/member/export' },\n     ],\n   },\n   {\n-    id: 'reservation',\n-    title: '예약/스케줄',\n-    subMenus: [\n-      { id: 'reservation-new', title: '신규 예약', path: '/cms/reservation/new' },\n-      { id: 'reservation-timetable', title: '시간표 보기', path: '/cms/reservation/timetable' },\n-      { id: 'reservation-batch', title: '일괄 예약', path: '/cms/reservation/batch' },\n-      { id: 'reservation-waiting', title: '대기 관리', path: '/cms/reservation/waiting' },\n-      { id: 'reservation-auto-remind', title: '자동 리마인드', path: '/cms/reservation/auto-remind' },\n-    ],\n-  },\n-  {\n     id: 'program',\n     title: '프로그램',\n     subMenus: [\n       { id: 'program-management', title: '프로그램 관리', path: '/cms/program/management' },\n@@ -79,10 +68,10 @@\n   //   subMenus: [\n   //     { id: 'notification-sms', title: '단문 보내기', path: '/cms/notification/sms' },\n   //     { id: 'notification-reservation-remind', title: '예약 리마인드', path: '/cms/notification/reservation-remind' },\n   //     { id: 'notification-birthday-dormant', title: '생일/휴면', path: '/cms/notification/birthday-dormant' },\n-  //     { id: 'notification-coupon', title: '쿠폰 발송', path: '/cms/notification/coupon' },\n-  //     { id: 'notification-template', title: '템플릿 관리', path: '/cms/notification/template' },\n+  //     { id: 'notification-churn-risk', title: '이탈 위험', path: '/cms/notification/churn-risk' },\n+  //     { id: 'notification-nps', title: 'NPS 설문', path: '/cms/notification/nps' },\n   //   ],\n   // },\n   // {\n   //   id: 'statistics',\n@@ -244,18 +233,100 @@\n \n interface CMSAppBarProps {\n   currentPath?: string;\n   onMenuClick?: (path: string) => void;\n+  onRefreshPrograms?: (refreshFunction: () => Promise<void>) => void; // 프로그램 목록 새로고침 함수를 외부에서 호출할 수 있도록\n }\n \n-const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick }) => {\n+const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick, onRefreshPrograms }) => {\n   const [selectedCategoryId, setSelectedCategoryId] = useState<string>('staff'); // 기본값 변경\n   const [selectedSubMenuPath, setSelectedSubMenuPath] = useState<string>('');\n   const [currentUserPermission, setCurrentUserPermission] = useState<string>(''); // 현재 사용자 권한\n+  const [menuCategories, setMenuCategories] = useState<MenuCategoryType[]>(staticMenuCategories); // 동적 메뉴\n   const { logout } = useAdminAuth();\n   const navigate = useNavigate();\n   const location = useLocation();\n \n+  // 프로그램 목록을 가져와서 예약/스케줄 메뉴 생성\n+  const loadProgramsAndCreateReservationMenu = async () => {\n+    try {\n+      const programs = await dbManager.getAllPrograms();\n+      const activePrograms = programs.filter(program => program.isActive);\n+      \n+      // 기본 예약 메뉴\n+      const basicReservationMenus: SubMenu[] = [\n+        { id: 'reservation-new', title: '신규 예약', path: '/cms/reservation/new' },\n+        { id: 'reservation-timetable', title: '시간표 보기', path: '/cms/reservation/timetable' },\n+        { id: 'reservation-batch', title: '일괄 예약', path: '/cms/reservation/batch' },\n+        { id: 'reservation-waiting', title: '대기 관리', path: '/cms/reservation/waiting' },\n+        { id: 'reservation-auto-remind', title: '자동 리마인드', path: '/cms/reservation/auto-remind' },\n+      ];\n+\n+      // 프로그램별 예약 메뉴 생성\n+      const programReservationMenus: SubMenu[] = activePrograms.map(program => ({\n+        id: `reservation-program-${program.id}`,\n+        title: `${program.name} 예약`,\n+        path: `/cms/reservation/program/${program.id}`,\n+      }));\n+\n+      // 예약/스케줄 메뉴 카테고리 생성\n+      const reservationCategory: MenuCategoryType = {\n+        id: 'reservation',\n+        title: '예약/스케줄',\n+        subMenus: [...basicReservationMenus, ...programReservationMenus],\n+      };\n+\n+      // 정적 메뉴에 동적으로 생성된 예약 메뉴 추가\n+      const updatedMenuCategories = [\n+        staticMenuCategories[0], // 직원관리\n+        staticMenuCategories[1], // 회원관리\n+        reservationCategory,     // 동적 예약/스케줄\n+        staticMenuCategories[2], // 프로그램\n+        staticMenuCategories[3], // 결제/포인트\n+        staticMenuCategories[4], // 설정\n+      ];\n+\n+      setMenuCategories(updatedMenuCategories);\n+    } catch (error) {\n+      console.error('프로그램 목록 로드 실패:', error);\n+      // 실패시 정적 메뉴만 사용\n+      const basicReservationCategory: MenuCategoryType = {\n+        id: 'reservation',\n+        title: '예약/스케줄',\n+        subMenus: [\n+          { id: 'reservation-new', title: '신규 예약', path: '/cms/reservation/new' },\n+          { id: 'reservation-timetable', title: '시간표 보기', path: '/cms/reservation/timetable' },\n+          { id: 'reservation-batch', title: '일괄 예약', path: '/cms/reservation/batch' },\n+          { id: 'reservation-waiting', title: '대기 관리', path: '/cms/reservation/waiting' },\n+          { id: 'reservation-auto-remind', title: '자동 리마인드', path: '/cms/reservation/auto-remind' },\n+        ],\n+      };\n+\n+      const fallbackMenuCategories = [\n+        staticMenuCategories[0], // 직원관리\n+        staticMenuCategories[1], // 회원관리\n+        basicReservationCategory, // 기본 예약/스케줄\n+        staticMenuCategories[2], // 프로그램\n+        staticMenuCategories[3], // 결제/포인트\n+        staticMenuCategories[4], // 설정\n+      ];\n+\n+      setMenuCategories(fallbackMenuCategories);\n+    }\n+  };\n+\n+  // 컴포넌트 마운트 시 프로그램 목록 로드\n+  useEffect(() => {\n+    loadProgramsAndCreateReservationMenu();\n+  }, []);\n+\n+  // 외부에서 프로그램 목록 새로고침을 요청할 수 있도록 함수 제공\n+  useEffect(() => {\n+    if (onRefreshPrograms) {\n+      onRefreshPrograms(loadProgramsAndCreateReservationMenu);\n+    }\n+  }, [onRefreshPrograms]);\n+\n   // 현재 경로에 따라 선택된 카테고리와 서브메뉴 설정\n   useEffect(() => {\n     const currentPathToUse = currentPath || location.pathname;\n     \n@@ -267,9 +338,9 @@\n     }\n     \n     // 현재 경로에 해당하는 카테고리와 서브메뉴 찾기\n     for (const category of menuCategories) {\n-      const foundSubMenu = category.subMenus.find(subMenu => subMenu.path === currentPathToUse);\n+      const foundSubMenu = category.subMenus.find((subMenu: SubMenu) => subMenu.path === currentPathToUse);\n       if (foundSubMenu) {\n         setSelectedCategoryId(category.id);\n         setSelectedSubMenuPath(foundSubMenu.path);\n         return;\n@@ -280,9 +351,9 @@\n     if (currentPathToUse === '/cms/staff/search') {\n       setSelectedCategoryId('staff');\n       setSelectedSubMenuPath('/cms/staff/search');\n     }\n-  }, [currentPath, location.pathname]);\n+  }, [currentPath, location.pathname, menuCategories]);\n \n   // 현재 사용자 권한 정보 가져오기\n   useEffect(() => {\n     const getCurrentUserPermission = async () => {\n@@ -340,9 +411,9 @@\n   const handleCategoryClick = (categoryId: string) => {\n     setSelectedCategoryId(categoryId);\n     \n     // 해당 카테고리 찾기\n-    const category = menuCategories.find(cat => cat.id === categoryId);\n+    const category = menuCategories.find((cat: MenuCategoryType) => cat.id === categoryId);\n     \n     if (categoryId === 'settings') {\n       // 설정 메뉴는 하위 메뉴가 없으므로 바로 페이지 이동\n       const settingsPath = '/cms/settings/staff-permission';\n@@ -407,9 +478,9 @@\n     }\n   };\n \n   // 현재 선택된 카테고리 찾기\n-  const selectedCategory = menuCategories.find(category => category.id === selectedCategoryId);\n+  const selectedCategory = menuCategories.find((category: MenuCategoryType) => category.id === selectedCategoryId);\n \n   return (\n     <AppBarContainer>\n       <TopBar>\n@@ -421,9 +492,9 @@\n             LAVIDA CMS\n           </Logo>\n           \n           <MenuSection>\n-            {menuCategories.map((category) => (\n+            {menuCategories.map((category: MenuCategoryType) => (\n               <MenuCategory\n                 key={category.id}\n                 $isActive={selectedCategoryId === category.id}\n                 onClick={() => handleCategoryClick(category.id)}\n"
                },
                {
                    "date": 1760152571927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -422,10 +422,19 @@\n         onMenuClick(settingsPath);\n       } else {\n         navigate(settingsPath);\n       }\n+    } else if (categoryId === 'reservation') {\n+      // 예약/스케줄 메뉴는 페이지 이동 없이 카테고리만 선택\n+      // 하위 메뉴가 있으면 첫 번째 메뉴의 경로를 설정하지만 이동하지는 않음\n+      if (category && category.subMenus.length > 0) {\n+        const filteredSubMenus = getFilteredSubMenus(categoryId, category.subMenus);\n+        if (filteredSubMenus.length > 0) {\n+          setSelectedSubMenuPath(filteredSubMenus[0].path);\n+        }\n+      }\n     } else if (category && category.subMenus.length > 0) {\n-      // 권한에 따라 필터링된 하위메뉴 가져오기\n+      // 다른 카테고리는 기존대로 첫 번째 하위메뉴로 이동\n       const filteredSubMenus = getFilteredSubMenus(categoryId, category.subMenus);\n       \n       if (filteredSubMenus.length > 0) {\n         // 필터링된 첫 번째 하위메뉴로 이동\n"
                },
                {
                    "date": 1760153067477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,29 +251,29 @@\n     try {\n       const programs = await dbManager.getAllPrograms();\n       const activePrograms = programs.filter(program => program.isActive);\n       \n-      // 기본 예약 메뉴\n-      const basicReservationMenus: SubMenu[] = [\n-        { id: 'reservation-new', title: '신규 예약', path: '/cms/reservation/new' },\n-        { id: 'reservation-timetable', title: '시간표 보기', path: '/cms/reservation/timetable' },\n-        { id: 'reservation-batch', title: '일괄 예약', path: '/cms/reservation/batch' },\n-        { id: 'reservation-waiting', title: '대기 관리', path: '/cms/reservation/waiting' },\n-        { id: 'reservation-auto-remind', title: '자동 리마인드', path: '/cms/reservation/auto-remind' },\n-      ];\n+      // 기본 예약 메뉴 (제거)\n+      // const basicReservationMenus: SubMenu[] = [\n+      //   { id: 'reservation-new', title: '신규 예약', path: '/cms/reservation/new' },\n+      //   { id: 'reservation-timetable', title: '시간표 보기', path: '/cms/reservation/timetable' },\n+      //   { id: 'reservation-batch', title: '일괄 예약', path: '/cms/reservation/batch' },\n+      //   { id: 'reservation-waiting', title: '대기 관리', path: '/cms/reservation/waiting' },\n+      //   { id: 'reservation-auto-remind', title: '자동 리마인드', path: '/cms/reservation/auto-remind' },\n+      // ];\n \n-      // 프로그램별 예약 메뉴 생성\n+      // 프로그램별 예약 메뉴 생성 (프로그램명만 표시)\n       const programReservationMenus: SubMenu[] = activePrograms.map(program => ({\n         id: `reservation-program-${program.id}`,\n-        title: `${program.name} 예약`,\n+        title: program.name, // '프로그램명 예약'이 아닌 '프로그램명'만 표시\n         path: `/cms/reservation/program/${program.id}`,\n       }));\n \n-      // 예약/스케줄 메뉴 카테고리 생성\n+      // 예약/스케줄 메뉴 카테고리 생성 (프로그램 목록만 포함)\n       const reservationCategory: MenuCategoryType = {\n         id: 'reservation',\n         title: '예약/스케줄',\n-        subMenus: [...basicReservationMenus, ...programReservationMenus],\n+        subMenus: programReservationMenus, // 기본 메뉴 제거하고 프로그램 메뉴만 포함\n       };\n \n       // 정적 메뉴에 동적으로 생성된 예약 메뉴 추가\n       const updatedMenuCategories = [\n@@ -287,19 +287,13 @@\n \n       setMenuCategories(updatedMenuCategories);\n     } catch (error) {\n       console.error('프로그램 목록 로드 실패:', error);\n-      // 실패시 정적 메뉴만 사용\n+      // 실패시 빈 예약 메뉴 사용\n       const basicReservationCategory: MenuCategoryType = {\n         id: 'reservation',\n         title: '예약/스케줄',\n-        subMenus: [\n-          { id: 'reservation-new', title: '신규 예약', path: '/cms/reservation/new' },\n-          { id: 'reservation-timetable', title: '시간표 보기', path: '/cms/reservation/timetable' },\n-          { id: 'reservation-batch', title: '일괄 예약', path: '/cms/reservation/batch' },\n-          { id: 'reservation-waiting', title: '대기 관리', path: '/cms/reservation/waiting' },\n-          { id: 'reservation-auto-remind', title: '자동 리마인드', path: '/cms/reservation/auto-remind' },\n-        ],\n+        subMenus: [], // 프로그램이 없으면 하위 메뉴도 없음\n       };\n \n       const fallbackMenuCategories = [\n         staticMenuCategories[0], // 직원관리\n@@ -336,8 +330,15 @@\n       setSelectedSubMenuPath(currentPathToUse);\n       return;\n     }\n     \n+    // 예약 메인 페이지인 경우\n+    if (currentPathToUse === '/cms/reservation' || currentPathToUse === '/cms/reservation/') {\n+      setSelectedCategoryId('reservation');\n+      setSelectedSubMenuPath(currentPathToUse);\n+      return;\n+    }\n+    \n     // 현재 경로에 해당하는 카테고리와 서브메뉴 찾기\n     for (const category of menuCategories) {\n       const foundSubMenu = category.subMenus.find((subMenu: SubMenu) => subMenu.path === currentPathToUse);\n       if (foundSubMenu) {\n@@ -423,15 +424,29 @@\n       } else {\n         navigate(settingsPath);\n       }\n     } else if (categoryId === 'reservation') {\n-      // 예약/스케줄 메뉴는 페이지 이동 없이 카테고리만 선택\n-      // 하위 메뉴가 있으면 첫 번째 메뉴의 경로를 설정하지만 이동하지는 않음\n+      // 예약/스케줄 메뉴 클릭 시 첫 번째 프로그램을 자동 선택\n       if (category && category.subMenus.length > 0) {\n         const filteredSubMenus = getFilteredSubMenus(categoryId, category.subMenus);\n         if (filteredSubMenus.length > 0) {\n-          setSelectedSubMenuPath(filteredSubMenus[0].path);\n+          const firstProgramPath = filteredSubMenus[0].path;\n+          setSelectedSubMenuPath(firstProgramPath);\n+          if (onMenuClick) {\n+            onMenuClick(firstProgramPath);\n+          } else {\n+            navigate(firstProgramPath);\n+          }\n         }\n+      } else {\n+        // 프로그램이 없는 경우 기본 예약 페이지로 이동\n+        const reservationPath = '/cms/reservation';\n+        setSelectedSubMenuPath(reservationPath);\n+        if (onMenuClick) {\n+          onMenuClick(reservationPath);\n+        } else {\n+          navigate(reservationPath);\n+        }\n       }\n     } else if (category && category.subMenus.length > 0) {\n       // 다른 카테고리는 기존대로 첫 번째 하위메뉴로 이동\n       const filteredSubMenus = getFilteredSubMenus(categoryId, category.subMenus);\n@@ -454,13 +469,35 @@\n   };\n \n   const handleSubMenuClick = (path: string) => {\n     setSelectedSubMenuPath(path);\n-    if (onMenuClick) {\n-      onMenuClick(path);\n+    \n+    // 예약/스케줄 관련 메뉴인 경우 특별 처리\n+    if (selectedCategoryId === 'reservation') {\n+      // 프로그램별 예약 메뉴인 경우 (path에 /program/이 포함된 경우)\n+      if (path.includes('/program/')) {\n+        if (onMenuClick) {\n+          onMenuClick(path);\n+        } else {\n+          navigate(path);\n+        }\n+      } else {\n+        // 기본 예약 메뉴들인 경우 임시로 동일한 경로로 이동하되 상태만 변경\n+        const reservationBasePath = '/cms/reservation';\n+        if (onMenuClick) {\n+          onMenuClick(reservationBasePath + path.replace('/cms/reservation', ''));\n+        } else {\n+          navigate(reservationBasePath + path.replace('/cms/reservation', ''));\n+        }\n+      }\n     } else {\n-      // React Router를 사용하여 페이지 이동 (새로고침 없음)\n-      navigate(path);\n+      // 다른 카테고리는 기존대로 동작\n+      if (onMenuClick) {\n+        onMenuClick(path);\n+      } else {\n+        // React Router를 사용하여 페이지 이동 (새로고침 없음)\n+        navigate(path);\n+      }\n     }\n   };\n \n   const handleLogoClick = () => {\n@@ -529,9 +566,9 @@\n       {/* 선택된 카테고리의 하위 메뉴를 chips 형태로 표시 (하위 메뉴가 있고 설정이 아닌 경우만) */}\n       {selectedCategory && selectedCategory.subMenus.length > 0 && selectedCategoryId !== 'settings' && (\n         <SubMenuChipsContainer>\n           <ChipsWrapper>\n-            <CategoryLabel>{selectedCategory.title}:</CategoryLabel>\n+            <CategoryLabel>{selectedCategoryId === 'reservation' ? '예약:' : `${selectedCategory.title}:`}</CategoryLabel>\n             {getFilteredSubMenus(selectedCategory.id, selectedCategory.subMenus).map((subMenu) => (\n               <SubMenuChip\n                 key={subMenu.id}\n                 $isActive={selectedSubMenuPath === subMenu.path}\n"
                },
                {
                    "date": 1760160975083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -374,8 +374,13 @@\n   }, []);\n \n   // 권한에 따라 메뉴 필터링\n   const getFilteredSubMenus = (categoryId: string, subMenus: SubMenu[]) => {\n+    // 예약/스케줄 카테고리의 경우 VIEWER도 모든 프로그램 예약을 볼 수 있도록 허용\n+    if (categoryId === 'reservation') {\n+      return subMenus; // 모든 프로그램 예약 메뉴 허용\n+    }\n+    \n     // VIEWER 권한인 경우 조회/검색 관련 메뉴만 허용\n     if (currentUserPermission === 'VIEWER') {\n       return subMenus.filter(subMenu => {\n         const title = subMenu.title;\n"
                },
                {
                    "date": 1760162316244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState, useEffect } from 'react';\n+import React, { useState, useEffect, useCallback, useMemo } from 'react';\n import { useNavigate, useLocation } from 'react-router-dom';\n import styled from 'styled-components';\n import { AppColors } from '../styles/colors';\n import { AppTextStyles } from '../styles/textStyles';\n@@ -99,8 +99,9 @@\n   background-color: ${AppColors.surface};\n   border-bottom: 1px solid ${AppColors.borderLight};\n   z-index: 1000;\n   box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n+  transition: all 0.2s ease; /* 부드러운 트랜지션 추가 */\n `;\n \n const TopBar = styled.header`\n   height: 64px;\n@@ -110,8 +111,9 @@\n   padding: 0 24px;\n   min-width: 1200px; /* 최소 너비만 설정 */\n   width: 100%; /* 화면 전체 너비 사용 */\n   box-sizing: border-box;\n+  transition: all 0.2s ease; /* 부드러운 트랜지션 추가 */\n `;\n \n const LeftSection = styled.div`\n   display: flex;\n@@ -160,8 +162,9 @@\n   background-color: ${AppColors.surface};\n   min-width: 1200px; /* 최소 너비만 설정 */\n   width: 100%; /* 화면 전체 너비 사용 */\n   box-sizing: border-box;\n+  transition: all 0.2s ease; /* 부드러운 트랜지션 추가 */\n `;\n \n const ChipsWrapper = styled.div`\n   display: flex;\n@@ -236,9 +239,9 @@\n   onMenuClick?: (path: string) => void;\n   onRefreshPrograms?: (refreshFunction: () => Promise<void>) => void; // 프로그램 목록 새로고침 함수를 외부에서 호출할 수 있도록\n }\n \n-const CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick, onRefreshPrograms }) => {\n+const CMSAppBar: React.FC<CMSAppBarProps> = React.memo(({ currentPath, onMenuClick, onRefreshPrograms }) => {\n   const [selectedCategoryId, setSelectedCategoryId] = useState<string>('staff'); // 기본값 변경\n   const [selectedSubMenuPath, setSelectedSubMenuPath] = useState<string>('');\n   const [currentUserPermission, setCurrentUserPermission] = useState<string>(''); // 현재 사용자 권한\n   const [menuCategories, setMenuCategories] = useState<MenuCategoryType[]>(staticMenuCategories); // 동적 메뉴\n@@ -246,9 +249,9 @@\n   const navigate = useNavigate();\n   const location = useLocation();\n \n   // 프로그램 목록을 가져와서 예약/스케줄 메뉴 생성\n-  const loadProgramsAndCreateReservationMenu = async () => {\n+  const loadProgramsAndCreateReservationMenu = useCallback(async () => {\n     try {\n       const programs = await dbManager.getAllPrograms();\n       const activePrograms = programs.filter(program => program.isActive);\n       \n@@ -305,21 +308,21 @@\n       ];\n \n       setMenuCategories(fallbackMenuCategories);\n     }\n-  };\n+  }, []);\n \n   // 컴포넌트 마운트 시 프로그램 목록 로드\n   useEffect(() => {\n     loadProgramsAndCreateReservationMenu();\n-  }, []);\n+  }, [loadProgramsAndCreateReservationMenu]);\n \n   // 외부에서 프로그램 목록 새로고침을 요청할 수 있도록 함수 제공\n   useEffect(() => {\n     if (onRefreshPrograms) {\n       onRefreshPrograms(loadProgramsAndCreateReservationMenu);\n     }\n-  }, [onRefreshPrograms]);\n+  }, [onRefreshPrograms, loadProgramsAndCreateReservationMenu]);\n \n   // 현재 경로에 따라 선택된 카테고리와 서브메뉴 설정\n   useEffect(() => {\n     const currentPathToUse = currentPath || location.pathname;\n@@ -373,9 +376,9 @@\n     getCurrentUserPermission();\n   }, []);\n \n   // 권한에 따라 메뉴 필터링\n-  const getFilteredSubMenus = (categoryId: string, subMenus: SubMenu[]) => {\n+  const getFilteredSubMenus = useCallback((categoryId: string, subMenus: SubMenu[]) => {\n     // 예약/스케줄 카테고리의 경우 VIEWER도 모든 프로그램 예약을 볼 수 있도록 허용\n     if (categoryId === 'reservation') {\n       return subMenus; // 모든 프로그램 예약 메뉴 허용\n     }\n@@ -407,15 +410,15 @@\n       });\n     }\n     \n     return subMenus;\n-  };\n+  }, [currentUserPermission]);\n \n   // 현재 사용자 정보 가져오기 (sessionStorage에서)\n   const adminId = sessionStorage.getItem('adminId');\n   const adminName = adminId || '관리자';\n \n-  const handleCategoryClick = (categoryId: string) => {\n+  const handleCategoryClick = useCallback((categoryId: string) => {\n     setSelectedCategoryId(categoryId);\n     \n     // 해당 카테고리 찾기\n     const category = menuCategories.find((cat: MenuCategoryType) => cat.id === categoryId);\n@@ -470,11 +473,11 @@\n       }\n     } else {\n       setSelectedSubMenuPath(''); // 하위메뉴가 없는 경우 초기화\n     }\n-  };\n+  }, [menuCategories, getFilteredSubMenus, onMenuClick, navigate]);\n \n-  const handleSubMenuClick = (path: string) => {\n+  const handleSubMenuClick = useCallback((path: string) => {\n     setSelectedSubMenuPath(path);\n     \n     // 예약/스케줄 관련 메뉴인 경우 특별 처리\n     if (selectedCategoryId === 'reservation') {\n@@ -502,36 +505,38 @@\n         // React Router를 사용하여 페이지 이동 (새로고침 없음)\n         navigate(path);\n       }\n     }\n-  };\n+  }, [selectedCategoryId, onMenuClick, navigate]);\n \n-  const handleLogoClick = () => {\n+  const handleLogoClick = useCallback(() => {\n     setSelectedCategoryId('staff');\n     setSelectedSubMenuPath('/cms/staff/search');\n     if (onMenuClick) {\n       onMenuClick('/cms/staff/search');\n     } else {\n       navigate('/cms/staff/search');\n     }\n-  };\n+  }, [onMenuClick, navigate]);\n \n   // 개발용 백도어 - 더블클릭 핸들러\n-  const handleLogoDoubleClick = () => {\n+  const handleLogoDoubleClick = useCallback(() => {\n     if (isBackdoorEnabled()) {\n       executeBackdoor();\n     }\n-  };\n+  }, []);\n \n-  const handleLogout = () => {\n+  const handleLogout = useCallback(() => {\n     if (window.confirm('로그아웃 하시겠습니까?')) {\n       logout();\n       navigate('/cms/login');\n     }\n-  };\n+  }, [logout, navigate]);\n \n   // 현재 선택된 카테고리 찾기\n-  const selectedCategory = menuCategories.find((category: MenuCategoryType) => category.id === selectedCategoryId);\n+  const selectedCategory = useMemo(() => {\n+    return menuCategories.find((category: MenuCategoryType) => category.id === selectedCategoryId);\n+  }, [menuCategories, selectedCategoryId]);\n \n   return (\n     <AppBarContainer>\n       <TopBar>\n@@ -586,7 +591,9 @@\n         </SubMenuChipsContainer>\n       )}\n     </AppBarContainer>\n   );\n-};\n+});\n \n+CMSAppBar.displayName = 'CMSAppBar';\n+\n export default CMSAppBar;\n"
                },
                {
                    "date": 1760163390246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,13 +35,9 @@\n     title: '회원관리',\n     subMenus: [\n       { id: 'member-register', title: '신규 등록', path: '/cms/member/register' },\n       { id: 'member-search', title: '빠른 검색', path: '/cms/member/search' },\n-      { id: 'member-tags', title: '태그 관리', path: '/cms/member/tags' },\n-      { id: 'member-qr-checkin', title: 'QR 체크인', path: '/cms/member/qr-checkin' },\n-      { id: 'member-visit-record', title: '내원 기록', path: '/cms/member/visit-record' },\n-      { id: 'member-excel-upload', title: '엑셀 업로드', path: '/cms/member/excel-upload' },\n-      { id: 'member-export', title: '내보내기', path: '/cms/member/export' },\n+      { id: 'member-payment-history', title: '결제 이력', path: '/cms/member/payment-history' },\n     ],\n   },\n   {\n     id: 'program',\n"
                },
                {
                    "date": 1760163454544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,16 +47,15 @@\n       { id: 'product-management', title: '상품 관리', path: '/cms/program/product' },\n     ],\n   },\n   {\n-    id: 'payment',\n-    title: '결제/포인트',\n+    id: 'terms',\n+    title: '약관/문서',\n     subMenus: [\n-      { id: 'payment-register', title: '결제 등록', path: '/cms/payment/register' },\n-      { id: 'payment-point-charge', title: '포인트 충전', path: '/cms/payment/point-charge' },\n-      { id: 'payment-refund', title: '환불/조정', path: '/cms/payment/refund' },\n-      { id: 'payment-receipt', title: '영수증 보내기', path: '/cms/payment/receipt' },\n-      { id: 'payment-sales-dashboard', title: '매출 대시보드', path: '/cms/payment/sales-dashboard' },\n+      { id: 'terms-privacy', title: '개인정보 처리방침', path: '/cms/terms/privacy' },\n+      { id: 'terms-service', title: '서비스 이용약관', path: '/cms/terms/service' },\n+      { id: 'terms-membership', title: '회원 이용약관', path: '/cms/terms/membership' },\n+      { id: 'terms-documents', title: '문서 관리', path: '/cms/terms/documents' },\n     ],\n   },\n   // {\n   //   id: 'notification',\n@@ -279,9 +278,9 @@\n         staticMenuCategories[0], // 직원관리\n         staticMenuCategories[1], // 회원관리\n         reservationCategory,     // 동적 예약/스케줄\n         staticMenuCategories[2], // 프로그램\n-        staticMenuCategories[3], // 결제/포인트\n+        staticMenuCategories[3], // 약관/문서 관리\n         staticMenuCategories[4], // 설정\n       ];\n \n       setMenuCategories(updatedMenuCategories);\n@@ -298,9 +297,9 @@\n         staticMenuCategories[0], // 직원관리\n         staticMenuCategories[1], // 회원관리\n         basicReservationCategory, // 기본 예약/스케줄\n         staticMenuCategories[2], // 프로그램\n-        staticMenuCategories[3], // 결제/포인트\n+        staticMenuCategories[3], // 약관/문서 관리\n         staticMenuCategories[4], // 설정\n       ];\n \n       setMenuCategories(fallbackMenuCategories);\n"
                },
                {
                    "date": 1760163584491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,15 @@\n       { id: 'terms-membership', title: '회원 이용약관', path: '/cms/terms/membership' },\n       { id: 'terms-documents', title: '문서 관리', path: '/cms/terms/documents' },\n     ],\n   },\n+  {\n+    id: 'assets',\n+    title: '자산',\n+    subMenus: [\n+      { id: 'assets-locker', title: '락커', path: '/cms/assets/locker' },\n+    ],\n+  },\n   // {\n   //   id: 'notification',\n   //   title: '알림/문자',\n   //   subMenus: [\n@@ -278,10 +285,11 @@\n         staticMenuCategories[0], // 직원관리\n         staticMenuCategories[1], // 회원관리\n         reservationCategory,     // 동적 예약/스케줄\n         staticMenuCategories[2], // 프로그램\n-        staticMenuCategories[3], // 약관/문서 관리\n-        staticMenuCategories[4], // 설정\n+        staticMenuCategories[3], // 약관/문서\n+        staticMenuCategories[4], // 자산\n+        staticMenuCategories[5], // 설정\n       ];\n \n       setMenuCategories(updatedMenuCategories);\n     } catch (error) {\n@@ -297,10 +305,11 @@\n         staticMenuCategories[0], // 직원관리\n         staticMenuCategories[1], // 회원관리\n         basicReservationCategory, // 기본 예약/스케줄\n         staticMenuCategories[2], // 프로그램\n-        staticMenuCategories[3], // 약관/문서 관리\n-        staticMenuCategories[4], // 설정\n+        staticMenuCategories[3], // 약관/문서\n+        staticMenuCategories[4], // 자산\n+        staticMenuCategories[5], // 설정\n       ];\n \n       setMenuCategories(fallbackMenuCategories);\n     }\n"
                },
                {
                    "date": 1760163672219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,8 +386,13 @@\n     if (categoryId === 'reservation') {\n       return subMenus; // 모든 프로그램 예약 메뉴 허용\n     }\n     \n+    // 약관/문서, 자산 카테고리의 경우 모든 권한에서 접근 허용\n+    if (categoryId === 'terms' || categoryId === 'assets') {\n+      return subMenus; // 모든 하위 메뉴 허용\n+    }\n+    \n     // VIEWER 권한인 경우 조회/검색 관련 메뉴만 허용\n     if (currentUserPermission === 'VIEWER') {\n       return subMenus.filter(subMenu => {\n         const title = subMenu.title;\n"
                },
                {
                    "date": 1760165372033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,11 @@\n     subMenus: [\n       { id: 'terms-privacy', title: '개인정보 처리방침', path: '/cms/terms/privacy' },\n       { id: 'terms-service', title: '서비스 이용약관', path: '/cms/terms/service' },\n       { id: 'terms-membership', title: '회원 이용약관', path: '/cms/terms/membership' },\n-      { id: 'terms-documents', title: '문서 관리', path: '/cms/terms/documents' },\n+      { id: 'terms-business', title: '사업자 정보', path: '/cms/terms/business' },\n+      { id: 'terms-marketing', title: '마케팅 활용 동의', path: '/cms/terms/marketing' },\n+      { id: 'terms-contract', title: '계약서', path: '/cms/terms/contract' },\n     ],\n   },\n   {\n     id: 'assets',\n"
                },
                {
                    "date": 1760757228159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n     subMenus: [\n       { id: 'member-register', title: '신규 등록', path: '/cms/member/register' },\n       { id: 'member-search', title: '빠른 검색', path: '/cms/member/search' },\n       { id: 'member-payment-history', title: '결제 이력', path: '/cms/member/payment-history' },\n+      { id: 'member-point-history', title: '포인트 이력', path: '/cms/member/point-history' },\n     ],\n   },\n   {\n     id: 'program',\n"
                },
                {
                    "date": 1760758580330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n     title: '회원관리',\n     subMenus: [\n       { id: 'member-register', title: '신규 등록', path: '/cms/member/register' },\n       { id: 'member-search', title: '빠른 검색', path: '/cms/member/search' },\n+      { id: 'member-course-history', title: '수강 이력', path: '/cms/member/course-history' },\n       { id: 'member-payment-history', title: '결제 이력', path: '/cms/member/payment-history' },\n       { id: 'member-point-history', title: '포인트 이력', path: '/cms/member/point-history' },\n     ],\n   },\n"
                }
            ],
            "date": 1757828417755,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../styles/colors';\nimport { AppTextStyles } from '../styles/textStyles';\nimport { useAdminAuth } from '../context/AdminAuthContext';\n\n// 메뉴 카테고리 타입 정의\ninterface MenuCategoryType {\n  id: string;\n  title: string;\n  subMenus: SubMenu[];\n}\n\ninterface SubMenu {\n  id: string;\n  title: string;\n  path: string;\n}\n\n// 더미 메뉴 데이터\nconst menuCategories: MenuCategoryType[] = [\n  {\n    id: 'member',\n    title: '회원관리',\n    subMenus: [\n      { id: 'admin', title: '관리자 관리', path: '/cms/admin' },\n      { id: 'user', title: '사용자 관리', path: '/cms/users' },\n      { id: 'permission', title: '권한 관리', path: '/cms/permissions' },\n    ],\n  },\n  {\n    id: 'content',\n    title: '콘텐츠',\n    subMenus: [\n      { id: 'articles', title: '게시물 관리', path: '/cms/articles' },\n      { id: 'media', title: '미디어 관리', path: '/cms/media' },\n      { id: 'categories', title: '카테고리 관리', path: '/cms/categories' },\n    ],\n  },\n  {\n    id: 'system',\n    title: '시스템',\n    subMenus: [\n      { id: 'settings', title: '시스템 설정', path: '/cms/settings' },\n      { id: 'logs', title: '로그 관리', path: '/cms/logs' },\n      { id: 'backup', title: '백업 관리', path: '/cms/backup' },\n    ],\n  },\n  {\n    id: 'analytics',\n    title: '분석',\n    subMenus: [\n      { id: 'dashboard', title: '대시보드', path: '/cms/dashboard' },\n      { id: 'reports', title: '리포트', path: '/cms/reports' },\n      { id: 'statistics', title: '통계', path: '/cms/statistics' },\n    ],\n  },\n];\n\nconst AppBarContainer = styled.header`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 64px;\n  background-color: ${AppColors.surface};\n  border-bottom: 1px solid ${AppColors.borderLight};\n  z-index: 1000;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 24px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nconst LeftSection = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 32px;\n`;\n\nconst Logo = styled.div`\n  display: flex;\n  align-items: center;\n  font-weight: 700;\n  font-size: ${AppTextStyles.title2.fontSize};\n  color: ${AppColors.primary};\n  cursor: pointer;\n`;\n\nconst MenuSection = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 24px;\n  position: relative;\n`;\n\nconst MenuCategory = styled.div<{ $isActive: boolean }>`\n  position: relative;\n  cursor: pointer;\n  padding: 8px 16px;\n  border-radius: 8px;\n  font-weight: 500;\n  font-size: ${AppTextStyles.body1.fontSize};\n  color: ${props => props.$isActive ? AppColors.primary : AppColors.onSurface};\n  background-color: ${props => props.$isActive ? `${AppColors.primary}10` : 'transparent'};\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: ${AppColors.primary}10;\n    color: ${AppColors.primary};\n  }\n`;\n\nconst SubMenuContainer = styled.div<{ $isVisible: boolean }>`\n  position: absolute;\n  top: calc(100% + 8px);\n  left: 0;\n  min-width: 180px;\n  background-color: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  z-index: 1001;\n  padding: 8px 0;\n  visibility: ${props => props.$isVisible ? 'visible' : 'hidden'};\n  opacity: ${props => props.$isVisible ? 1 : 0};\n  transform: ${props => props.$isVisible ? 'translateY(0)' : 'translateY(-8px)'};\n  transition: all 0.2s ease;\n  pointer-events: ${props => props.$isVisible ? 'auto' : 'none'};\n`;\n\nconst SubMenuItem = styled.div`\n  padding: 12px 16px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onSurface};\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: ${AppColors.primary}08;\n    color: ${AppColors.primary};\n  }\n`;\n\nconst RightSection = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 16px;\n`;\n\nconst UserInfo = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onSurface};\n`;\n\nconst UserName = styled.span`\n  font-weight: 500;\n`;\n\nconst SettingsIcon = styled.div`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  background-color: ${AppColors.primary}10;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: ${AppColors.primary}20;\n  }\n\n  svg {\n    width: 18px;\n    height: 18px;\n    color: ${AppColors.primary};\n  }\n`;\n\nconst LogoutButton = styled.button`\n  padding: 6px 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 6px;\n  background-color: transparent;\n  color: ${AppColors.onSurface};\n  font-size: ${AppTextStyles.label2.fontSize};\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: ${AppColors.error}10;\n    border-color: ${AppColors.error};\n    color: ${AppColors.error};\n  }\n`;\n\ninterface CMSAppBarProps {\n  currentPath?: string;\n  onMenuClick?: (path: string) => void;\n}\n\nconst CMSAppBar: React.FC<CMSAppBarProps> = ({ currentPath, onMenuClick }) => {\n  const [activeMenuId, setActiveMenuId] = useState<string | null>(null);\n  const [hoveredMenuId, setHoveredMenuId] = useState<string | null>(null);\n  const { logout } = useAdminAuth();\n\n  // 현재 사용자 정보 가져오기 (sessionStorage에서)\n  const adminId = sessionStorage.getItem('adminId');\n  const adminName = adminId || '관리자';\n\n  const handleCategoryMouseEnter = (categoryId: string) => {\n    setHoveredMenuId(categoryId);\n  };\n\n  const handleCategoryMouseLeave = () => {\n    setHoveredMenuId(null);\n  };\n\n  const handleSubMenuClick = (path: string) => {\n    setActiveMenuId(null);\n    setHoveredMenuId(null);\n    if (onMenuClick) {\n      onMenuClick(path);\n    } else {\n      // 기본 동작: 페이지 이동\n      window.location.href = path;\n    }\n  };\n\n  const handleLogoClick = () => {\n    if (onMenuClick) {\n      onMenuClick('/cms/admin');\n    } else {\n      window.location.href = '/cms/admin';\n    }\n  };\n\n  const handleLogout = () => {\n    if (window.confirm('로그아웃 하시겠습니까?')) {\n      logout();\n      window.location.href = '/cms/login';\n    }\n  };\n\n  const handleSettingsClick = () => {\n    // 설정 페이지로 이동하거나 설정 모달 열기\n    console.log('설정 클릭');\n  };\n\n  return (\n    <AppBarContainer>\n      <LeftSection>\n        <Logo onClick={handleLogoClick}>\n          LAVIDA CMS\n        </Logo>\n        \n        <MenuSection>\n          {menuCategories.map((category) => (\n            <MenuCategory\n              key={category.id}\n              $isActive={activeMenuId === category.id}\n              onMouseEnter={() => handleCategoryMouseEnter(category.id)}\n              onMouseLeave={handleCategoryMouseLeave}\n            >\n              {category.title}\n              \n              <SubMenuContainer\n                $isVisible={hoveredMenuId === category.id}\n                onMouseEnter={() => setHoveredMenuId(category.id)}\n                onMouseLeave={() => setHoveredMenuId(null)}\n              >\n                {category.subMenus.map((subMenu) => (\n                  <SubMenuItem\n                    key={subMenu.id}\n                    onClick={() => handleSubMenuClick(subMenu.path)}\n                  >\n                    {subMenu.title}\n                  </SubMenuItem>\n                ))}\n              </SubMenuContainer>\n            </MenuCategory>\n          ))}\n        </MenuSection>\n      </LeftSection>\n\n      <RightSection>\n        <UserInfo>\n          <UserName>{adminName}</UserName>\n          <span>님</span>\n        </UserInfo>\n        \n        <SettingsIcon onClick={handleSettingsClick}>\n          <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n            <path d=\"M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5a3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97c0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1c0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.66Z\"/>\n          </svg>\n        </SettingsIcon>\n        \n        <LogoutButton onClick={handleLogout}>\n          로그아웃\n        </LogoutButton>\n      </RightSection>\n    </AppBarContainer>\n  );\n};\n\nexport default CMSAppBar;\n"
        }
    ]
}