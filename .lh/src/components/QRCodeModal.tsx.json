{
    "sourceFile": "src/components/QRCodeModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1761379597350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761379683138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,8 +287,13 @@\n       }\n     }\n   };\n \n+  const handleGoToPage = () => {\n+    const url = `/exercise-prescription?memberId=${memberId}`;\n+    window.open(url, '_blank');\n+  };\n+\n   if (!isOpen) return null;\n \n   return (\n     <ModalOverlay onClick={onClose}>\n@@ -316,8 +321,11 @@\n             </ActionButton>\n             <ActionButton onClick={handleShare}>\n               코드 공유\n             </ActionButton>\n+            <ActionButton onClick={handleGoToPage}>\n+              페이지 이동\n+            </ActionButton>\n           </ButtonGroup>\n         </RightSection>\n       </ModalContent>\n     </ModalOverlay>\n"
                }
            ],
            "date": 1761379597350,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport QRCode from 'qrcode';\nimport { AppColors } from '../styles/colors';\nimport { AppTextStyles } from '../styles/textStyles';\n\ninterface QRCodeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  memberName: string;\n  memberId: string;\n}\n\nconst ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 9999;\n`;\n\nconst ModalContent = styled.div`\n  background: ${AppColors.surface};\n  border-radius: 16px;\n  padding: 32px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n  width: 400px;\n  height: 300px; /* 8cm * 37.8px/cm ≈ 302px */\n  max-width: 90vw;\n  max-height: 90vh;\n  display: flex;\n  position: relative;\n`;\n\nconst CloseButton = styled.button`\n  position: absolute;\n  top: 16px;\n  right: 16px;\n  background: none;\n  border: none;\n  font-size: 20px;\n  cursor: pointer;\n  color: ${AppColors.onInput1};\n  padding: 4px;\n  border-radius: 4px;\n  \n  &:hover {\n    background: ${AppColors.borderLight};\n  }\n`;\n\nconst LeftSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding-right: 24px;\n`;\n\nconst RightSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nconst QRContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n`;\n\nconst QRCanvas = styled.canvas`\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n`;\n\nconst MemberInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nconst MemberName = styled.h2`\n  font-size: ${AppTextStyles.title2.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onBackground};\n  margin: 0;\n  word-break: keep-all;\n`;\n\nconst MemberLabel = styled.span`\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onInput1};\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-top: 24px;\n`;\n\nconst ActionButton = styled.button`\n  padding: 12px 16px;\n  border: 1px solid ${AppColors.primary};\n  border-radius: 8px;\n  background: ${AppColors.surface};\n  color: ${AppColors.primary};\n  font-size: ${AppTextStyles.body2.fontSize};\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    background: ${AppColors.primary};\n    color: ${AppColors.onPrimary};\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst PrimaryButton = styled(ActionButton)`\n  background: ${AppColors.primary};\n  color: ${AppColors.onPrimary};\n  \n  &:hover {\n    background: ${AppColors.primary};\n    opacity: 0.9;\n  }\n`;\n\nconst QRCodeModal: React.FC<QRCodeModalProps> = ({ isOpen, onClose, memberName, memberId }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [qrDataUrl, setQrDataUrl] = useState<string>('');\n\n  const generateQRCode = useCallback(async () => {\n    if (!canvasRef.current) return;\n    \n    try {\n      // QR 코드로 연결될 URL (운동처방 페이지)\n      const url = `${window.location.origin}/exercise-prescription?memberId=${memberId}`;\n      \n      // QR 코드 생성\n      await QRCode.toCanvas(canvasRef.current, url, {\n        width: 150,\n        margin: 2,\n        color: {\n          dark: '#000000',\n          light: '#FFFFFF'\n        }\n      });\n\n      // 저장/공유를 위한 데이터 URL 생성\n      const dataUrl = await QRCode.toDataURL(url, {\n        width: 300,\n        margin: 2\n      });\n      setQrDataUrl(dataUrl);\n    } catch (error) {\n      console.error('QR 코드 생성 실패:', error);\n    }\n  }, [memberId]);\n\n  useEffect(() => {\n    if (isOpen && canvasRef.current) {\n      generateQRCode();\n    }\n  }, [isOpen, generateQRCode]);\n\n  const handlePrint = () => {\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n\n    printWindow.document.write(`\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>QR 코드 - ${memberName}</title>\n          <style>\n            body { \n              margin: 0; \n              padding: 20px; \n              font-family: Arial, sans-serif;\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              min-height: 100vh;\n            }\n            .print-container { \n              width: 8cm; \n              height: 5cm;\n              border: 1px solid #ddd;\n              display: flex;\n              padding: 16px;\n              box-sizing: border-box;\n            }\n            .qr-section {\n              flex: 1;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n            }\n            .info-section {\n              flex: 1;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              font-size: 16px;\n              font-weight: bold;\n            }\n            img { \n              max-width: 100%;\n              height: auto;\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"print-container\">\n            <div class=\"qr-section\">\n              <img src=\"${qrDataUrl}\" alt=\"QR Code\" />\n            </div>\n            <div class=\"info-section\">\n              ${memberName}\n            </div>\n          </div>\n        </body>\n      </html>\n    `);\n    \n    printWindow.document.close();\n    printWindow.focus();\n    printWindow.print();\n  };\n\n  const handleSave = () => {\n    if (!qrDataUrl) return;\n    \n    const link = document.createElement('a');\n    link.download = `qrcode_${memberName}_${memberId}.png`;\n    link.href = qrDataUrl;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const handleShare = async () => {\n    if (!qrDataUrl) return;\n\n    try {\n      // Web Share API 지원 확인\n      if (navigator.share) {\n        // Data URL을 Blob으로 변환\n        const response = await fetch(qrDataUrl);\n        const blob = await response.blob();\n        const file = new File([blob], `qrcode_${memberName}.png`, { type: 'image/png' });\n\n        await navigator.share({\n          title: `${memberName} QR 코드`,\n          text: `${memberName}님의 운동처방 QR 코드입니다.`,\n          files: [file]\n        });\n      } else {\n        // Web Share API를 지원하지 않는 경우 클립보드에 복사\n        await navigator.clipboard.writeText(`${window.location.origin}/exercise-prescription?memberId=${memberId}`);\n        alert('QR 코드 링크가 클립보드에 복사되었습니다.');\n      }\n    } catch (error) {\n      console.error('공유 실패:', error);\n      // 폴백: 링크를 클립보드에 복사\n      try {\n        await navigator.clipboard.writeText(`${window.location.origin}/exercise-prescription?memberId=${memberId}`);\n        alert('QR 코드 링크가 클립보드에 복사되었습니다.');\n      } catch (clipboardError) {\n        console.error('클립보드 복사 실패:', clipboardError);\n        alert('공유에 실패했습니다.');\n      }\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <ModalOverlay onClick={onClose}>\n      <ModalContent onClick={(e) => e.stopPropagation()}>\n        <CloseButton onClick={onClose}>×</CloseButton>\n        \n        <LeftSection>\n          <QRContainer>\n            <QRCanvas ref={canvasRef} />\n          </QRContainer>\n        </LeftSection>\n        \n        <RightSection>\n          <MemberInfo>\n            <MemberLabel>회원명</MemberLabel>\n            <MemberName>{memberName}</MemberName>\n          </MemberInfo>\n          \n          <ButtonGroup>\n            <PrimaryButton onClick={handlePrint}>\n              코드 인쇄\n            </PrimaryButton>\n            <ActionButton onClick={handleSave}>\n              코드 저장\n            </ActionButton>\n            <ActionButton onClick={handleShare}>\n              코드 공유\n            </ActionButton>\n          </ButtonGroup>\n        </RightSection>\n      </ModalContent>\n    </ModalOverlay>\n  );\n};\n\nexport default QRCodeModal;"
        }
    ]
}