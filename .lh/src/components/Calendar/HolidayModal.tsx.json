{
    "sourceFile": "src/components/Calendar/HolidayModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1760157680267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760158255870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n import React, { useState, useEffect } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '../../styles/colors';\n import { AppTextStyles } from '../../styles/textStyles';\n-import { HolidayModalProps, HolidaySettings } from './types';\n+import { HolidayModalProps } from './types';\n+import type { HolidaySettings } from '../../utils/indexedDB';\n \n const ModalOverlay = styled.div`\n   position: fixed;\n   top: 0;\n@@ -143,10 +144,12 @@\n   isSelectable: boolean; \n   isWeekend: boolean; \n   isHoliday: boolean;\n   isToday: boolean;\n+  isPastDate?: boolean;\n }>`\n   background-color: ${props => {\n+    if (props.isPastDate) return AppColors.onSurface + '05'; // 과거 날짜는 매우 연한 회색\n     if (!props.isSelectable) return AppColors.onSurface + '10';\n     if (props.isHoliday) return AppColors.error + '20';\n     if (props.isWeekend) return AppColors.warning + '10';\n     return AppColors.surface;\n@@ -157,12 +160,27 @@\n   cursor: ${props => props.isSelectable ? 'pointer' : 'not-allowed'};\n   border: ${props => props.isToday ? `2px solid ${AppColors.primary}` : 'none'};\n   transition: background-color 0.2s ease;\n   font-size: ${AppTextStyles.label2.fontSize};\n+  color: ${props => props.isPastDate ? AppColors.onSurface + '40' : AppColors.onSurface};\n+  position: relative;\n   \n   &:hover {\n     background-color: ${props => props.isSelectable ? AppColors.primary + '20' : undefined};\n   }\n+  \n+  ${props => props.isPastDate && `\n+    &::after {\n+      content: '';\n+      position: absolute;\n+      top: 50%;\n+      left: 10%;\n+      right: 10%;\n+      height: 1px;\n+      background-color: ${AppColors.onSurface}40;\n+      transform: translateY(-50%);\n+    }\n+  `}\n `;\n \n const TimeSettingsSection = styled.div`\n   margin-bottom: 24px;\n@@ -201,31 +219,42 @@\n   justify-content: flex-end;\n   gap: 12px;\n `;\n \n-const Button = styled.button<{ variant: 'primary' | 'secondary' }>`\n+const ErrorMessage = styled.div`\n+  background-color: ${AppColors.error}10;\n+  border: 1px solid ${AppColors.error}40;\n+  border-radius: 6px;\n+  padding: 12px;\n+  margin-bottom: 16px;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const Button = styled.button<{ variant: 'primary' | 'secondary'; disabled?: boolean }>`\n   padding: 12px 24px;\n   border-radius: 6px;\n   font-size: ${AppTextStyles.body2.fontSize};\n   font-weight: 500;\n-  cursor: pointer;\n+  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};\n   transition: all 0.2s ease;\n+  opacity: ${props => props.disabled ? 0.6 : 1};\n   \n   ${props => props.variant === 'primary' ? `\n     background-color: ${AppColors.primary};\n     color: ${AppColors.onPrimary};\n     border: none;\n     \n     &:hover {\n-      background-color: ${AppColors.primary}CC;\n+      background-color: ${props.disabled ? AppColors.primary : AppColors.primary + 'CC'};\n     }\n   ` : `\n     background-color: ${AppColors.surface};\n     color: ${AppColors.onSurface};\n     border: 1px solid ${AppColors.borderLight};\n     \n     &:hover {\n-      background-color: ${AppColors.background};\n+      background-color: ${props.disabled ? AppColors.surface : AppColors.background};\n     }\n   `}\n `;\n \n@@ -234,15 +263,18 @@\n   onClose,\n   staffId,\n   staffList,\n   currentUser,\n-  onSave\n+  onSave,\n+  existingHolidays = [] // 기존 휴일 설정 데이터\n }) => {\n   const [selectedStaffIds, setSelectedStaffIds] = useState<string[]>([]);\n   const [currentMonth, setCurrentMonth] = useState(new Date());\n   const [holidaySettings, setHolidaySettings] = useState<Map<string, boolean>>(new Map());\n   const [defaultStartTime, setDefaultStartTime] = useState(9);\n   const [defaultEndTime, setDefaultEndTime] = useState(21);\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n \n   // 권한 체크\n   const canEditStaff = (targetStaffId: string): boolean => {\n     if (!currentUser) return false;\n@@ -269,8 +301,25 @@\n       }\n     }\n   }, [isOpen, staffId, currentUser, selectableStaff]);\n \n+  // 기존 휴일 설정 로드\n+  useEffect(() => {\n+    if (isOpen && existingHolidays && selectedStaffIds.length > 0) {\n+      const newHolidaySettings = new Map<string, boolean>();\n+      \n+      // 선택된 코치들의 기존 휴일 설정 로드\n+      selectedStaffIds.forEach(staffId => {\n+        const staffHolidays = existingHolidays.filter(h => h.staffId === staffId);\n+        staffHolidays.forEach(holiday => {\n+          newHolidaySettings.set(holiday.date, holiday.isHoliday);\n+        });\n+      });\n+      \n+      setHolidaySettings(newHolidaySettings);\n+    }\n+  }, [isOpen, existingHolidays, selectedStaffIds]);\n+\n   // 달력 데이터 생성\n   const generateCalendarDays = () => {\n     const year = currentMonth.getFullYear();\n     const month = currentMonth.getMonth();\n@@ -279,33 +328,50 @@\n     startDate.setDate(firstDay.getDate() - firstDay.getDay());\n \n     const days = [];\n     const today = new Date();\n+    today.setHours(0, 0, 0, 0); // 시간 정보 제거하여 날짜만 비교\n     \n     for (let i = 0; i < 42; i++) {\n       const date = new Date(startDate);\n       date.setDate(startDate.getDate() + i);\n+      date.setHours(0, 0, 0, 0); // 시간 정보 제거\n       \n       const isCurrentMonth = date.getMonth() === month;\n       const isWeekend = date.getDay() === 0 || date.getDay() === 6;\n-      const isToday = date.toDateString() === today.toDateString();\n+      const isToday = date.getTime() === today.getTime();\n+      const isPastDate = date < today; // 오늘 이전 날짜 체크\n       \n-      // 계약기간 체크 (선택된 코치들의 계약기간이 모두 포함되는 날짜만 선택 가능)\n-      const isSelectable = isCurrentMonth && selectedStaffIds.every(staffId => {\n+      // 선택 가능 조건:\n+      // 1. 현재 월에 속함\n+      // 2. 오늘 이후 날짜\n+      // 3. 선택된 코치들의 계약기간 내\n+      const isSelectable = isCurrentMonth && !isPastDate && selectedStaffIds.every(staffId => {\n         const staff = staffList.find(s => s.id === staffId);\n         if (!staff?.contractStartDate || !staff?.contractEndDate) return true;\n-        return date >= staff.contractStartDate && date <= staff.contractEndDate;\n+        \n+        // 계약일도 Date 객체의 시간 정보 제거\n+        const contractStart = new Date(staff.contractStartDate);\n+        contractStart.setHours(0, 0, 0, 0);\n+        const contractEnd = new Date(staff.contractEndDate);\n+        contractEnd.setHours(0, 0, 0, 0);\n+        \n+        return date >= contractStart && date <= contractEnd;\n       });\n       \n       const dateKey = date.toISOString().split('T')[0];\n-      const isHoliday = holidaySettings.get(dateKey) ?? isWeekend;\n+      // 휴일 설정: 명시적으로 설정된 값이 있으면 사용, 없으면 주말 기본값\n+      const isHoliday = holidaySettings.has(dateKey) \n+        ? holidaySettings.get(dateKey)! \n+        : isWeekend;\n \n       days.push({\n         date,\n         day: date.getDate(),\n         isCurrentMonth,\n         isWeekend,\n         isToday,\n+        isPastDate,\n         isSelectable,\n         isHoliday,\n         dateKey\n       });\n@@ -321,42 +387,55 @@\n         : [...prev, staffId]\n     );\n   };\n \n-  const handleDateClick = (dateKey: string, isSelectable: boolean) => {\n+  const handleDateClick = (dateKey: string, isSelectable: boolean, isWeekend: boolean) => {\n     if (!isSelectable) return;\n     \n     setHolidaySettings(prev => {\n       const newMap = new Map(prev);\n-      const currentValue = newMap.get(dateKey);\n+      const currentValue = newMap.has(dateKey) ? newMap.get(dateKey)! : isWeekend;\n       newMap.set(dateKey, !currentValue);\n       return newMap;\n     });\n   };\n \n-  const handleSave = () => {\n-    const settings: HolidaySettings[] = [];\n-    const now = new Date();\n+  const handleSave = async () => {\n+    setIsLoading(true);\n+    setError(null);\n     \n-    holidaySettings.forEach((isHoliday, dateKey) => {\n-      selectedStaffIds.forEach(staffId => {\n-        settings.push({\n-          id: `${staffId}-${dateKey}`,\n-          staffId,\n-          date: dateKey,\n-          isHoliday,\n-          workingHours: isHoliday ? undefined : {\n-            start: defaultStartTime,\n-            end: defaultEndTime\n-          },\n-          createdAt: now,\n-          updatedAt: now\n-        });\n+    try {\n+      const settings: Omit<HolidaySettings, 'id' | 'createdAt' | 'updatedAt'>[] = [];\n+      \n+      // 선택된 날짜들의 설정만 저장 (명시적으로 변경된 날짜들)\n+      holidaySettings.forEach((isHoliday, dateKey) => {\n+        const date = new Date(dateKey);\n+        const isWeekend = date.getDay() === 0 || date.getDay() === 6;\n+        \n+        // 주말 기본값과 다른 경우나, 평일에 휴일로 설정된 경우만 저장\n+        if ((isWeekend && !isHoliday) || (!isWeekend && isHoliday)) {\n+          selectedStaffIds.forEach(staffId => {\n+            settings.push({\n+              staffId,\n+              date: dateKey,\n+              isHoliday,\n+              workingHours: isHoliday ? undefined : {\n+                start: defaultStartTime,\n+                end: defaultEndTime\n+              }\n+            });\n+          });\n+        }\n       });\n-    });\n-    \n-    onSave(settings);\n-    onClose();\n+      \n+      await onSave(settings);\n+      onClose();\n+    } catch (error) {\n+      console.error('휴일 설정 저장 중 오류 발생:', error);\n+      setError('휴일 설정 저장 중 오류가 발생했습니다. 다시 시도해주세요.');\n+    } finally {\n+      setIsLoading(false);\n+    }\n   };\n \n   const handlePrevMonth = () => {\n     setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() - 1));\n@@ -381,8 +460,13 @@\n           <CloseButton onClick={onClose}>×</CloseButton>\n         </ModalHeader>\n         \n         <ModalBody>\n+          {/* 에러 메시지 표시 */}\n+          {error && (\n+            <ErrorMessage>{error}</ErrorMessage>\n+          )}\n+\n           {/* 코치 선택 (master 권한인 경우만) */}\n           {currentUser?.role === 'master' && !staffId && (\n             <StaffSelector>\n               <StaffSelectorTitle>대상 코치 선택</StaffSelectorTitle>\n@@ -436,9 +520,11 @@\n                 <MonthNavButton onClick={handleNextMonth} style={{ marginLeft: '8px' }}>다음</MonthNavButton>\n               </div>\n             </CalendarHeader>\n             <div style={{ fontSize: '14px', marginBottom: '12px', color: AppColors.onSurface + '80' }}>\n-              * 클릭하여 휴일/근무일 전환 (빨간색: 휴일, 노란색: 주말, 흰색: 근무일)\n+              * 클릭하여 휴일/근무일 전환 (빨간색: 휴일, 노란색: 주말 기본휴일, 흰색: 근무일)\n+              <br />* 오늘 이전 날짜 및 계약기간 외 날짜는 설정 불가\n+              <br />* 주말은 기본 휴일이지만 클릭으로 근무일 변경 가능\n             </div>\n             <CalendarGrid>\n               {weekDays.map(day => (\n                 <CalendarGridHeader key={day}>{day}</CalendarGridHeader>\n@@ -449,9 +535,10 @@\n                   isSelectable={day.isSelectable}\n                   isWeekend={day.isWeekend}\n                   isHoliday={day.isHoliday}\n                   isToday={day.isToday}\n-                  onClick={() => handleDateClick(day.dateKey, day.isSelectable)}\n+                  isPastDate={day.isPastDate}\n+                  onClick={() => handleDateClick(day.dateKey, day.isSelectable, day.isWeekend)}\n                 >\n                   {day.isCurrentMonth ? day.day : ''}\n                 </CalendarDay>\n               ))}\n@@ -459,13 +546,13 @@\n           </CalendarSection>\n         </ModalBody>\n \n         <ModalFooter>\n-          <Button variant=\"secondary\" onClick={onClose}>\n+          <Button variant=\"secondary\" onClick={onClose} disabled={isLoading}>\n             취소\n           </Button>\n-          <Button variant=\"primary\" onClick={handleSave}>\n-            저장\n+          <Button variant=\"primary\" onClick={handleSave} disabled={isLoading || selectedStaffIds.length === 0}>\n+            {isLoading ? '저장 중...' : '저장'}\n           </Button>\n         </ModalFooter>\n       </ModalContainer>\n     </ModalOverlay>\n"
                },
                {
                    "date": 1760159055489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n   box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n   width: 90%;\n   max-width: 800px;\n   max-height: 90vh;\n-  overflow-y: auto;\n+  display: flex;\n+  flex-direction: column;\n `;\n \n const ModalHeader = styled.div`\n   padding: 24px;\n@@ -57,8 +58,21 @@\n `;\n \n const ModalBody = styled.div`\n   padding: 24px;\n+  flex: 1;\n+  overflow-y: auto;\n+  \n+  /* 스크롤바 숨기기 - WebKit 브라우저 (Chrome, Safari) */\n+  &::-webkit-scrollbar {\n+    display: none;\n+  }\n+  \n+  /* 스크롤바 숨기기 - Firefox */\n+  scrollbar-width: none;\n+  \n+  /* 스크롤바 숨기기 - IE/Edge */\n+  -ms-overflow-style: none;\n `;\n \n const StaffSelector = styled.div`\n   margin-bottom: 24px;\n"
                },
                {
                    "date": 1760159848678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState, useEffect } from 'react';\n+import React, { useState, useEffect, useMemo, useCallback } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '../../styles/colors';\n import { AppTextStyles } from '../../styles/textStyles';\n import { HolidayModalProps } from './types';\n@@ -154,36 +154,42 @@\n   color: ${AppColors.primary};\n `;\n \n const CalendarDay = styled.div<{ \n-  isSelectable: boolean; \n-  isWeekend: boolean; \n-  isHoliday: boolean;\n-  isToday: boolean;\n-  isPastDate?: boolean;\n+  $isSelectable: boolean; \n+  $isWeekend: boolean; \n+  $isHoliday: boolean;\n+  $isToday: boolean;\n+  $isPastDate?: boolean;\n }>`\n   background-color: ${props => {\n-    if (props.isPastDate) return AppColors.onSurface + '05'; // 과거 날짜는 매우 연한 회색\n-    if (!props.isSelectable) return AppColors.onSurface + '10';\n-    if (props.isHoliday) return AppColors.error + '20';\n-    if (props.isWeekend) return AppColors.warning + '10';\n+    if (props.$isPastDate) return AppColors.onSurface + '05'; // 과거 날짜는 매우 연한 회색\n+    if (!props.$isSelectable) return AppColors.onSurface + '10';\n+    // 휴일인 경우 빨간색 배경\n+    if (props.$isHoliday) return AppColors.error + '25';\n+    // 주말이지만 휴일이 아닌 경우 (근무일로 변경된 주말) 연한 파란색\n+    if (props.$isWeekend && !props.$isHoliday) return AppColors.primary + '15';\n+    // 평일 근무일 흰색 배경\n     return AppColors.surface;\n   }};\n   padding: 8px 4px;\n   min-height: 40px;\n   text-align: center;\n-  cursor: ${props => props.isSelectable ? 'pointer' : 'not-allowed'};\n-  border: ${props => props.isToday ? `2px solid ${AppColors.primary}` : 'none'};\n+  cursor: ${props => props.$isSelectable ? 'pointer' : 'not-allowed'};\n+  border: ${props => props.$isToday ? `2px solid ${AppColors.primary}` : 'none'};\n   transition: background-color 0.2s ease;\n   font-size: ${AppTextStyles.label2.fontSize};\n-  color: ${props => props.isPastDate ? AppColors.onSurface + '40' : AppColors.onSurface};\n+  color: ${props => props.$isPastDate ? AppColors.onSurface + '40' : AppColors.onSurface};\n   position: relative;\n   \n   &:hover {\n-    background-color: ${props => props.isSelectable ? AppColors.primary + '20' : undefined};\n+    background-color: ${props => {\n+      if (!props.$isSelectable) return undefined;\n+      return props.$isHoliday ? AppColors.error + '40' : AppColors.primary + '30';\n+    }};\n   }\n   \n-  ${props => props.isPastDate && `\n+  ${props => props.$isPastDate && `\n     &::after {\n       content: '';\n       position: absolute;\n       top: 50%;\n@@ -243,32 +249,32 @@\n   color: ${AppColors.error};\n   font-size: ${AppTextStyles.body2.fontSize};\n `;\n \n-const Button = styled.button<{ variant: 'primary' | 'secondary'; disabled?: boolean }>`\n+const Button = styled.button<{ $variant: 'primary' | 'secondary'; $disabled?: boolean }>`\n   padding: 12px 24px;\n   border-radius: 6px;\n   font-size: ${AppTextStyles.body2.fontSize};\n   font-weight: 500;\n-  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};\n+  cursor: ${props => props.$disabled ? 'not-allowed' : 'pointer'};\n   transition: all 0.2s ease;\n-  opacity: ${props => props.disabled ? 0.6 : 1};\n+  opacity: ${props => props.$disabled ? 0.6 : 1};\n   \n-  ${props => props.variant === 'primary' ? `\n+  ${props => props.$variant === 'primary' ? `\n     background-color: ${AppColors.primary};\n     color: ${AppColors.onPrimary};\n     border: none;\n     \n     &:hover {\n-      background-color: ${props.disabled ? AppColors.primary : AppColors.primary + 'CC'};\n+      background-color: ${props.$disabled ? AppColors.primary : AppColors.primary + 'CC'};\n     }\n   ` : `\n     background-color: ${AppColors.surface};\n     color: ${AppColors.onSurface};\n     border: 1px solid ${AppColors.borderLight};\n     \n     &:hover {\n-      background-color: ${props.disabled ? AppColors.surface : AppColors.background};\n+      background-color: ${props.$disabled ? AppColors.surface : AppColors.background};\n     }\n   `}\n `;\n \n@@ -288,18 +294,20 @@\n   const [defaultEndTime, setDefaultEndTime] = useState(21);\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n-  // 권한 체크\n-  const canEditStaff = (targetStaffId: string): boolean => {\n+  // 권한 체크 - useCallback으로 최적화\n+  const canEditStaff = useCallback((targetStaffId: string): boolean => {\n     if (!currentUser) return false;\n     if (currentUser.role === 'master') return true;\n     return currentUser.id === targetStaffId;\n-  };\n+  }, [currentUser]);\n \n-  // 선택 가능한 코치 목록 필터링\n-  const selectableStaff = staffList.filter(staff => \n-    staff.role === '코치' && canEditStaff(staff.id)\n+  // 선택 가능한 코치 목록 필터링 - useMemo로 최적화\n+  const selectableStaff = useMemo(() => \n+    staffList.filter(staff => \n+      staff.role === '코치' && canEditStaff(staff.id)\n+    ), [staffList, canEditStaff]\n   );\n \n   useEffect(() => {\n     if (isOpen) {\n@@ -329,13 +337,16 @@\n         });\n       });\n       \n       setHolidaySettings(newHolidaySettings);\n+    } else if (isOpen) {\n+      // 모달이 열렸을 때 기존 설정이 없으면 초기화\n+      setHolidaySettings(new Map());\n     }\n   }, [isOpen, existingHolidays, selectedStaffIds]);\n \n-  // 달력 데이터 생성\n-  const generateCalendarDays = () => {\n+  // 달력 데이터 생성 - useMemo로 성능 최적화 및 상태 변경 감지\n+  const calendarDays = useMemo(() => {\n     const year = currentMonth.getFullYear();\n     const month = currentMonth.getMonth();\n     const firstDay = new Date(year, month, 1);\n     const startDate = new Date(firstDay);\n@@ -391,9 +402,9 @@\n       });\n     }\n     \n     return days;\n-  };\n+  }, [currentMonth, selectedStaffIds, staffList, holidaySettings]);\n \n   const handleStaffToggle = (staffId: string) => {\n     setSelectedStaffIds(prev => \n       prev.includes(staffId)\n@@ -404,12 +415,23 @@\n \n   const handleDateClick = (dateKey: string, isSelectable: boolean, isWeekend: boolean) => {\n     if (!isSelectable) return;\n     \n+    console.log('Date clicked:', { dateKey, isSelectable, isWeekend });\n+    \n     setHolidaySettings(prev => {\n       const newMap = new Map(prev);\n       const currentValue = newMap.has(dateKey) ? newMap.get(dateKey)! : isWeekend;\n-      newMap.set(dateKey, !currentValue);\n+      const newValue = !currentValue;\n+      \n+      console.log('Holiday setting change:', { \n+        dateKey, \n+        currentValue, \n+        newValue,\n+        isWeekend \n+      });\n+      \n+      newMap.set(dateKey, newValue);\n       return newMap;\n     });\n   };\n \n@@ -460,9 +482,8 @@\n   };\n \n   if (!isOpen) return null;\n \n-  const calendarDays = generateCalendarDays();\n   const weekDays = ['일', '월', '화', '수', '목', '금', '토'];\n \n   return (\n     <ModalOverlay onClick={onClose}>\n@@ -534,9 +555,9 @@\n                 <MonthNavButton onClick={handleNextMonth} style={{ marginLeft: '8px' }}>다음</MonthNavButton>\n               </div>\n             </CalendarHeader>\n             <div style={{ fontSize: '14px', marginBottom: '12px', color: AppColors.onSurface + '80' }}>\n-              * 클릭하여 휴일/근무일 전환 (빨간색: 휴일, 노란색: 주말 기본휴일, 흰색: 근무일)\n+              * 클릭하여 휴일/근무일 전환 (빨간색: 휴일, 연한파란색: 근무일로 변경된 주말, 흰색: 평일 근무일)\n               <br />* 오늘 이전 날짜 및 계약기간 외 날짜는 설정 불가\n               <br />* 주말은 기본 휴일이지만 클릭으로 근무일 변경 가능\n             </div>\n             <CalendarGrid>\n@@ -545,13 +566,13 @@\n               ))}\n               {calendarDays.map((day, index) => (\n                 <CalendarDay\n                   key={index}\n-                  isSelectable={day.isSelectable}\n-                  isWeekend={day.isWeekend}\n-                  isHoliday={day.isHoliday}\n-                  isToday={day.isToday}\n-                  isPastDate={day.isPastDate}\n+                  $isSelectable={day.isSelectable}\n+                  $isWeekend={day.isWeekend}\n+                  $isHoliday={day.isHoliday}\n+                  $isToday={day.isToday}\n+                  $isPastDate={day.isPastDate}\n                   onClick={() => handleDateClick(day.dateKey, day.isSelectable, day.isWeekend)}\n                 >\n                   {day.isCurrentMonth ? day.day : ''}\n                 </CalendarDay>\n@@ -560,12 +581,12 @@\n           </CalendarSection>\n         </ModalBody>\n \n         <ModalFooter>\n-          <Button variant=\"secondary\" onClick={onClose} disabled={isLoading}>\n+          <Button $variant=\"secondary\" onClick={onClose} $disabled={isLoading}>\n             취소\n           </Button>\n-          <Button variant=\"primary\" onClick={handleSave} disabled={isLoading || selectedStaffIds.length === 0}>\n+          <Button $variant=\"primary\" onClick={handleSave} $disabled={isLoading || selectedStaffIds.length === 0}>\n             {isLoading ? '저장 중...' : '저장'}\n           </Button>\n         </ModalFooter>\n       </ModalContainer>\n"
                },
                {
                    "date": 1760159945616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -441,27 +441,21 @@\n     \n     try {\n       const settings: Omit<HolidaySettings, 'id' | 'createdAt' | 'updatedAt'>[] = [];\n       \n-      // 선택된 날짜들의 설정만 저장 (명시적으로 변경된 날짜들)\n+      // 모든 명시적으로 설정된 날짜들을 저장\n       holidaySettings.forEach((isHoliday, dateKey) => {\n-        const date = new Date(dateKey);\n-        const isWeekend = date.getDay() === 0 || date.getDay() === 6;\n-        \n-        // 주말 기본값과 다른 경우나, 평일에 휴일로 설정된 경우만 저장\n-        if ((isWeekend && !isHoliday) || (!isWeekend && isHoliday)) {\n-          selectedStaffIds.forEach(staffId => {\n-            settings.push({\n-              staffId,\n-              date: dateKey,\n-              isHoliday,\n-              workingHours: isHoliday ? undefined : {\n-                start: defaultStartTime,\n-                end: defaultEndTime\n-              }\n-            });\n+        selectedStaffIds.forEach(staffId => {\n+          settings.push({\n+            staffId,\n+            date: dateKey,\n+            isHoliday,\n+            workingHours: isHoliday ? undefined : {\n+              start: defaultStartTime,\n+              end: defaultEndTime\n+            }\n           });\n-        }\n+        });\n       });\n       \n       await onSave(settings);\n       onClose();\n"
                },
                {
                    "date": 1760160349152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,12 +159,15 @@\n   $isWeekend: boolean; \n   $isHoliday: boolean;\n   $isToday: boolean;\n   $isPastDate?: boolean;\n+  $hasReservation?: boolean;\n }>`\n   background-color: ${props => {\n     if (props.$isPastDate) return AppColors.onSurface + '05'; // 과거 날짜는 매우 연한 회색\n     if (!props.$isSelectable) return AppColors.onSurface + '10';\n+    // 예약이 있는 경우 초록색 배경 (휴일 설정 불가)\n+    if (props.$hasReservation) return '#10b98125'; // 초록색\n     // 휴일인 경우 빨간색 배경\n     if (props.$isHoliday) return AppColors.error + '25';\n     // 주말이지만 휴일이 아닌 경우 (근무일로 변경된 주말) 연한 파란색\n     if (props.$isWeekend && !props.$isHoliday) return AppColors.primary + '15';\n@@ -173,18 +176,18 @@\n   }};\n   padding: 8px 4px;\n   min-height: 40px;\n   text-align: center;\n-  cursor: ${props => props.$isSelectable ? 'pointer' : 'not-allowed'};\n+  cursor: ${props => (props.$isSelectable && !props.$hasReservation) ? 'pointer' : 'not-allowed'};\n   border: ${props => props.$isToday ? `2px solid ${AppColors.primary}` : 'none'};\n   transition: background-color 0.2s ease;\n   font-size: ${AppTextStyles.label2.fontSize};\n   color: ${props => props.$isPastDate ? AppColors.onSurface + '40' : AppColors.onSurface};\n   position: relative;\n   \n   &:hover {\n     background-color: ${props => {\n-      if (!props.$isSelectable) return undefined;\n+      if (!props.$isSelectable || props.$hasReservation) return undefined;\n       return props.$isHoliday ? AppColors.error + '40' : AppColors.primary + '30';\n     }};\n   }\n   \n@@ -284,9 +287,10 @@\n   staffId,\n   staffList,\n   currentUser,\n   onSave,\n-  existingHolidays = [] // 기존 휴일 설정 데이터\n+  existingHolidays = [], // 기존 휴일 설정 데이터\n+  existingEvents = [] // 기존 예약 이벤트 데이터\n }) => {\n   const [selectedStaffIds, setSelectedStaffIds] = useState<string[]>([]);\n   const [currentMonth, setCurrentMonth] = useState(new Date());\n   const [holidaySettings, setHolidaySettings] = useState<Map<string, boolean>>(new Map());\n@@ -294,8 +298,21 @@\n   const [defaultEndTime, setDefaultEndTime] = useState(21);\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n+  // 특정 날짜에 예약이 있는지 확인하는 함수\n+  const hasReservationOnDate = useCallback((dateKey: string, staffId: string): boolean => {\n+    return existingEvents.some(event => {\n+      // '휴일' 이벤트는 제외\n+      if (event.title === '휴일') return false;\n+      \n+      const eventDate = new Date(event.startTime);\n+      const eventDateKey = eventDate.toISOString().split('T')[0];\n+      \n+      return event.staffId === staffId && eventDateKey === dateKey;\n+    });\n+  }, [existingEvents]);\n+\n   // 권한 체크 - useCallback으로 최적화\n   const canEditStaff = useCallback((targetStaffId: string): boolean => {\n     if (!currentUser) return false;\n     if (currentUser.role === 'master') return true;\n@@ -387,24 +404,30 @@\n       // 휴일 설정: 명시적으로 설정된 값이 있으면 사용, 없으면 주말 기본값\n       const isHoliday = holidaySettings.has(dateKey) \n         ? holidaySettings.get(dateKey)! \n         : isWeekend;\n+      \n+      // 선택된 코치들 중 하나라도 예약이 있는지 확인\n+      const hasReservation = selectedStaffIds.some(staffId => \n+        hasReservationOnDate(dateKey, staffId)\n+      );\n \n       days.push({\n         date,\n         day: date.getDate(),\n         isCurrentMonth,\n         isWeekend,\n         isToday,\n         isPastDate,\n-        isSelectable,\n+        isSelectable: isSelectable && !hasReservation, // 예약이 있으면 선택 불가\n         isHoliday,\n-        dateKey\n+        dateKey,\n+        hasReservation\n       });\n     }\n     \n     return days;\n-  }, [currentMonth, selectedStaffIds, staffList, holidaySettings]);\n+  }, [currentMonth, selectedStaffIds, staffList, holidaySettings, hasReservationOnDate]);\n \n   const handleStaffToggle = (staffId: string) => {\n     setSelectedStaffIds(prev => \n       prev.includes(staffId)\n@@ -412,12 +435,12 @@\n         : [...prev, staffId]\n     );\n   };\n \n-  const handleDateClick = (dateKey: string, isSelectable: boolean, isWeekend: boolean) => {\n-    if (!isSelectable) return;\n+  const handleDateClick = (dateKey: string, isSelectable: boolean, isWeekend: boolean, hasReservation: boolean) => {\n+    if (!isSelectable || hasReservation) return;\n     \n-    console.log('Date clicked:', { dateKey, isSelectable, isWeekend });\n+    console.log('Date clicked:', { dateKey, isSelectable, isWeekend, hasReservation });\n     \n     setHolidaySettings(prev => {\n       const newMap = new Map(prev);\n       const currentValue = newMap.has(dateKey) ? newMap.get(dateKey)! : isWeekend;\n@@ -550,8 +573,9 @@\n               </div>\n             </CalendarHeader>\n             <div style={{ fontSize: '14px', marginBottom: '12px', color: AppColors.onSurface + '80' }}>\n               * 클릭하여 휴일/근무일 전환 (빨간색: 휴일, 연한파란색: 근무일로 변경된 주말, 흰색: 평일 근무일)\n+              <br />* 초록색: 예약이 있는 날짜 (휴일 설정 불가)\n               <br />* 오늘 이전 날짜 및 계약기간 외 날짜는 설정 불가\n               <br />* 주말은 기본 휴일이지만 클릭으로 근무일 변경 가능\n             </div>\n             <CalendarGrid>\n@@ -565,9 +589,10 @@\n                   $isWeekend={day.isWeekend}\n                   $isHoliday={day.isHoliday}\n                   $isToday={day.isToday}\n                   $isPastDate={day.isPastDate}\n-                  onClick={() => handleDateClick(day.dateKey, day.isSelectable, day.isWeekend)}\n+                  $hasReservation={day.hasReservation}\n+                  onClick={() => handleDateClick(day.dateKey, day.isSelectable, day.isWeekend, day.hasReservation)}\n                 >\n                   {day.isCurrentMonth ? day.day : ''}\n                 </CalendarDay>\n               ))}\n"
                },
                {
                    "date": 1760502927468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,10 +293,10 @@\n }) => {\n   const [selectedStaffIds, setSelectedStaffIds] = useState<string[]>([]);\n   const [currentMonth, setCurrentMonth] = useState(new Date());\n   const [holidaySettings, setHolidaySettings] = useState<Map<string, boolean>>(new Map());\n-  const [defaultStartTime, setDefaultStartTime] = useState(9);\n-  const [defaultEndTime, setDefaultEndTime] = useState(21);\n+  const [defaultStartTime, setDefaultStartTime] = useState(10);\n+  const [defaultEndTime, setDefaultEndTime] = useState(20);\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n   // 특정 날짜에 예약이 있는지 확인하는 함수\n"
                }
            ],
            "date": 1760157680267,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../styles/colors';\nimport { AppTextStyles } from '../../styles/textStyles';\nimport { HolidayModalProps, HolidaySettings } from './types';\n\nconst ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n`;\n\nconst ModalContainer = styled.div`\n  background-color: ${AppColors.surface};\n  border-radius: 12px;\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  width: 90%;\n  max-width: 800px;\n  max-height: 90vh;\n  overflow-y: auto;\n`;\n\nconst ModalHeader = styled.div`\n  padding: 24px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst ModalTitle = styled.h2`\n  font-size: ${AppTextStyles.title2.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin: 0;\n`;\n\nconst CloseButton = styled.button`\n  background: none;\n  border: none;\n  font-size: 24px;\n  color: ${AppColors.onSurface}60;\n  cursor: pointer;\n  padding: 4px;\n\n  &:hover {\n    color: ${AppColors.onSurface};\n  }\n`;\n\nconst ModalBody = styled.div`\n  padding: 24px;\n`;\n\nconst StaffSelector = styled.div`\n  margin-bottom: 24px;\n  padding: 16px;\n  background-color: ${AppColors.background};\n  border-radius: 8px;\n`;\n\nconst StaffSelectorTitle = styled.h3`\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin: 0 0 12px 0;\n`;\n\nconst StaffCheckbox = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 8px;\n  \n  input[type=\"checkbox\"] {\n    margin-right: 8px;\n  }\n  \n  label {\n    font-size: ${AppTextStyles.body2.fontSize};\n    color: ${AppColors.onSurface};\n    cursor: pointer;\n  }\n`;\n\nconst CalendarSection = styled.div`\n  margin-bottom: 24px;\n`;\n\nconst CalendarHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n`;\n\nconst CalendarTitle = styled.h3`\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin: 0;\n`;\n\nconst MonthNavButton = styled.button`\n  background: none;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 4px;\n  padding: 8px 12px;\n  cursor: pointer;\n  color: ${AppColors.onSurface};\n  \n  &:hover {\n    background-color: ${AppColors.background};\n  }\n`;\n\nconst CalendarGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 1px;\n  background-color: ${AppColors.borderLight};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  overflow: hidden;\n`;\n\nconst CalendarGridHeader = styled.div`\n  background-color: ${AppColors.primary}10;\n  padding: 12px 8px;\n  text-align: center;\n  font-size: ${AppTextStyles.label1.fontSize};\n  font-weight: 600;\n  color: ${AppColors.primary};\n`;\n\nconst CalendarDay = styled.div<{ \n  isSelectable: boolean; \n  isWeekend: boolean; \n  isHoliday: boolean;\n  isToday: boolean;\n}>`\n  background-color: ${props => {\n    if (!props.isSelectable) return AppColors.onSurface + '10';\n    if (props.isHoliday) return AppColors.error + '20';\n    if (props.isWeekend) return AppColors.warning + '10';\n    return AppColors.surface;\n  }};\n  padding: 8px 4px;\n  min-height: 40px;\n  text-align: center;\n  cursor: ${props => props.isSelectable ? 'pointer' : 'not-allowed'};\n  border: ${props => props.isToday ? `2px solid ${AppColors.primary}` : 'none'};\n  transition: background-color 0.2s ease;\n  font-size: ${AppTextStyles.label2.fontSize};\n  \n  &:hover {\n    background-color: ${props => props.isSelectable ? AppColors.primary + '20' : undefined};\n  }\n`;\n\nconst TimeSettingsSection = styled.div`\n  margin-bottom: 24px;\n`;\n\nconst TimeSettingsTitle = styled.h3`\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin: 0 0 16px 0;\n`;\n\nconst TimeInputContainer = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  margin-bottom: 12px;\n`;\n\nconst TimeInput = styled.input`\n  padding: 8px 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 4px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  \n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n  }\n`;\n\nconst ModalFooter = styled.div`\n  padding: 24px;\n  border-top: 1px solid ${AppColors.borderLight};\n  display: flex;\n  justify-content: flex-end;\n  gap: 12px;\n`;\n\nconst Button = styled.button<{ variant: 'primary' | 'secondary' }>`\n  padding: 12px 24px;\n  border-radius: 6px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  \n  ${props => props.variant === 'primary' ? `\n    background-color: ${AppColors.primary};\n    color: ${AppColors.onPrimary};\n    border: none;\n    \n    &:hover {\n      background-color: ${AppColors.primary}CC;\n    }\n  ` : `\n    background-color: ${AppColors.surface};\n    color: ${AppColors.onSurface};\n    border: 1px solid ${AppColors.borderLight};\n    \n    &:hover {\n      background-color: ${AppColors.background};\n    }\n  `}\n`;\n\nconst HolidayModal: React.FC<HolidayModalProps> = ({\n  isOpen,\n  onClose,\n  staffId,\n  staffList,\n  currentUser,\n  onSave\n}) => {\n  const [selectedStaffIds, setSelectedStaffIds] = useState<string[]>([]);\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [holidaySettings, setHolidaySettings] = useState<Map<string, boolean>>(new Map());\n  const [defaultStartTime, setDefaultStartTime] = useState(9);\n  const [defaultEndTime, setDefaultEndTime] = useState(21);\n\n  // 권한 체크\n  const canEditStaff = (targetStaffId: string): boolean => {\n    if (!currentUser) return false;\n    if (currentUser.role === 'master') return true;\n    return currentUser.id === targetStaffId;\n  };\n\n  // 선택 가능한 코치 목록 필터링\n  const selectableStaff = staffList.filter(staff => \n    staff.role === '코치' && canEditStaff(staff.id)\n  );\n\n  useEffect(() => {\n    if (isOpen) {\n      if (staffId) {\n        // 특정 코치 선택\n        setSelectedStaffIds([staffId]);\n      } else {\n        // 전체 코치 또는 권한에 따른 기본 선택\n        const defaultSelected = currentUser?.role === 'master' \n          ? selectableStaff.map(s => s.id)\n          : selectableStaff.filter(s => s.id === currentUser?.id).map(s => s.id);\n        setSelectedStaffIds(defaultSelected);\n      }\n    }\n  }, [isOpen, staffId, currentUser, selectableStaff]);\n\n  // 달력 데이터 생성\n  const generateCalendarDays = () => {\n    const year = currentMonth.getFullYear();\n    const month = currentMonth.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const startDate = new Date(firstDay);\n    startDate.setDate(firstDay.getDate() - firstDay.getDay());\n\n    const days = [];\n    const today = new Date();\n    \n    for (let i = 0; i < 42; i++) {\n      const date = new Date(startDate);\n      date.setDate(startDate.getDate() + i);\n      \n      const isCurrentMonth = date.getMonth() === month;\n      const isWeekend = date.getDay() === 0 || date.getDay() === 6;\n      const isToday = date.toDateString() === today.toDateString();\n      \n      // 계약기간 체크 (선택된 코치들의 계약기간이 모두 포함되는 날짜만 선택 가능)\n      const isSelectable = isCurrentMonth && selectedStaffIds.every(staffId => {\n        const staff = staffList.find(s => s.id === staffId);\n        if (!staff?.contractStartDate || !staff?.contractEndDate) return true;\n        return date >= staff.contractStartDate && date <= staff.contractEndDate;\n      });\n      \n      const dateKey = date.toISOString().split('T')[0];\n      const isHoliday = holidaySettings.get(dateKey) ?? isWeekend;\n\n      days.push({\n        date,\n        day: date.getDate(),\n        isCurrentMonth,\n        isWeekend,\n        isToday,\n        isSelectable,\n        isHoliday,\n        dateKey\n      });\n    }\n    \n    return days;\n  };\n\n  const handleStaffToggle = (staffId: string) => {\n    setSelectedStaffIds(prev => \n      prev.includes(staffId)\n        ? prev.filter(id => id !== staffId)\n        : [...prev, staffId]\n    );\n  };\n\n  const handleDateClick = (dateKey: string, isSelectable: boolean) => {\n    if (!isSelectable) return;\n    \n    setHolidaySettings(prev => {\n      const newMap = new Map(prev);\n      const currentValue = newMap.get(dateKey);\n      newMap.set(dateKey, !currentValue);\n      return newMap;\n    });\n  };\n\n  const handleSave = () => {\n    const settings: HolidaySettings[] = [];\n    const now = new Date();\n    \n    holidaySettings.forEach((isHoliday, dateKey) => {\n      selectedStaffIds.forEach(staffId => {\n        settings.push({\n          id: `${staffId}-${dateKey}`,\n          staffId,\n          date: dateKey,\n          isHoliday,\n          workingHours: isHoliday ? undefined : {\n            start: defaultStartTime,\n            end: defaultEndTime\n          },\n          createdAt: now,\n          updatedAt: now\n        });\n      });\n    });\n    \n    onSave(settings);\n    onClose();\n  };\n\n  const handlePrevMonth = () => {\n    setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() - 1));\n  };\n\n  const handleNextMonth = () => {\n    setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() + 1));\n  };\n\n  if (!isOpen) return null;\n\n  const calendarDays = generateCalendarDays();\n  const weekDays = ['일', '월', '화', '수', '목', '금', '토'];\n\n  return (\n    <ModalOverlay onClick={onClose}>\n      <ModalContainer onClick={e => e.stopPropagation()}>\n        <ModalHeader>\n          <ModalTitle>\n            {staffId ? `${staffList.find(s => s.id === staffId)?.name} 코치 휴일설정` : '코치 휴일설정'}\n          </ModalTitle>\n          <CloseButton onClick={onClose}>×</CloseButton>\n        </ModalHeader>\n        \n        <ModalBody>\n          {/* 코치 선택 (master 권한인 경우만) */}\n          {currentUser?.role === 'master' && !staffId && (\n            <StaffSelector>\n              <StaffSelectorTitle>대상 코치 선택</StaffSelectorTitle>\n              {selectableStaff.map(staff => (\n                <StaffCheckbox key={staff.id}>\n                  <input\n                    type=\"checkbox\"\n                    id={`staff-${staff.id}`}\n                    checked={selectedStaffIds.includes(staff.id)}\n                    onChange={() => handleStaffToggle(staff.id)}\n                  />\n                  <label htmlFor={`staff-${staff.id}`}>{staff.name}</label>\n                </StaffCheckbox>\n              ))}\n            </StaffSelector>\n          )}\n\n          {/* 기본 근무시간 설정 */}\n          <TimeSettingsSection>\n            <TimeSettingsTitle>기본 근무시간 설정</TimeSettingsTitle>\n            <TimeInputContainer>\n              <span>시작 시간:</span>\n              <TimeInput\n                type=\"number\"\n                min=\"0\"\n                max=\"23\"\n                value={defaultStartTime}\n                onChange={(e) => setDefaultStartTime(Number(e.target.value))}\n              />\n              <span>시</span>\n              <span>종료 시간:</span>\n              <TimeInput\n                type=\"number\"\n                min=\"1\"\n                max=\"24\"\n                value={defaultEndTime}\n                onChange={(e) => setDefaultEndTime(Number(e.target.value))}\n              />\n              <span>시</span>\n            </TimeInputContainer>\n          </TimeSettingsSection>\n\n          {/* 달력 */}\n          <CalendarSection>\n            <CalendarHeader>\n              <CalendarTitle>\n                {currentMonth.getFullYear()}년 {currentMonth.getMonth() + 1}월\n              </CalendarTitle>\n              <div>\n                <MonthNavButton onClick={handlePrevMonth}>이전</MonthNavButton>\n                <MonthNavButton onClick={handleNextMonth} style={{ marginLeft: '8px' }}>다음</MonthNavButton>\n              </div>\n            </CalendarHeader>\n            <div style={{ fontSize: '14px', marginBottom: '12px', color: AppColors.onSurface + '80' }}>\n              * 클릭하여 휴일/근무일 전환 (빨간색: 휴일, 노란색: 주말, 흰색: 근무일)\n            </div>\n            <CalendarGrid>\n              {weekDays.map(day => (\n                <CalendarGridHeader key={day}>{day}</CalendarGridHeader>\n              ))}\n              {calendarDays.map((day, index) => (\n                <CalendarDay\n                  key={index}\n                  isSelectable={day.isSelectable}\n                  isWeekend={day.isWeekend}\n                  isHoliday={day.isHoliday}\n                  isToday={day.isToday}\n                  onClick={() => handleDateClick(day.dateKey, day.isSelectable)}\n                >\n                  {day.isCurrentMonth ? day.day : ''}\n                </CalendarDay>\n              ))}\n            </CalendarGrid>\n          </CalendarSection>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button variant=\"secondary\" onClick={onClose}>\n            취소\n          </Button>\n          <Button variant=\"primary\" onClick={handleSave}>\n            저장\n          </Button>\n        </ModalFooter>\n      </ModalContainer>\n    </ModalOverlay>\n  );\n};\n\nexport default HolidayModal;\n"
        }
    ]
}