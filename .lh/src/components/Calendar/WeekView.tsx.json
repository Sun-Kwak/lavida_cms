{
    "sourceFile": "src/components/Calendar/WeekView.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1760154018684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760154849525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,19 @@\n const ScrollableContent = styled.div`\n   flex: 1;\n   overflow-y: auto;\n   max-height: 600px;\n+  \n+  /* 스크롤바 숨김 - Webkit 브라우저 (Chrome, Safari, Edge) */\n+  &::-webkit-scrollbar {\n+    display: none;\n+  }\n+  \n+  /* 스크롤바 숨김 - Firefox */\n+  scrollbar-width: none;\n+  \n+  /* 스크롤바 숨김 - IE/Edge Legacy */\n+  -ms-overflow-style: none;\n `;\n \n const TimeGrid = styled.div`\n   display: flex;\n"
                },
                {
                    "date": 1760155134675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,18 +27,22 @@\n const Header = styled.div`\n   display: flex;\n   background-color: ${AppColors.background};\n   border-bottom: 1px solid ${AppColors.borderLight};\n+  width: 100%;\n `;\n \n const TimeHeader = styled.div`\n   width: 80px;\n+  min-width: 80px;\n+  max-width: 80px;\n   padding: 12px 8px;\n   text-align: center;\n   font-size: ${AppTextStyles.body2.fontSize};\n   font-weight: 600;\n   color: ${AppColors.onSurface};\n   border-right: 1px solid ${AppColors.borderLight};\n+  box-sizing: border-box;\n `;\n \n const DayHeader = styled.div<{ isToday: boolean; isWeekend: boolean }>`\n   flex: 1;\n@@ -87,13 +91,17 @@\n `;\n \n const TimeGrid = styled.div`\n   display: flex;\n+  width: 100%;\n `;\n \n const TimeColumn = styled.div`\n   width: 80px;\n+  min-width: 80px;\n+  max-width: 80px;\n   border-right: 1px solid ${AppColors.borderLight};\n+  box-sizing: border-box;\n `;\n \n const TimeSlot = styled.div`\n   height: 60px;\n@@ -103,8 +111,10 @@\n   color: ${AppColors.onSurface}60;\n   display: flex;\n   align-items: flex-start;\n   justify-content: center;\n+  box-sizing: border-box;\n+  width: 100%;\n `;\n \n const DayGridColumn = styled.div<{ isToday: boolean; isWeekend: boolean }>`\n   flex: 1;\n@@ -114,8 +124,9 @@\n     props.isToday ? AppColors.primary + '05' : \n     props.isWeekend ? AppColors.surface + 'F0' : \n     'transparent'\n   };\n+  overflow: hidden;\n \n   &:last-child {\n     border-right: none;\n   }\n@@ -138,8 +149,9 @@\n   left: 0;\n   right: 0;\n   height: 100%;\n   pointer-events: none;\n+  overflow: hidden;\n `;\n \n const EventBlock = styled.div<{ \n   color: string; \n@@ -162,8 +174,12 @@\n   cursor: pointer;\n   z-index: 1;\n   pointer-events: auto;\n   opacity: ${props => props.opacity || 1};\n+  box-sizing: border-box;\n+  max-width: calc(100% - 2px);\n+  word-wrap: break-word;\n+  text-overflow: ellipsis;\n \n   &:hover {\n     background-color: ${props => props.color}30;\n     box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n@@ -176,8 +192,11 @@\n   font-weight: 500;\n   color: ${AppColors.onSurface};\n   line-height: 1.1;\n   margin-bottom: 1px;\n+  overflow: hidden;\n+  text-overflow: ellipsis;\n+  white-space: nowrap;\n `;\n \n const EventTime = styled.div`\n   font-size: 10px;\n@@ -279,11 +298,17 @@\n \n     const totalOverlapping = overlapping.length + 1;\n     const eventIndex = overlapping.findIndex(e => e.startTime <= targetEvent.startTime) + 1;\n \n+    // 컬럼을 벗어나지 않도록 약간의 여백 추가\n+    const margin = 1; // 1% 여백\n+    const availableWidth = 100 - (margin * 2);\n+    const eventWidth = availableWidth / totalOverlapping;\n+    const eventLeft = margin + (eventIndex * eventWidth);\n+\n     return {\n-      left: (eventIndex / totalOverlapping) * 100,\n-      width: 100 / totalOverlapping,\n+      left: Math.min(eventLeft, 100 - eventWidth),\n+      width: Math.min(eventWidth, availableWidth),\n       opacity: totalOverlapping > 1 ? 0.9 : 1\n     };\n   };\n \n"
                },
                {
                    "date": 1760156648998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import styled from 'styled-components';\n import { AppColors } from '../../styles/colors';\n import { AppTextStyles } from '../../styles/textStyles';\n import { ScheduleEvent, StaffInfo } from './types';\n-import { getWeekDates, formatTime, isEventOnDate } from './utils';\n+import { getWeekDates, isEventOnDate } from './utils';\n \n interface WeekViewProps {\n   currentDate: Date;\n   events: ScheduleEvent[];\n@@ -165,9 +165,9 @@\n   left: ${props => props.left}%;\n   width: ${props => props.width}%;\n   top: ${props => props.top}px;\n   height: ${props => props.height}px;\n-  background-color: ${props => props.color}20;\n+  background-color: ${props => props.color}30;\n   border: 1px solid ${props => props.color};\n   border-radius: 3px;\n   padding: 2px 4px;\n   overflow: hidden;\n@@ -178,11 +178,14 @@\n   box-sizing: border-box;\n   max-width: calc(100% - 2px);\n   word-wrap: break-word;\n   text-overflow: ellipsis;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n \n   &:hover {\n-    background-color: ${props => props.color}30;\n+    background-color: ${props => props.color}50;\n     box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n     z-index: 2;\n   }\n `;\n@@ -191,27 +194,15 @@\n   font-size: ${AppTextStyles.label3.fontSize};\n   font-weight: 500;\n   color: ${AppColors.onSurface};\n   line-height: 1.1;\n-  margin-bottom: 1px;\n   overflow: hidden;\n   text-overflow: ellipsis;\n   white-space: nowrap;\n+  text-align: center;\n+  width: 100%;\n `;\n \n-const EventTime = styled.div`\n-  font-size: 10px;\n-  color: ${AppColors.onSurface}70;\n-  line-height: 1;\n-`;\n-\n-const EventStaff = styled.div`\n-  font-size: 10px;\n-  color: ${AppColors.primary};\n-  line-height: 1;\n-  margin-top: 1px;\n-`;\n-\n const StaffLegend = styled.div`\n   padding: 8px 12px;\n   background-color: ${AppColors.background};\n   border-top: 1px solid ${AppColors.borderLight};\n@@ -290,26 +281,39 @@\n   };\n \n   // 같은 시간대 이벤트들의 위치 조정\n   const getEventLayout = (dayEvents: ScheduleEvent[], targetEvent: ScheduleEvent) => {\n+    // 같은 시간대에 겹치는 이벤트들 찾기\n     const overlapping = dayEvents.filter(e => {\n       if (e.id === targetEvent.id) return false;\n       return (targetEvent.startTime < e.endTime && targetEvent.endTime > e.startTime);\n     });\n \n-    const totalOverlapping = overlapping.length + 1;\n-    const eventIndex = overlapping.findIndex(e => e.startTime <= targetEvent.startTime) + 1;\n+    // 겹치는 이벤트가 없으면 전체 너비 사용\n+    if (overlapping.length === 0) {\n+      return {\n+        left: 0,\n+        width: 100,\n+        opacity: 1\n+      };\n+    }\n \n-    // 컬럼을 벗어나지 않도록 약간의 여백 추가\n-    const margin = 1; // 1% 여백\n-    const availableWidth = 100 - (margin * 2);\n-    const eventWidth = availableWidth / totalOverlapping;\n-    const eventLeft = margin + (eventIndex * eventWidth);\n+    // 모든 겹치는 이벤트들을 ID 순으로 정렬 (일관된 순서 보장)\n+    const allOverlapping = [...overlapping, targetEvent].sort((a, b) => \n+      a.id.localeCompare(b.id)\n+    );\n \n+    const totalCount = allOverlapping.length;\n+    const eventIndex = allOverlapping.findIndex(e => e.id === targetEvent.id);\n+\n+    // 각 이벤트가 동일한 너비를 가지도록 계산\n+    const eventWidth = Math.floor(100 / totalCount);\n+    const eventLeft = eventIndex * eventWidth;\n+\n     return {\n-      left: Math.min(eventLeft, 100 - eventWidth),\n-      width: Math.min(eventWidth, availableWidth),\n-      opacity: totalOverlapping > 1 ? 0.9 : 1\n+      left: eventLeft,\n+      width: eventWidth,\n+      opacity: 0.95\n     };\n   };\n \n   const handleSlotClick = (dayDate: Date, hour: number) => {\n@@ -404,13 +408,9 @@\n                         width={layout.width}\n                         opacity={layout.opacity}\n                         onClick={() => onEventClick?.(event)}\n                       >\n-                        <EventTitle>{event.title}</EventTitle>\n-                        <EventTime>\n-                          {formatTime(event.startTime)}-{formatTime(event.endTime)}\n-                        </EventTime>\n-                        <EventStaff>{event.staffName}</EventStaff>\n+                        <EventTitle>{event.memberName || '예약자'}</EventTitle>\n                       </EventBlock>\n                     );\n                   })}\n                 </StaffEventsContainer>\n"
                },
                {
                    "date": 1760160406112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -408,9 +408,11 @@\n                         width={layout.width}\n                         opacity={layout.opacity}\n                         onClick={() => onEventClick?.(event)}\n                       >\n-                        <EventTitle>{event.memberName || '예약자'}</EventTitle>\n+                        <EventTitle>\n+                          {event.title === '휴일' ? '휴일' : (event.memberName || '예약자')}\n+                        </EventTitle>\n                       </EventBlock>\n                     );\n                   })}\n                 </StaffEventsContainer>\n"
                },
                {
                    "date": 1760160713136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,33 +43,33 @@\n   border-right: 1px solid ${AppColors.borderLight};\n   box-sizing: border-box;\n `;\n \n-const DayHeader = styled.div<{ isToday: boolean; isWeekend: boolean }>`\n+const DayHeader = styled.div<{ $isToday: boolean; $isWeekend: boolean }>`\n   flex: 1;\n   padding: 12px 8px;\n   text-align: center;\n   border-right: 1px solid ${AppColors.borderLight};\n-  background-color: ${props => props.isToday ? AppColors.primary + '10' : 'transparent'};\n+  background-color: ${props => props.$isToday ? AppColors.primary + '10' : 'transparent'};\n   \n   &:last-child {\n     border-right: none;\n   }\n `;\n \n-const DayName = styled.div<{ isWeekend: boolean }>`\n+const DayName = styled.div<{ $isWeekend: boolean }>`\n   font-size: ${AppTextStyles.label2.fontSize};\n   font-weight: 500;\n-  color: ${props => props.isWeekend ? AppColors.error : AppColors.onSurface}80;\n+  color: ${props => props.$isWeekend ? AppColors.error : AppColors.onSurface}80;\n   margin-bottom: 4px;\n `;\n \n-const DayDate = styled.div<{ isToday: boolean; isWeekend: boolean }>`\n+const DayDate = styled.div<{ $isToday: boolean; $isWeekend: boolean }>`\n   font-size: ${AppTextStyles.body1.fontSize};\n-  font-weight: ${props => props.isToday ? 600 : 500};\n+  font-weight: ${props => props.$isToday ? 600 : 500};\n   color: ${props => \n-    props.isToday ? AppColors.primary : \n-    props.isWeekend ? AppColors.error : \n+    props.$isToday ? AppColors.primary : \n+    props.$isWeekend ? AppColors.error : \n     AppColors.onSurface\n   };\n `;\n \n@@ -115,15 +115,15 @@\n   box-sizing: border-box;\n   width: 100%;\n `;\n \n-const DayGridColumn = styled.div<{ isToday: boolean; isWeekend: boolean }>`\n+const DayGridColumn = styled.div<{ $isToday: boolean; $isWeekend: boolean }>`\n   flex: 1;\n   border-right: 1px solid ${AppColors.borderLight};\n   position: relative;\n   background-color: ${props => \n-    props.isToday ? AppColors.primary + '05' : \n-    props.isWeekend ? AppColors.surface + 'F0' : \n+    props.$isToday ? AppColors.primary + '05' : \n+    props.$isWeekend ? AppColors.surface + 'F0' : \n     'transparent'\n   };\n   overflow: hidden;\n \n@@ -153,29 +153,29 @@\n   overflow: hidden;\n `;\n \n const EventBlock = styled.div<{ \n-  color: string; \n-  top: number; \n-  height: number; \n-  left: number; \n-  width: number;\n-  opacity?: number;\n+  $color: string; \n+  $top: number; \n+  $height: number; \n+  $left: number; \n+  $width: number;\n+  $opacity?: number;\n }>`\n   position: absolute;\n-  left: ${props => props.left}%;\n-  width: ${props => props.width}%;\n-  top: ${props => props.top}px;\n-  height: ${props => props.height}px;\n-  background-color: ${props => props.color}30;\n-  border: 1px solid ${props => props.color};\n+  left: ${props => props.$left}%;\n+  width: ${props => props.$width}%;\n+  top: ${props => props.$top}px;\n+  height: ${props => props.$height}px;\n+  background-color: ${props => props.$color}30;\n+  border: 1px solid ${props => props.$color};\n   border-radius: 3px;\n   padding: 2px 4px;\n   overflow: hidden;\n   cursor: pointer;\n   z-index: 1;\n   pointer-events: auto;\n-  opacity: ${props => props.opacity || 1};\n+  opacity: ${props => props.$opacity || 1};\n   box-sizing: border-box;\n   max-width: calc(100% - 2px);\n   word-wrap: break-word;\n   text-overflow: ellipsis;\n@@ -183,9 +183,9 @@\n   align-items: center;\n   justify-content: center;\n \n   &:hover {\n-    background-color: ${props => props.color}50;\n+    background-color: ${props => props.$color}50;\n     box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n     z-index: 2;\n   }\n `;\n@@ -217,13 +217,13 @@\n   align-items: center;\n   gap: 6px;\n `;\n \n-const StaffColorDot = styled.div<{ color: string }>`\n+const StaffColorDot = styled.div<{ $color: string }>`\n   width: 8px;\n   height: 8px;\n   border-radius: 50%;\n-  background-color: ${props => props.color};\n+  background-color: ${props => props.$color};\n `;\n \n const StaffLegendName = styled.span`\n   font-size: ${AppTextStyles.label2.fontSize};\n@@ -345,13 +345,13 @@\n         <TimeHeader>시간</TimeHeader>\n         {weekDates.map(day => (\n           <DayHeader \n             key={day.date.toISOString()} \n-            isToday={day.isToday}\n-            isWeekend={day.isWeekend}\n+            $isToday={day.isToday}\n+            $isWeekend={day.isWeekend}\n           >\n-            <DayName isWeekend={day.isWeekend}>{day.dayName}</DayName>\n-            <DayDate isToday={day.isToday} isWeekend={day.isWeekend}>\n+            <DayName $isWeekend={day.isWeekend}>{day.dayName}</DayName>\n+            <DayDate $isToday={day.isToday} $isWeekend={day.isWeekend}>\n               {day.date.getDate()}\n             </DayDate>\n           </DayHeader>\n         ))}\n@@ -378,10 +378,10 @@\n \n             return (\n               <DayGridColumn \n                 key={day.date.toISOString()}\n-                isToday={day.isToday}\n-                isWeekend={day.isWeekend}\n+                $isToday={day.isToday}\n+                $isWeekend={day.isWeekend}\n               >\n                 {timeSlots.map(hour => (\n                   <DayTimeSlot\n                     key={`${day.date.toISOString()}-${hour}`}\n@@ -400,14 +400,14 @@\n \n                     return (\n                       <EventBlock\n                         key={event.id}\n-                        color={staff?.color || AppColors.primary}\n-                        top={position.top}\n-                        height={position.height}\n-                        left={layout.left}\n-                        width={layout.width}\n-                        opacity={layout.opacity}\n+                        $color={staff?.color || AppColors.primary}\n+                        $top={position.top}\n+                        $height={position.height}\n+                        $left={layout.left}\n+                        $width={layout.width}\n+                        $opacity={layout.opacity}\n                         onClick={() => onEventClick?.(event)}\n                       >\n                         <EventTitle>\n                           {event.title === '휴일' ? '휴일' : (event.memberName || '예약자')}\n@@ -433,9 +433,9 @@\n           코치:\n         </span>\n         {filteredStaff.map(staff => (\n           <StaffLegendItem key={staff.id}>\n-            <StaffColorDot color={staff.color || AppColors.primary} />\n+            <StaffColorDot $color={staff.color || AppColors.primary} />\n             <StaffLegendName>{staff.name}</StaffLegendName>\n           </StaffLegendItem>\n         ))}\n       </StaffLegend>\n"
                },
                {
                    "date": 1761457257191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -409,9 +409,11 @@\n                         $opacity={layout.opacity}\n                         onClick={() => onEventClick?.(event)}\n                       >\n                         <EventTitle>\n-                          {event.title === '휴일' ? '휴일' : (event.memberName || '예약자')}\n+                          {event.type === 'holiday' ? '휴일' : \n+                           event.type === 'break' ? event.title :\n+                           (event.memberName || '예약자')}\n                         </EventTitle>\n                       </EventBlock>\n                     );\n                   })}\n"
                },
                {
                    "date": 1761460460516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n   staffList: StaffInfo[];\n   selectedStaffIds: string[];\n   onEventClick?: (event: ScheduleEvent) => void;\n   onEventCreate?: (startTime: Date, endTime: Date, staffId?: string) => void;\n+  allowEmptyStaff?: boolean; // 코치가 없어도 달력 표시 허용\n }\n \n const WeekContainer = styled.div`\n   display: flex;\n@@ -235,9 +236,10 @@\n   events,\n   staffList,\n   selectedStaffIds,\n   onEventClick,\n-  onEventCreate\n+  onEventCreate,\n+  allowEmptyStaff = false\n }) => {\n   const weekDates = getWeekDates(currentDate);\n   const timeSlots = Array.from({ length: 17 }, (_, i) => 6 + i); // 6시부터 22시까지\n   \n@@ -327,9 +329,9 @@\n       onEventCreate(startTime, endTime);\n     }\n   };\n \n-  if (filteredStaff.length === 0) {\n+  if (!allowEmptyStaff && filteredStaff.length === 0) {\n     return (\n       <WeekContainer>\n         <div style={{ padding: '48px', textAlign: 'center', color: AppColors.onSurface + '60' }}>\n           표시할 코치를 선택해주세요.\n@@ -370,12 +372,16 @@\n           </TimeColumn>\n \n           {/* 각 날짜별 컬럼 */}\n           {weekDates.map(day => {\n-            const dayEvents = weekEvents.filter(event => \n-              isEventOnDate(event.startTime, event.endTime, day.date) &&\n-              selectedStaffIds.includes(event.staffId)\n-            );\n+            const dayEvents = allowEmptyStaff \n+              ? weekEvents.filter(event => \n+                  isEventOnDate(event.startTime, event.endTime, day.date)\n+                )\n+              : weekEvents.filter(event => \n+                  isEventOnDate(event.startTime, event.endTime, day.date) &&\n+                  selectedStaffIds.includes(event.staffId)\n+                );\n \n             return (\n               <DayGridColumn \n                 key={day.date.toISOString()}\n"
                }
            ],
            "date": 1760154018684,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../styles/colors';\nimport { AppTextStyles } from '../../styles/textStyles';\nimport { ScheduleEvent, StaffInfo } from './types';\nimport { getWeekDates, formatTime, isEventOnDate } from './utils';\n\ninterface WeekViewProps {\n  currentDate: Date;\n  events: ScheduleEvent[];\n  staffList: StaffInfo[];\n  selectedStaffIds: string[];\n  onEventClick?: (event: ScheduleEvent) => void;\n  onEventCreate?: (startTime: Date, endTime: Date, staffId?: string) => void;\n}\n\nconst WeekContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  background-color: ${AppColors.surface};\n  overflow: hidden;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  background-color: ${AppColors.background};\n  border-bottom: 1px solid ${AppColors.borderLight};\n`;\n\nconst TimeHeader = styled.div`\n  width: 80px;\n  padding: 12px 8px;\n  text-align: center;\n  font-size: ${AppTextStyles.body2.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  border-right: 1px solid ${AppColors.borderLight};\n`;\n\nconst DayHeader = styled.div<{ isToday: boolean; isWeekend: boolean }>`\n  flex: 1;\n  padding: 12px 8px;\n  text-align: center;\n  border-right: 1px solid ${AppColors.borderLight};\n  background-color: ${props => props.isToday ? AppColors.primary + '10' : 'transparent'};\n  \n  &:last-child {\n    border-right: none;\n  }\n`;\n\nconst DayName = styled.div<{ isWeekend: boolean }>`\n  font-size: ${AppTextStyles.label2.fontSize};\n  font-weight: 500;\n  color: ${props => props.isWeekend ? AppColors.error : AppColors.onSurface}80;\n  margin-bottom: 4px;\n`;\n\nconst DayDate = styled.div<{ isToday: boolean; isWeekend: boolean }>`\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: ${props => props.isToday ? 600 : 500};\n  color: ${props => \n    props.isToday ? AppColors.primary : \n    props.isWeekend ? AppColors.error : \n    AppColors.onSurface\n  };\n`;\n\nconst ScrollableContent = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  max-height: 600px;\n`;\n\nconst TimeGrid = styled.div`\n  display: flex;\n`;\n\nconst TimeColumn = styled.div`\n  width: 80px;\n  border-right: 1px solid ${AppColors.borderLight};\n`;\n\nconst TimeSlot = styled.div`\n  height: 60px;\n  padding: 4px 8px;\n  border-bottom: 1px solid ${AppColors.borderLight}20;\n  font-size: ${AppTextStyles.label2.fontSize};\n  color: ${AppColors.onSurface}60;\n  display: flex;\n  align-items: flex-start;\n  justify-content: center;\n`;\n\nconst DayGridColumn = styled.div<{ isToday: boolean; isWeekend: boolean }>`\n  flex: 1;\n  border-right: 1px solid ${AppColors.borderLight};\n  position: relative;\n  background-color: ${props => \n    props.isToday ? AppColors.primary + '05' : \n    props.isWeekend ? AppColors.surface + 'F0' : \n    'transparent'\n  };\n\n  &:last-child {\n    border-right: none;\n  }\n`;\n\nconst DayTimeSlot = styled.div`\n  height: 60px;\n  border-bottom: 1px solid ${AppColors.borderLight}20;\n  position: relative;\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${AppColors.primary}08;\n  }\n`;\n\nconst StaffEventsContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 100%;\n  pointer-events: none;\n`;\n\nconst EventBlock = styled.div<{ \n  color: string; \n  top: number; \n  height: number; \n  left: number; \n  width: number;\n  opacity?: number;\n}>`\n  position: absolute;\n  left: ${props => props.left}%;\n  width: ${props => props.width}%;\n  top: ${props => props.top}px;\n  height: ${props => props.height}px;\n  background-color: ${props => props.color}20;\n  border: 1px solid ${props => props.color};\n  border-radius: 3px;\n  padding: 2px 4px;\n  overflow: hidden;\n  cursor: pointer;\n  z-index: 1;\n  pointer-events: auto;\n  opacity: ${props => props.opacity || 1};\n\n  &:hover {\n    background-color: ${props => props.color}30;\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n    z-index: 2;\n  }\n`;\n\nconst EventTitle = styled.div`\n  font-size: ${AppTextStyles.label3.fontSize};\n  font-weight: 500;\n  color: ${AppColors.onSurface};\n  line-height: 1.1;\n  margin-bottom: 1px;\n`;\n\nconst EventTime = styled.div`\n  font-size: 10px;\n  color: ${AppColors.onSurface}70;\n  line-height: 1;\n`;\n\nconst EventStaff = styled.div`\n  font-size: 10px;\n  color: ${AppColors.primary};\n  line-height: 1;\n  margin-top: 1px;\n`;\n\nconst StaffLegend = styled.div`\n  padding: 8px 12px;\n  background-color: ${AppColors.background};\n  border-top: 1px solid ${AppColors.borderLight};\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n  align-items: center;\n`;\n\nconst StaffLegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n`;\n\nconst StaffColorDot = styled.div<{ color: string }>`\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background-color: ${props => props.color};\n`;\n\nconst StaffLegendName = styled.span`\n  font-size: ${AppTextStyles.label2.fontSize};\n  color: ${AppColors.onSurface};\n`;\n\nconst WeekView: React.FC<WeekViewProps> = ({\n  currentDate,\n  events,\n  staffList,\n  selectedStaffIds,\n  onEventClick,\n  onEventCreate\n}) => {\n  const weekDates = getWeekDates(currentDate);\n  const timeSlots = Array.from({ length: 17 }, (_, i) => 6 + i); // 6시부터 22시까지\n  \n  // 필터링된 직원 목록 (선택된 코치만)\n  const filteredStaff = staffList.filter(staff => \n    selectedStaffIds.includes(staff.id) && staff.role === '코치'\n  );\n\n  // 해당 주의 이벤트만 필터링\n  const weekEvents = events.filter(event => \n    weekDates.some(day => isEventOnDate(event.startTime, event.endTime, day.date))\n  );\n\n  // 이벤트 위치 계산\n  const getEventPosition = (event: ScheduleEvent, dayDate: Date) => {\n    if (!isEventOnDate(event.startTime, event.endTime, dayDate)) {\n      return null;\n    }\n\n    const dayStart = new Date(dayDate);\n    dayStart.setHours(6, 0, 0, 0);\n\n    const eventStart = new Date(event.startTime);\n    const eventEnd = new Date(event.endTime);\n\n    // 시작/종료 시간이 당일 범위를 벗어나면 조정\n    if (eventStart.toDateString() !== dayDate.toDateString()) {\n      eventStart.setTime(dayStart.getTime());\n    }\n    if (eventEnd.toDateString() !== dayDate.toDateString()) {\n      eventEnd.setHours(22, 0, 0, 0);\n    }\n\n    const startMinutes = (eventStart.getTime() - dayStart.getTime()) / (1000 * 60);\n    const durationMinutes = (eventEnd.getTime() - eventStart.getTime()) / (1000 * 60);\n\n    return {\n      top: Math.max(0, (startMinutes / 60) * 60), // 1시간당 60px\n      height: Math.max(20, (durationMinutes / 60) * 60)\n    };\n  };\n\n  // 같은 시간대 이벤트들의 위치 조정\n  const getEventLayout = (dayEvents: ScheduleEvent[], targetEvent: ScheduleEvent) => {\n    const overlapping = dayEvents.filter(e => {\n      if (e.id === targetEvent.id) return false;\n      return (targetEvent.startTime < e.endTime && targetEvent.endTime > e.startTime);\n    });\n\n    const totalOverlapping = overlapping.length + 1;\n    const eventIndex = overlapping.findIndex(e => e.startTime <= targetEvent.startTime) + 1;\n\n    return {\n      left: (eventIndex / totalOverlapping) * 100,\n      width: 100 / totalOverlapping,\n      opacity: totalOverlapping > 1 ? 0.9 : 1\n    };\n  };\n\n  const handleSlotClick = (dayDate: Date, hour: number) => {\n    if (onEventCreate) {\n      const startTime = new Date(dayDate);\n      startTime.setHours(hour, 0, 0, 0);\n      \n      const endTime = new Date(startTime);\n      endTime.setHours(hour + 1); // 기본 1시간 슬롯\n      \n      onEventCreate(startTime, endTime);\n    }\n  };\n\n  if (filteredStaff.length === 0) {\n    return (\n      <WeekContainer>\n        <div style={{ padding: '48px', textAlign: 'center', color: AppColors.onSurface + '60' }}>\n          표시할 코치를 선택해주세요.\n        </div>\n      </WeekContainer>\n    );\n  }\n\n  return (\n    <WeekContainer>\n      {/* 헤더 */}\n      <Header>\n        <TimeHeader>시간</TimeHeader>\n        {weekDates.map(day => (\n          <DayHeader \n            key={day.date.toISOString()} \n            isToday={day.isToday}\n            isWeekend={day.isWeekend}\n          >\n            <DayName isWeekend={day.isWeekend}>{day.dayName}</DayName>\n            <DayDate isToday={day.isToday} isWeekend={day.isWeekend}>\n              {day.date.getDate()}\n            </DayDate>\n          </DayHeader>\n        ))}\n      </Header>\n\n      {/* 스크롤 가능한 타임 그리드 */}\n      <ScrollableContent>\n        <TimeGrid>\n          {/* 시간 컬럼 */}\n          <TimeColumn>\n            {timeSlots.map(hour => (\n              <TimeSlot key={hour}>\n                {hour}:00\n              </TimeSlot>\n            ))}\n          </TimeColumn>\n\n          {/* 각 날짜별 컬럼 */}\n          {weekDates.map(day => {\n            const dayEvents = weekEvents.filter(event => \n              isEventOnDate(event.startTime, event.endTime, day.date) &&\n              selectedStaffIds.includes(event.staffId)\n            );\n\n            return (\n              <DayGridColumn \n                key={day.date.toISOString()}\n                isToday={day.isToday}\n                isWeekend={day.isWeekend}\n              >\n                {timeSlots.map(hour => (\n                  <DayTimeSlot\n                    key={`${day.date.toISOString()}-${hour}`}\n                    onClick={() => handleSlotClick(day.date, hour)}\n                  />\n                ))}\n\n                {/* 해당 날짜의 이벤트들 */}\n                <StaffEventsContainer>\n                  {dayEvents.map(event => {\n                    const position = getEventPosition(event, day.date);\n                    if (!position) return null;\n\n                    const layout = getEventLayout(dayEvents, event);\n                    const staff = filteredStaff.find(s => s.id === event.staffId);\n\n                    return (\n                      <EventBlock\n                        key={event.id}\n                        color={staff?.color || AppColors.primary}\n                        top={position.top}\n                        height={position.height}\n                        left={layout.left}\n                        width={layout.width}\n                        opacity={layout.opacity}\n                        onClick={() => onEventClick?.(event)}\n                      >\n                        <EventTitle>{event.title}</EventTitle>\n                        <EventTime>\n                          {formatTime(event.startTime)}-{formatTime(event.endTime)}\n                        </EventTime>\n                        <EventStaff>{event.staffName}</EventStaff>\n                      </EventBlock>\n                    );\n                  })}\n                </StaffEventsContainer>\n              </DayGridColumn>\n            );\n          })}\n        </TimeGrid>\n      </ScrollableContent>\n\n      {/* 직원 범례 */}\n      <StaffLegend>\n        <span style={{ \n          fontSize: AppTextStyles.label2.fontSize, \n          fontWeight: 500, \n          color: AppColors.onSurface,\n          marginRight: '8px'\n        }}>\n          코치:\n        </span>\n        {filteredStaff.map(staff => (\n          <StaffLegendItem key={staff.id}>\n            <StaffColorDot color={staff.color || AppColors.primary} />\n            <StaffLegendName>{staff.name}</StaffLegendName>\n          </StaffLegendItem>\n        ))}\n      </StaffLegend>\n    </WeekContainer>\n  );\n};\n\nexport default WeekView;\n"
        }
    ]
}