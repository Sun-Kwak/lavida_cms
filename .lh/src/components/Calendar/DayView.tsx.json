{
    "sourceFile": "src/components/Calendar/DayView.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1760154018684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760154849526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,8 +67,19 @@\n const ScrollableContent = styled.div`\n   flex: 1;\n   overflow-y: auto;\n   max-height: 600px;\n+  \n+  /* 스크롤바 숨김 - Webkit 브라우저 (Chrome, Safari, Edge) */\n+  &::-webkit-scrollbar {\n+    display: none;\n+  }\n+  \n+  /* 스크롤바 숨김 - Firefox */\n+  scrollbar-width: none;\n+  \n+  /* 스크롤바 숨김 - IE/Edge Legacy */\n+  -ms-overflow-style: none;\n `;\n \n const TimeGrid = styled.div`\n   display: flex;\n"
                },
                {
                    "date": 1760155134677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,18 +27,22 @@\n const Header = styled.div`\n   display: flex;\n   background-color: ${AppColors.background};\n   border-bottom: 1px solid ${AppColors.borderLight};\n+  width: 100%;\n `;\n \n const TimeHeader = styled.div`\n   width: 80px;\n+  min-width: 80px;\n+  max-width: 80px;\n   padding: 12px 8px;\n   text-align: center;\n   font-size: ${AppTextStyles.body2.fontSize};\n   font-weight: 600;\n   color: ${AppColors.onSurface};\n   border-right: 1px solid ${AppColors.borderLight};\n+  box-sizing: border-box;\n `;\n \n const StaffHeader = styled.div`\n   flex: 1;\n@@ -82,13 +86,17 @@\n `;\n \n const TimeGrid = styled.div`\n   display: flex;\n+  width: 100%;\n `;\n \n const TimeColumn = styled.div`\n   width: 80px;\n+  min-width: 80px;\n+  max-width: 80px;\n   border-right: 1px solid ${AppColors.borderLight};\n+  box-sizing: border-box;\n `;\n \n const TimeSlot = styled.div`\n   height: 60px;\n@@ -98,8 +106,10 @@\n   color: ${AppColors.onSurface}60;\n   display: flex;\n   align-items: flex-start;\n   justify-content: center;\n+  box-sizing: border-box;\n+  width: 100%;\n `;\n \n const StaffColumn = styled.div`\n   flex: 1;\n"
                },
                {
                    "date": 1760160713134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,24 +132,24 @@\n     background-color: ${AppColors.primary}05;\n   }\n `;\n \n-const EventBlock = styled.div<{ color: string; top: number; height: number }>`\n+const EventBlock = styled.div<{ $color: string; $top: number; $height: number }>`\n   position: absolute;\n   left: 2px;\n   right: 2px;\n-  top: ${props => props.top}px;\n-  height: ${props => props.height}px;\n-  background-color: ${props => props.color}20;\n-  border: 1px solid ${props => props.color};\n+  top: ${props => props.$top}px;\n+  height: ${props => props.$height}px;\n+  background-color: ${props => props.$color}20;\n+  border: 1px solid ${props => props.$color};\n   border-radius: 4px;\n   padding: 4px 6px;\n   overflow: hidden;\n   cursor: pointer;\n   z-index: 1;\n \n   &:hover {\n-    background-color: ${props => props.color}30;\n+    background-color: ${props => props.$color}30;\n     box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n   }\n `;\n \n@@ -285,11 +285,11 @@\n                   const position = getEventPosition(event.startTime, event.endTime);\n                   return (\n                     <EventBlock\n                       key={event.id}\n-                      color={staff.color || AppColors.primary}\n-                      top={position.top}\n-                      height={position.height}\n+                      $color={staff.color || AppColors.primary}\n+                      $top={position.top}\n+                      $height={position.height}\n                       onClick={() => onEventClick?.(event)}\n                     >\n                       <EventTitle>{event.title}</EventTitle>\n                       <EventTime>\n"
                },
                {
                    "date": 1761454363884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,16 +3,18 @@\n import { AppColors } from '../../styles/colors';\n import { AppTextStyles } from '../../styles/textStyles';\n import { ScheduleEvent, StaffInfo } from './types';\n import { generateTimeSlots, formatTime, isEventOnDate } from './utils';\n+import type { WeeklyHolidaySettings } from '../../utils/db/types';\n \n interface DayViewProps {\n   currentDate: Date;\n   events: ScheduleEvent[];\n   staffList: StaffInfo[];\n   selectedStaffIds: string[];\n   onEventClick?: (event: ScheduleEvent) => void;\n   onEventCreate?: (startTime: Date, endTime: Date, staffId?: string) => void;\n+  weeklyHolidaySettings?: WeeklyHolidaySettings[]; // 주별 휴일설정 추가\n }\n \n const DayContainer = styled.div`\n   display: flex;\n@@ -121,16 +123,25 @@\n     border-right: none;\n   }\n `;\n \n-const StaffTimeSlot = styled.div`\n+const StaffTimeSlot = styled.div<{ $isAvailable: boolean; $isBreakTime: boolean }>`\n   height: 60px;\n   border-bottom: 1px solid ${AppColors.borderLight}20;\n   position: relative;\n-  cursor: pointer;\n+  cursor: ${props => props.$isAvailable ? 'pointer' : 'not-allowed'};\n+  background-color: ${props => {\n+    if (props.$isBreakTime) return AppColors.warning + '10';\n+    if (!props.$isAvailable) return AppColors.error + '10';\n+    return 'transparent';\n+  }};\n \n   &:hover {\n-    background-color: ${AppColors.primary}05;\n+    background-color: ${props => {\n+      if (props.$isBreakTime) return AppColors.warning + '15';\n+      if (!props.$isAvailable) return AppColors.error + '15';\n+      return AppColors.primary + '05';\n+    }};\n   }\n `;\n \n const EventBlock = styled.div<{ $color: string; $top: number; $height: number }>`\n@@ -179,9 +190,10 @@\n   events,\n   staffList,\n   selectedStaffIds,\n   onEventClick,\n-  onEventCreate\n+  onEventCreate,\n+  weeklyHolidaySettings = []\n }) => {\n   const timeSlots = generateTimeSlots();\n   \n   // 필터링된 직원 목록 (선택된 코치만)\n@@ -193,8 +205,79 @@\n   const dayEvents = events.filter(event => \n     isEventOnDate(event.startTime, event.endTime, currentDate)\n   );\n \n+  // 특정 직원의 특정 시간대가 예약 가능한지 확인하는 함수\n+  const isTimeSlotAvailable = (staffId: string, hour: number, minute: number) => {\n+    const dayOfWeek = currentDate.getDay();\n+    const weekStartDate = (() => {\n+      const monday = new Date(currentDate);\n+      monday.setDate(currentDate.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\n+      return monday.toISOString().split('T')[0];\n+    })();\n+\n+    const weeklySettings = weeklyHolidaySettings.find(\n+      s => s.staffId === staffId && s.weekStartDate === weekStartDate\n+    );\n+\n+    if (weeklySettings) {\n+      const dayKeys = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n+      const dayKey = dayKeys[dayOfWeek] as keyof typeof weeklySettings.weekDays;\n+      const daySettings = weeklySettings.weekDays[dayKey];\n+\n+      if (daySettings) {\n+        // 휴일이면 예약 불가\n+        if (daySettings.isHoliday) return false;\n+\n+        // 근무시간 외면 예약 불가\n+        if (daySettings.workingHours) {\n+          const { start, end } = daySettings.workingHours;\n+          if (hour < start || hour >= end) return false;\n+        }\n+\n+        // 휴게시간이면 예약 불가\n+        if (daySettings.breakTimes) {\n+          for (const breakTime of daySettings.breakTimes) {\n+            if (hour >= breakTime.start && hour < breakTime.end) return false;\n+          }\n+        }\n+      }\n+    } else {\n+      // 주별 설정이 없으면 기본값 (주말은 휴일)\n+      if (dayOfWeek === 0 || dayOfWeek === 6) return false;\n+    }\n+\n+    return true;\n+  };\n+\n+  // 특정 직원의 특정 시간대가 휴게시간인지 확인하는 함수\n+  const isBreakTime = (staffId: string, hour: number, minute: number) => {\n+    const dayOfWeek = currentDate.getDay();\n+    const weekStartDate = (() => {\n+      const monday = new Date(currentDate);\n+      monday.setDate(currentDate.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\n+      return monday.toISOString().split('T')[0];\n+    })();\n+\n+    const weeklySettings = weeklyHolidaySettings.find(\n+      s => s.staffId === staffId && s.weekStartDate === weekStartDate\n+    );\n+\n+    if (weeklySettings) {\n+      const dayKeys = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n+      const dayKey = dayKeys[dayOfWeek] as keyof typeof weeklySettings.weekDays;\n+      const daySettings = weeklySettings.weekDays[dayKey];\n+\n+      if (daySettings?.breakTimes) {\n+        for (const breakTime of daySettings.breakTimes) {\n+          if (hour >= breakTime.start && hour < breakTime.end) return true;\n+        }\n+      }\n+    }\n+\n+    return false;\n+  };\n+\n   // 이벤트 위치 계산 (분 단위를 픽셀로 변환)\n   const getEventPosition = (startTime: Date, endTime: Date) => {\n     const dayStart = new Date(currentDate);\n     dayStart.setHours(6, 0, 0, 0); // 오전 6시 시작\n@@ -221,8 +304,15 @@\n     };\n   };\n \n   const handleSlotClick = (timeSlot: any, staffId: string) => {\n+    // 예약 가능한 시간대인지 확인\n+    const isAvailable = isTimeSlotAvailable(staffId, timeSlot.hour, timeSlot.minute);\n+    if (!isAvailable) {\n+      alert('이 시간대는 예약할 수 없습니다. (휴일, 근무시간 외, 또는 휴게시간)');\n+      return;\n+    }\n+\n     if (onEventCreate) {\n       const startTime = new Date(currentDate);\n       startTime.setHours(timeSlot.hour, timeSlot.minute, 0, 0);\n       \n@@ -270,14 +360,21 @@\n \n           {/* 각 직원별 컬럼 */}\n           {filteredStaff.map(staff => (\n             <StaffColumn key={staff.id}>\n-              {timeSlots.map(slot => (\n-                <StaffTimeSlot\n-                  key={`${staff.id}-${slot.hour}-${slot.minute}`}\n-                  onClick={() => handleSlotClick(slot, staff.id)}\n-                />\n-              ))}\n+              {timeSlots.map(slot => {\n+                const isAvailable = isTimeSlotAvailable(staff.id, slot.hour, slot.minute);\n+                const isBreak = isBreakTime(staff.id, slot.hour, slot.minute);\n+                \n+                return (\n+                  <StaffTimeSlot\n+                    key={`${staff.id}-${slot.hour}-${slot.minute}`}\n+                    $isAvailable={isAvailable}\n+                    $isBreakTime={isBreak}\n+                    onClick={() => handleSlotClick(slot, staff.id)}\n+                  />\n+                );\n+              })}\n \n               {/* 해당 직원의 이벤트들 */}\n               {dayEvents\n                 .filter(event => event.staffId === staff.id)\n"
                },
                {
                    "date": 1761460460568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n   selectedStaffIds: string[];\n   onEventClick?: (event: ScheduleEvent) => void;\n   onEventCreate?: (startTime: Date, endTime: Date, staffId?: string) => void;\n   weeklyHolidaySettings?: WeeklyHolidaySettings[]; // 주별 휴일설정 추가\n+  allowEmptyStaff?: boolean; // 코치가 없어도 달력 표시 허용\n }\n \n const DayContainer = styled.div`\n   display: flex;\n@@ -191,9 +192,10 @@\n   staffList,\n   selectedStaffIds,\n   onEventClick,\n   onEventCreate,\n-  weeklyHolidaySettings = []\n+  weeklyHolidaySettings = [],\n+  allowEmptyStaff = false\n }) => {\n   const timeSlots = generateTimeSlots();\n   \n   // 필터링된 직원 목록 (선택된 코치만)\n@@ -322,9 +324,9 @@\n       onEventCreate(startTime, endTime, staffId);\n     }\n   };\n \n-  if (filteredStaff.length === 0) {\n+  if (!allowEmptyStaff && filteredStaff.length === 0) {\n     return (\n       <DayContainer>\n         <div style={{ padding: '48px', textAlign: 'center', color: AppColors.onSurface + '60' }}>\n           표시할 코치를 선택해주세요.\n"
                },
                {
                    "date": 1761735362753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n   onEventClick?: (event: ScheduleEvent) => void;\n   onEventCreate?: (startTime: Date, endTime: Date, staffId?: string) => void;\n   weeklyHolidaySettings?: WeeklyHolidaySettings[]; // 주별 휴일설정 추가\n   allowEmptyStaff?: boolean; // 코치가 없어도 달력 표시 허용\n+  programDuration?: number; // 프로그램 소요시간 (분 단위)\n }\n \n const DayContainer = styled.div`\n   display: flex;\n@@ -193,11 +194,12 @@\n   selectedStaffIds,\n   onEventClick,\n   onEventCreate,\n   weeklyHolidaySettings = [],\n-  allowEmptyStaff = false\n+  allowEmptyStaff = false,\n+  programDuration\n }) => {\n-  const timeSlots = generateTimeSlots();\n+  const timeSlots = generateTimeSlots(programDuration);\n   \n   // 필터링된 직원 목록 (선택된 코치만)\n   const filteredStaff = staffList.filter(staff => \n     selectedStaffIds.includes(staff.id) && staff.role === '코치'\n@@ -318,9 +320,12 @@\n       const startTime = new Date(currentDate);\n       startTime.setHours(timeSlot.hour, timeSlot.minute, 0, 0);\n       \n       const endTime = new Date(startTime);\n-      endTime.setMinutes(endTime.getMinutes() + 30); // 기본 30분 슬롯\n+      // 프로그램 소요시간에 따른 종료시간 계산\n+      const duration = programDuration || 30; // 기본 30분\n+      const actualDuration = duration > 30 ? 60 : duration; // 50분은 1시간으로 처리\n+      endTime.setMinutes(endTime.getMinutes() + actualDuration);\n       \n       onEventCreate(startTime, endTime, staffId);\n     }\n   };\n"
                },
                {
                    "date": 1761738930870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n   box-sizing: border-box;\n `;\n \n const TimeSlot = styled.div`\n-  height: 60px;\n+  height: 30px;\n   padding: 4px 8px;\n   border-bottom: 1px solid ${AppColors.borderLight}20;\n   font-size: ${AppTextStyles.label2.fontSize};\n   color: ${AppColors.onSurface}60;\n@@ -126,9 +126,9 @@\n   }\n `;\n \n const StaffTimeSlot = styled.div<{ $isAvailable: boolean; $isBreakTime: boolean }>`\n-  height: 60px;\n+  height: 30px;\n   border-bottom: 1px solid ${AppColors.borderLight}20;\n   position: relative;\n   cursor: ${props => props.$isAvailable ? 'pointer' : 'not-allowed'};\n   background-color: ${props => {\n"
                },
                {
                    "date": 1761738962744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,10 +302,10 @@\n     const startMinutes = (eventStart.getTime() - dayStart.getTime()) / (1000 * 60);\n     const durationMinutes = (eventEnd.getTime() - eventStart.getTime()) / (1000 * 60);\n \n     return {\n-      top: Math.max(0, (startMinutes / 30) * 60), // 30분당 60px\n-      height: Math.max(30, (durationMinutes / 30) * 60)\n+      top: Math.max(0, (startMinutes / 30) * 30), // 30분당 30px\n+      height: Math.max(15, (durationMinutes / 30) * 30)\n     };\n   };\n \n   const handleSlotClick = (timeSlot: any, staffId: string) => {\n"
                },
                {
                    "date": 1761740206405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n   onEventCreate?: (startTime: Date, endTime: Date, staffId?: string) => void;\n   weeklyHolidaySettings?: WeeklyHolidaySettings[]; // 주별 휴일설정 추가\n   allowEmptyStaff?: boolean; // 코치가 없어도 달력 표시 허용\n   programDuration?: number; // 프로그램 소요시간 (분 단위)\n+  disablePastTime?: boolean; // 과거 시간 비활성화 여부\n }\n \n const DayContainer = styled.div`\n   display: flex;\n@@ -125,21 +126,24 @@\n     border-right: none;\n   }\n `;\n \n-const StaffTimeSlot = styled.div<{ $isAvailable: boolean; $isBreakTime: boolean }>`\n+const StaffTimeSlot = styled.div<{ $isAvailable: boolean; $isBreakTime: boolean; $isPastTime: boolean }>`\n   height: 30px;\n   border-bottom: 1px solid ${AppColors.borderLight}20;\n   position: relative;\n-  cursor: ${props => props.$isAvailable ? 'pointer' : 'not-allowed'};\n+  cursor: ${props => (props.$isAvailable && !props.$isPastTime) ? 'pointer' : 'not-allowed'};\n   background-color: ${props => {\n+    if (props.$isPastTime) return AppColors.onSurface + '05';\n     if (props.$isBreakTime) return AppColors.warning + '10';\n     if (!props.$isAvailable) return AppColors.error + '10';\n     return 'transparent';\n   }};\n+  opacity: ${props => props.$isPastTime ? 0.5 : 1};\n \n   &:hover {\n     background-color: ${props => {\n+      if (props.$isPastTime) return AppColors.onSurface + '05';\n       if (props.$isBreakTime) return AppColors.warning + '15';\n       if (!props.$isAvailable) return AppColors.error + '15';\n       return AppColors.primary + '05';\n     }};\n@@ -195,9 +199,10 @@\n   onEventClick,\n   onEventCreate,\n   weeklyHolidaySettings = [],\n   allowEmptyStaff = false,\n-  programDuration\n+  programDuration,\n+  disablePastTime = false\n }) => {\n   const timeSlots = generateTimeSlots(programDuration);\n   \n   // 필터링된 직원 목록 (선택된 코치만)\n@@ -308,8 +313,19 @@\n     };\n   };\n \n   const handleSlotClick = (timeSlot: any, staffId: string) => {\n+    // 과거 시간 체크 (disablePastTime이 true인 경우)\n+    if (disablePastTime) {\n+      const now = new Date();\n+      const slotTime = new Date(currentDate);\n+      slotTime.setHours(timeSlot.hour, timeSlot.minute, 0, 0);\n+      \n+      if (slotTime < now) {\n+        return; // 과거 시간인 경우 클릭 이벤트 무시\n+      }\n+    }\n+\n     // 예약 가능한 시간대인지 확인\n     const isAvailable = isTimeSlotAvailable(staffId, timeSlot.hour, timeSlot.minute);\n     if (!isAvailable) {\n       alert('이 시간대는 예약할 수 없습니다. (휴일, 근무시간 외, 또는 휴게시간)');\n@@ -371,13 +387,22 @@\n               {timeSlots.map(slot => {\n                 const isAvailable = isTimeSlotAvailable(staff.id, slot.hour, slot.minute);\n                 const isBreak = isBreakTime(staff.id, slot.hour, slot.minute);\n                 \n+                // 과거 시간 체크\n+                const isPastTime = disablePastTime && (() => {\n+                  const now = new Date();\n+                  const slotTime = new Date(currentDate);\n+                  slotTime.setHours(slot.hour, slot.minute, 0, 0);\n+                  return slotTime < now;\n+                })();\n+                \n                 return (\n                   <StaffTimeSlot\n                     key={`${staff.id}-${slot.hour}-${slot.minute}`}\n                     $isAvailable={isAvailable}\n                     $isBreakTime={isBreak}\n+                    $isPastTime={isPastTime}\n                     onClick={() => handleSlotClick(slot, staff.id)}\n                   />\n                 );\n               })}\n"
                },
                {
                    "date": 1761741030947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,13 +11,18 @@\n   events: ScheduleEvent[];\n   staffList: StaffInfo[];\n   selectedStaffIds: string[];\n   onEventClick?: (event: ScheduleEvent) => void;\n-  onEventCreate?: (startTime: Date, endTime: Date, staffId?: string) => void;\n+  onEventCreate?: (startTime: Date, endTime: Date, staffId?: string, replaceEventId?: string) => void;\n   weeklyHolidaySettings?: WeeklyHolidaySettings[]; // 주별 휴일설정 추가\n   allowEmptyStaff?: boolean; // 코치가 없어도 달력 표시 허용\n   programDuration?: number; // 프로그램 소요시간 (분 단위)\n   disablePastTime?: boolean; // 과거 시간 비활성화 여부\n+  currentUser?: {\n+    id: string;\n+    role: 'master' | 'coach' | 'admin';\n+    name?: string;\n+  }; // 현재 사용자 정보\n }\n \n const DayContainer = styled.div`\n   display: flex;\n@@ -126,29 +131,44 @@\n     border-right: none;\n   }\n `;\n \n-const StaffTimeSlot = styled.div<{ $isAvailable: boolean; $isBreakTime: boolean; $isPastTime: boolean }>`\n+const StaffTimeSlot = styled.div<{ $isAvailable: boolean; $isBreakTime: boolean; $isPastTime: boolean; $isHolidayTime: boolean }>`\n   height: 30px;\n   border-bottom: 1px solid ${AppColors.borderLight}20;\n   position: relative;\n-  cursor: ${props => (props.$isAvailable && !props.$isPastTime) ? 'pointer' : 'not-allowed'};\n+  cursor: ${props => (props.$isPastTime ? 'not-allowed' : 'pointer')};\n   background-color: ${props => {\n     if (props.$isPastTime) return AppColors.onSurface + '05';\n+    if (props.$isHolidayTime) return '#f8717115'; // 휴일 배경색\n     if (props.$isBreakTime) return AppColors.warning + '10';\n     if (!props.$isAvailable) return AppColors.error + '10';\n     return 'transparent';\n   }};\n   opacity: ${props => props.$isPastTime ? 0.5 : 1};\n+  border-left: ${props => props.$isHolidayTime ? '3px solid #f87171' : 'none'};\n \n   &:hover {\n     background-color: ${props => {\n       if (props.$isPastTime) return AppColors.onSurface + '05';\n+      if (props.$isHolidayTime) return '#f8717125'; // 휴일 호버 색상\n       if (props.$isBreakTime) return AppColors.warning + '15';\n       if (!props.$isAvailable) return AppColors.error + '15';\n       return AppColors.primary + '05';\n     }};\n   }\n+\n+  &::after {\n+    content: ${props => props.$isHolidayTime ? '\"휴일\"' : 'none'};\n+    position: absolute;\n+    left: 8px;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    font-size: 11px;\n+    color: #dc2626;\n+    font-weight: 500;\n+    pointer-events: none;\n+  }\n `;\n \n const EventBlock = styled.div<{ $color: string; $top: number; $height: number }>`\n   position: absolute;\n@@ -200,9 +220,10 @@\n   onEventCreate,\n   weeklyHolidaySettings = [],\n   allowEmptyStaff = false,\n   programDuration,\n-  disablePastTime = false\n+  disablePastTime = false,\n+  currentUser\n }) => {\n   const timeSlots = generateTimeSlots(programDuration);\n   \n   // 필터링된 직원 목록 (선택된 코치만)\n@@ -312,8 +333,22 @@\n       height: Math.max(15, (durationMinutes / 30) * 30)\n     };\n   };\n \n+  // 특정 시간이 휴일/휴게시간에 포함되는지 확인\n+  const isTimeInHolidayOrBreak = (staffId: string, hour: number, minute: number) => {\n+    const targetTime = new Date(currentDate);\n+    targetTime.setHours(hour, minute, 0, 0);\n+    \n+    // 휴일/휴게시간 이벤트 중에서 해당 시간이 포함되는 것이 있는지 확인\n+    return events.some(event => \n+      event.staffId === staffId &&\n+      (event.type === 'holiday' || event.type === 'break') &&\n+      targetTime >= event.startTime &&\n+      targetTime < event.endTime\n+    );\n+  };\n+\n   const handleSlotClick = (timeSlot: any, staffId: string) => {\n     // 과거 시간 체크 (disablePastTime이 true인 경우)\n     if (disablePastTime) {\n       const now = new Date();\n@@ -324,23 +359,51 @@\n         return; // 과거 시간인 경우 클릭 이벤트 무시\n       }\n     }\n \n-    // 예약 가능한 시간대인지 확인\n+    // 해당 시간이 휴일/휴게시간에 포함되는지 확인\n+    const isInHolidayOrBreak = isTimeInHolidayOrBreak(staffId, timeSlot.hour, timeSlot.minute);\n+    \n+    if (isInHolidayOrBreak) {\n+      // 휴일/휴게시간에 포함된 경우, 코치 권한이 있는지 확인\n+      if (currentUser && (currentUser.role === 'master' || currentUser.id === staffId)) {\n+        // 마스터이거나 본인 코치인 경우 허용\n+        if (window.confirm(`이 시간대는 휴일/휴게시간입니다. 예약을 생성하시겠습니까?`)) {\n+          // 예약 생성 진행\n+          if (onEventCreate) {\n+            const startTime = new Date(currentDate);\n+            startTime.setHours(timeSlot.hour, timeSlot.minute, 0, 0);\n+            \n+            const endTime = new Date(startTime);\n+            const duration = programDuration || 30;\n+            const actualDuration = duration > 30 ? 60 : duration;\n+            endTime.setMinutes(endTime.getMinutes() + actualDuration);\n+            \n+            onEventCreate(startTime, endTime, staffId);\n+          }\n+        }\n+      } else {\n+        // 일반 사용자는 휴일/휴게시간에 예약 불가\n+        alert('휴일 및 휴게시간에는 예약을 생성할 수 없습니다. 관리자 또는 해당 코치에게 문의하세요.');\n+      }\n+      return;\n+    }\n+\n+    // 일반적인 시간 가용성 체크 (근무시간 등)\n     const isAvailable = isTimeSlotAvailable(staffId, timeSlot.hour, timeSlot.minute);\n     if (!isAvailable) {\n-      alert('이 시간대는 예약할 수 없습니다. (휴일, 근무시간 외, 또는 휴게시간)');\n+      alert('이 시간대는 예약할 수 없습니다. (근무시간 외)');\n       return;\n     }\n \n+    // 정상적인 예약 생성\n     if (onEventCreate) {\n       const startTime = new Date(currentDate);\n       startTime.setHours(timeSlot.hour, timeSlot.minute, 0, 0);\n       \n       const endTime = new Date(startTime);\n-      // 프로그램 소요시간에 따른 종료시간 계산\n-      const duration = programDuration || 30; // 기본 30분\n-      const actualDuration = duration > 30 ? 60 : duration; // 50분은 1시간으로 처리\n+      const duration = programDuration || 30;\n+      const actualDuration = duration > 30 ? 60 : duration;\n       endTime.setMinutes(endTime.getMinutes() + actualDuration);\n       \n       onEventCreate(startTime, endTime, staffId);\n     }\n@@ -386,8 +449,9 @@\n             <StaffColumn key={staff.id}>\n               {timeSlots.map(slot => {\n                 const isAvailable = isTimeSlotAvailable(staff.id, slot.hour, slot.minute);\n                 const isBreak = isBreakTime(staff.id, slot.hour, slot.minute);\n+                const isHoliday = isTimeInHolidayOrBreak(staff.id, slot.hour, slot.minute);\n                 \n                 // 과거 시간 체크\n                 const isPastTime = disablePastTime && (() => {\n                   const now = new Date();\n@@ -401,8 +465,9 @@\n                     key={`${staff.id}-${slot.hour}-${slot.minute}`}\n                     $isAvailable={isAvailable}\n                     $isBreakTime={isBreak}\n                     $isPastTime={isPastTime}\n+                    $isHolidayTime={isHoliday}\n                     onClick={() => handleSlotClick(slot, staff.id)}\n                   />\n                 );\n               })}\n"
                },
                {
                    "date": 1761741441328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,17 +333,43 @@\n       height: Math.max(15, (durationMinutes / 30) * 30)\n     };\n   };\n \n-  // 특정 시간이 휴일/휴게시간에 포함되는지 확인\n-  const isTimeInHolidayOrBreak = (staffId: string, hour: number, minute: number) => {\n+  // 특정 시간이 휴일인지 확인 (WeeklyHolidaySettings 기반)\n+  const isTimeInHoliday = (staffId: string, hour: number, minute: number) => {\n+    if (!weeklyHolidaySettings || weeklyHolidaySettings.length === 0) return false;\n+    \n+    const dayOfWeek = currentDate.getDay(); // 0: 일요일, 1: 월요일, ..., 6: 토요일\n+    const weekStartDate = (() => {\n+      const monday = new Date(currentDate);\n+      monday.setDate(currentDate.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\n+      return monday.toISOString().split('T')[0];\n+    })();\n+\n+    const weeklySettings = weeklyHolidaySettings.find(\n+      s => s.staffId === staffId && s.weekStartDate === weekStartDate\n+    );\n+\n+    if (weeklySettings) {\n+      const dayKeys = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n+      const dayKey = dayKeys[dayOfWeek] as keyof typeof weeklySettings.weekDays;\n+      const daySettings = weeklySettings.weekDays[dayKey];\n+\n+      return daySettings?.isHoliday || false;\n+    }\n+\n+    return false;\n+  };\n+\n+  // 특정 시간이 휴게시간에 포함되는지 확인 (스케줄 이벤트 기반)\n+  const isTimeInBreak = (staffId: string, hour: number, minute: number) => {\n     const targetTime = new Date(currentDate);\n     targetTime.setHours(hour, minute, 0, 0);\n     \n-    // 휴일/휴게시간 이벤트 중에서 해당 시간이 포함되는 것이 있는지 확인\n+    // 휴게시간 이벤트 중에서 해당 시간이 포함되는 것이 있는지 확인\n     return events.some(event => \n       event.staffId === staffId &&\n-      (event.type === 'holiday' || event.type === 'break') &&\n+      event.type === 'break' &&\n       targetTime >= event.startTime &&\n       targetTime < event.endTime\n     );\n   };\n@@ -359,16 +385,16 @@\n         return; // 과거 시간인 경우 클릭 이벤트 무시\n       }\n     }\n \n-    // 해당 시간이 휴일/휴게시간에 포함되는지 확인\n-    const isInHolidayOrBreak = isTimeInHolidayOrBreak(staffId, timeSlot.hour, timeSlot.minute);\n+    // 해당 시간이 휴일인지 확인\n+    const isInHoliday = isTimeInHoliday(staffId, timeSlot.hour, timeSlot.minute);\n     \n-    if (isInHolidayOrBreak) {\n-      // 휴일/휴게시간에 포함된 경우, 코치 권한이 있는지 확인\n+    if (isInHoliday) {\n+      // 휴일에 포함된 경우, 코치 권한이 있는지 확인\n       if (currentUser && (currentUser.role === 'master' || currentUser.id === staffId)) {\n         // 마스터이거나 본인 코치인 경우 허용\n-        if (window.confirm(`이 시간대는 휴일/휴게시간입니다. 예약을 생성하시겠습니까?`)) {\n+        if (window.confirm(`이 시간대는 휴일입니다. 예약을 생성하시겠습니까?`)) {\n           // 예약 생성 진행\n           if (onEventCreate) {\n             const startTime = new Date(currentDate);\n             startTime.setHours(timeSlot.hour, timeSlot.minute, 0, 0);\n@@ -381,14 +407,21 @@\n             onEventCreate(startTime, endTime, staffId);\n           }\n         }\n       } else {\n-        // 일반 사용자는 휴일/휴게시간에 예약 불가\n-        alert('휴일 및 휴게시간에는 예약을 생성할 수 없습니다. 관리자 또는 해당 코치에게 문의하세요.');\n+        // 일반 사용자는 휴일에 예약 불가\n+        alert('휴일에는 예약을 생성할 수 없습니다. 관리자 또는 해당 코치에게 문의하세요.');\n       }\n       return;\n     }\n \n+    // 휴게시간 체크\n+    const isInBreak = isTimeInBreak(staffId, timeSlot.hour, timeSlot.minute);\n+    if (isInBreak) {\n+      alert('휴게시간에는 예약을 생성할 수 없습니다.');\n+      return;\n+    }\n+\n     // 일반적인 시간 가용성 체크 (근무시간 등)\n     const isAvailable = isTimeSlotAvailable(staffId, timeSlot.hour, timeSlot.minute);\n     if (!isAvailable) {\n       alert('이 시간대는 예약할 수 없습니다. (근무시간 외)');\n@@ -449,9 +482,9 @@\n             <StaffColumn key={staff.id}>\n               {timeSlots.map(slot => {\n                 const isAvailable = isTimeSlotAvailable(staff.id, slot.hour, slot.minute);\n                 const isBreak = isBreakTime(staff.id, slot.hour, slot.minute);\n-                const isHoliday = isTimeInHolidayOrBreak(staff.id, slot.hour, slot.minute);\n+                const isHoliday = isTimeInHoliday(staff.id, slot.hour, slot.minute);\n                 \n                 // 과거 시간 체크\n                 const isPastTime = disablePastTime && (() => {\n                   const now = new Date();\n"
                },
                {
                    "date": 1761742231963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -335,29 +335,43 @@\n   };\n \n   // 특정 시간이 휴일인지 확인 (WeeklyHolidaySettings 기반)\n   const isTimeInHoliday = (staffId: string, hour: number, minute: number) => {\n-    if (!weeklyHolidaySettings || weeklyHolidaySettings.length === 0) return false;\n+    if (!weeklyHolidaySettings || weeklyHolidaySettings.length === 0) {\n+      console.log('weeklyHolidaySettings가 없음:', weeklyHolidaySettings);\n+      return false;\n+    }\n     \n     const dayOfWeek = currentDate.getDay(); // 0: 일요일, 1: 월요일, ..., 6: 토요일\n     const weekStartDate = (() => {\n       const monday = new Date(currentDate);\n       monday.setDate(currentDate.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\n       return monday.toISOString().split('T')[0];\n     })();\n \n+    console.log('휴일 체크:', { \n+      staffId, \n+      hour, \n+      minute, \n+      dayOfWeek, \n+      weekStartDate,\n+      settingsCount: weeklyHolidaySettings.length \n+    });\n+\n     const weeklySettings = weeklyHolidaySettings.find(\n       s => s.staffId === staffId && s.weekStartDate === weekStartDate\n     );\n \n     if (weeklySettings) {\n       const dayKeys = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n       const dayKey = dayKeys[dayOfWeek] as keyof typeof weeklySettings.weekDays;\n       const daySettings = weeklySettings.weekDays[dayKey];\n-\n+      \n+      console.log('휴일 설정 찾음:', { dayKey, isHoliday: daySettings?.isHoliday });\n       return daySettings?.isHoliday || false;\n     }\n \n+    console.log('해당 주차 휴일 설정 없음');\n     return false;\n   };\n \n   // 특정 시간이 휴게시간에 포함되는지 확인 (스케줄 이벤트 기반)\n"
                }
            ],
            "date": 1760154018684,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../styles/colors';\nimport { AppTextStyles } from '../../styles/textStyles';\nimport { ScheduleEvent, StaffInfo } from './types';\nimport { generateTimeSlots, formatTime, isEventOnDate } from './utils';\n\ninterface DayViewProps {\n  currentDate: Date;\n  events: ScheduleEvent[];\n  staffList: StaffInfo[];\n  selectedStaffIds: string[];\n  onEventClick?: (event: ScheduleEvent) => void;\n  onEventCreate?: (startTime: Date, endTime: Date, staffId?: string) => void;\n}\n\nconst DayContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  background-color: ${AppColors.surface};\n  overflow: hidden;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  background-color: ${AppColors.background};\n  border-bottom: 1px solid ${AppColors.borderLight};\n`;\n\nconst TimeHeader = styled.div`\n  width: 80px;\n  padding: 12px 8px;\n  text-align: center;\n  font-size: ${AppTextStyles.body2.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  border-right: 1px solid ${AppColors.borderLight};\n`;\n\nconst StaffHeader = styled.div`\n  flex: 1;\n  padding: 12px;\n  text-align: center;\n  border-right: 1px solid ${AppColors.borderLight};\n  min-width: 150px;\n\n  &:last-child {\n    border-right: none;\n  }\n`;\n\nconst StaffName = styled.div`\n  font-size: ${AppTextStyles.body2.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin-bottom: 4px;\n`;\n\nconst StaffProgram = styled.div`\n  font-size: ${AppTextStyles.label2.fontSize};\n  color: ${AppColors.primary};\n`;\n\nconst ScrollableContent = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  max-height: 600px;\n`;\n\nconst TimeGrid = styled.div`\n  display: flex;\n`;\n\nconst TimeColumn = styled.div`\n  width: 80px;\n  border-right: 1px solid ${AppColors.borderLight};\n`;\n\nconst TimeSlot = styled.div`\n  height: 60px;\n  padding: 4px 8px;\n  border-bottom: 1px solid ${AppColors.borderLight}20;\n  font-size: ${AppTextStyles.label2.fontSize};\n  color: ${AppColors.onSurface}60;\n  display: flex;\n  align-items: flex-start;\n  justify-content: center;\n`;\n\nconst StaffColumn = styled.div`\n  flex: 1;\n  border-right: 1px solid ${AppColors.borderLight};\n  min-width: 150px;\n  position: relative;\n\n  &:last-child {\n    border-right: none;\n  }\n`;\n\nconst StaffTimeSlot = styled.div`\n  height: 60px;\n  border-bottom: 1px solid ${AppColors.borderLight}20;\n  position: relative;\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${AppColors.primary}05;\n  }\n`;\n\nconst EventBlock = styled.div<{ color: string; top: number; height: number }>`\n  position: absolute;\n  left: 2px;\n  right: 2px;\n  top: ${props => props.top}px;\n  height: ${props => props.height}px;\n  background-color: ${props => props.color}20;\n  border: 1px solid ${props => props.color};\n  border-radius: 4px;\n  padding: 4px 6px;\n  overflow: hidden;\n  cursor: pointer;\n  z-index: 1;\n\n  &:hover {\n    background-color: ${props => props.color}30;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  }\n`;\n\nconst EventTitle = styled.div`\n  font-size: ${AppTextStyles.label2.fontSize};\n  font-weight: 500;\n  color: ${AppColors.onSurface};\n  margin-bottom: 2px;\n  line-height: 1.2;\n`;\n\nconst EventTime = styled.div`\n  font-size: ${AppTextStyles.label3.fontSize};\n  color: ${AppColors.onSurface}70;\n  line-height: 1.1;\n`;\n\nconst EventMember = styled.div`\n  font-size: ${AppTextStyles.label3.fontSize};\n  color: ${AppColors.primary};\n  line-height: 1.1;\n  margin-top: 2px;\n`;\n\nconst DayView: React.FC<DayViewProps> = ({\n  currentDate,\n  events,\n  staffList,\n  selectedStaffIds,\n  onEventClick,\n  onEventCreate\n}) => {\n  const timeSlots = generateTimeSlots();\n  \n  // 필터링된 직원 목록 (선택된 코치만)\n  const filteredStaff = staffList.filter(staff => \n    selectedStaffIds.includes(staff.id) && staff.role === '코치'\n  );\n\n  // 해당 날짜의 이벤트만 필터링\n  const dayEvents = events.filter(event => \n    isEventOnDate(event.startTime, event.endTime, currentDate)\n  );\n\n  // 이벤트 위치 계산 (분 단위를 픽셀로 변환)\n  const getEventPosition = (startTime: Date, endTime: Date) => {\n    const dayStart = new Date(currentDate);\n    dayStart.setHours(6, 0, 0, 0); // 오전 6시 시작\n\n    const eventStart = new Date(startTime);\n    const eventEnd = new Date(endTime);\n\n    // 시작 시간이 당일이 아니면 당일 시작으로 조정\n    if (eventStart.toDateString() !== currentDate.toDateString()) {\n      eventStart.setTime(dayStart.getTime());\n    }\n\n    // 종료 시간이 당일이 아니면 당일 끝으로 조정\n    if (eventEnd.toDateString() !== currentDate.toDateString()) {\n      eventEnd.setHours(22, 0, 0, 0); // 오후 10시 끝\n    }\n\n    const startMinutes = (eventStart.getTime() - dayStart.getTime()) / (1000 * 60);\n    const durationMinutes = (eventEnd.getTime() - eventStart.getTime()) / (1000 * 60);\n\n    return {\n      top: Math.max(0, (startMinutes / 30) * 60), // 30분당 60px\n      height: Math.max(30, (durationMinutes / 30) * 60)\n    };\n  };\n\n  const handleSlotClick = (timeSlot: any, staffId: string) => {\n    if (onEventCreate) {\n      const startTime = new Date(currentDate);\n      startTime.setHours(timeSlot.hour, timeSlot.minute, 0, 0);\n      \n      const endTime = new Date(startTime);\n      endTime.setMinutes(endTime.getMinutes() + 30); // 기본 30분 슬롯\n      \n      onEventCreate(startTime, endTime, staffId);\n    }\n  };\n\n  if (filteredStaff.length === 0) {\n    return (\n      <DayContainer>\n        <div style={{ padding: '48px', textAlign: 'center', color: AppColors.onSurface + '60' }}>\n          표시할 코치를 선택해주세요.\n        </div>\n      </DayContainer>\n    );\n  }\n\n  return (\n    <DayContainer>\n      {/* 헤더 */}\n      <Header>\n        <TimeHeader>시간</TimeHeader>\n        {filteredStaff.map(staff => (\n          <StaffHeader key={staff.id}>\n            <StaffName>{staff.name}</StaffName>\n            {staff.program && <StaffProgram>{staff.program}</StaffProgram>}\n          </StaffHeader>\n        ))}\n      </Header>\n\n      {/* 스크롤 가능한 타임 그리드 */}\n      <ScrollableContent>\n        <TimeGrid>\n          {/* 시간 컬럼 */}\n          <TimeColumn>\n            {timeSlots.map(slot => (\n              <TimeSlot key={`${slot.hour}-${slot.minute}`}>\n                {slot.minute === 0 ? slot.display : ''}\n              </TimeSlot>\n            ))}\n          </TimeColumn>\n\n          {/* 각 직원별 컬럼 */}\n          {filteredStaff.map(staff => (\n            <StaffColumn key={staff.id}>\n              {timeSlots.map(slot => (\n                <StaffTimeSlot\n                  key={`${staff.id}-${slot.hour}-${slot.minute}`}\n                  onClick={() => handleSlotClick(slot, staff.id)}\n                />\n              ))}\n\n              {/* 해당 직원의 이벤트들 */}\n              {dayEvents\n                .filter(event => event.staffId === staff.id)\n                .map(event => {\n                  const position = getEventPosition(event.startTime, event.endTime);\n                  return (\n                    <EventBlock\n                      key={event.id}\n                      color={staff.color || AppColors.primary}\n                      top={position.top}\n                      height={position.height}\n                      onClick={() => onEventClick?.(event)}\n                    >\n                      <EventTitle>{event.title}</EventTitle>\n                      <EventTime>\n                        {formatTime(event.startTime)} - {formatTime(event.endTime)}\n                      </EventTime>\n                      {event.memberName && (\n                        <EventMember>{event.memberName}</EventMember>\n                      )}\n                    </EventBlock>\n                  );\n                })}\n            </StaffColumn>\n          ))}\n        </TimeGrid>\n      </ScrollableContent>\n    </DayContainer>\n  );\n};\n\nexport default DayView;\n"
        }
    ]
}