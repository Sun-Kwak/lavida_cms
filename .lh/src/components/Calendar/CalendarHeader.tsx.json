{
    "sourceFile": "src/components/Calendar/CalendarHeader.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1760154018684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760160713133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,13 +87,13 @@\n   align-items: center;\n   gap: 4px;\n `;\n \n-const ViewTab = styled.button<{ active: boolean }>`\n+const ViewTab = styled.button<{ $active: boolean }>`\n   padding: 8px 16px;\n-  border: 1px solid ${props => props.active ? AppColors.primary : AppColors.borderLight};\n-  background-color: ${props => props.active ? AppColors.primary : AppColors.surface};\n-  color: ${props => props.active ? AppColors.onPrimary : AppColors.onSurface};\n+  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n+  background-color: ${props => props.$active ? AppColors.primary : AppColors.surface};\n+  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n   font-size: ${AppTextStyles.body2.fontSize};\n   font-weight: 500;\n   cursor: pointer;\n   transition: all 0.2s ease;\n@@ -211,9 +211,9 @@\n       <ViewSection>\n         {(['day', 'week', 'month'] as CalendarView[]).map((viewType) => (\n           <ViewTab\n             key={viewType}\n-            active={view === viewType}\n+            $active={view === viewType}\n             onClick={() => onViewChange(viewType)}\n           >\n             {getViewLabel(viewType)}\n           </ViewTab>\n"
                },
                {
                    "date": 1761739739739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n   currentDate: Date;\n   view: CalendarView;\n   onViewChange: (view: CalendarView) => void;\n   onDateChange: (date: Date) => void;\n+  hideViewOptions?: CalendarView[]; // 숨길 뷰 옵션들\n }\n \n const HeaderContainer = styled.div`\n   display: flex;\n@@ -119,9 +120,10 @@\n const CalendarHeader: React.FC<CalendarHeaderProps> = ({\n   currentDate,\n   view,\n   onViewChange,\n-  onDateChange\n+  onDateChange,\n+  hideViewOptions = []\n }) => {\n   const goToPrevious = () => {\n     const newDate = new Date(currentDate);\n     switch (view) {\n@@ -208,9 +210,11 @@\n         </TodayButton>\n       </NavigationSection>\n \n       <ViewSection>\n-        {(['day', 'week', 'month'] as CalendarView[]).map((viewType) => (\n+        {(['day', 'week', 'month'] as CalendarView[])\n+          .filter(viewType => !hideViewOptions.includes(viewType))\n+          .map((viewType) => (\n           <ViewTab\n             key={viewType}\n             $active={view === viewType}\n             onClick={() => onViewChange(viewType)}\n"
                }
            ],
            "date": 1760154018684,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../styles/colors';\nimport { AppTextStyles } from '../../styles/textStyles';\nimport { CalendarView } from './types';\nimport { formatDate } from './utils';\n\ninterface CalendarHeaderProps {\n  currentDate: Date;\n  view: CalendarView;\n  onViewChange: (view: CalendarView) => void;\n  onDateChange: (date: Date) => void;\n}\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 16px 0;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  margin-bottom: 16px;\n`;\n\nconst NavigationSection = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 16px;\n`;\n\nconst DateNavigation = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst NavButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 4px;\n  background-color: ${AppColors.surface};\n  color: ${AppColors.onSurface};\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: ${AppColors.primary}20;\n    border-color: ${AppColors.primary};\n    color: ${AppColors.primary};\n  }\n\n  &:active {\n    transform: scale(0.95);\n  }\n`;\n\nconst DateDisplay = styled.div`\n  font-size: ${AppTextStyles.title2.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  min-width: 200px;\n  text-align: center;\n`;\n\nconst TodayButton = styled.button`\n  padding: 6px 12px;\n  border: 1px solid ${AppColors.primary};\n  border-radius: 4px;\n  background-color: ${AppColors.surface};\n  color: ${AppColors.primary};\n  font-size: ${AppTextStyles.body2.fontSize};\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: ${AppColors.primary};\n    color: ${AppColors.onPrimary};\n  }\n`;\n\nconst ViewSection = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n`;\n\nconst ViewTab = styled.button<{ active: boolean }>`\n  padding: 8px 16px;\n  border: 1px solid ${props => props.active ? AppColors.primary : AppColors.borderLight};\n  background-color: ${props => props.active ? AppColors.primary : AppColors.surface};\n  color: ${props => props.active ? AppColors.onPrimary : AppColors.onSurface};\n  font-size: ${AppTextStyles.body2.fontSize};\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:first-child {\n    border-radius: 4px 0 0 4px;\n  }\n\n  &:last-child {\n    border-radius: 0 4px 4px 0;\n  }\n\n  &:not(:first-child) {\n    border-left: none;\n  }\n\n  &:hover:not(.active) {\n    background-color: ${AppColors.primary}10;\n    border-color: ${AppColors.primary}40;\n  }\n`;\n\nconst CalendarHeader: React.FC<CalendarHeaderProps> = ({\n  currentDate,\n  view,\n  onViewChange,\n  onDateChange\n}) => {\n  const goToPrevious = () => {\n    const newDate = new Date(currentDate);\n    switch (view) {\n      case 'day':\n        newDate.setDate(newDate.getDate() - 1);\n        break;\n      case 'week':\n        newDate.setDate(newDate.getDate() - 7);\n        break;\n      case 'month':\n        newDate.setMonth(newDate.getMonth() - 1);\n        break;\n    }\n    onDateChange(newDate);\n  };\n\n  const goToNext = () => {\n    const newDate = new Date(currentDate);\n    switch (view) {\n      case 'day':\n        newDate.setDate(newDate.getDate() + 1);\n        break;\n      case 'week':\n        newDate.setDate(newDate.getDate() + 7);\n        break;\n      case 'month':\n        newDate.setMonth(newDate.getMonth() + 1);\n        break;\n    }\n    onDateChange(newDate);\n  };\n\n  const goToToday = () => {\n    onDateChange(new Date());\n  };\n\n  const getDateDisplayText = () => {\n    switch (view) {\n      case 'day':\n        return formatDate(currentDate, 'full');\n      case 'week':\n        const weekStart = new Date(currentDate);\n        weekStart.setDate(currentDate.getDate() - currentDate.getDay());\n        const weekEnd = new Date(weekStart);\n        weekEnd.setDate(weekStart.getDate() + 6);\n        \n        if (weekStart.getMonth() === weekEnd.getMonth()) {\n          return `${formatDate(weekStart, 'month-year')} ${weekStart.getDate()}일 - ${weekEnd.getDate()}일`;\n        } else {\n          return `${formatDate(weekStart, 'short')} - ${formatDate(weekEnd, 'short')}`;\n        }\n      case 'month':\n        return formatDate(currentDate, 'month-year');\n      default:\n        return '';\n    }\n  };\n\n  const getViewLabel = (viewType: CalendarView) => {\n    switch (viewType) {\n      case 'day': return '일별';\n      case 'week': return '주별';\n      case 'month': return '월별';\n      default: return '';\n    }\n  };\n\n  return (\n    <HeaderContainer>\n      <NavigationSection>\n        <DateNavigation>\n          <NavButton onClick={goToPrevious}>\n            ←\n          </NavButton>\n          <DateDisplay>\n            {getDateDisplayText()}\n          </DateDisplay>\n          <NavButton onClick={goToNext}>\n            →\n          </NavButton>\n        </DateNavigation>\n        <TodayButton onClick={goToToday}>\n          오늘\n        </TodayButton>\n      </NavigationSection>\n\n      <ViewSection>\n        {(['day', 'week', 'month'] as CalendarView[]).map((viewType) => (\n          <ViewTab\n            key={viewType}\n            active={view === viewType}\n            onClick={() => onViewChange(viewType)}\n          >\n            {getViewLabel(viewType)}\n          </ViewTab>\n        ))}\n      </ViewSection>\n    </HeaderContainer>\n  );\n};\n\nexport default CalendarHeader;\n"
        }
    ]
}