{
    "sourceFile": "src/components/Calendar/utils.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1760154018684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761735362679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,16 +4,38 @@\n \n import { DayColumn, TimeSlot } from './types';\n \n // 시간대 생성 (오전 6시 ~ 오후 10시)\n-export const generateTimeSlots = (): TimeSlot[] => {\n+export const generateTimeSlots = (duration?: number): TimeSlot[] => {\n   const slots: TimeSlot[] = [];\n+  \n+  // 프로그램 소요시간에 따른 시간 간격 결정\n+  let timeInterval = 30; // 기본 30분\n+  \n+  if (duration) {\n+    if (duration <= 30) {\n+      timeInterval = 30; // 30분 이하는 30분 간격\n+    } else {\n+      timeInterval = 60; // 50분 등 30분 초과는 1시간 간격\n+    }\n+  }\n+  \n   for (let hour = 6; hour <= 22; hour++) {\n-    for (let minute = 0; minute < 60; minute += 30) {\n+    if (timeInterval === 30) {\n+      // 30분 간격\n+      for (let minute = 0; minute < 60; minute += 30) {\n+        slots.push({\n+          hour,\n+          minute,\n+          display: `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`\n+        });\n+      }\n+    } else {\n+      // 1시간 간격\n       slots.push({\n         hour,\n-        minute,\n-        display: `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`\n+        minute: 0,\n+        display: `${hour.toString().padStart(2, '0')}:00`\n       });\n     }\n   }\n   return slots;\n"
                },
                {
                    "date": 1761738930798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,39 +3,19 @@\n  */\n \n import { DayColumn, TimeSlot } from './types';\n \n-// 시간대 생성 (오전 6시 ~ 오후 10시)\n+// 시간대 생성 (오전 6시 ~ 오후 10시) - 항상 30분 단위\n export const generateTimeSlots = (duration?: number): TimeSlot[] => {\n   const slots: TimeSlot[] = [];\n   \n-  // 프로그램 소요시간에 따른 시간 간격 결정\n-  let timeInterval = 30; // 기본 30분\n-  \n-  if (duration) {\n-    if (duration <= 30) {\n-      timeInterval = 30; // 30분 이하는 30분 간격\n-    } else {\n-      timeInterval = 60; // 50분 등 30분 초과는 1시간 간격\n-    }\n-  }\n-  \n+  // 항상 30분 간격으로 시간 슬롯 생성\n   for (let hour = 6; hour <= 22; hour++) {\n-    if (timeInterval === 30) {\n-      // 30분 간격\n-      for (let minute = 0; minute < 60; minute += 30) {\n-        slots.push({\n-          hour,\n-          minute,\n-          display: `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`\n-        });\n-      }\n-    } else {\n-      // 1시간 간격\n+    for (let minute = 0; minute < 60; minute += 30) {\n       slots.push({\n         hour,\n-        minute: 0,\n-        display: `${hour.toString().padStart(2, '0')}:00`\n+        minute,\n+        display: `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`\n       });\n     }\n   }\n   return slots;\n"
                }
            ],
            "date": 1760154018684,
            "name": "Commit-0",
            "content": "/**\n * 달력 관련 유틸리티 함수들\n */\n\nimport { DayColumn, TimeSlot } from './types';\n\n// 시간대 생성 (오전 6시 ~ 오후 10시)\nexport const generateTimeSlots = (): TimeSlot[] => {\n  const slots: TimeSlot[] = [];\n  for (let hour = 6; hour <= 22; hour++) {\n    for (let minute = 0; minute < 60; minute += 30) {\n      slots.push({\n        hour,\n        minute,\n        display: `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`\n      });\n    }\n  }\n  return slots;\n};\n\n// 주간 날짜 배열 생성\nexport const getWeekDates = (date: Date): DayColumn[] => {\n  const start = new Date(date);\n  const day = start.getDay(); // 0: 일요일, 1: 월요일, ...\n  start.setDate(start.getDate() - day); // 해당 주의 일요일로 이동\n\n  const weekDates: DayColumn[] = [];\n  const today = new Date();\n  const dayNames = ['일', '월', '화', '수', '목', '금', '토'];\n\n  for (let i = 0; i < 7; i++) {\n    const currentDate = new Date(start);\n    currentDate.setDate(start.getDate() + i);\n    \n    weekDates.push({\n      date: currentDate,\n      dayName: dayNames[i],\n      isToday: isSameDay(currentDate, today),\n      isWeekend: i === 0 || i === 6\n    });\n  }\n\n  return weekDates;\n};\n\n// 월간 날짜 배열 생성 (달력 형태)\nexport const getMonthDates = (date: Date): DayColumn[][] => {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  \n  // 해당 월의 첫째 날\n  const firstDay = new Date(year, month, 1);\n  \n  // 달력 시작일 (해당 월 첫째 주의 일요일)\n  const startDate = new Date(firstDay);\n  startDate.setDate(firstDay.getDate() - firstDay.getDay());\n  \n  const weeks: DayColumn[][] = [];\n  const today = new Date();\n  const dayNames = ['일', '월', '화', '수', '목', '금', '토'];\n\n  let currentDate = new Date(startDate);\n  \n  // 6주 표시 (달력 형태)\n  for (let week = 0; week < 6; week++) {\n    const weekDays: DayColumn[] = [];\n    \n    for (let day = 0; day < 7; day++) {\n      weekDays.push({\n        date: new Date(currentDate),\n        dayName: dayNames[day],\n        isToday: isSameDay(currentDate, today),\n        isWeekend: day === 0 || day === 6\n      });\n      \n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    \n    weeks.push(weekDays);\n  }\n\n  return weeks;\n};\n\n// 같은 날인지 체크\nexport const isSameDay = (date1: Date, date2: Date): boolean => {\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getDate() === date2.getDate()\n  );\n};\n\n// 같은 주인지 체크\nexport const isSameWeek = (date1: Date, date2: Date): boolean => {\n  const week1 = getWeekDates(date1);\n  return week1.some(day => isSameDay(day.date, date2));\n};\n\n// 같은 월인지 체크\nexport const isSameMonth = (date1: Date, date2: Date): boolean => {\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth()\n  );\n};\n\n// 날짜 포맷팅\nexport const formatDate = (date: Date, format: 'full' | 'short' | 'month-year' = 'full'): string => {\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  \n  switch (format) {\n    case 'short':\n      return `${month}/${day}`;\n    case 'month-year':\n      return `${year}년 ${month}월`;\n    case 'full':\n    default:\n      return `${year}년 ${month}월 ${day}일`;\n  }\n};\n\n// 시간 포맷팅\nexport const formatTime = (date: Date): string => {\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n};\n\n// 이벤트가 특정 날짜에 포함되는지 체크\nexport const isEventOnDate = (eventStart: Date, eventEnd: Date, targetDate: Date): boolean => {\n  const targetStart = new Date(targetDate);\n  targetStart.setHours(0, 0, 0, 0);\n  \n  const targetEnd = new Date(targetDate);\n  targetEnd.setHours(23, 59, 59, 999);\n  \n  return (eventStart <= targetEnd && eventEnd >= targetStart);\n};\n\n// 색상 팔레트 (직원별 구분용)\nexport const STAFF_COLORS = [\n  '#3B82F6', // 파랑\n  '#EF4444', // 빨강\n  '#10B981', // 초록\n  '#F59E0B', // 주황\n  '#8B5CF6', // 보라\n  '#06B6D4', // 청록\n  '#F97316', // 주황\n  '#84CC16', // 라임\n  '#EC4899', // 핑크\n  '#6B7280', // 회색\n];\n\n// 직원에게 색상 할당\nexport const assignStaffColor = (staffId: string, index: number): string => {\n  return STAFF_COLORS[index % STAFF_COLORS.length];\n};\n"
        }
    ]
}