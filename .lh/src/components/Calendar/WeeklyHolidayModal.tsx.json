{
    "sourceFile": "src/components/Calendar/WeeklyHolidayModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1761451696622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761451875566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n `;\n \n const WeekHeader = styled.div`\n   display: flex;\n-  justify-content: space-between;\n+  justify-content: center;\n   align-items: center;\n   margin-bottom: 16px;\n `;\n \n@@ -144,21 +144,8 @@\n   color: ${AppColors.onSurface};\n   margin: 0;\n `;\n \n-const WeekNavButton = styled.button`\n-  background: none;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 4px;\n-  padding: 8px 12px;\n-  cursor: pointer;\n-  color: ${AppColors.onSurface};\n-  \n-  &:hover {\n-    background-color: ${AppColors.background};\n-  }\n-`;\n-\n const WeekDaysContainer = styled.div`\n   background-color: ${AppColors.background};\n   border-radius: 8px;\n   padding: 16px;\n@@ -286,26 +273,30 @@\n   const [defaultEndTime, setDefaultEndTime] = useState(20);\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n-  // 다음주 월요일 날짜 계산\n-  const getNextMondayDate = (): string => {\n+  // 현재 설정 가능한 주의 월요일 날짜 계산\n+  const getCurrentSettableWeekStartDate = (): string => {\n     const today = new Date();\n-    const dayOfWeek = today.getDay();\n-    const daysUntilNextMonday = dayOfWeek === 0 ? 1 : 8 - dayOfWeek;\n-    const nextMonday = new Date(today);\n-    nextMonday.setDate(today.getDate() + daysUntilNextMonday);\n-    return nextMonday.toISOString().split('T')[0];\n+    const dayOfWeek = today.getDay(); // 0: 일요일, 1: 월요일, ..., 5: 금요일, 6: 토요일\n+    \n+    let targetWeek: Date;\n+    \n+    if (dayOfWeek >= 0 && dayOfWeek <= 5) {\n+      // 일요일부터 금요일까지: 다음주 설정 가능\n+      targetWeek = new Date(today);\n+      const daysUntilNextMonday = dayOfWeek === 0 ? 1 : 8 - dayOfWeek;\n+      targetWeek.setDate(today.getDate() + daysUntilNextMonday);\n+    } else {\n+      // 토요일(6): 그 다음주 설정 가능 (다다음주)\n+      targetWeek = new Date(today);\n+      const daysUntilNextNextMonday = 2; // 토요일 기준으로 2일 후가 다다음주 월요일\n+      targetWeek.setDate(today.getDate() + daysUntilNextNextMonday);\n+    }\n+    \n+    return targetWeek.toISOString().split('T')[0];\n   };\n-\n-  // 주 변경 함수\n-  const changeWeek = (direction: 'prev' | 'next') => {\n-    const currentDate = new Date(currentWeekStartDate + 'T00:00:00');\n-    const newDate = new Date(currentDate);\n-    newDate.setDate(currentDate.getDate() + (direction === 'next' ? 7 : -7));\n-    setCurrentWeekStartDate(newDate.toISOString().split('T')[0]);\n-  };\n-\n+  \n   // 주 날짜 범위 표시\n   const getWeekDateRange = (): string => {\n     const startDate = new Date(currentWeekStartDate + 'T00:00:00');\n     const endDate = new Date(startDate);\n@@ -320,11 +311,11 @@\n \n   // 초기화\n   useEffect(() => {\n     if (isOpen) {\n-      // 다음주 월요일로 초기 설정\n-      const nextMonday = getNextMondayDate();\n-      setCurrentWeekStartDate(nextMonday);\n+      // 현재 설정 가능한 주로 초기 설정\n+      const settableWeek = getCurrentSettableWeekStartDate();\n+      setCurrentWeekStartDate(settableWeek);\n       \n       // 직원 선택 초기화\n       if (staffId) {\n         setSelectedStaffIds([staffId]);\n@@ -443,9 +434,9 @@\n     <ModalOverlay onClick={onClose}>\n       <ModalContainer onClick={e => e.stopPropagation()}>\n         <ModalHeader>\n           <ModalTitle>\n-            {staffId ? `${staffList.find(s => s.id === staffId)?.name} 코치 주별 휴일설정` : '코치 주별 휴일설정'}\n+            {staffId ? `${staffList.find(s => s.id === staffId)?.name} 코치 휴일설정` : '코치 휴일설정'}\n           </ModalTitle>\n           <CloseButton onClick={onClose}>×</CloseButton>\n         </ModalHeader>\n         \n@@ -503,17 +494,23 @@\n           {/* 주별 휴일설정 */}\n           <WeekSection>\n             <WeekHeader>\n               <WeekTitle>\n-                {getWeekDateRange()}\n+                설정 대상 주: {getWeekDateRange()}\n               </WeekTitle>\n-              <div>\n-                <WeekNavButton onClick={() => changeWeek('prev')}>이전주</WeekNavButton>\n-                <WeekNavButton onClick={() => changeWeek('next')} style={{ marginLeft: '8px' }}>다음주</WeekNavButton>\n-              </div>\n             </WeekHeader>\n             \n             <div style={{ fontSize: '14px', marginBottom: '12px', color: AppColors.onSurface + '80' }}>\n+              {(() => {\n+                const today = new Date();\n+                const dayOfWeek = today.getDay();\n+                if (dayOfWeek >= 0 && dayOfWeek <= 5) {\n+                  return '금요일 끝나기 전까지 다음주 휴일과 근무시간을 설정할 수 있습니다.';\n+                } else {\n+                  return '토요일이므로 그 다음주 휴일과 근무시간을 설정할 수 있습니다.';\n+                }\n+              })()}\n+              <br />\n               체크하면 휴일, 체크 해제하면 근무일입니다.\n             </div>\n             \n             <WeekDaysContainer>\n"
                },
                {
                    "date": 1761452497245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,29 +151,38 @@\n   padding: 16px;\n `;\n \n const WeekDay = styled.div<{ $isWeekend: boolean; $isHoliday: boolean }>`\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  padding: 12px 0;\n+  padding: 16px;\n   border-bottom: 1px solid ${AppColors.borderLight};\n+  background-color: ${props => props.$isHoliday ? AppColors.error + '10' : AppColors.surface};\n   \n   &:last-child {\n     border-bottom: none;\n   }\n `;\n \n+// Removed unused styled component DayHeader\n+\n+// Removed unused styled component DayInfo\n+\n const DayLabel = styled.div<{ $isWeekend: boolean; $isHoliday: boolean }>`\n-  font-size: ${AppTextStyles.body2.fontSize};\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  font-weight: 600;\n   color: ${props => {\n     if (props.$isHoliday) return AppColors.error;\n     if (props.$isWeekend) return AppColors.onSurface + '80';\n     return AppColors.onSurface;\n   }};\n-  font-weight: ${props => props.$isWeekend ? '600' : '400'};\n+  min-width: 60px;\n `;\n \n+const DayDate = styled.div`\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface + '60'};\n+  min-width: 40px;\n+`;\n+\n const DayToggle = styled.label`\n   display: flex;\n   align-items: center;\n   cursor: pointer;\n@@ -184,8 +193,136 @@\n     margin-right: 8px;\n   }\n `;\n \n+const WorkingHoursSection = styled.div<{ $isVisible: boolean }>`\n+  display: ${props => props.$isVisible ? 'block' : 'none'};\n+  margin-top: 12px;\n+  padding: 12px;\n+  background-color: ${AppColors.background};\n+  border-radius: 6px;\n+`;\n+\n+// Removed unused styled component WorkingHoursRow\n+\n+const BreakTimesSection = styled.div`\n+  margin-top: 8px;\n+`;\n+\n+/* Unused for now - may be used in future iterations\n+const BreakTimeItem = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 8px;\n+  margin-bottom: 6px;\n+  \n+  input {\n+    width: 50px;\n+    padding: 4px 6px;\n+    border: 1px solid ${AppColors.borderLight};\n+    border-radius: 4px;\n+    font-size: ${AppTextStyles.body2.fontSize};\n+    text-align: center;\n+  }\n+  \n+  input[type=\"text\"] {\n+    width: 80px;\n+  }\n+  \n+  button {\n+    background: ${AppColors.error};\n+    color: ${AppColors.onPrimary};\n+    border: none;\n+    border-radius: 4px;\n+    padding: 4px 8px;\n+    font-size: 12px;\n+    cursor: pointer;\n+    \n+    &:hover {\n+      background: ${AppColors.error + 'CC'};\n+    }\n+  }\n+`;\n+*/\n+\n+const TimeInput = styled.input`\n+  width: 60px;\n+  padding: 4px 6px;\n+  border: 1px solid #ddd;\n+  border-radius: 4px;\n+  text-align: center;\n+  font-size: 0.9rem;\n+`;\n+\n+const WorkingHoursLabel = styled.div`\n+  font-size: 0.9rem;\n+  font-weight: 600;\n+  margin-bottom: 8px;\n+  color: #333;\n+`;\n+\n+const WorkingHoursInputs = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 8px;\n+  margin-bottom: 12px;\n+`;\n+\n+const BreakTimesLabel = styled.div`\n+  font-size: 0.9rem;\n+  font-weight: 600;\n+  margin-bottom: 8px;\n+  color: #333;\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+`;\n+\n+const BreakTimeRow = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 8px;\n+  margin-bottom: 8px;\n+`;\n+\n+const BreakTimeInput = styled.input`\n+  flex: 1;\n+  padding: 6px 8px;\n+  border: 1px solid #ddd;\n+  border-radius: 4px;\n+  font-size: 0.9rem;\n+`;\n+\n+const RemoveBreakTimeButton = styled.button`\n+  background: #ffebee;\n+  border: 1px solid #f44336;\n+  color: #f44336;\n+  padding: 4px 8px;\n+  border-radius: 4px;\n+  font-size: 0.8rem;\n+  cursor: pointer;\n+  \n+  &:hover {\n+    background: #f44336;\n+    color: white;\n+  }\n+`;\n+\n+const AddBreakTimeButton = styled.button`\n+  background: #e3f2fd;\n+  border: 1px solid #2196f3;\n+  color: #2196f3;\n+  padding: 4px 8px;\n+  border-radius: 4px;\n+  font-size: 0.8rem;\n+  cursor: pointer;\n+  \n+  &:hover {\n+    background: #2196f3;\n+    color: white;\n+  }\n+`;\n+\n const TimeSettingsSection = styled.div`\n   margin-bottom: 24px;\n `;\n \n@@ -259,16 +396,52 @@\n   existingWeeklyHolidays = []\n }) => {\n   const [selectedStaffIds, setSelectedStaffIds] = useState<string[]>([]);\n   const [currentWeekStartDate, setCurrentWeekStartDate] = useState('');\n-  const [weekDaySettings, setWeekDaySettings] = useState({\n-    monday: false,\n-    tuesday: false,\n-    wednesday: false,\n-    thursday: false,\n-    friday: false,\n-    saturday: true,  // 기본값: 주말 휴일\n-    sunday: true     // 기본값: 주말 휴일\n+  const [weekDaySettings, setWeekDaySettings] = useState<{\n+    monday: { isHoliday: boolean; workingHours: { start: number; end: number; }; breakTimes: { start: number; end: number; name: string; }[]; };\n+    tuesday: { isHoliday: boolean; workingHours: { start: number; end: number; }; breakTimes: { start: number; end: number; name: string; }[]; };\n+    wednesday: { isHoliday: boolean; workingHours: { start: number; end: number; }; breakTimes: { start: number; end: number; name: string; }[]; };\n+    thursday: { isHoliday: boolean; workingHours: { start: number; end: number; }; breakTimes: { start: number; end: number; name: string; }[]; };\n+    friday: { isHoliday: boolean; workingHours: { start: number; end: number; }; breakTimes: { start: number; end: number; name: string; }[]; };\n+    saturday: { isHoliday: boolean; workingHours: { start: number; end: number; }; breakTimes: { start: number; end: number; name: string; }[]; };\n+    sunday: { isHoliday: boolean; workingHours: { start: number; end: number; }; breakTimes: { start: number; end: number; name: string; }[]; };\n+  }>({\n+    monday: {\n+      isHoliday: false,\n+      workingHours: { start: 10, end: 20 },\n+      breakTimes: []\n+    },\n+    tuesday: {\n+      isHoliday: false,\n+      workingHours: { start: 10, end: 20 },\n+      breakTimes: []\n+    },\n+    wednesday: {\n+      isHoliday: false,\n+      workingHours: { start: 10, end: 20 },\n+      breakTimes: []\n+    },\n+    thursday: {\n+      isHoliday: false,\n+      workingHours: { start: 10, end: 20 },\n+      breakTimes: []\n+    },\n+    friday: {\n+      isHoliday: false,\n+      workingHours: { start: 10, end: 20 },\n+      breakTimes: []\n+    },\n+    saturday: {\n+      isHoliday: true,  // 기본값: 주말 휴일\n+      workingHours: { start: 10, end: 20 },\n+      breakTimes: []\n+    },\n+    sunday: {\n+      isHoliday: true,  // 기본값: 주말 휴일\n+      workingHours: { start: 10, end: 20 },\n+      breakTimes: []\n+    }\n   });\n   const [defaultStartTime, setDefaultStartTime] = useState(10);\n   const [defaultEndTime, setDefaultEndTime] = useState(20);\n   const [isLoading, setIsLoading] = useState(false);\n@@ -348,27 +521,70 @@\n                   selectedStaffIds.includes(setting.staffId)\n       );\n       \n       if (existingSetting) {\n-        setWeekDaySettings(existingSetting.weekDays);\n-        if (existingSetting.workingHours) {\n-          setDefaultStartTime(existingSetting.workingHours.start);\n-          setDefaultEndTime(existingSetting.workingHours.end);\n-        }\n+        // 기존 설정이 있다면 로드하되, 구조가 맞지 않으면 기본값 사용\n+        const normalizedWeekDays = Object.keys(weekDaySettings).reduce((acc, day) => {\n+          const dayKey = day as keyof typeof weekDaySettings;\n+          const existingDay = existingSetting.weekDays[dayKey];\n+          \n+          acc[dayKey] = {\n+            isHoliday: existingDay?.isHoliday ?? false,\n+            workingHours: existingDay?.workingHours ?? { start: 9, end: 18 },\n+            breakTimes: (existingDay?.breakTimes ?? []).map(bt => ({\n+              start: bt.start,\n+              end: bt.end,\n+              name: bt.name || '휴게시간'\n+            }))\n+          };\n+          \n+          return acc;\n+        }, {} as typeof weekDaySettings);\n+        \n+        setWeekDaySettings(normalizedWeekDays);\n       } else {\n         // 기본값으로 리셋 (주말만 휴일)\n         setWeekDaySettings({\n-          monday: false,\n-          tuesday: false,\n-          wednesday: false,\n-          thursday: false,\n-          friday: false,\n-          saturday: true,\n-          sunday: true\n+          monday: {\n+            isHoliday: false,\n+            workingHours: { start: defaultStartTime, end: defaultEndTime },\n+            breakTimes: []\n+          },\n+          tuesday: {\n+            isHoliday: false,\n+            workingHours: { start: defaultStartTime, end: defaultEndTime },\n+            breakTimes: []\n+          },\n+          wednesday: {\n+            isHoliday: false,\n+            workingHours: { start: defaultStartTime, end: defaultEndTime },\n+            breakTimes: []\n+          },\n+          thursday: {\n+            isHoliday: false,\n+            workingHours: { start: defaultStartTime, end: defaultEndTime },\n+            breakTimes: []\n+          },\n+          friday: {\n+            isHoliday: false,\n+            workingHours: { start: defaultStartTime, end: defaultEndTime },\n+            breakTimes: []\n+          },\n+          saturday: {\n+            isHoliday: true,\n+            workingHours: { start: defaultStartTime, end: defaultEndTime },\n+            breakTimes: []\n+          },\n+          sunday: {\n+            isHoliday: true,\n+            workingHours: { start: defaultStartTime, end: defaultEndTime },\n+            breakTimes: []\n+          }\n         });\n       }\n     }\n-  }, [isOpen, currentWeekStartDate, selectedStaffIds, existingWeeklyHolidays]);\n+  // eslint-disable-next-line react-hooks/exhaustive-deps\n+  }, [isOpen, currentWeekStartDate, selectedStaffIds, existingWeeklyHolidays, defaultStartTime, defaultEndTime]);\n \n   const handleStaffToggle = (staffId: string) => {\n     setSelectedStaffIds(prev => \n       prev.includes(staffId)\n@@ -379,12 +595,68 @@\n \n   const handleDayToggle = (day: keyof typeof weekDaySettings) => {\n     setWeekDaySettings(prev => ({\n       ...prev,\n-      [day]: !prev[day]\n+      [day]: {\n+        ...prev[day],\n+        isHoliday: !prev[day].isHoliday\n+      }\n     }));\n   };\n \n+  const handleWorkingHoursChange = (day: keyof typeof weekDaySettings, field: 'start' | 'end', value: number) => {\n+    setWeekDaySettings(prev => ({\n+      ...prev,\n+      [day]: {\n+        ...prev[day],\n+        workingHours: {\n+          ...prev[day].workingHours,\n+          [field]: value\n+        }\n+      }\n+    }));\n+  };\n+\n+  const handleAddBreakTime = (day: keyof typeof weekDaySettings) => {\n+    setWeekDaySettings(prev => ({\n+      ...prev,\n+      [day]: {\n+        ...prev[day],\n+        breakTimes: [\n+          ...prev[day].breakTimes,\n+          { start: 12, end: 13, name: '점심시간' }\n+        ]\n+      }\n+    }));\n+  };\n+\n+  const handleBreakTimeChange = (\n+    day: keyof typeof weekDaySettings, \n+    index: number, \n+    field: 'start' | 'end' | 'name', \n+    value: number | string\n+  ) => {\n+    setWeekDaySettings(prev => ({\n+      ...prev,\n+      [day]: {\n+        ...prev[day],\n+        breakTimes: prev[day].breakTimes.map((breakTime, i) => \n+          i === index ? { ...breakTime, [field]: value } : breakTime\n+        )\n+      }\n+    }));\n+  };\n+\n+  const handleRemoveBreakTime = (day: keyof typeof weekDaySettings, index: number) => {\n+    setWeekDaySettings(prev => ({\n+      ...prev,\n+      [day]: {\n+        ...prev[day],\n+        breakTimes: prev[day].breakTimes.filter((_, i) => i !== index)\n+      }\n+    }));\n+  };\n+\n   const handleSave = async () => {\n     if (selectedStaffIds.length === 0) {\n       setError('코치를 선택해주세요.');\n       return;\n@@ -399,13 +671,9 @@\n       selectedStaffIds.forEach(staffId => {\n         settings.push({\n           staffId,\n           weekStartDate: currentWeekStartDate,\n-          weekDays: weekDaySettings,\n-          workingHours: {\n-            start: defaultStartTime,\n-            end: defaultEndTime\n-          }\n+          weekDays: weekDaySettings\n         });\n       });\n       \n       await onSave(settings);\n@@ -513,23 +781,94 @@\n               체크하면 휴일, 체크 해제하면 근무일입니다.\n             </div>\n             \n             <WeekDaysContainer>\n-              {dayLabels.map(({ key, label, isWeekend }) => (\n-                <WeekDay key={key} $isWeekend={isWeekend} $isHoliday={weekDaySettings[key]}>\n-                  <DayLabel $isWeekend={isWeekend} $isHoliday={weekDaySettings[key]}>\n-                    {label}\n-                  </DayLabel>\n-                  <DayToggle>\n-                    <input\n-                      type=\"checkbox\"\n-                      checked={weekDaySettings[key]}\n-                      onChange={() => handleDayToggle(key)}\n-                    />\n-                    휴일\n-                  </DayToggle>\n-                </WeekDay>\n-              ))}\n+              {dayLabels.map(({ key, label, isWeekend }) => {\n+                const daySettings = weekDaySettings[key];\n+                const currentDate = new Date(currentWeekStartDate);\n+                currentDate.setDate(currentDate.getDate() + ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'].indexOf(key));\n+                \n+                return (\n+                  <WeekDay key={key} $isWeekend={isWeekend} $isHoliday={daySettings.isHoliday}>\n+                    <DayLabel $isWeekend={isWeekend} $isHoliday={daySettings.isHoliday}>\n+                      {label}\n+                      <DayDate>\n+                        {currentDate.getMonth() + 1}/{currentDate.getDate()}\n+                      </DayDate>\n+                    </DayLabel>\n+                    <DayToggle>\n+                      <input\n+                        type=\"checkbox\"\n+                        checked={daySettings.isHoliday}\n+                        onChange={() => handleDayToggle(key)}\n+                      />\n+                      휴일\n+                    </DayToggle>\n+                    \n+                    {!daySettings.isHoliday && (\n+                      <WorkingHoursSection $isVisible={!daySettings.isHoliday}>\n+                        <WorkingHoursLabel>근무 시간</WorkingHoursLabel>\n+                        <WorkingHoursInputs>\n+                          <TimeInput\n+                            type=\"number\"\n+                            min=\"0\"\n+                            max=\"23\"\n+                            value={daySettings.workingHours.start}\n+                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleWorkingHoursChange(key, 'start', parseInt(e.target.value))}\n+                          />\n+                          <span>시 ~</span>\n+                          <TimeInput\n+                            type=\"number\"\n+                            min=\"0\"\n+                            max=\"23\"\n+                            value={daySettings.workingHours.end}\n+                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleWorkingHoursChange(key, 'end', parseInt(e.target.value))}\n+                          />\n+                          <span>시</span>\n+                        </WorkingHoursInputs>\n+                        \n+                        <BreakTimesSection>\n+                          <BreakTimesLabel>\n+                            휴게 시간\n+                            <AddBreakTimeButton onClick={() => handleAddBreakTime(key)}>\n+                              + 추가\n+                            </AddBreakTimeButton>\n+                          </BreakTimesLabel>\n+                          {daySettings.breakTimes && daySettings.breakTimes.map((breakTime, index) => (\n+                            <BreakTimeRow key={index}>\n+                              <BreakTimeInput\n+                                type=\"text\"\n+                                placeholder=\"휴게시간명\"\n+                                value={breakTime.name}\n+                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleBreakTimeChange(key, index, 'name', e.target.value)}\n+                              />\n+                              <TimeInput\n+                                type=\"number\"\n+                                min=\"0\"\n+                                max=\"23\"\n+                                value={breakTime.start}\n+                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleBreakTimeChange(key, index, 'start', parseInt(e.target.value))}\n+                              />\n+                              <span>시 ~</span>\n+                              <TimeInput\n+                                type=\"number\"\n+                                min=\"0\"\n+                                max=\"23\"\n+                                value={breakTime.end}\n+                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleBreakTimeChange(key, index, 'end', parseInt(e.target.value))}\n+                              />\n+                              <span>시</span>\n+                              <RemoveBreakTimeButton onClick={() => handleRemoveBreakTime(key, index)}>\n+                                삭제\n+                              </RemoveBreakTimeButton>\n+                            </BreakTimeRow>\n+                          ))}\n+                        </BreakTimesSection>\n+                      </WorkingHoursSection>\n+                    )}\n+                  </WeekDay>\n+                );\n+              })}\n             </WeekDaysContainer>\n           </WeekSection>\n         </ModalBody>\n \n"
                },
                {
                    "date": 1761453123488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,11 +77,12 @@\n   }\n `;\n \n const ModalBody = styled.div`\n-  padding: 24px;\n+  padding: 20px;\n   overflow-y: auto;\n   flex: 1;\n+  max-height: 70vh;\n `;\n \n const ModalFooter = styled.div`\n   padding: 20px 24px;\n@@ -145,20 +146,28 @@\n   margin: 0;\n `;\n \n const WeekDaysContainer = styled.div`\n-  background-color: ${AppColors.background};\n-  border-radius: 8px;\n-  padding: 16px;\n+  display: grid;\n+  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));\n+  gap: 12px;\n+  \n+  @media (max-width: 768px) {\n+    grid-template-columns: 1fr;\n+    gap: 10px;\n+  }\n `;\n \n const WeekDay = styled.div<{ $isWeekend: boolean; $isHoliday: boolean }>`\n-  padding: 16px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n   background-color: ${props => props.$isHoliday ? AppColors.error + '10' : AppColors.surface};\n+  border: 1px solid ${props => props.$isHoliday ? AppColors.error + '30' : AppColors.borderLight};\n+  border-radius: 8px;\n+  padding: 12px;\n+  transition: all 0.2s ease;\n   \n-  &:last-child {\n-    border-bottom: none;\n+  &:hover {\n+    border-color: ${props => props.$isHoliday ? AppColors.error + '50' : AppColors.primary + '30'};\n+    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n   }\n `;\n \n // Removed unused styled component DayHeader\n@@ -169,44 +178,47 @@\n   font-size: ${AppTextStyles.body1.fontSize};\n   font-weight: 600;\n   color: ${props => {\n     if (props.$isHoliday) return AppColors.error;\n-    if (props.$isWeekend) return AppColors.onSurface + '80';\n+    if (props.$isWeekend) return AppColors.primary;\n     return AppColors.onSurface;\n   }};\n-  min-width: 60px;\n+  margin-bottom: 8px;\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n `;\n \n-const DayDate = styled.div`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onSurface + '60'};\n-  min-width: 40px;\n-`;\n+// Removed duplicate DayDate - using the one defined later\n \n-const DayToggle = styled.label`\n+const DayToggle = styled.div`\n   display: flex;\n   align-items: center;\n-  cursor: pointer;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onSurface};\n+  gap: 8px;\n   \n   input[type=\"checkbox\"] {\n-    margin-right: 8px;\n+    width: 16px;\n+    height: 16px;\n+    accent-color: ${AppColors.error};\n   }\n+  \n+  label {\n+    font-size: ${AppTextStyles.body2.fontSize};\n+    color: ${AppColors.onSurface};\n+    cursor: pointer;\n+    font-weight: 500;\n+  }\n `;\n \n const WorkingHoursSection = styled.div<{ $isVisible: boolean }>`\n   display: ${props => props.$isVisible ? 'block' : 'none'};\n   margin-top: 12px;\n-  padding: 12px;\n-  background-color: ${AppColors.background};\n-  border-radius: 6px;\n `;\n \n // Removed unused styled component WorkingHoursRow\n \n const BreakTimesSection = styled.div`\n-  margin-top: 8px;\n+  margin-top: 12px;\n `;\n \n /* Unused for now - may be used in future iterations\n const BreakTimeItem = styled.div`\n@@ -244,28 +256,48 @@\n `;\n */\n \n const TimeInput = styled.input`\n-  width: 60px;\n-  padding: 4px 6px;\n+  width: 50px;\n+  padding: 6px 8px;\n   border: 1px solid #ddd;\n   border-radius: 4px;\n   text-align: center;\n   font-size: 0.9rem;\n+  font-weight: 500;\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+    box-shadow: 0 0 0 2px ${AppColors.primary}20;\n+  }\n `;\n \n+// DayDate component removed - date now included in day label\n+\n const WorkingHoursLabel = styled.div`\n   font-size: 0.9rem;\n   font-weight: 600;\n   margin-bottom: 8px;\n   color: #333;\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  flex-wrap: wrap;\n+  gap: 12px;\n `;\n \n const WorkingHoursInputs = styled.div`\n   display: flex;\n   align-items: center;\n   gap: 8px;\n-  margin-bottom: 12px;\n+  flex-wrap: wrap;\n+  \n+  span {\n+    color: #666;\n+    font-size: 0.9rem;\n+    font-weight: 500;\n+  }\n `;\n \n const BreakTimesLabel = styled.div`\n   font-size: 0.9rem;\n@@ -280,13 +312,14 @@\n const BreakTimeRow = styled.div`\n   display: flex;\n   align-items: center;\n   gap: 8px;\n-  margin-bottom: 8px;\n+  margin-bottom: 6px;\n `;\n \n const BreakTimeInput = styled.input`\n   flex: 1;\n+  min-width: 80px;\n   padding: 6px 8px;\n   border: 1px solid #ddd;\n   border-radius: 4px;\n   font-size: 0.9rem;\n@@ -295,12 +328,13 @@\n const RemoveBreakTimeButton = styled.button`\n   background: #ffebee;\n   border: 1px solid #f44336;\n   color: #f44336;\n-  padding: 4px 8px;\n+  padding: 6px 10px;\n   border-radius: 4px;\n   font-size: 0.8rem;\n   cursor: pointer;\n+  min-width: 50px;\n   \n   &:hover {\n     background: #f44336;\n     color: white;\n@@ -310,56 +344,85 @@\n const AddBreakTimeButton = styled.button`\n   background: #e3f2fd;\n   border: 1px solid #2196f3;\n   color: #2196f3;\n-  padding: 4px 8px;\n+  padding: 6px 12px;\n   border-radius: 4px;\n   font-size: 0.8rem;\n   cursor: pointer;\n+  font-weight: 500;\n   \n   &:hover {\n     background: #2196f3;\n     color: white;\n   }\n `;\n \n const TimeSettingsSection = styled.div`\n-  margin-bottom: 24px;\n+  margin-bottom: 20px;\n+  background-color: ${AppColors.background};\n+  border-radius: 8px;\n+  padding: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n `;\n \n const TimeSettingsTitle = styled.h4`\n   font-size: ${AppTextStyles.body1.fontSize};\n   font-weight: 600;\n   color: ${AppColors.onSurface};\n-  margin: 0 0 12px 0;\n+  margin: 0;\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  flex-wrap: wrap;\n+  gap: 12px;\n `;\n \n const TimeInputContainer = styled.div`\n   display: flex;\n   align-items: center;\n-  gap: 8px;\n-  margin-bottom: 8px;\n+  gap: 12px;\n   \n   label {\n-    font-size: ${AppTextStyles.body2.fontSize};\n+    font-size: 0.9rem;\n     color: ${AppColors.onSurface};\n-    min-width: 80px;\n+    font-weight: 500;\n+    min-width: 70px;\n   }\n   \n   input {\n     width: 60px;\n-    padding: 4px 8px;\n+    padding: 8px 10px;\n     border: 1px solid ${AppColors.borderLight};\n     border-radius: 4px;\n-    font-size: ${AppTextStyles.body2.fontSize};\n+    text-align: center;\n+    font-size: 0.9rem;\n+    font-weight: 500;\n+    \n+    &:focus {\n+      outline: none;\n+      border-color: ${AppColors.primary};\n+      box-shadow: 0 0 0 2px ${AppColors.primary}20;\n+    }\n   }\n   \n   span {\n-    font-size: ${AppTextStyles.body2.fontSize};\n-    color: ${AppColors.onSurface};\n+    color: ${AppColors.onSurface + '80'};\n+    font-size: 0.9rem;\n   }\n `;\n \n+const TimeInputRow = styled.div`\n+  display: flex;\n+  gap: 20px;\n+  flex-wrap: wrap;\n+  \n+  @media (max-width: 480px) {\n+    flex-direction: column;\n+    gap: 12px;\n+  }\n+`;\n+\n const Button = styled.button<{ $variant: 'primary' | 'secondary'; $disabled?: boolean }>`\n   padding: 10px 20px;\n   border-radius: 6px;\n   font-size: ${AppTextStyles.body2.fontSize};\n@@ -731,33 +794,37 @@\n               ))}\n             </StaffSelector>\n           )}\n \n-          {/* 근무시간 설정 */}\n+          {/* 기본 근무시간 설정 */}\n           <TimeSettingsSection>\n-            <TimeSettingsTitle>기본 근무시간</TimeSettingsTitle>\n-            <TimeInputContainer>\n-              <label>시작 시간:</label>\n-              <input\n-                type=\"number\"\n-                min=\"0\"\n-                max=\"23\"\n-                value={defaultStartTime}\n-                onChange={(e) => setDefaultStartTime(Number(e.target.value))}\n-              />\n-              <span>시</span>\n-            </TimeInputContainer>\n-            <TimeInputContainer>\n-              <label>종료 시간:</label>\n-              <input\n-                type=\"number\"\n-                min=\"1\"\n-                max=\"24\"\n-                value={defaultEndTime}\n-                onChange={(e) => setDefaultEndTime(Number(e.target.value))}\n-              />\n-              <span>시</span>\n-            </TimeInputContainer>\n+            <TimeSettingsTitle>\n+              기본 근무시간\n+              <TimeInputRow>\n+                <TimeInputContainer>\n+                  <label>시작:</label>\n+                  <input\n+                    type=\"number\"\n+                    min=\"0\"\n+                    max=\"23\"\n+                    value={defaultStartTime}\n+                    onChange={(e) => setDefaultStartTime(Number(e.target.value))}\n+                  />\n+                  <span>시</span>\n+                </TimeInputContainer>\n+                <TimeInputContainer>\n+                  <label>종료:</label>\n+                  <input\n+                    type=\"number\"\n+                    min=\"1\"\n+                    max=\"24\"\n+                    value={defaultEndTime}\n+                    onChange={(e) => setDefaultEndTime(Number(e.target.value))}\n+                  />\n+                  <span>시</span>\n+                </TimeInputContainer>\n+              </TimeInputRow>\n+            </TimeSettingsTitle>\n           </TimeSettingsSection>\n \n           {/* 주별 휴일설정 */}\n           <WeekSection>\n@@ -789,43 +856,42 @@\n                 \n                 return (\n                   <WeekDay key={key} $isWeekend={isWeekend} $isHoliday={daySettings.isHoliday}>\n                     <DayLabel $isWeekend={isWeekend} $isHoliday={daySettings.isHoliday}>\n-                      {label}\n-                      <DayDate>\n-                        {currentDate.getMonth() + 1}/{currentDate.getDate()}\n-                      </DayDate>\n+                      <span>{label} ({currentDate.getMonth() + 1}/{currentDate.getDate()})</span>\n+                      <DayToggle>\n+                        <input\n+                          type=\"checkbox\"\n+                          checked={daySettings.isHoliday}\n+                          onChange={() => handleDayToggle(key)}\n+                        />\n+                        <label>휴일</label>\n+                      </DayToggle>\n                     </DayLabel>\n-                    <DayToggle>\n-                      <input\n-                        type=\"checkbox\"\n-                        checked={daySettings.isHoliday}\n-                        onChange={() => handleDayToggle(key)}\n-                      />\n-                      휴일\n-                    </DayToggle>\n                     \n                     {!daySettings.isHoliday && (\n                       <WorkingHoursSection $isVisible={!daySettings.isHoliday}>\n-                        <WorkingHoursLabel>근무 시간</WorkingHoursLabel>\n-                        <WorkingHoursInputs>\n-                          <TimeInput\n-                            type=\"number\"\n-                            min=\"0\"\n-                            max=\"23\"\n-                            value={daySettings.workingHours.start}\n-                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleWorkingHoursChange(key, 'start', parseInt(e.target.value))}\n-                          />\n-                          <span>시 ~</span>\n-                          <TimeInput\n-                            type=\"number\"\n-                            min=\"0\"\n-                            max=\"23\"\n-                            value={daySettings.workingHours.end}\n-                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleWorkingHoursChange(key, 'end', parseInt(e.target.value))}\n-                          />\n-                          <span>시</span>\n-                        </WorkingHoursInputs>\n+                        <WorkingHoursLabel>\n+                          근무 시간\n+                          <WorkingHoursInputs>\n+                            <TimeInput\n+                              type=\"number\"\n+                              min=\"0\"\n+                              max=\"23\"\n+                              value={daySettings.workingHours.start}\n+                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleWorkingHoursChange(key, 'start', parseInt(e.target.value))}\n+                            />\n+                            <span>시 ~</span>\n+                            <TimeInput\n+                              type=\"number\"\n+                              min=\"0\"\n+                              max=\"23\"\n+                              value={daySettings.workingHours.end}\n+                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleWorkingHoursChange(key, 'end', parseInt(e.target.value))}\n+                            />\n+                            <span>시</span>\n+                          </WorkingHoursInputs>\n+                        </WorkingHoursLabel>\n                         \n                         <BreakTimesSection>\n                           <BreakTimesLabel>\n                             휴게 시간\n"
                },
                {
                    "date": 1761453261120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -546,19 +546,25 @@\n   };\n \n   // 초기화\n   useEffect(() => {\n+    console.log('Initialization useEffect triggered, isOpen:', isOpen);\n+    \n     if (isOpen) {\n       // 현재 설정 가능한 주로 초기 설정\n       const settableWeek = getCurrentSettableWeekStartDate();\n+      console.log('Setting currentWeekStartDate to:', settableWeek);\n       setCurrentWeekStartDate(settableWeek);\n       \n       // 직원 선택 초기화\n       if (staffId) {\n+        console.log('Setting selectedStaffIds to single staff:', staffId);\n         setSelectedStaffIds([staffId]);\n       } else if (currentUser?.role === 'master') {\n+        console.log('Master user, setting empty staff selection');\n         setSelectedStaffIds([]);\n       } else if (currentUser?.id) {\n+        console.log('Setting selectedStaffIds to current user:', currentUser.id);\n         setSelectedStaffIds([currentUser.id]);\n       }\n \n       // 기본 근무시간 설정 (첫 번째 선택된 직원 기준)\n@@ -577,34 +583,41 @@\n   }, [isOpen, staffId, currentUser, staffList, selectedStaffIds]);\n \n   // 기존 설정 로드\n   useEffect(() => {\n-    if (isOpen && currentWeekStartDate && selectedStaffIds.length > 0) {\n-      const existingSetting = existingWeeklyHolidays.find(\n-        setting => setting.weekStartDate === currentWeekStartDate && \n-                  selectedStaffIds.includes(setting.staffId)\n-      );\n-      \n-      if (existingSetting) {\n-        // 기존 설정이 있다면 로드하되, 구조가 맞지 않으면 기본값 사용\n-        const normalizedWeekDays = Object.keys(weekDaySettings).reduce((acc, day) => {\n-          const dayKey = day as keyof typeof weekDaySettings;\n-          const existingDay = existingSetting.weekDays[dayKey];\n+    console.log('useEffect triggered:', { isOpen, currentWeekStartDate, selectedStaffIds: selectedStaffIds.length });\n+    \n+    if (isOpen && currentWeekStartDate) {\n+      if (selectedStaffIds.length > 0) {\n+        const existingSetting = existingWeeklyHolidays.find(\n+          setting => setting.weekStartDate === currentWeekStartDate && \n+                    selectedStaffIds.includes(setting.staffId)\n+        );\n+        \n+        if (existingSetting) {\n+          console.log('Found existing setting:', existingSetting);\n+          // 기존 설정이 있다면 로드하되, 구조가 맞지 않으면 기본값 사용\n+          const normalizedWeekDays = Object.keys(weekDaySettings).reduce((acc, day) => {\n+            const dayKey = day as keyof typeof weekDaySettings;\n+            const existingDay = existingSetting.weekDays[dayKey];\n+            \n+            acc[dayKey] = {\n+              isHoliday: existingDay?.isHoliday ?? false,\n+              workingHours: existingDay?.workingHours ?? { start: 9, end: 18 },\n+              breakTimes: (existingDay?.breakTimes ?? []).map(bt => ({\n+                start: bt.start,\n+                end: bt.end,\n+                name: bt.name || '휴게시간'\n+              }))\n+            };\n+            \n+            return acc;\n+          }, {} as typeof weekDaySettings);\n           \n-          acc[dayKey] = {\n-            isHoliday: existingDay?.isHoliday ?? false,\n-            workingHours: existingDay?.workingHours ?? { start: 9, end: 18 },\n-            breakTimes: (existingDay?.breakTimes ?? []).map(bt => ({\n-              start: bt.start,\n-              end: bt.end,\n-              name: bt.name || '휴게시간'\n-            }))\n-          };\n-          \n-          return acc;\n-        }, {} as typeof weekDaySettings);\n-        \n-        setWeekDaySettings(normalizedWeekDays);\n+          setWeekDaySettings(normalizedWeekDays);\n+        } else {\n+          console.log('No existing setting found, using default state');\n+        }\n       } else {\n         // 기본값으로 리셋 (주말만 휴일)\n         setWeekDaySettings({\n           monday: {\n@@ -656,15 +669,20 @@\n     );\n   };\n \n   const handleDayToggle = (day: keyof typeof weekDaySettings) => {\n-    setWeekDaySettings(prev => ({\n-      ...prev,\n-      [day]: {\n-        ...prev[day],\n-        isHoliday: !prev[day].isHoliday\n-      }\n-    }));\n+    console.log('handleDayToggle called:', day, 'current state:', weekDaySettings[day]);\n+    setWeekDaySettings(prev => {\n+      const newState = {\n+        ...prev,\n+        [day]: {\n+          ...prev[day],\n+          isHoliday: !prev[day].isHoliday\n+        }\n+      };\n+      console.log('new state for', day, ':', newState[day]);\n+      return newState;\n+    });\n   };\n \n   const handleWorkingHoursChange = (day: keyof typeof weekDaySettings, field: 'start' | 'end', value: number) => {\n     setWeekDaySettings(prev => ({\n@@ -860,12 +878,16 @@\n                       <span>{label} ({currentDate.getMonth() + 1}/{currentDate.getDate()})</span>\n                       <DayToggle>\n                         <input\n                           type=\"checkbox\"\n+                          id={`holiday-${key}`}\n                           checked={daySettings.isHoliday}\n-                          onChange={() => handleDayToggle(key)}\n+                          onChange={() => {\n+                            console.log('Checkbox clicked for:', key);\n+                            handleDayToggle(key);\n+                          }}\n                         />\n-                        <label>휴일</label>\n+                        <label htmlFor={`holiday-${key}`}>휴일</label>\n                       </DayToggle>\n                     </DayLabel>\n                     \n                     {!daySettings.isHoliday && (\n"
                },
                {
                    "date": 1761453739761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,8 +269,20 @@\n     outline: none;\n     border-color: ${AppColors.primary};\n     box-shadow: 0 0 0 2px ${AppColors.primary}20;\n   }\n+  \n+  /* Hide number input spinners */\n+  &::-webkit-outer-spin-button,\n+  &::-webkit-inner-spin-button {\n+    -webkit-appearance: none;\n+    margin: 0;\n+  }\n+  \n+  &[type=number] {\n+    appearance: textfield;\n+    -moz-appearance: textfield;\n+  }\n `;\n \n // DayDate component removed - date now included in day label\n \n@@ -601,9 +613,9 @@\n             const existingDay = existingSetting.weekDays[dayKey];\n             \n             acc[dayKey] = {\n               isHoliday: existingDay?.isHoliday ?? false,\n-              workingHours: existingDay?.workingHours ?? { start: 9, end: 18 },\n+              workingHours: existingDay?.workingHours ?? { start: 10, end: 20 },\n               breakTimes: (existingDay?.breakTimes ?? []).map(bt => ({\n                 start: bt.start,\n                 end: bt.end,\n                 name: bt.name || '휴게시간'\n@@ -696,8 +708,43 @@\n       }\n     }));\n   };\n \n+  // 시간 입력 처리 함수 추가\n+  const handleTimeInputChange = (\n+    value: string, \n+    onChange: (value: number) => void\n+  ) => {\n+    // 숫자만 허용\n+    const numericValue = value.replace(/[^0-9]/g, '');\n+    \n+    if (numericValue === '') {\n+      onChange(1); // 빈 값일 때 최소값으로 설정\n+      return;\n+    }\n+    \n+    const num = parseInt(numericValue, 10);\n+    \n+    // 1-24 범위로 제한\n+    if (num >= 1 && num <= 24) {\n+      onChange(num);\n+    } else if (num > 24) {\n+      onChange(24);\n+    } else if (num < 1) {\n+      onChange(1);\n+    }\n+  };\n+\n+  const handleDefaultTimeChange = (field: 'start' | 'end', value: string) => {\n+    handleTimeInputChange(value, (num) => {\n+      if (field === 'start') {\n+        setDefaultStartTime(num);\n+      } else {\n+        setDefaultEndTime(num);\n+      }\n+    });\n+  };\n+\n   const handleAddBreakTime = (day: keyof typeof weekDaySettings) => {\n     setWeekDaySettings(prev => ({\n       ...prev,\n       [day]: {\n@@ -820,24 +867,38 @@\n               <TimeInputRow>\n                 <TimeInputContainer>\n                   <label>시작:</label>\n                   <input\n-                    type=\"number\"\n-                    min=\"0\"\n-                    max=\"23\"\n+                    type=\"text\"\n                     value={defaultStartTime}\n-                    onChange={(e) => setDefaultStartTime(Number(e.target.value))}\n+                    onChange={(e) => handleDefaultTimeChange('start', e.target.value)}\n+                    style={{\n+                      width: '60px',\n+                      padding: '8px 10px',\n+                      border: `1px solid ${AppColors.borderLight}`,\n+                      borderRadius: '4px',\n+                      textAlign: 'center',\n+                      fontSize: '0.9rem',\n+                      fontWeight: '500'\n+                    }}\n                   />\n                   <span>시</span>\n                 </TimeInputContainer>\n                 <TimeInputContainer>\n                   <label>종료:</label>\n                   <input\n-                    type=\"number\"\n-                    min=\"1\"\n-                    max=\"24\"\n+                    type=\"text\"\n                     value={defaultEndTime}\n-                    onChange={(e) => setDefaultEndTime(Number(e.target.value))}\n+                    onChange={(e) => handleDefaultTimeChange('end', e.target.value)}\n+                    style={{\n+                      width: '60px',\n+                      padding: '8px 10px',\n+                      border: `1px solid ${AppColors.borderLight}`,\n+                      borderRadius: '4px',\n+                      textAlign: 'center',\n+                      fontSize: '0.9rem',\n+                      fontWeight: '500'\n+                    }}\n                   />\n                   <span>시</span>\n                 </TimeInputContainer>\n               </TimeInputRow>\n@@ -895,21 +956,25 @@\n                         <WorkingHoursLabel>\n                           근무 시간\n                           <WorkingHoursInputs>\n                             <TimeInput\n-                              type=\"number\"\n-                              min=\"0\"\n-                              max=\"23\"\n+                              type=\"text\"\n                               value={daySettings.workingHours.start}\n-                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleWorkingHoursChange(key, 'start', parseInt(e.target.value))}\n+                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n+                                handleTimeInputChange(e.target.value, (num) => {\n+                                  handleWorkingHoursChange(key, 'start', num);\n+                                });\n+                              }}\n                             />\n                             <span>시 ~</span>\n                             <TimeInput\n-                              type=\"number\"\n-                              min=\"0\"\n-                              max=\"23\"\n+                              type=\"text\"\n                               value={daySettings.workingHours.end}\n-                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleWorkingHoursChange(key, 'end', parseInt(e.target.value))}\n+                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n+                                handleTimeInputChange(e.target.value, (num) => {\n+                                  handleWorkingHoursChange(key, 'end', num);\n+                                });\n+                              }}\n                             />\n                             <span>시</span>\n                           </WorkingHoursInputs>\n                         </WorkingHoursLabel>\n@@ -929,21 +994,25 @@\n                                 value={breakTime.name}\n                                 onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleBreakTimeChange(key, index, 'name', e.target.value)}\n                               />\n                               <TimeInput\n-                                type=\"number\"\n-                                min=\"0\"\n-                                max=\"23\"\n+                                type=\"text\"\n                                 value={breakTime.start}\n-                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleBreakTimeChange(key, index, 'start', parseInt(e.target.value))}\n+                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n+                                  handleTimeInputChange(e.target.value, (num) => {\n+                                    handleBreakTimeChange(key, index, 'start', num);\n+                                  });\n+                                }}\n                               />\n                               <span>시 ~</span>\n                               <TimeInput\n-                                type=\"number\"\n-                                min=\"0\"\n-                                max=\"23\"\n+                                type=\"text\"\n                                 value={breakTime.end}\n-                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleBreakTimeChange(key, index, 'end', parseInt(e.target.value))}\n+                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n+                                  handleTimeInputChange(e.target.value, (num) => {\n+                                    handleBreakTimeChange(key, index, 'end', num);\n+                                  });\n+                                }}\n                               />\n                               <span>시</span>\n                               <RemoveBreakTimeButton onClick={() => handleRemoveBreakTime(key, index)}>\n                                 삭제\n"
                },
                {
                    "date": 1761453885117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -482,44 +482,44 @@\n     sunday: { isHoliday: boolean; workingHours: { start: number; end: number; }; breakTimes: { start: number; end: number; name: string; }[]; };\n   }>({\n     monday: {\n       isHoliday: false,\n-      workingHours: { start: 10, end: 20 },\n+      workingHours: { start: 9, end: 21 },\n       breakTimes: []\n     },\n     tuesday: {\n       isHoliday: false,\n-      workingHours: { start: 10, end: 20 },\n+      workingHours: { start: 9, end: 21 },\n       breakTimes: []\n     },\n     wednesday: {\n       isHoliday: false,\n-      workingHours: { start: 10, end: 20 },\n+      workingHours: { start: 9, end: 21 },\n       breakTimes: []\n     },\n     thursday: {\n       isHoliday: false,\n-      workingHours: { start: 10, end: 20 },\n+      workingHours: { start: 9, end: 21 },\n       breakTimes: []\n     },\n     friday: {\n       isHoliday: false,\n-      workingHours: { start: 10, end: 20 },\n+      workingHours: { start: 9, end: 21 },\n       breakTimes: []\n     },\n     saturday: {\n       isHoliday: true,  // 기본값: 주말 휴일\n-      workingHours: { start: 10, end: 20 },\n+      workingHours: { start: 9, end: 21 },\n       breakTimes: []\n     },\n     sunday: {\n       isHoliday: true,  // 기본값: 주말 휴일\n-      workingHours: { start: 10, end: 20 },\n+      workingHours: { start: 9, end: 21 },\n       breakTimes: []\n     }\n   });\n-  const [defaultStartTime, setDefaultStartTime] = useState(10);\n-  const [defaultEndTime, setDefaultEndTime] = useState(20);\n+  const [defaultStartTime, setDefaultStartTime] = useState(9);\n+  const [defaultEndTime, setDefaultEndTime] = useState(21);\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n   // 현재 설정 가능한 주의 월요일 날짜 계산\n@@ -613,9 +613,9 @@\n             const existingDay = existingSetting.weekDays[dayKey];\n             \n             acc[dayKey] = {\n               isHoliday: existingDay?.isHoliday ?? false,\n-              workingHours: existingDay?.workingHours ?? { start: 10, end: 20 },\n+              workingHours: existingDay?.workingHours ?? { start: 9, end: 21 },\n               breakTimes: (existingDay?.breakTimes ?? []).map(bt => ({\n                 start: bt.start,\n                 end: bt.end,\n                 name: bt.name || '휴게시간'\n"
                },
                {
                    "date": 1761454363995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -917,9 +917,9 @@\n               {(() => {\n                 const today = new Date();\n                 const dayOfWeek = today.getDay();\n                 if (dayOfWeek >= 0 && dayOfWeek <= 5) {\n-                  return '금요일 끝나기 전까지 다음주 휴일과 근무시간을 설정할 수 있습니다.';\n+                  return '금요일 오후 6시 전까지 다음주 휴일과 근무시간을 설정할 수 있습니다.';\n                 } else {\n                   return '토요일이므로 그 다음주 휴일과 근무시간을 설정할 수 있습니다.';\n                 }\n               })()}\n"
                }
            ],
            "date": 1761451696622,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../styles/colors';\nimport { AppTextStyles } from '../../styles/textStyles';\nimport type { WeeklyHolidaySettings } from '../../utils/db/types';\n\ninterface WeeklyHolidayModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  staffId?: string; // undefined면 전체 코치\n  staffList: Array<{\n    id: string;\n    name: string;\n    workingHours?: {\n      start: number;\n      end: number;\n    };\n  }>;\n  currentUser?: {\n    id: string;\n    role: 'master' | 'coach' | 'admin';\n  };\n  onSave: (settings: Omit<WeeklyHolidaySettings, 'id' | 'createdAt' | 'updatedAt'>[]) => Promise<void>;\n  existingWeeklyHolidays?: WeeklyHolidaySettings[]; // 기존 주별 휴일 설정 데이터\n}\n\nconst ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n`;\n\nconst ModalContainer = styled.div`\n  background-color: ${AppColors.surface};\n  border-radius: 12px;\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  width: 90%;\n  max-width: 600px;\n  max-height: 80vh;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ModalHeader = styled.div`\n  padding: 24px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst ModalTitle = styled.h2`\n  font-size: ${AppTextStyles.headline3.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin: 0;\n`;\n\nconst CloseButton = styled.button`\n  background: none;\n  border: none;\n  font-size: 24px;\n  color: ${AppColors.onSurface};\n  cursor: pointer;\n  padding: 4px;\n  \n  &:hover {\n    color: ${AppColors.primary};\n  }\n`;\n\nconst ModalBody = styled.div`\n  padding: 24px;\n  overflow-y: auto;\n  flex: 1;\n`;\n\nconst ModalFooter = styled.div`\n  padding: 20px 24px;\n  border-top: 1px solid ${AppColors.borderLight};\n  display: flex;\n  justify-content: flex-end;\n  gap: 12px;\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: ${AppColors.error}15;\n  color: ${AppColors.error};\n  padding: 12px;\n  border-radius: 8px;\n  margin-bottom: 16px;\n  font-size: ${AppTextStyles.body2.fontSize};\n`;\n\nconst StaffSelector = styled.div`\n  margin-bottom: 24px;\n`;\n\nconst SelectorTitle = styled.h4`\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin: 0 0 12px 0;\n`;\n\nconst StaffCheckbox = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 8px;\n  \n  input[type=\"checkbox\"] {\n    margin-right: 8px;\n  }\n  \n  label {\n    font-size: ${AppTextStyles.body2.fontSize};\n    color: ${AppColors.onSurface};\n    cursor: pointer;\n  }\n`;\n\nconst WeekSection = styled.div`\n  margin-bottom: 24px;\n`;\n\nconst WeekHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n`;\n\nconst WeekTitle = styled.h3`\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin: 0;\n`;\n\nconst WeekNavButton = styled.button`\n  background: none;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 4px;\n  padding: 8px 12px;\n  cursor: pointer;\n  color: ${AppColors.onSurface};\n  \n  &:hover {\n    background-color: ${AppColors.background};\n  }\n`;\n\nconst WeekDaysContainer = styled.div`\n  background-color: ${AppColors.background};\n  border-radius: 8px;\n  padding: 16px;\n`;\n\nconst WeekDay = styled.div<{ $isWeekend: boolean; $isHoliday: boolean }>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px 0;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  \n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst DayLabel = styled.div<{ $isWeekend: boolean; $isHoliday: boolean }>`\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${props => {\n    if (props.$isHoliday) return AppColors.error;\n    if (props.$isWeekend) return AppColors.onSurface + '80';\n    return AppColors.onSurface;\n  }};\n  font-weight: ${props => props.$isWeekend ? '600' : '400'};\n`;\n\nconst DayToggle = styled.label`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onSurface};\n  \n  input[type=\"checkbox\"] {\n    margin-right: 8px;\n  }\n`;\n\nconst TimeSettingsSection = styled.div`\n  margin-bottom: 24px;\n`;\n\nconst TimeSettingsTitle = styled.h4`\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin: 0 0 12px 0;\n`;\n\nconst TimeInputContainer = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 8px;\n  \n  label {\n    font-size: ${AppTextStyles.body2.fontSize};\n    color: ${AppColors.onSurface};\n    min-width: 80px;\n  }\n  \n  input {\n    width: 60px;\n    padding: 4px 8px;\n    border: 1px solid ${AppColors.borderLight};\n    border-radius: 4px;\n    font-size: ${AppTextStyles.body2.fontSize};\n  }\n  \n  span {\n    font-size: ${AppTextStyles.body2.fontSize};\n    color: ${AppColors.onSurface};\n  }\n`;\n\nconst Button = styled.button<{ $variant: 'primary' | 'secondary'; $disabled?: boolean }>`\n  padding: 10px 20px;\n  border-radius: 6px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  font-weight: 500;\n  cursor: ${props => props.$disabled ? 'not-allowed' : 'pointer'};\n  border: none;\n  opacity: ${props => props.$disabled ? 0.6 : 1};\n  \n  ${props => props.$variant === 'primary' ? `\n    background-color: ${props.$disabled ? AppColors.primary + '80' : AppColors.primary};\n    color: ${AppColors.onPrimary};\n    \n    &:hover {\n      background-color: ${props.$disabled ? AppColors.primary : AppColors.primary + 'CC'};\n    }\n  ` : `\n    background-color: ${AppColors.surface};\n    color: ${AppColors.onSurface};\n    border: 1px solid ${AppColors.borderLight};\n    \n    &:hover {\n      background-color: ${props.$disabled ? AppColors.surface : AppColors.background};\n    }\n  `}\n`;\n\nconst WeeklyHolidayModal: React.FC<WeeklyHolidayModalProps> = ({\n  isOpen,\n  onClose,\n  staffId,\n  staffList,\n  currentUser,\n  onSave,\n  existingWeeklyHolidays = []\n}) => {\n  const [selectedStaffIds, setSelectedStaffIds] = useState<string[]>([]);\n  const [currentWeekStartDate, setCurrentWeekStartDate] = useState('');\n  const [weekDaySettings, setWeekDaySettings] = useState({\n    monday: false,\n    tuesday: false,\n    wednesday: false,\n    thursday: false,\n    friday: false,\n    saturday: true,  // 기본값: 주말 휴일\n    sunday: true     // 기본값: 주말 휴일\n  });\n  const [defaultStartTime, setDefaultStartTime] = useState(10);\n  const [defaultEndTime, setDefaultEndTime] = useState(20);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // 다음주 월요일 날짜 계산\n  const getNextMondayDate = (): string => {\n    const today = new Date();\n    const dayOfWeek = today.getDay();\n    const daysUntilNextMonday = dayOfWeek === 0 ? 1 : 8 - dayOfWeek;\n    const nextMonday = new Date(today);\n    nextMonday.setDate(today.getDate() + daysUntilNextMonday);\n    return nextMonday.toISOString().split('T')[0];\n  };\n\n  // 주 변경 함수\n  const changeWeek = (direction: 'prev' | 'next') => {\n    const currentDate = new Date(currentWeekStartDate + 'T00:00:00');\n    const newDate = new Date(currentDate);\n    newDate.setDate(currentDate.getDate() + (direction === 'next' ? 7 : -7));\n    setCurrentWeekStartDate(newDate.toISOString().split('T')[0]);\n  };\n\n  // 주 날짜 범위 표시\n  const getWeekDateRange = (): string => {\n    const startDate = new Date(currentWeekStartDate + 'T00:00:00');\n    const endDate = new Date(startDate);\n    endDate.setDate(startDate.getDate() + 6);\n    \n    const formatDate = (date: Date) => {\n      return `${date.getMonth() + 1}/${date.getDate()}`;\n    };\n    \n    return `${formatDate(startDate)} - ${formatDate(endDate)}`;\n  };\n\n  // 초기화\n  useEffect(() => {\n    if (isOpen) {\n      // 다음주 월요일로 초기 설정\n      const nextMonday = getNextMondayDate();\n      setCurrentWeekStartDate(nextMonday);\n      \n      // 직원 선택 초기화\n      if (staffId) {\n        setSelectedStaffIds([staffId]);\n      } else if (currentUser?.role === 'master') {\n        setSelectedStaffIds([]);\n      } else if (currentUser?.id) {\n        setSelectedStaffIds([currentUser.id]);\n      }\n\n      // 기본 근무시간 설정 (첫 번째 선택된 직원 기준)\n      const firstStaffId = staffId || selectedStaffIds[0];\n      if (firstStaffId) {\n        const staff = staffList.find(s => s.id === firstStaffId);\n        if (staff?.workingHours) {\n          setDefaultStartTime(staff.workingHours.start);\n          setDefaultEndTime(staff.workingHours.end);\n        }\n      }\n\n      setError(null);\n      setIsLoading(false);\n    }\n  }, [isOpen, staffId, currentUser, staffList, selectedStaffIds]);\n\n  // 기존 설정 로드\n  useEffect(() => {\n    if (isOpen && currentWeekStartDate && selectedStaffIds.length > 0) {\n      const existingSetting = existingWeeklyHolidays.find(\n        setting => setting.weekStartDate === currentWeekStartDate && \n                  selectedStaffIds.includes(setting.staffId)\n      );\n      \n      if (existingSetting) {\n        setWeekDaySettings(existingSetting.weekDays);\n        if (existingSetting.workingHours) {\n          setDefaultStartTime(existingSetting.workingHours.start);\n          setDefaultEndTime(existingSetting.workingHours.end);\n        }\n      } else {\n        // 기본값으로 리셋 (주말만 휴일)\n        setWeekDaySettings({\n          monday: false,\n          tuesday: false,\n          wednesday: false,\n          thursday: false,\n          friday: false,\n          saturday: true,\n          sunday: true\n        });\n      }\n    }\n  }, [isOpen, currentWeekStartDate, selectedStaffIds, existingWeeklyHolidays]);\n\n  const handleStaffToggle = (staffId: string) => {\n    setSelectedStaffIds(prev => \n      prev.includes(staffId)\n        ? prev.filter(id => id !== staffId)\n        : [...prev, staffId]\n    );\n  };\n\n  const handleDayToggle = (day: keyof typeof weekDaySettings) => {\n    setWeekDaySettings(prev => ({\n      ...prev,\n      [day]: !prev[day]\n    }));\n  };\n\n  const handleSave = async () => {\n    if (selectedStaffIds.length === 0) {\n      setError('코치를 선택해주세요.');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const settings: Omit<WeeklyHolidaySettings, 'id' | 'createdAt' | 'updatedAt'>[] = [];\n      \n      selectedStaffIds.forEach(staffId => {\n        settings.push({\n          staffId,\n          weekStartDate: currentWeekStartDate,\n          weekDays: weekDaySettings,\n          workingHours: {\n            start: defaultStartTime,\n            end: defaultEndTime\n          }\n        });\n      });\n      \n      await onSave(settings);\n      onClose();\n    } catch (error) {\n      console.error('주별 휴일 설정 저장 중 오류 발생:', error);\n      setError('휴일 설정 저장 중 오류가 발생했습니다. 다시 시도해주세요.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  const dayLabels = [\n    { key: 'monday' as const, label: '월요일', isWeekend: false },\n    { key: 'tuesday' as const, label: '화요일', isWeekend: false },\n    { key: 'wednesday' as const, label: '수요일', isWeekend: false },\n    { key: 'thursday' as const, label: '목요일', isWeekend: false },\n    { key: 'friday' as const, label: '금요일', isWeekend: false },\n    { key: 'saturday' as const, label: '토요일', isWeekend: true },\n    { key: 'sunday' as const, label: '일요일', isWeekend: true }\n  ];\n\n  return (\n    <ModalOverlay onClick={onClose}>\n      <ModalContainer onClick={e => e.stopPropagation()}>\n        <ModalHeader>\n          <ModalTitle>\n            {staffId ? `${staffList.find(s => s.id === staffId)?.name} 코치 주별 휴일설정` : '코치 주별 휴일설정'}\n          </ModalTitle>\n          <CloseButton onClick={onClose}>×</CloseButton>\n        </ModalHeader>\n        \n        <ModalBody>\n          {/* 에러 메시지 표시 */}\n          {error && (\n            <ErrorMessage>{error}</ErrorMessage>\n          )}\n\n          {/* 코치 선택 (master 권한인 경우만) */}\n          {currentUser?.role === 'master' && !staffId && (\n            <StaffSelector>\n              <SelectorTitle>코치 선택</SelectorTitle>\n              {staffList.map(staff => (\n                <StaffCheckbox key={staff.id}>\n                  <input\n                    type=\"checkbox\"\n                    id={`staff-${staff.id}`}\n                    checked={selectedStaffIds.includes(staff.id)}\n                    onChange={() => handleStaffToggle(staff.id)}\n                  />\n                  <label htmlFor={`staff-${staff.id}`}>{staff.name}</label>\n                </StaffCheckbox>\n              ))}\n            </StaffSelector>\n          )}\n\n          {/* 근무시간 설정 */}\n          <TimeSettingsSection>\n            <TimeSettingsTitle>기본 근무시간</TimeSettingsTitle>\n            <TimeInputContainer>\n              <label>시작 시간:</label>\n              <input\n                type=\"number\"\n                min=\"0\"\n                max=\"23\"\n                value={defaultStartTime}\n                onChange={(e) => setDefaultStartTime(Number(e.target.value))}\n              />\n              <span>시</span>\n            </TimeInputContainer>\n            <TimeInputContainer>\n              <label>종료 시간:</label>\n              <input\n                type=\"number\"\n                min=\"1\"\n                max=\"24\"\n                value={defaultEndTime}\n                onChange={(e) => setDefaultEndTime(Number(e.target.value))}\n              />\n              <span>시</span>\n            </TimeInputContainer>\n          </TimeSettingsSection>\n\n          {/* 주별 휴일설정 */}\n          <WeekSection>\n            <WeekHeader>\n              <WeekTitle>\n                {getWeekDateRange()}\n              </WeekTitle>\n              <div>\n                <WeekNavButton onClick={() => changeWeek('prev')}>이전주</WeekNavButton>\n                <WeekNavButton onClick={() => changeWeek('next')} style={{ marginLeft: '8px' }}>다음주</WeekNavButton>\n              </div>\n            </WeekHeader>\n            \n            <div style={{ fontSize: '14px', marginBottom: '12px', color: AppColors.onSurface + '80' }}>\n              체크하면 휴일, 체크 해제하면 근무일입니다.\n            </div>\n            \n            <WeekDaysContainer>\n              {dayLabels.map(({ key, label, isWeekend }) => (\n                <WeekDay key={key} $isWeekend={isWeekend} $isHoliday={weekDaySettings[key]}>\n                  <DayLabel $isWeekend={isWeekend} $isHoliday={weekDaySettings[key]}>\n                    {label}\n                  </DayLabel>\n                  <DayToggle>\n                    <input\n                      type=\"checkbox\"\n                      checked={weekDaySettings[key]}\n                      onChange={() => handleDayToggle(key)}\n                    />\n                    휴일\n                  </DayToggle>\n                </WeekDay>\n              ))}\n            </WeekDaysContainer>\n          </WeekSection>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button $variant=\"secondary\" onClick={onClose} $disabled={isLoading}>\n            취소\n          </Button>\n          <Button $variant=\"primary\" onClick={handleSave} $disabled={isLoading || selectedStaffIds.length === 0}>\n            {isLoading ? '저장 중...' : '저장'}\n          </Button>\n        </ModalFooter>\n      </ModalContainer>\n    </ModalOverlay>\n  );\n};\n\nexport default WeeklyHolidayModal;"
        }
    ]
}