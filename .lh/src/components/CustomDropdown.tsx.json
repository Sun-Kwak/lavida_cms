{
    "sourceFile": "src/components/CustomDropdown.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1759901894700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759907902474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,20 +68,20 @@\n   transition: transform 0.2s ease;\n   transform: ${props => props.$isOpen ? 'rotate(180deg)' : 'rotate(0deg)'};\n `;\n \n-const DropdownList = styled.div<{ $isOpen: boolean }>`\n-  position: absolute;\n-  top: calc(100% + 4px);\n-  left: 0;\n-  right: 0;\n+const DropdownList = styled.div<{ $isOpen: boolean; $top: number; $left: number; $width: number }>`\n+  position: fixed;\n+  top: ${props => props.$top}px;\n+  left: ${props => props.$left}px;\n+  width: ${props => props.$width}px;\n   max-height: 240px;\n   overflow-y: auto;\n   background: ${AppColors.surface};\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 12px;\n   box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n-  z-index: 1000;\n+  z-index: 9999;\n   opacity: ${props => props.$isOpen ? 1 : 0};\n   visibility: ${props => props.$isOpen ? 'visible' : 'hidden'};\n   transform: ${props => props.$isOpen ? 'translateY(0)' : 'translateY(-8px)'};\n   transition: all 0.2s ease;\n@@ -153,23 +153,53 @@\n   error = false,\n   required = false\n }) => {\n   const [isOpen, setIsOpen] = useState(false);\n+  const [dropdownPosition, setDropdownPosition] = useState({ top: 0, left: 0, width: 0 });\n   const dropdownRef = useRef<HTMLDivElement>(null);\n+  const buttonRef = useRef<HTMLButtonElement>(null);\n \n   useEffect(() => {\n     const handleClickOutside = (event: MouseEvent) => {\n       if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n         setIsOpen(false);\n       }\n     };\n \n+    const handleScroll = () => {\n+      if (isOpen) {\n+        updateDropdownPosition();\n+      }\n+    };\n+\n     document.addEventListener('mousedown', handleClickOutside);\n+    window.addEventListener('scroll', handleScroll, true);\n+    window.addEventListener('resize', handleScroll);\n+    \n     return () => {\n       document.removeEventListener('mousedown', handleClickOutside);\n+      window.removeEventListener('scroll', handleScroll, true);\n+      window.removeEventListener('resize', handleScroll);\n     };\n-  }, []);\n+  }, [isOpen]);\n \n+  const updateDropdownPosition = () => {\n+    if (buttonRef.current) {\n+      const rect = buttonRef.current.getBoundingClientRect();\n+      setDropdownPosition({\n+        top: rect.bottom + 4, // 4px gap\n+        left: rect.left,\n+        width: rect.width\n+      });\n+    }\n+  };\n+\n+  useEffect(() => {\n+    if (isOpen) {\n+      updateDropdownPosition();\n+    }\n+  }, [isOpen]);\n+\n   const selectedOption = options.find(option => option.value === value);\n   const displayText = selectedOption ? selectedOption.label : placeholder;\n \n   const handleToggle = () => {\n@@ -194,8 +224,9 @@\n \n   return (\n     <DropdownContainer ref={dropdownRef}>\n       <DropdownButton\n+        ref={buttonRef}\n         type=\"button\"\n         $isOpen={isOpen}\n         $hasValue={!!value}\n         $error={error}\n@@ -209,9 +240,15 @@\n         <span>{displayText}</span>\n         <DropdownArrow $isOpen={isOpen} />\n       </DropdownButton>\n       \n-      <DropdownList $isOpen={isOpen} role=\"listbox\">\n+      <DropdownList \n+        $isOpen={isOpen} \n+        $top={dropdownPosition.top}\n+        $left={dropdownPosition.left}\n+        $width={dropdownPosition.width}\n+        role=\"listbox\"\n+      >\n         {options.map((option) => (\n           <DropdownItem\n             key={option.value}\n             $isSelected={option.value === value}\n"
                },
                {
                    "date": 1759908013442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n   transition: transform 0.2s ease;\n   transform: ${props => props.$isOpen ? 'rotate(180deg)' : 'rotate(0deg)'};\n `;\n \n-const DropdownList = styled.div<{ $isOpen: boolean; $top: number; $left: number; $width: number }>`\n+const DropdownList = styled.div<{ $isOpen: boolean; $top: number; $left: number; $width: number; $hasPosition: boolean }>`\n   position: fixed;\n   top: ${props => props.$top}px;\n   left: ${props => props.$left}px;\n   width: ${props => props.$width}px;\n@@ -80,12 +80,12 @@\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 12px;\n   box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n   z-index: 9999;\n-  opacity: ${props => props.$isOpen ? 1 : 0};\n-  visibility: ${props => props.$isOpen ? 'visible' : 'hidden'};\n-  transform: ${props => props.$isOpen ? 'translateY(0)' : 'translateY(-8px)'};\n-  transition: all 0.2s ease;\n+  opacity: ${props => props.$isOpen && props.$hasPosition ? 1 : 0};\n+  visibility: ${props => props.$isOpen && props.$hasPosition ? 'visible' : 'hidden'};\n+  transform: ${props => props.$isOpen && props.$hasPosition ? 'translateY(0)' : 'translateY(-8px)'};\n+  transition: ${props => props.$hasPosition ? 'opacity 0.2s ease, visibility 0.2s ease, transform 0.2s ease' : 'none'};\n   \n   &::-webkit-scrollbar {\n     width: 6px;\n   }\n@@ -154,8 +154,9 @@\n   required = false\n }) => {\n   const [isOpen, setIsOpen] = useState(false);\n   const [dropdownPosition, setDropdownPosition] = useState({ top: 0, left: 0, width: 0 });\n+  const [hasPosition, setHasPosition] = useState(false);\n   const dropdownRef = useRef<HTMLDivElement>(null);\n   const buttonRef = useRef<HTMLButtonElement>(null);\n \n   useEffect(() => {\n@@ -165,9 +166,9 @@\n       }\n     };\n \n     const handleScroll = () => {\n-      if (isOpen) {\n+      if (isOpen && hasPosition) {\n         updateDropdownPosition();\n       }\n     };\n \n@@ -179,9 +180,9 @@\n       document.removeEventListener('mousedown', handleClickOutside);\n       window.removeEventListener('scroll', handleScroll, true);\n       window.removeEventListener('resize', handleScroll);\n     };\n-  }, [isOpen]);\n+  }, [isOpen, hasPosition]);\n \n   const updateDropdownPosition = () => {\n     if (buttonRef.current) {\n       const rect = buttonRef.current.getBoundingClientRect();\n@@ -189,14 +190,20 @@\n         top: rect.bottom + 4, // 4px gap\n         left: rect.left,\n         width: rect.width\n       });\n+      setHasPosition(true);\n     }\n   };\n \n   useEffect(() => {\n     if (isOpen) {\n-      updateDropdownPosition();\n+      // 위치 계산을 즉시 실행하고, 그 다음에 표시\n+      requestAnimationFrame(() => {\n+        updateDropdownPosition();\n+      });\n+    } else {\n+      setHasPosition(false);\n     }\n   }, [isOpen]);\n \n   const selectedOption = options.find(option => option.value === value);\n@@ -245,8 +252,9 @@\n         $isOpen={isOpen} \n         $top={dropdownPosition.top}\n         $left={dropdownPosition.left}\n         $width={dropdownPosition.width}\n+        $hasPosition={hasPosition}\n         role=\"listbox\"\n       >\n         {options.map((option) => (\n           <DropdownItem\n"
                },
                {
                    "date": 1759908057524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,24 +85,15 @@\n   visibility: ${props => props.$isOpen && props.$hasPosition ? 'visible' : 'hidden'};\n   transform: ${props => props.$isOpen && props.$hasPosition ? 'translateY(0)' : 'translateY(-8px)'};\n   transition: ${props => props.$hasPosition ? 'opacity 0.2s ease, visibility 0.2s ease, transform 0.2s ease' : 'none'};\n   \n+  /* 스크롤바 숨기기 */\n+  scrollbar-width: none; /* Firefox */\n+  -ms-overflow-style: none; /* IE/Edge */\n+  \n   &::-webkit-scrollbar {\n-    width: 6px;\n+    display: none; /* Chrome, Safari, Opera */\n   }\n-  \n-  &::-webkit-scrollbar-track {\n-    background: transparent;\n-  }\n-  \n-  &::-webkit-scrollbar-thumb {\n-    background: ${AppColors.borderLight};\n-    border-radius: 3px;\n-  }\n-  \n-  &::-webkit-scrollbar-thumb:hover {\n-    background: ${AppColors.onInput1};\n-  }\n `;\n \n const DropdownItem = styled.div<{ $isSelected: boolean }>`\n   padding: 14px 16px;\n"
                },
                {
                    "date": 1760078828590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-import React, { useState, useRef, useEffect } from 'react';\n+import React, { useState, useRef, useEffect, useCallback } from 'react';\n+import ReactDOM from 'react-dom';\n import styled from 'styled-components';\n import { AppColors } from '../styles/colors';\n import { AppTextStyles } from '../styles/textStyles';\n \n@@ -16,13 +17,16 @@\n   placeholder?: string;\n   disabled?: boolean;\n   error?: boolean;\n   required?: boolean;\n+  inModal?: boolean; // 모달 내부에서 사용되는지 여부\n }\n \n const DropdownContainer = styled.div`\n   position: relative;\n   width: 100%;\n+  /* 모달 내부에서 overflow visible 유지 */\n+  overflow: visible;\n `;\n \n const DropdownButton = styled.button<{ $isOpen: boolean; $hasValue: boolean; $error?: boolean }>`\n   width: 100%;\n@@ -68,24 +72,24 @@\n   transition: transform 0.2s ease;\n   transform: ${props => props.$isOpen ? 'rotate(180deg)' : 'rotate(0deg)'};\n `;\n \n-const DropdownList = styled.div<{ $isOpen: boolean; $top: number; $left: number; $width: number; $hasPosition: boolean }>`\n-  position: fixed;\n-  top: ${props => props.$top}px;\n-  left: ${props => props.$left}px;\n-  width: ${props => props.$width}px;\n+const DropdownList = styled.div<{ $isOpen: boolean; $inModal?: boolean; $top?: number; $left?: number; $width?: number }>`\n+  position: fixed; /* Portal을 사용하므로 항상 fixed */\n+  top: ${props => `${props.$top || 0}px`};\n+  left: ${props => `${props.$left || 0}px`};\n+  width: ${props => `${props.$width || 100}px`};\n   max-height: 240px;\n   overflow-y: auto;\n   background: ${AppColors.surface};\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 12px;\n   box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n-  z-index: 9999;\n-  opacity: ${props => props.$isOpen && props.$hasPosition ? 1 : 0};\n-  visibility: ${props => props.$isOpen && props.$hasPosition ? 'visible' : 'hidden'};\n-  transform: ${props => props.$isOpen && props.$hasPosition ? 'translateY(0)' : 'translateY(-8px)'};\n-  transition: ${props => props.$hasPosition ? 'opacity 0.2s ease, visibility 0.2s ease, transform 0.2s ease' : 'none'};\n+  z-index: 10001; /* 모달보다 높은 z-index */\n+  opacity: ${props => props.$isOpen ? 1 : 0};\n+  visibility: ${props => props.$isOpen ? 'visible' : 'hidden'};\n+  transform: ${props => props.$isOpen ? 'translateY(0)' : 'translateY(-8px)'};\n+  transition: opacity 0.2s ease, visibility 0.2s ease, transform 0.2s ease;\n   \n   /* 스크롤바 숨기기 */\n   scrollbar-width: none; /* Firefox */\n   -ms-overflow-style: none; /* IE/Edge */\n@@ -141,16 +145,29 @@\n   options,\n   placeholder = \"선택하세요\",\n   disabled = false,\n   error = false,\n-  required = false\n+  required = false,\n+  inModal = false\n }) => {\n   const [isOpen, setIsOpen] = useState(false);\n   const [dropdownPosition, setDropdownPosition] = useState({ top: 0, left: 0, width: 0 });\n   const [hasPosition, setHasPosition] = useState(false);\n   const dropdownRef = useRef<HTMLDivElement>(null);\n   const buttonRef = useRef<HTMLButtonElement>(null);\n \n+  const updateDropdownPosition = useCallback(() => {\n+    if (buttonRef.current) {\n+      const rect = buttonRef.current.getBoundingClientRect();\n+      setDropdownPosition({\n+        top: rect.bottom + 4, // 4px gap\n+        left: rect.left,\n+        width: rect.width\n+      });\n+      setHasPosition(true);\n+    }\n+  }, []);\n+\n   useEffect(() => {\n     const handleClickOutside = (event: MouseEvent) => {\n       if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n         setIsOpen(false);\n@@ -171,22 +188,10 @@\n       document.removeEventListener('mousedown', handleClickOutside);\n       window.removeEventListener('scroll', handleScroll, true);\n       window.removeEventListener('resize', handleScroll);\n     };\n-  }, [isOpen, hasPosition]);\n+  }, [isOpen, hasPosition, updateDropdownPosition]);\n \n-  const updateDropdownPosition = () => {\n-    if (buttonRef.current) {\n-      const rect = buttonRef.current.getBoundingClientRect();\n-      setDropdownPosition({\n-        top: rect.bottom + 4, // 4px gap\n-        left: rect.left,\n-        width: rect.width\n-      });\n-      setHasPosition(true);\n-    }\n-  };\n-\n   useEffect(() => {\n     if (isOpen) {\n       // 위치 계산을 즉시 실행하고, 그 다음에 표시\n       requestAnimationFrame(() => {\n@@ -194,9 +199,9 @@\n       });\n     } else {\n       setHasPosition(false);\n     }\n-  }, [isOpen]);\n+  }, [isOpen, updateDropdownPosition]);\n \n   const selectedOption = options.find(option => option.value === value);\n   const displayText = selectedOption ? selectedOption.label : placeholder;\n \n@@ -219,33 +224,16 @@\n       setIsOpen(false);\n     }\n   };\n \n-  return (\n-    <DropdownContainer ref={dropdownRef}>\n-      <DropdownButton\n-        ref={buttonRef}\n-        type=\"button\"\n-        $isOpen={isOpen}\n-        $hasValue={!!value}\n-        $error={error}\n-        disabled={disabled}\n-        onClick={handleToggle}\n-        onKeyDown={handleKeyDown}\n-        aria-expanded={isOpen}\n-        aria-haspopup=\"listbox\"\n-        aria-required={required}\n-      >\n-        <span>{displayText}</span>\n-        <DropdownArrow $isOpen={isOpen} />\n-      </DropdownButton>\n-      \n+  const renderDropdownList = () => {\n+    const dropdownContent = (\n       <DropdownList \n-        $isOpen={isOpen} \n+        $isOpen={isOpen && hasPosition}\n+        $inModal={inModal}\n         $top={dropdownPosition.top}\n         $left={dropdownPosition.left}\n         $width={dropdownPosition.width}\n-        $hasPosition={hasPosition}\n         role=\"listbox\"\n       >\n         {options.map((option) => (\n           <DropdownItem\n@@ -263,8 +251,39 @@\n             </OptionContent>\n           </DropdownItem>\n         ))}\n       </DropdownList>\n+    );\n+\n+    // 모달 내부에서는 Portal을 사용해서 body에 렌더링\n+    if (inModal && typeof window !== 'undefined') {\n+      return ReactDOM.createPortal(dropdownContent, document.body);\n+    }\n+\n+    // 모달 외부에서는 일반적으로 렌더링\n+    return dropdownContent;\n+  };\n+\n+  return (\n+    <DropdownContainer ref={dropdownRef}>\n+      <DropdownButton\n+        ref={buttonRef}\n+        type=\"button\"\n+        $isOpen={isOpen}\n+        $hasValue={!!value}\n+        $error={error}\n+        disabled={disabled}\n+        onClick={handleToggle}\n+        onKeyDown={handleKeyDown}\n+        aria-expanded={isOpen}\n+        aria-haspopup=\"listbox\"\n+        aria-required={required}\n+      >\n+        <span>{displayText}</span>\n+        <DropdownArrow $isOpen={isOpen} />\n+      </DropdownButton>\n+      \n+      {renderDropdownList()}\n     </DropdownContainer>\n   );\n };\n \n"
                }
            ],
            "date": 1759901894700,
            "name": "Commit-0",
            "content": "import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../styles/colors';\nimport { AppTextStyles } from '../styles/textStyles';\n\ninterface DropdownOption {\n  value: string;\n  label: string;\n  description?: string;\n}\n\ninterface CustomDropdownProps {\n  value: string;\n  onChange: (value: string) => void;\n  options: DropdownOption[];\n  placeholder?: string;\n  disabled?: boolean;\n  error?: boolean;\n  required?: boolean;\n}\n\nconst DropdownContainer = styled.div`\n  position: relative;\n  width: 100%;\n`;\n\nconst DropdownButton = styled.button<{ $isOpen: boolean; $hasValue: boolean; $error?: boolean }>`\n  width: 100%;\n  min-height: 48px;\n  padding: 14px 16px 14px 16px;\n  border: 1px solid ${props => props.$error ? AppColors.error : AppColors.borderLight};\n  border-radius: 12px;\n  background: ${AppColors.surface};\n  color: ${props => props.$hasValue ? AppColors.onSurface : AppColors.onInput1};\n  font-size: ${AppTextStyles.body1.fontSize};\n  text-align: left;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  &:hover {\n    border-color: ${props => props.$error ? AppColors.error : AppColors.primary};\n    box-shadow: 0 2px 8px rgba(55, 187, 214, 0.1);\n  }\n  \n  &:focus {\n    outline: none;\n    border-color: ${props => props.$error ? AppColors.error : AppColors.primary};\n    box-shadow: 0 0 0 3px rgba(55, 187, 214, 0.1);\n  }\n  \n  &:disabled {\n    background-color: ${AppColors.background};\n    color: ${AppColors.disabled};\n    cursor: not-allowed;\n    border-color: ${AppColors.borderLight};\n  }\n`;\n\nconst DropdownArrow = styled.div<{ $isOpen: boolean }>`\n  width: 0;\n  height: 0;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid ${AppColors.onInput1};\n  transition: transform 0.2s ease;\n  transform: ${props => props.$isOpen ? 'rotate(180deg)' : 'rotate(0deg)'};\n`;\n\nconst DropdownList = styled.div<{ $isOpen: boolean }>`\n  position: absolute;\n  top: calc(100% + 4px);\n  left: 0;\n  right: 0;\n  max-height: 240px;\n  overflow-y: auto;\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 12px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n  opacity: ${props => props.$isOpen ? 1 : 0};\n  visibility: ${props => props.$isOpen ? 'visible' : 'hidden'};\n  transform: ${props => props.$isOpen ? 'translateY(0)' : 'translateY(-8px)'};\n  transition: all 0.2s ease;\n  \n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n  \n  &::-webkit-scrollbar-track {\n    background: transparent;\n  }\n  \n  &::-webkit-scrollbar-thumb {\n    background: ${AppColors.borderLight};\n    border-radius: 3px;\n  }\n  \n  &::-webkit-scrollbar-thumb:hover {\n    background: ${AppColors.onInput1};\n  }\n`;\n\nconst DropdownItem = styled.div<{ $isSelected: boolean }>`\n  padding: 14px 16px;\n  color: ${AppColors.onSurface};\n  font-size: ${AppTextStyles.body1.fontSize};\n  cursor: pointer;\n  transition: all 0.15s ease;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  \n  &:last-child {\n    border-bottom: none;\n  }\n  \n  &:hover {\n    background-color: ${AppColors.primary}08;\n    color: ${AppColors.primary};\n  }\n  \n  ${props => props.$isSelected && `\n    background-color: ${AppColors.primary}15;\n    color: ${AppColors.primary};\n    font-weight: 500;\n  `}\n`;\n\nconst OptionContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n`;\n\nconst OptionLabel = styled.div`\n  font-weight: 500;\n`;\n\nconst OptionDescription = styled.div`\n  font-size: ${AppTextStyles.label3.fontSize};\n  color: ${AppColors.onInput1};\n  opacity: 0.8;\n`;\n\nconst CustomDropdown: React.FC<CustomDropdownProps> = ({\n  value,\n  onChange,\n  options,\n  placeholder = \"선택하세요\",\n  disabled = false,\n  error = false,\n  required = false\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const selectedOption = options.find(option => option.value === value);\n  const displayText = selectedOption ? selectedOption.label : placeholder;\n\n  const handleToggle = () => {\n    if (!disabled) {\n      setIsOpen(!isOpen);\n    }\n  };\n\n  const handleOptionClick = (optionValue: string) => {\n    onChange(optionValue);\n    setIsOpen(false);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      handleToggle();\n    } else if (event.key === 'Escape') {\n      setIsOpen(false);\n    }\n  };\n\n  return (\n    <DropdownContainer ref={dropdownRef}>\n      <DropdownButton\n        type=\"button\"\n        $isOpen={isOpen}\n        $hasValue={!!value}\n        $error={error}\n        disabled={disabled}\n        onClick={handleToggle}\n        onKeyDown={handleKeyDown}\n        aria-expanded={isOpen}\n        aria-haspopup=\"listbox\"\n        aria-required={required}\n      >\n        <span>{displayText}</span>\n        <DropdownArrow $isOpen={isOpen} />\n      </DropdownButton>\n      \n      <DropdownList $isOpen={isOpen} role=\"listbox\">\n        {options.map((option) => (\n          <DropdownItem\n            key={option.value}\n            $isSelected={option.value === value}\n            onClick={() => handleOptionClick(option.value)}\n            role=\"option\"\n            aria-selected={option.value === value}\n          >\n            <OptionContent>\n              <OptionLabel>{option.label}</OptionLabel>\n              {option.description && (\n                <OptionDescription>{option.description}</OptionDescription>\n              )}\n            </OptionContent>\n          </DropdownItem>\n        ))}\n      </DropdownList>\n    </DropdownContainer>\n  );\n};\n\nexport default CustomDropdown;\n"
        }
    ]
}