{
    "sourceFile": "src/components/CustomList/GenericListUI.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757743354394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757743354394,
            "name": "Commit-0",
            "content": "'use client';\n\nimport React, {\n  useImperativeHandle,\n  forwardRef,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  useRef,\n} from 'react';\nimport styled from 'styled-components';\nimport dayjs from 'dayjs';\nimport * as XLSX from 'xlsx';\nimport GenericDataTable, { ColumnDefinition } from './GenericDataTable'; // 경로 확인\nimport GenericDateRangePicker from './GenericDateRangePicker'; // 경로 확인\nimport DropdownCustom from './DropdownCustom';\nimport { devError, devWarn } from '../../utils/devLogger';\nimport { THEME_COLORS, ThemeMode } from '../../styles/theme_colors';\nimport ActionButton from '../ActionButton';\n\ninterface ButtonProp {\n  label: string;\n  onClick: () => void;\n}\n\n// Helper: getPropertyValue (기존 유지, UserListPage 버전 개선 적용)\nconst getPropertyValue = <T extends object>(obj: T, path: keyof T | string): any => {\n  if (!obj) return undefined;\n  if (typeof path === 'string' && path in obj) {\n    return obj[path as keyof T];\n  }\n  if (typeof path === 'number' || typeof path === 'symbol') {\n    return obj[path as keyof T];\n  }\n  if (typeof path === 'string' && path.includes('.')) {\n    const keys = path.split('.');\n    let value: any = obj;\n    for (const key of keys) {\n      if (value === null || typeof value !== 'object' || !(key in value)) {\n        return undefined;\n      }\n      value = value[key];\n    }\n    return value;\n  }\n  return undefined;\n};\n\n// --- Component Props ---\ninterface BaseRecord {\n  id?: string | number; // 기본 ID 필드 가정 (keyExtractor 대체용)\n  index?: number; // index 필드도 고려\n  [key: string]: any; // 다른 필드 허용\n}\n\n// API Fetch 함수 타입 정의 (수정: 페이지/정렬 파라미터 제거)\nexport interface FetchParams {\n  fromDate?: string; // Optional\n  toDate?: string; // Optional\n  keyword?: string; // Optional\n  status?: string; // 상태 필터 값 추가\n}\n\nexport interface FetchResult<T> {\n  data: T[];\n  totalItems: number; // 필터링된 총 아이템 수\n  allItems?: number; // 필터링 전 전체 아이템 수 (Optional)\n}\n\n// 초기 상태 타입\ninterface InitialState {\n  page?: number;\n  size?: number;\n  sortKey?: string | null;\n  sortOrder?: 'asc' | 'desc';\n  fromDate?: string;\n  toDate?: string;\n  keyword?: string;\n}\n\n// GenericListUI Props 정의 (수정)\ninterface GenericListUIProps<T extends BaseRecord> {\n  title: React.ReactNode;\n  columns: ColumnDefinition<T>[];\n  fetchData: (params: FetchParams) => Promise<FetchResult<T>>;\n  excelFileName?: string;\n  customLeftContent?: React.ReactNode; // 총정산액 대신 사용할 커스텀 컨텐츠\n  totalAmountLabel?: string; // 총액 레이블 (예: \"총정산액\")\n  totalAmount?: string; // 총액 값 (예: \"4억 567만원\")\n  // 두 개의 금액을 표시하기 위한 새로운 props\n  dualAmounts?: {\n    first: { label: string; value: string };\n    second: { label: string; value: string };\n  };\n\n  // 상태 필터 관련 props 추가\n  statusFilter?: {\n    options: { label: string; value: string }[];\n    defaultValue?: string;\n  };\n\n  // 새로 변경된 props\n  addButton?: ButtonProp;\n  deleteButton?: ButtonProp;\n  customButtons?: ButtonProp[]; // 커스텀 버튼들 배열 추가\n  excelTemplateButton?: ButtonProp;\n  excelUploadButton?: ButtonProp;\n\n  initialState?: InitialState;\n  hasUrlParams?: boolean; // URL 파라미터 존재 여부를 확인하는 prop 추가\n  keyExtractor?: (item: T, index: number) => string | number;\n  enableSearch?: boolean;\n  searchPlaceholder?: string;\n  enableDateFilter?: boolean;\n  dateRangeOptions?: ('금월' | '지난달' | '3개월' | '6개월' | '1년' | '2년' | '지정')[];\n  itemsPerPageOptions?: number[];\n  themeMode?: ThemeMode;\n  onRowClick?: (item: T, rowIndex: number) => void;\n  renderTabs?: () => React.ReactNode;\n  refreshTrigger?: number; // 목록 새로고침을 위한 트리거\n}\n\n// 등록, 템플릿 버튼 (밝은 톤)\nconst PrimaryButton = styled(ActionButton)<{ $themeMode: ThemeMode }>`\n  width: 110px;\n  height: 40px;\n  background: #214a72;\n  color: #ffffff;\n  border: none;\n  &:hover:not(:disabled) {\n    background-color: ${({ $themeMode }) => ($themeMode === 'light' ? '#1a3c5e' : '#1a3c5e')};\n  }\n`;\n\n// 삭제, 업로드 버튼 (어두운 톤)\nconst SecondaryButton = styled(ActionButton)<{ $themeMode: ThemeMode }>`\n  width: 110px;\n  height: 40px;\n  background: ${({ $themeMode }) => ($themeMode === 'light' ? '#eeeeee' : '#333333')};\n  color: ${({ $themeMode }) => ($themeMode === 'light' ? '#333333' : '#eeeeee')};\n  border: none;\n  &:hover:not(:disabled) {\n    background-color: ${({ $themeMode }) => ($themeMode === 'light' ? '#dddddd' : '#555555')};\n  }\n`;\n\n// 다운로드 버튼 (특정 색)\nconst DownloadButton = styled(ActionButton)`\n  width: 110px;\n  height: 40px;\n  background: #51815a;\n  color: #ffffff;\n  border: none;\n  &:hover:not(:disabled) {\n    background-color: #446b4c;\n    color: #ffffff;\n  }\n`;\n\n// 상태별 색상 정의 추가\nconst STATUS_COLORS = {\n  '': '#887e67', // 전체\n  ONGOING: '#4CAF50', // 진행중 - 초록색\n  ENDED: '#2196F3', // 종료 - 파란색\n  WAITING: '#FF9800', // 대기중 - 주황색\n  CANCELED: '#F44336', // 취소 - 빨간색\n};\n\n// --- The Component --- (상태 및 로직 대폭 수정)\nconst GenericListUIInner = <T extends BaseRecord>(\n  {\n    title,\n    columns,\n    fetchData,\n    excelFileName = 'DataExport',\n    totalAmountLabel,\n    totalAmount,\n    dualAmounts,\n    initialState = {},\n    hasUrlParams = false, // 기본값 false\n    keyExtractor,\n    enableSearch = true,\n    searchPlaceholder = '검색어를 입력해주세요',\n    enableDateFilter = true,\n    dateRangeOptions = ['금월', '지난달', '1년', '지정'],\n    itemsPerPageOptions = [12, 30, 50, 100],\n    themeMode = 'light',\n    onRowClick,\n    renderTabs,\n    addButton,\n    deleteButton,\n    customButtons = [], // 기본값을 빈 배열로 설정\n    excelTemplateButton,\n    excelUploadButton,\n    refreshTrigger,\n    statusFilter,\n    customLeftContent,\n  }: GenericListUIProps<T>,\n  ref: React.Ref<{ refetch: () => void }>\n) => {\n  // --- 내부 상태 --- (데이터 상태 추가, API 호출 관련 상태 제거)\n  const [allData, setAllData] = useState<T[]>([]); // API로부터 받은 전체 데이터\n  const [totalItems, setTotalItems] = useState(0); // 필터링된 아이템 수 (API 메타데이터 기준)\n  const [allItems, setAllItems] = useState<number | undefined>(undefined); // 전체 아이템 수 (API 메타데이터 기준)\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // 초기 날짜 설정 함수\n  const getInitialDates = useCallback(() => {\n    // initialState에 날짜가 있으면 그 값을 사용\n    if (initialState.fromDate && initialState.toDate) {\n      return {\n        fromDate: initialState.fromDate,\n        toDate: initialState.toDate,\n      };\n    }\n    // 없으면 첫번째 옵션으로 계산\n    const today = dayjs();\n    const firstOption = dateRangeOptions[0];\n\n    switch (firstOption) {\n      case '금월':\n        return {\n          fromDate: today.startOf('month').format('YYYY-MM-DD'),\n          toDate: today.format('YYYY-MM-DD'),\n        };\n      case '6개월':\n        return {\n          fromDate: today.subtract(6, 'month').format('YYYY-MM-DD'),\n          toDate: today.format('YYYY-MM-DD'),\n        };\n      case '1년':\n        return {\n          fromDate: today.subtract(1, 'year').format('YYYY-MM-DD'),\n          toDate: today.format('YYYY-MM-DD'),\n        };\n      case '2년':\n        return {\n          fromDate: today.subtract(2, 'year').format('YYYY-MM-DD'),\n          toDate: today.format('YYYY-MM-DD'),\n        };\n      default:\n        // \"지정\" 또는 기타의 경우, 기본값(금월)으로 설정\n        return {\n          fromDate: today.startOf('month').format('YYYY-MM-DD'),\n          toDate: today.format('YYYY-MM-DD'),\n        };\n    }\n  }, [dateRangeOptions, initialState.fromDate, initialState.toDate]);\n\n  const initialDates = useMemo(() => getInitialDates(), [getInitialDates]);\n\n  // UI 제어 상태 (페이지네이션, 정렬, 필터)\n  const [currentPage, setCurrentPage] = useState(initialState.page ?? 1);\n  const [itemsPerPage, setItemsPerPage] = useState(\n    initialState.size ?? itemsPerPageOptions[0] ?? 12\n  );\n  const [sortKey, setSortKey] = useState<string | null>(initialState.sortKey ?? null); // 기본 정렬 없음\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>(initialState.sortOrder ?? 'asc');\n  const [fromDate, setFromDate] = useState(initialDates.fromDate);\n  const [toDate, setToDate] = useState(initialDates.toDate);\n  const [searchTermInput, setSearchTermInput] = useState(initialState.keyword ?? ''); // 검색 \"입력\" 상태\n  const [searchKeyword, setSearchKeyword] = useState(initialState.keyword ?? ''); // 실제 \"적용된\" 검색어\n\n  // 상태 필터 state 추가\n  const [selectedStatus, setSelectedStatus] = useState(statusFilter?.defaultValue || '');\n\n  // 필터링된 데이터를 계산하는 useMemo 추가\n  const filteredData = useMemo(() => {\n    if (!selectedStatus) return allData;\n    return allData.filter((item: any) => {\n      // signupStatus나 status 필드에서 상태값 확인\n      const itemStatus = item.signupStatus || item.status;\n      return itemStatus === selectedStatus;\n    });\n  }, [allData, selectedStatus]);\n\n  // --- 데이터 로딩 콜백 --- (API 호출 시점 변경)\n  const executeFetch = (fetchParams: FetchParams) => {\n    setIsLoading(true);\n    setError(null);\n    fetchData(fetchParams)\n      .then(result => {\n        setAllData(result.data);\n        setTotalItems(result.totalItems);\n        setAllItems(result.allItems);\n        setCurrentPage(1);\n      })\n      .catch(error => {\n        devError('Error fetching data:', error);\n        setError(error.message || '데이터를 불러오는 중 오류가 발생했습니다.');\n        setAllData([]);\n        setTotalItems(0);\n        setAllItems(undefined);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  // fetchDataCallback을 useRef로 변경하여 의존성 순환 문제 해결\n  const fetchDataCallbackRef = useRef<(() => void) | null>(null);\n  \n  fetchDataCallbackRef.current = () => {\n    const params: FetchParams = {\n      keyword: searchKeyword || undefined,\n    };\n    if (enableDateFilter) {\n      params.fromDate = fromDate;\n      params.toDate = toDate;\n    }\n    executeFetch(params);\n  };\n\n  const fetchDataCallback = useCallback(() => {\n    fetchDataCallbackRef.current?.();\n  }, []);\n\n  useImperativeHandle(ref, () => ({\n    refetch: () => {\n      fetchDataCallback(); // 내부 API 호출\n    },\n  }));\n\n  // 초기 로딩 및 데이터 fetch 통합 관리\n  const [hasInitialLoaded, setHasInitialLoaded] = useState(false);\n  \n  // enableDateFilter={false}인 경우 초기 API 호출\n  useEffect(() => {\n    if (!enableDateFilter && !hasInitialLoaded) {\n      const params: FetchParams = {\n        keyword: searchKeyword,\n      };\n      executeFetch(params);\n      setHasInitialLoaded(true);\n    }\n  }, [enableDateFilter, hasInitialLoaded, searchKeyword]);\n  \n  // GenericDateRangePicker에서 onDateChange가 호출되면 초기 로딩 완료로 처리\n  const handleDateChangeInternal = (newFrom: string, newTo: string) => {\n    // 상태 업데이트\n    setFromDate(newFrom);\n    setToDate(newTo);\n    setHasInitialLoaded(true); // 첫 번째 onDateChange 호출 시 초기 로딩 완료\n\n    // 새로운 값으로 직접 API 호출\n    const params: FetchParams = {\n      fromDate: newFrom,\n      toDate: newTo,\n      keyword: searchKeyword,\n    };\n    if (selectedStatus) {\n      params.status = selectedStatus;\n    }\n    executeFetch(params);\n  };\n\n  // refreshTrigger가 변경될 때만 목록 새로고침 (초기 로딩과 분리)\n  useEffect(() => {\n    if (refreshTrigger !== undefined && hasInitialLoaded) {\n      fetchDataCallback();\n    }\n  }, [refreshTrigger]); // hasInitialLoaded, fetchDataCallback 의존성 제거\n\n  // 상태 변경 핸들러 추가\n  const handleStatusChange = (newStatus: string) => {\n    setSelectedStatus(newStatus);\n    setCurrentPage(1); // 상태 변경시 1페이지로 이동\n  };\n\n  // --- 클라이언트 측 데이터 처리 --- (정렬, 페이지네이션)\n  // sortedData의 기반 데이터를 allData에서 filteredData로 변경\n  const sortedData = useMemo(() => {\n    const sortableData = [...filteredData]; // allData 대신 filteredData 사용\n    if (sortKey) {\n      sortableData.sort((a, b) => {\n        const valA = getPropertyValue(a, sortKey);\n        const valB = getPropertyValue(b, sortKey);\n        let comparison = 0;\n        if (valA === null || valA === undefined) comparison = -1;\n        else if (valB === null || valB === undefined) comparison = 1;\n        else if (dayjs.isDayjs(valA) && dayjs.isDayjs(valB))\n          comparison = valA.valueOf() - valB.valueOf();\n        else if (typeof valA === 'string' && typeof valB === 'string')\n          comparison = valA.localeCompare(valB);\n        else if (typeof valA === 'number' && typeof valB === 'number') comparison = valA - valB;\n        else comparison = String(valA).localeCompare(String(valB));\n        return sortOrder === 'asc' ? comparison : comparison * -1;\n      });\n    }\n    return sortableData;\n  }, [filteredData, sortKey, sortOrder]);\n\n  const paginatedData = useMemo(() => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    return sortedData.slice(startIndex, startIndex + itemsPerPage);\n  }, [sortedData, currentPage, itemsPerPage]);\n\n  // --- 파생 상태 (페이지네이션) ---\n  // totalItems는 API 결과의 메타데이터 사용 (필터링된 개수)\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  const displayTotalItems = totalItems;\n  const displayAllItems = allItems ?? totalItems;\n\n  // totalItems 계산 로직 수정\n  useEffect(() => {\n    setTotalItems(filteredData.length);\n  }, [filteredData]);\n\n  // --- 이벤트 핸들러 (수정) ---\n  // 페이지 변경: 상태만 업데이트\n  const handlePageNumChange = (newPage: number) => {\n    if (newPage >= 1 && newPage <= totalPages && newPage !== currentPage) {\n      setCurrentPage(newPage);\n    }\n  };\n  // 페이지 크기 변경: 상태만 업데이트\n  const handleItemsPerPageChange = (newSize: number) => {\n    if (newSize !== itemsPerPage) {\n      setItemsPerPage(newSize);\n      setCurrentPage(1);\n    }\n  };\n  // 정렬 변경: 상태만 업데이트\n  const handleHeaderClick = (accessor: keyof T | string) => {\n    const newSortOrder = sortKey === accessor && sortOrder === 'asc' ? 'desc' : 'asc';\n    setSortKey(accessor as string);\n    setSortOrder(newSortOrder);\n    setCurrentPage(1); // 정렬 시 1페이지로\n  };\n\n  // 검색어 입력: 입력 상태만 업데이트 (API 호출 없음)\n  const handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTermInput(e.target.value);\n  };\n  // 조회 버튼 클릭: 적용된 검색어 업데이트 + API 호출\n  const handleImmediateSearch = () => {\n    const newKeyword = searchTermInput.trim();\n    setSearchKeyword(newKeyword);\n    const params: FetchParams = {\n      keyword: newKeyword,\n    };\n    if (enableDateFilter) {\n      params.fromDate = fromDate;\n      params.toDate = toDate;\n    }\n    if (selectedStatus) {\n      params.status = selectedStatus;\n    }\n    executeFetch(params);\n  };\n\n  // 엑셀 다운로드 핸들러 (수정: 클라이언트 데이터 사용)\n  const handleDownloadClick = () => {\n    setIsLoading(true); // 로딩 표시 (데이터 준비 중)\n    try {\n      // 정렬된 전체 데이터 사용 (페이지네이션 전)\n      const dataToDownload = sortedData;\n\n      if (!dataToDownload || dataToDownload.length === 0) {\n        devWarn('다운로드할 데이터가 없습니다.');\n        alert('다운로드할 데이터가 없습니다.'); // 임시\n        return;\n      }\n\n      // 컬럼 정보를 사용하여 데이터 포맷팅 (showColumn이 false인 컬럼은 제외)\n      const formattedData = dataToDownload.map(item => {\n        const row: { [key: string]: any } = {};\n        columns.forEach(col => {\n          // showColumn이 false인 경우 엑셀에서 제외 (기본값은 true)\n          if (col.showColumn === false) {\n            return;\n          }\n          \n          if (col.accessor) {\n            let value = getPropertyValue(item, col.accessor);\n            \n            // Excel 전용 포맷터가 있는 경우 사용\n            if (col.excelFormatter && typeof col.excelFormatter === 'function') {\n              value = col.excelFormatter(value, item);\n            }\n            // Excel 전용 포맷터가 없는 경우, 원본 값 사용 (기본 포맷팅만 적용)\n            else {\n              // 기본 데이터 타입 포맷팅만 적용\n              if (value instanceof Date) value = dayjs(value).format('YYYY-MM-DD HH:mm:ss');\n              else if (typeof value === 'boolean') value = value ? 'Y' : 'N';\n              else if (value === null || value === undefined) value = '';\n              // formatter가 있어도 Excel에서는 원본 값 사용\n            }\n            \n            const headerName =\n              typeof col.header === 'string'\n                ? col.header.replace(/\\n/g, ' ')\n                : String(col.accessor);\n            \n            // URL 패턴을 감지하여 하이퍼링크로 변환\n            if (typeof value === 'string' && (value.startsWith('http://') || value.startsWith('https://'))) {\n              row[headerName] = { t: 's', v: value, l: { Target: value } };\n            } else {\n              row[headerName] = value;\n            }\n          }\n        });\n        return row;\n      });\n\n      const ws = XLSX.utils.json_to_sheet(formattedData);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n      XLSX.writeFile(wb, `${excelFileName}_${dayjs().format('YYYYMMDD')}.xlsx`);\n      alert('엑셀이 다운로드되었습니다.'); // 임시\n    } catch (err) {\n      devError('Excel download failed:', err);\n      alert('엑셀 다운로드 중 오류가 발생했습니다.'); // 임시\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // --- 행 클릭 핸들러 (기존 유지) ---\n  const handleRowClickInternal = useCallback(\n    (item: T, index: number) => {\n      if (onRowClick) {\n        onRowClick(item, index); // 부모 컴포넌트의 onRowClick 함수 호출\n      }\n    },\n    [onRowClick]\n  );\n\n  // --- 키 추출기 (기존 유지) ---\n  const internalKeyExtractor = useMemo(() => {\n    if (keyExtractor) return keyExtractor;\n    // 기본 keyExtractor: item.id 또는 item.index 사용 시도\n    return (item: T, index: number) => item.id ?? item.index ?? `row-${index}`;\n  }, [keyExtractor]);\n\n  return (\n    <Container $themeMode={themeMode}>\n      <ControlHeader>\n        <APIControls>\n          <LeftFilterControls>\n            {enableDateFilter && (\n              <DateRangePickerContainer>\n                <GenericDateRangePicker\n                  initialFromDate={fromDate}\n                  initialToDate={toDate}\n                  onDateChange={handleDateChangeInternal}\n                  themeMode={themeMode}\n                  rangeOptions={dateRangeOptions}\n                  hasUrlParams={hasUrlParams}\n                />\n              </DateRangePickerContainer>\n            )}\n          </LeftFilterControls>\n          \n          <RightFilterControls>\n            {statusFilter && (\n              <StatusFilterContainer>\n                <StatusSelect\n                  value={selectedStatus}\n                  onChange={e => handleStatusChange(e.target.value)}\n                  $themeMode={themeMode}\n                  style={{\n                    color:\n                      STATUS_COLORS[selectedStatus as keyof typeof STATUS_COLORS] ||\n                      STATUS_COLORS[''],\n                  }}\n                >\n                  {statusFilter.options.map(option => (\n                    <option\n                      key={option.value}\n                      value={option.value}\n                      style={{\n                        color:\n                          STATUS_COLORS[option.value as keyof typeof STATUS_COLORS] ||\n                          STATUS_COLORS[''],\n                      }}\n                    >\n                      {option.label}\n                    </option>\n                  ))}\n                </StatusSelect>\n              </StatusFilterContainer>\n            )}\n            {enableSearch && (\n              <SearchContainer>\n                <SearchInput\n                  type=\"text\"\n                  placeholder={searchPlaceholder}\n                  value={searchTermInput}\n                  onChange={handleSearchInputChange}\n                  onKeyDown={e => {\n                    if (e.key === 'Enter') handleImmediateSearch();\n                  }}\n                  $themeMode={themeMode}\n                />\n                <SearchButton onClick={handleImmediateSearch} $themeMode={themeMode}>\n                  조회\n                </SearchButton>\n              </SearchContainer>\n            )}\n          </RightFilterControls>\n        </APIControls>\n\n        <EventControls>\n          <LeftControls>\n            {customLeftContent ? (\n              <>\n                {customLeftContent}\n                {addButton && (\n                  <div style={{ marginLeft: '20px' }}>\n                    <PrimaryButton $themeMode={themeMode} onClick={addButton.onClick}>\n                      {addButton.label}\n                    </PrimaryButton>\n                  </div>\n                )}\n              </>\n            ) : dualAmounts ? (\n              <DualAmountsContainer>\n                <TotalAmount>\n                  <TotalAmountLabel>{dualAmounts.first.label}</TotalAmountLabel>\n                  <TotalAmountValue>{dualAmounts.first.value}</TotalAmountValue>\n                </TotalAmount>\n                <TotalAmount>\n                  <TotalAmountLabel>{dualAmounts.second.label}</TotalAmountLabel>\n                  <TotalAmountValue>{dualAmounts.second.value}</TotalAmountValue>\n                </TotalAmount>\n              </DualAmountsContainer>\n            ) : totalAmountLabel && totalAmount ? (\n              <TotalAmount>\n                <TotalAmountLabel>{totalAmountLabel}</TotalAmountLabel>\n                <TotalAmountValue>{totalAmount}</TotalAmountValue>\n              </TotalAmount>\n            ) : null}\n\n            {!customLeftContent && !totalAmount && !dualAmounts && addButton && (\n              <PrimaryButton $themeMode={themeMode} onClick={addButton.onClick}>\n                {addButton.label}\n              </PrimaryButton>\n            )}\n\n            {deleteButton && (\n              <SecondaryButton $themeMode={themeMode} onClick={deleteButton.onClick}>\n                {deleteButton.label}\n              </SecondaryButton>\n            )}\n          </LeftControls>\n\n          <RightControls>\n            {/* totalAmount 또는 dualAmounts가 있을 때는 addButton을 여기에 표시 */}\n            {(totalAmount || dualAmounts) && addButton && (\n              <PrimaryButton $themeMode={themeMode} onClick={addButton.onClick}>\n                {addButton.label}\n              </PrimaryButton>\n            )}\n            {/* 커스텀 버튼들 렌더링 */}\n            {customButtons.map((button, index) => (\n              <PrimaryButton key={index} $themeMode={themeMode} onClick={button.onClick}>\n                {button.label}\n              </PrimaryButton>\n            ))}\n            {excelTemplateButton && (\n              <PrimaryButton $themeMode={themeMode} onClick={excelTemplateButton.onClick}>\n                {excelTemplateButton.label}\n              </PrimaryButton>\n            )}\n            {excelUploadButton && (\n              <SecondaryButton $themeMode={themeMode} onClick={excelUploadButton.onClick}>\n                {excelUploadButton.label}\n              </SecondaryButton>\n            )}\n\n            <DownloadButton\n              onClick={handleDownloadClick}\n              $themeMode={themeMode}\n              disabled={isLoading}\n            >\n              {isLoading ? '다운로드 중...' : '엑셀 다운로드'}\n            </DownloadButton>\n\n            <PaginationControls>\n              <InfoText $themeMode={themeMode} style={{ marginRight: '16px' }}>\n                총 {displayAllItems.toLocaleString()}개 중 {displayTotalItems.toLocaleString()}개\n              </InfoText>\n              <NavButton\n                onClick={() => handlePageNumChange(currentPage - 1)}\n                disabled={currentPage <= 1 || isLoading}\n                $themeMode={themeMode}\n              >\n                &lt;\n              </NavButton>\n              <PageBox $themeMode={themeMode}>\n                {currentPage} / {totalPages > 0 ? totalPages : 1}\n              </PageBox>\n              <NavButton\n                onClick={() => handlePageNumChange(currentPage + 1)}\n                disabled={currentPage >= totalPages || isLoading}\n                $themeMode={themeMode}\n              >\n                &gt;\n              </NavButton>\n              <DropdownCustom\n                value={itemsPerPage}\n                onChange={handleItemsPerPageChange}\n                options={itemsPerPageOptions}\n                themeMode={themeMode}\n              />\n              <InfoText $themeMode={themeMode} style={{ marginLeft: '5px' }}>\n                개씩 보기\n              </InfoText>\n            </PaginationControls>\n          </RightControls>\n        </EventControls>\n      </ControlHeader>\n\n      <TableContainer $themeMode={themeMode}>\n        <GenericDataTable\n          data={paginatedData}\n          columns={columns}\n          isLoading={isLoading}\n          // error={error}\n          onRowClick={handleRowClickInternal}\n          onHeaderClick={handleHeaderClick}\n          sortKey={sortKey}\n          sortOrder={sortOrder}\n          keyExtractor={internalKeyExtractor}\n          themeMode={themeMode}\n        />\n      </TableContainer>\n      {/* )} */}\n    </Container>\n  );\n};\n\nconst GenericListUI = forwardRef(GenericListUIInner) as <T extends BaseRecord>(\n  props: GenericListUIProps<T> & { ref?: React.Ref<{ refetch: () => void }> }\n) => React.ReactElement;\n\nexport default GenericListUI;\n\n// --- 스타일 컴포넌트 (레이아웃 관련 수정) ---\n\nconst Container = styled.div<{ $themeMode: ThemeMode }>`\n  min-width: 1200px;\n  width: 100%;\n  min-height: calc(100vh - 140px);\n  box-sizing: border-box;\n  padding: 0px 20px 20px 20px;\n  overflow: visible; /* 드롭다운이 컨테이너를 벗어나서 보이도록 */\n  color: ${({ $themeMode }) =>\n    $themeMode === 'light' ? THEME_COLORS.light.text : THEME_COLORS.dark.text};\n`;\n\nconst TopHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  gap: 15px;\n`;\n\nconst TitleContainer = styled.div`\n  /* 제목 영역 스타일 (필요시 추가) */\n`;\n\nconst ControlHeader = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  /* background-color: #f0ede6; */\n  margin: 20px 0;\n  gap: 20px;\n  overflow: visible; /* 드롭다운이 보이도록 */\n  position: relative; /* 상대 위치 설정 */\n`;\n\nconst APIControls = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  /* background-color: #756b55; */\n  flex-wrap: wrap;\n  /* padding: 10px; */\n  border-radius: 8px;\n  gap: 15px;\n`;\n\nconst LeftFilterControls = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n`;\n\nconst RightFilterControls = styled.div`\n  display: flex;\n  align-items: center;\n  /* gap: 15px; */\n`;\n\nconst EventControls = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: nowrap;\n  gap: 20px;\n  min-width: min-content;\n  overflow-x: auto;\n  overflow-y: visible; /* 수직 overflow를 visible로 설정 */\n  position: relative; /* 상대 위치 설정 */\n\n  /* 스크롤바 숨기기 */\n  &::-webkit-scrollbar {\n    display: none;\n  }\n  -ms-overflow-style: none; /* IE and Edge */\n  scrollbar-width: none; /* Firefox */\n`;\n\nconst LeftControls = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  flex-wrap: nowrap;\n  flex-shrink: 0;\n`;\n\nconst RightControls = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  flex-wrap: nowrap;\n  flex-shrink: 0;\n  overflow: visible; /* 드롭다운이 보이도록 설정 */\n  position: relative; /* 상대 위치 설정 */\n`;\n\nconst SearchContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst SearchInput = styled.input<{ $themeMode: ThemeMode }>`\n  width: 250px;\n  height: 40px;\n  border: 1px solid\n    ${({ $themeMode }) =>\n      $themeMode === 'light' ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor};\n  border-right: none;\n  border-radius: 4px 0 0 4px;\n\n  color: ${({ $themeMode }) =>\n    $themeMode === 'light' ? THEME_COLORS.light.inputText : THEME_COLORS.dark.inputText};\n  padding-left: 15px;\n  padding-right: 35px;\n  background-color: #ffffff;\n\n  // background-image: url(\"/icon_search.png\");\n  background-repeat: no-repeat;\n  background-position: right 10px center;\n  background-size: 16px 16px;\n\n  &::placeholder {\n    color: #c4c5c9\n  }\n\n  &:focus {\n    outline: none;\n    /* border-color: ${({ $themeMode }) =>\n      $themeMode === 'light' ? THEME_COLORS.light.primary : THEME_COLORS.dark.accent}; */\n    // background-image: url(\"/icon_search.png\");\n  }\n`;\n\nconst SearchButton = styled.button<{ $themeMode: ThemeMode }>`\n  width: 60px;\n  height: 40px;\n  background: #214a72;\n  border: none;\n  border-radius: 0;\n  color: #fff;\n  font-weight: 500;\n  font-size: 14px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    opacity: 0.9;\n  }\n`;\n\nconst ListInfo = styled.div<{ $themeMode: ThemeMode }>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 10px;\n  margin-right: 10px;\n  color: ${({ $themeMode }) =>\n    $themeMode === 'light' ? THEME_COLORS.light.text : THEME_COLORS.dark.text};\n  font-size: 14px;\n`;\n\nconst ExcelButton = styled(ActionButton)`\n  background: ${({ $themeMode }) =>\n    $themeMode === 'light' ? '#f8f8f8' : THEME_COLORS.dark.primary};\n  color: ${({ $themeMode }) =>\n    $themeMode === 'light' ? THEME_COLORS.light.primary : THEME_COLORS.dark.buttonText};\n  border: none;\n  &:hover:not(:disabled) {\n    background-color: ${({ $themeMode }) => ($themeMode === 'light' ? '#e8e8e8' : '#424451')};\n  }\n`;\n\nconst PaginationControls = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  overflow: visible; /* 드롭다운이 보이도록 설정 */\n  position: relative; /* 상대 위치 설정 */\n`;\n\nconst Cnt = styled.div<{ $themeMode: ThemeMode }>`\n  font-size: 14px;\n  color: ${({ $themeMode }) => ($themeMode === 'light' ? '#555555' : THEME_COLORS.dark.text)};\n  white-space: nowrap;\n`;\n\nconst PageBox = styled.div<{ $themeMode: ThemeMode }>`\n  margin: 0 5px;\n  font-size: 14px;\n  color: #887e67;\n  white-space: nowrap;\n`;\n\nconst TotalCountInfo = styled.p<{ $themeMode: ThemeMode }>`\n  margin: 0;\n  margin-right: 16px;\n  font-size: 14px;\n  color: #887e67;\n  white-space: nowrap;\n`;\n\nconst ItemsPerPageText = styled.p<{ $themeMode: ThemeMode }>`\n  margin: 0;\n  margin-left: 5px;\n  font-size: 14px;\n  color: #887e67;\n  white-space: nowrap;\n`;\n\nconst InfoText = styled.p<{ $themeMode: ThemeMode }>`\n  margin: 0;\n  font-size: 14px;\n  color: #887e67;\n  white-space: nowrap;\n`;\n\nconst TableContainer = styled.div<{ $themeMode: ThemeMode }>`\n  width: 100%;\n  min-width: 1000px;\n  max-width: 100%; /* 컨테이너를 벗어나지 않도록 최대 너비 제한 */\n  border: 1px solid\n    ${({ $themeMode }) =>\n      $themeMode === 'light' ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor};\n  border-radius: 4px;\n  background: ${({ $themeMode }) =>\n    $themeMode === 'light'\n      ? THEME_COLORS.light.tableBackground\n      : THEME_COLORS.dark.tableBackground};\n  overflow: hidden; /* 테이블이 컨테이너를 벗어나지 않도록 */\n  table-layout: fixed; /* 테이블 레이아웃을 고정하여 컬럼 너비 제어 */\n\n  /* 내부 테이블 요소들도 너비 제한 */\n  table {\n    width: 100%;\n    table-layout: fixed;\n  }\n\n  @media (max-width: 1400px) {\n    min-width: 1000px;\n  }\n`;\n\nconst LoadingContainer = styled.div<{ $themeMode: ThemeMode }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 300px;\n  width: 100%;\n  background-color: ${({ $themeMode }) =>\n    $themeMode === 'light'\n      ? THEME_COLORS.light.tableBackground\n      : THEME_COLORS.dark.tableBackground};\n`;\n\nconst LoadingSpinner = styled.div<{ $themeMode: ThemeMode }>`\n  border: 4px solid rgba(255, 255, 255, 0.3);\n  border-top: 4px solid\n    ${({ $themeMode }) =>\n      $themeMode === 'light' ? THEME_COLORS.light.primary : THEME_COLORS.dark.accent};\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst ErrorContainer = styled.div<{ $themeMode: ThemeMode }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 300px;\n  width: 100%;\n  background-color: ${({ $themeMode }) =>\n    $themeMode === 'light'\n      ? THEME_COLORS.light.tableBackground\n      : THEME_COLORS.dark.tableBackground};\n`;\n\nconst ErrorMessage = styled.p<{ $themeMode: ThemeMode }>`\n  color: #d32f2f;\n  font-size: 16px;\n  text-align: center;\n`;\n\nconst DateRangePickerContainer = styled.div`\n  /* 특별한 스타일 불필요 */\n`;\n\nconst TabsWrapper = styled.div`\n  margin-top: 15px;\n`;\n\nconst CMSTitle = styled.h1<{ $themeMode: ThemeMode }>`\n  font-size: 28px;\n  font-weight: bold;\n  margin: 0;\n  margin-bottom: 0;\n  color: ${({ $themeMode }) =>\n    $themeMode === 'light' ? THEME_COLORS.light.titleColor : THEME_COLORS.dark.titleColor};\n`;\n\nconst NavButton = styled.button<{ $themeMode: ThemeMode }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  cursor: pointer;\n  border: 1px solid\n    ${({ $themeMode }) =>\n      $themeMode === 'light' ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor};\n  background-color: #ddd8c7;\n  color: ${({ $themeMode }) =>\n    $themeMode === 'light' ? THEME_COLORS.light.text : THEME_COLORS.dark.text};\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: bold;\n  line-height: 1;\n  transition:\n    background-color 0.2s,\n    border-color 0.2s;\n\n  &:hover:not(:disabled) {\n    opacity: 0.8;\n    border-color: ${({ $themeMode }) => ($themeMode === 'light' ? '#999' : '#AAAAAA')};\n    background-color: ${({ $themeMode }) => ($themeMode === 'light' ? '#f8f8f8' : '#424451')};\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    border-color: ${({ $themeMode }) => ($themeMode === 'light' ? '#EEEEEE' : '#555555')};\n    color: ${({ $themeMode }) => ($themeMode === 'light' ? '#AAAAAA' : '#777777')};\n  }\n`;\n\nconst DualAmountsContainer = styled.div`\n  display: flex;\n  gap: 24px;\n  align-items: center;\n`;\n\nconst TotalAmount = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 16px;\n  color: #97601a;\n  font-weight: 500;\n`;\n\nconst TotalAmountLabel = styled.span`\n  font-size: 24px;\n  color: black;\n  font-weight: 600;\n  margin-right: 10px;\n`;\n\nconst TotalAmountValue = styled.span`\n  font-size: 24px;\n  color: #db6220;\n  font-weight: 600;\n`;\n\n// 스타일 컴포넌트 추가\nconst StatusFilterContainer = styled.div`\n  margin: 0 10px;\n  position: relative;\n  display: flex;\n  align-items: center;\n\n  &::after {\n    content: '';\n    position: absolute;\n    right: 14px;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 10px;\n    height: 16px;\n    background-image: url('/icon_burger.png');\n    background-size: contain;\n    background-repeat: no-repeat;\n    transform: translateY(-50%) rotate(270deg);\n    pointer-events: none;\n  }\n`;\n\nconst StatusSelect = styled.select<{ $themeMode: ThemeMode }>`\n  width: 150px;\n  height: 40px;\n  padding: 11px 14px;\n  padding-right: 30px; // 아이콘을 위한 여백\n  border: 1px solid #e0e0e0;\n  border-radius: 0px;\n  background-color: #fbf9f2;\n  font-size: 14px;\n  cursor: pointer;\n  appearance: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n\n  &:focus {\n    outline: none;\n    border-color: #97601a;\n  }\n\n  option {\n    padding: 8px;\n    background-color: white;\n\n    &[value=''] {\n      color: #887e67;\n    }\n    &[value='ONGOING'] {\n      color: #4caf50;\n    }\n    &[value='ENDED'] {\n      color: #2196f3;\n    }\n    &[value='WAITING'] {\n      color: #ff9800;\n    }\n    &[value='CANCELED'] {\n      color: #f44336;\n    }\n  }\n`;\n"
        }
    ]
}