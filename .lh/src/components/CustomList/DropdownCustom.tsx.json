{
    "sourceFile": "src/components/CustomList/DropdownCustom.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757743165008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757743165008,
            "name": "Commit-0",
            "content": "import { useState, useRef, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { ThemeMode } from \"../../styles/theme_colors\";\nimport { devLog } from \"../../utils/devLogger\";\n\ntype DropdownProps = {\n  value: number;\n  onChange: (value: number) => void;\n  options: number[];\n  setCurrentPage?: React.Dispatch<React.SetStateAction<number>>;\n  themeMode?: ThemeMode;\n  triggerIcon?: React.ReactNode | null; // ✅ 아이콘 추가\n  closeOnResize?: boolean; // 리사이즈 시 닫을지 여부 (기본: true)\n  updatePositionOnResize?: boolean; // 리사이즈 시 위치 업데이트 여부 (기본: false)\n};\n\nconst DropdownCustom: React.FC<DropdownProps> = ({\n  value,\n  onChange,\n  options,\n  setCurrentPage,\n  themeMode = \"dark\",\n  triggerIcon,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [dropdownPosition, setDropdownPosition] = useState({ top: 0, left: 0 });\n  const containerRef = useRef<HTMLDivElement>(null);\n  const dropdownRef = useRef<HTMLUListElement>(null);\n\n  // 디버깅을 위한 콘솔 출력\n  devLog('DropdownCustom - value:', value, 'options:', options, 'isOpen:', isOpen);\n\n  const updateDropdownPosition = () => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      setDropdownPosition({\n        top: rect.bottom,\n        left: rect.left,\n      });\n    }\n  };\n\n  const handleToggle = () => {\n    if (!isOpen) {\n      updateDropdownPosition();\n    }\n    setIsOpen(!isOpen);\n  };\n\n  // 클릭 외부 감지 및 윈도우 리사이즈 감지\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        containerRef.current && \n        !containerRef.current.contains(event.target as Node) &&\n        dropdownRef.current && \n        !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n\n    const handleResize = () => {\n      // 화면 크기가 변경되면 드롭다운을 닫음\n      setIsOpen(false);\n    };\n\n    const handleScroll = () => {\n      // 스크롤 시 위치를 업데이트\n      if (isOpen) {\n        updateDropdownPosition();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      window.addEventListener('resize', handleResize);\n      // 모든 스크롤 가능한 요소에서 스크롤 이벤트 감지\n      document.addEventListener('scroll', handleScroll, true); // true로 캡쳐 단계에서도 감지\n      \n      return () => {\n        document.removeEventListener('mousedown', handleClickOutside);\n        window.removeEventListener('resize', handleResize);\n        document.removeEventListener('scroll', handleScroll, true);\n      };\n    }\n  }, [isOpen]);\n\n  return (\n    <>\n      <DropdownContainer ref={containerRef}>\n        <DropdownHeader onClick={handleToggle} $themeMode={themeMode}>\n          {triggerIcon ?? value}\n          <MarginTop>\n            ▼\n          </MarginTop>\n        </DropdownHeader>\n      </DropdownContainer>\n\n      {isOpen && (\n        <DropdownList \n          ref={dropdownRef}\n          $themeMode={themeMode}\n          style={{\n            top: dropdownPosition.top,\n            left: dropdownPosition.left,\n          }}\n        >\n          {options.map((option) => (\n            <DropdownItem\n              key={option}\n              onClick={() => {\n                devLog('Option clicked:', option); // 디버깅 로그\n                onChange(option);\n                setIsOpen(false);\n                if (setCurrentPage) setCurrentPage(1);\n              }}\n              $themeMode={themeMode}\n            >\n              {option}\n            </DropdownItem>\n          ))}\n        </DropdownList>\n      )}\n    </>\n  );\n};\n\nexport default DropdownCustom;\n\n// 스타일 그대로 사용\nconst DropdownContainer = styled.div`\n  position: relative;\n  width: 70px; /* 너비를 60px에서 70px로 증가 */\n  font-family: \"Pretendard Variable\", sans-serif;\n  z-index: 9999; /* z-index를 매우 높게 설정 */\n`;\n\nconst MarginTop = styled.div`\n  margin-top: 8px;\n`;\n\nconst DropdownHeader = styled.div<{ $themeMode: ThemeMode }>`\n  width: 100%;\n  height: 28px;\n  padding: 5px;\n  border: none;\n  background-color: #ffffff;\n  color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#000000\" : \"#FFFFFF\")};\n  font-size: 16px;\n  text-align: center;\n  cursor: pointer;\n  border-radius: 0;\n  user-select: none;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 20px;\n\n  &:hover {\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#f0f0f0\" : \"#424451\")};\n  }\n`;\n\nconst DropdownList = styled.ul<{ $themeMode: ThemeMode }>`\n  position: fixed; /* absolute에서 fixed로 변경하여 viewport 기준으로 위치 */\n  width: 70px; /* 부모와 같은 너비 */\n  background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"white\" : \"#333544\")};\n  border: 1px solid ${({ $themeMode }) => ($themeMode === \"light\" ? \"#ccc\" : \"#424451\")};\n  border-bottom: none; /* 아래쪽 경계선 제거 */\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  z-index: 99999; /* z-index 값을 매우 높게 설정 */\n  max-height: 200px; /* 최대 높이 설정 */\n  overflow-y: auto; /* 스크롤 가능하도록 */\n  box-shadow: 0 -4px 6px rgba(0, 0, 0, 0.1); /* 위쪽 그림자 추가 */\n`;\n\nconst DropdownItem = styled.li<{ $themeMode: ThemeMode }>`\n  padding: 8px;\n  font-size: 16px;\n  cursor: pointer;\n  border-radius: 0;\n  color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#000000\" : \"#FFFFFF\")};\n\n  &:hover {\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#e0e0e0\" : \"#424451\")};\n  }\n`;\n"
        }
    ]
}