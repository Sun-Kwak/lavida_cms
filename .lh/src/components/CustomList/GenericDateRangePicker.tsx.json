{
    "sourceFile": "src/components/CustomList/GenericDateRangePicker.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757743352836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757743352836,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport dayjs from \"dayjs\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { ko } from \"date-fns/locale\";\nimport { THEME_COLORS, ThemeMode } from \"../../styles/theme_colors\";\n\ntype DefaultRangeType = \"금월\" | \"지난달\" | \"1년\" | \"지정\";\ntype CustomRangeType = \"3개월\" | \"6개월\" | \"1년\" | \"2년\" | \"지정\";\ntype RangeType = DefaultRangeType | CustomRangeType;\n\ninterface GenericDateRangePickerProps {\n  initialFromDate: string;\n  initialToDate: string;\n  onDateChange: (fromDate: string, toDate: string) => void;\n  initialSelectedRange?: RangeType;\n  themeMode?: ThemeMode;\n  rangeOptions?: RangeType[];\n  hasUrlParams?: boolean; // URL 파라미터 존재 여부를 확인하는 prop 추가\n}\n\nconst GenericDateRangePicker: React.FC<GenericDateRangePickerProps> = ({\n  initialFromDate,\n  initialToDate,\n  onDateChange,\n  themeMode = \"dark\",\n  rangeOptions = [\"금월\", \"지난달\", \"1년\", \"지정\"],\n  hasUrlParams = false, // 기본값 false\n}) => {\n  const getDateFromRange = (range: RangeType): { fromDate: string; toDate: string } => {\n    const today = dayjs();\n    switch (range) {\n      case \"금월\":\n        return {\n          fromDate: today.startOf(\"month\").format(\"YYYY-MM-DD\"),\n          toDate: today.format(\"YYYY-MM-DD\"),\n        };\n      case \"지난달\":\n        return {\n          fromDate: today.subtract(1, \"month\").startOf(\"month\").format(\"YYYY-MM-DD\"),\n          toDate: today.subtract(1, \"month\").endOf(\"month\").format(\"YYYY-MM-DD\"),\n        };\n      case \"3개월\":\n        return {\n          fromDate: today.subtract(3, \"month\").format(\"YYYY-MM-DD\"),\n          toDate: today.format(\"YYYY-MM-DD\"),\n        };\n      case \"6개월\":\n        return {\n          fromDate: today.subtract(6, \"month\").format(\"YYYY-MM-DD\"),\n          toDate: today.format(\"YYYY-MM-DD\"),\n        };\n      case \"1년\":\n        return {\n          fromDate: today.subtract(1, \"year\").format(\"YYYY-MM-DD\"),\n          toDate: today.format(\"YYYY-MM-DD\"),\n        };\n      case \"2년\":\n        return {\n          fromDate: today.subtract(2, \"year\").format(\"YYYY-MM-DD\"),\n          toDate: today.format(\"YYYY-MM-DD\"),\n        };\n      default: // \"지정\" 및 기타\n        return {\n          fromDate: initialFromDate || today.format(\"YYYY-MM-DD\"),\n          toDate: initialToDate || today.format(\"YYYY-MM-DD\"),\n        };\n    }\n  };\n\n  // selectedRange의 초기값을 URL 파라미터 존재 여부에 따라 결정\n  const [selectedRange, setSelectedRange] = useState<RangeType>(\n    hasUrlParams ? \"지정\" : rangeOptions[0]\n  );\n\n  const [fromDate, setFromDate] = useState<string>(() => {\n    if (hasUrlParams) {\n      return initialFromDate;\n    }\n    return initialFromDate || getDateFromRange(rangeOptions[0]).fromDate;\n  });\n\n  const [toDate, setToDate] = useState<string>(() => {\n    if (hasUrlParams) {\n      return initialToDate;\n    }\n    return initialToDate || getDateFromRange(rangeOptions[0]).toDate;\n  });\n\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [isSelectingFromDate, setIsSelectingFromDate] = useState(true);\n  const [calendarDate, setCalendarDate] = useState(() => {\n    return dayjs(fromDate).toDate();\n  });\n\n  const datePickerRef = useRef<HTMLDivElement>(null);\n  const dateBoxRef = useRef<HTMLDivElement>(null);\n\n  // 컴포넌트 마운트 시 초기 날짜 설정\n  useEffect(() => {\n    if (hasUrlParams) {\n      // URL 파라미터가 있는 경우 초기 날짜 그대로 사용\n      setFromDate(initialFromDate);\n      setToDate(initialToDate);\n    } else {\n      // URL 파라미터가 없는 경우 첫 번째 rangeOption에 해당하는 날짜 계산\n      const initialDates = getDateFromRange(rangeOptions[0]);\n      setFromDate(initialDates.fromDate);\n      setToDate(initialDates.toDate);\n      // GenericListUI와 날짜가 동기화되어 있으므로 onDateChange 호출\n      onDateChange(initialDates.fromDate, initialDates.toDate);\n    }\n  }, []);\n\n  // 외부 클릭 핸들러\n  const handleClickOutside = useCallback((event: MouseEvent) => {\n    if (\n      datePickerRef.current &&\n      !datePickerRef.current.contains(event.target as Node) &&\n      dateBoxRef.current &&\n      !dateBoxRef.current.contains(event.target as Node)\n    ) {\n      setShowDatePicker(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [handleClickOutside]);\n\n  // 날짜 범위 버튼 클릭 핸들러\n  const handleRangeClick = (range: RangeType) => {\n    if (range === \"지정\") {\n      setSelectedRange(\"지정\");\n      setShowDatePicker(true); // 달력 바로 표시\n      setIsSelectingFromDate(true);\n      return;\n    }\n\n    const { fromDate: newFromDate, toDate: newToDate } = getDateFromRange(range);\n    setFromDate(newFromDate);\n    setToDate(newToDate);\n    setSelectedRange(range);\n    setShowDatePicker(false);\n    onDateChange(newFromDate, newToDate); // 부모 컴포넌트에 즉시 알림\n  };\n\n  // 날짜 선택 박스 클릭 핸들러\n  const handleDateBoxClick = () => {\n    setShowDatePicker((prev) => !prev);\n    setIsSelectingFromDate(true); // 항상 시작 날짜부터 선택\n  };\n\n  // 달력에서 날짜 선택 핸들러\n  const handleDateChange = (date: Date) => {\n    const formatted = dayjs(date).format(\"YYYY-MM-DD\");\n\n    if (isSelectingFromDate) {\n      setFromDate(formatted);\n      setIsSelectingFromDate(false); // 종료 날짜 선택 모드로 전환\n    } else {\n      let finalFromDate = fromDate;\n      let finalToDate = formatted;\n\n      if (dayjs(formatted).isBefore(dayjs(fromDate))) {\n        // 종료일이 시작일보다 빠르면 두 날짜를 교체\n        finalFromDate = formatted;\n        finalToDate = fromDate;\n      }\n\n      setToDate(finalToDate);\n      setFromDate(finalFromDate);\n      setSelectedRange(\"지정\");\n      setShowDatePicker(false);\n      onDateChange(finalFromDate, finalToDate); // 부모 컴포넌트에 알림\n    }\n  };\n\n  // 년/월 선택 관련 상태 및 핸들러 (기존 유지)\n  const [calendarKey, setCalendarKey] = useState(0);\n  const [showYearPicker, setShowYearPicker] = useState(false);\n  const [showMonthPicker, setShowMonthPicker] = useState(false);\n  const [tempYear, setTempYear] = useState<number | null>(null);\n  const [tempMonth, setTempMonth] = useState<number | null>(null);\n\n  const handleYearConfirm = () => {\n    if (tempYear !== null) {\n      const updated = dayjs(calendarDate).year(tempYear).toDate();\n      setCalendarDate(updated);\n      setCalendarKey((prev) => prev + 1);\n      setShowYearPicker(false);\n    }\n  };\n\n  const handleMonthConfirm = () => {\n    if (tempMonth !== null) {\n      const updated = dayjs(calendarDate).month(tempMonth).toDate();\n      setCalendarDate(updated);\n      setCalendarKey((prev) => prev + 1);\n      setShowMonthPicker(false);\n    }\n  };\n\n  const renderCustomHeader = ({\n    date,\n    decreaseMonth,\n    increaseMonth,\n    prevMonthButtonDisabled,\n    nextMonthButtonDisabled,\n  }: {\n    date: Date;\n    decreaseMonth: () => void;\n    increaseMonth: () => void;\n    prevMonthButtonDisabled: boolean;\n    nextMonthButtonDisabled: boolean;\n  }) => (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        padding: \"8px\",\n      }}>\n      <button\n        onClick={decreaseMonth}\n        disabled={prevMonthButtonDisabled}\n        style={{\n          background: \"none\",\n          border: \"none\",\n          fontSize: \"18px\",\n          cursor: \"pointer\",\n          color: \"#000000\",\n        }}>\n        {\"<\"}\n      </button>\n\n      <div style={{ display: \"flex\", gap: \"12px\", alignItems: \"center\" }}>\n        <button\n          onClick={() => setShowYearPicker(true)}\n          style={{\n            background: \"none\",\n            border: \"none\",\n            fontWeight: \"bold\",\n            cursor: \"pointer\",\n            color: \"#000000\",\n          }}>\n          {dayjs(date).format(\"YYYY년\")}\n        </button>\n        <button\n          onClick={() => setShowMonthPicker(true)}\n          style={{\n            background: \"none\",\n            border: \"none\",\n            fontWeight: \"bold\",\n            cursor: \"pointer\",\n            color: \"#000000\",\n          }}>\n          {dayjs(date).format(\"M월\")}\n        </button>\n      </div>\n\n      <button\n        onClick={increaseMonth}\n        disabled={nextMonthButtonDisabled}\n        style={{\n          background: \"none\",\n          border: \"none\",\n          fontSize: \"18px\",\n          cursor: \"pointer\",\n          color: \"#000000\",\n        }}>\n        {\">\"}\n      </button>\n    </div>\n  );\n\n  const renderYearPicker = () => {\n    const currentYear = dayjs().year();\n    const years = Array.from({ length: 20 }, (_, i) => currentYear - 10 + i);\n    return (\n      <PickerBox>\n        <div className=\"picker-body\">\n          {years.map((year) => (\n            <button key={year} onClick={() => setTempYear(year)}>\n              {year}년\n            </button>\n          ))}\n        </div>\n        <div className=\"picker-actions\">\n          <button onClick={handleYearConfirm}>확인</button>\n          <button onClick={() => setShowYearPicker(false)}>취소</button>\n        </div>\n      </PickerBox>\n    );\n  };\n\n  const renderMonthPicker = () => (\n    <PickerBox>\n      <div className=\"picker-body\">\n        {Array.from({ length: 12 }, (_, i) => (\n          <button key={i} onClick={() => setTempMonth(i)}>\n            {i + 1}월\n          </button>\n        ))}\n      </div>\n      <div className=\"picker-actions\">\n        <button onClick={handleMonthConfirm}>확인</button>\n        <button onClick={() => setShowMonthPicker(false)}>취소</button>\n      </div>\n    </PickerBox>\n  );\n\n  return (\n    <DateContainer $themeMode={themeMode}>\n      <DateBox ref={dateBoxRef} onClick={handleDateBoxClick} $themeMode={themeMode}>\n        {fromDate} ~ {toDate}\n        <img src=\"/icon_burger.png\" alt=\"달력\" width=\"10\" height=\"16\" style={{ transform: \"rotate(270deg)\" }} />\n      </DateBox>\n      {showDatePicker && (\n        <DatePickerWrapper ref={datePickerRef} $themeMode={themeMode}>\n          {showYearPicker ? (\n            renderYearPicker()\n          ) : showMonthPicker ? (\n            renderMonthPicker()\n          ) : (\n            <StyledDatePicker\n              key={calendarKey}\n              selected={isSelectingFromDate ? dayjs(fromDate).toDate() : dayjs(toDate).toDate()}\n              onChange={handleDateChange}\n              dateFormat=\"yyyy-MM-dd\"\n              inline\n              renderCustomHeader={renderCustomHeader}\n              startDate={dayjs(fromDate).toDate()}\n              endDate={dayjs(toDate).toDate()}\n              openToDate={calendarDate}\n              locale={ko} // ✅ 요일 한글화\n            />\n          )}\n        </DatePickerWrapper>\n      )}\n      <RangeButtonGroup $themeMode={themeMode}>\n        {rangeOptions.map((range) => (\n          <RangeButton key={range} selected={selectedRange === range} onClick={() => handleRangeClick(range)}>\n            {range}\n          </RangeButton>\n        ))}\n      </RangeButtonGroup>\n    </DateContainer>\n  );\n};\n\nexport default GenericDateRangePicker;\n\n// 추가 스타일\nconst PickerBox = styled.div`\n  width: 252px; /* ✅ DatePicker 기본 너비에 맞춤 */\n  background: white;\n  padding: 8px;\n  border-radius: 6px;\n  border: 1px solid #ccc;\n\n  .picker-body {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr); /* ✅ 3열 */\n    gap: 8px;\n    margin-bottom: 8px;\n  }\n\n  .picker-body button {\n    width: 100%;\n    padding: 8px 0;\n    background: #f0f0f0;\n    border: none;\n    border-radius: 4px;\n    text-align: center;\n    color: #000;\n    cursor: pointer;\n    font-size: 14px;\n\n    &:hover {\n      background: #d0d0d0;\n    }\n  }\n\n  .picker-actions {\n    display: flex;\n    justify-content: flex-end;\n    gap: 12px;\n  }\n\n  .picker-actions button {\n    background: none;\n    border: none;\n    padding: 0;\n    font-size: 14px;\n    color: #000000;\n    cursor: pointer;\n  }\n`;\n\n// --- Styled Components (Keep as they were in the original DateRangePicker) ---\nconst DateContainer = styled.div<{ $themeMode: ThemeMode }>`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  position: relative;\n`;\n\nconst DateBox = styled.div<{ $themeMode: ThemeMode }>`\n  padding: 11px 14px;\n  background-color: #dfdfe0;\n  color: #1f1f1f;\n  font-weight: 500;\n  border-radius: 0px;\n  border: 1px solid\n    ${({ $themeMode }) => ($themeMode === \"light\" ? \"#E0E0E0\" /* 배경색과 동일하게 */ : THEME_COLORS.dark.borderColor)};\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  cursor: pointer;\n  white-space: nowrap;\n`;\n\nconst RangeButtonGroup = styled.div<{ $themeMode: ThemeMode }>`\n  display: flex;\n`;\n\nconst RangeButton = styled.button<{ selected: boolean }>`\n  width: 60px;\n  padding: 12px;\n  margin: 0;\n  background-color: ${({ selected }) => (selected ? \"#214a72\" : \"#e1e1e4\")};\n  color: ${({ selected }) => (selected ? \"#ffffff\" : \"#686868\")};\n  border: none;\n  border-radius: 0;\n  cursor: pointer;\n  font-weight: 500;\n  white-space: nowrap;\n`;\n\nconst DatePickerWrapper = styled.div<{ $themeMode: ThemeMode }>`\n  position: absolute;\n  top: 100%;\n  left: 0;\n  margin-top: 8px;\n  z-index: 1000;\n\n  .custom-calendar {\n    background-color: ${({ $themeMode }) =>\n      $themeMode === \"light\" ? THEME_COLORS.light.tableBackground : THEME_COLORS.dark.inputBackground};\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n    border: 1px solid\n      ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n    border-radius: 4px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  }\n\n  .react-datepicker__day-name,\n  .react-datepicker__day,\n  .react-datepicker__time-name {\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n    width: 2em;\n    line-height: 2em;\n  }\n\n  .react-datepicker__day--selected,\n  .react-datepicker__day--keyboard-selected {\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.primary : \"#666666\")};\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.buttonText : \"#FFFFFF\")};\n    border-radius: 50%;\n  }\n\n  .react-datepicker__day--in-selecting-range {\n    background-color: transparent;\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n    border-radius: 0;\n  }\n\n  .react-datepicker__day--in-range {\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#e0e0e0\" : \"#424451\")};\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText)};\n    border-radius: 0;\n  }\n\n  .react-datepicker__day--range-start.react-datepicker__day--range-end,\n  .react-datepicker__day--selected.react-datepicker__day--in-selecting-range {\n    border-radius: 50%;\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.primary : \"#666666\")};\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.buttonText : \"#FFFFFF\")};\n  }\n\n  .react-datepicker__day--range-start,\n  .react-datepicker__day--range-end {\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.primary : \"#666666\")};\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.buttonText : \"#FFFFFF\")};\n    border-radius: 50%;\n  }\n\n  .react-datepicker__day:hover {\n    background-color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#d0d0d0\" : \"#555555\")};\n    border-radius: 50%;\n  }\n\n  .react-datepicker__day--today {\n    font-weight: bold;\n    border: 1px solid ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.accent : \"#888888\")};\n    border-radius: 50%;\n  }\n\n  .react-datepicker__day--outside-month {\n    color: ${({ $themeMode }) => ($themeMode === \"light\" ? \"#AAAAAA\" : \"#666666\")};\n  }\n\n  .react-datepicker__header {\n    background-color: ${({ $themeMode }) =>\n      $themeMode === \"light\" ? \"#F0F0F0\" : THEME_COLORS.dark.tableHeaderBackground};\n    border-bottom: 1px solid\n      ${({ $themeMode }) => ($themeMode === \"light\" ? THEME_COLORS.light.borderColor : THEME_COLORS.dark.borderColor)};\n  }\n\n  .react-datepicker__current-month,\n  .react-datepicker__day-name {\n    color: ${({ $themeMode }) =>\n      $themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.tableHeaderText};\n  }\n\n  .react-datepicker__navigation-icon::before {\n    border-color: ${({ $themeMode }) =>\n      $themeMode === \"light\" ? THEME_COLORS.light.text : THEME_COLORS.dark.inputText};\n  }\n`;\n\nconst StyledDatePicker = styled(DatePicker as any)``;\n"
        }
    ]
}