{
    "sourceFile": "src/components/DataTable/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1761130638597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761131222135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,17 +12,18 @@\n   sortable?: boolean;\n }\n \n export interface DataTableProps<T = any> {\n-  title?: string;\n+  title?: React.ReactNode;\n   columns: TableColumn<T>[];\n   data: T[];\n   loading?: boolean;\n   emptyText?: string;\n   emptyDescription?: string;\n   resultCount?: React.ReactNode;\n   onRowClick?: (record: T, index: number) => void;\n   className?: string;\n+  customRowStyle?: (record: T, index: number) => React.CSSProperties;\n }\n \n const ResultsSection = styled.div`\n   background: ${AppColors.surface};\n@@ -114,9 +115,10 @@\n   emptyText = \"데이터가 없습니다\",\n   emptyDescription = \"새로운 데이터를 추가해보세요.\",\n   resultCount,\n   onRowClick,\n-  className\n+  className,\n+  customRowStyle\n }: DataTableProps<T>) {\n   \n   const renderCell = (column: TableColumn<T>, record: T, index: number) => {\n     const value = (record as any)[column.key];\n@@ -168,8 +170,9 @@\n                 <TableRow \n                   key={index}\n                   $clickable={!!onRowClick}\n                   onClick={() => onRowClick?.(record, index)}\n+                  style={customRowStyle?.(record, index)}\n                 >\n                   {columns.map((column, colIndex) => (\n                     <TableCell \n                       key={column.key || colIndex}\n"
                },
                {
                    "date": 1761131475147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,15 @@\n   resultCount?: React.ReactNode;\n   onRowClick?: (record: T, index: number) => void;\n   className?: string;\n   customRowStyle?: (record: T, index: number) => React.CSSProperties;\n+  // 페이지네이션 관련\n+  pagination?: {\n+    enabled: boolean;\n+    pageSize?: number;\n+    pageSizeOptions?: number[];\n+    showTotal?: boolean;\n+  };\n }\n \n const ResultsSection = styled.div`\n   background: ${AppColors.surface};\n@@ -106,8 +113,84 @@\n   text-align: center;\n   color: ${AppColors.onInput1};\n `;\n \n+const PaginationContainer = styled.div`\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  padding: 16px 24px;\n+  border-top: 1px solid ${AppColors.borderLight};\n+  background: ${AppColors.surface};\n+`;\n+\n+const PaginationInfo = styled.div`\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onInput1};\n+`;\n+\n+const PaginationControls = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 12px;\n+`;\n+\n+const PageSizeSelector = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 8px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onInput1};\n+`;\n+\n+const PageSizeSelect = styled.select`\n+  padding: 4px 8px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 4px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  background: ${AppColors.surface};\n+  color: ${AppColors.onSurface};\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+`;\n+\n+const PageNavigation = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 8px;\n+`;\n+\n+const PageButton = styled.button<{ $disabled?: boolean }>`\n+  padding: 6px 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 4px;\n+  background: ${props => props.$disabled ? AppColors.background : AppColors.surface};\n+  color: ${props => props.$disabled ? AppColors.onInput1 : AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: ${props => props.$disabled ? 'not-allowed' : 'pointer'};\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    background: ${props => props.$disabled ? AppColors.background : AppColors.primary + '10'};\n+    border-color: ${props => props.$disabled ? AppColors.borderLight : AppColors.primary};\n+  }\n+  \n+  &:disabled {\n+    cursor: not-allowed;\n+    opacity: 0.5;\n+  }\n+`;\n+\n+const PageInfo = styled.span`\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onInput1};\n+  min-width: 80px;\n+  text-align: center;\n+`;\n+\n function DataTable<T = any>({\n   title,\n   columns,\n   data,\n@@ -116,11 +199,35 @@\n   emptyDescription = \"새로운 데이터를 추가해보세요.\",\n   resultCount,\n   onRowClick,\n   className,\n-  customRowStyle\n+  customRowStyle,\n+  pagination\n }: DataTableProps<T>) {\n   \n+  // 페이지네이션 state\n+  const [currentPage, setCurrentPage] = React.useState(1);\n+  const [pageSize, setPageSize] = React.useState(\n+    pagination?.pageSize || 15\n+  );\n+  \n+  // 페이지네이션 설정\n+  const paginationEnabled = pagination?.enabled || false;\n+  const pageSizeOptions = pagination?.pageSizeOptions || [15, 30, 100];\n+  const showTotal = pagination?.showTotal !== false;\n+  \n+  // 페이지네이션 계산\n+  const totalItems = data.length;\n+  const totalPages = Math.ceil(totalItems / pageSize);\n+  const startIndex = (currentPage - 1) * pageSize;\n+  const endIndex = startIndex + pageSize;\n+  const currentData = paginationEnabled ? data.slice(startIndex, endIndex) : data;\n+  \n+  // 페이지 변경 시 첫 페이지로 리셋\n+  React.useEffect(() => {\n+    setCurrentPage(1);\n+  }, [data.length, pageSize]);\n+  \n   const renderCell = (column: TableColumn<T>, record: T, index: number) => {\n     const value = (record as any)[column.key];\n     \n     if (column.render) {\n@@ -149,44 +256,94 @@\n         </ResultsHeader>\n       )}\n \n       {data.length > 0 ? (\n-        <TableContainer>\n-          <Table>\n-            <TableHeader>\n-              <TableRow>\n-                {columns.map((column, index) => (\n-                  <TableHeaderCell \n-                    key={column.key || index}\n-                    $width={column.width}\n-                    $align={column.align}\n-                  >\n-                    {column.title}\n-                  </TableHeaderCell>\n-                ))}\n-              </TableRow>\n-            </TableHeader>\n-            <tbody>\n-              {data.map((record, index) => (\n-                <TableRow \n-                  key={index}\n-                  $clickable={!!onRowClick}\n-                  onClick={() => onRowClick?.(record, index)}\n-                  style={customRowStyle?.(record, index)}\n-                >\n-                  {columns.map((column, colIndex) => (\n-                    <TableCell \n-                      key={column.key || colIndex}\n+        <>\n+          <TableContainer>\n+            <Table>\n+              <TableHeader>\n+                <TableRow>\n+                  {columns.map((column, index) => (\n+                    <TableHeaderCell \n+                      key={column.key || index}\n+                      $width={column.width}\n                       $align={column.align}\n                     >\n-                      {renderCell(column, record, index)}\n-                    </TableCell>\n+                      {column.title}\n+                    </TableHeaderCell>\n                   ))}\n                 </TableRow>\n-              ))}\n-            </tbody>\n-          </Table>\n-        </TableContainer>\n+              </TableHeader>\n+              <tbody>\n+                {currentData.map((record, index) => (\n+                  <TableRow \n+                    key={index}\n+                    $clickable={!!onRowClick}\n+                    onClick={() => onRowClick?.(record, index)}\n+                    style={customRowStyle?.(record, index)}\n+                  >\n+                    {columns.map((column, colIndex) => (\n+                      <TableCell \n+                        key={column.key || colIndex}\n+                        $align={column.align}\n+                      >\n+                        {renderCell(column, record, index)}\n+                      </TableCell>\n+                    ))}\n+                  </TableRow>\n+                ))}\n+              </tbody>\n+            </Table>\n+          </TableContainer>\n+          \n+          {paginationEnabled && (\n+            <PaginationContainer>\n+              <PaginationInfo>\n+                {showTotal && (\n+                  <span>\n+                    총 {totalItems.toLocaleString()}개 중 {(startIndex + 1).toLocaleString()}-{Math.min(endIndex, totalItems).toLocaleString()}개 표시\n+                  </span>\n+                )}\n+              </PaginationInfo>\n+              \n+              <PaginationControls>\n+                <PageSizeSelector>\n+                  <span>페이지당</span>\n+                  <PageSizeSelect \n+                    value={pageSize} \n+                    onChange={(e) => setPageSize(Number(e.target.value))}\n+                  >\n+                    {pageSizeOptions.map(size => (\n+                      <option key={size} value={size}>{size}개</option>\n+                    ))}\n+                  </PageSizeSelect>\n+                </PageSizeSelector>\n+                \n+                <PageNavigation>\n+                  <PageButton \n+                    $disabled={currentPage === 1}\n+                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n+                    disabled={currentPage === 1}\n+                  >\n+                    이전\n+                  </PageButton>\n+                  \n+                  <PageInfo>\n+                    {currentPage} / {totalPages}\n+                  </PageInfo>\n+                  \n+                  <PageButton \n+                    $disabled={currentPage === totalPages}\n+                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n+                    disabled={currentPage === totalPages}\n+                  >\n+                    다음\n+                  </PageButton>\n+                </PageNavigation>\n+              </PaginationControls>\n+            </PaginationContainer>\n+          )}\n+        </>\n       ) : (\n         <EmptyState>\n           <h3>{emptyText}</h3>\n           <p>{emptyDescription}</p>\n"
                },
                {
                    "date": 1761131758214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,14 +206,14 @@\n   \n   // 페이지네이션 state\n   const [currentPage, setCurrentPage] = React.useState(1);\n   const [pageSize, setPageSize] = React.useState(\n-    pagination?.pageSize || 15\n+    pagination?.pageSize || 5\n   );\n   \n   // 페이지네이션 설정\n   const paginationEnabled = pagination?.enabled || false;\n-  const pageSizeOptions = pagination?.pageSizeOptions || [15, 30, 100];\n+  const pageSizeOptions = pagination?.pageSizeOptions || [5, 15, 30];\n   const showTotal = pagination?.showTotal !== false;\n   \n   // 페이지네이션 계산\n   const totalItems = data.length;\n@@ -255,10 +255,59 @@\n           {resultCount && <ResultsCount>{resultCount}</ResultsCount>}\n         </ResultsHeader>\n       )}\n \n+      {paginationEnabled && (\n+        <PaginationContainer>\n+          <PaginationInfo>\n+            {showTotal && (\n+              <span>\n+                총 {totalItems.toLocaleString()}개 중 {(startIndex + 1).toLocaleString()}-{Math.min(endIndex, totalItems).toLocaleString()}개 표시\n+              </span>\n+            )}\n+          </PaginationInfo>\n+          \n+          <PaginationControls>\n+            <PageSizeSelector>\n+              <span>페이지당</span>\n+              <PageSizeSelect \n+                value={pageSize} \n+                onChange={(e) => setPageSize(Number(e.target.value))}\n+              >\n+                {pageSizeOptions.map(size => (\n+                  <option key={size} value={size}>{size}개</option>\n+                ))}\n+              </PageSizeSelect>\n+            </PageSizeSelector>\n+            \n+            <PageNavigation>\n+              <PageButton \n+                $disabled={currentPage === 1}\n+                onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n+                disabled={currentPage === 1}\n+              >\n+                이전\n+              </PageButton>\n+              \n+              <PageInfo>\n+                {currentPage} / {totalPages}\n+              </PageInfo>\n+              \n+              <PageButton \n+                $disabled={currentPage === totalPages}\n+                onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n+                disabled={currentPage === totalPages}\n+              >\n+                다음\n+              </PageButton>\n+            </PageNavigation>\n+          </PaginationControls>\n+        </PaginationContainer>\n+      )}\n+\n       {data.length > 0 ? (\n         <>\n+          \n           <TableContainer>\n             <Table>\n               <TableHeader>\n                 <TableRow>\n@@ -293,56 +342,8 @@\n                 ))}\n               </tbody>\n             </Table>\n           </TableContainer>\n-          \n-          {paginationEnabled && (\n-            <PaginationContainer>\n-              <PaginationInfo>\n-                {showTotal && (\n-                  <span>\n-                    총 {totalItems.toLocaleString()}개 중 {(startIndex + 1).toLocaleString()}-{Math.min(endIndex, totalItems).toLocaleString()}개 표시\n-                  </span>\n-                )}\n-              </PaginationInfo>\n-              \n-              <PaginationControls>\n-                <PageSizeSelector>\n-                  <span>페이지당</span>\n-                  <PageSizeSelect \n-                    value={pageSize} \n-                    onChange={(e) => setPageSize(Number(e.target.value))}\n-                  >\n-                    {pageSizeOptions.map(size => (\n-                      <option key={size} value={size}>{size}개</option>\n-                    ))}\n-                  </PageSizeSelect>\n-                </PageSizeSelector>\n-                \n-                <PageNavigation>\n-                  <PageButton \n-                    $disabled={currentPage === 1}\n-                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n-                    disabled={currentPage === 1}\n-                  >\n-                    이전\n-                  </PageButton>\n-                  \n-                  <PageInfo>\n-                    {currentPage} / {totalPages}\n-                  </PageInfo>\n-                  \n-                  <PageButton \n-                    $disabled={currentPage === totalPages}\n-                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n-                    disabled={currentPage === totalPages}\n-                  >\n-                    다음\n-                  </PageButton>\n-                </PageNavigation>\n-              </PaginationControls>\n-            </PaginationContainer>\n-          )}\n         </>\n       ) : (\n         <EmptyState>\n           <h3>{emptyText}</h3>\n"
                },
                {
                    "date": 1761367350513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,8 +221,17 @@\n   const startIndex = (currentPage - 1) * pageSize;\n   const endIndex = startIndex + pageSize;\n   const currentData = paginationEnabled ? data.slice(startIndex, endIndex) : data;\n   \n+  // 디버깅 로그 추가\n+  console.log('=== DataTable 렌더링 정보 ===');\n+  console.log('전체 데이터 개수:', data.length);\n+  console.log('페이지네이션 활성:', paginationEnabled);\n+  console.log('현재 페이지 데이터 개수:', currentData.length);\n+  if (data.length > 0) {\n+    console.log('첫 번째 데이터:', data[0]);\n+  }\n+  \n   // 페이지 변경 시 첫 페이지로 리셋\n   React.useEffect(() => {\n     setCurrentPage(1);\n   }, [data.length, pageSize]);\n"
                }
            ],
            "date": 1761130638597,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../styles/colors';\nimport { AppTextStyles } from '../../styles/textStyles';\n\nexport interface TableColumn<T = any> {\n  key: string;\n  title: string;\n  width?: string;\n  align?: 'left' | 'center' | 'right';\n  render?: (value: any, record: T, index: number) => React.ReactNode;\n  sortable?: boolean;\n}\n\nexport interface DataTableProps<T = any> {\n  title?: string;\n  columns: TableColumn<T>[];\n  data: T[];\n  loading?: boolean;\n  emptyText?: string;\n  emptyDescription?: string;\n  resultCount?: React.ReactNode;\n  onRowClick?: (record: T, index: number) => void;\n  className?: string;\n}\n\nconst ResultsSection = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n`;\n\nconst ResultsHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px 24px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n`;\n\nconst ResultsTitle = styled.h2`\n  font-size: ${AppTextStyles.title3.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onBackground};\n  margin: 0;\n`;\n\nconst ResultsCount = styled.div`\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onInput1};\n  text-align: right;\n  line-height: 1.4;\n`;\n\nconst TableContainer = styled.div`\n  overflow-x: auto;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nconst TableHeader = styled.thead`\n  background: #f8f9fa;\n`;\n\nconst TableRow = styled.tr<{ $clickable?: boolean }>`\n  border-bottom: 1px solid ${AppColors.borderLight};\n  cursor: ${props => props.$clickable ? 'pointer' : 'default'};\n  \n  &:hover {\n    background: #f8f9fa;\n  }\n`;\n\nconst TableHeaderCell = styled.th<{ $width?: string; $align?: 'left' | 'center' | 'right' }>`\n  padding: 12px 16px;\n  text-align: ${props => props.$align || 'left'};\n  font-size: ${AppTextStyles.label2.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onInput1};\n  border-bottom: 1px solid ${AppColors.borderLight};\n  width: ${props => props.$width || 'auto'};\n`;\n\nconst TableCell = styled.td<{ $align?: 'left' | 'center' | 'right' }>`\n  padding: 12px 16px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onBackground};\n  vertical-align: middle;\n  text-align: ${props => props.$align || 'left'};\n`;\n\nconst EmptyState = styled.div`\n  padding: 60px 24px;\n  text-align: center;\n  color: ${AppColors.onInput1};\n`;\n\nconst LoadingState = styled.div`\n  padding: 60px 24px;\n  text-align: center;\n  color: ${AppColors.onInput1};\n`;\n\nfunction DataTable<T = any>({\n  title,\n  columns,\n  data,\n  loading = false,\n  emptyText = \"데이터가 없습니다\",\n  emptyDescription = \"새로운 데이터를 추가해보세요.\",\n  resultCount,\n  onRowClick,\n  className\n}: DataTableProps<T>) {\n  \n  const renderCell = (column: TableColumn<T>, record: T, index: number) => {\n    const value = (record as any)[column.key];\n    \n    if (column.render) {\n      return column.render(value, record, index);\n    }\n    \n    return value;\n  };\n\n  if (loading) {\n    return (\n      <ResultsSection className={className}>\n        <LoadingState>\n          <h3>데이터를 불러오는 중...</h3>\n        </LoadingState>\n      </ResultsSection>\n    );\n  }\n\n  return (\n    <ResultsSection className={className}>\n      {(title || resultCount) && (\n        <ResultsHeader>\n          {title && <ResultsTitle>{title}</ResultsTitle>}\n          {resultCount && <ResultsCount>{resultCount}</ResultsCount>}\n        </ResultsHeader>\n      )}\n\n      {data.length > 0 ? (\n        <TableContainer>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                {columns.map((column, index) => (\n                  <TableHeaderCell \n                    key={column.key || index}\n                    $width={column.width}\n                    $align={column.align}\n                  >\n                    {column.title}\n                  </TableHeaderCell>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <tbody>\n              {data.map((record, index) => (\n                <TableRow \n                  key={index}\n                  $clickable={!!onRowClick}\n                  onClick={() => onRowClick?.(record, index)}\n                >\n                  {columns.map((column, colIndex) => (\n                    <TableCell \n                      key={column.key || colIndex}\n                      $align={column.align}\n                    >\n                      {renderCell(column, record, index)}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </tbody>\n          </Table>\n        </TableContainer>\n      ) : (\n        <EmptyState>\n          <h3>{emptyText}</h3>\n          <p>{emptyDescription}</p>\n        </EmptyState>\n      )}\n    </ResultsSection>\n  );\n}\n\nexport default DataTable;"
        }
    ]
}