{
    "sourceFile": "src/components/BodyImageCanvas.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1761463031055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761465672715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n const CanvasContainer = styled.div`\n   position: relative;\n   width: 100%;\n-  height: 300px;\n+  height: 350px;\n   border: 2px dashed ${AppColors.borderLight};\n   border-radius: 8px;\n   overflow: hidden;\n   background: #f9f9f9;\n@@ -39,37 +39,52 @@\n const PointMarker = styled.div<{ $x: number; $y: number; $color?: string }>`\n   position: absolute;\n   left: ${props => props.$x}%;\n   top: ${props => props.$y}%;\n-  width: 12px;\n-  height: 12px;\n+  width: 10px;\n+  height: 10px;\n   background: ${props => props.$color || '#ff0000'};\n   border: 2px solid white;\n   border-radius: 50%;\n   transform: translate(-50%, -50%);\n   cursor: pointer;\n   z-index: 10;\n-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n+  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.4);\n   \n   &:hover {\n     transform: translate(-50%, -50%) scale(1.2);\n+    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.5);\n   }\n `;\n \n-const PointTooltip = styled.div<{ $x: number; $y: number }>`\n+const PointMemo = styled.div<{ $x: number; $y: number }>`\n   position: absolute;\n   left: ${props => props.$x}%;\n   top: ${props => props.$y}%;\n   background: rgba(0, 0, 0, 0.8);\n   color: white;\n-  padding: 4px 8px;\n-  border-radius: 4px;\n-  font-size: 12px;\n+  padding: 2px 6px;\n+  border-radius: 3px;\n+  font-size: 9px;\n+  font-weight: 500;\n   white-space: nowrap;\n-  transform: translate(-50%, -120%);\n-  z-index: 20;\n+  transform: translate(-50%, calc(-100% - 8px));\n+  z-index: 15;\n   pointer-events: none;\n-  max-width: 200px;\n+  max-width: 120px;\n+  overflow: hidden;\n+  text-overflow: ellipsis;\n+  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);\n+  \n+  &::after {\n+    content: '';\n+    position: absolute;\n+    top: 100%;\n+    left: 50%;\n+    transform: translateX(-50%);\n+    border: 3px solid transparent;\n+    border-top-color: rgba(0, 0, 0, 0.8);\n+  }\n `;\n \n const ImageTitle = styled.div`\n   text-align: center;\n@@ -178,9 +193,8 @@\n   onDeletePoint,\n   readonly = false,\n }) => {\n   const canvasRef = useRef<HTMLDivElement>(null);\n-  const [hoveredPoint, setHoveredPoint] = useState<BodyImagePoint | null>(null);\n   const [editingPoint, setEditingPoint] = useState<BodyImagePoint | null>(null);\n   const [pointMemo, setPointMemo] = useState('');\n   const [pointColor, setPointColor] = useState('#ff0000');\n \n@@ -284,17 +298,15 @@\n                 $x={point.x}\n                 $y={point.y}\n                 $color={point.color}\n                 onClick={(e) => handlePointClick(point, e)}\n-                onMouseEnter={() => setHoveredPoint(point)}\n-                onMouseLeave={() => setHoveredPoint(null)}\n               />\n               \n-              {/* 툴팁 */}\n-              {hoveredPoint?.id === point.id && point.memo && (\n-                <PointTooltip $x={point.x} $y={point.y}>\n+              {/* 메모 항상 표시 */}\n+              {point.memo && (\n+                <PointMemo $x={point.x} $y={point.y}>\n                   {point.memo}\n-                </PointTooltip>\n+                </PointMemo>\n               )}\n             </React.Fragment>\n           ))}\n         </CanvasContainer>\n"
                },
                {
                    "date": 1761465796381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,21 +39,21 @@\n const PointMarker = styled.div<{ $x: number; $y: number; $color?: string }>`\n   position: absolute;\n   left: ${props => props.$x}%;\n   top: ${props => props.$y}%;\n-  width: 10px;\n-  height: 10px;\n+  width: 8px;\n+  height: 8px;\n   background: ${props => props.$color || '#ff0000'};\n-  border: 2px solid white;\n+  border: 1px solid white;\n   border-radius: 50%;\n   transform: translate(-50%, -50%);\n   cursor: pointer;\n   z-index: 10;\n-  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.4);\n+  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.4);\n   \n   &:hover {\n-    transform: translate(-50%, -50%) scale(1.2);\n-    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.5);\n+    transform: translate(-50%, -50%) scale(1.3);\n+    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);\n   }\n `;\n \n const PointMemo = styled.div<{ $x: number; $y: number }>`\n@@ -61,28 +61,28 @@\n   left: ${props => props.$x}%;\n   top: ${props => props.$y}%;\n   background: rgba(0, 0, 0, 0.8);\n   color: white;\n-  padding: 2px 6px;\n-  border-radius: 3px;\n-  font-size: 9px;\n+  padding: 1px 4px;\n+  border-radius: 2px;\n+  font-size: 8px;\n   font-weight: 500;\n   white-space: nowrap;\n-  transform: translate(-50%, calc(-100% - 8px));\n+  transform: translate(-50%, calc(-100% - 6px));\n   z-index: 15;\n   pointer-events: none;\n-  max-width: 120px;\n+  max-width: 100px;\n   overflow: hidden;\n   text-overflow: ellipsis;\n-  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);\n+  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\n   \n   &::after {\n     content: '';\n     position: absolute;\n     top: 100%;\n     left: 50%;\n     transform: translateX(-50%);\n-    border: 3px solid transparent;\n+    border: 2px solid transparent;\n     border-top-color: rgba(0, 0, 0, 0.8);\n   }\n `;\n \n"
                }
            ],
            "date": 1761463031055,
            "name": "Commit-0",
            "content": "import React, { useState, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../styles/colors';\nimport { BodyImagePoint } from '../utils/db/types';\n\ninterface BodyImageCanvasProps {\n  imageType: 'front' | 'spine' | 'back';\n  imageUrl: string;\n  points: BodyImagePoint[];\n  onAddPoint: (point: Omit<BodyImagePoint, 'id'>) => void;\n  onUpdatePoint: (pointId: string, updates: Partial<Omit<BodyImagePoint, 'id'>>) => void;\n  onDeletePoint: (pointId: string) => void;\n  readonly?: boolean;\n}\n\nconst CanvasContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 300px;\n  border: 2px dashed ${AppColors.borderLight};\n  border-radius: 8px;\n  overflow: hidden;\n  background: #f9f9f9;\n  cursor: crosshair;\n  \n  &.readonly {\n    cursor: default;\n  }\n`;\n\nconst BodyImage = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n  user-select: none;\n  pointer-events: none;\n`;\n\nconst PointMarker = styled.div<{ $x: number; $y: number; $color?: string }>`\n  position: absolute;\n  left: ${props => props.$x}%;\n  top: ${props => props.$y}%;\n  width: 12px;\n  height: 12px;\n  background: ${props => props.$color || '#ff0000'};\n  border: 2px solid white;\n  border-radius: 50%;\n  transform: translate(-50%, -50%);\n  cursor: pointer;\n  z-index: 10;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n  \n  &:hover {\n    transform: translate(-50%, -50%) scale(1.2);\n  }\n`;\n\nconst PointTooltip = styled.div<{ $x: number; $y: number }>`\n  position: absolute;\n  left: ${props => props.$x}%;\n  top: ${props => props.$y}%;\n  background: rgba(0, 0, 0, 0.8);\n  color: white;\n  padding: 4px 8px;\n  border-radius: 4px;\n  font-size: 12px;\n  white-space: nowrap;\n  transform: translate(-50%, -120%);\n  z-index: 20;\n  pointer-events: none;\n  max-width: 200px;\n`;\n\nconst ImageTitle = styled.div`\n  text-align: center;\n  font-weight: 600;\n  color: ${AppColors.onBackground};\n  margin-bottom: 8px;\n`;\n\nconst PointEditModal = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n  z-index: 1000;\n  min-width: 300px;\n`;\n\nconst ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  z-index: 999;\n`;\n\nconst ModalTitle = styled.h3`\n  margin: 0 0 15px 0;\n  color: ${AppColors.onBackground};\n`;\n\nconst ModalInput = styled.input`\n  width: 100%;\n  padding: 8px 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 4px;\n  margin-bottom: 10px;\n  box-sizing: border-box;\n`;\n\nconst ModalTextarea = styled.textarea`\n  width: 100%;\n  padding: 8px 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 4px;\n  margin-bottom: 15px;\n  resize: vertical;\n  min-height: 80px;\n  box-sizing: border-box;\n`;\n\nconst ModalButtonGroup = styled.div`\n  display: flex;\n  gap: 10px;\n  justify-content: flex-end;\n`;\n\nconst ModalButton = styled.button<{ $variant?: 'primary' | 'secondary' | 'danger' }>`\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: 500;\n  \n  background: ${props => {\n    switch (props.$variant) {\n      case 'primary': return AppColors.primary;\n      case 'danger': return '#dc3545';\n      default: return AppColors.borderLight;\n    }\n  }};\n  \n  color: ${props => {\n    switch (props.$variant) {\n      case 'primary':\n      case 'danger': return 'white';\n      default: return AppColors.onBackground;\n    }\n  }};\n  \n  &:hover {\n    opacity: 0.9;\n  }\n`;\n\nconst getImageTitle = (imageType: 'front' | 'spine' | 'back'): string => {\n  switch (imageType) {\n    case 'front': return '정면';\n    case 'spine': return '척추';\n    case 'back': return '후면';\n    default: return '';\n  }\n};\n\nconst BodyImageCanvas: React.FC<BodyImageCanvasProps> = ({\n  imageType,\n  imageUrl,\n  points,\n  onAddPoint,\n  onUpdatePoint,\n  onDeletePoint,\n  readonly = false,\n}) => {\n  const canvasRef = useRef<HTMLDivElement>(null);\n  const [hoveredPoint, setHoveredPoint] = useState<BodyImagePoint | null>(null);\n  const [editingPoint, setEditingPoint] = useState<BodyImagePoint | null>(null);\n  const [pointMemo, setPointMemo] = useState('');\n  const [pointColor, setPointColor] = useState('#ff0000');\n\n  const handleCanvasClick = useCallback((event: React.MouseEvent) => {\n    if (readonly) return;\n    \n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = ((event.clientX - rect.left) / rect.width) * 100;\n    const y = ((event.clientY - rect.top) / rect.height) * 100;\n\n    // 새 포인트 추가를 위한 모달 열기\n    setPointMemo('');\n    setPointColor('#ff0000');\n    setEditingPoint({\n      id: 'new',\n      x: Math.round(x * 100) / 100,\n      y: Math.round(y * 100) / 100,\n      memo: '',\n      color: '#ff0000'\n    });\n  }, [readonly]);\n\n  const handlePointClick = useCallback((point: BodyImagePoint, event: React.MouseEvent) => {\n    if (readonly) return;\n    \n    event.stopPropagation();\n    setEditingPoint(point);\n    setPointMemo(point.memo);\n    setPointColor(point.color || '#ff0000');\n  }, [readonly]);\n\n  const handleSavePoint = useCallback(() => {\n    if (!editingPoint) return;\n\n    if (editingPoint.id === 'new') {\n      // 새 포인트 추가\n      onAddPoint({\n        x: editingPoint.x,\n        y: editingPoint.y,\n        memo: pointMemo,\n        color: pointColor,\n      });\n    } else {\n      // 기존 포인트 업데이트\n      onUpdatePoint(editingPoint.id, {\n        memo: pointMemo,\n        color: pointColor,\n      });\n    }\n\n    setEditingPoint(null);\n    setPointMemo('');\n    setPointColor('#ff0000');\n  }, [editingPoint, pointMemo, pointColor, onAddPoint, onUpdatePoint]);\n\n  const handleDeletePoint = useCallback(() => {\n    if (!editingPoint || editingPoint.id === 'new') return;\n\n    onDeletePoint(editingPoint.id);\n    setEditingPoint(null);\n    setPointMemo('');\n    setPointColor('#ff0000');\n  }, [editingPoint, onDeletePoint]);\n\n  const handleCloseModal = useCallback(() => {\n    setEditingPoint(null);\n    setPointMemo('');\n    setPointColor('#ff0000');\n  }, []);\n\n  return (\n    <>\n      <div>\n        <ImageTitle>{getImageTitle(imageType)}</ImageTitle>\n        <CanvasContainer\n          ref={canvasRef}\n          onClick={handleCanvasClick}\n          className={readonly ? 'readonly' : ''}\n        >\n          {imageUrl ? (\n            <BodyImage src={imageUrl} alt={getImageTitle(imageType)} />\n          ) : (\n            <div style={{ \n              display: 'flex', \n              alignItems: 'center', \n              justifyContent: 'center', \n              height: '100%',\n              color: AppColors.onInput1 \n            }}>\n              {readonly ? '이미지 없음' : '이미지를 업로드하거나 클릭하여 포인트를 추가하세요'}\n            </div>\n          )}\n          \n          {/* 포인트들 렌더링 */}\n          {points.map((point) => (\n            <React.Fragment key={point.id}>\n              <PointMarker\n                $x={point.x}\n                $y={point.y}\n                $color={point.color}\n                onClick={(e) => handlePointClick(point, e)}\n                onMouseEnter={() => setHoveredPoint(point)}\n                onMouseLeave={() => setHoveredPoint(null)}\n              />\n              \n              {/* 툴팁 */}\n              {hoveredPoint?.id === point.id && point.memo && (\n                <PointTooltip $x={point.x} $y={point.y}>\n                  {point.memo}\n                </PointTooltip>\n              )}\n            </React.Fragment>\n          ))}\n        </CanvasContainer>\n      </div>\n\n      {/* 포인트 편집 모달 */}\n      {editingPoint && (\n        <>\n          <ModalOverlay onClick={handleCloseModal} />\n          <PointEditModal>\n            <ModalTitle>\n              {editingPoint.id === 'new' ? '새 포인트 추가' : '포인트 편집'}\n            </ModalTitle>\n            \n            <div style={{ marginBottom: '10px' }}>\n              <label style={{ display: 'block', marginBottom: '5px', fontWeight: '500' }}>\n                위치: ({editingPoint.x.toFixed(1)}%, {editingPoint.y.toFixed(1)}%)\n              </label>\n            </div>\n            \n            <div style={{ marginBottom: '10px' }}>\n              <label style={{ display: 'block', marginBottom: '5px', fontWeight: '500' }}>\n                색상:\n              </label>\n              <ModalInput\n                type=\"color\"\n                value={pointColor}\n                onChange={(e) => setPointColor(e.target.value)}\n              />\n            </div>\n            \n            <div style={{ marginBottom: '15px' }}>\n              <label style={{ display: 'block', marginBottom: '5px', fontWeight: '500' }}>\n                메모:\n              </label>\n              <ModalTextarea\n                value={pointMemo}\n                onChange={(e) => setPointMemo(e.target.value)}\n                placeholder=\"이 포인트에 대한 설명을 입력하세요...\"\n              />\n            </div>\n            \n            <ModalButtonGroup>\n              <ModalButton onClick={handleCloseModal}>\n                취소\n              </ModalButton>\n              \n              {editingPoint.id !== 'new' && (\n                <ModalButton $variant=\"danger\" onClick={handleDeletePoint}>\n                  삭제\n                </ModalButton>\n              )}\n              \n              <ModalButton $variant=\"primary\" onClick={handleSavePoint}>\n                {editingPoint.id === 'new' ? '추가' : '저장'}\n              </ModalButton>\n            </ModalButtonGroup>\n          </PointEditModal>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default BodyImageCanvas;"
        }
    ]
}