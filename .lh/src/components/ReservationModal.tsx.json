{
    "sourceFile": "src/components/ReservationModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1761734768596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761735760063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,14 +9,30 @@\n \n // 스타일 컴포넌트들\n const ModalContent = styled.div`\n   width: 100%;\n-  max-width: 800px;\n+  max-width: 1200px;\n   max-height: 80vh;\n   padding: 24px;\n   overflow-y: auto;\n `;\n \n+const ContentWrapper = styled.div`\n+  display: flex;\n+  gap: 24px;\n+  height: 100%;\n+`;\n+\n+const LeftPanel = styled.div`\n+  flex: 1;\n+  min-width: 0;\n+`;\n+\n+const RightPanel = styled.div`\n+  flex: 1;\n+  min-width: 0;\n+`;\n+\n const TimeInfo = styled.div`\n   background-color: ${AppColors.btnCEmphasis};\n   padding: 16px;\n   border-radius: 8px;\n@@ -117,14 +133,36 @@\n   font-size: ${AppTextStyles.body1.fontSize};\n `;\n \n const MemoSection = styled.div`\n-  margin-top: 24px;\n+  display: flex;\n+  flex-direction: column;\n+  height: 100%;\n `;\n \n+const SelectedMemberInfo = styled.div`\n+  background-color: ${AppColors.btnCEmphasis};\n+  padding: 16px;\n+  border-radius: 8px;\n+  margin-bottom: 16px;\n+`;\n+\n+const SelectedMemberName = styled.div`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.primary};\n+  margin-bottom: 4px;\n+`;\n+\n+const SelectedMemberDetails = styled.div`\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface}80;\n+`;\n+\n const MemoTextArea = styled.textarea`\n   width: 100%;\n-  min-height: 100px;\n+  flex: 1;\n+  min-height: 400px;\n   padding: 12px;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n   font-size: ${AppTextStyles.body1.fontSize};\n@@ -137,8 +175,15 @@\n     border-color: ${AppColors.primary};\n   }\n `;\n \n+const MemoActions = styled.div`\n+  display: flex;\n+  gap: 8px;\n+  margin-top: 12px;\n+  justify-content: flex-end;\n+`;\n+\n const ModalFooter = styled.div`\n   display: flex;\n   gap: 12px;\n   justify-content: flex-end;\n@@ -237,8 +282,9 @@\n   const [selectedMember, setSelectedMember] = useState<MemberWithCourse | null>(null);\n   const [memo, setMemo] = useState('');\n   const [loading, setLoading] = useState(false);\n   const [timeConflict, setTimeConflict] = useState<string>('');\n+  const [savingMemo, setSavingMemo] = useState(false);\n \n   // 권한 체크\n   const hasPermission = useMemo(() => {\n     if (!currentUser) return false;\n@@ -344,8 +390,34 @@\n       setLoading(false);\n     }\n   }, [isOpen, branchId, programId, searchQuery]);\n \n+  // 메모만 저장하는 함수\n+  const handleSaveMemo = async () => {\n+    if (!selectedMember) return;\n+\n+    setSavingMemo(true);\n+    try {\n+      const updatedMember = {\n+        ...selectedMember,\n+        remarks: memo,\n+        updatedAt: new Date()\n+      };\n+      \n+      await dbManager.updateMember(updatedMember.id, updatedMember);\n+      \n+      // 로컬 상태 업데이트\n+      setSelectedMember(prev => prev ? { ...prev, remarks: memo } : null);\n+      \n+      alert('비고가 성공적으로 저장되었습니다.');\n+    } catch (error) {\n+      console.error('비고 저장 실패:', error);\n+      alert('비고 저장 중 오류가 발생했습니다.');\n+    } finally {\n+      setSavingMemo(false);\n+    }\n+  };\n+\n   // 예약 생성\n   const handleCreateReservation = async () => {\n     if (!selectedMember || !hasPermission) return;\n \n@@ -414,15 +486,13 @@\n \n         await dbManager.updateCourseEnrollment(updatedEnrollment.id, updatedEnrollment);\n       }\n \n-      // 회원 메모 업데이트 (메모가 있는 경우)\n-      if (memo.trim()) {\n+      // 회원 비고 업데이트 (메모가 있는 경우)\n+      if (memo.trim() && memo !== selectedMember.remarks) {\n         const updatedMember = {\n           ...selectedMember,\n-          remarks: selectedMember.remarks ? \n-            `${selectedMember.remarks}\\n\\n[${new Date().toLocaleDateString('ko-KR')}] ${memo}` : \n-            `[${new Date().toLocaleDateString('ko-KR')}] ${memo}`,\n+          remarks: memo,\n           updatedAt: new Date()\n         };\n         \n         await dbManager.updateMember(updatedMember.id, updatedMember);\n@@ -484,9 +554,9 @@\n           <Button variant=\"secondary\" onClick={handleClose}>\n             확인\n           </Button>\n         }\n-        width=\"400px\"\n+        width=\"500px\"\n       />\n     );\n   }\n \n@@ -495,92 +565,128 @@\n       isOpen={isOpen} \n       onClose={handleClose}\n       body={\n         <ModalContent>\n-          {/* 시간 정보 */}\n-          <TimeInfo>\n-            <TimeText>\n-              {formatDate(startTime)}\n-              <br />\n-              {formatTime(startTime)} - {formatTime(endTime)} ({Math.round((endTime.getTime() - startTime.getTime()) / (1000 * 60))}분)\n-              <br />\n-              {staffName} 코치 · {programName}\n-            </TimeText>\n-          </TimeInfo>\n+          <ContentWrapper>\n+            {/* 왼쪽 패널 - 시간 정보 및 회원 검색/목록 */}\n+            <LeftPanel>\n+              {/* 시간 정보 */}\n+              <TimeInfo>\n+                <TimeText>\n+                  {formatDate(startTime)}\n+                  <br />\n+                  {formatTime(startTime)} - {formatTime(endTime)} ({Math.round((endTime.getTime() - startTime.getTime()) / (1000 * 60))}분)\n+                  <br />\n+                  {staffName} 코치 · {programName}\n+                </TimeText>\n+              </TimeInfo>\n \n-          {/* 시간 겹침 경고 */}\n-          {timeConflict && (\n-            <WarningText>\n-              {timeConflict}\n-            </WarningText>\n-          )}\n+              {/* 시간 겹침 경고 */}\n+              {timeConflict && (\n+                <WarningText>\n+                  {timeConflict}\n+                </WarningText>\n+              )}\n \n-          {/* 회원 검색 */}\n-          <SearchSection>\n-            <SectionTitle>수업 참여 회원 선택</SectionTitle>\n-            <TextField\n-              label=\"회원 이름 검색\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-              placeholder=\"회원 이름을 입력하세요\"\n-            />\n-          </SearchSection>\n+              {/* 회원 검색 */}\n+              <SearchSection>\n+                <SectionTitle>수업 참여 회원 선택</SectionTitle>\n+                <TextField\n+                  label=\"회원 이름 검색\"\n+                  value={searchQuery}\n+                  onChange={(e) => setSearchQuery(e.target.value)}\n+                  placeholder=\"회원 이름을 입력하세요\"\n+                />\n+              </SearchSection>\n \n-          {/* 회원 목록 */}\n-          <MemberList>\n-            {loading ? (\n-              <NoMembers>회원 목록을 불러오는 중...</NoMembers>\n-            ) : availableMembers.length === 0 ? (\n-              <NoMembers>\n-                {searchQuery ? \n-                  `\"${searchQuery}\"와 일치하는 회원이 없습니다.` : \n-                  '예약 가능한 회원이 없습니다.\\n횟수제 수강권을 가진 활성 회원만 예약 가능합니다.'\n-                }\n-              </NoMembers>\n-            ) : (\n-              availableMembers.map(member => (\n-                <MemberItem\n-                  key={member.id}\n-                  selected={selectedMember?.id === member.id}\n-                  onClick={() => {\n-                    setSelectedMember(member);\n-                    setMemo(member.remarks || '');\n-                  }}\n-                >\n-                  <MemberInfo>\n-                    <MemberDetails>\n-                      <MemberName>{member.name}</MemberName>\n-                      <MemberPhone>{member.phone}</MemberPhone>\n-                      <CourseInfo>\n-                        <span>{member.courseEnrollment?.productName}</span>\n-                        <span>•</span>\n-                        <SessionCount low={(member.availableSessions || 0) <= 3}>\n-                          잔여 {member.availableSessions}회\n-                        </SessionCount>\n-                      </CourseInfo>\n-                      {member.remarks && (\n-                        <MemberMemo>\n-                          비고: {member.remarks}\n-                        </MemberMemo>\n-                      )}\n-                    </MemberDetails>\n-                  </MemberInfo>\n-                </MemberItem>\n-              ))\n-            )}\n-          </MemberList>\n+              {/* 회원 목록 */}\n+              <MemberList>\n+                {loading ? (\n+                  <NoMembers>회원 목록을 불러오는 중...</NoMembers>\n+                ) : availableMembers.length === 0 ? (\n+                  <NoMembers>\n+                    {searchQuery ? \n+                      `\"${searchQuery}\"와 일치하는 회원이 없습니다.` : \n+                      '예약 가능한 회원이 없습니다.\\n횟수제 수강권을 가진 활성 회원만 예약 가능합니다.'\n+                    }\n+                  </NoMembers>\n+                ) : (\n+                  availableMembers.map(member => (\n+                    <MemberItem\n+                      key={member.id}\n+                      selected={selectedMember?.id === member.id}\n+                      onClick={() => {\n+                        setSelectedMember(member);\n+                        setMemo(member.remarks || '');\n+                      }}\n+                    >\n+                      <MemberInfo>\n+                        <MemberDetails>\n+                          <MemberName>{member.name}</MemberName>\n+                          <MemberPhone>{member.phone}</MemberPhone>\n+                          <CourseInfo>\n+                            <span>{member.courseEnrollment?.productName}</span>\n+                            <span>•</span>\n+                            <SessionCount low={(member.availableSessions || 0) <= 3}>\n+                              잔여 {member.availableSessions}회\n+                            </SessionCount>\n+                          </CourseInfo>\n+                          {member.remarks && (\n+                            <MemberMemo>\n+                              비고: {member.remarks.length > 50 ? member.remarks.substring(0, 50) + '...' : member.remarks}\n+                            </MemberMemo>\n+                          )}\n+                        </MemberDetails>\n+                      </MemberInfo>\n+                    </MemberItem>\n+                  ))\n+                )}\n+              </MemberList>\n+            </LeftPanel>\n \n-          {/* 메모 섹션 */}\n-          {selectedMember && (\n-            <MemoSection>\n-              <SectionTitle>수업 메모</SectionTitle>\n-              <MemoTextArea\n-                value={memo}\n-                onChange={(e) => setMemo(e.target.value)}\n-                placeholder=\"이번 수업에 대한 메모를 입력하세요 (선택사항)\"\n-              />\n-            </MemoSection>\n-          )}\n+            {/* 오른쪽 패널 - 선택된 회원 정보 및 비고 */}\n+            <RightPanel>\n+              {selectedMember ? (\n+                <MemoSection>\n+                  <SectionTitle>선택된 회원</SectionTitle>\n+                  <SelectedMemberInfo>\n+                    <SelectedMemberName>{selectedMember.name}</SelectedMemberName>\n+                    <SelectedMemberDetails>\n+                      {selectedMember.phone} | {selectedMember.courseEnrollment?.productName} | 잔여 {selectedMember.availableSessions}회\n+                    </SelectedMemberDetails>\n+                  </SelectedMemberInfo>\n+                  \n+                  <SectionTitle>비고</SectionTitle>\n+                  <MemoTextArea\n+                    value={memo}\n+                    onChange={(e) => setMemo(e.target.value)}\n+                    placeholder=\"회원에 대한 비고사항을 입력하세요\"\n+                  />\n+                  \n+                  <MemoActions>\n+                    <Button \n+                      variant=\"secondary\" \n+                      onClick={handleSaveMemo}\n+                      disabled={savingMemo}\n+                    >\n+                      {savingMemo ? '저장 중...' : '비고 저장'}\n+                    </Button>\n+                  </MemoActions>\n+                </MemoSection>\n+              ) : (\n+                <div style={{ \n+                  display: 'flex', \n+                  alignItems: 'center', \n+                  justifyContent: 'center', \n+                  height: '200px',\n+                  color: AppColors.onSurface + '60',\n+                  fontSize: AppTextStyles.body1.fontSize\n+                }}>\n+                  왼쪽에서 회원을 선택하세요\n+                </div>\n+              )}\n+            </RightPanel>\n+          </ContentWrapper>\n         </ModalContent>\n       }\n       footer={\n         <ModalFooter>\n@@ -595,9 +701,9 @@\n             {loading ? '등록 중...' : '예약 등록'}\n           </Button>\n         </ModalFooter>\n       }\n-      width=\"800px\"\n+      width=\"1200px\"\n     />\n   );\n };\n \n"
                },
                {
                    "date": 1761735832518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,25 +12,32 @@\n   width: 100%;\n   max-width: 1200px;\n   max-height: 80vh;\n   padding: 24px;\n-  overflow-y: auto;\n+  overflow: hidden;\n+  box-sizing: border-box;\n `;\n \n const ContentWrapper = styled.div`\n   display: flex;\n   gap: 24px;\n   height: 100%;\n+  min-height: 0;\n+  box-sizing: border-box;\n `;\n \n const LeftPanel = styled.div`\n   flex: 1;\n   min-width: 0;\n+  overflow-y: auto;\n+  box-sizing: border-box;\n `;\n \n const RightPanel = styled.div`\n   flex: 1;\n   min-width: 0;\n+  overflow-y: auto;\n+  box-sizing: border-box;\n `;\n \n const TimeInfo = styled.div`\n   background-color: ${AppColors.btnCEmphasis};\n@@ -61,8 +68,9 @@\n   max-height: 300px;\n   overflow-y: auto;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n+  box-sizing: border-box;\n `;\n \n const MemberItem = styled.div<{ selected?: boolean }>`\n   padding: 16px;\n@@ -136,8 +144,10 @@\n const MemoSection = styled.div`\n   display: flex;\n   flex-direction: column;\n   height: 100%;\n+  min-height: 0;\n+  box-sizing: border-box;\n `;\n \n const SelectedMemberInfo = styled.div`\n   background-color: ${AppColors.btnCEmphasis};\n@@ -168,8 +178,9 @@\n   font-size: ${AppTextStyles.body1.fontSize};\n   color: ${AppColors.onSurface};\n   background-color: ${AppColors.surface};\n   resize: vertical;\n+  box-sizing: border-box;\n   \n   &:focus {\n     outline: none;\n     border-color: ${AppColors.primary};\n"
                },
                {
                    "date": 1761736027385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,34 +8,40 @@\n import { TextField } from './TextField';\n \n // 스타일 컴포넌트들\n const ModalContent = styled.div`\n+  min-width: 900px;\n   width: 100%;\n-  max-width: 1200px;\n-  max-height: 80vh;\n-  padding: 24px;\n   overflow: hidden;\n   box-sizing: border-box;\n `;\n \n const ContentWrapper = styled.div`\n   display: flex;\n   gap: 24px;\n-  height: 100%;\n+  height: 600px;\n   min-height: 0;\n   box-sizing: border-box;\n `;\n \n const LeftPanel = styled.div`\n   flex: 1;\n+  border-right: 1px solid ${AppColors.borderLight};\n+  padding-right: 24px;\n   min-width: 0;\n+  display: flex;\n+  flex-direction: column;\n   overflow-y: auto;\n   box-sizing: border-box;\n `;\n \n const RightPanel = styled.div`\n   flex: 1;\n+  padding-left: 24px;\n   min-width: 0;\n+  display: flex;\n+  flex-direction: column;\n+  text-align: left;\n   overflow-y: auto;\n   box-sizing: border-box;\n `;\n \n@@ -59,29 +65,34 @@\n \n const SectionTitle = styled.h3`\n   font-size: ${AppTextStyles.title3.fontSize};\n   font-weight: 600;\n-  color: ${AppColors.onSurface};\n-  margin: 0 0 16px 0;\n+  margin-bottom: 16px;\n+  color: ${AppColors.onBackground};\n+  border-bottom: 2px solid ${AppColors.primary};\n+  padding-bottom: 8px;\n `;\n \n const MemberList = styled.div`\n-  max-height: 300px;\n+  flex: 1;\n   overflow-y: auto;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n+  width: 100%;\n   box-sizing: border-box;\n+  min-height: 0;\n `;\n \n const MemberItem = styled.div<{ selected?: boolean }>`\n-  padding: 16px;\n+  padding: 12px 16px;\n   border-bottom: 1px solid ${AppColors.borderLight};\n   cursor: pointer;\n-  background-color: ${props => props.selected ? AppColors.btnCEmphasis : AppColors.surface};\n-  transition: background-color 0.2s;\n+  transition: all 0.2s;\n+  background: ${props => props.selected ? AppColors.primary : 'transparent'};\n+  color: ${props => props.selected ? AppColors.onPrimary : AppColors.onSurface};\n \n   &:hover {\n-    background-color: ${props => props.selected ? AppColors.btnCEmphasis : AppColors.background};\n+    background: ${props => props.selected ? AppColors.primary : `${AppColors.primary}10`};\n   }\n \n   &:last-child {\n     border-bottom: none;\n@@ -98,23 +109,24 @@\n   flex: 1;\n `;\n \n const MemberName = styled.div`\n+  font-weight: 600;\n   font-size: ${AppTextStyles.body1.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onSurface};\n   margin-bottom: 4px;\n `;\n \n const MemberPhone = styled.div`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onSurface}80;\n+  font-size: ${AppTextStyles.body3.fontSize};\n+  opacity: 0.8;\n+  line-height: 1.4;\n   margin-bottom: 4px;\n `;\n \n const CourseInfo = styled.div`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.secondary};\n+  font-size: ${AppTextStyles.body3.fontSize};\n+  opacity: 0.8;\n+  line-height: 1.4;\n   display: flex;\n   gap: 8px;\n   align-items: center;\n `;\n@@ -148,25 +160,43 @@\n   min-height: 0;\n   box-sizing: border-box;\n `;\n \n+const FormGroup = styled.div`\n+  margin-bottom: 16px;\n+`;\n+\n+const FormLabel = styled.label`\n+  display: block;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  font-weight: 500;\n+  color: ${AppColors.onSurface};\n+  margin-bottom: 8px;\n+`;\n+\n const SelectedMemberInfo = styled.div`\n-  background-color: ${AppColors.btnCEmphasis};\n+  background: ${AppColors.surface};\n+  border: 2px solid ${AppColors.primary};\n+  border-radius: 12px;\n   padding: 16px;\n-  border-radius: 8px;\n   margin-bottom: 16px;\n+  width: 100%;\n+  box-sizing: border-box;\n `;\n \n const SelectedMemberName = styled.div`\n   font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 600;\n+  font-weight: 700;\n   color: ${AppColors.primary};\n-  margin-bottom: 4px;\n+  margin-bottom: 8px;\n `;\n \n const SelectedMemberDetails = styled.div`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onSurface}80;\n+  display: grid;\n+  grid-template-columns: 1fr 1fr;\n+  gap: 8px;\n+  font-size: ${AppTextStyles.body3.fontSize};\n+  color: ${AppColors.onInput1};\n `;\n \n const MemoTextArea = styled.textarea`\n   width: 100%;\n@@ -236,14 +266,16 @@\n   `}\n `;\n \n const WarningText = styled.div`\n-  color: ${AppColors.error};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  margin-top: 8px;\n-  padding: 8px;\n-  background-color: #fee;\n-  border-radius: 4px;\n+  background: #fff3cd;\n+  border: 1px solid #ffeaa7;\n+  border-radius: 8px;\n+  padding: 12px;\n+  margin: 16px 0;\n+  color: #856404;\n+  font-size: 14px;\n+  text-align: left;\n `;\n \n // 인터페이스 정의\n interface ReservationModalProps {\n@@ -661,18 +693,23 @@\n                   <SectionTitle>선택된 회원</SectionTitle>\n                   <SelectedMemberInfo>\n                     <SelectedMemberName>{selectedMember.name}</SelectedMemberName>\n                     <SelectedMemberDetails>\n-                      {selectedMember.phone} | {selectedMember.courseEnrollment?.productName} | 잔여 {selectedMember.availableSessions}회\n+                      <div>연락처: {selectedMember.phone}</div>\n+                      <div>수강권: {selectedMember.courseEnrollment?.productName}</div>\n+                      <div>잔여 세션: {selectedMember.availableSessions}회</div>\n+                      <div>코치: {selectedMember.coach || '미지정'}</div>\n                     </SelectedMemberDetails>\n                   </SelectedMemberInfo>\n                   \n-                  <SectionTitle>비고</SectionTitle>\n-                  <MemoTextArea\n-                    value={memo}\n-                    onChange={(e) => setMemo(e.target.value)}\n-                    placeholder=\"회원에 대한 비고사항을 입력하세요\"\n-                  />\n+                  <FormGroup>\n+                    <FormLabel>비고</FormLabel>\n+                    <MemoTextArea\n+                      value={memo}\n+                      onChange={(e) => setMemo(e.target.value)}\n+                      placeholder=\"회원에 대한 비고사항을 입력하세요\"\n+                    />\n+                  </FormGroup>\n                   \n                   <MemoActions>\n                     <Button \n                       variant=\"secondary\" \n@@ -712,9 +749,9 @@\n             {loading ? '등록 중...' : '예약 등록'}\n           </Button>\n         </ModalFooter>\n       }\n-      width=\"1200px\"\n+      width=\"min(95vw, 1000px)\"\n     />\n   );\n };\n \n"
                },
                {
                    "date": 1761736426595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,22 +44,8 @@\n   overflow-y: auto;\n   box-sizing: border-box;\n `;\n \n-const TimeInfo = styled.div`\n-  background-color: ${AppColors.btnCEmphasis};\n-  padding: 16px;\n-  border-radius: 8px;\n-  margin-bottom: 24px;\n-`;\n-\n-const TimeText = styled.div`\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  font-weight: 500;\n-  color: ${AppColors.primary};\n-  text-align: center;\n-`;\n-\n const SearchSection = styled.div`\n   margin-bottom: 24px;\n `;\n \n@@ -172,8 +158,64 @@\n   color: ${AppColors.onSurface};\n   margin-bottom: 8px;\n `;\n \n+const ProductList = styled.div`\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  margin-bottom: 16px;\n+`;\n+\n+const ProductItem = styled.div<{ selected?: boolean }>`\n+  padding: 12px 16px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  background: ${props => props.selected ? AppColors.primary : 'transparent'};\n+  color: ${props => props.selected ? AppColors.onPrimary : AppColors.onSurface};\n+  \n+  &:hover {\n+    background: ${props => props.selected ? AppColors.primary : `${AppColors.primary}10`};\n+  }\n+  \n+  &:last-child {\n+    border-bottom: none;\n+  }\n+`;\n+\n+const ProductName = styled.div`\n+  font-weight: 600;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  margin-bottom: 4px;\n+`;\n+\n+const ProductInfo = styled.div`\n+  font-size: ${AppTextStyles.body3.fontSize};\n+  opacity: 0.8;\n+  line-height: 1.4;\n+`;\n+\n+const TimeDisplay = styled.div`\n+  background: ${AppColors.surface};\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  padding: 12px;\n+  margin: 16px 0;\n+  text-align: left;\n+`;\n+\n+const TimeText = styled.div`\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n+  margin-bottom: 4px;\n+`;\n+\n+const TimeValue = styled.div`\n+  font-size: ${AppTextStyles.title2.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.primary};\n+`;\n+\n const SelectedMemberInfo = styled.div`\n   background: ${AppColors.surface};\n   border: 2px solid ${AppColors.primary};\n   border-radius: 12px;\n@@ -301,8 +343,9 @@\n \n interface MemberWithCourse extends Member {\n   courseEnrollment?: CourseEnrollment;\n   availableSessions?: number;\n+  allEnrollments?: CourseEnrollment[];\n }\n \n const ReservationModal: React.FC<ReservationModalProps> = ({\n   isOpen,\n@@ -322,8 +365,9 @@\n }) => {\n   const [searchQuery, setSearchQuery] = useState('');\n   const [availableMembers, setAvailableMembers] = useState<MemberWithCourse[]>([]);\n   const [selectedMember, setSelectedMember] = useState<MemberWithCourse | null>(null);\n+  const [selectedEnrollment, setSelectedEnrollment] = useState<CourseEnrollment | null>(null);\n   const [memo, setMemo] = useState('');\n   const [loading, setLoading] = useState(false);\n   const [timeConflict, setTimeConflict] = useState<string>('');\n   const [savingMemo, setSavingMemo] = useState(false);\n@@ -351,17 +395,8 @@\n       hour12: false\n     });\n   };\n \n-  const formatDate = (date: Date): string => {\n-    return date.toLocaleDateString('ko-KR', {\n-      year: 'numeric',\n-      month: 'long',\n-      day: 'numeric',\n-      weekday: 'long'\n-    });\n-  };\n-\n   // 시간 겹침 체크\n   const checkTimeConflict = useMemo(() => {\n     const conflictingEvents = existingEvents.filter(event => {\n       // 같은 스태프의 이벤트만 체크\n@@ -401,28 +436,31 @@\n         member.isActive &&\n         (searchQuery === '' || member.name.toLowerCase().includes(searchQuery.toLowerCase()))\n       );\n \n-      // 횟수제 수강권을 가진 회원들만 필터링\n+      // 활성 횟수제 수강권을 가진 회원들만 필터링\n       const allEnrollments = await dbManager.getAllCourseEnrollments();\n       const membersWithCourse: MemberWithCourse[] = [];\n \n       for (const member of branchMembers) {\n-        // 해당 프로그램의 활성 횟수제 수강권 찾기\n-        const courseEnrollment = allEnrollments.find(enrollment =>\n+        // 해당 회원의 모든 활성 횟수제 수강권 찾기\n+        const memberEnrollments = allEnrollments.filter(enrollment =>\n           enrollment.memberId === member.id &&\n-          enrollment.programId === programId &&\n           enrollment.programType === '횟수제' &&\n           enrollment.enrollmentStatus === 'active' &&\n           (enrollment.completedSessions || 0) < (enrollment.sessionCount || 0)\n         );\n \n-        if (courseEnrollment) {\n-          const availableSessions = (courseEnrollment.sessionCount || 0) - (courseEnrollment.completedSessions || 0);\n+        if (memberEnrollments.length > 0) {\n+          // 첫 번째 수강권 정보를 기본으로 저장 (표시용)\n+          const primaryEnrollment = memberEnrollments[0];\n+          const availableSessions = (primaryEnrollment.sessionCount || 0) - (primaryEnrollment.completedSessions || 0);\n+          \n           membersWithCourse.push({\n             ...member,\n-            courseEnrollment,\n-            availableSessions\n+            courseEnrollment: primaryEnrollment,\n+            availableSessions,\n+            allEnrollments: memberEnrollments // 모든 수강권 정보 저장\n           });\n         }\n       }\n \n@@ -431,9 +469,9 @@\n       console.error('회원 목록 로드 실패:', error);\n     } finally {\n       setLoading(false);\n     }\n-  }, [isOpen, branchId, programId, searchQuery]);\n+  }, [isOpen, branchId, searchQuery]);\n \n   // 메모만 저장하는 함수\n   const handleSaveMemo = async () => {\n     if (!selectedMember) return;\n@@ -461,9 +499,9 @@\n   };\n \n   // 예약 생성\n   const handleCreateReservation = async () => {\n-    if (!selectedMember || !hasPermission) return;\n+    if (!selectedMember || !selectedEnrollment || !hasPermission) return;\n \n     // 시간 겹침 체크\n     if (timeConflict) {\n       alert('시간이 겹치는 다른 일정이 있어 예약할 수 없습니다.');\n@@ -473,20 +511,20 @@\n     setLoading(true);\n     try {\n       // 새 예약 이벤트 생성 (데이터베이스용 타입으로)\n       const newReservationForDB: Omit<import('../utils/db/types').ScheduleEvent, 'id' | 'createdAt' | 'updatedAt'> = {\n-        title: `${selectedMember.name} (${programName})`,\n+        title: `${selectedMember.name} (${selectedEnrollment.productName})`,\n         startTime,\n         endTime,\n         staffId,\n         staffName,\n-        programId,\n-        programName,\n+        programId: selectedEnrollment.programId || programId,\n+        programName: selectedEnrollment.programName || programName,\n         memberId: selectedMember.id,\n         memberName: selectedMember.name,\n         type: 'class',\n         color: '#3b82f6', // 파란색으로 수업 표시\n-        description: memo || `${selectedMember.name} 회원의 ${programName} 수업`,\n+        description: memo || `${selectedMember.name} 회원의 ${selectedEnrollment.productName} 수업`,\n         branchId,\n         branchName,\n         sourceType: 'booking',\n         sourceId: selectedMember.id\n@@ -518,18 +556,16 @@\n         createdAt: savedDBEvent.createdAt,\n         updatedAt: savedDBEvent.updatedAt\n       };\n \n-      // 수강권 세션 수 업데이트\n-      if (selectedMember.courseEnrollment) {\n-        const updatedEnrollment = {\n-          ...selectedMember.courseEnrollment,\n-          completedSessions: (selectedMember.courseEnrollment.completedSessions || 0) + 1,\n-          updatedAt: new Date()\n-        };\n+      // 선택된 상품의 수강권 세션 수 업데이트\n+      const updatedEnrollment = {\n+        ...selectedEnrollment,\n+        completedSessions: (selectedEnrollment.completedSessions || 0) + 1,\n+        updatedAt: new Date()\n+      };\n \n-        await dbManager.updateCourseEnrollment(updatedEnrollment.id, updatedEnrollment);\n-      }\n+      await dbManager.updateCourseEnrollment(updatedEnrollment.id, updatedEnrollment);\n \n       // 회원 비고 업데이트 (메모가 있는 경우)\n       if (memo.trim() && memo !== selectedMember.remarks) {\n         const updatedMember = {\n@@ -557,8 +593,9 @@\n   // 모달 닫기\n   const handleClose = () => {\n     setSearchQuery('');\n     setSelectedMember(null);\n+    setSelectedEnrollment(null);\n     setMemo('');\n     setTimeConflict('');\n     onClose();\n   };\n@@ -609,21 +646,10 @@\n       onClose={handleClose}\n       body={\n         <ModalContent>\n           <ContentWrapper>\n-            {/* 왼쪽 패널 - 시간 정보 및 회원 검색/목록 */}\n+            {/* 왼쪽 패널 - 회원 검색/목록 */}\n             <LeftPanel>\n-              {/* 시간 정보 */}\n-              <TimeInfo>\n-                <TimeText>\n-                  {formatDate(startTime)}\n-                  <br />\n-                  {formatTime(startTime)} - {formatTime(endTime)} ({Math.round((endTime.getTime() - startTime.getTime()) / (1000 * 60))}분)\n-                  <br />\n-                  {staffName} 코치 · {programName}\n-                </TimeText>\n-              </TimeInfo>\n-\n               {/* 시간 겹침 경고 */}\n               {timeConflict && (\n                 <WarningText>\n                   {timeConflict}\n@@ -658,8 +684,9 @@\n                       key={member.id}\n                       selected={selectedMember?.id === member.id}\n                       onClick={() => {\n                         setSelectedMember(member);\n+                        setSelectedEnrollment(member.allEnrollments?.[0] || null);\n                         setMemo(member.remarks || '');\n                       }}\n                     >\n                       <MemberInfo>\n@@ -685,24 +712,63 @@\n                 )}\n               </MemberList>\n             </LeftPanel>\n \n-            {/* 오른쪽 패널 - 선택된 회원 정보 및 비고 */}\n+            {/* 오른쪽 패널 - 선택된 회원 정보 및 상품 선택 */}\n             <RightPanel>\n               {selectedMember ? (\n                 <MemoSection>\n                   <SectionTitle>선택된 회원</SectionTitle>\n                   <SelectedMemberInfo>\n                     <SelectedMemberName>{selectedMember.name}</SelectedMemberName>\n                     <SelectedMemberDetails>\n                       <div>연락처: {selectedMember.phone}</div>\n-                      <div>수강권: {selectedMember.courseEnrollment?.productName}</div>\n-                      <div>잔여 세션: {selectedMember.availableSessions}회</div>\n-                      <div>코치: {selectedMember.coach || '미지정'}</div>\n+                      <div>지점: {selectedMember.branchName}</div>\n+                      <div>담당 코치: {selectedMember.coach || '미지정'}</div>\n+                      <div>활성 상품: {selectedMember.allEnrollments?.length || 0}개</div>\n                     </SelectedMemberDetails>\n                   </SelectedMemberInfo>\n                   \n                   <FormGroup>\n+                    <FormLabel>수강 상품 선택</FormLabel>\n+                    <ProductList>\n+                      {selectedMember.allEnrollments?.map(enrollment => {\n+                        const availableSessions = (enrollment.sessionCount || 0) - (enrollment.completedSessions || 0);\n+                        const sessionDuration = enrollment.programName?.includes('50분') || enrollment.programName?.includes('60분') ? 50 : 30;\n+                        \n+                        return (\n+                          <ProductItem\n+                            key={enrollment.id}\n+                            selected={selectedEnrollment?.id === enrollment.id}\n+                            onClick={() => setSelectedEnrollment(enrollment)}\n+                          >\n+                            <ProductName>{enrollment.productName}</ProductName>\n+                            <ProductInfo>\n+                              잔여 {availableSessions}회 | {sessionDuration}분 수업\n+                              <br />\n+                              만료일: {enrollment.endDate ? new Date(enrollment.endDate).toLocaleDateString('ko-KR') : '미설정'}\n+                            </ProductInfo>\n+                          </ProductItem>\n+                        );\n+                      })}\n+                    </ProductList>\n+                  </FormGroup>\n+\n+                  {selectedEnrollment && (\n+                    <FormGroup>\n+                      <FormLabel>예약 시간</FormLabel>\n+                      <TimeDisplay>\n+                        <TimeText>\n+                          {formatTime(startTime)} - {formatTime(endTime)}\n+                        </TimeText>\n+                        <TimeValue>\n+                          {selectedEnrollment.programName?.includes('50분') || selectedEnrollment.programName?.includes('60분') ? '50분' : '30분'} 수업\n+                        </TimeValue>\n+                      </TimeDisplay>\n+                    </FormGroup>\n+                  )}\n+                  \n+                  <FormGroup>\n                     <FormLabel>비고</FormLabel>\n                     <MemoTextArea\n                       value={memo}\n                       onChange={(e) => setMemo(e.target.value)}\n@@ -743,9 +809,9 @@\n           </Button>\n           <Button \n             variant=\"primary\" \n             onClick={handleCreateReservation}\n-            disabled={!selectedMember || !!timeConflict || loading}\n+            disabled={!selectedMember || !selectedEnrollment || !!timeConflict || loading}\n           >\n             {loading ? '등록 중...' : '예약 등록'}\n           </Button>\n         </ModalFooter>\n"
                },
                {
                    "date": 1761737458901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,55 +4,58 @@\n import { AppTextStyles } from '../styles/textStyles';\n import { dbManager, Member, CourseEnrollment, Program } from '../utils/indexedDB';\n import { ScheduleEvent } from './Calendar/types';\n import Modal from './Modal';\n-import { TextField } from './TextField';\n \n // 스타일 컴포넌트들\n-const ModalContent = styled.div`\n+const ModalContainer = styled.div`\n+  display: flex;\n+  gap: 24px;\n+  height: 600px;\n   min-width: 900px;\n   width: 100%;\n   overflow: hidden;\n-  box-sizing: border-box;\n `;\n \n-const ContentWrapper = styled.div`\n-  display: flex;\n-  gap: 24px;\n-  height: 600px;\n-  min-height: 0;\n-  box-sizing: border-box;\n-`;\n-\n const LeftPanel = styled.div`\n   flex: 1;\n   border-right: 1px solid ${AppColors.borderLight};\n   padding-right: 24px;\n   min-width: 0;\n   display: flex;\n   flex-direction: column;\n-  overflow-y: auto;\n-  box-sizing: border-box;\n `;\n \n const RightPanel = styled.div`\n   flex: 1;\n   padding-left: 24px;\n   min-width: 0;\n   display: flex;\n   flex-direction: column;\n-  text-align: left;\n-  overflow-y: auto;\n-  box-sizing: border-box;\n `;\n \n+const SearchInput = styled.input`\n+  padding: 12px 16px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: 14px;\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &::placeholder {\n+    color: ${AppColors.onInput1};\n+  }\n+`;\n+\n const SearchSection = styled.div`\n   margin-bottom: 24px;\n `;\n \n-const SectionTitle = styled.h3`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 600;\n+const PanelTitle = styled.h3`\n+  ${AppTextStyles.title3}\n   margin-bottom: 16px;\n   color: ${AppColors.onBackground};\n   border-bottom: 2px solid ${AppColors.primary};\n   padding-bottom: 8px;\n@@ -265,48 +268,36 @@\n   margin-top: 12px;\n   justify-content: flex-end;\n `;\n \n-const ModalFooter = styled.div`\n+const ButtonGroup = styled.div`\n   display: flex;\n+  justify-content: flex-end;\n   gap: 12px;\n-  justify-content: flex-end;\n   margin-top: 24px;\n-  padding-top: 16px;\n-  border-top: 1px solid ${AppColors.borderLight};\n `;\n \n const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n   padding: 12px 24px;\n-  border: none;\n+  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n   border-radius: 8px;\n+  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n+  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n   font-size: ${AppTextStyles.body1.fontSize};\n-  font-weight: 500;\n+  font-weight: 600;\n   cursor: pointer;\n   transition: all 0.2s;\n   \n-  ${props => props.variant === 'primary' ? `\n-    background-color: ${AppColors.primary};\n-    color: ${AppColors.onPrimary};\n-    \n-    &:hover {\n-      background-color: ${AppColors.secondary};\n-    }\n-    \n-    &:disabled {\n-      background-color: ${AppColors.onSurface}20;\n-      color: ${AppColors.onSurface}60;\n-      cursor: not-allowed;\n-    }\n-  ` : `\n-    background-color: ${AppColors.surface};\n-    color: ${AppColors.onSurface};\n-    border: 1px solid ${AppColors.borderLight};\n-    \n-    &:hover {\n-      background-color: ${AppColors.background};\n-    }\n-  `}\n+  &:hover {\n+    opacity: 0.9;\n+    transform: translateY(-1px);\n+  }\n+  \n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+    transform: none;\n+  }\n `;\n \n const WarningText = styled.div`\n   background: #fff3cd;\n@@ -644,29 +635,26 @@\n     <Modal \n       isOpen={isOpen} \n       onClose={handleClose}\n       body={\n-        <ModalContent>\n-          <ContentWrapper>\n-            {/* 왼쪽 패널 - 회원 검색/목록 */}\n-            <LeftPanel>\n-              {/* 시간 겹침 경고 */}\n-              {timeConflict && (\n-                <WarningText>\n-                  {timeConflict}\n-                </WarningText>\n-              )}\n+        <ModalContainer>\n+          <LeftPanel>\n+            {/* 시간 겹침 경고 */}\n+            {timeConflict && (\n+              <WarningText>\n+                {timeConflict}\n+              </WarningText>\n+            )}\n \n-              {/* 회원 검색 */}\n-              <SearchSection>\n-                <SectionTitle>수업 참여 회원 선택</SectionTitle>\n-                <TextField\n-                  label=\"회원 이름 검색\"\n-                  value={searchQuery}\n-                  onChange={(e) => setSearchQuery(e.target.value)}\n-                  placeholder=\"회원 이름을 입력하세요\"\n-                />\n-              </SearchSection>\n+            {/* 회원 검색 */}\n+            <SearchSection>\n+              <PanelTitle>수업 참여 회원 선택</PanelTitle>\n+              <SearchInput\n+                value={searchQuery}\n+                onChange={(e) => setSearchQuery(e.target.value)}\n+                placeholder=\"회원 이름을 입력하세요\"\n+              />\n+            </SearchSection>\n \n               {/* 회원 목록 */}\n               <MemberList>\n                 {loading ? (\n@@ -710,15 +698,15 @@\n                     </MemberItem>\n                   ))\n                 )}\n               </MemberList>\n-            </LeftPanel>\n+          </LeftPanel>\n \n-            {/* 오른쪽 패널 - 선택된 회원 정보 및 상품 선택 */}\n-            <RightPanel>\n+          {/* 오른쪽 패널 - 선택된 회원 정보 및 상품 선택 */}\n+          <RightPanel>\n               {selectedMember ? (\n                 <MemoSection>\n-                  <SectionTitle>선택된 회원</SectionTitle>\n+                  <PanelTitle>선택된 회원</PanelTitle>\n                   <SelectedMemberInfo>\n                     <SelectedMemberName>{selectedMember.name}</SelectedMemberName>\n                     <SelectedMemberDetails>\n                       <div>연락처: {selectedMember.phone}</div>\n@@ -786,25 +774,17 @@\n                     </Button>\n                   </MemoActions>\n                 </MemoSection>\n               ) : (\n-                <div style={{ \n-                  display: 'flex', \n-                  alignItems: 'center', \n-                  justifyContent: 'center', \n-                  height: '200px',\n-                  color: AppColors.onSurface + '60',\n-                  fontSize: AppTextStyles.body1.fontSize\n-                }}>\n-                  왼쪽에서 회원을 선택하세요\n-                </div>\n+                <WarningText>\n+                  먼저 왼쪽에서 회원을 선택해주세요.\n+                </WarningText>\n               )}\n-            </RightPanel>\n-          </ContentWrapper>\n-        </ModalContent>\n+          </RightPanel>\n+        </ModalContainer>\n       }\n       footer={\n-        <ModalFooter>\n+        <ButtonGroup>\n           <Button variant=\"secondary\" onClick={handleClose}>\n             취소\n           </Button>\n           <Button \n@@ -813,9 +793,9 @@\n             disabled={!selectedMember || !selectedEnrollment || !!timeConflict || loading}\n           >\n             {loading ? '등록 중...' : '예약 등록'}\n           </Button>\n-        </ModalFooter>\n+        </ButtonGroup>\n       }\n       width=\"min(95vw, 1000px)\"\n     />\n   );\n"
                },
                {
                    "date": 1761737612405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -634,8 +634,10 @@\n   return (\n     <Modal \n       isOpen={isOpen} \n       onClose={handleClose}\n+      width=\"min(95vw, 1000px)\"\n+      header=\"회원 예약 등록\"\n       body={\n         <ModalContainer>\n           <LeftPanel>\n             {/* 시간 겹침 경고 */}\n@@ -795,9 +797,8 @@\n             {loading ? '등록 중...' : '예약 등록'}\n           </Button>\n         </ButtonGroup>\n       }\n-      width=\"min(95vw, 1000px)\"\n     />\n   );\n };\n \n"
                },
                {
                    "date": 1761737674224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,16 +33,21 @@\n   flex-direction: column;\n `;\n \n const SearchInput = styled.input`\n+  width: 100%;\n+  max-width: 100%;\n   padding: 12px 16px;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n-  font-size: 14px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  margin-bottom: 16px;\n+  box-sizing: border-box;\n   \n   &:focus {\n     outline: none;\n     border-color: ${AppColors.primary};\n+    box-shadow: 0 0 0 2px ${AppColors.primary}20;\n   }\n   \n   &::placeholder {\n     color: ${AppColors.onInput1};\n@@ -652,9 +657,9 @@\n               <PanelTitle>수업 참여 회원 선택</PanelTitle>\n               <SearchInput\n                 value={searchQuery}\n                 onChange={(e) => setSearchQuery(e.target.value)}\n-                placeholder=\"회원 이름을 입력하세요\"\n+                placeholder=\"회원명, 전화번호, 이메일로 검색...\"\n               />\n             </SearchSection>\n \n               {/* 회원 목록 */}\n"
                },
                {
                    "date": 1761737706877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n   }\n `;\n \n const SearchSection = styled.div`\n-  margin-bottom: 24px;\n+  /* margin-bottom 제거하여 MemberSearchPanel과 동일하게 */\n `;\n \n const PanelTitle = styled.h3`\n   ${AppTextStyles.title3}\n"
                },
                {
                    "date": 1761737806149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,15 +139,22 @@\n   color: ${AppColors.onSurface}90;\n   border-left: 3px solid ${AppColors.primary};\n `;\n \n-const NoMembers = styled.div`\n-  padding: 48px;\n+const EmptyState = styled.div`\n   text-align: center;\n-  color: ${AppColors.onSurface}60;\n-  font-size: ${AppTextStyles.body1.fontSize};\n+  padding: 40px 20px;\n+  color: ${AppColors.onInput1};\n+  font-size: ${AppTextStyles.body2.fontSize};\n `;\n \n+const NoResults = styled.div`\n+  text-align: center;\n+  padding: 20px;\n+  color: ${AppColors.onInput1};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n const MemoSection = styled.div`\n   display: flex;\n   flex-direction: column;\n   height: 100%;\n@@ -420,18 +427,21 @@\n   }, [existingEvents, staffId, startTime, endTime]);\n \n   // 예약 가능한 회원 로드\n   const loadAvailableMembers = useCallback(async () => {\n-    if (!isOpen) return;\n+    if (!isOpen || !searchQuery.trim()) {\n+      setAvailableMembers([]);\n+      return;\n+    }\n     \n     setLoading(true);\n     try {\n       // 해당 지점의 활성 회원 조회\n       const allMembers = await dbManager.getAllMembers();\n       const branchMembers = allMembers.filter(member => \n         member.branchId === branchId && \n         member.isActive &&\n-        (searchQuery === '' || member.name.toLowerCase().includes(searchQuery.toLowerCase()))\n+        member.name.toLowerCase().includes(searchQuery.toLowerCase())\n       );\n \n       // 활성 횟수제 수강권을 가진 회원들만 필터링\n       const allEnrollments = await dbManager.getAllCourseEnrollments();\n@@ -663,17 +673,20 @@\n             </SearchSection>\n \n               {/* 회원 목록 */}\n               <MemberList>\n-                {loading ? (\n-                  <NoMembers>회원 목록을 불러오는 중...</NoMembers>\n+                {!searchQuery.trim() ? (\n+                  <EmptyState>\n+                    위에서 회원을 검색해주세요.<br />\n+                    이름, 전화번호, 이메일로 검색할 수 있습니다.\n+                  </EmptyState>\n+                ) : loading ? (\n+                  <EmptyState>검색 중...</EmptyState>\n                 ) : availableMembers.length === 0 ? (\n-                  <NoMembers>\n-                    {searchQuery ? \n-                      `\"${searchQuery}\"와 일치하는 회원이 없습니다.` : \n-                      '예약 가능한 회원이 없습니다.\\n횟수제 수강권을 가진 활성 회원만 예약 가능합니다.'\n-                    }\n-                  </NoMembers>\n+                  <NoResults>\n+                    검색 결과가 없습니다.<br />\n+                    다른 검색어를 입력해보세요.\n+                  </NoResults>\n                 ) : (\n                   availableMembers.map(member => (\n                     <MemberItem\n                       key={member.id}\n"
                },
                {
                    "date": 1761737870917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,54 +93,19 @@\n   }\n `;\n \n const MemberInfo = styled.div`\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: flex-start;\n+  font-size: ${AppTextStyles.body3.fontSize};\n+  opacity: 0.8;\n+  line-height: 1.4;\n `;\n \n-const MemberDetails = styled.div`\n-  flex: 1;\n-`;\n-\n const MemberName = styled.div`\n   font-weight: 600;\n   font-size: ${AppTextStyles.body1.fontSize};\n   margin-bottom: 4px;\n `;\n \n-const MemberPhone = styled.div`\n-  font-size: ${AppTextStyles.body3.fontSize};\n-  opacity: 0.8;\n-  line-height: 1.4;\n-  margin-bottom: 4px;\n-`;\n-\n-const CourseInfo = styled.div`\n-  font-size: ${AppTextStyles.body3.fontSize};\n-  opacity: 0.8;\n-  line-height: 1.4;\n-  display: flex;\n-  gap: 8px;\n-  align-items: center;\n-`;\n-\n-const SessionCount = styled.span<{ low?: boolean }>`\n-  color: ${props => props.low ? AppColors.error : AppColors.secondary};\n-  font-weight: 500;\n-`;\n-\n-const MemberMemo = styled.div`\n-  margin-top: 8px;\n-  padding: 8px;\n-  background-color: ${AppColors.background};\n-  border-radius: 4px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onSurface}90;\n-  border-left: 3px solid ${AppColors.primary};\n-`;\n-\n const EmptyState = styled.div`\n   text-align: center;\n   padding: 40px 20px;\n   color: ${AppColors.onInput1};\n@@ -696,25 +661,13 @@\n                         setSelectedEnrollment(member.allEnrollments?.[0] || null);\n                         setMemo(member.remarks || '');\n                       }}\n                     >\n+                      <MemberName>{member.name}</MemberName>\n                       <MemberInfo>\n-                        <MemberDetails>\n-                          <MemberName>{member.name}</MemberName>\n-                          <MemberPhone>{member.phone}</MemberPhone>\n-                          <CourseInfo>\n-                            <span>{member.courseEnrollment?.productName}</span>\n-                            <span>•</span>\n-                            <SessionCount low={(member.availableSessions || 0) <= 3}>\n-                              잔여 {member.availableSessions}회\n-                            </SessionCount>\n-                          </CourseInfo>\n-                          {member.remarks && (\n-                            <MemberMemo>\n-                              비고: {member.remarks.length > 50 ? member.remarks.substring(0, 50) + '...' : member.remarks}\n-                            </MemberMemo>\n-                          )}\n-                        </MemberDetails>\n+                        {member.phone} • {member.email || '이메일 없음'}<br />\n+                        {member.branchName} • {member.coachName}<br />\n+                        가입일: {new Date(member.registrationDate).toLocaleDateString('ko-KR')}\n                       </MemberInfo>\n                     </MemberItem>\n                   ))\n                 )}\n"
                },
                {
                    "date": 1761737974528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -675,11 +675,11 @@\n           </LeftPanel>\n \n           {/* 오른쪽 패널 - 선택된 회원 정보 및 상품 선택 */}\n           <RightPanel>\n-              {selectedMember ? (\n-                <MemoSection>\n-                  <PanelTitle>선택된 회원</PanelTitle>\n+            <PanelTitle>예약 정보</PanelTitle>\n+            {selectedMember ? (\n+              <MemoSection>\n                   <SelectedMemberInfo>\n                     <SelectedMemberName>{selectedMember.name}</SelectedMemberName>\n                     <SelectedMemberDetails>\n                       <div>연락처: {selectedMember.phone}</div>\n"
                },
                {
                    "date": 1761738102616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { AppTextStyles } from '../styles/textStyles';\n import { dbManager, Member, CourseEnrollment, Program } from '../utils/indexedDB';\n import { ScheduleEvent } from './Calendar/types';\n import Modal from './Modal';\n+import CustomDropdown from './CustomDropdown';\n \n // 스타일 컴포넌트들\n const ModalContainer = styled.div`\n   display: flex;\n@@ -126,8 +127,15 @@\n   min-height: 0;\n   box-sizing: border-box;\n `;\n \n+const FormRow = styled.div`\n+  display: grid;\n+  grid-template-columns: 1fr 1fr;\n+  gap: 16px;\n+  margin-bottom: 16px;\n+`;\n+\n const FormGroup = styled.div`\n   margin-bottom: 16px;\n `;\n \n@@ -678,58 +686,41 @@\n           <RightPanel>\n             <PanelTitle>예약 정보</PanelTitle>\n             {selectedMember ? (\n               <MemoSection>\n-                  <SelectedMemberInfo>\n-                    <SelectedMemberName>{selectedMember.name}</SelectedMemberName>\n-                    <SelectedMemberDetails>\n-                      <div>연락처: {selectedMember.phone}</div>\n-                      <div>지점: {selectedMember.branchName}</div>\n-                      <div>담당 코치: {selectedMember.coach || '미지정'}</div>\n-                      <div>활성 상품: {selectedMember.allEnrollments?.length || 0}개</div>\n-                    </SelectedMemberDetails>\n-                  </SelectedMemberInfo>\n-                  \n+                <FormRow>\n                   <FormGroup>\n                     <FormLabel>수강 상품 선택</FormLabel>\n-                    <ProductList>\n-                      {selectedMember.allEnrollments?.map(enrollment => {\n+                    <CustomDropdown\n+                      value={selectedEnrollment?.id || ''}\n+                      onChange={(value) => {\n+                        const enrollment = selectedMember.allEnrollments?.find(e => e.id === value);\n+                        setSelectedEnrollment(enrollment || null);\n+                      }}\n+                      options={selectedMember.allEnrollments?.map(enrollment => {\n                         const availableSessions = (enrollment.sessionCount || 0) - (enrollment.completedSessions || 0);\n-                        const sessionDuration = enrollment.programName?.includes('50분') || enrollment.programName?.includes('60분') ? 50 : 30;\n-                        \n-                        return (\n-                          <ProductItem\n-                            key={enrollment.id}\n-                            selected={selectedEnrollment?.id === enrollment.id}\n-                            onClick={() => setSelectedEnrollment(enrollment)}\n-                          >\n-                            <ProductName>{enrollment.productName}</ProductName>\n-                            <ProductInfo>\n-                              잔여 {availableSessions}회 | {sessionDuration}분 수업\n-                              <br />\n-                              만료일: {enrollment.endDate ? new Date(enrollment.endDate).toLocaleDateString('ko-KR') : '미설정'}\n-                            </ProductInfo>\n-                          </ProductItem>\n-                        );\n-                      })}\n-                    </ProductList>\n+                        return {\n+                          value: enrollment.id,\n+                          label: `${enrollment.productName} (잔여 ${availableSessions}회)`\n+                        };\n+                      }) || []}\n+                      placeholder=\"상품을 선택하세요\"\n+                      inModal={true}\n+                    />\n                   </FormGroup>\n-\n-                  {selectedEnrollment && (\n-                    <FormGroup>\n-                      <FormLabel>예약 시간</FormLabel>\n-                      <TimeDisplay>\n-                        <TimeText>\n-                          {formatTime(startTime)} - {formatTime(endTime)}\n-                        </TimeText>\n-                        <TimeValue>\n-                          {selectedEnrollment.programName?.includes('50분') || selectedEnrollment.programName?.includes('60분') ? '50분' : '30분'} 수업\n-                        </TimeValue>\n-                      </TimeDisplay>\n-                    </FormGroup>\n-                  )}\n                   \n                   <FormGroup>\n+                    <FormLabel>예약 시간</FormLabel>\n+                    <TimeDisplay>\n+                      <TimeText>\n+                        {formatTime(startTime)} - {formatTime(endTime)}\n+                      </TimeText>\n+                      <TimeValue>\n+                        {selectedEnrollment?.programName?.includes('50분') || selectedEnrollment?.programName?.includes('60분') ? '50분' : '30분'} 수업\n+                      </TimeValue>\n+                    </TimeDisplay>\n+                  </FormGroup>\n+                </FormRow>                  <FormGroup>\n                     <FormLabel>비고</FormLabel>\n                     <MemoTextArea\n                       value={memo}\n                       onChange={(e) => setMemo(e.target.value)}\n"
                },
                {
                    "date": 1761738275492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,15 +127,8 @@\n   min-height: 0;\n   box-sizing: border-box;\n `;\n \n-const FormRow = styled.div`\n-  display: grid;\n-  grid-template-columns: 1fr 1fr;\n-  gap: 16px;\n-  margin-bottom: 16px;\n-`;\n-\n const FormGroup = styled.div`\n   margin-bottom: 16px;\n `;\n \n@@ -144,89 +137,16 @@\n   font-size: ${AppTextStyles.body2.fontSize};\n   font-weight: 500;\n   color: ${AppColors.onSurface};\n   margin-bottom: 8px;\n+  text-align: left;\n `;\n \n-const ProductList = styled.div`\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  margin-bottom: 16px;\n-`;\n-\n-const ProductItem = styled.div<{ selected?: boolean }>`\n-  padding: 12px 16px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  background: ${props => props.selected ? AppColors.primary : 'transparent'};\n-  color: ${props => props.selected ? AppColors.onPrimary : AppColors.onSurface};\n-  \n-  &:hover {\n-    background: ${props => props.selected ? AppColors.primary : `${AppColors.primary}10`};\n-  }\n-  \n-  &:last-child {\n-    border-bottom: none;\n-  }\n-`;\n-\n-const ProductName = styled.div`\n-  font-weight: 600;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  margin-bottom: 4px;\n-`;\n-\n-const ProductInfo = styled.div`\n-  font-size: ${AppTextStyles.body3.fontSize};\n-  opacity: 0.8;\n-  line-height: 1.4;\n-`;\n-\n const TimeDisplay = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  padding: 12px;\n-  margin: 16px 0;\n-  text-align: left;\n-`;\n-\n-const TimeText = styled.div`\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${AppColors.onSurface};\n-  margin-bottom: 4px;\n-`;\n-\n-const TimeValue = styled.div`\n-  font-size: ${AppTextStyles.title2.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.primary};\n-`;\n-\n-const SelectedMemberInfo = styled.div`\n-  background: ${AppColors.surface};\n-  border: 2px solid ${AppColors.primary};\n-  border-radius: 12px;\n-  padding: 16px;\n-  margin-bottom: 16px;\n-  width: 100%;\n-  box-sizing: border-box;\n-`;\n-\n-const SelectedMemberName = styled.div`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 700;\n-  color: ${AppColors.primary};\n-  margin-bottom: 8px;\n-`;\n-\n-const SelectedMemberDetails = styled.div`\n-  display: grid;\n-  grid-template-columns: 1fr 1fr;\n-  gap: 8px;\n+  margin-top: 8px;\n   font-size: ${AppTextStyles.body3.fontSize};\n   color: ${AppColors.onInput1};\n+  text-align: left;\n `;\n \n const MemoTextArea = styled.textarea`\n   width: 100%;\n@@ -239,8 +159,9 @@\n   color: ${AppColors.onSurface};\n   background-color: ${AppColors.surface};\n   resize: vertical;\n   box-sizing: border-box;\n+  text-align: left;\n   \n   &:focus {\n     outline: none;\n     border-color: ${AppColors.primary};\n@@ -686,41 +607,30 @@\n           <RightPanel>\n             <PanelTitle>예약 정보</PanelTitle>\n             {selectedMember ? (\n               <MemoSection>\n-                <FormRow>\n-                  <FormGroup>\n-                    <FormLabel>수강 상품 선택</FormLabel>\n-                    <CustomDropdown\n-                      value={selectedEnrollment?.id || ''}\n-                      onChange={(value) => {\n-                        const enrollment = selectedMember.allEnrollments?.find(e => e.id === value);\n-                        setSelectedEnrollment(enrollment || null);\n-                      }}\n-                      options={selectedMember.allEnrollments?.map(enrollment => {\n-                        const availableSessions = (enrollment.sessionCount || 0) - (enrollment.completedSessions || 0);\n-                        return {\n-                          value: enrollment.id,\n-                          label: `${enrollment.productName} (잔여 ${availableSessions}회)`\n-                        };\n-                      }) || []}\n-                      placeholder=\"상품을 선택하세요\"\n-                      inModal={true}\n-                    />\n-                  </FormGroup>\n-                  \n-                  <FormGroup>\n-                    <FormLabel>예약 시간</FormLabel>\n-                    <TimeDisplay>\n-                      <TimeText>\n-                        {formatTime(startTime)} - {formatTime(endTime)}\n-                      </TimeText>\n-                      <TimeValue>\n-                        {selectedEnrollment?.programName?.includes('50분') || selectedEnrollment?.programName?.includes('60분') ? '50분' : '30분'} 수업\n-                      </TimeValue>\n-                    </TimeDisplay>\n-                  </FormGroup>\n-                </FormRow>                  <FormGroup>\n+                <FormGroup>\n+                  <FormLabel>수강 상품 선택</FormLabel>\n+                  <CustomDropdown\n+                    value={selectedEnrollment?.id || ''}\n+                    onChange={(value) => {\n+                      const enrollment = selectedMember.allEnrollments?.find(e => e.id === value);\n+                      setSelectedEnrollment(enrollment || null);\n+                    }}\n+                    options={selectedMember.allEnrollments?.map(enrollment => {\n+                      const availableSessions = (enrollment.sessionCount || 0) - (enrollment.completedSessions || 0);\n+                      return {\n+                        value: enrollment.id,\n+                        label: `${enrollment.productName} (잔여 ${availableSessions}회)`\n+                      };\n+                    }) || []}\n+                    placeholder=\"상품을 선택하세요\"\n+                    inModal={true}\n+                  />\n+                  <TimeDisplay>\n+                    {formatTime(startTime)} - {formatTime(endTime)} • {selectedEnrollment?.programName?.includes('50분') || selectedEnrollment?.programName?.includes('60분') ? '50분' : '30분'} 수업\n+                  </TimeDisplay>\n+                </FormGroup>                  <FormGroup>\n                     <FormLabel>비고</FormLabel>\n                     <MemoTextArea\n                       value={memo}\n                       onChange={(e) => setMemo(e.target.value)}\n"
                },
                {
                    "date": 1761738399518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,8 +147,46 @@\n   color: ${AppColors.onInput1};\n   text-align: left;\n `;\n \n+const MemoRow = styled.div`\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: flex-start;\n+  gap: 12px;\n+`;\n+\n+const MemoContainer = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+`;\n+\n+const MemoButton = styled.button`\n+  padding: 12px 24px;\n+  height: 48px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  background: ${AppColors.surface};\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  font-weight: 600;\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  white-space: nowrap;\n+  \n+  &:hover {\n+    opacity: 0.9;\n+    transform: translateY(-1px);\n+  }\n+  \n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+    transform: none;\n+  }\n+`;\n+\n const MemoTextArea = styled.textarea`\n   width: 100%;\n   flex: 1;\n   min-height: 400px;\n@@ -167,15 +205,8 @@\n     border-color: ${AppColors.primary};\n   }\n `;\n \n-const MemoActions = styled.div`\n-  display: flex;\n-  gap: 8px;\n-  margin-top: 12px;\n-  justify-content: flex-end;\n-`;\n-\n const ButtonGroup = styled.div`\n   display: flex;\n   justify-content: flex-end;\n   gap: 12px;\n@@ -628,26 +659,27 @@\n                   />\n                   <TimeDisplay>\n                     {formatTime(startTime)} - {formatTime(endTime)} • {selectedEnrollment?.programName?.includes('50분') || selectedEnrollment?.programName?.includes('60분') ? '50분' : '30분'} 수업\n                   </TimeDisplay>\n-                </FormGroup>                  <FormGroup>\n+                </FormGroup>\n+                \n+                <MemoRow>\n+                  <MemoContainer>\n                     <FormLabel>비고</FormLabel>\n                     <MemoTextArea\n                       value={memo}\n                       onChange={(e) => setMemo(e.target.value)}\n                       placeholder=\"회원에 대한 비고사항을 입력하세요\"\n                     />\n-                  </FormGroup>\n+                  </MemoContainer>\n                   \n-                  <MemoActions>\n-                    <Button \n-                      variant=\"secondary\" \n-                      onClick={handleSaveMemo}\n-                      disabled={savingMemo}\n-                    >\n-                      {savingMemo ? '저장 중...' : '비고 저장'}\n-                    </Button>\n-                  </MemoActions>\n+                  <MemoButton \n+                    onClick={handleSaveMemo}\n+                    disabled={savingMemo}\n+                  >\n+                    {savingMemo ? '저장 중...' : '저장'}\n+                  </MemoButton>\n+                </MemoRow>\n                 </MemoSection>\n               ) : (\n                 <WarningText>\n                   먼저 왼쪽에서 회원을 선택해주세요.\n"
                },
                {
                    "date": 1761738462385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,10 +150,10 @@\n \n const MemoRow = styled.div`\n   display: flex;\n   justify-content: space-between;\n-  align-items: flex-start;\n-  gap: 12px;\n+  align-items: center;\n+  margin-bottom: 8px;\n `;\n \n const MemoContainer = styled.div`\n   flex: 1;\n@@ -161,15 +161,15 @@\n   flex-direction: column;\n `;\n \n const MemoButton = styled.button`\n-  padding: 12px 24px;\n-  height: 48px;\n+  padding: 8px 16px;\n+  height: auto;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n   background: ${AppColors.surface};\n   color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body1.fontSize};\n+  font-size: ${AppTextStyles.body2.fontSize};\n   font-weight: 600;\n   cursor: pointer;\n   transition: all 0.2s;\n   white-space: nowrap;\n@@ -661,25 +661,24 @@\n                     {formatTime(startTime)} - {formatTime(endTime)} • {selectedEnrollment?.programName?.includes('50분') || selectedEnrollment?.programName?.includes('60분') ? '50분' : '30분'} 수업\n                   </TimeDisplay>\n                 </FormGroup>\n                 \n-                <MemoRow>\n-                  <MemoContainer>\n-                    <FormLabel>비고</FormLabel>\n-                    <MemoTextArea\n-                      value={memo}\n-                      onChange={(e) => setMemo(e.target.value)}\n-                      placeholder=\"회원에 대한 비고사항을 입력하세요\"\n-                    />\n-                  </MemoContainer>\n-                  \n-                  <MemoButton \n-                    onClick={handleSaveMemo}\n-                    disabled={savingMemo}\n-                  >\n-                    {savingMemo ? '저장 중...' : '저장'}\n-                  </MemoButton>\n-                </MemoRow>\n+                <MemoContainer>\n+                  <MemoRow>\n+                    <FormLabel style={{ marginBottom: 0 }}>비고</FormLabel>\n+                    <MemoButton \n+                      onClick={handleSaveMemo}\n+                      disabled={savingMemo}\n+                    >\n+                      {savingMemo ? '저장 중...' : '저장'}\n+                    </MemoButton>\n+                  </MemoRow>\n+                  <MemoTextArea\n+                    value={memo}\n+                    onChange={(e) => setMemo(e.target.value)}\n+                    placeholder=\"회원에 대한 비고사항을 입력하세요\"\n+                  />\n+                </MemoContainer>\n                 </MemoSection>\n               ) : (\n                 <WarningText>\n                   먼저 왼쪽에서 회원을 선택해주세요.\n"
                },
                {
                    "date": 1761738511464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,10 @@\n \n const MemoTextArea = styled.textarea`\n   width: 100%;\n   flex: 1;\n-  min-height: 400px;\n+  min-height: 120px;\n+  max-height: 200px;\n   padding: 12px;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n   font-size: ${AppTextStyles.body1.fontSize};\n"
                },
                {
                    "date": 1761738521836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,10 +188,10 @@\n \n const MemoTextArea = styled.textarea`\n   width: 100%;\n   flex: 1;\n-  min-height: 120px;\n-  max-height: 200px;\n+  min-height: 300px;\n+  /* max-height: 200px; */\n   padding: 12px;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n   font-size: ${AppTextStyles.body1.fontSize};\n"
                },
                {
                    "date": 1761738696444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useState, useEffect, useMemo, useCallback } from 'react';\n import styled from 'styled-components';\n+import { toast } from 'react-toastify';\n import { AppColors } from '../styles/colors';\n import { AppTextStyles } from '../styles/textStyles';\n import { dbManager, Member, CourseEnrollment, Program } from '../utils/indexedDB';\n import { ScheduleEvent } from './Calendar/types';\n@@ -420,12 +421,12 @@\n       \n       // 로컬 상태 업데이트\n       setSelectedMember(prev => prev ? { ...prev, remarks: memo } : null);\n       \n-      alert('비고가 성공적으로 저장되었습니다.');\n+      toast.success('비고가 성공적으로 저장되었습니다.');\n     } catch (error) {\n       console.error('비고 저장 실패:', error);\n-      alert('비고 저장 중 오류가 발생했습니다.');\n+      toast.error('비고 저장 중 오류가 발생했습니다.');\n     } finally {\n       setSavingMemo(false);\n     }\n   };\n@@ -435,9 +436,9 @@\n     if (!selectedMember || !selectedEnrollment || !hasPermission) return;\n \n     // 시간 겹침 체크\n     if (timeConflict) {\n-      alert('시간이 겹치는 다른 일정이 있어 예약할 수 없습니다.');\n+      toast.error('시간이 겹치는 다른 일정이 있어 예약할 수 없습니다.');\n       return;\n     }\n \n     setLoading(true);\n@@ -511,13 +512,13 @@\n \n       // 부모 컴포넌트에 새 예약 알림\n       onReservationCreate(calendarEvent);\n \n-      alert('예약이 성공적으로 등록되었습니다.');\n+      toast.success('예약이 성공적으로 등록되었습니다.');\n       handleClose();\n     } catch (error) {\n       console.error('예약 생성 실패:', error);\n-      alert('예약 등록 중 오류가 발생했습니다.');\n+      toast.error('예약 등록 중 오류가 발생했습니다.');\n     } finally {\n       setLoading(false);\n     }\n   };\n"
                },
                {
                    "date": 1761739289103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,11 +273,15 @@\n \n interface MemberWithCourse extends Member {\n   courseEnrollment?: CourseEnrollment;\n   availableSessions?: number;\n-  allEnrollments?: CourseEnrollment[];\n+  allEnrollments?: CourseEnrollmentWithDuration[];\n }\n \n+interface CourseEnrollmentWithDuration extends CourseEnrollment {\n+  duration?: number; // 상품의 소요시간 (분 단위)\n+}\n+\n const ReservationModal: React.FC<ReservationModalProps> = ({\n   isOpen,\n   onClose,\n   startTime,\n@@ -295,14 +299,31 @@\n }) => {\n   const [searchQuery, setSearchQuery] = useState('');\n   const [availableMembers, setAvailableMembers] = useState<MemberWithCourse[]>([]);\n   const [selectedMember, setSelectedMember] = useState<MemberWithCourse | null>(null);\n-  const [selectedEnrollment, setSelectedEnrollment] = useState<CourseEnrollment | null>(null);\n+  const [selectedEnrollment, setSelectedEnrollment] = useState<CourseEnrollmentWithDuration | null>(null);\n   const [memo, setMemo] = useState('');\n   const [loading, setLoading] = useState(false);\n   const [timeConflict, setTimeConflict] = useState<string>('');\n   const [savingMemo, setSavingMemo] = useState(false);\n \n+  // 선택된 상품의 소요시간에 따른 종료시간 계산\n+  const calculateEndTime = useCallback((enrollment: CourseEnrollmentWithDuration | null): Date => {\n+    if (!enrollment?.duration) {\n+      // duration 정보가 없으면 기본 1시간\n+      return new Date(startTime.getTime() + 60 * 60 * 1000);\n+    }\n+    \n+    // 상품의 duration이 50분인 경우 1시간(60분)으로 설정 (쉬는시간 포함)\n+    const actualDuration = enrollment.duration === 50 ? 60 : enrollment.duration;\n+    return new Date(startTime.getTime() + actualDuration * 60 * 1000);\n+  }, [startTime]);\n+\n+  // 실제 사용할 종료시간 계산\n+  const actualEndTime = useMemo(() => {\n+    return calculateEndTime(selectedEnrollment);\n+  }, [selectedEnrollment, calculateEndTime]);\n+\n   // 권한 체크\n   const hasPermission = useMemo(() => {\n     if (!currentUser) return false;\n     \n@@ -331,16 +352,16 @@\n     const conflictingEvents = existingEvents.filter(event => {\n       // 같은 스태프의 이벤트만 체크\n       if (event.staffId !== staffId) return false;\n       \n-      // 시간 겹침 체크\n+      // 시간 겹침 체크 - actualEndTime 사용\n       const eventStart = new Date(event.startTime);\n       const eventEnd = new Date(event.endTime);\n       \n       return (\n         (startTime >= eventStart && startTime < eventEnd) ||\n-        (endTime > eventStart && endTime <= eventEnd) ||\n-        (startTime <= eventStart && endTime >= eventEnd)\n+        (actualEndTime > eventStart && actualEndTime <= eventEnd) ||\n+        (startTime <= eventStart && actualEndTime >= eventEnd)\n       );\n     });\n \n     if (conflictingEvents.length > 0) {\n@@ -350,9 +371,9 @@\n       return `선택한 시간대에 다른 일정이 있습니다: ${conflictInfo}`;\n     }\n \n     return '';\n-  }, [existingEvents, staffId, startTime, endTime]);\n+  }, [existingEvents, staffId, startTime, actualEndTime]);\n \n   // 예약 가능한 회원 로드\n   const loadAvailableMembers = useCallback(async () => {\n     if (!isOpen || !searchQuery.trim()) {\n@@ -371,8 +392,9 @@\n       );\n \n       // 활성 횟수제 수강권을 가진 회원들만 필터링\n       const allEnrollments = await dbManager.getAllCourseEnrollments();\n+      const allProducts = await dbManager.getAllProducts(); // Product 정보 가져오기\n       const membersWithCourse: MemberWithCourse[] = [];\n \n       for (const member of branchMembers) {\n         // 해당 회원의 모든 활성 횟수제 수강권 찾기\n@@ -383,17 +405,26 @@\n           (enrollment.completedSessions || 0) < (enrollment.sessionCount || 0)\n         );\n \n         if (memberEnrollments.length > 0) {\n+          // 수강권에 상품의 duration 정보 추가\n+          const enrollmentsWithDuration: CourseEnrollmentWithDuration[] = memberEnrollments.map(enrollment => {\n+            const product = allProducts.find(p => p.id === enrollment.productId);\n+            return {\n+              ...enrollment,\n+              duration: product?.duration || 30 // 기본값 30분\n+            };\n+          });\n+\n           // 첫 번째 수강권 정보를 기본으로 저장 (표시용)\n-          const primaryEnrollment = memberEnrollments[0];\n+          const primaryEnrollment = enrollmentsWithDuration[0];\n           const availableSessions = (primaryEnrollment.sessionCount || 0) - (primaryEnrollment.completedSessions || 0);\n           \n           membersWithCourse.push({\n             ...member,\n             courseEnrollment: primaryEnrollment,\n             availableSessions,\n-            allEnrollments: memberEnrollments // 모든 수강권 정보 저장\n+            allEnrollments: enrollmentsWithDuration // 모든 수강권 정보 저장\n           });\n         }\n       }\n \n@@ -446,9 +477,9 @@\n       // 새 예약 이벤트 생성 (데이터베이스용 타입으로)\n       const newReservationForDB: Omit<import('../utils/db/types').ScheduleEvent, 'id' | 'createdAt' | 'updatedAt'> = {\n         title: `${selectedMember.name} (${selectedEnrollment.productName})`,\n         startTime,\n-        endTime,\n+        endTime: actualEndTime, // 계산된 종료시간 사용\n         staffId,\n         staffName,\n         programId: selectedEnrollment.programId || programId,\n         programName: selectedEnrollment.programName || programName,\n@@ -650,18 +681,24 @@\n                       setSelectedEnrollment(enrollment || null);\n                     }}\n                     options={selectedMember.allEnrollments?.map(enrollment => {\n                       const availableSessions = (enrollment.sessionCount || 0) - (enrollment.completedSessions || 0);\n+                      const durationText = enrollment.duration ? `${enrollment.duration}분` : '시간미정';\n                       return {\n                         value: enrollment.id,\n-                        label: `${enrollment.productName} (잔여 ${availableSessions}회)`\n+                        label: `${enrollment.productName} (잔여 ${availableSessions}회 • ${durationText})`\n                       };\n                     }) || []}\n                     placeholder=\"상품을 선택하세요\"\n                     inModal={true}\n                   />\n                   <TimeDisplay>\n-                    {formatTime(startTime)} - {formatTime(endTime)} • {selectedEnrollment?.programName?.includes('50분') || selectedEnrollment?.programName?.includes('60분') ? '50분' : '30분'} 수업\n+                    {formatTime(startTime)} - {formatTime(actualEndTime)} • {selectedEnrollment?.duration ? `${selectedEnrollment.duration}분` : '30분'} 수업\n+                    {selectedEnrollment?.duration === 50 && (\n+                      <div style={{ fontSize: '12px', color: AppColors.onInput1, marginTop: '4px' }}>\n+                        * 50분 수업은 쉬는시간 포함하여 1시간 예약됩니다\n+                      </div>\n+                    )}\n                   </TimeDisplay>\n                 </FormGroup>\n                 \n                 <MemoContainer>\n"
                },
                {
                    "date": 1761739507543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,16 +308,16 @@\n \n   // 선택된 상품의 소요시간에 따른 종료시간 계산\n   const calculateEndTime = useCallback((enrollment: CourseEnrollmentWithDuration | null): Date => {\n     if (!enrollment?.duration) {\n-      // duration 정보가 없으면 기본 1시간\n-      return new Date(startTime.getTime() + 60 * 60 * 1000);\n+      // 상품이 선택되지 않은 경우 원래 endTime 사용\n+      return endTime;\n     }\n     \n     // 상품의 duration이 50분인 경우 1시간(60분)으로 설정 (쉬는시간 포함)\n     const actualDuration = enrollment.duration === 50 ? 60 : enrollment.duration;\n     return new Date(startTime.getTime() + actualDuration * 60 * 1000);\n-  }, [startTime]);\n+  }, [startTime, endTime]);\n \n   // 실제 사용할 종료시간 계산\n   const actualEndTime = useMemo(() => {\n     return calculateEndTime(selectedEnrollment);\n@@ -346,10 +346,13 @@\n       hour12: false\n     });\n   };\n \n-  // 시간 겹침 체크\n+  // 시간 겹침 체크 - 상품이 선택된 경우에만 실행\n   const checkTimeConflict = useMemo(() => {\n+    // 상품이 선택되지 않은 경우 충돌 검사 안함\n+    if (!selectedEnrollment) return '';\n+    \n     const conflictingEvents = existingEvents.filter(event => {\n       // 같은 스태프의 이벤트만 체크\n       if (event.staffId !== staffId) return false;\n       \n@@ -371,9 +374,9 @@\n       return `선택한 시간대에 다른 일정이 있습니다: ${conflictInfo}`;\n     }\n \n     return '';\n-  }, [existingEvents, staffId, startTime, actualEndTime]);\n+  }, [existingEvents, staffId, startTime, actualEndTime, selectedEnrollment]);\n \n   // 예약 가능한 회원 로드\n   const loadAvailableMembers = useCallback(async () => {\n     if (!isOpen || !searchQuery.trim()) {\n@@ -612,15 +615,8 @@\n       header=\"회원 예약 등록\"\n       body={\n         <ModalContainer>\n           <LeftPanel>\n-            {/* 시간 겹침 경고 */}\n-            {timeConflict && (\n-              <WarningText>\n-                {timeConflict}\n-              </WarningText>\n-            )}\n-\n             {/* 회원 검색 */}\n             <SearchSection>\n               <PanelTitle>수업 참여 회원 선택</PanelTitle>\n               <SearchInput\n@@ -691,12 +687,34 @@\n                     placeholder=\"상품을 선택하세요\"\n                     inModal={true}\n                   />\n                   <TimeDisplay>\n-                    {formatTime(startTime)} - {formatTime(actualEndTime)} • {selectedEnrollment?.duration ? `${selectedEnrollment.duration}분` : '30분'} 수업\n-                    {selectedEnrollment?.duration === 50 && (\n-                      <div style={{ fontSize: '12px', color: AppColors.onInput1, marginTop: '4px' }}>\n-                        * 50분 수업은 쉬는시간 포함하여 1시간 예약됩니다\n+                    {selectedEnrollment ? (\n+                      <>\n+                        {formatTime(startTime)} - {formatTime(actualEndTime)} • {selectedEnrollment.duration ? `${selectedEnrollment.duration}분` : '30분'} 수업\n+                        {selectedEnrollment.duration === 50 && (\n+                          <div style={{ fontSize: '12px', color: AppColors.onInput1, marginTop: '4px' }}>\n+                            * 50분 수업은 쉬는시간 포함하여 1시간 예약됩니다\n+                          </div>\n+                        )}\n+                        {/* 시간 겹침 경고 */}\n+                        {timeConflict && (\n+                          <div style={{ \n+                            background: '#fff3cd',\n+                            border: '1px solid #ffeaa7',\n+                            borderRadius: '4px',\n+                            padding: '8px',\n+                            marginTop: '8px',\n+                            color: '#856404',\n+                            fontSize: '12px'\n+                          }}>\n+                            {timeConflict}\n+                          </div>\n+                        )}\n+                      </>\n+                    ) : (\n+                      <div style={{ color: AppColors.onInput1, fontSize: '14px' }}>\n+                        상품을 선택하면 예약 시간이 표시됩니다\n                       </div>\n                     )}\n                   </TimeDisplay>\n                 </FormGroup>\n"
                }
            ],
            "date": 1761734768596,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../styles/colors';\nimport { AppTextStyles } from '../styles/textStyles';\nimport { dbManager, Member, CourseEnrollment, Program } from '../utils/indexedDB';\nimport { ScheduleEvent } from './Calendar/types';\nimport Modal from './Modal';\nimport { TextField } from './TextField';\n\n// 스타일 컴포넌트들\nconst ModalContent = styled.div`\n  width: 100%;\n  max-width: 800px;\n  max-height: 80vh;\n  padding: 24px;\n  overflow-y: auto;\n`;\n\nconst TimeInfo = styled.div`\n  background-color: ${AppColors.btnCEmphasis};\n  padding: 16px;\n  border-radius: 8px;\n  margin-bottom: 24px;\n`;\n\nconst TimeText = styled.div`\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 500;\n  color: ${AppColors.primary};\n  text-align: center;\n`;\n\nconst SearchSection = styled.div`\n  margin-bottom: 24px;\n`;\n\nconst SectionTitle = styled.h3`\n  font-size: ${AppTextStyles.title3.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin: 0 0 16px 0;\n`;\n\nconst MemberList = styled.div`\n  max-height: 300px;\n  overflow-y: auto;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n`;\n\nconst MemberItem = styled.div<{ selected?: boolean }>`\n  padding: 16px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  cursor: pointer;\n  background-color: ${props => props.selected ? AppColors.btnCEmphasis : AppColors.surface};\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: ${props => props.selected ? AppColors.btnCEmphasis : AppColors.background};\n  }\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst MemberInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n`;\n\nconst MemberDetails = styled.div`\n  flex: 1;\n`;\n\nconst MemberName = styled.div`\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin-bottom: 4px;\n`;\n\nconst MemberPhone = styled.div`\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onSurface}80;\n  margin-bottom: 4px;\n`;\n\nconst CourseInfo = styled.div`\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.secondary};\n  display: flex;\n  gap: 8px;\n  align-items: center;\n`;\n\nconst SessionCount = styled.span<{ low?: boolean }>`\n  color: ${props => props.low ? AppColors.error : AppColors.secondary};\n  font-weight: 500;\n`;\n\nconst MemberMemo = styled.div`\n  margin-top: 8px;\n  padding: 8px;\n  background-color: ${AppColors.background};\n  border-radius: 4px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onSurface}90;\n  border-left: 3px solid ${AppColors.primary};\n`;\n\nconst NoMembers = styled.div`\n  padding: 48px;\n  text-align: center;\n  color: ${AppColors.onSurface}60;\n  font-size: ${AppTextStyles.body1.fontSize};\n`;\n\nconst MemoSection = styled.div`\n  margin-top: 24px;\n`;\n\nconst MemoTextArea = styled.textarea`\n  width: 100%;\n  min-height: 100px;\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  color: ${AppColors.onSurface};\n  background-color: ${AppColors.surface};\n  resize: vertical;\n  \n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n  }\n`;\n\nconst ModalFooter = styled.div`\n  display: flex;\n  gap: 12px;\n  justify-content: flex-end;\n  margin-top: 24px;\n  padding-top: 16px;\n  border-top: 1px solid ${AppColors.borderLight};\n`;\n\nconst Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n  padding: 12px 24px;\n  border: none;\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  ${props => props.variant === 'primary' ? `\n    background-color: ${AppColors.primary};\n    color: ${AppColors.onPrimary};\n    \n    &:hover {\n      background-color: ${AppColors.secondary};\n    }\n    \n    &:disabled {\n      background-color: ${AppColors.onSurface}20;\n      color: ${AppColors.onSurface}60;\n      cursor: not-allowed;\n    }\n  ` : `\n    background-color: ${AppColors.surface};\n    color: ${AppColors.onSurface};\n    border: 1px solid ${AppColors.borderLight};\n    \n    &:hover {\n      background-color: ${AppColors.background};\n    }\n  `}\n`;\n\nconst WarningText = styled.div`\n  color: ${AppColors.error};\n  font-size: ${AppTextStyles.body2.fontSize};\n  margin-top: 8px;\n  padding: 8px;\n  background-color: #fee;\n  border-radius: 4px;\n`;\n\n// 인터페이스 정의\ninterface ReservationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  startTime: Date;\n  endTime: Date;\n  staffId: string;\n  staffName: string;\n  programId: string;\n  programName: string;\n  program: Program;\n  branchId: string;\n  branchName: string;\n  currentUser?: { \n    id: string; \n    role: 'master' | 'coach' | 'admin';\n    name?: string;\n  };\n  existingEvents: ScheduleEvent[];\n  onReservationCreate: (reservation: ScheduleEvent) => void;\n}\n\ninterface MemberWithCourse extends Member {\n  courseEnrollment?: CourseEnrollment;\n  availableSessions?: number;\n}\n\nconst ReservationModal: React.FC<ReservationModalProps> = ({\n  isOpen,\n  onClose,\n  startTime,\n  endTime,\n  staffId,\n  staffName,\n  programId,\n  programName,\n  program,\n  branchId,\n  branchName,\n  currentUser,\n  existingEvents,\n  onReservationCreate\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [availableMembers, setAvailableMembers] = useState<MemberWithCourse[]>([]);\n  const [selectedMember, setSelectedMember] = useState<MemberWithCourse | null>(null);\n  const [memo, setMemo] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [timeConflict, setTimeConflict] = useState<string>('');\n\n  // 권한 체크\n  const hasPermission = useMemo(() => {\n    if (!currentUser) return false;\n    \n    // 마스터는 모든 권한\n    if (currentUser.role === 'master') return true;\n    \n    // 담당 코치만 해당 코치의 스케줄에 예약 가능\n    if (currentUser.role === 'coach') {\n      return currentUser.id === staffId;\n    }\n    \n    return false;\n  }, [currentUser, staffId]);\n\n  // 시간 포맷팅\n  const formatTime = (date: Date): string => {\n    return date.toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false\n    });\n  };\n\n  const formatDate = (date: Date): string => {\n    return date.toLocaleDateString('ko-KR', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long'\n    });\n  };\n\n  // 시간 겹침 체크\n  const checkTimeConflict = useMemo(() => {\n    const conflictingEvents = existingEvents.filter(event => {\n      // 같은 스태프의 이벤트만 체크\n      if (event.staffId !== staffId) return false;\n      \n      // 시간 겹침 체크\n      const eventStart = new Date(event.startTime);\n      const eventEnd = new Date(event.endTime);\n      \n      return (\n        (startTime >= eventStart && startTime < eventEnd) ||\n        (endTime > eventStart && endTime <= eventEnd) ||\n        (startTime <= eventStart && endTime >= eventEnd)\n      );\n    });\n\n    if (conflictingEvents.length > 0) {\n      const conflictInfo = conflictingEvents.map(event => \n        `${formatTime(new Date(event.startTime))} - ${formatTime(new Date(event.endTime))} (${event.title})`\n      ).join(', ');\n      return `선택한 시간대에 다른 일정이 있습니다: ${conflictInfo}`;\n    }\n\n    return '';\n  }, [existingEvents, staffId, startTime, endTime]);\n\n  // 예약 가능한 회원 로드\n  const loadAvailableMembers = useCallback(async () => {\n    if (!isOpen) return;\n    \n    setLoading(true);\n    try {\n      // 해당 지점의 활성 회원 조회\n      const allMembers = await dbManager.getAllMembers();\n      const branchMembers = allMembers.filter(member => \n        member.branchId === branchId && \n        member.isActive &&\n        (searchQuery === '' || member.name.toLowerCase().includes(searchQuery.toLowerCase()))\n      );\n\n      // 횟수제 수강권을 가진 회원들만 필터링\n      const allEnrollments = await dbManager.getAllCourseEnrollments();\n      const membersWithCourse: MemberWithCourse[] = [];\n\n      for (const member of branchMembers) {\n        // 해당 프로그램의 활성 횟수제 수강권 찾기\n        const courseEnrollment = allEnrollments.find(enrollment =>\n          enrollment.memberId === member.id &&\n          enrollment.programId === programId &&\n          enrollment.programType === '횟수제' &&\n          enrollment.enrollmentStatus === 'active' &&\n          (enrollment.completedSessions || 0) < (enrollment.sessionCount || 0)\n        );\n\n        if (courseEnrollment) {\n          const availableSessions = (courseEnrollment.sessionCount || 0) - (courseEnrollment.completedSessions || 0);\n          membersWithCourse.push({\n            ...member,\n            courseEnrollment,\n            availableSessions\n          });\n        }\n      }\n\n      setAvailableMembers(membersWithCourse);\n    } catch (error) {\n      console.error('회원 목록 로드 실패:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [isOpen, branchId, programId, searchQuery]);\n\n  // 예약 생성\n  const handleCreateReservation = async () => {\n    if (!selectedMember || !hasPermission) return;\n\n    // 시간 겹침 체크\n    if (timeConflict) {\n      alert('시간이 겹치는 다른 일정이 있어 예약할 수 없습니다.');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      // 새 예약 이벤트 생성 (데이터베이스용 타입으로)\n      const newReservationForDB: Omit<import('../utils/db/types').ScheduleEvent, 'id' | 'createdAt' | 'updatedAt'> = {\n        title: `${selectedMember.name} (${programName})`,\n        startTime,\n        endTime,\n        staffId,\n        staffName,\n        programId,\n        programName,\n        memberId: selectedMember.id,\n        memberName: selectedMember.name,\n        type: 'class',\n        color: '#3b82f6', // 파란색으로 수업 표시\n        description: memo || `${selectedMember.name} 회원의 ${programName} 수업`,\n        branchId,\n        branchName,\n        sourceType: 'booking',\n        sourceId: selectedMember.id\n      };\n\n      // 예약 저장\n      const savedEvents = await dbManager.saveScheduleEvents([newReservationForDB]);\n      const savedDBEvent = savedEvents[0];\n\n      // Calendar 컴포넌트용 이벤트 객체로 변환\n      const calendarEvent: ScheduleEvent = {\n        id: savedDBEvent.id,\n        title: savedDBEvent.title,\n        startTime: savedDBEvent.startTime,\n        endTime: savedDBEvent.endTime,\n        staffId: savedDBEvent.staffId,\n        staffName: savedDBEvent.staffName,\n        programId: savedDBEvent.programId,\n        programName: savedDBEvent.programName,\n        memberId: savedDBEvent.memberId,\n        memberName: savedDBEvent.memberName,\n        type: savedDBEvent.type,\n        color: savedDBEvent.color,\n        description: savedDBEvent.description,\n        branchId: savedDBEvent.branchId,\n        branchName: savedDBEvent.branchName,\n        sourceType: savedDBEvent.sourceType,\n        sourceId: savedDBEvent.sourceId,\n        createdAt: savedDBEvent.createdAt,\n        updatedAt: savedDBEvent.updatedAt\n      };\n\n      // 수강권 세션 수 업데이트\n      if (selectedMember.courseEnrollment) {\n        const updatedEnrollment = {\n          ...selectedMember.courseEnrollment,\n          completedSessions: (selectedMember.courseEnrollment.completedSessions || 0) + 1,\n          updatedAt: new Date()\n        };\n\n        await dbManager.updateCourseEnrollment(updatedEnrollment.id, updatedEnrollment);\n      }\n\n      // 회원 메모 업데이트 (메모가 있는 경우)\n      if (memo.trim()) {\n        const updatedMember = {\n          ...selectedMember,\n          remarks: selectedMember.remarks ? \n            `${selectedMember.remarks}\\n\\n[${new Date().toLocaleDateString('ko-KR')}] ${memo}` : \n            `[${new Date().toLocaleDateString('ko-KR')}] ${memo}`,\n          updatedAt: new Date()\n        };\n        \n        await dbManager.updateMember(updatedMember.id, updatedMember);\n      }\n\n      // 부모 컴포넌트에 새 예약 알림\n      onReservationCreate(calendarEvent);\n\n      alert('예약이 성공적으로 등록되었습니다.');\n      handleClose();\n    } catch (error) {\n      console.error('예약 생성 실패:', error);\n      alert('예약 등록 중 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 모달 닫기\n  const handleClose = () => {\n    setSearchQuery('');\n    setSelectedMember(null);\n    setMemo('');\n    setTimeConflict('');\n    onClose();\n  };\n\n  // 검색어 변경 시 회원 목록 새로고침\n  useEffect(() => {\n    if (isOpen) {\n      loadAvailableMembers();\n    }\n  }, [isOpen, loadAvailableMembers]);\n\n  // 시간 겹침 체크\n  useEffect(() => {\n    setTimeConflict(checkTimeConflict);\n  }, [checkTimeConflict]);\n\n  // 권한 없음 처리\n  if (isOpen && !hasPermission) {\n    return (\n      <Modal \n        isOpen={isOpen} \n        onClose={handleClose}\n        body={\n          <div>\n            <div style={{ textAlign: 'center', padding: '48px' }}>\n              <div style={{ fontSize: AppTextStyles.body1.fontSize, color: AppColors.error, marginBottom: '16px' }}>\n                예약 등록 권한이 없습니다.\n              </div>\n              <div style={{ fontSize: AppTextStyles.body2.fontSize, color: AppColors.onSurface + '80' }}>\n                마스터 또는 담당 코치만 예약을 등록할 수 있습니다.\n              </div>\n            </div>\n          </div>\n        }\n        footer={\n          <Button variant=\"secondary\" onClick={handleClose}>\n            확인\n          </Button>\n        }\n        width=\"400px\"\n      />\n    );\n  }\n\n  return (\n    <Modal \n      isOpen={isOpen} \n      onClose={handleClose}\n      body={\n        <ModalContent>\n          {/* 시간 정보 */}\n          <TimeInfo>\n            <TimeText>\n              {formatDate(startTime)}\n              <br />\n              {formatTime(startTime)} - {formatTime(endTime)} ({Math.round((endTime.getTime() - startTime.getTime()) / (1000 * 60))}분)\n              <br />\n              {staffName} 코치 · {programName}\n            </TimeText>\n          </TimeInfo>\n\n          {/* 시간 겹침 경고 */}\n          {timeConflict && (\n            <WarningText>\n              {timeConflict}\n            </WarningText>\n          )}\n\n          {/* 회원 검색 */}\n          <SearchSection>\n            <SectionTitle>수업 참여 회원 선택</SectionTitle>\n            <TextField\n              label=\"회원 이름 검색\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"회원 이름을 입력하세요\"\n            />\n          </SearchSection>\n\n          {/* 회원 목록 */}\n          <MemberList>\n            {loading ? (\n              <NoMembers>회원 목록을 불러오는 중...</NoMembers>\n            ) : availableMembers.length === 0 ? (\n              <NoMembers>\n                {searchQuery ? \n                  `\"${searchQuery}\"와 일치하는 회원이 없습니다.` : \n                  '예약 가능한 회원이 없습니다.\\n횟수제 수강권을 가진 활성 회원만 예약 가능합니다.'\n                }\n              </NoMembers>\n            ) : (\n              availableMembers.map(member => (\n                <MemberItem\n                  key={member.id}\n                  selected={selectedMember?.id === member.id}\n                  onClick={() => {\n                    setSelectedMember(member);\n                    setMemo(member.remarks || '');\n                  }}\n                >\n                  <MemberInfo>\n                    <MemberDetails>\n                      <MemberName>{member.name}</MemberName>\n                      <MemberPhone>{member.phone}</MemberPhone>\n                      <CourseInfo>\n                        <span>{member.courseEnrollment?.productName}</span>\n                        <span>•</span>\n                        <SessionCount low={(member.availableSessions || 0) <= 3}>\n                          잔여 {member.availableSessions}회\n                        </SessionCount>\n                      </CourseInfo>\n                      {member.remarks && (\n                        <MemberMemo>\n                          비고: {member.remarks}\n                        </MemberMemo>\n                      )}\n                    </MemberDetails>\n                  </MemberInfo>\n                </MemberItem>\n              ))\n            )}\n          </MemberList>\n\n          {/* 메모 섹션 */}\n          {selectedMember && (\n            <MemoSection>\n              <SectionTitle>수업 메모</SectionTitle>\n              <MemoTextArea\n                value={memo}\n                onChange={(e) => setMemo(e.target.value)}\n                placeholder=\"이번 수업에 대한 메모를 입력하세요 (선택사항)\"\n              />\n            </MemoSection>\n          )}\n        </ModalContent>\n      }\n      footer={\n        <ModalFooter>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            취소\n          </Button>\n          <Button \n            variant=\"primary\" \n            onClick={handleCreateReservation}\n            disabled={!selectedMember || !!timeConflict || loading}\n          >\n            {loading ? '등록 중...' : '예약 등록'}\n          </Button>\n        </ModalFooter>\n      }\n      width=\"800px\"\n    />\n  );\n};\n\nexport default ReservationModal;"
        }
    ]
}