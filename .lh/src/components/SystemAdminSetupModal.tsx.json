{
    "sourceFile": "src/components/SystemAdminSetupModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759911046491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759911046491,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { toast } from 'react-toastify';\nimport { AppColors } from '../styles/colors';\nimport { AppTextStyles } from '../styles/textStyles';\nimport { AppTextField } from '../customComponents/AppTextField';\nimport { AppEmailTextField } from '../customComponents/AppEmailTextField';\nimport { AppPhoneTextField } from '../customComponents/AppPhoneTextField';\nimport PrimaryButton from './PrimaryButton';\nimport { dbManager } from '../utils/indexedDB';\nimport { SYSTEM_ADMIN_CONFIG } from '../constants/staffConstants';\nimport { isSystemInInitialState, markSystemInitialized } from '../utils/systemInit';\n\nconst Container = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.8);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 10000;\n`;\n\nconst Content = styled.div`\n  background: ${AppColors.surface};\n  border-radius: 16px;\n  padding: 32px;\n  width: 90%;\n  max-width: 500px;\n  max-height: 90vh;\n  overflow-y: auto;\n`;\n\nconst Title = styled.h2`\n  font-size: ${AppTextStyles.title2.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin: 0 0 8px 0;\n  text-align: center;\n`;\n\nconst Description = styled.p`\n  font-size: ${AppTextStyles.body1.fontSize};\n  color: ${AppColors.onSurface};\n  margin: 0 0 24px 0;\n  text-align: center;\n  line-height: 1.5;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  gap: 12px;\n  margin-top: 24px;\n`;\n\nconst SecondaryButton = styled.button`\n  flex: 1;\n  padding: 12px 16px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  background: ${AppColors.surface};\n  color: ${AppColors.onSurface};\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    background: ${AppColors.background};\n  }\n`;\n\ninterface SystemAdminSetupModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}\n\ninterface FormData {\n  name: string;\n  email: string;\n  phone: string;\n}\n\nconst SystemAdminSetupModal: React.FC<SystemAdminSetupModalProps> = ({\n  isOpen,\n  onClose,\n  onComplete\n}) => {\n  const [formData, setFormData] = useState<FormData>({\n    name: '',\n    email: '',\n    phone: ''\n  });\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (isOpen) {\n      loadCurrentData();\n    }\n  }, [isOpen]);\n\n  const loadCurrentData = async () => {\n    try {\n      const systemAdmin = await dbManager.getStaffByLoginId(SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID);\n      if (systemAdmin) {\n        setFormData({\n          name: systemAdmin.name,\n          email: systemAdmin.email,\n          phone: systemAdmin.phone\n        });\n      }\n    } catch (error) {\n      console.error('시스템 관리자 정보 로드 실패:', error);\n    }\n  };\n\n  const handleInputChange = (field: keyof FormData, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleSubmit = async () => {\n    // 필수 필드 검증\n    if (!formData.name.trim()) {\n      toast.error('이름을 입력해주세요.');\n      return;\n    }\n    if (!formData.email.trim()) {\n      toast.error('이메일을 입력해주세요.');\n      return;\n    }\n    if (!formData.phone.trim()) {\n      toast.error('전화번호를 입력해주세요.');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const systemAdmin = await dbManager.getStaffByLoginId(SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID);\n      if (systemAdmin) {\n        await dbManager.updateStaff(systemAdmin.id, {\n          name: formData.name.trim(),\n          email: formData.email.trim(),\n          phone: formData.phone.trim(),\n          updatedAt: new Date()\n        });\n\n        await markSystemInitialized();\n        toast.success('시스템 관리자 정보가 업데이트되었습니다.');\n        onComplete();\n      }\n    } catch (error) {\n      console.error('정보 업데이트 실패:', error);\n      toast.error('정보 업데이트에 실패했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSkip = () => {\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <Container>\n      <Content>\n        <Title>🎉 시스템 관리자 정보 설정</Title>\n        <Description>\n          시스템이 처음 설정되었습니다.<br/>\n          시스템 관리자의 기본 정보를 입력해주세요.\n        </Description>\n\n        <Form>\n          <AppTextField\n            value={formData.name}\n            onChange={(e) => handleInputChange('name', e.target.value)}\n            label=\"이름\"\n            placeholder=\"관리자 이름을 입력하세요\"\n          />\n\n          <AppEmailTextField\n            value={formData.email}\n            onChange={(e) => handleInputChange('email', e.target.value)}\n            label=\"이메일\"\n            placeholder=\"관리자 이메일을 입력하세요\"\n          />\n\n          <AppPhoneTextField\n            value={formData.phone}\n            onChange={(value) => handleInputChange('phone', value)}\n            label=\"전화번호\"\n            placeholder=\"전화번호를 입력하세요\"\n          />\n        </Form>\n\n        <ButtonGroup>\n          <SecondaryButton onClick={handleSkip} disabled={loading}>\n            나중에 설정\n          </SecondaryButton>\n          <PrimaryButton onClick={handleSubmit} disabled={loading}>\n            {loading ? '저장 중...' : '정보 저장'}\n          </PrimaryButton>\n        </ButtonGroup>\n      </Content>\n    </Container>\n  );\n};\n\n// 시스템 초기 설정 상태를 확인하고 모달을 표시하는 훅\nexport const useSystemSetupCheck = () => {\n  const [showSetupModal, setShowSetupModal] = useState(false);\n  const [isChecking, setIsChecking] = useState(true);\n\n  useEffect(() => {\n    checkSystemSetup();\n  }, []);\n\n  const checkSystemSetup = async () => {\n    try {\n      const isInitial = await isSystemInInitialState();\n      setShowSetupModal(isInitial);\n    } catch (error) {\n      console.error('시스템 설정 상태 확인 실패:', error);\n    } finally {\n      setIsChecking(false);\n    }\n  };\n\n  const handleSetupComplete = () => {\n    setShowSetupModal(false);\n  };\n\n  const handleSetupSkip = () => {\n    setShowSetupModal(false);\n  };\n\n  return {\n    showSetupModal,\n    isChecking,\n    handleSetupComplete,\n    handleSetupSkip,\n    SystemAdminSetupModal: (props: Omit<SystemAdminSetupModalProps, 'isOpen' | 'onClose' | 'onComplete'>) => (\n      <SystemAdminSetupModal\n        {...props}\n        isOpen={showSetupModal}\n        onClose={handleSetupSkip}\n        onComplete={handleSetupComplete}\n      />\n    )\n  };\n};\n\nexport default SystemAdminSetupModal;\n"
        }
    ]
}