{
    "sourceFile": "src/utils/authUtils.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1760157680195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760161170343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     if (!user) return null;\n \n     // 권한에 따른 role 매핑\n     let role: 'master' | 'coach' | 'admin';\n-    if (user.permission === 'master' || user.permission === '마스터') {\n+    if (user.permission === 'MASTER' || user.permission === 'master' || user.permission === '마스터') {\n       role = 'master';\n     } else if (user.role === '코치') {\n       role = 'coach';\n     } else {\n"
                }
            ],
            "date": 1760157680195,
            "name": "Commit-0",
            "content": "/**\n * 권한 관리 유틸리티\n */\n\nimport { dbManager } from './indexedDB';\n\nexport interface CurrentUser {\n  id: string;\n  name: string;\n  role: 'master' | 'coach' | 'admin';\n  permission: string;\n}\n\n/**\n * 현재 로그인한 사용자 정보 조회\n */\nexport const getCurrentUser = async (): Promise<CurrentUser | null> => {\n  try {\n    const adminId = sessionStorage.getItem('adminId');\n    if (!adminId) return null;\n\n    const allStaff = await dbManager.getAllStaff();\n    const user = allStaff.find(staff => staff.loginId === adminId);\n    \n    if (!user) return null;\n\n    // 권한에 따른 role 매핑\n    let role: 'master' | 'coach' | 'admin';\n    if (user.permission === 'master' || user.permission === '마스터') {\n      role = 'master';\n    } else if (user.role === '코치') {\n      role = 'coach';\n    } else {\n      role = 'admin';\n    }\n\n    return {\n      id: user.id,\n      name: user.name,\n      role,\n      permission: user.permission\n    };\n  } catch (error) {\n    console.error('현재 사용자 정보 조회 실패:', error);\n    return null;\n  }\n};\n\n/**\n * 특정 직원의 휴일설정 권한 체크\n */\nexport const canEditStaffHoliday = async (targetStaffId: string): Promise<boolean> => {\n  try {\n    const currentUser = await getCurrentUser();\n    if (!currentUser) return false;\n\n    // 마스터 권한은 모든 직원 편집 가능\n    if (currentUser.role === 'master') return true;\n\n    // 본인만 편집 가능\n    return currentUser.id === targetStaffId;\n  } catch (error) {\n    console.error('휴일설정 권한 체크 실패:', error);\n    return false;\n  }\n};\n\n/**\n * 여러 직원의 휴일설정 권한 체크\n */\nexport const canEditMultipleStaffHoliday = async (targetStaffIds: string[]): Promise<boolean> => {\n  try {\n    const currentUser = await getCurrentUser();\n    if (!currentUser) return false;\n\n    // 마스터 권한은 모든 직원 편집 가능\n    if (currentUser.role === 'master') return true;\n\n    // 본인만 포함된 경우만 가능\n    return targetStaffIds.length === 1 && targetStaffIds[0] === currentUser.id;\n  } catch (error) {\n    console.error('다중 직원 휴일설정 권한 체크 실패:', error);\n    return false;\n  }\n};\n\n/**\n * 권한별 접근 가능한 직원 목록 조회\n */\nexport const getAccessibleStaff = async (): Promise<string[]> => {\n  try {\n    const currentUser = await getCurrentUser();\n    if (!currentUser) return [];\n\n    // 마스터 권한은 모든 활성 코치\n    if (currentUser.role === 'master') {\n      const allStaff = await dbManager.getAllStaff();\n      return allStaff\n        .filter(staff => staff.role === '코치' && staff.isActive)\n        .map(staff => staff.id);\n    }\n\n    // 일반 코치는 본인만\n    if (currentUser.role === 'coach') {\n      return [currentUser.id];\n    }\n\n    return [];\n  } catch (error) {\n    console.error('접근 가능한 직원 목록 조회 실패:', error);\n    return [];\n  }\n};\n"
        }
    ]
}