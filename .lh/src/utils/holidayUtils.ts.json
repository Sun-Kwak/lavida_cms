{
    "sourceFile": "src/utils/holidayUtils.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760158255863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760158255863,
            "name": "Commit-0",
            "content": "/**\n * 코치 휴일 설정 관련 유틸리티 함수들\n */\n\nimport { HolidaySettings } from './indexedDB';\n\n// IndexedDB 데이터베이스 이름 및 버전\nconst DB_NAME = 'LavidaDB';\nconst DB_VERSION = 1;\nconst HOLIDAY_STORE = 'holidaySettings';\n\n/**\n * IndexedDB 초기화\n */\nconst initDB = (): Promise<IDBDatabase> => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    \n    request.onerror = () => reject(request.error);\n    request.onsuccess = () => resolve(request.result);\n    \n    request.onupgradeneeded = (event) => {\n      const db = (event.target as IDBOpenDBRequest).result;\n      \n      // 휴일 설정 스토어 생성\n      if (!db.objectStoreNames.contains(HOLIDAY_STORE)) {\n        const store = db.createObjectStore(HOLIDAY_STORE, { keyPath: 'id' });\n        store.createIndex('staffId', 'staffId', { unique: false });\n        store.createIndex('date', 'date', { unique: false });\n        store.createIndex('staffDate', ['staffId', 'date'], { unique: true });\n      }\n    };\n  });\n};\n\n/**\n * 휴일 설정 저장\n */\nexport const saveHolidaySettings = async (settings: HolidaySettings[]): Promise<void> => {\n  const db = await initDB();\n  const transaction = db.transaction([HOLIDAY_STORE], 'readwrite');\n  const store = transaction.objectStore(HOLIDAY_STORE);\n  \n  // 기존 설정 삭제 후 새로운 설정 저장\n  const staffIds = Array.from(new Set(settings.map(s => s.staffId)));\n  const dates = Array.from(new Set(settings.map(s => s.date)));\n  \n  // 해당 코치들의 해당 날짜들 기존 설정 삭제\n  for (const staffId of staffIds) {\n    for (const date of dates) {\n      const deleteRequest = store.delete(`${staffId}-${date}`);\n      await new Promise((resolve, reject) => {\n        deleteRequest.onsuccess = () => resolve(undefined);\n        deleteRequest.onerror = () => reject(deleteRequest.error);\n      });\n    }\n  }\n  \n  // 새로운 설정 저장\n  for (const setting of settings) {\n    const addRequest = store.put(setting);\n    await new Promise((resolve, reject) => {\n      addRequest.onsuccess = () => resolve(undefined);\n      addRequest.onerror = () => reject(addRequest.error);\n    });\n  }\n  \n  return new Promise((resolve, reject) => {\n    transaction.oncomplete = () => resolve();\n    transaction.onerror = () => reject(transaction.error);\n  });\n};\n\n/**\n * 특정 코치의 휴일 설정 조회\n */\nexport const getHolidaySettingsByStaffId = async (staffId: string): Promise<HolidaySettings[]> => {\n  const db = await initDB();\n  const transaction = db.transaction([HOLIDAY_STORE], 'readonly');\n  const store = transaction.objectStore(HOLIDAY_STORE);\n  const index = store.index('staffId');\n  \n  return new Promise((resolve, reject) => {\n    const request = index.getAll(staffId);\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n};\n\n/**\n * 특정 날짜 범위의 휴일 설정 조회\n */\nexport const getHolidaySettingsByDateRange = async (\n  startDate: string, \n  endDate: string, \n  staffIds?: string[]\n): Promise<HolidaySettings[]> => {\n  const db = await initDB();\n  const transaction = db.transaction([HOLIDAY_STORE], 'readonly');\n  const store = transaction.objectStore(HOLIDAY_STORE);\n  \n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n    request.onsuccess = () => {\n      const allSettings = request.result;\n      const filteredSettings = allSettings.filter(setting => {\n        const isInDateRange = setting.date >= startDate && setting.date <= endDate;\n        const isTargetStaff = !staffIds || staffIds.includes(setting.staffId);\n        return isInDateRange && isTargetStaff;\n      });\n      resolve(filteredSettings);\n    };\n    request.onerror = () => reject(request.error);\n  });\n};\n\n/**\n * 모든 휴일 설정 조회\n */\nexport const getAllHolidaySettings = async (): Promise<HolidaySettings[]> => {\n  const db = await initDB();\n  const transaction = db.transaction([HOLIDAY_STORE], 'readonly');\n  const store = transaction.objectStore(HOLIDAY_STORE);\n  \n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n};\n\n/**\n * 특정 휴일 설정 삭제\n */\nexport const deleteHolidaySettings = async (staffId: string, dates: string[]): Promise<void> => {\n  const db = await initDB();\n  const transaction = db.transaction([HOLIDAY_STORE], 'readwrite');\n  const store = transaction.objectStore(HOLIDAY_STORE);\n  \n  for (const date of dates) {\n    const deleteRequest = store.delete(`${staffId}-${date}`);\n    await new Promise((resolve, reject) => {\n      deleteRequest.onsuccess = () => resolve(undefined);\n      deleteRequest.onerror = () => reject(deleteRequest.error);\n    });\n  }\n  \n  return new Promise((resolve, reject) => {\n    transaction.oncomplete = () => resolve();\n    transaction.onerror = () => reject(transaction.error);\n  });\n};\n\n/**\n * 특정 날짜가 휴일인지 확인 (주말 기본 휴일 고려)\n */\nexport const isHoliday = async (staffId: string, date: string): Promise<boolean> => {\n  const dateObj = new Date(date);\n  const isWeekend = dateObj.getDay() === 0 || dateObj.getDay() === 6;\n  \n  const db = await initDB();\n  const transaction = db.transaction([HOLIDAY_STORE], 'readonly');\n  const store = transaction.objectStore(HOLIDAY_STORE);\n  \n  return new Promise((resolve, reject) => {\n    const request = store.get(`${staffId}-${date}`);\n    request.onsuccess = () => {\n      const setting = request.result;\n      if (setting) {\n        resolve(setting.isHoliday);\n      } else {\n        // 설정이 없으면 주말 기본값 사용\n        resolve(isWeekend);\n      }\n    };\n    request.onerror = () => reject(request.error);\n  });\n};\n\n/**\n * 특정 코치의 근무일 목록 조회 (주어진 날짜 범위 내)\n */\nexport const getWorkingDays = async (\n  staffId: string, \n  startDate: string, \n  endDate: string\n): Promise<string[]> => {\n  const settings = await getHolidaySettingsByDateRange(startDate, endDate, [staffId]);\n  const workingDays: string[] = [];\n  \n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  \n  for (let date = new Date(start); date <= end; date.setDate(date.getDate() + 1)) {\n    const dateStr = date.toISOString().split('T')[0];\n    const isWeekend = date.getDay() === 0 || date.getDay() === 6;\n    \n    const setting = settings.find(s => s.date === dateStr);\n    const isHolidayForDate = setting ? setting.isHoliday : isWeekend;\n    \n    if (!isHolidayForDate) {\n      workingDays.push(dateStr);\n    }\n  }\n  \n  return workingDays;\n};\n"
        }
    ]
}