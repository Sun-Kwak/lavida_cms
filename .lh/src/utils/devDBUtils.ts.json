{
    "sourceFile": "src/utils/devDBUtils.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759899370645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759912075500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,15 +39,13 @@\n     await dbManager.clearAllData();\n     console.log('모든 데이터가 삭제되었습니다.');\n   },\n \n-  // 샘플 데이터 재생성\n+  // 샘플 데이터 재생성 (시스템 관리자 재생성)\n   async resetSampleData() {\n     await this.clearAll();\n-    await dbManager.seedSampleData();\n-    const branches = await this.getAllBranches();\n-    console.log('샘플 데이터가 재생성되었습니다.');\n-    return branches;\n+    // 시스템 관리자는 autoInitializeSystem에서 자동으로 생성됨\n+    console.log('데이터가 초기화되었습니다. 페이지를 새로고침하면 시스템 관리자가 자동 생성됩니다.');\n   },\n \n   // IndexedDB 상태 확인\n   async getDBInfo() {\n"
                }
            ],
            "date": 1759899370645,
            "name": "Commit-0",
            "content": "/**\n * 개발자 도구용 IndexedDB 관리 헬퍼\n * 브라우저 콘솔에서 사용할 수 있는 유틸리티 함수들\n */\n\nimport { dbManager } from './indexedDB';\n\n// 개발자 도구에서 사용할 수 있는 전역 함수들\nexport const devDBUtils = {\n  // 모든 지점 조회\n  async getAllBranches() {\n    const branches = await dbManager.getAllBranches();\n    console.table(branches);\n    return branches;\n  },\n\n  // 지점 추가 (개발용)\n  async addTestBranch(name: string, address?: string, phone?: string) {\n    const result = await dbManager.addBranch({\n      name,\n      address,\n      phone,\n      isActive: true,\n    });\n    console.log('지점 추가됨:', result);\n    return result;\n  },\n\n  // 지점 삭제\n  async deleteBranch(id: string) {\n    const result = await dbManager.deleteBranch(id);\n    console.log(`지점 ${id} 삭제 ${result ? '성공' : '실패'}`);\n    return result;\n  },\n\n  // 모든 데이터 삭제 (주의!)\n  async clearAll() {\n    console.warn('⚠️ 모든 데이터를 삭제합니다. 이 작업은 되돌릴 수 없습니다.');\n    await dbManager.clearAllData();\n    console.log('모든 데이터가 삭제되었습니다.');\n  },\n\n  // 샘플 데이터 재생성\n  async resetSampleData() {\n    await this.clearAll();\n    await dbManager.seedSampleData();\n    const branches = await this.getAllBranches();\n    console.log('샘플 데이터가 재생성되었습니다.');\n    return branches;\n  },\n\n  // IndexedDB 상태 확인\n  async getDBInfo() {\n    const branches = await dbManager.getAllBranches();\n    const info = {\n      totalBranches: branches.length,\n      activeBranches: branches.filter(b => b.isActive).length,\n      inactiveBranches: branches.filter(b => !b.isActive).length,\n      recentlyAdded: branches\n        .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n        .slice(0, 5),\n    };\n    console.log('IndexedDB 상태:', info);\n    return info;\n  },\n\n  // 지점 검색\n  async searchBranches(keyword: string) {\n    const results = await dbManager.searchBranchesByName(keyword);\n    console.log(`\"${keyword}\" 검색 결과:`, results);\n    return results;\n  },\n\n  // 대량 데이터 생성 (테스트용)\n  async generateTestData(count: number = 10) {\n    const testData = [];\n    for (let i = 1; i <= count; i++) {\n      const branch = await dbManager.addBranch({\n        name: `테스트지점${i}`,\n        address: `테스트주소${i}`,\n        phone: `010-${String(i).padStart(4, '0')}-${String(i).padStart(4, '0')}`,\n        isActive: Math.random() > 0.2, // 80% 확률로 활성\n      });\n      testData.push(branch);\n    }\n    console.log(`${count}개의 테스트 데이터가 생성되었습니다.`);\n    return testData;\n  },\n\n  // 데이터 내보내기 (JSON)\n  async exportData() {\n    const branches = await dbManager.getAllBranches();\n    const exportData = {\n      timestamp: new Date().toISOString(),\n      version: '1.0',\n      branches,\n    };\n    \n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: 'application/json',\n    });\n    \n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `lavida-branches-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    console.log('데이터가 내보내기되었습니다.');\n    return exportData;\n  },\n\n  // 사용법 안내\n  help() {\n    console.log(`\n=== Lavida IndexedDB 개발자 도구 ===\n\n사용 가능한 명령어:\n- devDB.getAllBranches()          : 모든 지점 조회\n- devDB.addTestBranch(name)       : 테스트 지점 추가\n- devDB.deleteBranch(id)          : 지점 삭제\n- devDB.clearAll()                : 모든 데이터 삭제 (주의!)\n- devDB.resetSampleData()         : 샘플 데이터 재생성\n- devDB.getDBInfo()               : DB 상태 정보\n- devDB.searchBranches(keyword)   : 지점 검색\n- devDB.generateTestData(count)   : 테스트 데이터 대량 생성\n- devDB.exportData()              : 데이터 JSON 내보내기\n\n예시:\ndevDB.addTestBranch(\"신규지점\", \"서울시 강남구\", \"02-1234-5678\")\ndevDB.searchBranches(\"강남\")\ndevDB.generateTestData(5)\n    `);\n  },\n};\n\n// 개발 환경에서만 전역 객체에 추가\nif (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {\n  (window as any).devDB = devDBUtils;\n  \n  // 페이지 로드 시 안내 메시지\n  console.log(`\n🗄️ Lavida IndexedDB 개발자 도구가 활성화되었습니다!\n콘솔에서 'devDB.help()'를 입력하여 사용법을 확인하세요.\n  `);\n}\n"
        }
    ]
}