{
    "sourceFile": "src/utils/db/ExercisePrescriptionService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1761463030919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761463993314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,13 +17,20 @@\n   ): Promise<string> {\n     try {\n       await this.initDB();\n       \n+      // 서명 검증\n+      if (!prescriptionData.signatureData || prescriptionData.signatureData.trim() === '') {\n+        throw new Error('서명이 필요합니다. 서명을 완료해주세요.');\n+      }\n+      \n       const prescription: ExercisePrescription = {\n         ...prescriptionData,\n         id: this.generateUUID(),\n         createdAt: new Date(),\n         updatedAt: new Date(),\n+        // 최초 저장 시에만 서명 날짜 설정\n+        signedAt: prescriptionData.signedAt || new Date(),\n       };\n \n       await this.executeTransaction(this.STORE_NAME, 'readwrite', (store) => {\n         return store.put(prescription);\n@@ -32,18 +39,18 @@\n       console.log(`운동처방서 저장 완료: ${prescription.id}`);\n       return prescription.id;\n     } catch (error) {\n       console.error('운동처방서 저장 실패:', error);\n-      throw new Error('운동처방서 저장에 실패했습니다.');\n+      throw error;\n     }\n   }\n \n   /**\n    * 운동처방서 업데이트\n    */\n   async updateExercisePrescription(\n     id: string, \n-    updates: Partial<Omit<ExercisePrescription, 'id' | 'createdAt' | 'updatedAt'>>\n+    updates: Partial<Omit<ExercisePrescription, 'id' | 'createdAt' | 'updatedAt' | 'signedAt'>>\n   ): Promise<boolean> {\n     try {\n       await this.initDB();\n       \n@@ -55,8 +62,10 @@\n       const updated: ExercisePrescription = {\n         ...existing,\n         ...updates,\n         updatedAt: new Date(),\n+        // 서명 날짜는 최초 서명 시에만 설정되고 이후 업데이트에서는 변경하지 않음\n+        signedAt: existing.signedAt,\n       };\n \n       await this.executeTransaction(this.STORE_NAME, 'readwrite', (store) => {\n         return store.put(updated);\n@@ -304,8 +313,10 @@\n         front: [],\n         spine: [],\n         back: [],\n       },\n+      signatureData: '', // 서명 데이터 초기값\n+      signedAt: null, // 서명 날짜 초기값\n       isActive: true,\n       prescriptionDate: new Date(),\n     };\n   }\n"
                },
                {
                    "date": 1761464202095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n     try {\n       await this.initDB();\n       \n       const allPrescriptions = await this.executeTransaction(this.STORE_NAME, 'readonly', (store) => {\n-        const index = store.index('memberIdIndex');\n+        const index = store.index('memberId');\n         return index.getAll(memberId);\n       }) as ExercisePrescription[];\n       \n       // 가장 최근 운동처방서 반환\n@@ -151,9 +151,9 @@\n     try {\n       await this.initDB();\n       \n       const prescriptions = await this.executeTransaction(this.STORE_NAME, 'readonly', (store) => {\n-        const index = store.index('memberIdIndex');\n+        const index = store.index('memberId');\n         return index.getAll(memberId);\n       }) as ExercisePrescription[];\n       \n       // 업데이트 시간순 정렬 (최신순)\n"
                }
            ],
            "date": 1761463030919,
            "name": "Commit-0",
            "content": "/**\n * 운동처방서 서비스\n * 운동처방서 관련 모든 데이터베이스 작업을 처리\n */\n\nimport { BaseDBManager } from './BaseDBManager';\nimport { ExercisePrescription, BodyImagePoint } from './types';\n\nexport class ExercisePrescriptionService extends BaseDBManager {\n  private readonly STORE_NAME = 'exercisePrescriptions';\n\n  /**\n   * 운동처방서 저장\n   */\n  async saveExercisePrescription(\n    prescriptionData: Omit<ExercisePrescription, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<string> {\n    try {\n      await this.initDB();\n      \n      const prescription: ExercisePrescription = {\n        ...prescriptionData,\n        id: this.generateUUID(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      await this.executeTransaction(this.STORE_NAME, 'readwrite', (store) => {\n        return store.put(prescription);\n      });\n      \n      console.log(`운동처방서 저장 완료: ${prescription.id}`);\n      return prescription.id;\n    } catch (error) {\n      console.error('운동처방서 저장 실패:', error);\n      throw new Error('운동처방서 저장에 실패했습니다.');\n    }\n  }\n\n  /**\n   * 운동처방서 업데이트\n   */\n  async updateExercisePrescription(\n    id: string, \n    updates: Partial<Omit<ExercisePrescription, 'id' | 'createdAt' | 'updatedAt'>>\n  ): Promise<boolean> {\n    try {\n      await this.initDB();\n      \n      const existing = await this.getExercisePrescriptionById(id);\n      if (!existing) {\n        throw new Error('운동처방서를 찾을 수 없습니다.');\n      }\n\n      const updated: ExercisePrescription = {\n        ...existing,\n        ...updates,\n        updatedAt: new Date(),\n      };\n\n      await this.executeTransaction(this.STORE_NAME, 'readwrite', (store) => {\n        return store.put(updated);\n      });\n      \n      console.log(`운동처방서 업데이트 완료: ${id}`);\n      return true;\n    } catch (error) {\n      console.error('운동처방서 업데이트 실패:', error);\n      throw new Error('운동처방서 업데이트에 실패했습니다.');\n    }\n  }\n\n  /**\n   * 회원별 운동처방서 조회\n   */\n  async getExercisePrescriptionByMember(memberId: string): Promise<ExercisePrescription | null> {\n    try {\n      await this.initDB();\n      \n      const allPrescriptions = await this.executeTransaction(this.STORE_NAME, 'readonly', (store) => {\n        const index = store.index('memberIdIndex');\n        return index.getAll(memberId);\n      }) as ExercisePrescription[];\n      \n      // 가장 최근 운동처방서 반환\n      if (allPrescriptions.length > 0) {\n        return allPrescriptions.sort((a: ExercisePrescription, b: ExercisePrescription) => \n          new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()\n        )[0];\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('운동처방서 조회 실패:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 운동처방서 ID로 조회\n   */\n  async getExercisePrescriptionById(id: string): Promise<ExercisePrescription | null> {\n    try {\n      await this.initDB();\n      \n      const prescription = await this.executeTransaction(this.STORE_NAME, 'readonly', (store) => {\n        return store.get(id);\n      }) as ExercisePrescription;\n      \n      return prescription || null;\n    } catch (error) {\n      console.error('운동처방서 조회 실패:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 모든 운동처방서 조회\n   */\n  async getAllExercisePrescriptions(): Promise<ExercisePrescription[]> {\n    try {\n      await this.initDB();\n      \n      const prescriptions = await this.executeTransaction(this.STORE_NAME, 'readonly', (store) => {\n        return store.getAll();\n      }) as ExercisePrescription[];\n      \n      // 업데이트 시간순 정렬 (최신순)\n      return prescriptions.sort((a: ExercisePrescription, b: ExercisePrescription) => \n        new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()\n      );\n    } catch (error) {\n      console.error('모든 운동처방서 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 회원별 운동처방서 히스토리 조회\n   */\n  async getExercisePrescriptionHistory(memberId: string): Promise<ExercisePrescription[]> {\n    try {\n      await this.initDB();\n      \n      const prescriptions = await this.executeTransaction(this.STORE_NAME, 'readonly', (store) => {\n        const index = store.index('memberIdIndex');\n        return index.getAll(memberId);\n      }) as ExercisePrescription[];\n      \n      // 업데이트 시간순 정렬 (최신순)\n      return prescriptions.sort((a: ExercisePrescription, b: ExercisePrescription) => \n        new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()\n      );\n    } catch (error) {\n      console.error('운동처방서 히스토리 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 운동처방서 삭제\n   */\n  async deleteExercisePrescription(id: string): Promise<boolean> {\n    try {\n      await this.initDB();\n      \n      await this.executeTransaction(this.STORE_NAME, 'readwrite', (store) => {\n        return store.delete(id);\n      });\n      \n      console.log(`운동처방서 삭제 완료: ${id}`);\n      return true;\n    } catch (error) {\n      console.error('운동처방서 삭제 실패:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 신체 이미지 포인트 추가\n   */\n  async addBodyImagePoint(\n    prescriptionId: string, \n    imageType: 'front' | 'spine' | 'back', \n    point: Omit<BodyImagePoint, 'id'>\n  ): Promise<boolean> {\n    try {\n      const prescription = await this.getExercisePrescriptionById(prescriptionId);\n      if (!prescription) {\n        throw new Error('운동처방서를 찾을 수 없습니다.');\n      }\n\n      const newPoint: BodyImagePoint = {\n        ...point,\n        id: this.generateUUID(),\n      };\n\n      const updatedBodyImages = {\n        ...prescription.bodyImages,\n        [imageType]: [...prescription.bodyImages[imageType], newPoint],\n      };\n\n      return await this.updateExercisePrescription(prescriptionId, {\n        bodyImages: updatedBodyImages,\n      });\n    } catch (error) {\n      console.error('신체 이미지 포인트 추가 실패:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 신체 이미지 포인트 업데이트\n   */\n  async updateBodyImagePoint(\n    prescriptionId: string, \n    imageType: 'front' | 'spine' | 'back', \n    pointId: string, \n    updates: Partial<Omit<BodyImagePoint, 'id'>>\n  ): Promise<boolean> {\n    try {\n      const prescription = await this.getExercisePrescriptionById(prescriptionId);\n      if (!prescription) {\n        throw new Error('운동처방서를 찾을 수 없습니다.');\n      }\n\n      const points = prescription.bodyImages[imageType];\n      const pointIndex = points.findIndex(p => p.id === pointId);\n      \n      if (pointIndex === -1) {\n        throw new Error('포인트를 찾을 수 없습니다.');\n      }\n\n      const updatedPoints = [...points];\n      updatedPoints[pointIndex] = { ...updatedPoints[pointIndex], ...updates };\n\n      const updatedBodyImages = {\n        ...prescription.bodyImages,\n        [imageType]: updatedPoints,\n      };\n\n      return await this.updateExercisePrescription(prescriptionId, {\n        bodyImages: updatedBodyImages,\n      });\n    } catch (error) {\n      console.error('신체 이미지 포인트 업데이트 실패:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 신체 이미지 포인트 삭제\n   */\n  async deleteBodyImagePoint(\n    prescriptionId: string, \n    imageType: 'front' | 'spine' | 'back', \n    pointId: string\n  ): Promise<boolean> {\n    try {\n      const prescription = await this.getExercisePrescriptionById(prescriptionId);\n      if (!prescription) {\n        throw new Error('운동처방서를 찾을 수 없습니다.');\n      }\n\n      const points = prescription.bodyImages[imageType];\n      const filteredPoints = points.filter(p => p.id !== pointId);\n\n      const updatedBodyImages = {\n        ...prescription.bodyImages,\n        [imageType]: filteredPoints,\n      };\n\n      return await this.updateExercisePrescription(prescriptionId, {\n        bodyImages: updatedBodyImages,\n      });\n    } catch (error) {\n      console.error('신체 이미지 포인트 삭제 실패:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 기본 운동처방서 템플릿 생성\n   */\n  createEmptyPrescription(memberId: string, memberName: string): Omit<ExercisePrescription, 'id' | 'createdAt' | 'updatedAt'> {\n    return {\n      memberId,\n      memberName,\n      height: '',\n      weight: '',\n      footSize: '',\n      medications: '',\n      medicalHistory: {\n        musculoskeletal: false,\n        cardiovascular: false,\n        diabetes: false,\n        osteoporosis: false,\n        thyroid: false,\n        varicose: false,\n        arthritis: false,\n      },\n      painHistory: '',\n      bodyImages: {\n        front: [],\n        spine: [],\n        back: [],\n      },\n      isActive: true,\n      prescriptionDate: new Date(),\n    };\n  }\n\n  /**\n   * 운동처방서 검색\n   */\n  async searchExercisePrescriptions(searchTerm: string): Promise<ExercisePrescription[]> {\n    try {\n      const allPrescriptions = await this.getAllExercisePrescriptions();\n      \n      if (!searchTerm.trim()) {\n        return allPrescriptions;\n      }\n\n      const term = searchTerm.toLowerCase();\n      return allPrescriptions.filter(prescription => \n        prescription.memberName.toLowerCase().includes(term) ||\n        prescription.medications.toLowerCase().includes(term) ||\n        prescription.painHistory.toLowerCase().includes(term)\n      );\n    } catch (error) {\n      console.error('운동처방서 검색 실패:', error);\n      return [];\n    }\n  }\n}"
        }
    ]
}