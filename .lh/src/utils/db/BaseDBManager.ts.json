{
    "sourceFile": "src/utils/db/BaseDBManager.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1761368450200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761377685434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n  */\n \n export abstract class BaseDBManager {\n   protected dbName: string = 'LavidaDB';\n-  protected version: number = 12;\n+  protected version: number = 13; // 라커 테이블 추가로 버전 업데이트\n   protected db: IDBDatabase | null = null;\n   protected isInitializing: boolean = false;\n \n   constructor() {\n@@ -288,8 +288,23 @@\n       pbStore.createIndex('memberId', 'memberId', { unique: true });\n       pbStore.createIndex('totalBalance', 'totalBalance', { unique: false });\n       pbStore.createIndex('lastUpdated', 'lastUpdated', { unique: false });\n     }\n+\n+    // 라커 테이블 생성\n+    if (!db.objectStoreNames.contains('lockers')) {\n+      const lockerStore = db.createObjectStore('lockers', { keyPath: 'id' });\n+      lockerStore.createIndex('number', 'number', { unique: false });\n+      lockerStore.createIndex('status', 'status', { unique: false });\n+      lockerStore.createIndex('branchId', 'branchId', { unique: false });\n+      lockerStore.createIndex('userId', 'userId', { unique: false });\n+      lockerStore.createIndex('isActive', 'isActive', { unique: false });\n+      lockerStore.createIndex('branchNumber', ['branchId', 'number'], { unique: true });\n+      lockerStore.createIndex('branchStatus', ['branchId', 'status'], { unique: false });\n+      lockerStore.createIndex('branchActive', ['branchId', 'isActive'], { unique: false });\n+      lockerStore.createIndex('userActive', ['userId', 'isActive'], { unique: false });\n+      lockerStore.createIndex('createdAt', 'createdAt', { unique: false });\n+    }\n   }\n \n   /**\n    * 고유 ID 생성 (UUID v4 형식)\n@@ -390,9 +405,9 @@\n   async clearAllData(): Promise<void> {\n     const storeNames = [\n       'branches', 'staff', 'programs', 'products', 'holidaySettings',\n       'termsDocuments', 'members', 'payments', 'points', 'courseEnrollments',\n-      'orders', 'pointTransactions', 'pointBalances'\n+      'orders', 'pointTransactions', 'pointBalances', 'lockers'\n     ];\n \n     try {\n       for (const storeName of storeNames) {\n"
                },
                {
                    "date": 1761451696560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n  */\n \n export abstract class BaseDBManager {\n   protected dbName: string = 'LavidaDB';\n-  protected version: number = 13; // 라커 테이블 추가로 버전 업데이트\n+  protected version: number = 14; // 주별 휴일설정 테이블 추가로 버전 업데이트\n   protected db: IDBDatabase | null = null;\n   protected isInitializing: boolean = false;\n \n   constructor() {\n@@ -156,8 +156,17 @@\n       holidayStore.createIndex('isHoliday', 'isHoliday', { unique: false });\n       holidayStore.createIndex('staffDate', ['staffId', 'date'], { unique: true });\n     }\n \n+    // 주별 휴일설정 테이블 생성\n+    if (!db.objectStoreNames.contains('weeklyHolidaySettings')) {\n+      const weeklyHolidayStore = db.createObjectStore('weeklyHolidaySettings', { keyPath: 'id' });\n+      weeklyHolidayStore.createIndex('staffId', 'staffId', { unique: false });\n+      weeklyHolidayStore.createIndex('weekStartDate', 'weekStartDate', { unique: false });\n+      weeklyHolidayStore.createIndex('staffWeek', ['staffId', 'weekStartDate'], { unique: true });\n+      weeklyHolidayStore.createIndex('createdAt', 'createdAt', { unique: false });\n+    }\n+\n     // 약관/문서 테이블 생성\n     if (!db.objectStoreNames.contains('termsDocuments')) {\n       const termsStore = db.createObjectStore('termsDocuments', { keyPath: 'id' });\n       termsStore.createIndex('type', 'type', { unique: false });\n"
                },
                {
                    "date": 1761455802357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n  */\n \n export abstract class BaseDBManager {\n   protected dbName: string = 'LavidaDB';\n-  protected version: number = 14; // 주별 휴일설정 테이블 추가로 버전 업데이트\n+  protected version: number = 15; // 스케줄 이벤트 테이블 추가로 버전 업데이트\n   protected db: IDBDatabase | null = null;\n   protected isInitializing: boolean = false;\n \n   constructor() {\n@@ -165,8 +165,22 @@\n       weeklyHolidayStore.createIndex('staffWeek', ['staffId', 'weekStartDate'], { unique: true });\n       weeklyHolidayStore.createIndex('createdAt', 'createdAt', { unique: false });\n     }\n \n+    // 스케줄 이벤트 테이블 생성\n+    if (!db.objectStoreNames.contains('scheduleEvents')) {\n+      const scheduleStore = db.createObjectStore('scheduleEvents', { keyPath: 'id' });\n+      scheduleStore.createIndex('staffId', 'staffId', { unique: false });\n+      scheduleStore.createIndex('type', 'type', { unique: false });\n+      scheduleStore.createIndex('startTime', 'startTime', { unique: false });\n+      scheduleStore.createIndex('endTime', 'endTime', { unique: false });\n+      scheduleStore.createIndex('sourceType', 'sourceType', { unique: false });\n+      scheduleStore.createIndex('sourceId', 'sourceId', { unique: false });\n+      scheduleStore.createIndex('staffDate', ['staffId', 'startTime'], { unique: false });\n+      scheduleStore.createIndex('typeDate', ['type', 'startTime'], { unique: false });\n+      scheduleStore.createIndex('createdAt', 'createdAt', { unique: false });\n+    }\n+\n     // 약관/문서 테이블 생성\n     if (!db.objectStoreNames.contains('termsDocuments')) {\n       const termsStore = db.createObjectStore('termsDocuments', { keyPath: 'id' });\n       termsStore.createIndex('type', 'type', { unique: false });\n"
                },
                {
                    "date": 1761463031161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n  */\n \n export abstract class BaseDBManager {\n   protected dbName: string = 'LavidaDB';\n-  protected version: number = 15; // 스케줄 이벤트 테이블 추가로 버전 업데이트\n+  protected version: number = 16; // 운동처방서 테이블 추가로 버전 업데이트\n   protected db: IDBDatabase | null = null;\n   protected isInitializing: boolean = false;\n \n   constructor() {\n@@ -326,8 +326,20 @@\n       lockerStore.createIndex('branchActive', ['branchId', 'isActive'], { unique: false });\n       lockerStore.createIndex('userActive', ['userId', 'isActive'], { unique: false });\n       lockerStore.createIndex('createdAt', 'createdAt', { unique: false });\n     }\n+\n+    // 운동처방서 테이블 생성\n+    if (!db.objectStoreNames.contains('exercisePrescriptions')) {\n+      const exerciseStore = db.createObjectStore('exercisePrescriptions', { keyPath: 'id' });\n+      exerciseStore.createIndex('memberId', 'memberId', { unique: false });\n+      exerciseStore.createIndex('memberName', 'memberName', { unique: false });\n+      exerciseStore.createIndex('prescriptionDate', 'prescriptionDate', { unique: false });\n+      exerciseStore.createIndex('isActive', 'isActive', { unique: false });\n+      exerciseStore.createIndex('createdAt', 'createdAt', { unique: false });\n+      exerciseStore.createIndex('updatedAt', 'updatedAt', { unique: false });\n+      exerciseStore.createIndex('memberActive', ['memberId', 'isActive'], { unique: false });\n+    }\n   }\n \n   /**\n    * 고유 ID 생성 (UUID v4 형식)\n"
                }
            ],
            "date": 1761368450200,
            "name": "Commit-0",
            "content": "/**\n * IndexedDB 기본 매니저 클래스\n * - 데이터베이스 초기화 및 연결 관리\n * - 트랜잭션 처리\n * - 스키마 정의 및 업그레이드\n */\n\nexport abstract class BaseDBManager {\n  protected dbName: string = 'LavidaDB';\n  protected version: number = 12;\n  protected db: IDBDatabase | null = null;\n  protected isInitializing: boolean = false;\n\n  constructor() {\n    this.initDB();\n  }\n\n  /**\n   * IndexedDB 초기화\n   */\n  protected async initDB(): Promise<void> {\n    // 이미 초기화되었으면 바로 반환\n    if (this.db) {\n      console.log('IndexedDB가 이미 연결되어 있습니다.');\n      return Promise.resolve();\n    }\n\n    // 이미 초기화 중이면 대기\n    if (this.isInitializing) {\n      console.log('IndexedDB 초기화가 이미 진행 중입니다. 대기 중...');\n      // 최대 5초까지 대기\n      for (let i = 0; i < 50; i++) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n        if (this.db) {\n          return;\n        }\n      }\n      throw new Error('IndexedDB 초기화 대기 시간 초과');\n    }\n\n    console.log('IndexedDB 초기화를 시작합니다...');\n    this.isInitializing = true;\n    \n    try {\n      await new Promise<void>((resolve, reject) => {\n        const request = indexedDB.open(this.dbName, this.version);\n\n        request.onerror = () => {\n          console.error('❌ IndexedDB 열기 실패:', request.error);\n          this.isInitializing = false;\n          reject(request.error);\n        };\n\n        request.onsuccess = () => {\n          this.db = request.result;\n          console.log('✅ IndexedDB 연결 성공');\n          \n          // DB 연결 오류 핸들러 설정\n          this.db.onerror = (event) => {\n            console.error('IndexedDB 오류:', event);\n          };\n          \n          this.isInitializing = false;\n          resolve();\n        };\n\n        request.onupgradeneeded = (event) => {\n          console.log('🔄 IndexedDB 스키마 업데이트 중...');\n          const db = (event.target as IDBOpenDBRequest).result;\n          this.createSchema(db, event);\n        };\n      });\n    } catch (error) {\n      console.error('❌ IndexedDB 초기화 중 오류:', error);\n      this.isInitializing = false;\n      throw error;\n    }\n  }\n\n  /**\n   * 데이터베이스 스키마 생성\n   */\n  protected createSchema(db: IDBDatabase, event: IDBVersionChangeEvent): void {\n    // 지점 테이블 생성\n    if (!db.objectStoreNames.contains('branches')) {\n      const branchStore = db.createObjectStore('branches', { keyPath: 'id' });\n      branchStore.createIndex('name', 'name', { unique: true });\n      branchStore.createIndex('isActive', 'isActive', { unique: false });\n      branchStore.createIndex('createdAt', 'createdAt', { unique: false });\n    } else {\n      const transaction = (event.target as IDBOpenDBRequest).transaction!;\n      const branchStore = transaction.objectStore('branches');\n      \n      if (branchStore.indexNames.contains('name')) {\n        branchStore.deleteIndex('name');\n      }\n      branchStore.createIndex('name', 'name', { unique: true });\n    }\n\n    // 직원 테이블 생성\n    if (!db.objectStoreNames.contains('staff')) {\n      const staffStore = db.createObjectStore('staff', { keyPath: 'id' });\n      staffStore.createIndex('name', 'name', { unique: false });\n      staffStore.createIndex('loginId', 'loginId', { unique: true });\n      staffStore.createIndex('email', 'email', { unique: true });\n      staffStore.createIndex('branchId', 'branchId', { unique: false });\n      staffStore.createIndex('position', 'position', { unique: false });\n      staffStore.createIndex('role', 'role', { unique: false });\n      staffStore.createIndex('employmentType', 'employmentType', { unique: false });\n      staffStore.createIndex('permission', 'permission', { unique: false });\n      staffStore.createIndex('isActive', 'isActive', { unique: false });\n      staffStore.createIndex('createdAt', 'createdAt', { unique: false });\n    } else {\n      const transaction = (event.target as IDBOpenDBRequest).transaction!;\n      const staffStore = transaction.objectStore('staff');\n      \n      if (!staffStore.indexNames.contains('isActive')) {\n        staffStore.createIndex('isActive', 'isActive', { unique: false });\n      }\n    }\n\n    // 프로그램 테이블 생성\n    if (!db.objectStoreNames.contains('programs')) {\n      const programStore = db.createObjectStore('programs', { keyPath: 'id' });\n      programStore.createIndex('name', 'name', { unique: true });\n      programStore.createIndex('type', 'type', { unique: false });\n      programStore.createIndex('isActive', 'isActive', { unique: false });\n      programStore.createIndex('createdAt', 'createdAt', { unique: false });\n    } else {\n      const transaction = (event.target as IDBOpenDBRequest).transaction!;\n      const programStore = transaction.objectStore('programs');\n      \n      if (programStore.indexNames.contains('name')) {\n        programStore.deleteIndex('name');\n      }\n      programStore.createIndex('name', 'name', { unique: true });\n    }\n\n    // 상품 테이블 생성\n    if (!db.objectStoreNames.contains('products')) {\n      const productStore = db.createObjectStore('products', { keyPath: 'id' });\n      productStore.createIndex('name', 'name', { unique: false });\n      productStore.createIndex('branchId', 'branchId', { unique: false });\n      productStore.createIndex('programId', 'programId', { unique: false });\n      productStore.createIndex('programType', 'programType', { unique: false });\n      productStore.createIndex('isActive', 'isActive', { unique: false });\n      productStore.createIndex('createdAt', 'createdAt', { unique: false });\n      productStore.createIndex('branchProgram', ['branchId', 'programId'], { unique: false });\n    }\n\n    // 휴일설정 테이블 생성\n    if (!db.objectStoreNames.contains('holidaySettings')) {\n      const holidayStore = db.createObjectStore('holidaySettings', { keyPath: 'id' });\n      holidayStore.createIndex('staffId', 'staffId', { unique: false });\n      holidayStore.createIndex('date', 'date', { unique: false });\n      holidayStore.createIndex('isHoliday', 'isHoliday', { unique: false });\n      holidayStore.createIndex('staffDate', ['staffId', 'date'], { unique: true });\n    }\n\n    // 약관/문서 테이블 생성\n    if (!db.objectStoreNames.contains('termsDocuments')) {\n      const termsStore = db.createObjectStore('termsDocuments', { keyPath: 'id' });\n      termsStore.createIndex('type', 'type', { unique: false });\n      termsStore.createIndex('language', 'language', { unique: false });\n      termsStore.createIndex('title', 'title', { unique: false });\n      termsStore.createIndex('version', 'version', { unique: false });\n      termsStore.createIndex('isActive', 'isActive', { unique: false });\n      termsStore.createIndex('publishedAt', 'publishedAt', { unique: false });\n      termsStore.createIndex('createdAt', 'createdAt', { unique: false });\n      termsStore.createIndex('typeLanguage', ['type', 'language'], { unique: false });\n      termsStore.createIndex('typeLanguageActive', ['type', 'language', 'isActive'], { unique: false });\n    }\n\n    // 회원 테이블 생성\n    if (!db.objectStoreNames.contains('members')) {\n      const memberStore = db.createObjectStore('members', { keyPath: 'id' });\n      memberStore.createIndex('name', 'name', { unique: false });\n      memberStore.createIndex('phone', 'phone', { unique: true });\n      memberStore.createIndex('email', 'email', { unique: false });\n      memberStore.createIndex('branchId', 'branchId', { unique: false });\n      memberStore.createIndex('coach', 'coach', { unique: false });\n      memberStore.createIndex('loginId', 'loginId', { unique: true });\n      memberStore.createIndex('isActive', 'isActive', { unique: false });\n      memberStore.createIndex('createdAt', 'createdAt', { unique: false });\n      memberStore.createIndex('branchActive', ['branchId', 'isActive'], { unique: false });\n    }\n\n    // 결제 테이블 생성\n    if (!db.objectStoreNames.contains('payments')) {\n      const paymentStore = db.createObjectStore('payments', { keyPath: 'id' });\n      paymentStore.createIndex('memberId', 'memberId', { unique: false });\n      paymentStore.createIndex('memberName', 'memberName', { unique: false });\n      paymentStore.createIndex('paymentStatus', 'paymentStatus', { unique: false });\n      paymentStore.createIndex('paymentDate', 'paymentDate', { unique: false });\n      paymentStore.createIndex('totalAmount', 'totalAmount', { unique: false });\n      paymentStore.createIndex('receivedAmount', 'receivedAmount', { unique: false });\n      paymentStore.createIndex('createdAt', 'createdAt', { unique: false });\n      paymentStore.createIndex('memberStatus', ['memberId', 'paymentStatus'], { unique: false });\n    } else {\n      const transaction = (event.target as IDBOpenDBRequest).transaction!;\n      const paymentStore = transaction.objectStore('payments');\n      \n      if (!paymentStore.indexNames.contains('receivedAmount')) {\n        paymentStore.createIndex('receivedAmount', 'receivedAmount', { unique: false });\n      }\n    }\n\n    // 포인트 테이블 생성 (기존 시스템 호환용)\n    if (!db.objectStoreNames.contains('points')) {\n      const pointStore = db.createObjectStore('points', { keyPath: 'id' });\n      pointStore.createIndex('memberId', 'memberId', { unique: false });\n      pointStore.createIndex('memberName', 'memberName', { unique: false });\n      pointStore.createIndex('type', 'type', { unique: false });\n      pointStore.createIndex('source', 'source', { unique: false });\n      pointStore.createIndex('amount', 'amount', { unique: false });\n      pointStore.createIndex('expiryDate', 'expiryDate', { unique: false });\n      pointStore.createIndex('relatedPaymentId', 'relatedPaymentId', { unique: false });\n      pointStore.createIndex('createdAt', 'createdAt', { unique: false });\n      pointStore.createIndex('memberType', ['memberId', 'type'], { unique: false });\n      pointStore.createIndex('memberActive', ['memberId', 'expiryDate'], { unique: false });\n    }\n\n    // 수강정보 테이블 생성\n    if (!db.objectStoreNames.contains('courseEnrollments')) {\n      const courseStore = db.createObjectStore('courseEnrollments', { keyPath: 'id' });\n      courseStore.createIndex('memberId', 'memberId', { unique: false });\n      courseStore.createIndex('memberName', 'memberName', { unique: false });\n      courseStore.createIndex('productId', 'productId', { unique: false });\n      courseStore.createIndex('productName', 'productName', { unique: false });\n      courseStore.createIndex('programId', 'programId', { unique: false });\n      courseStore.createIndex('programName', 'programName', { unique: false });\n      courseStore.createIndex('programType', 'programType', { unique: false });\n      courseStore.createIndex('branchId', 'branchId', { unique: false });\n      courseStore.createIndex('branchName', 'branchName', { unique: false });\n      courseStore.createIndex('coach', 'coach', { unique: false });\n      courseStore.createIndex('coachName', 'coachName', { unique: false });\n      courseStore.createIndex('enrollmentStatus', 'enrollmentStatus', { unique: false });\n      courseStore.createIndex('paidAmount', 'paidAmount', { unique: false });\n      courseStore.createIndex('unpaidAmount', 'unpaidAmount', { unique: false });\n      courseStore.createIndex('startDate', 'startDate', { unique: false });\n      courseStore.createIndex('endDate', 'endDate', { unique: false });\n      courseStore.createIndex('relatedPaymentId', 'relatedPaymentId', { unique: false });\n      courseStore.createIndex('orderId', 'orderId', { unique: false });\n      courseStore.createIndex('createdAt', 'createdAt', { unique: false });\n      courseStore.createIndex('memberStatus', ['memberId', 'enrollmentStatus'], { unique: false });\n      courseStore.createIndex('branchProgram', ['branchId', 'programId'], { unique: false });\n      courseStore.createIndex('coachStatus', ['coach', 'enrollmentStatus'], { unique: false });\n    }\n\n    // 주문 테이블 생성 (새로운 스키마)\n    if (!db.objectStoreNames.contains('orders')) {\n      const orderStore = db.createObjectStore('orders', { keyPath: 'id' });\n      orderStore.createIndex('memberId', 'memberId', { unique: false });\n      orderStore.createIndex('memberName', 'memberName', { unique: false });\n      orderStore.createIndex('branchId', 'branchId', { unique: false });\n      orderStore.createIndex('branchName', 'branchName', { unique: false });\n      orderStore.createIndex('coach', 'coach', { unique: false });\n      orderStore.createIndex('coachName', 'coachName', { unique: false });\n      orderStore.createIndex('orderStatus', 'orderStatus', { unique: false });\n      orderStore.createIndex('orderType', 'orderType', { unique: false });\n      orderStore.createIndex('totalAmount', 'totalAmount', { unique: false });\n      orderStore.createIndex('unpaidAmount', 'unpaidAmount', { unique: false });\n      orderStore.createIndex('createdAt', 'createdAt', { unique: false });\n      orderStore.createIndex('memberStatus', ['memberId', 'orderStatus'], { unique: false });\n      orderStore.createIndex('branchStatus', ['branchId', 'orderStatus'], { unique: false });\n    }\n\n    // 포인트 거래내역 테이블 생성 (새로운 스키마)\n    if (!db.objectStoreNames.contains('pointTransactions')) {\n      const ptStore = db.createObjectStore('pointTransactions', { keyPath: 'id' });\n      ptStore.createIndex('memberId', 'memberId', { unique: false });\n      ptStore.createIndex('memberName', 'memberName', { unique: false });\n      ptStore.createIndex('transactionType', 'transactionType', { unique: false });\n      ptStore.createIndex('relatedOrderId', 'relatedOrderId', { unique: false });\n      ptStore.createIndex('relatedPaymentId', 'relatedPaymentId', { unique: false });\n      ptStore.createIndex('earnedDate', 'earnedDate', { unique: false });\n      ptStore.createIndex('expiryDate', 'expiryDate', { unique: false });\n      ptStore.createIndex('isExpired', 'isExpired', { unique: false });\n      ptStore.createIndex('originalTransactionId', 'originalTransactionId', { unique: false });\n      ptStore.createIndex('createdAt', 'createdAt', { unique: false });\n      ptStore.createIndex('memberType', ['memberId', 'transactionType'], { unique: false });\n      ptStore.createIndex('memberExpiry', ['memberId', 'expiryDate', 'isExpired'], { unique: false });\n    }\n\n    // 포인트 잔액 테이블 생성 (새로운 스키마)\n    if (!db.objectStoreNames.contains('pointBalances')) {\n      const pbStore = db.createObjectStore('pointBalances', { keyPath: 'id' });\n      pbStore.createIndex('memberId', 'memberId', { unique: true });\n      pbStore.createIndex('totalBalance', 'totalBalance', { unique: false });\n      pbStore.createIndex('lastUpdated', 'lastUpdated', { unique: false });\n    }\n  }\n\n  /**\n   * 고유 ID 생성 (UUID v4 형식)\n   */\n  protected generateUUID(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : ((r & 0x3) | 0x8);\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * 트랜잭션 실행 헬퍼\n   */\n  protected async executeTransaction<T>(\n    storeName: string,\n    mode: IDBTransactionMode,\n    operation: (store: IDBObjectStore) => IDBRequest<T>\n  ): Promise<T> {\n    // DB가 없으면 최대 3번 초기화 시도\n    if (!this.db) {\n      for (let attempt = 1; attempt <= 3; attempt++) {\n        try {\n          await this.initDB();\n          if (this.db) break;\n        } catch (error) {\n          if (attempt === 3) {\n            throw new Error(`IndexedDB 초기화 실패 (${attempt}번 시도): ${error}`);\n          }\n          await new Promise(resolve => setTimeout(resolve, 100 * attempt));\n        }\n      }\n    }\n    \n    if (!this.db) {\n      throw new Error('IndexedDB 연결에 실패했습니다');\n    }\n\n    return new Promise((resolve, reject) => {\n      try {\n        const transaction = this.db!.transaction([storeName], mode);\n        const store = transaction.objectStore(storeName);\n        \n        transaction.onerror = () => {\n          reject(transaction.error || new Error('트랜잭션 오류'));\n        };\n        \n        transaction.onabort = () => {\n          reject(new Error('트랜잭션이 중단되었습니다'));\n        };\n\n        const request = operation(store);\n        \n        request.onsuccess = () => {\n          resolve(request.result);\n        };\n        \n        request.onerror = () => {\n          reject(request.error || new Error('요청 오류'));\n        };\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * 파일을 ArrayBuffer로 변환\n   */\n  protected fileToArrayBuffer(file: File): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as ArrayBuffer);\n      reader.onerror = () => reject(reader.error);\n      reader.readAsArrayBuffer(file);\n    });\n  }\n\n  /**\n   * ArrayBuffer를 Blob으로 변환 (파일 다운로드용)\n   */\n  protected arrayBufferToBlob(buffer: ArrayBuffer, mimeType: string): Blob {\n    return new Blob([buffer], { type: mimeType });\n  }\n\n  /**\n   * ArrayBuffer를 File 객체로 변환\n   */\n  protected arrayBufferToFile(buffer: ArrayBuffer, fileName: string, mimeType: string = 'application/octet-stream'): File {\n    const blob = new Blob([buffer], { type: mimeType });\n    return new File([blob], fileName, { type: mimeType });\n  }\n\n  /**\n   * 데이터베이스 초기화 (개발/테스트용)\n   */\n  async clearAllData(): Promise<void> {\n    const storeNames = [\n      'branches', 'staff', 'programs', 'products', 'holidaySettings',\n      'termsDocuments', 'members', 'payments', 'points', 'courseEnrollments',\n      'orders', 'pointTransactions', 'pointBalances'\n    ];\n\n    try {\n      for (const storeName of storeNames) {\n        if (this.db?.objectStoreNames.contains(storeName)) {\n          await this.executeTransaction(storeName, 'readwrite', (store) => \n            store.clear()\n          );\n        }\n      }\n      console.log('모든 데이터 삭제 완료');\n    } catch (error) {\n      console.error('데이터 삭제 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * DB 연결 상태 확인\n   */\n  get isConnected(): boolean {\n    return !!this.db;\n  }\n\n  /**\n   * DB 버전 정보\n   */\n  get dbVersion(): number {\n    return this.version;\n  }\n}"
        }
    ]
}