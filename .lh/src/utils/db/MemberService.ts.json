{
    "sourceFile": "src/utils/db/MemberService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1761368450463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761378612709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,5 +308,53 @@\n       console.error('로그인 ID 중복 체크 실패:', error);\n       throw error;\n     }\n   }\n+\n+  /**\n+   * 회원의 라커 정보 업데이트\n+   */\n+  async updateMemberLockerInfo(\n+    memberId: string, \n+    lockerInfo: {\n+      lockerId: string;\n+      lockerNumber: string;\n+      startDate: string;\n+      endDate: string;\n+      months: number;\n+      paymentId?: string;\n+    } | null\n+  ): Promise<boolean> {\n+    try {\n+      return await this.updateMember(memberId, { lockerInfo });\n+    } catch (error) {\n+      console.error('회원 라커 정보 업데이트 실패:', error);\n+      throw error;\n+    }\n+  }\n+\n+  /**\n+   * 라커가 배정된 회원 조회\n+   */\n+  async getMembersWithLockers(): Promise<Member[]> {\n+    try {\n+      const allMembers = await this.getAllMembers();\n+      return allMembers.filter(member => member.lockerInfo !== null && member.lockerInfo !== undefined);\n+    } catch (error) {\n+      console.error('라커 배정된 회원 조회 실패:', error);\n+      return [];\n+    }\n+  }\n+\n+  /**\n+   * 라커 ID로 회원 조회\n+   */\n+  async getMemberByLockerId(lockerId: string): Promise<Member | null> {\n+    try {\n+      const allMembers = await this.getAllMembers();\n+      return allMembers.find(member => member.lockerInfo?.lockerId === lockerId) || null;\n+    } catch (error) {\n+      console.error('라커 ID로 회원 조회 실패:', error);\n+      return null;\n+    }\n+  }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1761368450463,
            "name": "Commit-0",
            "content": "/**\n * 회원 관리 서비스\n */\n\nimport { BaseDBManager } from './BaseDBManager';\nimport { Member, DuplicateCheckResult, LoginIdDuplicateCheckResult } from './types';\n\nexport class MemberService extends BaseDBManager {\n\n  /**\n   * 회원 추가\n   */\n  async addMember(memberData: Omit<Member, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    try {\n      console.log('=== addMember 함수 시작 ===');\n      console.log('받은 memberData:', memberData);\n      \n      // 데이터베이스 연결 확인\n      if (!this.db) {\n        console.log('데이터베이스가 연결되지 않음, 초기화 시도...');\n        await this.initDB();\n      }\n      console.log('데이터베이스 연결 상태:', this.db ? '연결됨' : '연결 안됨');\n      \n      const member: Member = {\n        id: this.generateUUID(),\n        ...memberData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      console.log('생성할 회원 객체:', member);\n      console.log('회원 ID:', member.id);\n      \n      console.log('트랜잭션 시작...');\n      await this.executeTransaction('members', 'readwrite', (store) => {\n        console.log('store.add 실행 중...');\n        console.log('추가할 멤버 객체:', member);\n        try {\n          const request = store.add(member);\n          console.log('store.add 요청 생성됨');\n          return request;\n        } catch (storeError) {\n          console.error('❌ store.add에서 즉시 에러:', storeError);\n          throw storeError;\n        }\n      });\n\n      console.log('✅ 회원 추가 성공:', member.id);\n      \n      // 즉시 확인\n      console.log('=== 저장 확인 ===');\n      const savedMember = await this.executeTransaction('members', 'readonly', (store) => \n        store.get(member.id)\n      );\n      \n      if (savedMember) {\n        console.log('✅ 저장된 회원 확인됨:', savedMember);\n      } else {\n        console.error('❌ 방금 저장한 회원을 찾을 수 없음');\n      }\n      \n      return member.id;\n    } catch (error) {\n      console.error('❌ 회원 추가 실패:', error);\n      console.error('에러 상세:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 모든 회원 조회\n   */\n  async getAllMembers(): Promise<Member[]> {\n    try {\n      return await this.executeTransaction('members', 'readonly', (store) => \n        store.getAll()\n      );\n    } catch (error) {\n      console.error('회원 목록 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * ID로 회원 조회\n   */\n  async getMemberById(id: string): Promise<Member | null> {\n    try {\n      return await this.executeTransaction('members', 'readonly', (store) => \n        store.get(id)\n      ) || null;\n    } catch (error) {\n      console.error('회원 조회 실패:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 전화번호로 회원 조회\n   */\n  async getMemberByPhone(phone: string): Promise<Member | null> {\n    try {\n      const result = await this.executeTransaction('members', 'readonly', (store) => {\n        const index = store.index('phone');\n        return index.get(phone);\n      });\n      \n      // 활성 회원만 반환\n      return (result && result.isActive) ? result : null;\n    } catch (error) {\n      console.error('전화번호로 회원 조회 실패:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 지점별 회원 조회\n   */\n  async getMembersByBranch(branchId: string): Promise<Member[]> {\n    try {\n      return await this.executeTransaction('members', 'readonly', (store) => {\n        const index = store.index('branchId');\n        return index.getAll(branchId);\n      });\n    } catch (error) {\n      console.error('지점별 회원 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 회원 정보 수정\n   */\n  async updateMember(id: string, updates: Partial<Omit<Member, 'id' | 'createdAt'>>): Promise<boolean> {\n    try {\n      const existingMember = await this.getMemberById(id);\n      if (!existingMember) {\n        throw new Error('수정할 회원을 찾을 수 없습니다.');\n      }\n\n      const updatedMember: Member = {\n        ...existingMember,\n        ...updates,\n        updatedAt: new Date(),\n      };\n\n      await this.executeTransaction('members', 'readwrite', (store) => \n        store.put(updatedMember)\n      );\n\n      console.log('회원 정보 수정 성공:', id);\n      return true;\n    } catch (error) {\n      console.error('회원 정보 수정 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 회원 삭제 (비활성화)\n   */\n  async deleteMember(id: string): Promise<boolean> {\n    try {\n      await this.updateMember(id, { isActive: false });\n      console.log('회원 삭제(비활성화) 성공:', id);\n      return true;\n    } catch (error) {\n      console.error('회원 삭제 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 회원 검색 (이름, 전화번호, 이메일)\n   */\n  async searchMembers(searchTerm: string): Promise<Member[]> {\n    try {\n      const allMembers = await this.getAllMembers();\n      const lowerSearchTerm = searchTerm.toLowerCase();\n      \n      return allMembers.filter(member => \n        member.name.toLowerCase().includes(lowerSearchTerm) ||\n        member.phone.includes(searchTerm) ||\n        member.email.toLowerCase().includes(lowerSearchTerm)\n      );\n    } catch (error) {\n      console.error('회원 검색 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 이메일로 회원 조회\n   */\n  async getMemberByEmail(email: string): Promise<Member | null> {\n    try {\n      // 이메일이 비어있으면 null 반환\n      if (!email || email.trim() === '') {\n        return null;\n      }\n\n      // 모든 회원을 조회해서 이메일이 일치하는 회원 찾기 (대소문자 구분 없이)\n      const allMembers = await this.getAllMembers();\n      const member = allMembers.find(m => \n        m.email.toLowerCase() === email.toLowerCase() && m.isActive\n      );\n      \n      return member || null;\n    } catch (error) {\n      console.error('이메일로 회원 조회 실패:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 회원 중복 체크 (연락처와 이메일)\n   */\n  async checkMemberDuplicate(phone: string, email?: string): Promise<DuplicateCheckResult> {\n    try {\n      // 전화번호 중복 체크\n      if (phone && phone.trim() !== '') {\n        const existingByPhone = await this.getMemberByPhone(phone);\n        if (existingByPhone) {\n          return {\n            isDuplicate: true,\n            duplicateField: 'phone',\n            message: `연락처 ${phone}는(은) 이미 등록된 회원입니다.`\n          };\n        }\n      }\n\n      // 이메일 중복 체크 (이메일이 있는 경우만)\n      if (email && email.trim() !== '') {\n        const existingByEmail = await this.getMemberByEmail(email);\n        if (existingByEmail) {\n          return {\n            isDuplicate: true,\n            duplicateField: 'email',\n            message: `이메일 ${email}는(은) 이미 등록된 회원입니다.`\n          };\n        }\n      }\n\n      return { isDuplicate: false };\n    } catch (error) {\n      console.error('회원 중복 체크 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 로그인 ID로 회원 조회\n   */\n  async getMemberByLoginId(loginId: string): Promise<Member | null> {\n    try {\n      // 로그인 ID가 비어있으면 null 반환\n      if (!loginId || loginId.trim() === '') {\n        return null;\n      }\n\n      return await this.executeTransaction('members', 'readonly', (store) => {\n        const index = store.index('loginId');\n        return index.get(loginId);\n      }) || null;\n    } catch (error) {\n      console.error('로그인 ID로 회원 조회 실패:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 로그인 ID 중복 체크 (직원과 회원 모두 확인)\n   * StaffService에 대한 참조가 필요하므로 외부에서 주입받는 방식으로 처리\n   */\n  async checkLoginIdDuplicate(\n    loginId: string, \n    getStaffByLoginId: (loginId: string) => Promise<any>\n  ): Promise<LoginIdDuplicateCheckResult> {\n    try {\n      // 로그인 ID가 비어있거나 임시 ID이면 중복 없음\n      if (!loginId || loginId.trim() === '' || loginId.startsWith('temp_')) {\n        return { isDuplicate: false };\n      }\n\n      // 직원 테이블에서 중복 검사\n      const existingStaff = await getStaffByLoginId(loginId);\n      if (existingStaff) {\n        return {\n          isDuplicate: true,\n          duplicateType: 'staff',\n          message: `로그인 ID ${loginId}는(은) 이미 직원으로 등록되어 있습니다.`\n        };\n      }\n\n      // 회원 테이블에서 중복 검사\n      const existingMember = await this.getMemberByLoginId(loginId);\n      if (existingMember && !existingMember.loginId.startsWith('temp_')) {\n        return {\n          isDuplicate: true,\n          duplicateType: 'member',\n          message: `로그인 ID ${loginId}는(은) 이미 회원으로 등록되어 있습니다.`\n        };\n      }\n\n      return { isDuplicate: false };\n    } catch (error) {\n      console.error('로그인 ID 중복 체크 실패:', error);\n      throw error;\n    }\n  }\n}"
        }
    ]
}