{
    "sourceFile": "src/utils/db/BranchService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1761368450254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761376552524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n       ...branchData,\n       id: this.generateUUID(),\n       createdAt: now,\n       updatedAt: now,\n+      lockerPrice: branchData.lockerPrice || 5000, // 기본 라커 가격 5000원\n     };\n \n     try {\n       await this.executeTransaction('branches', 'readwrite', (store) => \n@@ -199,5 +200,46 @@\n       console.error('지점 검색 실패:', error);\n       return [];\n     }\n   }\n+\n+  /**\n+   * 지점별 라커 가격 설정\n+   */\n+  async updateLockerPrice(branchId: string, price: number): Promise<boolean> {\n+    try {\n+      const existing = await this.getBranchById(branchId);\n+      if (!existing) {\n+        throw new Error('존재하지 않는 지점입니다.');\n+      }\n+\n+      const updatedBranch: Branch = {\n+        ...existing,\n+        lockerPrice: price,\n+        updatedAt: new Date(),\n+      };\n+\n+      await this.executeTransaction('branches', 'readwrite', (store) => \n+        store.put(updatedBranch)\n+      );\n+\n+      console.log('지점별 라커 가격 설정 성공:', { branchId, price });\n+      return true;\n+    } catch (error) {\n+      console.error('지점별 라커 가격 설정 실패:', error);\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * 지점별 라커 가격 조회\n+   */\n+  async getLockerPrice(branchId: string): Promise<number> {\n+    try {\n+      const branch = await this.getBranchById(branchId);\n+      return branch?.lockerPrice || 5000; // 기본값 5천원\n+    } catch (error) {\n+      console.error('지점별 라커 가격 조회 실패:', error);\n+      return 5000; // 기본값 반환\n+    }\n+  }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1761368450254,
            "name": "Commit-0",
            "content": "/**\n * 지점 관리 서비스\n */\n\nimport { BaseDBManager } from './BaseDBManager';\nimport { Branch } from './types';\n\nexport class BranchService extends BaseDBManager {\n  \n  /**\n   * 모든 지점 조회\n   */\n  async getAllBranches(): Promise<Branch[]> {\n    try {\n      return await this.executeTransaction('branches', 'readonly', (store) => \n        store.getAll()\n      );\n    } catch (error) {\n      console.error('지점 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * ID로 지점 조회\n   */\n  async getBranchById(id: string): Promise<Branch | null> {\n    try {\n      const result = await this.executeTransaction('branches', 'readonly', (store) => \n        store.get(id)\n      );\n      return result || null;\n    } catch (error) {\n      console.error('지점 조회 실패:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 지점 추가\n   */\n  async addBranch(branchData: Omit<Branch, 'id' | 'createdAt' | 'updatedAt'>): Promise<Branch> {\n    const now = new Date();\n    const newBranch: Branch = {\n      ...branchData,\n      id: this.generateUUID(),\n      createdAt: now,\n      updatedAt: now,\n    };\n\n    try {\n      await this.executeTransaction('branches', 'readwrite', (store) => \n        store.add(newBranch)\n      );\n      console.log('지점 추가 성공:', newBranch);\n      return newBranch;\n    } catch (error) {\n      console.error('지점 추가 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 지점 수정\n   */\n  async updateBranch(id: string, updates: Partial<Omit<Branch, 'id' | 'createdAt'>>): Promise<Branch | null> {\n    try {\n      const existing = await this.getBranchById(id);\n      if (!existing) {\n        throw new Error('존재하지 않는 지점입니다.');\n      }\n\n      const updatedBranch: Branch = {\n        ...existing,\n        ...updates,\n        updatedAt: new Date(),\n      };\n\n      await this.executeTransaction('branches', 'readwrite', (store) => \n        store.put(updatedBranch)\n      );\n\n      console.log('지점 수정 성공:', updatedBranch);\n      return updatedBranch;\n    } catch (error) {\n      console.error('지점 수정 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 지점 삭제\n   */\n  async deleteBranch(id: string): Promise<boolean> {\n    try {\n      await this.executeTransaction('branches', 'readwrite', (store) => \n        store.delete(id)\n      );\n      console.log('지점 삭제 성공:', id);\n      return true;\n    } catch (error) {\n      console.error('지점 삭제 실패:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 활성 지점만 조회\n   */\n  async getActiveBranches(): Promise<Branch[]> {\n    try {\n      return await this.executeTransaction('branches', 'readonly', (store) => {\n        const index = store.index('isActive');\n        return index.getAll(IDBKeyRange.only(true));\n      });\n    } catch (error) {\n      console.error('활성 지점 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 지점명으로 정확히 일치하는 지점 조회 또는 생성 (원자적 처리)\n   * 동시 실행 시 race condition 방지\n   */\n  async getOrCreateBranchByName(name: string, branchData?: Omit<Branch, 'id' | 'createdAt' | 'updatedAt' | 'name'>): Promise<Branch> {\n    if (!this.db) {\n      await this.initDB();\n    }\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['branches'], 'readwrite');\n      const store = transaction.objectStore('branches');\n      const index = store.index('name');\n      \n      // 먼저 기존 지점 확인\n      const getRequest = index.get(name);\n      \n      getRequest.onsuccess = () => {\n        if (getRequest.result) {\n          // 이미 존재함\n          resolve(getRequest.result);\n        } else {\n          // 존재하지 않음, 새로 생성\n          const now = new Date();\n          const newBranch: Branch = {\n            name,\n            address: branchData?.address || '',\n            phone: branchData?.phone || '',\n            isActive: branchData?.isActive ?? true,\n            id: this.generateUUID(),\n            createdAt: now,\n            updatedAt: now,\n          };\n\n          const addRequest = store.add(newBranch);\n          addRequest.onsuccess = () => {\n            console.log('새 지점 생성 완료:', newBranch);\n            resolve(newBranch);\n          };\n          addRequest.onerror = () => {\n            console.error('지점 추가 실패:', addRequest.error);\n            reject(addRequest.error);\n          };\n        }\n      };\n      \n      getRequest.onerror = () => {\n        console.error('지점 조회 실패:', getRequest.error);\n        reject(getRequest.error);\n      };\n    });\n  }\n\n  /**\n   * 지점명으로 정확히 일치하는 지점 조회\n   */\n  async getBranchByName(name: string): Promise<Branch | null> {\n    try {\n      const allBranches = await this.getAllBranches();\n      const branch = allBranches.find(branch => branch.name === name);\n      return branch || null;\n    } catch (error) {\n      console.error('지점명으로 조회 실패:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 지점명으로 검색\n   */\n  async searchBranchesByName(name: string): Promise<Branch[]> {\n    try {\n      const allBranches = await this.getAllBranches();\n      return allBranches.filter(branch => \n        branch.name.toLowerCase().includes(name.toLowerCase())\n      );\n    } catch (error) {\n      console.error('지점 검색 실패:', error);\n      return [];\n    }\n  }\n}"
        }
    ]
}