{
    "sourceFile": "src/utils/db/PaymentService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1761368450509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761371973356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,20 +333,33 @@\n         console.log(`=== 초과금 포인트 적립 시작: ${excessAmount.toLocaleString()}원 ===`);\n         const expiryDate = new Date();\n         expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n \n+        // 상품 정보 준비\n+        const products = orderData.products.map(product => ({\n+          productId: product.id,\n+          productName: product.name,\n+          productPrice: product.price,\n+          // courseId와 courseName은 수강 등록 후 업데이트 예정\n+        }));\n+\n         try {\n           await dependencies.pointService.addPointTransaction({\n             memberId: orderData.memberInfo.id,\n             memberName: orderData.memberInfo.name,\n             amount: excessAmount,\n             transactionType: 'earn',\n             relatedOrderId: orderId,\n+            products: products,\n+            branchId: orderData.memberInfo.branchId,\n+            branchName: orderData.memberInfo.branchName,\n+            staffId: orderData.memberInfo.coach,  // coach가 담당 직원 ID\n+            staffName: orderData.memberInfo.coachName,  // coachName이 담당 직원명\n             earnedDate: new Date(),\n             expiryDate,\n             isExpired: false,\n             source: `${orderData.orderType} 초과금액`,\n-            description: `${orderData.orderType} 초과금액 포인트 적립`\n+            description: `${orderData.orderType} 초과금액 포인트 적립 - 구매 상품: ${orderData.products.map(p => p.name).join(', ')}`\n           });\n           console.log(`포인트 적립 완료: ${excessAmount.toLocaleString()}원`);\n         } catch (pointError) {\n           console.error('포인트 적립 실패:', pointError);\n@@ -356,8 +369,10 @@\n \n       // 5. 수강 등록 생성 (상품별)\n       console.log('=== 수강 등록 생성 시작 ===');\n       let remainingPaid = totalPaid;\n+      const createdCourses = []; // 생성된 수강 정보 저장\n+      \n       for (const product of orderData.products) {\n         console.log(`상품 처리: ${product.name} (${product.price.toLocaleString()}원)`);\n         \n         // 이 상품에 할당될 결제액 계산\n@@ -408,15 +423,34 @@\n \n         try {\n           const courseId = await dependencies.courseService.addCourseEnrollment(courseData);\n           console.log(`✓ 수강 등록 성공: ${courseId}`);\n+          \n+          // 생성된 수강 정보 저장\n+          createdCourses.push({\n+            productId: product.id,\n+            courseId: courseId,\n+            courseName: product.programName\n+          });\n         } catch (courseError) {\n           console.error(`✗ 수강 등록 실패:`, courseError);\n           throw courseError;\n         }\n       }\n       console.log('=== 수강 등록 생성 완료 ===');\n \n+      // 6. 포인트 거래에 수강 정보 업데이트 (초과금 적립이 있었던 경우)\n+      if (excessAmount > 0 && createdCourses.length > 0) {\n+        console.log('=== 포인트 거래에 수강 정보 업데이트 시작 ===');\n+        try {\n+          await dependencies.pointService.updatePointTransactionWithCourseInfo(orderId, createdCourses);\n+          console.log('✓ 포인트 거래 수강 정보 업데이트 완료');\n+        } catch (updateError) {\n+          console.error('✗ 포인트 거래 수강 정보 업데이트 실패:', updateError);\n+          // 실패해도 전체 프로세스는 계속 진행\n+        }\n+      }\n+\n       console.log(`통합 주문 처리 완료: ${orderId}`);\n       return orderId;\n     } catch (error) {\n       console.error('통합 주문 처리 실패:', error);\n"
                },
                {
                    "date": 1761373763846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,8 +342,9 @@\n           // courseId와 courseName은 수강 등록 후 업데이트 예정\n         }));\n \n         try {\n+          // 1. 기본 초과금 포인트 적립\n           await dependencies.pointService.addPointTransaction({\n             memberId: orderData.memberInfo.id,\n             memberName: orderData.memberInfo.name,\n             amount: excessAmount,\n@@ -359,9 +360,39 @@\n             isExpired: false,\n             source: `${orderData.orderType} 초과금액`,\n             description: `${orderData.orderType} 초과금액 포인트 적립 - 구매 상품: ${orderData.products.map(p => p.name).join(', ')}`\n           });\n-          console.log(`포인트 적립 완료: ${excessAmount.toLocaleString()}원`);\n+          console.log(`기본 포인트 적립 완료: ${excessAmount.toLocaleString()}원`);\n+\n+          // 2. 보너스 포인트 계산 및 적립 (100만원 단위로 10%씩 추가)\n+          if (excessAmount >= 1000000) {\n+            const millionUnits = Math.floor(excessAmount / 1000000);\n+            const bonusPoints = millionUnits * 100000; // 100만원당 10만원(10%) 보너스\n+            \n+            console.log(`=== 보너스 포인트 계산 ===`);\n+            console.log(`초과금액: ${excessAmount.toLocaleString()}원`);\n+            console.log(`100만원 단위: ${millionUnits}개`);\n+            console.log(`보너스 포인트: ${bonusPoints.toLocaleString()}원`);\n+\n+            await dependencies.pointService.addPointTransaction({\n+              memberId: orderData.memberInfo.id,\n+              memberName: orderData.memberInfo.name,\n+              amount: bonusPoints,\n+              transactionType: 'earn',\n+              relatedOrderId: orderId,\n+              products: products,\n+              branchId: orderData.memberInfo.branchId,\n+              branchName: orderData.memberInfo.branchName,\n+              staffId: orderData.memberInfo.coach,\n+              staffName: orderData.memberInfo.coachName,\n+              earnedDate: new Date(),\n+              expiryDate,\n+              isExpired: false,\n+              source: '보너스포인트',\n+              description: `${orderData.orderType} 초과금액 보너스 포인트 (${excessAmount.toLocaleString()}원 → ${millionUnits}개 100만원 단위)`\n+            });\n+            console.log(`보너스 포인트 적립 완료: ${bonusPoints.toLocaleString()}원`);\n+          }\n         } catch (pointError) {\n           console.error('포인트 적립 실패:', pointError);\n           throw pointError;\n         }\n"
                },
                {
                    "date": 1761457974535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -417,14 +417,30 @@\n         // 상품 상세 정보 조회 (세션 수와 기간 정보를 위해)\n         const productDetails = await dependencies.productService.getProductById(product.id);\n         console.log('- 상품 상세 정보:', productDetails);\n         \n-        // 종료일 계산 (기간제인 경우)\n+        // 시작일과 종료일 설정\n+        let startDate: Date;\n         let endDate: Date | undefined;\n-        if (product.programType === '기간제' && productDetails?.duration) {\n-          endDate = new Date();\n-          endDate.setMonth(endDate.getMonth() + productDetails.duration);\n-          console.log(`- 기간제 종료일 설정: ${endDate.toISOString()}`);\n+        \n+        if (product.programType === '기간제') {\n+          // 기간제 상품의 경우 사용자가 선택한 시작일/종료일 사용\n+          if (product.startDate && product.endDate) {\n+            startDate = new Date(product.startDate);\n+            endDate = new Date(product.endDate);\n+            console.log(`- 기간제 사용자 선택 기간: ${startDate.toLocaleDateString()} ~ ${endDate.toLocaleDateString()}`);\n+          } else {\n+            // 기본값으로 내일부터 30일\n+            startDate = new Date();\n+            startDate.setDate(startDate.getDate() + 1);\n+            endDate = new Date(startDate);\n+            endDate.setDate(endDate.getDate() + (product.duration || 30));\n+            console.log(`- 기간제 기본 기간: ${startDate.toLocaleDateString()} ~ ${endDate.toLocaleDateString()}`);\n+          }\n+        } else {\n+          // 횟수제나 기타 상품의 경우 당일 시작\n+          startDate = new Date();\n+          console.log(`- 횟수제/기타 시작일: ${startDate.toLocaleDateString()}`);\n         }\n \n         const courseData = {\n           orderId,\n@@ -442,9 +458,9 @@\n           coachName: orderData.memberInfo.coachName,\n           enrollmentStatus: (productUnpaidAmount > 0 ? 'unpaid' : 'active') as 'unpaid' | 'active',\n           paidAmount: productPaidAmount,\n           unpaidAmount: productUnpaidAmount,\n-          startDate: new Date(),\n+          startDate: startDate,\n           endDate: endDate,\n           sessionCount: product.programType === '횟수제' ? productDetails?.sessions : undefined,\n           completedSessions: 0,\n           notes: `${orderData.orderType}을 통한 등록`\n"
                },
                {
                    "date": 1761458536941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -460,9 +460,9 @@\n           paidAmount: productPaidAmount,\n           unpaidAmount: productUnpaidAmount,\n           startDate: startDate,\n           endDate: endDate,\n-          sessionCount: product.programType === '횟수제' ? productDetails?.sessions : undefined,\n+          sessionCount: product.programType === '횟수제' ? (product.sessions || productDetails?.sessions) : undefined,\n           completedSessions: 0,\n           notes: `${orderData.orderType}을 통한 등록`\n         };\n \n"
                },
                {
                    "date": 1761459201930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -403,11 +403,11 @@\n       let remainingPaid = totalPaid;\n       const createdCourses = []; // 생성된 수강 정보 저장\n       \n       for (const product of orderData.products) {\n-        console.log(`상품 처리: ${product.name} (${product.price.toLocaleString()}원)`);\n+        console.log(`상품 처리: ${product.name} (적용가격: ${product.price.toLocaleString()}원, 원가: ${(product.originalPrice || product.price).toLocaleString()}원)`);\n         \n-        // 이 상품에 할당될 결제액 계산\n+        // 이 상품에 할당될 결제액 계산 (적용된 가격 기준)\n         const productPaidAmount = Math.min(remainingPaid, product.price);\n         const productUnpaidAmount = Math.max(0, product.price - productPaidAmount);\n         remainingPaid -= productPaidAmount;\n \n@@ -447,9 +447,10 @@\n           memberId: orderData.memberInfo.id,\n           memberName: orderData.memberInfo.name,\n           productId: product.id,\n           productName: product.name,\n-          productPrice: product.price,\n+          productPrice: product.originalPrice || product.price, // 계산된 정확한 상품 가격\n+          appliedPrice: product.price, // 사용자가 조정한 적용 가격\n           programId: product.programId,\n           programName: product.programName,\n           programType: product.programType,\n           branchId: orderData.memberInfo.branchId,\n"
                },
                {
                    "date": 1761459341660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -448,9 +448,9 @@\n           memberName: orderData.memberInfo.name,\n           productId: product.id,\n           productName: product.name,\n           productPrice: product.originalPrice || product.price, // 계산된 정확한 상품 가격\n-          appliedPrice: product.price, // 사용자가 조정한 적용 가격\n+          appliedPrice: product.price, // 사용자가 조정한 적용 가격 (required)\n           programId: product.programId,\n           programName: product.programName,\n           programType: product.programType,\n           branchId: orderData.memberInfo.branchId,\n"
                }
            ],
            "date": 1761368450509,
            "name": "Commit-0",
            "content": "/**\n * 결제 관리 서비스\n */\n\nimport { BaseDBManager } from './BaseDBManager';\nimport { Payment, Order, OrderProcessingData } from './types';\n\nexport class PaymentService extends BaseDBManager {\n\n  /**\n   * 결제 정보 추가\n   */\n  async addPayment(paymentData: Omit<Payment, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    try {\n      const payment: Payment = {\n        id: this.generateUUID(),\n        ...paymentData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      await this.executeTransaction('payments', 'readwrite', (store) => \n        store.add(payment)\n      );\n\n      console.log('결제 정보 추가 성공:', payment.id);\n      return payment.id;\n    } catch (error) {\n      console.error('결제 정보 추가 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 모든 결제 정보 조회\n   */\n  async getAllPayments(): Promise<Payment[]> {\n    try {\n      return await this.executeTransaction('payments', 'readonly', (store) => \n        store.getAll()\n      );\n    } catch (error) {\n      console.error('결제 목록 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * ID로 결제 정보 조회\n   */\n  async getPaymentById(id: string): Promise<Payment | null> {\n    try {\n      return await this.executeTransaction('payments', 'readonly', (store) => \n        store.get(id)\n      ) || null;\n    } catch (error) {\n      console.error('결제 정보 조회 실패:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 회원별 결제 정보 조회\n   */\n  async getPaymentsByMember(memberId: string): Promise<Payment[]> {\n    try {\n      return await this.executeTransaction('payments', 'readonly', (store) => {\n        const index = store.index('memberId');\n        return index.getAll(memberId);\n      });\n    } catch (error) {\n      console.error('회원별 결제 정보 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 결제 정보 수정\n   */\n  async updatePayment(id: string, updates: Partial<Omit<Payment, 'id' | 'createdAt'>>): Promise<boolean> {\n    try {\n      const existingPayment = await this.getPaymentById(id);\n      if (!existingPayment) {\n        throw new Error('수정할 결제 정보를 찾을 수 없습니다.');\n      }\n\n      const updatedPayment: Payment = {\n        ...existingPayment,\n        ...updates,\n        updatedAt: new Date(),\n      };\n\n      await this.executeTransaction('payments', 'readwrite', (store) => \n        store.put(updatedPayment)\n      );\n\n      console.log('결제 정보 수정 성공:', id);\n      return true;\n    } catch (error) {\n      console.error('결제 정보 수정 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 결제 정보 삭제\n   */\n  async deletePayment(id: string): Promise<boolean> {\n    try {\n      await this.executeTransaction('payments', 'readwrite', (store) => \n        store.delete(id)\n      );\n\n      console.log('결제 정보 삭제 성공:', id);\n      return true;\n    } catch (error) {\n      console.error('결제 정보 삭제 실패:', error);\n      throw error;\n    }\n  }\n}\n\nexport class OrderService extends BaseDBManager {\n\n  /**\n   * 주문 생성\n   */\n  async createOrder(orderData: Omit<Order, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    try {\n      const order: Order = {\n        id: this.generateUUID(),\n        ...orderData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      await this.executeTransaction('orders', 'readwrite', (store) => \n        store.add(order)\n      );\n\n      console.log('주문 생성 성공:', order.id);\n      return order.id;\n    } catch (error) {\n      console.error('주문 생성 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 주문 조회\n   */\n  async getOrderById(id: string): Promise<Order | null> {\n    try {\n      return await this.executeTransaction('orders', 'readonly', (store) => \n        store.get(id)\n      ) || null;\n    } catch (error) {\n      console.error('주문 조회 실패:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 회원별 주문 조회\n   */\n  async getOrdersByMember(memberId: string): Promise<Order[]> {\n    try {\n      return await this.executeTransaction('orders', 'readonly', (store) => {\n        const index = store.index('memberId');\n        return index.getAll(memberId);\n      });\n    } catch (error) {\n      console.error('회원별 주문 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 주문 상태 업데이트\n   */\n  async updateOrderStatus(orderId: string): Promise<void> {\n    try {\n      const order = await this.getOrderById(orderId);\n      if (!order) throw new Error('주문을 찾을 수 없습니다.');\n\n      let newStatus: Order['orderStatus'];\n      if (order.unpaidAmount <= 0) {\n        newStatus = 'completed';\n      } else if (order.paidAmount > 0) {\n        newStatus = 'partially_paid';\n      } else {\n        newStatus = 'pending';\n      }\n\n      await this.updateOrder(orderId, { orderStatus: newStatus });\n    } catch (error) {\n      console.error('주문 상태 업데이트 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 주문 수정\n   */\n  async updateOrder(id: string, updates: Partial<Omit<Order, 'id' | 'createdAt'>>): Promise<boolean> {\n    try {\n      const existingOrder = await this.getOrderById(id);\n      if (!existingOrder) {\n        throw new Error('수정할 주문을 찾을 수 없습니다.');\n      }\n\n      const updatedOrder: Order = {\n        ...existingOrder,\n        ...updates,\n        updatedAt: new Date(),\n      };\n\n      await this.executeTransaction('orders', 'readwrite', (store) => \n        store.put(updatedOrder)\n      );\n\n      console.log('주문 수정 성공:', id);\n      return true;\n    } catch (error) {\n      console.error('주문 수정 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 회원가입/수강등록 통합 주문 처리\n   * 이 메서드는 다른 서비스들과의 협력이 필요하므로 외부에서 의존성을 주입받습니다.\n   */\n  async processOrderWithPayments(\n    orderData: OrderProcessingData,\n    dependencies: {\n      productService: { getProductById: (id: string) => Promise<any> },\n      paymentService: PaymentService,\n      pointService: any, // PointService\n      courseService: any  // CourseService\n    }\n  ): Promise<string> {\n    try {\n      const totalAmount = orderData.products.reduce((sum, p) => sum + p.price, 0);\n      const totalPaid = orderData.payments.cash + orderData.payments.card + \n                       orderData.payments.transfer + orderData.payments.points;\n      const unpaidAmount = Math.max(0, totalAmount - totalPaid);\n      const excessAmount = Math.max(0, totalPaid - totalAmount);\n\n      console.log('=== processOrderWithPayments 계산 ===');\n      console.log(`총 주문금액: ${totalAmount.toLocaleString()}원`);\n      console.log(`총 결제금액: ${totalPaid.toLocaleString()}원`);\n      console.log(`미수금액: ${unpaidAmount.toLocaleString()}원`);\n      console.log(`초과금액: ${excessAmount.toLocaleString()}원`);\n\n      // 1. 주문 생성\n      const orderId = await this.createOrder({\n        memberId: orderData.memberInfo.id,\n        memberName: orderData.memberInfo.name,\n        branchId: orderData.memberInfo.branchId,\n        branchName: orderData.memberInfo.branchName,\n        coach: orderData.memberInfo.coach,\n        coachName: orderData.memberInfo.coachName,\n        orderItems: orderData.products.map(p => ({\n          productId: p.id,\n          productName: p.name,\n          programId: p.programId,\n          programName: p.programName,\n          programType: p.programType,\n          price: p.price,\n          quantity: 1\n        })),\n        totalAmount,\n        paidAmount: totalPaid,\n        unpaidAmount,\n        pointsUsed: orderData.payments.points,\n        pointsEarned: excessAmount,\n        orderStatus: unpaidAmount > 0 ? 'partially_paid' : 'completed',\n        orderType: orderData.orderType\n      });\n\n      // 2. 개별 결제 기록 생성\n      const paymentMethods = [\n        { method: 'cash', amount: orderData.payments.cash },\n        { method: 'card', amount: orderData.payments.card },\n        { method: 'transfer', amount: orderData.payments.transfer }\n      ];\n\n      for (const payment of paymentMethods) {\n        if (payment.amount > 0) {\n          await dependencies.paymentService.addPayment({\n            orderId,\n            memberId: orderData.memberInfo.id,\n            memberName: orderData.memberInfo.name,\n            branchId: orderData.memberInfo.branchId,\n            branchName: orderData.memberInfo.branchName,\n            coach: orderData.memberInfo.coach,\n            coachName: orderData.memberInfo.coachName,\n            products: orderData.products.map(p => ({\n              id: p.id,\n              name: p.name,\n              price: p.price,\n              quantity: 1,\n              programId: p.programId,\n              programName: p.programName,\n              programType: p.programType\n            })),\n            totalAmount: payment.amount,\n            paidAmount: payment.amount,\n            unpaidAmount: 0,\n            paymentStatus: 'completed',\n            paymentMethod: payment.method,\n            paymentDate: new Date(),\n            paymentType: 'course',\n            amount: payment.amount,\n            memo: `${orderData.orderType} - ${payment.method} 결제`\n          });\n        }\n      }\n\n      // 3. 포인트 사용 처리\n      if (orderData.payments.points > 0) {\n        await dependencies.pointService.usePointsFIFO(\n          orderData.memberInfo.id,\n          orderData.payments.points,\n          orderId,\n          `${orderData.orderType} 포인트 결제`\n        );\n      }\n\n      // 4. 초과금 포인트 적립\n      if (excessAmount > 0) {\n        console.log(`=== 초과금 포인트 적립 시작: ${excessAmount.toLocaleString()}원 ===`);\n        const expiryDate = new Date();\n        expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n\n        try {\n          await dependencies.pointService.addPointTransaction({\n            memberId: orderData.memberInfo.id,\n            memberName: orderData.memberInfo.name,\n            amount: excessAmount,\n            transactionType: 'earn',\n            relatedOrderId: orderId,\n            earnedDate: new Date(),\n            expiryDate,\n            isExpired: false,\n            source: `${orderData.orderType} 초과금액`,\n            description: `${orderData.orderType} 초과금액 포인트 적립`\n          });\n          console.log(`포인트 적립 완료: ${excessAmount.toLocaleString()}원`);\n        } catch (pointError) {\n          console.error('포인트 적립 실패:', pointError);\n          throw pointError;\n        }\n      }\n\n      // 5. 수강 등록 생성 (상품별)\n      console.log('=== 수강 등록 생성 시작 ===');\n      let remainingPaid = totalPaid;\n      for (const product of orderData.products) {\n        console.log(`상품 처리: ${product.name} (${product.price.toLocaleString()}원)`);\n        \n        // 이 상품에 할당될 결제액 계산\n        const productPaidAmount = Math.min(remainingPaid, product.price);\n        const productUnpaidAmount = Math.max(0, product.price - productPaidAmount);\n        remainingPaid -= productPaidAmount;\n\n        console.log(`- 상품별 결제액: ${productPaidAmount.toLocaleString()}원`);\n        console.log(`- 상품별 미수액: ${productUnpaidAmount.toLocaleString()}원`);\n\n        // 상품 상세 정보 조회 (세션 수와 기간 정보를 위해)\n        const productDetails = await dependencies.productService.getProductById(product.id);\n        console.log('- 상품 상세 정보:', productDetails);\n        \n        // 종료일 계산 (기간제인 경우)\n        let endDate: Date | undefined;\n        if (product.programType === '기간제' && productDetails?.duration) {\n          endDate = new Date();\n          endDate.setMonth(endDate.getMonth() + productDetails.duration);\n          console.log(`- 기간제 종료일 설정: ${endDate.toISOString()}`);\n        }\n\n        const courseData = {\n          orderId,\n          memberId: orderData.memberInfo.id,\n          memberName: orderData.memberInfo.name,\n          productId: product.id,\n          productName: product.name,\n          productPrice: product.price,\n          programId: product.programId,\n          programName: product.programName,\n          programType: product.programType,\n          branchId: orderData.memberInfo.branchId,\n          branchName: orderData.memberInfo.branchName,\n          coach: orderData.memberInfo.coach,\n          coachName: orderData.memberInfo.coachName,\n          enrollmentStatus: (productUnpaidAmount > 0 ? 'unpaid' : 'active') as 'unpaid' | 'active',\n          paidAmount: productPaidAmount,\n          unpaidAmount: productUnpaidAmount,\n          startDate: new Date(),\n          endDate: endDate,\n          sessionCount: product.programType === '횟수제' ? productDetails?.sessions : undefined,\n          completedSessions: 0,\n          notes: `${orderData.orderType}을 통한 등록`\n        };\n\n        console.log('- 수강 등록 데이터:', courseData);\n\n        try {\n          const courseId = await dependencies.courseService.addCourseEnrollment(courseData);\n          console.log(`✓ 수강 등록 성공: ${courseId}`);\n        } catch (courseError) {\n          console.error(`✗ 수강 등록 실패:`, courseError);\n          throw courseError;\n        }\n      }\n      console.log('=== 수강 등록 생성 완료 ===');\n\n      console.log(`통합 주문 처리 완료: ${orderId}`);\n      return orderId;\n    } catch (error) {\n      console.error('통합 주문 처리 실패:', error);\n      throw error;\n    }\n  }\n}"
        }
    ]
}