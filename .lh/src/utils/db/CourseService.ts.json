{
    "sourceFile": "src/utils/db/CourseService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1761368450654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761459341713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,471 @@\n+/**\n+ * 수강정보 관리 서비스\n+ */\n+\n+import { BaseDBManager } from './BaseDBManager';\n+import { CourseEnrollment, UnpaidMetaInfo } from './types';\n+\n+export class CourseService extends BaseDBManager {\n+\n+  /**\n+   * 수강정보 추가\n+   */\n+  async addCourseEnrollment(enrollmentData: Omit<CourseEnrollment, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {\n+    try {\n+      const enrollment: CourseEnrollment = {\n+        id: this.generateUUID(),\n+        ...enrollmentData,\n+        createdAt: new Date(),\n+        updatedAt: new Date(),\n+      };\n+\n+      await this.executeTransaction('courseEnrollments', 'readwrite', (store) => \n+        store.add(enrollment)\n+      );\n+\n+      console.log('수강정보 추가 성공:', enrollment.id);\n+      return enrollment.id;\n+    } catch (error) {\n+      console.error('수강정보 추가 실패:', error);\n+      throw error;\n+    }\n+  }\n+\n+  /**\n+   * 모든 수강정보 조회\n+   */\n+  async getAllCourseEnrollments(): Promise<CourseEnrollment[]> {\n+    try {\n+      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => \n+        store.getAll()\n+      );\n+    } catch (error) {\n+      console.error('수강정보 목록 조회 실패:', error);\n+      return [];\n+    }\n+  }\n+\n+  /**\n+   * ID로 수강정보 조회\n+   */\n+  async getCourseEnrollmentById(id: string): Promise<CourseEnrollment | null> {\n+    try {\n+      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => \n+        store.get(id)\n+      ) || null;\n+    } catch (error) {\n+      console.error('수강정보 조회 실패:', error);\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * 회원별 수강정보 조회\n+   */\n+  async getCourseEnrollmentsByMember(memberId: string): Promise<CourseEnrollment[]> {\n+    try {\n+      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n+        const index = store.index('memberId');\n+        return index.getAll(memberId);\n+      });\n+    } catch (error) {\n+      console.error('회원별 수강정보 조회 실패:', error);\n+      return [];\n+    }\n+  }\n+\n+  /**\n+   * 지점별 수강정보 조회\n+   */\n+  async getCourseEnrollmentsByBranch(branchId: string): Promise<CourseEnrollment[]> {\n+    try {\n+      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n+        const index = store.index('branchId');\n+        return index.getAll(branchId);\n+      });\n+    } catch (error) {\n+      console.error('지점별 수강정보 조회 실패:', error);\n+      return [];\n+    }\n+  }\n+\n+  /**\n+   * 코치별 수강정보 조회\n+   */\n+  async getCourseEnrollmentsByCoach(coachId: string): Promise<CourseEnrollment[]> {\n+    try {\n+      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n+        const index = store.index('coach');\n+        return index.getAll(coachId);\n+      });\n+    } catch (error) {\n+      console.error('코치별 수강정보 조회 실패:', error);\n+      return [];\n+    }\n+  }\n+\n+  /**\n+   * 수강상태별 수강정보 조회\n+   */\n+  async getCourseEnrollmentsByStatus(status: 'completed' | 'unpaid'): Promise<CourseEnrollment[]> {\n+    try {\n+      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n+        const index = store.index('enrollmentStatus');\n+        return index.getAll(status);\n+      });\n+    } catch (error) {\n+      console.error('상태별 수강정보 조회 실패:', error);\n+      return [];\n+    }\n+  }\n+\n+  /**\n+   * 프로그램별 수강정보 조회\n+   */\n+  async getCourseEnrollmentsByProgram(programId: string): Promise<CourseEnrollment[]> {\n+    try {\n+      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n+        const index = store.index('programId');\n+        return index.getAll(programId);\n+      });\n+    } catch (error) {\n+      console.error('프로그램별 수강정보 조회 실패:', error);\n+      return [];\n+    }\n+  }\n+\n+  /**\n+   * 미수 수강정보 조회 (회원별)\n+   */\n+  async getUnpaidCourseEnrollmentsByMember(memberId: string): Promise<CourseEnrollment[]> {\n+    try {\n+      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n+        const index = store.index('memberStatus');\n+        return index.getAll([memberId, 'unpaid']);\n+      });\n+    } catch (error) {\n+      console.error('회원별 미수 수강정보 조회 실패:', error);\n+      return [];\n+    }\n+  }\n+\n+  /**\n+   * 수강정보 수정\n+   */\n+  async updateCourseEnrollment(id: string, updates: Partial<Omit<CourseEnrollment, 'id' | 'createdAt'>>): Promise<boolean> {\n+    try {\n+      const existingEnrollment = await this.getCourseEnrollmentById(id);\n+      if (!existingEnrollment) {\n+        throw new Error('수정할 수강정보를 찾을 수 없습니다.');\n+      }\n+\n+      const updatedEnrollment: CourseEnrollment = {\n+        ...existingEnrollment,\n+        ...updates,\n+        updatedAt: new Date(),\n+      };\n+\n+      await this.executeTransaction('courseEnrollments', 'readwrite', (store) => \n+        store.put(updatedEnrollment)\n+      );\n+\n+      console.log('수강정보 수정 성공:', id);\n+      return true;\n+    } catch (error) {\n+      console.error('수강정보 수정 실패:', error);\n+      throw error;\n+    }\n+  }\n+\n+  /**\n+   * 수강정보 삭제\n+   */\n+  async deleteCourseEnrollment(id: string): Promise<boolean> {\n+    try {\n+      await this.executeTransaction('courseEnrollments', 'readwrite', (store) => \n+        store.delete(id)\n+      );\n+\n+      console.log('수강정보 삭제 성공:', id);\n+      return true;\n+    } catch (error) {\n+      console.error('수강정보 삭제 실패:', error);\n+      throw error;\n+    }\n+  }\n+\n+  /**\n+   * 수강정보 검색 (회원명, 상품명, 프로그램명으로 검색)\n+   */\n+  async searchCourseEnrollments(searchTerm: string): Promise<CourseEnrollment[]> {\n+    try {\n+      const allEnrollments = await this.getAllCourseEnrollments();\n+      const lowerSearchTerm = searchTerm.toLowerCase();\n+      \n+      return allEnrollments.filter(enrollment => \n+        enrollment.memberName.toLowerCase().includes(lowerSearchTerm) ||\n+        enrollment.productName.toLowerCase().includes(lowerSearchTerm) ||\n+        enrollment.programName.toLowerCase().includes(lowerSearchTerm) ||\n+        enrollment.branchName.toLowerCase().includes(lowerSearchTerm) ||\n+        enrollment.coachName.toLowerCase().includes(lowerSearchTerm)\n+      );\n+    } catch (error) {\n+      console.error('수강정보 검색 실패:', error);\n+      return [];\n+    }\n+  }\n+\n+  /**\n+   * 회원의 미수 총액 계산\n+   */\n+  async getMemberUnpaidTotal(memberId: string): Promise<number> {\n+    try {\n+      const unpaidEnrollments = await this.getUnpaidCourseEnrollmentsByMember(memberId);\n+      return unpaidEnrollments.reduce((total, enrollment) => total + enrollment.unpaidAmount, 0);\n+    } catch (error) {\n+      console.error('회원 미수 총액 계산 실패:', error);\n+      return 0;\n+    }\n+  }\n+\n+  /**\n+   * 수강정보 일괄 추가 (회원가입 시 사용)\n+   */\n+  async addMultipleCourseEnrollments(enrollmentsData: Omit<CourseEnrollment, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<string[]> {\n+    try {\n+      const enrollmentIds: string[] = [];\n+\n+      for (const enrollmentData of enrollmentsData) {\n+        const enrollmentId = await this.addCourseEnrollment(enrollmentData);\n+        enrollmentIds.push(enrollmentId);\n+      }\n+\n+      console.log('수강정보 일괄 추가 성공:', enrollmentIds.length, '건');\n+      return enrollmentIds;\n+    } catch (error) {\n+      console.error('수강정보 일괄 추가 실패:', error);\n+      throw error;\n+    }\n+  }\n+\n+  /**\n+   * 전체 미수 메타정보 조회 (미수 회원 수와 총 미수 금액)\n+   */\n+  async getUnpaidMetaInfo(): Promise<UnpaidMetaInfo> {\n+    try {\n+      const unpaidEnrollments = await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n+        const index = store.index('enrollmentStatus');\n+        return index.getAll('unpaid');\n+      });\n+      \n+      // 미수 회원 ID 중복 제거\n+      const uniqueUnpaidMembers = new Set(unpaidEnrollments.map((e: CourseEnrollment) => e.memberId));\n+      const unpaidMemberCount = uniqueUnpaidMembers.size;\n+      \n+      // 총 미수 금액 계산\n+      const totalUnpaidAmount = unpaidEnrollments.reduce((total: number, enrollment: CourseEnrollment) => total + enrollment.unpaidAmount, 0);\n+      \n+      return {\n+        unpaidMemberCount,\n+        totalUnpaidAmount\n+      };\n+    } catch (error) {\n+      console.error('전체 미수 메타정보 조회 실패:', error);\n+      return {\n+        unpaidMemberCount: 0,\n+        totalUnpaidAmount: 0\n+      };\n+    }\n+  }\n+\n+  /**\n+   * 활성 수강정보 조회 (active 상태만)\n+   */\n+  async getActiveCourseEnrollments(): Promise<CourseEnrollment[]> {\n+    try {\n+      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n+        const index = store.index('enrollmentStatus');\n+        return index.getAll('active');\n+      });\n+    } catch (error) {\n+      console.error('활성 수강정보 조회 실패:', error);\n+      return [];\n+    }\n+  }\n+\n+  /**\n+   * 완료된 수강정보 조회 (completed 상태만)\n+   */\n+  async getCompletedCourseEnrollments(): Promise<CourseEnrollment[]> {\n+    try {\n+      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n+        const index = store.index('enrollmentStatus');\n+        return index.getAll('completed');\n+      });\n+    } catch (error) {\n+      console.error('완료된 수강정보 조회 실패:', error);\n+      return [];\n+    }\n+  }\n+\n+  /**\n+   * 수강 세션 완료 처리 (횟수제 프로그램용)\n+   */\n+  async completeSession(enrollmentId: string): Promise<boolean> {\n+    try {\n+      const enrollment = await this.getCourseEnrollmentById(enrollmentId);\n+      if (!enrollment) {\n+        throw new Error('수강정보를 찾을 수 없습니다.');\n+      }\n+\n+      if (enrollment.programType !== '횟수제') {\n+        throw new Error('횟수제 프로그램만 세션 완료 처리가 가능합니다.');\n+      }\n+\n+      const completedSessions = (enrollment.completedSessions || 0) + 1;\n+      const sessionCount = enrollment.sessionCount || 0;\n+\n+      // 모든 세션이 완료되었는지 확인\n+      const enrollmentStatus = completedSessions >= sessionCount ? 'completed' : enrollment.enrollmentStatus;\n+\n+      return await this.updateCourseEnrollment(enrollmentId, {\n+        completedSessions,\n+        enrollmentStatus\n+      });\n+    } catch (error) {\n+      console.error('세션 완료 처리 실패:', error);\n+      throw error;\n+    }\n+  }\n+\n+  /**\n+   * 기간제 수강 만료 처리\n+   */\n+  async checkAndUpdateExpiredEnrollments(): Promise<number> {\n+    try {\n+      const now = new Date();\n+      const allEnrollments = await this.getAllCourseEnrollments();\n+      \n+      // 기간제 프로그램 중 종료일이 지났지만 아직 완료 처리되지 않은 것들\n+      const expiredEnrollments = allEnrollments.filter(enrollment =>\n+        enrollment.programType === '기간제' &&\n+        enrollment.endDate &&\n+        enrollment.endDate <= now &&\n+        enrollment.enrollmentStatus === 'active'\n+      );\n+\n+      let updatedCount = 0;\n+      for (const enrollment of expiredEnrollments) {\n+        await this.updateCourseEnrollment(enrollment.id, {\n+          enrollmentStatus: 'completed'\n+        });\n+        updatedCount++;\n+      }\n+\n+      if (updatedCount > 0) {\n+        console.log(`${updatedCount}건의 만료된 수강정보를 완료 처리했습니다.`);\n+      }\n+\n+      return updatedCount;\n+    } catch (error) {\n+      console.error('만료된 수강정보 처리 실패:', error);\n+      return 0;\n+    }\n+  }\n+\n+  /**\n+   * 지점별 프로그램별 수강현황 통계\n+   */\n+  async getCourseStatsByBranchAndProgram(branchId: string, programId: string): Promise<{\n+    total: number;\n+    active: number;\n+    completed: number;\n+    suspended: number;\n+    cancelled: number;\n+    unpaid: number;\n+  }> {\n+    try {\n+      const enrollments = await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n+        const index = store.index('branchProgram');\n+        return index.getAll([branchId, programId]);\n+      });\n+\n+      const stats = {\n+        total: enrollments.length,\n+        active: 0,\n+        completed: 0,\n+        suspended: 0,\n+        cancelled: 0,\n+        unpaid: 0\n+      };\n+\n+      for (const enrollment of enrollments) {\n+        switch (enrollment.enrollmentStatus) {\n+          case 'active':\n+            stats.active++;\n+            break;\n+          case 'completed':\n+            stats.completed++;\n+            break;\n+          case 'suspended':\n+            stats.suspended++;\n+            break;\n+          case 'cancelled':\n+            stats.cancelled++;\n+            break;\n+          case 'unpaid':\n+            stats.unpaid++;\n+            break;\n+        }\n+      }\n+\n+      return stats;\n+    } catch (error) {\n+      console.error('수강현황 통계 조회 실패:', error);\n+      return {\n+        total: 0,\n+        active: 0,\n+        completed: 0,\n+        suspended: 0,\n+        cancelled: 0,\n+        unpaid: 0\n+      };\n+    }\n+  }\n+\n+  /**\n+   * appliedPrice 필드 마이그레이션\n+   * 기존 데이터에 appliedPrice 필드가 없는 경우 paidAmount 값으로 설정\n+   */\n+  async migrateAppliedPriceField(): Promise<void> {\n+    try {\n+      console.log('CourseEnrollment appliedPrice 필드 마이그레이션 시작...');\n+      \n+      const enrollments = await this.getAllCourseEnrollments();\n+      let migratedCount = 0;\n+      \n+      for (const enrollment of enrollments) {\n+        if (enrollment.appliedPrice === undefined) {\n+          // appliedPrice가 없는 경우 paidAmount + unpaidAmount로 설정\n+          const appliedPrice = enrollment.paidAmount + (enrollment.unpaidAmount || 0);\n+          \n+          const updatedEnrollment = {\n+            ...enrollment,\n+            appliedPrice: appliedPrice,\n+            updatedAt: new Date()\n+          };\n+          \n+          await this.executeTransaction('courseEnrollments', 'readwrite', (store) =>\n+            store.put(updatedEnrollment)\n+          );\n+          \n+          migratedCount++;\n+        }\n+      }\n+      \n+      console.log(`CourseEnrollment appliedPrice 필드 마이그레이션 완료: ${migratedCount}건 업데이트`);\n+    } catch (error) {\n+      console.error('CourseEnrollment appliedPrice 필드 마이그레이션 실패:', error);\n+    }\n+  }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1761368450654,
            "name": "Commit-0",
            "content": "/**\n * 수강정보 관리 서비스\n */\n\nimport { BaseDBManager } from './BaseDBManager';\nimport { CourseEnrollment, UnpaidMetaInfo } from './types';\n\nexport class CourseService extends BaseDBManager {\n\n  /**\n   * 수강정보 추가\n   */\n  async addCourseEnrollment(enrollmentData: Omit<CourseEnrollment, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    try {\n      const enrollment: CourseEnrollment = {\n        id: this.generateUUID(),\n        ...enrollmentData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      await this.executeTransaction('courseEnrollments', 'readwrite', (store) => \n        store.add(enrollment)\n      );\n\n      console.log('수강정보 추가 성공:', enrollment.id);\n      return enrollment.id;\n    } catch (error) {\n      console.error('수강정보 추가 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 모든 수강정보 조회\n   */\n  async getAllCourseEnrollments(): Promise<CourseEnrollment[]> {\n    try {\n      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => \n        store.getAll()\n      );\n    } catch (error) {\n      console.error('수강정보 목록 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * ID로 수강정보 조회\n   */\n  async getCourseEnrollmentById(id: string): Promise<CourseEnrollment | null> {\n    try {\n      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => \n        store.get(id)\n      ) || null;\n    } catch (error) {\n      console.error('수강정보 조회 실패:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 회원별 수강정보 조회\n   */\n  async getCourseEnrollmentsByMember(memberId: string): Promise<CourseEnrollment[]> {\n    try {\n      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n        const index = store.index('memberId');\n        return index.getAll(memberId);\n      });\n    } catch (error) {\n      console.error('회원별 수강정보 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 지점별 수강정보 조회\n   */\n  async getCourseEnrollmentsByBranch(branchId: string): Promise<CourseEnrollment[]> {\n    try {\n      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n        const index = store.index('branchId');\n        return index.getAll(branchId);\n      });\n    } catch (error) {\n      console.error('지점별 수강정보 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 코치별 수강정보 조회\n   */\n  async getCourseEnrollmentsByCoach(coachId: string): Promise<CourseEnrollment[]> {\n    try {\n      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n        const index = store.index('coach');\n        return index.getAll(coachId);\n      });\n    } catch (error) {\n      console.error('코치별 수강정보 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 수강상태별 수강정보 조회\n   */\n  async getCourseEnrollmentsByStatus(status: 'completed' | 'unpaid'): Promise<CourseEnrollment[]> {\n    try {\n      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n        const index = store.index('enrollmentStatus');\n        return index.getAll(status);\n      });\n    } catch (error) {\n      console.error('상태별 수강정보 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 프로그램별 수강정보 조회\n   */\n  async getCourseEnrollmentsByProgram(programId: string): Promise<CourseEnrollment[]> {\n    try {\n      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n        const index = store.index('programId');\n        return index.getAll(programId);\n      });\n    } catch (error) {\n      console.error('프로그램별 수강정보 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 미수 수강정보 조회 (회원별)\n   */\n  async getUnpaidCourseEnrollmentsByMember(memberId: string): Promise<CourseEnrollment[]> {\n    try {\n      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n        const index = store.index('memberStatus');\n        return index.getAll([memberId, 'unpaid']);\n      });\n    } catch (error) {\n      console.error('회원별 미수 수강정보 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 수강정보 수정\n   */\n  async updateCourseEnrollment(id: string, updates: Partial<Omit<CourseEnrollment, 'id' | 'createdAt'>>): Promise<boolean> {\n    try {\n      const existingEnrollment = await this.getCourseEnrollmentById(id);\n      if (!existingEnrollment) {\n        throw new Error('수정할 수강정보를 찾을 수 없습니다.');\n      }\n\n      const updatedEnrollment: CourseEnrollment = {\n        ...existingEnrollment,\n        ...updates,\n        updatedAt: new Date(),\n      };\n\n      await this.executeTransaction('courseEnrollments', 'readwrite', (store) => \n        store.put(updatedEnrollment)\n      );\n\n      console.log('수강정보 수정 성공:', id);\n      return true;\n    } catch (error) {\n      console.error('수강정보 수정 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 수강정보 삭제\n   */\n  async deleteCourseEnrollment(id: string): Promise<boolean> {\n    try {\n      await this.executeTransaction('courseEnrollments', 'readwrite', (store) => \n        store.delete(id)\n      );\n\n      console.log('수강정보 삭제 성공:', id);\n      return true;\n    } catch (error) {\n      console.error('수강정보 삭제 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 수강정보 검색 (회원명, 상품명, 프로그램명으로 검색)\n   */\n  async searchCourseEnrollments(searchTerm: string): Promise<CourseEnrollment[]> {\n    try {\n      const allEnrollments = await this.getAllCourseEnrollments();\n      const lowerSearchTerm = searchTerm.toLowerCase();\n      \n      return allEnrollments.filter(enrollment => \n        enrollment.memberName.toLowerCase().includes(lowerSearchTerm) ||\n        enrollment.productName.toLowerCase().includes(lowerSearchTerm) ||\n        enrollment.programName.toLowerCase().includes(lowerSearchTerm) ||\n        enrollment.branchName.toLowerCase().includes(lowerSearchTerm) ||\n        enrollment.coachName.toLowerCase().includes(lowerSearchTerm)\n      );\n    } catch (error) {\n      console.error('수강정보 검색 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 회원의 미수 총액 계산\n   */\n  async getMemberUnpaidTotal(memberId: string): Promise<number> {\n    try {\n      const unpaidEnrollments = await this.getUnpaidCourseEnrollmentsByMember(memberId);\n      return unpaidEnrollments.reduce((total, enrollment) => total + enrollment.unpaidAmount, 0);\n    } catch (error) {\n      console.error('회원 미수 총액 계산 실패:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * 수강정보 일괄 추가 (회원가입 시 사용)\n   */\n  async addMultipleCourseEnrollments(enrollmentsData: Omit<CourseEnrollment, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<string[]> {\n    try {\n      const enrollmentIds: string[] = [];\n\n      for (const enrollmentData of enrollmentsData) {\n        const enrollmentId = await this.addCourseEnrollment(enrollmentData);\n        enrollmentIds.push(enrollmentId);\n      }\n\n      console.log('수강정보 일괄 추가 성공:', enrollmentIds.length, '건');\n      return enrollmentIds;\n    } catch (error) {\n      console.error('수강정보 일괄 추가 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 전체 미수 메타정보 조회 (미수 회원 수와 총 미수 금액)\n   */\n  async getUnpaidMetaInfo(): Promise<UnpaidMetaInfo> {\n    try {\n      const unpaidEnrollments = await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n        const index = store.index('enrollmentStatus');\n        return index.getAll('unpaid');\n      });\n      \n      // 미수 회원 ID 중복 제거\n      const uniqueUnpaidMembers = new Set(unpaidEnrollments.map((e: CourseEnrollment) => e.memberId));\n      const unpaidMemberCount = uniqueUnpaidMembers.size;\n      \n      // 총 미수 금액 계산\n      const totalUnpaidAmount = unpaidEnrollments.reduce((total: number, enrollment: CourseEnrollment) => total + enrollment.unpaidAmount, 0);\n      \n      return {\n        unpaidMemberCount,\n        totalUnpaidAmount\n      };\n    } catch (error) {\n      console.error('전체 미수 메타정보 조회 실패:', error);\n      return {\n        unpaidMemberCount: 0,\n        totalUnpaidAmount: 0\n      };\n    }\n  }\n\n  /**\n   * 활성 수강정보 조회 (active 상태만)\n   */\n  async getActiveCourseEnrollments(): Promise<CourseEnrollment[]> {\n    try {\n      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n        const index = store.index('enrollmentStatus');\n        return index.getAll('active');\n      });\n    } catch (error) {\n      console.error('활성 수강정보 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 완료된 수강정보 조회 (completed 상태만)\n   */\n  async getCompletedCourseEnrollments(): Promise<CourseEnrollment[]> {\n    try {\n      return await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n        const index = store.index('enrollmentStatus');\n        return index.getAll('completed');\n      });\n    } catch (error) {\n      console.error('완료된 수강정보 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 수강 세션 완료 처리 (횟수제 프로그램용)\n   */\n  async completeSession(enrollmentId: string): Promise<boolean> {\n    try {\n      const enrollment = await this.getCourseEnrollmentById(enrollmentId);\n      if (!enrollment) {\n        throw new Error('수강정보를 찾을 수 없습니다.');\n      }\n\n      if (enrollment.programType !== '횟수제') {\n        throw new Error('횟수제 프로그램만 세션 완료 처리가 가능합니다.');\n      }\n\n      const completedSessions = (enrollment.completedSessions || 0) + 1;\n      const sessionCount = enrollment.sessionCount || 0;\n\n      // 모든 세션이 완료되었는지 확인\n      const enrollmentStatus = completedSessions >= sessionCount ? 'completed' : enrollment.enrollmentStatus;\n\n      return await this.updateCourseEnrollment(enrollmentId, {\n        completedSessions,\n        enrollmentStatus\n      });\n    } catch (error) {\n      console.error('세션 완료 처리 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 기간제 수강 만료 처리\n   */\n  async checkAndUpdateExpiredEnrollments(): Promise<number> {\n    try {\n      const now = new Date();\n      const allEnrollments = await this.getAllCourseEnrollments();\n      \n      // 기간제 프로그램 중 종료일이 지났지만 아직 완료 처리되지 않은 것들\n      const expiredEnrollments = allEnrollments.filter(enrollment =>\n        enrollment.programType === '기간제' &&\n        enrollment.endDate &&\n        enrollment.endDate <= now &&\n        enrollment.enrollmentStatus === 'active'\n      );\n\n      let updatedCount = 0;\n      for (const enrollment of expiredEnrollments) {\n        await this.updateCourseEnrollment(enrollment.id, {\n          enrollmentStatus: 'completed'\n        });\n        updatedCount++;\n      }\n\n      if (updatedCount > 0) {\n        console.log(`${updatedCount}건의 만료된 수강정보를 완료 처리했습니다.`);\n      }\n\n      return updatedCount;\n    } catch (error) {\n      console.error('만료된 수강정보 처리 실패:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * 지점별 프로그램별 수강현황 통계\n   */\n  async getCourseStatsByBranchAndProgram(branchId: string, programId: string): Promise<{\n    total: number;\n    active: number;\n    completed: number;\n    suspended: number;\n    cancelled: number;\n    unpaid: number;\n  }> {\n    try {\n      const enrollments = await this.executeTransaction('courseEnrollments', 'readonly', (store) => {\n        const index = store.index('branchProgram');\n        return index.getAll([branchId, programId]);\n      });\n\n      const stats = {\n        total: enrollments.length,\n        active: 0,\n        completed: 0,\n        suspended: 0,\n        cancelled: 0,\n        unpaid: 0\n      };\n\n      for (const enrollment of enrollments) {\n        switch (enrollment.enrollmentStatus) {\n          case 'active':\n            stats.active++;\n            break;\n          case 'completed':\n            stats.completed++;\n            break;\n          case 'suspended':\n            stats.suspended++;\n            break;\n          case 'cancelled':\n            stats.cancelled++;\n            break;\n          case 'unpaid':\n            stats.unpaid++;\n            break;\n        }\n      }\n\n      return stats;\n    } catch (error) {\n      console.error('수강현황 통계 조회 실패:', error);\n      return {\n        total: 0,\n        active: 0,\n        completed: 0,\n        suspended: 0,\n        cancelled: 0,\n        unpaid: 0\n      };\n    }\n  }\n}"
        }
    ]
}