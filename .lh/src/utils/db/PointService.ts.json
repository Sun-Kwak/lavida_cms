{
    "sourceFile": "src/utils/db/PointService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1761368450559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761371100631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,8 +206,50 @@\n     }\n   }\n \n   /**\n+   * 회원의 포인트 적립/사용 통계 (새로운 시스템 전용)\n+   */\n+  async getMemberPointStatsUnified(memberId: string): Promise<PointStats> {\n+    try {\n+      // 새로운 포인트 시스템에서 해당 회원의 데이터만 필터링\n+      const allPoints = await this.getAllPointsFromTransactions();\n+      const memberPoints = allPoints.filter((p: Point) => p.memberId === memberId);\n+      \n+      const totalEarned = memberPoints\n+        .filter((p: Point) => p.type === 'earned')\n+        .reduce((sum: number, p: Point) => sum + p.amount, 0);\n+        \n+      const totalUsed = Math.abs(memberPoints\n+        .filter((p: Point) => p.type === 'used')\n+        .reduce((sum: number, p: Point) => sum + p.amount, 0));\n+        \n+      const totalExpired = Math.abs(memberPoints\n+        .filter((p: Point) => p.type === 'expired')\n+        .reduce((sum: number, p: Point) => sum + p.amount, 0));\n+      \n+      const currentBalance = await this.getMemberPointBalanceV2(memberId);\n+      \n+      return {\n+        totalEarned,\n+        totalUsed,\n+        totalExpired,\n+        currentBalance,\n+        transactionCount: memberPoints.length\n+      };\n+    } catch (error) {\n+      console.error('새로운 포인트 시스템 통계 조회 실패:', error);\n+      return {\n+        totalEarned: 0,\n+        totalUsed: 0,\n+        totalExpired: 0,\n+        currentBalance: 0,\n+        transactionCount: 0\n+      };\n+    }\n+  }\n+\n+  /**\n    * 모든 포인트 내역 조회\n    */\n   async getAllPoints(): Promise<Point[]> {\n     try {\n@@ -219,8 +261,60 @@\n       return [];\n     }\n   }\n \n+  /**\n+   * 새로운 포인트 시스템에서 모든 포인트 내역 조회 (Point 형식으로 변환)\n+   */\n+  async getAllPointsFromTransactions(): Promise<Point[]> {\n+    try {\n+      console.log('새로운 포인트 시스템에서 데이터 조회 중...');\n+      \n+      // 새로운 포인트 트랜잭션 데이터 조회\n+      const transactions = await this.executeTransaction('pointTransactions', 'readonly', (store) => \n+        store.getAll()\n+      );\n+      console.log(`포인트 트랜잭션: ${transactions.length}건`);\n+      \n+      // PointTransaction을 Point 형식으로 변환\n+      const convertedPoints: Point[] = transactions.map(tx => ({\n+        id: tx.id,\n+        memberId: tx.memberId,\n+        memberName: tx.memberName,\n+        amount: tx.amount,\n+        type: tx.transactionType === 'earn' ? 'earned' : \n+              tx.transactionType === 'use' ? 'used' : \n+              tx.transactionType === 'expire' ? 'expired' : 'adjusted',\n+        source: tx.source,\n+        description: tx.description,\n+        expiryDate: tx.expiryDate,\n+        relatedPaymentId: tx.relatedOrderId, // orderId를 paymentId로 매핑\n+        createdAt: tx.createdAt,\n+        updatedAt: tx.updatedAt\n+      }));\n+      \n+      // 생성일 기준으로 최신 순 정렬\n+      const sortedPoints = convertedPoints.sort((a, b) => \n+        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n+      );\n+      \n+      console.log(`변환된 포인트 내역: ${sortedPoints.length}건`);\n+      console.log('최근 3건:', sortedPoints.slice(0, 3).map(p => ({\n+        날짜: p.createdAt,\n+        회원: p.memberName,\n+        금액: p.amount,\n+        타입: p.type,\n+        출처: p.source\n+      })));\n+      \n+      return sortedPoints;\n+      \n+    } catch (error) {\n+      console.error('새로운 포인트 시스템 조회 실패:', error);\n+      return [];\n+    }\n+  }\n+\n   // ==================== 개선된 포인트 시스템 ====================\n \n   /**\n    * 포인트 거래 추가\n"
                },
                {
                    "date": 1761371973396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,12 +271,12 @@\n       \n       // 새로운 포인트 트랜잭션 데이터 조회\n       const transactions = await this.executeTransaction('pointTransactions', 'readonly', (store) => \n         store.getAll()\n-      );\n+      ) as PointTransaction[];\n       console.log(`포인트 트랜잭션: ${transactions.length}건`);\n       \n-      // PointTransaction을 Point 형식으로 변환\n+      // PointTransaction을 Point 형식으로 변환하면서 확장 필드도 포함\n       const convertedPoints: Point[] = transactions.map(tx => ({\n         id: tx.id,\n         memberId: tx.memberId,\n         memberName: tx.memberName,\n@@ -288,9 +288,16 @@\n         description: tx.description,\n         expiryDate: tx.expiryDate,\n         relatedPaymentId: tx.relatedOrderId, // orderId를 paymentId로 매핑\n         createdAt: tx.createdAt,\n-        updatedAt: tx.updatedAt\n+        updatedAt: tx.updatedAt,\n+        // 확장 필드들을 any 타입으로 추가 (기존 Point 타입 호환성 유지)\n+        ...(tx.products && { products: tx.products }),\n+        ...(tx.branchId && { branchId: tx.branchId }),\n+        ...(tx.branchName && { branchName: tx.branchName }),\n+        ...(tx.staffId && { staffId: tx.staffId }),\n+        ...(tx.staffName && { staffName: tx.staffName }),\n+        ...(tx.relatedOrderId && { relatedOrderId: tx.relatedOrderId })\n       }));\n       \n       // 생성일 기준으로 최신 순 정렬\n       const sortedPoints = convertedPoints.sort((a, b) => \n@@ -712,5 +719,60 @@\n       console.error('포인트 데이터 마이그레이션 실패:', error);\n       throw error;\n     }\n   }\n+\n+  /**\n+   * 포인트 거래에 수강 정보 업데이트\n+   */\n+  async updatePointTransactionWithCourseInfo(\n+    orderId: string, \n+    courseInfo: Array<{ productId: string; courseId: string; courseName: string }>\n+  ): Promise<void> {\n+    try {\n+      // 모든 포인트 거래를 조회하여 해당 주문 ID를 가진 것들 필터링\n+      const allTransactions = await this.executeTransaction('pointTransactions', 'readonly', (store) => \n+        store.getAll()\n+      ) as PointTransaction[];\n+\n+      const pointTransactions = allTransactions.filter(t => t.relatedOrderId === orderId);\n+\n+      if (!pointTransactions || pointTransactions.length === 0) {\n+        console.log(`주문 ID ${orderId}와 관련된 포인트 거래가 없습니다.`);\n+        return;\n+      }\n+\n+      // 각 포인트 거래의 products 정보에 수강 정보 추가\n+      for (const transaction of pointTransactions) {\n+        if (transaction.products) {\n+          const updatedProducts = transaction.products.map((product: any) => {\n+            const courseMatch = courseInfo.find(c => c.productId === product.productId);\n+            if (courseMatch) {\n+              return {\n+                ...product,\n+                courseId: courseMatch.courseId,\n+                courseName: courseMatch.courseName\n+              };\n+            }\n+            return product;\n+          });\n+\n+          // 업데이트된 거래 정보 저장\n+          const updatedTransaction = {\n+            ...transaction,\n+            products: updatedProducts,\n+            updatedAt: new Date()\n+          };\n+\n+          await this.executeTransaction('pointTransactions', 'readwrite', (store) => \n+            store.put(updatedTransaction)\n+          );\n+\n+          console.log(`포인트 거래 ${transaction.id}에 수강 정보 업데이트 완료`);\n+        }\n+      }\n+    } catch (error) {\n+      console.error('포인트 거래 수강 정보 업데이트 실패:', error);\n+      throw error;\n+    }\n+  }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1761368450559,
            "name": "Commit-0",
            "content": "/**\n * 포인트 관리 서비스\n */\n\nimport { BaseDBManager } from './BaseDBManager';\nimport { Point, PointTransaction, PointBalance, PointStats } from './types';\n\nexport class PointService extends BaseDBManager {\n\n  // ==================== 기존 포인트 시스템 (호환성 유지) ====================\n\n  /**\n   * 포인트 적립 (기존 시스템)\n   */\n  async addPoint(pointData: Omit<Point, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    try {\n      const point: Point = {\n        id: this.generateUUID(),\n        ...pointData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      await this.executeTransaction('points', 'readwrite', (store) => \n        store.add(point)\n      );\n\n      console.log('포인트 적립 성공:', point.id, `${point.amount}원`);\n      return point.id;\n    } catch (error) {\n      console.error('포인트 적립 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 회원별 포인트 내역 조회 (기존 시스템)\n   */\n  async getPointsByMember(memberId: string): Promise<Point[]> {\n    try {\n      return await this.executeTransaction('points', 'readonly', (store) => {\n        const index = store.index('memberId');\n        return index.getAll(memberId);\n      });\n    } catch (error) {\n      console.error('회원별 포인트 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 회원의 현재 사용 가능한 포인트 잔액 계산 (기존 시스템)\n   */\n  async getMemberPointBalance(memberId: string): Promise<number> {\n    try {\n      const points = await this.getPointsByMember(memberId);\n      const now = new Date();\n      \n      // 만료되지 않은 포인트들만 계산\n      const validPoints = points.filter(point => {\n        // 만료일이 없거나 만료일이 지나지 않은 경우\n        return !point.expiryDate || point.expiryDate > now;\n      });\n      \n      // 총 포인트 합계 (적립은 +, 사용은 -)\n      return validPoints.reduce((total, point) => total + point.amount, 0);\n    } catch (error) {\n      console.error('포인트 잔액 계산 실패:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * 포인트 사용 (기존 시스템)\n   */\n  async usePoints(memberId: string, amount: number, source: string, description?: string, relatedPaymentId?: string): Promise<string> {\n    try {\n      // 사용 가능한 포인트 잔액 확인\n      const currentBalance = await this.getMemberPointBalance(memberId);\n      \n      if (currentBalance < amount) {\n        throw new Error(`포인트가 부족합니다. 현재 잔액: ${currentBalance.toLocaleString()}원, 사용 요청: ${amount.toLocaleString()}원`);\n      }\n\n      // 회원 정보 조회 - 외부에서 주입받아야 함\n      const memberName = 'Unknown'; // TODO: 회원 서비스에서 이름 조회\n\n      // 포인트 사용 내역 추가 (음수로 저장)\n      return await this.addPoint({\n        memberId,\n        memberName,\n        amount: -amount, // 사용은 음수\n        type: 'used',\n        source,\n        description,\n        relatedPaymentId\n      });\n    } catch (error) {\n      console.error('포인트 사용 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 만료된 포인트 처리 (기존 시스템)\n   */\n  async expirePoints(): Promise<number> {\n    try {\n      const now = new Date();\n      const allPoints = await this.executeTransaction('points', 'readonly', (store) => \n        store.getAll()\n      );\n      \n      // 만료된 적립 포인트 찾기 (type이 'earned'이고 만료일이 지난 것들)\n      const expiredPoints = allPoints.filter(point => \n        point.type === 'earned' && \n        point.expiryDate && \n        point.expiryDate <= now &&\n        point.amount > 0 // 적립된 포인트만\n      );\n      \n      let expiredCount = 0;\n      \n      // 각 만료된 포인트에 대해 만료 처리 레코드 생성\n      for (const expiredPoint of expiredPoints) {\n        await this.addPoint({\n          memberId: expiredPoint.memberId,\n          memberName: expiredPoint.memberName,\n          amount: -expiredPoint.amount, // 만료는 음수로 차감\n          type: 'expired',\n          source: '포인트 만료',\n          description: `${expiredPoint.expiryDate.toLocaleDateString()} 만료된 포인트`,\n          relatedPaymentId: expiredPoint.relatedPaymentId\n        });\n        \n        expiredCount++;\n      }\n      \n      console.log(`만료된 포인트 처리 완료: ${expiredCount}건`);\n      return expiredCount;\n    } catch (error) {\n      console.error('포인트 만료 처리 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 포인트 내역 검색\n   */\n  async searchPoints(searchTerm: string): Promise<Point[]> {\n    try {\n      const allPoints = await this.executeTransaction('points', 'readonly', (store) => \n        store.getAll()\n      );\n      \n      const lowerSearchTerm = searchTerm.toLowerCase();\n      \n      return allPoints.filter(point => \n        point.memberName.toLowerCase().includes(lowerSearchTerm) ||\n        point.source.toLowerCase().includes(lowerSearchTerm) ||\n        (point.description && point.description.toLowerCase().includes(lowerSearchTerm))\n      );\n    } catch (error) {\n      console.error('포인트 검색 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 회원의 포인트 적립/사용 통계\n   */\n  async getMemberPointStats(memberId: string): Promise<PointStats> {\n    try {\n      const points = await this.getPointsByMember(memberId);\n      \n      const totalEarned = points\n        .filter(p => p.type === 'earned')\n        .reduce((sum, p) => sum + p.amount, 0);\n        \n      const totalUsed = Math.abs(points\n        .filter(p => p.type === 'used')\n        .reduce((sum, p) => sum + p.amount, 0));\n        \n      const totalExpired = Math.abs(points\n        .filter(p => p.type === 'expired')\n        .reduce((sum, p) => sum + p.amount, 0));\n      \n      const currentBalance = await this.getMemberPointBalance(memberId);\n      \n      return {\n        totalEarned,\n        totalUsed,\n        totalExpired,\n        currentBalance,\n        transactionCount: points.length\n      };\n    } catch (error) {\n      console.error('포인트 통계 조회 실패:', error);\n      return {\n        totalEarned: 0,\n        totalUsed: 0,\n        totalExpired: 0,\n        currentBalance: 0,\n        transactionCount: 0\n      };\n    }\n  }\n\n  /**\n   * 모든 포인트 내역 조회\n   */\n  async getAllPoints(): Promise<Point[]> {\n    try {\n      return await this.executeTransaction('points', 'readonly', (store) => \n        store.getAll()\n      );\n    } catch (error) {\n      console.error('포인트 내역 조회 실패:', error);\n      return [];\n    }\n  }\n\n  // ==================== 개선된 포인트 시스템 ====================\n\n  /**\n   * 포인트 거래 추가\n   */\n  async addPointTransaction(transactionData: Omit<PointTransaction, 'id' | 'createdAt' | 'updatedAt' | 'balance'>): Promise<string> {\n    try {\n      // 현재 잔액 계산\n      const currentBalance = await this.getMemberPointBalanceV2(transactionData.memberId);\n      const newBalance = currentBalance + transactionData.amount;\n\n      const transaction: PointTransaction = {\n        id: this.generateUUID(),\n        ...transactionData,\n        balance: newBalance,\n        isExpired: transactionData.isExpired || false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      await this.executeTransaction('pointTransactions', 'readwrite', (store) => \n        store.add(transaction)\n      );\n\n      // 포인트 잔액 테이블 업데이트\n      await this.updatePointBalance(transactionData.memberId);\n\n      console.log('포인트 거래 추가 성공:', transaction.id, `${transaction.amount}원`);\n      return transaction.id;\n    } catch (error) {\n      console.error('포인트 거래 추가 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * FIFO 방식 포인트 사용\n   */\n  async usePointsFIFO(memberId: string, amount: number, orderId: string, source: string = '상품구매'): Promise<void> {\n    try {\n      // 1. 사용 가능한 포인트를 적립일 순으로 조회\n      const availablePoints = await this.getAvailablePointsOrderByEarnedDate(memberId);\n      \n      let remainingAmount = amount;\n      const usageRecords = [];\n      \n      // 2. FIFO 방식으로 포인트 차감 계획 수립\n      for (const pointBatch of availablePoints) {\n        if (remainingAmount <= 0) break;\n        \n        const useAmount = Math.min(remainingAmount, pointBatch.availableAmount);\n        usageRecords.push({\n          originalTransactionId: pointBatch.id,\n          amount: useAmount,\n          earnedDate: pointBatch.earnedDate\n        });\n        \n        remainingAmount -= useAmount;\n      }\n      \n      if (remainingAmount > 0) {\n        throw new Error(`포인트 잔액이 부족합니다. 부족 금액: ${remainingAmount.toLocaleString()}원`);\n      }\n      \n      // 3. 사용 내역 기록\n      const memberName = 'Unknown'; // TODO: 회원 서비스에서 이름 조회\n      for (const usage of usageRecords) {\n        await this.addPointTransaction({\n          memberId,\n          memberName,\n          amount: -usage.amount,\n          transactionType: 'use',\n          relatedOrderId: orderId,\n          earnedDate: usage.earnedDate,\n          originalTransactionId: usage.originalTransactionId,\n          isExpired: false,\n          source,\n          description: `FIFO 방식 포인트 사용 (원본: ${usage.originalTransactionId.slice(-8)})`\n        });\n      }\n      \n      console.log(`FIFO 포인트 사용 완료: ${amount.toLocaleString()}원, ${usageRecords.length}개 배치에서 차감`);\n    } catch (error) {\n      console.error('FIFO 포인트 사용 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 적립일 순으로 사용 가능한 포인트 조회\n   */\n  async getAvailablePointsOrderByEarnedDate(memberId: string): Promise<Array<{\n    id: string;\n    availableAmount: number;\n    earnedDate: Date;\n  }>> {\n    try {\n      const transactions = await this.executeTransaction('pointTransactions', 'readonly', (store) => {\n        return store.getAll();\n      }).then(allTransactions => \n        allTransactions.filter(t => t.memberId === memberId)\n      );\n\n      // 적립된 포인트들을 그룹화하고 사용/만료된 포인트를 차감\n      const earnedTransactions = transactions.filter(t => \n        t.transactionType === 'earn' && \n        !t.isExpired &&\n        (!t.expiryDate || t.expiryDate > new Date())\n      );\n\n      const availablePoints = [];\n      \n      for (const earnedTx of earnedTransactions) {\n        // 해당 적립 포인트에서 사용/만료된 금액 계산\n        const usedAmount = transactions\n          .filter(t => \n            t.originalTransactionId === earnedTx.id && \n            (t.transactionType === 'use' || t.transactionType === 'expire')\n          )\n          .reduce((sum, t) => sum + Math.abs(t.amount), 0);\n\n        const availableAmount = earnedTx.amount - usedAmount;\n        \n        if (availableAmount > 0) {\n          availablePoints.push({\n            id: earnedTx.id,\n            availableAmount,\n            earnedDate: earnedTx.earnedDate || earnedTx.createdAt\n          });\n        }\n      }\n\n      // 적립일 순으로 정렬 (오래된 것부터)\n      return availablePoints.sort((a, b) => a.earnedDate.getTime() - b.earnedDate.getTime());\n    } catch (error) {\n      console.error('사용 가능한 포인트 조회 실패:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 포인트 잔액 테이블 업데이트\n   */\n  async updatePointBalance(memberId: string): Promise<void> {\n    try {\n      const transactions = await this.executeTransaction('pointTransactions', 'readonly', (store) => {\n        const index = store.index('memberId');\n        return index.getAll(memberId);\n      });\n\n      const now = new Date();\n      const validTransactions = transactions.filter(t => \n        !t.isExpired && (!t.expiryDate || t.expiryDate > now)\n      );\n\n      const totalBalance = validTransactions.reduce((sum, t) => sum + t.amount, 0);\n      const earnedPoints = transactions.filter(t => t.transactionType === 'earn').reduce((sum, t) => sum + t.amount, 0);\n      const usedPoints = Math.abs(transactions.filter(t => t.transactionType === 'use').reduce((sum, t) => sum + t.amount, 0));\n      const expiredPoints = Math.abs(transactions.filter(t => t.transactionType === 'expire').reduce((sum, t) => sum + t.amount, 0));\n\n      // 만료 예정 포인트 계산\n      const in30Days = new Date();\n      in30Days.setDate(in30Days.getDate() + 30);\n      const in7Days = new Date();\n      in7Days.setDate(in7Days.getDate() + 7);\n\n      const expiringIn30Days = validTransactions.filter(t => \n        t.expiryDate && t.expiryDate <= in30Days && t.transactionType === 'earn'\n      ).reduce((sum, t) => sum + t.amount, 0);\n\n      const expiringIn7Days = validTransactions.filter(t => \n        t.expiryDate && t.expiryDate <= in7Days && t.transactionType === 'earn'\n      ).reduce((sum, t) => sum + t.amount, 0);\n\n      const balanceData: PointBalance = {\n        id: `balance_${memberId}`,\n        memberId,\n        totalBalance,\n        earnedPoints,\n        usedPoints,\n        expiredPoints,\n        expiringIn30Days,\n        expiringIn7Days,\n        lastUpdated: new Date(),\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      await this.executeTransaction('pointBalances', 'readwrite', (store) => \n        store.put(balanceData)\n      );\n\n      console.log(`포인트 잔액 업데이트 완료: ${memberId} - ${totalBalance.toLocaleString()}원`);\n    } catch (error) {\n      console.error('포인트 잔액 업데이트 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 포인트 잔액 조회 (캐시된 값 사용)\n   */\n  async getMemberPointBalanceCached(memberId: string): Promise<number> {\n    try {\n      const balance = await this.executeTransaction('pointBalances', 'readonly', (store) => \n        store.get(`balance_${memberId}`)\n      );\n\n      if (balance) {\n        // 캐시된 값이 너무 오래되었다면 새로 계산\n        const hoursSinceUpdate = (new Date().getTime() - balance.lastUpdated.getTime()) / (1000 * 60 * 60);\n        if (hoursSinceUpdate < 1) { // 1시간 이내면 캐시 사용\n          return balance.totalBalance;\n        }\n      }\n\n      // 캐시가 없거나 오래되었으면 실시간 계산 후 캐시 업데이트\n      await this.updatePointBalance(memberId);\n      const updatedBalance = await this.executeTransaction('pointBalances', 'readonly', (store) => \n        store.get(`balance_${memberId}`)\n      );\n      \n      return updatedBalance?.totalBalance || 0;\n    } catch (error) {\n      console.error('포인트 잔액 조회 실패:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * 개선된 포인트 만료 처리\n   */\n  async expirePointsImproved(): Promise<number> {\n    try {\n      const now = new Date();\n      \n      // 만료된 적립 포인트 조회 (아직 만료 처리되지 않은 것만)\n      const expiredTransactions = await this.executeTransaction('pointTransactions', 'readonly', (store) => {\n        return store.getAll();\n      }).then(transactions => \n        transactions.filter(t => \n          t.transactionType === 'earn' && \n          !t.isExpired &&\n          t.expiryDate && \n          t.expiryDate <= now\n        )\n      );\n\n      let expiredCount = 0;\n      const memberGroups = new Map<string, PointTransaction[]>();\n\n      // 회원별로 그룹화\n      for (const transaction of expiredTransactions) {\n        const memberId = transaction.memberId;\n        if (!memberGroups.has(memberId)) {\n          memberGroups.set(memberId, []);\n        }\n        memberGroups.get(memberId)!.push(transaction);\n      }\n\n      // 각 회원별로 만료 처리\n      for (const memberData of Array.from(memberGroups.entries())) {\n        const [memberId, transactions] = memberData;\n        for (const transaction of transactions) {\n          // 해당 적립 포인트에서 실제 사용 가능한 금액 계산\n          const availablePoints = await this.getAvailablePointsOrderByEarnedDate(memberId);\n          const availablePoint = availablePoints.find(p => p.id === transaction.id);\n          \n          if (availablePoint && availablePoint.availableAmount > 0) {\n            // 만료 처리 기록\n            await this.addPointTransaction({\n              memberId,\n              memberName: transaction.memberName,\n              amount: -availablePoint.availableAmount,\n              transactionType: 'expire',\n              originalTransactionId: transaction.id,\n              earnedDate: transaction.earnedDate,\n              isExpired: false,\n              source: '포인트 만료',\n              description: `만료일: ${transaction.expiryDate?.toLocaleDateString()}`\n            });\n\n            // 원본 거래를 만료 상태로 표시\n            await this.markTransactionAsExpired(transaction.id);\n            expiredCount++;\n          }\n        }\n      }\n\n      console.log(`만료된 포인트 처리 완료: ${expiredCount}건`);\n      return expiredCount;\n    } catch (error) {\n      console.error('포인트 만료 처리 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 거래를 만료 상태로 표시\n   */\n  async markTransactionAsExpired(transactionId: string): Promise<void> {\n    try {\n      const transaction = await this.executeTransaction('pointTransactions', 'readonly', (store) => \n        store.get(transactionId)\n      );\n\n      if (transaction) {\n        transaction.isExpired = true;\n        transaction.updatedAt = new Date();\n\n        await this.executeTransaction('pointTransactions', 'readwrite', (store) => \n          store.put(transaction)\n        );\n      }\n    } catch (error) {\n      console.error('거래 만료 상태 표시 실패:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 회원 포인트 잔액 조회 (기존 메서드 오버라이드 - 호환성 유지)\n   */\n  async getMemberPointBalanceV2(memberId: string): Promise<number> {\n    try {\n      // 1. 새로운 PointTransaction 데이터가 있는지 확인\n      const transactions = await this.executeTransaction('pointTransactions', 'readonly', (store) => {\n        const index = store.index('memberId');\n        return index.getAll(memberId);\n      });\n\n      if (transactions.length > 0) {\n        // 새로운 시스템 사용: 캐시된 잔액 조회\n        return await this.getMemberPointBalanceCached(memberId);\n      } else {\n        // 기존 시스템 사용: Point 테이블에서 계산\n        const points = await this.getPointsByMember(memberId);\n        const now = new Date();\n        \n        const validPoints = points.filter(point => {\n          return !point.expiryDate || point.expiryDate > now;\n        });\n        \n        return validPoints.reduce((total, point) => total + point.amount, 0);\n      }\n    } catch (error) {\n      console.error('포인트 잔액 조회 실패:', error);\n      return 0;\n    }\n  }\n\n  // ==================== 데이터 마이그레이션 ====================\n\n  /**\n   * 기존 Point 데이터를 새로운 PointTransaction으로 마이그레이션\n   */\n  async migratePointsToTransactions(): Promise<void> {\n    try {\n      console.log('포인트 데이터 마이그레이션 시작...');\n      \n      // 1. 기존 포인트 데이터 조회\n      const oldPoints = await this.getAllPoints();\n      \n      // 2. 이미 마이그레이션된 데이터가 있는지 확인\n      const existingTransactions = await this.executeTransaction('pointTransactions', 'readonly', (store) => \n        store.getAll()\n      );\n      \n      if (existingTransactions.length > 0) {\n        console.log('이미 마이그레이션된 포인트 거래내역이 있습니다. 스킵합니다.');\n        return;\n      }\n      \n      // 3. 각 포인트를 PointTransaction으로 변환\n      for (const point of oldPoints) {\n        const transactionType = point.amount > 0 ? 'earn' : \n                               point.type === 'used' ? 'use' :\n                               point.type === 'expired' ? 'expire' : 'adjust';\n        \n        await this.addPointTransaction({\n          memberId: point.memberId,\n          memberName: point.memberName,\n          amount: point.amount,\n          transactionType: transactionType as any,\n          earnedDate: point.createdAt,\n          expiryDate: point.expiryDate || undefined,\n          isExpired: point.type === 'expired',\n          source: point.source,\n          description: point.description,\n          relatedPaymentId: point.relatedPaymentId\n        });\n      }\n      \n      console.log(`포인트 데이터 마이그레이션 완료: ${oldPoints.length}건 처리`);\n    } catch (error) {\n      console.error('포인트 데이터 마이그레이션 실패:', error);\n      throw error;\n    }\n  }\n}"
        }
    ]
}