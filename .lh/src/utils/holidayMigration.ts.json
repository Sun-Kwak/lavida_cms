{
    "sourceFile": "src/utils/holidayMigration.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1761451696731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761453502056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,20 +9,16 @@\n interface WeekDataGroup {\n   staffId: string;\n   weekStartDate: string;\n   days: {\n-    monday: boolean;\n-    tuesday: boolean;\n-    wednesday: boolean;\n-    thursday: boolean;\n-    friday: boolean;\n-    saturday: boolean;\n-    sunday: boolean;\n+    monday: { isHoliday: boolean; workingHours?: { start: number; end: number; }; breakTimes?: Array<{ start: number; end: number; name?: string; }>; };\n+    tuesday: { isHoliday: boolean; workingHours?: { start: number; end: number; }; breakTimes?: Array<{ start: number; end: number; name?: string; }>; };\n+    wednesday: { isHoliday: boolean; workingHours?: { start: number; end: number; }; breakTimes?: Array<{ start: number; end: number; name?: string; }>; };\n+    thursday: { isHoliday: boolean; workingHours?: { start: number; end: number; }; breakTimes?: Array<{ start: number; end: number; name?: string; }>; };\n+    friday: { isHoliday: boolean; workingHours?: { start: number; end: number; }; breakTimes?: Array<{ start: number; end: number; name?: string; }>; };\n+    saturday: { isHoliday: boolean; workingHours?: { start: number; end: number; }; breakTimes?: Array<{ start: number; end: number; name?: string; }>; };\n+    sunday: { isHoliday: boolean; workingHours?: { start: number; end: number; }; breakTimes?: Array<{ start: number; end: number; name?: string; }>; };\n   };\n-  workingHours?: {\n-    start: number;\n-    end: number;\n-  };\n }\n \n /**\n  * 날짜가 속한 주의 월요일 날짜를 구하는 함수\n@@ -72,21 +68,21 @@\n       const weekStartDate = getWeekStartDate(setting.date);\n       const groupKey = `${setting.staffId}-${weekStartDate}`;\n       \n       if (!weekGroups.has(groupKey)) {\n+        const defaultWorkingHours = setting.workingHours || { start: 9, end: 21 };\n         weekGroups.set(groupKey, {\n           staffId: setting.staffId,\n           weekStartDate,\n           days: {\n-            monday: false,\n-            tuesday: false,\n-            wednesday: false,\n-            thursday: false,\n-            friday: false,\n-            saturday: true,  // 기본값: 주말 휴일\n-            sunday: true     // 기본값: 주말 휴일\n-          },\n-          workingHours: setting.workingHours || { start: 9, end: 21 }\n+            monday: { isHoliday: false, workingHours: defaultWorkingHours, breakTimes: [] },\n+            tuesday: { isHoliday: false, workingHours: defaultWorkingHours, breakTimes: [] },\n+            wednesday: { isHoliday: false, workingHours: defaultWorkingHours, breakTimes: [] },\n+            thursday: { isHoliday: false, workingHours: defaultWorkingHours, breakTimes: [] },\n+            friday: { isHoliday: false, workingHours: defaultWorkingHours, breakTimes: [] },\n+            saturday: { isHoliday: true, workingHours: defaultWorkingHours, breakTimes: [] },  // 기본값: 주말 휴일\n+            sunday: { isHoliday: true, workingHours: defaultWorkingHours, breakTimes: [] }     // 기본값: 주말 휴일\n+          }\n         });\n       }\n       \n       const group = weekGroups.get(groupKey)!;\n@@ -94,13 +90,13 @@\n       const dayOfWeek = date.getDay();\n       const dayName = dayNames[dayOfWeek];\n       \n       // 휴일 설정 적용\n-      group.days[dayName] = setting.isHoliday;\n+      group.days[dayName].isHoliday = setting.isHoliday;\n       \n       // 근무시간 설정 (가장 최근 설정 사용)\n       if (setting.workingHours && !setting.isHoliday) {\n-        group.workingHours = setting.workingHours;\n+        group.days[dayName].workingHours = setting.workingHours;\n       }\n     }\n     \n     // 3. 주별 휴일 설정으로 변환\n@@ -109,10 +105,9 @@\n     weekGroups.forEach(group => {\n       weeklySettings.push({\n         staffId: group.staffId,\n         weekStartDate: group.weekStartDate,\n-        weekDays: group.days,\n-        workingHours: group.workingHours\n+        weekDays: group.days\n       });\n     });\n     \n     // 4. 주별 휴일 설정 저장\n@@ -168,9 +163,9 @@\n     \n     const setting = settings[0];\n     const dayName = dayNames[dayOfWeek];\n     \n-    return setting.weekDays[dayName];\n+    return setting.weekDays[dayName].isHoliday;\n   } catch (error) {\n     console.error('주별 휴일 설정에서 휴일 여부 확인 실패:', error);\n     // 오류시 주말을 기본 휴일로 간주\n     const dateObj = new Date(date + 'T00:00:00');\n"
                }
            ],
            "date": 1761451696731,
            "name": "Commit-0",
            "content": "/**\n * 휴일 설정 마이그레이션 유틸리티\n * 기존 일별 휴일 설정을 주별 휴일 설정으로 변환\n */\n\nimport { dbManager } from './indexedDB';\nimport type { WeeklyHolidaySettings } from './db/types';\n\ninterface WeekDataGroup {\n  staffId: string;\n  weekStartDate: string;\n  days: {\n    monday: boolean;\n    tuesday: boolean;\n    wednesday: boolean;\n    thursday: boolean;\n    friday: boolean;\n    saturday: boolean;\n    sunday: boolean;\n  };\n  workingHours?: {\n    start: number;\n    end: number;\n  };\n}\n\n/**\n * 날짜가 속한 주의 월요일 날짜를 구하는 함수\n */\nfunction getWeekStartDate(dateStr: string): string {\n  const date = new Date(dateStr + 'T00:00:00');\n  const dayOfWeek = date.getDay(); // 0: 일요일, 1: 월요일, ...\n  \n  // 월요일을 주의 시작으로 설정\n  const daysToMonday = dayOfWeek === 0 ? -6 : -(dayOfWeek - 1);\n  const monday = new Date(date);\n  monday.setDate(date.getDate() + daysToMonday);\n  \n  return monday.toISOString().split('T')[0];\n}\n\n/**\n * 요일 이름 배열 (일요일부터 시작)\n */\nconst dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'] as const;\n\n/**\n * 기존 일별 휴일 설정을 주별 설정으로 변환\n */\nexport async function migrateHolidaySettingsToWeekly(): Promise<void> {\n  try {\n    console.log('휴일 설정 마이그레이션 시작...');\n    \n    // 1. 기존 일별 휴일 설정 조회\n    const now = new Date();\n    const startDate = new Date(now.getFullYear() - 1, 0, 1).toISOString().split('T')[0];\n    const endDate = new Date(now.getFullYear() + 1, 11, 31).toISOString().split('T')[0];\n    \n    const existingHolidaySettings = await dbManager.getHolidaySettingsByDateRange(startDate, endDate);\n    \n    if (existingHolidaySettings.length === 0) {\n      console.log('마이그레이션할 기존 휴일 설정이 없습니다.');\n      return;\n    }\n    \n    console.log(`${existingHolidaySettings.length}개의 기존 휴일 설정을 발견했습니다.`);\n    \n    // 2. 주별로 그룹화\n    const weekGroups = new Map<string, WeekDataGroup>();\n    \n    for (const setting of existingHolidaySettings) {\n      const weekStartDate = getWeekStartDate(setting.date);\n      const groupKey = `${setting.staffId}-${weekStartDate}`;\n      \n      if (!weekGroups.has(groupKey)) {\n        weekGroups.set(groupKey, {\n          staffId: setting.staffId,\n          weekStartDate,\n          days: {\n            monday: false,\n            tuesday: false,\n            wednesday: false,\n            thursday: false,\n            friday: false,\n            saturday: true,  // 기본값: 주말 휴일\n            sunday: true     // 기본값: 주말 휴일\n          },\n          workingHours: setting.workingHours || { start: 9, end: 21 }\n        });\n      }\n      \n      const group = weekGroups.get(groupKey)!;\n      const date = new Date(setting.date + 'T00:00:00');\n      const dayOfWeek = date.getDay();\n      const dayName = dayNames[dayOfWeek];\n      \n      // 휴일 설정 적용\n      group.days[dayName] = setting.isHoliday;\n      \n      // 근무시간 설정 (가장 최근 설정 사용)\n      if (setting.workingHours && !setting.isHoliday) {\n        group.workingHours = setting.workingHours;\n      }\n    }\n    \n    // 3. 주별 휴일 설정으로 변환\n    const weeklySettings: Omit<WeeklyHolidaySettings, 'id' | 'createdAt' | 'updatedAt'>[] = [];\n    \n    weekGroups.forEach(group => {\n      weeklySettings.push({\n        staffId: group.staffId,\n        weekStartDate: group.weekStartDate,\n        weekDays: group.days,\n        workingHours: group.workingHours\n      });\n    });\n    \n    // 4. 주별 휴일 설정 저장\n    if (weeklySettings.length > 0) {\n      await dbManager.saveWeeklyHolidaySettings(weeklySettings);\n      console.log(`${weeklySettings.length}개의 주별 휴일 설정을 생성했습니다.`);\n    }\n    \n    console.log('휴일 설정 마이그레이션이 완료되었습니다.');\n    \n  } catch (error) {\n    console.error('휴일 설정 마이그레이션 중 오류 발생:', error);\n    throw error;\n  }\n}\n\n/**\n * 기존 일별 휴일 설정을 백업하고 삭제\n * 주의: 이 함수는 마이그레이션이 성공적으로 완료된 후에만 실행해야 합니다.\n */\nexport async function cleanupOldHolidaySettings(): Promise<void> {\n  try {\n    console.log('기존 일별 휴일 설정 정리 시작...');\n    \n    // 여기서는 실제 삭제를 하지 않고 로그만 남깁니다.\n    // 필요시 수동으로 삭제할 수 있도록 합니다.\n    console.log('기존 일별 휴일 설정은 호환성을 위해 유지됩니다.');\n    console.log('필요시 수동으로 정리해주세요.');\n    \n  } catch (error) {\n    console.error('기존 휴일 설정 정리 중 오류 발생:', error);\n    throw error;\n  }\n}\n\n/**\n * 주별 휴일 설정으로부터 특정 날짜의 휴일 여부 확인\n */\nexport async function isHolidayFromWeeklySettings(staffId: string, date: string): Promise<boolean> {\n  try {\n    const dateObj = new Date(date + 'T00:00:00');\n    const dayOfWeek = dateObj.getDay();\n    \n    // 해당 주의 월요일 찾기\n    const weekStartDate = getWeekStartDate(date);\n    \n    const settings = await dbManager.getWeeklyHolidaySettingsByStaffAndWeek(staffId, weekStartDate);\n    \n    if (settings.length === 0) {\n      // 설정이 없으면 주말을 기본 휴일로 간주\n      return dayOfWeek === 0 || dayOfWeek === 6;\n    }\n    \n    const setting = settings[0];\n    const dayName = dayNames[dayOfWeek];\n    \n    return setting.weekDays[dayName];\n  } catch (error) {\n    console.error('주별 휴일 설정에서 휴일 여부 확인 실패:', error);\n    // 오류시 주말을 기본 휴일로 간주\n    const dateObj = new Date(date + 'T00:00:00');\n    return dateObj.getDay() === 0 || dateObj.getDay() === 6;\n  }\n}\n\n/**\n * 마이그레이션 상태 확인\n */\nexport async function checkMigrationStatus(): Promise<{\n  hasOldSettings: boolean;\n  hasNewSettings: boolean;\n  oldSettingsCount: number;\n  newSettingsCount: number;\n}> {\n  try {\n    // 기존 설정 확인\n    const now = new Date();\n    const startDate = new Date(now.getFullYear(), 0, 1).toISOString().split('T')[0];\n    const endDate = new Date(now.getFullYear(), 11, 31).toISOString().split('T')[0];\n    \n    const oldSettings = await dbManager.getHolidaySettingsByDateRange(startDate, endDate);\n    \n    // 새로운 설정 확인 (모든 직원의 주별 설정)\n    const allStaff = await dbManager.getAllStaff();\n    let newSettingsCount = 0;\n    \n    for (const staff of allStaff) {\n      const weeklySettings = await dbManager.getWeeklyHolidaySettingsByStaff(staff.id);\n      newSettingsCount += weeklySettings.length;\n    }\n    \n    return {\n      hasOldSettings: oldSettings.length > 0,\n      hasNewSettings: newSettingsCount > 0,\n      oldSettingsCount: oldSettings.length,\n      newSettingsCount\n    };\n  } catch (error) {\n    console.error('마이그레이션 상태 확인 실패:', error);\n    return {\n      hasOldSettings: false,\n      hasNewSettings: false,\n      oldSettingsCount: 0,\n      newSettingsCount: 0\n    };\n  }\n}"
        }
    ]
}