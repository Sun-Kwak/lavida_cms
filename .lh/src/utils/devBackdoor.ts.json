{
    "sourceFile": "src/utils/devBackdoor.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1759911573507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760755500677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+/**\n+ * 개발용 백도어 유틸리티\n+ * IndexedDB 초기화 및 테스트 기능\n+ */\n+\n+// 백도어 비밀번호\n+const BACKDOOR_PASSWORD = 'lavida1901!';\n+\n+/**\n+ * 전체 IndexedDB 삭제\n+ */\n+export const deleteAllIndexedDB = async (): Promise<boolean> => {\n+  try {\n+    // 현재 데이터베이스 연결 닫기\n+    const dbName = 'LavidaDB';\n+    \n+    // IndexedDB 삭제\n+    return new Promise((resolve, reject) => {\n+      const deleteReq = indexedDB.deleteDatabase(dbName);\n+      \n+      deleteReq.onerror = () => {\n+        console.error('IndexedDB 삭제 실패:', deleteReq.error);\n+        reject(false);\n+      };\n+      \n+      deleteReq.onsuccess = () => {\n+        console.log('IndexedDB가 성공적으로 삭제되었습니다.');\n+        resolve(true);\n+      };\n+      \n+      deleteReq.onblocked = () => {\n+        console.warn('IndexedDB 삭제가 차단되었습니다. 다른 탭을 닫고 다시 시도하세요.');\n+        // 차단되어도 성공으로 처리 (페이지 새로고침으로 해결 가능)\n+        resolve(true);\n+      };\n+    });\n+  } catch (error) {\n+    console.error('IndexedDB 삭제 중 오류:', error);\n+    return false;\n+  }\n+};\n+\n+/**\n+ * 백도어 비밀번호 확인 및 DB 삭제\n+ */\n+export const executeBackdoor = async (): Promise<void> => {\n+  const password = prompt('개발자 모드 - 비밀번호를 입력하세요:');\n+  \n+  if (password === null) {\n+    // 취소 버튼 클릭\n+    return;\n+  }\n+  \n+  if (password !== BACKDOOR_PASSWORD) {\n+    alert('잘못된 비밀번호입니다.');\n+    return;\n+  }\n+  \n+  // eslint-disable-next-line no-restricted-globals\n+  const confirmed = confirm(\n+    '⚠️ 경고: 모든 데이터가 삭제됩니다.\\n\\n' +\n+    '다음 데이터가 영구적으로 삭제됩니다:\\n' +\n+    '• 모든 직원 정보\\n' +\n+    '• 모든 지점 정보\\n' +\n+    '• 시스템 설정\\n\\n' +\n+    '정말로 삭제하시겠습니까?'\n+  );\n+  \n+  if (!confirmed) {\n+    return;\n+  }\n+  \n+  try {\n+    const success = await deleteAllIndexedDB();\n+    \n+    if (success) {\n+      // localStorage 정리 (중복 방지 플래그 제거)\n+      localStorage.removeItem('lavida_cleanup_done');\n+      console.log('🧹 localStorage 정리 완료');\n+      \n+      alert(\n+        '✅ IndexedDB가 성공적으로 삭제되었습니다.\\n\\n' +\n+        '페이지를 새로고침하면 시스템 관리자가 자동으로 다시 생성됩니다.'\n+      );\n+      \n+      // 자동으로 페이지 새로고침 (사용자에게 묻지 않고 바로 실행)\n+      console.log('🔄 페이지를 새로고침하여 시스템을 재초기화합니다...');\n+      window.location.reload();\n+    } else {\n+      alert('❌ IndexedDB 삭제에 실패했습니다.');\n+    }\n+  } catch (error) {\n+    console.error('백도어 실행 중 오류:', error);\n+    alert('❌ 삭제 중 오류가 발생했습니다.');\n+  }\n+};\n+\n+/**\n+ * 개발 환경에서만 백도어 기능 활성화\n+ */\n+export const isBackdoorEnabled = (): boolean => {\n+  return process.env.NODE_ENV === 'development';\n+};\n"
                },
                {
                    "date": 1761910158642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,111 +95,9 @@\n   }\n };\n \n /**\n- * 개발 환경에서만 백도어 기능 활성화\n+ * 백도어 기능 활성화 (테스트용으로 모든 환경에서 활성화)\n  */\n export const isBackdoorEnabled = (): boolean => {\n-  return process.env.NODE_ENV === 'development';\n+  return true; // 배포 환경에서도 테스트할 수 있도록 임시로 활성화\n };\n-/**\n- * 개발용 백도어 유틸리티\n- * IndexedDB 초기화 및 테스트 기능\n- */\n-\n-// 백도어 비밀번호\n-const BACKDOOR_PASSWORD = 'lavida1901!';\n-\n-/**\n- * 전체 IndexedDB 삭제\n- */\n-export const deleteAllIndexedDB = async (): Promise<boolean> => {\n-  try {\n-    // 현재 데이터베이스 연결 닫기\n-    const dbName = 'LavidaDB';\n-    \n-    // IndexedDB 삭제\n-    return new Promise((resolve, reject) => {\n-      const deleteReq = indexedDB.deleteDatabase(dbName);\n-      \n-      deleteReq.onerror = () => {\n-        console.error('IndexedDB 삭제 실패:', deleteReq.error);\n-        reject(false);\n-      };\n-      \n-      deleteReq.onsuccess = () => {\n-        console.log('IndexedDB가 성공적으로 삭제되었습니다.');\n-        resolve(true);\n-      };\n-      \n-      deleteReq.onblocked = () => {\n-        console.warn('IndexedDB 삭제가 차단되었습니다. 다른 탭을 닫고 다시 시도하세요.');\n-        // 차단되어도 성공으로 처리 (페이지 새로고침으로 해결 가능)\n-        resolve(true);\n-      };\n-    });\n-  } catch (error) {\n-    console.error('IndexedDB 삭제 중 오류:', error);\n-    return false;\n-  }\n-};\n-\n-/**\n- * 백도어 비밀번호 확인 및 DB 삭제\n- */\n-export const executeBackdoor = async (): Promise<void> => {\n-  const password = prompt('개발자 모드 - 비밀번호를 입력하세요:');\n-  \n-  if (password === null) {\n-    // 취소 버튼 클릭\n-    return;\n-  }\n-  \n-  if (password !== BACKDOOR_PASSWORD) {\n-    alert('잘못된 비밀번호입니다.');\n-    return;\n-  }\n-  \n-  // eslint-disable-next-line no-restricted-globals\n-  const confirmed = confirm(\n-    '⚠️ 경고: 모든 데이터가 삭제됩니다.\\n\\n' +\n-    '다음 데이터가 영구적으로 삭제됩니다:\\n' +\n-    '• 모든 직원 정보\\n' +\n-    '• 모든 지점 정보\\n' +\n-    '• 시스템 설정\\n\\n' +\n-    '정말로 삭제하시겠습니까?'\n-  );\n-  \n-  if (!confirmed) {\n-    return;\n-  }\n-  \n-  try {\n-    const success = await deleteAllIndexedDB();\n-    \n-    if (success) {\n-      alert(\n-        '✅ IndexedDB가 성공적으로 삭제되었습니다.\\n\\n' +\n-        '페이지를 새로고침하면 시스템 관리자가 자동으로 다시 생성됩니다.'\n-      );\n-      \n-      // 페이지 새로고침 제안\n-      // eslint-disable-next-line no-restricted-globals\n-      const shouldReload = confirm('지금 페이지를 새로고침하시겠습니까?');\n-      if (shouldReload) {\n-        window.location.reload();\n-      }\n-    } else {\n-      alert('❌ IndexedDB 삭제에 실패했습니다.');\n-    }\n-  } catch (error) {\n-    console.error('백도어 실행 중 오류:', error);\n-    alert('❌ 삭제 중 오류가 발생했습니다.');\n-  }\n-};\n-\n-/**\n- * 개발 환경에서만 백도어 기능 활성화\n- */\n-export const isBackdoorEnabled = (): boolean => {\n-  return process.env.NODE_ENV === 'development';\n-};\n"
                }
            ],
            "date": 1759911573507,
            "name": "Commit-0",
            "content": "/**\n * 개발용 백도어 유틸리티\n * IndexedDB 초기화 및 테스트 기능\n */\n\n// 백도어 비밀번호\nconst BACKDOOR_PASSWORD = 'lavida1901!';\n\n/**\n * 전체 IndexedDB 삭제\n */\nexport const deleteAllIndexedDB = async (): Promise<boolean> => {\n  try {\n    // 현재 데이터베이스 연결 닫기\n    const dbName = 'LavidaDB';\n    \n    // IndexedDB 삭제\n    return new Promise((resolve, reject) => {\n      const deleteReq = indexedDB.deleteDatabase(dbName);\n      \n      deleteReq.onerror = () => {\n        console.error('IndexedDB 삭제 실패:', deleteReq.error);\n        reject(false);\n      };\n      \n      deleteReq.onsuccess = () => {\n        console.log('IndexedDB가 성공적으로 삭제되었습니다.');\n        resolve(true);\n      };\n      \n      deleteReq.onblocked = () => {\n        console.warn('IndexedDB 삭제가 차단되었습니다. 다른 탭을 닫고 다시 시도하세요.');\n        // 차단되어도 성공으로 처리 (페이지 새로고침으로 해결 가능)\n        resolve(true);\n      };\n    });\n  } catch (error) {\n    console.error('IndexedDB 삭제 중 오류:', error);\n    return false;\n  }\n};\n\n/**\n * 백도어 비밀번호 확인 및 DB 삭제\n */\nexport const executeBackdoor = async (): Promise<void> => {\n  const password = prompt('개발자 모드 - 비밀번호를 입력하세요:');\n  \n  if (password === null) {\n    // 취소 버튼 클릭\n    return;\n  }\n  \n  if (password !== BACKDOOR_PASSWORD) {\n    alert('잘못된 비밀번호입니다.');\n    return;\n  }\n  \n  // eslint-disable-next-line no-restricted-globals\n  const confirmed = confirm(\n    '⚠️ 경고: 모든 데이터가 삭제됩니다.\\n\\n' +\n    '다음 데이터가 영구적으로 삭제됩니다:\\n' +\n    '• 모든 직원 정보\\n' +\n    '• 모든 지점 정보\\n' +\n    '• 시스템 설정\\n\\n' +\n    '정말로 삭제하시겠습니까?'\n  );\n  \n  if (!confirmed) {\n    return;\n  }\n  \n  try {\n    const success = await deleteAllIndexedDB();\n    \n    if (success) {\n      alert(\n        '✅ IndexedDB가 성공적으로 삭제되었습니다.\\n\\n' +\n        '페이지를 새로고침하면 시스템 관리자가 자동으로 다시 생성됩니다.'\n      );\n      \n      // 페이지 새로고침 제안\n      // eslint-disable-next-line no-restricted-globals\n      const shouldReload = confirm('지금 페이지를 새로고침하시겠습니까?');\n      if (shouldReload) {\n        window.location.reload();\n      }\n    } else {\n      alert('❌ IndexedDB 삭제에 실패했습니다.');\n    }\n  } catch (error) {\n    console.error('백도어 실행 중 오류:', error);\n    alert('❌ 삭제 중 오류가 발생했습니다.');\n  }\n};\n\n/**\n * 개발 환경에서만 백도어 기능 활성화\n */\nexport const isBackdoorEnabled = (): boolean => {\n  return process.env.NODE_ENV === 'development';\n};\n"
        }
    ]
}