{
    "sourceFile": "src/utils/systemInit.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1759911046491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759911853220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     // 기본 지점이 없으면 생성\n     let branches = await dbManager.getAllBranches();\n     if (branches.length === 0) {\n       const defaultBranch = await dbManager.addBranch({\n-        name: '본사',\n+        name: '전체',\n         address: '',\n         phone: '',\n         isActive: true\n       });\n@@ -44,9 +44,9 @@\n       role: '센터장',\n       employmentType: '정규직',\n       permission: 'MASTER',\n       contractStartDate: new Date(),\n-      contractEndDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1년 후\n+      contractEndDate: null, // 정규직이므로 계약종료일 없음\n     });\n     \n     return true; // 새로운 계정이 생성됨\n   } catch (error) {\n"
                },
                {
                    "date": 1759912075441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,14 @@\n       // 이미 시스템 관리자가 존재함\n       return false;\n     }\n     \n-    // 기본 지점이 없으면 생성\n+    // 기본 지점이 없으면 생성 ('전체' 지점 우선 확인)\n     let branches = await dbManager.getAllBranches();\n-    if (branches.length === 0) {\n-      const defaultBranch = await dbManager.addBranch({\n+    let defaultBranch = branches.find(branch => branch.name === '전체');\n+    \n+    if (!defaultBranch) {\n+      defaultBranch = await dbManager.addBranch({\n         name: '전체',\n         address: '',\n         phone: '',\n         isActive: true\n@@ -38,9 +40,9 @@\n       loginId: SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID,\n       password: SYSTEM_ADMIN_CONFIG.TEMP_PASSWORD,\n       email: 'admin@lavida.com', // 임시 이메일\n       phone: '010-0000-0000', // 임시 전화번호\n-      branchId: branches[0].id,\n+      branchId: defaultBranch.id, // 찾은 또는 생성된 '전체' 지점 사용\n       position: '대표',\n       role: '센터장',\n       employmentType: '정규직',\n       permission: 'MASTER',\n"
                },
                {
                    "date": 1759912385133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,26 +16,30 @@\n     const existingAdmin = await dbManager.getStaffByLoginId(SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID);\n     \n     if (existingAdmin) {\n       // 이미 시스템 관리자가 존재함\n+      console.log('시스템 관리자가 이미 존재합니다.');\n       return false;\n     }\n     \n     // 기본 지점이 없으면 생성 ('전체' 지점 우선 확인)\n     let branches = await dbManager.getAllBranches();\n     let defaultBranch = branches.find(branch => branch.name === '전체');\n     \n     if (!defaultBranch) {\n+      console.log(\"'전체' 지점을 생성합니다.\");\n       defaultBranch = await dbManager.addBranch({\n         name: '전체',\n         address: '',\n         phone: '',\n         isActive: true\n       });\n-      branches = [defaultBranch];\n+    } else {\n+      console.log(\"'전체' 지점이 이미 존재합니다.\");\n     }\n     \n     // 시스템 관리자 계정 생성\n+    console.log('시스템 관리자 계정을 생성합니다.');\n     await dbManager.addStaff({\n       name: SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_DISPLAY_NAME,\n       loginId: SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID,\n       password: SYSTEM_ADMIN_CONFIG.TEMP_PASSWORD,\n@@ -49,8 +53,9 @@\n       contractStartDate: new Date(),\n       contractEndDate: null, // 정규직이므로 계약종료일 없음\n     });\n     \n+    console.log('시스템 관리자 계정이 성공적으로 생성되었습니다.');\n     return true; // 새로운 계정이 생성됨\n   } catch (error) {\n     console.error('시스템 관리자 초기화 실패:', error);\n     return false;\n"
                },
                {
                    "date": 1759912582472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,13 +6,48 @@\n import { dbManager } from './indexedDB';\n import { SYSTEM_ADMIN_CONFIG } from '../constants/staffConstants';\n \n /**\n+ * 중복된 '전체' 지점 정리\n+ * 여러 개의 '전체' 지점이 있을 경우 가장 오래된 것만 남기고 나머지 삭제\n+ */\n+export const cleanupDuplicateBranches = async (): Promise<void> => {\n+  try {\n+    const allBranches = await dbManager.getAllBranches();\n+    const allBranches전체 = allBranches.filter(branch => branch.name === '전체');\n+    \n+    if (allBranches전체.length > 1) {\n+      console.log(`중복된 '전체' 지점 ${allBranches전체.length}개 발견, 정리를 시작합니다.`);\n+      \n+      // 가장 오래된 지점 (첫 번째로 생성된 지점) 찾기\n+      const oldestBranch = allBranches전체.reduce((oldest, current) => \n+        oldest.createdAt < current.createdAt ? oldest : current\n+      );\n+      \n+      // 가장 오래된 지점을 제외한 나머지 삭제\n+      for (const branch of allBranches전체) {\n+        if (branch.id !== oldestBranch.id) {\n+          console.log(`중복된 '전체' 지점 삭제: ${branch.id}`);\n+          await dbManager.deleteBranch(branch.id);\n+        }\n+      }\n+      \n+      console.log(`'전체' 지점 정리 완료. 남은 지점: ${oldestBranch.id}`);\n+    }\n+  } catch (error) {\n+    console.error('중복 지점 정리 실패:', error);\n+  }\n+};\n+\n+/**\n  * 시스템 관리자 계정 자동 생성\n  * 시스템 최초 실행 시 또는 시스템 관리자가 없을 때 호출\n  */\n export const initializeSystemAdmin = async (): Promise<boolean> => {\n   try {\n+    // 먼저 중복된 '전체' 지점 정리\n+    await cleanupDuplicateBranches();\n+    \n     // 이미 시스템 관리자가 존재하는지 확인\n     const existingAdmin = await dbManager.getStaffByLoginId(SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID);\n     \n     if (existingAdmin) {\n@@ -20,11 +55,10 @@\n       console.log('시스템 관리자가 이미 존재합니다.');\n       return false;\n     }\n     \n-    // 기본 지점이 없으면 생성 ('전체' 지점 우선 확인)\n-    let branches = await dbManager.getAllBranches();\n-    let defaultBranch = branches.find(branch => branch.name === '전체');\n+    // '전체' 지점이 이미 존재하는지 확인 (master01과 동일한 방식)\n+    let defaultBranch = await dbManager.getBranchByName('전체');\n     \n     if (!defaultBranch) {\n       console.log(\"'전체' 지점을 생성합니다.\");\n       defaultBranch = await dbManager.addBranch({\n@@ -32,8 +66,9 @@\n         address: '',\n         phone: '',\n         isActive: true\n       });\n+      console.log(\"'전체' 지점이 성공적으로 생성되었습니다.\");\n     } else {\n       console.log(\"'전체' 지점이 이미 존재합니다.\");\n     }\n     \n"
                },
                {
                    "date": 1759912714483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,138 @@\n+/**\n+ * 시스템 초기화 관련 유틸리티\n+ * 시스템 관리자 자동 생성 및 초기 설정\n+ */\n+\n+import { dbManager } from './indexedDB';\n+import { SYSTEM_ADMIN_CONFIG } from '../constants/staffConstants';\n+\n+/**\n+ * 중복된 '전체' 지점 정리\n+ * 여러 개의 '전체' 지점이 있을 경우 가장 오래된 것만 남기고 나머지 삭제\n+ */\n+export const cleanupDuplicateBranches = async (): Promise<void> => {\n+  try {\n+    const allBranches = await dbManager.getAllBranches();\n+    const allBranches전체 = allBranches.filter(branch => branch.name === '전체');\n+    \n+    if (allBranches전체.length > 1) {\n+      console.log(`중복된 '전체' 지점 ${allBranches전체.length}개 발견, 정리를 시작합니다.`);\n+      \n+      // 가장 오래된 지점 (첫 번째로 생성된 지점) 찾기\n+      const oldestBranch = allBranches전체.reduce((oldest, current) => \n+        oldest.createdAt < current.createdAt ? oldest : current\n+      );\n+      \n+      // 가장 오래된 지점을 제외한 나머지 삭제\n+      for (const branch of allBranches전체) {\n+        if (branch.id !== oldestBranch.id) {\n+          console.log(`중복된 '전체' 지점 삭제: ${branch.id}`);\n+          await dbManager.deleteBranch(branch.id);\n+        }\n+      }\n+      \n+      console.log(`'전체' 지점 정리 완료. 남은 지점: ${oldestBranch.id}`);\n+    }\n+  } catch (error) {\n+    console.error('중복 지점 정리 실패:', error);\n+  }\n+};\n+\n+/**\n+ * 시스템 관리자 계정 자동 생성\n+ * 시스템 최초 실행 시 또는 시스템 관리자가 없을 때 호출\n+ */\n+export const initializeSystemAdmin = async (): Promise<boolean> => {\n+  try {\n+    // 이미 시스템 관리자가 존재하는지 확인\n+    const existingAdmin = await dbManager.getStaffByLoginId(SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID);\n+    \n+    if (existingAdmin) {\n+      // 이미 시스템 관리자가 존재함\n+      console.log('시스템 관리자가 이미 존재합니다.');\n+      return false;\n+    }\n+    \n+    // '전체' 지점 확인 또는 생성 (원자적 처리로 중복 방지)\n+    console.log(\"'전체' 지점을 확인하거나 생성합니다.\");\n+    const defaultBranch = await dbManager.getOrCreateBranchByName('전체', {\n+      address: '',\n+      phone: '',\n+      isActive: true\n+    });\n+    console.log(\"'전체' 지점 처리 완료:\", defaultBranch.id);\n+    \n+    // 시스템 관리자 계정 생성\n+    console.log('시스템 관리자 계정을 생성합니다.');\n+    await dbManager.addStaff({\n+      name: SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_DISPLAY_NAME,\n+      loginId: SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID,\n+      password: SYSTEM_ADMIN_CONFIG.TEMP_PASSWORD,\n+      email: 'admin@lavida.com', // 임시 이메일\n+      phone: '010-0000-0000', // 임시 전화번호\n+      branchId: defaultBranch.id, // 찾은 또는 생성된 '전체' 지점 사용\n+      position: '대표',\n+      role: '센터장',\n+      employmentType: '정규직',\n+      permission: 'MASTER',\n+      contractStartDate: new Date(),\n+      contractEndDate: null, // 정규직이므로 계약종료일 없음\n+    });\n+    \n+    console.log('시스템 관리자 계정이 성공적으로 생성되었습니다.');\n+    return true; // 새로운 계정이 생성됨\n+  } catch (error) {\n+    console.error('시스템 관리자 초기화 실패:', error);\n+    return false;\n+  }\n+};\n+\n+/**\n+ * 시스템이 초기 설정 상태인지 확인\n+ * - 시스템 관리자가 기본 정보(임시 이메일, 전화번호)를 사용하고 있는지 확인\n+ */\n+export const isSystemInInitialState = async (): Promise<boolean> => {\n+  try {\n+    const systemAdmin = await dbManager.getStaffByLoginId(SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID);\n+    \n+    if (!systemAdmin) {\n+      return true; // 시스템 관리자가 없으면 초기 상태\n+    }\n+    \n+    // 임시 정보를 사용하고 있는지 확인\n+    const hasTemporaryEmail = systemAdmin.email === 'admin@lavida.com';\n+    const hasTemporaryPhone = systemAdmin.phone === '010-0000-0000';\n+    \n+    return hasTemporaryEmail || hasTemporaryPhone;\n+  } catch (error) {\n+    console.error('시스템 초기 상태 확인 실패:', error);\n+    return true; // 오류 시 초기 상태로 간주\n+  }\n+};\n+\n+/**\n+ * 시스템 초기 설정 완료 처리\n+ * 시스템 관리자가 정보를 업데이트했을 때 호출\n+ */\n+export const markSystemInitialized = async (): Promise<void> => {\n+  // 현재는 별도 플래그 없이 시스템 관리자 정보로만 판단\n+  // 필요시 localStorage 또는 별도 설정 테이블 사용 가능\n+};\n+\n+/**\n+ * 시스템 최초 실행 시 자동 초기화\n+ * App.tsx에서 호출하여 시스템 관리자가 없으면 자동 생성\n+ */\n+export const autoInitializeSystem = async (): Promise<void> => {\n+  try {\n+    // 먼저 기존 중복 데이터 정리 (한 번만 실행)\n+    if (!localStorage.getItem('lavida_cleanup_done')) {\n+      await cleanupDuplicateBranches();\n+      localStorage.setItem('lavida_cleanup_done', 'true');\n+    }\n+    \n+    await initializeSystemAdmin();\n+  } catch (error) {\n+    console.error('시스템 자동 초기화 실패:', error);\n+  }\n+};\n"
                },
                {
                    "date": 1759912858904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,10 +87,11 @@\n   }\n };\n \n /**\n- * 시스템이 초기 설정 상태인지 확인\n+ * 시스템이 초기 설정 상태인지 확인 (더 이상 모달 팝업용으로 사용하지 않음)\n  * - 시스템 관리자가 기본 정보(임시 이메일, 전화번호)를 사용하고 있는지 확인\n+ * - 이제 단순 정보 확인용으로만 사용\n  */\n export const isSystemInInitialState = async (): Promise<boolean> => {\n   try {\n     const systemAdmin = await dbManager.getStaffByLoginId(SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID);\n@@ -98,9 +99,9 @@\n     if (!systemAdmin) {\n       return true; // 시스템 관리자가 없으면 초기 상태\n     }\n     \n-    // 임시 정보를 사용하고 있는지 확인\n+    // 임시 정보를 사용하고 있는지 확인 (정보용으로만 사용)\n     const hasTemporaryEmail = systemAdmin.email === 'admin@lavida.com';\n     const hasTemporaryPhone = systemAdmin.phone === '010-0000-0000';\n     \n     return hasTemporaryEmail || hasTemporaryPhone;\n@@ -135,146 +136,4 @@\n   } catch (error) {\n     console.error('시스템 자동 초기화 실패:', error);\n   }\n };\n-/**\n- * 시스템 초기화 관련 유틸리티\n- * 시스템 관리자 자동 생성 및 초기 설정\n- */\n-\n-import { dbManager } from './indexedDB';\n-import { SYSTEM_ADMIN_CONFIG } from '../constants/staffConstants';\n-\n-/**\n- * 중복된 '전체' 지점 정리\n- * 여러 개의 '전체' 지점이 있을 경우 가장 오래된 것만 남기고 나머지 삭제\n- */\n-export const cleanupDuplicateBranches = async (): Promise<void> => {\n-  try {\n-    const allBranches = await dbManager.getAllBranches();\n-    const allBranches전체 = allBranches.filter(branch => branch.name === '전체');\n-    \n-    if (allBranches전체.length > 1) {\n-      console.log(`중복된 '전체' 지점 ${allBranches전체.length}개 발견, 정리를 시작합니다.`);\n-      \n-      // 가장 오래된 지점 (첫 번째로 생성된 지점) 찾기\n-      const oldestBranch = allBranches전체.reduce((oldest, current) => \n-        oldest.createdAt < current.createdAt ? oldest : current\n-      );\n-      \n-      // 가장 오래된 지점을 제외한 나머지 삭제\n-      for (const branch of allBranches전체) {\n-        if (branch.id !== oldestBranch.id) {\n-          console.log(`중복된 '전체' 지점 삭제: ${branch.id}`);\n-          await dbManager.deleteBranch(branch.id);\n-        }\n-      }\n-      \n-      console.log(`'전체' 지점 정리 완료. 남은 지점: ${oldestBranch.id}`);\n-    }\n-  } catch (error) {\n-    console.error('중복 지점 정리 실패:', error);\n-  }\n-};\n-\n-/**\n- * 시스템 관리자 계정 자동 생성\n- * 시스템 최초 실행 시 또는 시스템 관리자가 없을 때 호출\n- */\n-export const initializeSystemAdmin = async (): Promise<boolean> => {\n-  try {\n-    // 먼저 중복된 '전체' 지점 정리\n-    await cleanupDuplicateBranches();\n-    \n-    // 이미 시스템 관리자가 존재하는지 확인\n-    const existingAdmin = await dbManager.getStaffByLoginId(SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID);\n-    \n-    if (existingAdmin) {\n-      // 이미 시스템 관리자가 존재함\n-      console.log('시스템 관리자가 이미 존재합니다.');\n-      return false;\n-    }\n-    \n-    // '전체' 지점이 이미 존재하는지 확인 (master01과 동일한 방식)\n-    let defaultBranch = await dbManager.getBranchByName('전체');\n-    \n-    if (!defaultBranch) {\n-      console.log(\"'전체' 지점을 생성합니다.\");\n-      defaultBranch = await dbManager.addBranch({\n-        name: '전체',\n-        address: '',\n-        phone: '',\n-        isActive: true\n-      });\n-      console.log(\"'전체' 지점이 성공적으로 생성되었습니다.\");\n-    } else {\n-      console.log(\"'전체' 지점이 이미 존재합니다.\");\n-    }\n-    \n-    // 시스템 관리자 계정 생성\n-    console.log('시스템 관리자 계정을 생성합니다.');\n-    await dbManager.addStaff({\n-      name: SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_DISPLAY_NAME,\n-      loginId: SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID,\n-      password: SYSTEM_ADMIN_CONFIG.TEMP_PASSWORD,\n-      email: 'admin@lavida.com', // 임시 이메일\n-      phone: '010-0000-0000', // 임시 전화번호\n-      branchId: defaultBranch.id, // 찾은 또는 생성된 '전체' 지점 사용\n-      position: '대표',\n-      role: '센터장',\n-      employmentType: '정규직',\n-      permission: 'MASTER',\n-      contractStartDate: new Date(),\n-      contractEndDate: null, // 정규직이므로 계약종료일 없음\n-    });\n-    \n-    console.log('시스템 관리자 계정이 성공적으로 생성되었습니다.');\n-    return true; // 새로운 계정이 생성됨\n-  } catch (error) {\n-    console.error('시스템 관리자 초기화 실패:', error);\n-    return false;\n-  }\n-};\n-\n-/**\n- * 시스템이 초기 설정 상태인지 확인\n- * - 시스템 관리자가 기본 정보(임시 이메일, 전화번호)를 사용하고 있는지 확인\n- */\n-export const isSystemInInitialState = async (): Promise<boolean> => {\n-  try {\n-    const systemAdmin = await dbManager.getStaffByLoginId(SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID);\n-    \n-    if (!systemAdmin) {\n-      return true; // 시스템 관리자가 없으면 초기 상태\n-    }\n-    \n-    // 임시 정보를 사용하고 있는지 확인\n-    const hasTemporaryEmail = systemAdmin.email === 'admin@lavida.com';\n-    const hasTemporaryPhone = systemAdmin.phone === '010-0000-0000';\n-    \n-    return hasTemporaryEmail || hasTemporaryPhone;\n-  } catch (error) {\n-    console.error('시스템 초기 상태 확인 실패:', error);\n-    return true; // 오류 시 초기 상태로 간주\n-  }\n-};\n-\n-/**\n- * 시스템 초기 설정 완료 처리\n- * 시스템 관리자가 정보를 업데이트했을 때 호출\n- */\n-export const markSystemInitialized = async (): Promise<void> => {\n-  // 현재는 별도 플래그 없이 시스템 관리자 정보로만 판단\n-  // 필요시 localStorage 또는 별도 설정 테이블 사용 가능\n-};\n-\n-/**\n- * 시스템 최초 실행 시 자동 초기화\n- * App.tsx에서 호출하여 시스템 관리자가 없으면 자동 생성\n- */\n-export const autoInitializeSystem = async (): Promise<void> => {\n-  try {\n-    await initializeSystemAdmin();\n-  } catch (error) {\n-    console.error('시스템 자동 초기화 실패:', error);\n-  }\n-};\n"
                },
                {
                    "date": 1760074506212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,9 @@\n       employmentType: '정규직',\n       permission: 'MASTER',\n       contractStartDate: new Date(),\n       contractEndDate: null, // 정규직이므로 계약종료일 없음\n+      isActive: true, // 시스템 관리자는 기본적으로 활성 상태\n     });\n     \n     console.log('시스템 관리자 계정이 성공적으로 생성되었습니다.');\n     return true; // 새로운 계정이 생성됨\n"
                },
                {
                    "date": 1760755500672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,28 +43,35 @@\n  * 시스템 최초 실행 시 또는 시스템 관리자가 없을 때 호출\n  */\n export const initializeSystemAdmin = async (): Promise<boolean> => {\n   try {\n+    console.log('🔍 시스템 관리자 존재 여부 확인 중...');\n+    \n     // 이미 시스템 관리자가 존재하는지 확인\n     const existingAdmin = await dbManager.getStaffByLoginId(SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID);\n     \n     if (existingAdmin) {\n       // 이미 시스템 관리자가 존재함\n-      console.log('시스템 관리자가 이미 존재합니다.');\n+      console.log('✅ 시스템 관리자가 이미 존재합니다.');\n       return false;\n     }\n+\n+    console.log('📋 시스템 관리자가 없습니다. 새로 생성합니다...');\n     \n+    // IndexedDB 연결 상태 확인\n+    await ensureDatabaseConnection();\n+    \n     // '전체' 지점 확인 또는 생성 (원자적 처리로 중복 방지)\n-    console.log(\"'전체' 지점을 확인하거나 생성합니다.\");\n+    console.log(\"🏢 '전체' 지점을 확인하거나 생성합니다...\");\n     const defaultBranch = await dbManager.getOrCreateBranchByName('전체', {\n       address: '',\n       phone: '',\n       isActive: true\n     });\n-    console.log(\"'전체' 지점 처리 완료:\", defaultBranch.id);\n-    \n+    console.log(\"✅ '전체' 지점 처리 완료:\", defaultBranch.id);\n+\n     // 시스템 관리자 계정 생성\n-    console.log('시스템 관리자 계정을 생성합니다.');\n+    console.log('👤 시스템 관리자 계정을 생성합니다...');\n     await dbManager.addStaff({\n       name: SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_DISPLAY_NAME,\n       loginId: SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID,\n       password: SYSTEM_ADMIN_CONFIG.TEMP_PASSWORD,\n@@ -78,18 +85,52 @@\n       contractStartDate: new Date(),\n       contractEndDate: null, // 정규직이므로 계약종료일 없음\n       isActive: true, // 시스템 관리자는 기본적으로 활성 상태\n     });\n+\n+    console.log('🎉 시스템 관리자 계정이 성공적으로 생성되었습니다!');\n     \n-    console.log('시스템 관리자 계정이 성공적으로 생성되었습니다.');\n-    return true; // 새로운 계정이 생성됨\n+    // 생성 확인\n+    const verifyAdmin = await dbManager.getStaffByLoginId(SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID);\n+    if (verifyAdmin) {\n+      console.log('✅ 시스템 관리자 생성 검증 완료:', verifyAdmin.name);\n+      return true; // 새로운 계정이 생성됨\n+    } else {\n+      console.error('❌ 시스템 관리자 생성 검증 실패');\n+      return false;\n+    }\n   } catch (error) {\n-    console.error('시스템 관리자 초기화 실패:', error);\n+    console.error('❌ 시스템 관리자 초기화 실패:', error);\n     return false;\n   }\n };\n \n /**\n+ * IndexedDB 연결이 확실히 준비되었는지 확인\n+ */\n+const ensureDatabaseConnection = async (): Promise<void> => {\n+  let attempts = 0;\n+  const maxAttempts = 5;\n+  \n+  while (attempts < maxAttempts) {\n+    try {\n+      // 간단한 연결 테스트\n+      await dbManager.getAllBranches();\n+      console.log('✅ IndexedDB 연결 확인됨');\n+      return;\n+    } catch (error) {\n+      attempts++;\n+      console.log(`🔄 IndexedDB 연결 재시도... (${attempts}/${maxAttempts})`);\n+      \n+      if (attempts >= maxAttempts) {\n+        throw new Error('IndexedDB 연결에 실패했습니다');\n+      }\n+      \n+      // 500ms 대기 후 재시도\n+      await new Promise(resolve => setTimeout(resolve, 500));\n+    }\n+  }\n+};/**\n  * 시스템이 초기 설정 상태인지 확인 (더 이상 모달 팝업용으로 사용하지 않음)\n  * - 시스템 관리자가 기본 정보(임시 이메일, 전화번호)를 사용하고 있는지 확인\n  * - 이제 단순 정보 확인용으로만 사용\n  */\n@@ -126,15 +167,38 @@\n  * App.tsx에서 호출하여 시스템 관리자가 없으면 자동 생성\n  */\n export const autoInitializeSystem = async (): Promise<void> => {\n   try {\n+    console.log('🚀 시스템 자동 초기화를 시작합니다...');\n+    \n     // 먼저 기존 중복 데이터 정리 (한 번만 실행)\n     if (!localStorage.getItem('lavida_cleanup_done')) {\n+      console.log('🧹 중복 데이터 정리를 시작합니다...');\n       await cleanupDuplicateBranches();\n       localStorage.setItem('lavida_cleanup_done', 'true');\n+      console.log('✅ 중복 데이터 정리 완료');\n     }\n     \n-    await initializeSystemAdmin();\n+    // 시스템 관리자 초기화\n+    const adminCreated = await initializeSystemAdmin();\n+    \n+    if (adminCreated) {\n+      console.log('🎉 새로운 시스템 관리자가 생성되었습니다!');\n+    } else {\n+      console.log('ℹ️ 시스템 관리자가 이미 존재하거나 생성에 실패했습니다.');\n+    }\n+    \n+    console.log('✅ 시스템 자동 초기화 완료');\n   } catch (error) {\n-    console.error('시스템 자동 초기화 실패:', error);\n+    console.error('❌ 시스템 자동 초기화 실패:', error);\n+    \n+    // 재시도 로직 (한 번만)\n+    try {\n+      console.log('🔄 시스템 초기화 재시도...');\n+      await new Promise(resolve => setTimeout(resolve, 1000)); // 1초 대기\n+      await initializeSystemAdmin();\n+      console.log('✅ 재시도로 시스템 초기화 성공');\n+    } catch (retryError) {\n+      console.error('❌ 재시도도 실패:', retryError);\n+    }\n   }\n };\n"
                },
                {
                    "date": 1760755816562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,12 +74,12 @@\n     await dbManager.addStaff({\n       name: SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_DISPLAY_NAME,\n       loginId: SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID,\n       password: SYSTEM_ADMIN_CONFIG.TEMP_PASSWORD,\n-      email: 'admin@lavida.com', // 임시 이메일\n-      phone: '010-0000-0000', // 임시 전화번호\n+      email: SYSTEM_ADMIN_CONFIG.DEFAULT_EMAIL,\n+      phone: SYSTEM_ADMIN_CONFIG.DEFAULT_PHONE,\n       branchId: defaultBranch.id, // 찾은 또는 생성된 '전체' 지점 사용\n-      position: '대표',\n+      position: SYSTEM_ADMIN_CONFIG.DEFAULT_POSITION,\n       role: '센터장',\n       employmentType: '정규직',\n       permission: 'MASTER',\n       contractStartDate: new Date(),\n@@ -130,9 +130,9 @@\n     }\n   }\n };/**\n  * 시스템이 초기 설정 상태인지 확인 (더 이상 모달 팝업용으로 사용하지 않음)\n- * - 시스템 관리자가 기본 정보(임시 이메일, 전화번호)를 사용하고 있는지 확인\n+ * - 시스템 관리자가 기본 정보를 사용하고 있는지 확인\n  * - 이제 단순 정보 확인용으로만 사용\n  */\n export const isSystemInInitialState = async (): Promise<boolean> => {\n   try {\n@@ -141,13 +141,13 @@\n     if (!systemAdmin) {\n       return true; // 시스템 관리자가 없으면 초기 상태\n     }\n     \n-    // 임시 정보를 사용하고 있는지 확인 (정보용으로만 사용)\n-    const hasTemporaryEmail = systemAdmin.email === 'admin@lavida.com';\n-    const hasTemporaryPhone = systemAdmin.phone === '010-0000-0000';\n+    // 설정된 기본 정보를 사용하고 있는지 확인 (정보용으로만 사용)\n+    const hasDefaultEmail = systemAdmin.email === SYSTEM_ADMIN_CONFIG.DEFAULT_EMAIL;\n+    const hasDefaultPhone = systemAdmin.phone === SYSTEM_ADMIN_CONFIG.DEFAULT_PHONE;\n     \n-    return hasTemporaryEmail || hasTemporaryPhone;\n+    return hasDefaultEmail && hasDefaultPhone;\n   } catch (error) {\n     console.error('시스템 초기 상태 확인 실패:', error);\n     return true; // 오류 시 초기 상태로 간주\n   }\n"
                }
            ],
            "date": 1759911046491,
            "name": "Commit-0",
            "content": "/**\n * 시스템 초기화 관련 유틸리티\n * 시스템 관리자 자동 생성 및 초기 설정\n */\n\nimport { dbManager } from './indexedDB';\nimport { SYSTEM_ADMIN_CONFIG } from '../constants/staffConstants';\n\n/**\n * 시스템 관리자 계정 자동 생성\n * 시스템 최초 실행 시 또는 시스템 관리자가 없을 때 호출\n */\nexport const initializeSystemAdmin = async (): Promise<boolean> => {\n  try {\n    // 이미 시스템 관리자가 존재하는지 확인\n    const existingAdmin = await dbManager.getStaffByLoginId(SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID);\n    \n    if (existingAdmin) {\n      // 이미 시스템 관리자가 존재함\n      return false;\n    }\n    \n    // 기본 지점이 없으면 생성\n    let branches = await dbManager.getAllBranches();\n    if (branches.length === 0) {\n      const defaultBranch = await dbManager.addBranch({\n        name: '본사',\n        address: '',\n        phone: '',\n        isActive: true\n      });\n      branches = [defaultBranch];\n    }\n    \n    // 시스템 관리자 계정 생성\n    await dbManager.addStaff({\n      name: SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_DISPLAY_NAME,\n      loginId: SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID,\n      password: SYSTEM_ADMIN_CONFIG.TEMP_PASSWORD,\n      email: 'admin@lavida.com', // 임시 이메일\n      phone: '010-0000-0000', // 임시 전화번호\n      branchId: branches[0].id,\n      position: '대표',\n      role: '센터장',\n      employmentType: '정규직',\n      permission: 'MASTER',\n      contractStartDate: new Date(),\n      contractEndDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1년 후\n    });\n    \n    return true; // 새로운 계정이 생성됨\n  } catch (error) {\n    console.error('시스템 관리자 초기화 실패:', error);\n    return false;\n  }\n};\n\n/**\n * 시스템이 초기 설정 상태인지 확인\n * - 시스템 관리자가 기본 정보(임시 이메일, 전화번호)를 사용하고 있는지 확인\n */\nexport const isSystemInInitialState = async (): Promise<boolean> => {\n  try {\n    const systemAdmin = await dbManager.getStaffByLoginId(SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID);\n    \n    if (!systemAdmin) {\n      return true; // 시스템 관리자가 없으면 초기 상태\n    }\n    \n    // 임시 정보를 사용하고 있는지 확인\n    const hasTemporaryEmail = systemAdmin.email === 'admin@lavida.com';\n    const hasTemporaryPhone = systemAdmin.phone === '010-0000-0000';\n    \n    return hasTemporaryEmail || hasTemporaryPhone;\n  } catch (error) {\n    console.error('시스템 초기 상태 확인 실패:', error);\n    return true; // 오류 시 초기 상태로 간주\n  }\n};\n\n/**\n * 시스템 초기 설정 완료 처리\n * 시스템 관리자가 정보를 업데이트했을 때 호출\n */\nexport const markSystemInitialized = async (): Promise<void> => {\n  // 현재는 별도 플래그 없이 시스템 관리자 정보로만 판단\n  // 필요시 localStorage 또는 별도 설정 테이블 사용 가능\n};\n\n/**\n * 시스템 최초 실행 시 자동 초기화\n * App.tsx에서 호출하여 시스템 관리자가 없으면 자동 생성\n */\nexport const autoInitializeSystem = async (): Promise<void> => {\n  try {\n    await initializeSystemAdmin();\n  } catch (error) {\n    console.error('시스템 자동 초기화 실패:', error);\n  }\n};\n"
        }
    ]
}