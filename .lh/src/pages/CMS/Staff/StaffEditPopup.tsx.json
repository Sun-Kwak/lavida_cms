{
    "sourceFile": "src/pages/CMS/Staff/StaffEditPopup.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1759904013901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759904230626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,13 @@\n import React, { useState, useEffect } from 'react';\n import styled from 'styled-components';\n import Modal from '../../../components/Modal';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import CustomDateInput from '../../../components/CustomDateInput';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n+import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n \n const FormContainer = styled.div`\n   width: 100%;\n   max-height: 80vh;\n@@ -31,54 +34,99 @@\n   margin-bottom: 8px;\n `;\n \n const Input = styled.input`\n-  padding: 12px;\n+  height: 48px;\n+  padding: 0 16px;\n   border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n+  border-radius: 12px;\n   font-size: ${AppTextStyles.body1.fontSize};\n   outline: none;\n+  background: ${AppColors.surface};\n+  color: ${AppColors.onSurface};\n+  transition: all 0.2s ease;\n+  box-sizing: border-box;\n   \n+  &:hover {\n+    border-color: ${AppColors.primary};\n+    box-shadow: 0 2px 8px rgba(55, 187, 214, 0.1);\n+  }\n+  \n   &:focus {\n     border-color: ${AppColors.primary};\n+    box-shadow: 0 0 0 3px rgba(55, 187, 214, 0.1);\n   }\n   \n   &::placeholder {\n     color: ${AppColors.onInput1};\n   }\n+  \n+  &:disabled {\n+    background-color: ${AppColors.background};\n+    color: ${AppColors.disabled};\n+    border-color: ${AppColors.borderLight};\n+  }\n `;\n \n-const Select = styled.select`\n-  padding: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n+const FileUploadContainer = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 8px;\n+`;\n+\n+const FileUploadButton = styled.label`\n+  display: inline-flex;\n+  align-items: center;\n+  justify-content: center;\n+  gap: 8px;\n+  min-height: 48px;\n+  padding: 14px 16px;\n+  border: 2px dashed ${AppColors.borderLight};\n+  border-radius: 12px;\n+  background-color: ${AppColors.surface};\n+  color: ${AppColors.onSurface};\n   font-size: ${AppTextStyles.body1.fontSize};\n-  outline: none;\n-  background: ${AppColors.surface};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n   \n-  &:focus {\n+  &:hover {\n     border-color: ${AppColors.primary};\n+    background-color: ${AppColors.primary}08;\n+    color: ${AppColors.primary};\n+    box-shadow: 0 2px 8px rgba(55, 187, 214, 0.1);\n   }\n `;\n \n-const FileInput = styled.input`\n-  padding: 12px;\n+const HiddenFileInput = styled.input.attrs({ type: 'file' })`\n+  display: none;\n+`;\n+\n+const FileInfo = styled.div`\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  min-height: 48px;\n+  padding: 14px 16px;\n+  background-color: ${AppColors.background};\n   border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  outline: none;\n+  border-radius: 12px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n+`;\n+\n+const FileRemoveButton = styled.button`\n+  background: none;\n+  border: none;\n+  color: ${AppColors.error};\n+  cursor: pointer;\n+  padding: 4px;\n+  border-radius: 4px;\n   \n-  &:focus {\n-    border-color: ${AppColors.primary};\n+  &:hover {\n+    background-color: ${AppColors.error}10;\n   }\n `;\n \n-const CurrentFile = styled.div`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onInput1};\n-  margin-top: 4px;\n-`;\n-\n const ButtonContainer = styled.div`\n   display: flex;\n   gap: 12px;\n   justify-content: flex-end;\n@@ -175,8 +223,55 @@\n       loadBranches();\n     }\n   }, [isOpen]);\n \n+  // 드롭다운 옵션 변환 함수들\n+  const getBranchOptions = () => {\n+    return branches.map(branch => ({\n+      value: branch.id,\n+      label: branch.name,\n+      description: branch.address\n+    }));\n+  };\n+\n+  const getPositionOptions = () => {\n+    return POSITIONS.map(position => ({\n+      value: position,\n+      label: position\n+    }));\n+  };\n+\n+  const getRoleOptions = () => {\n+    return ROLES.map(role => ({\n+      value: role,\n+      label: role\n+    }));\n+  };\n+\n+  const getEmploymentTypeOptions = () => {\n+    return EMPLOYMENT_TYPES.map(type => ({\n+      value: type,\n+      label: type\n+    }));\n+  };\n+\n+  const getPermissionOptions = () => {\n+    return PERMISSIONS.map(permission => ({\n+      value: permission.value,\n+      label: permission.label,\n+      description: permission.description\n+    }));\n+  };\n+\n+  // 날짜 범위 계산 함수들\n+  const getContractStartDateMax = (): string | undefined => {\n+    return formData.contractEndDate ? formatDateForInput(formData.contractEndDate) : undefined;\n+  };\n+\n+  const getContractEndDateMin = (): string | undefined => {\n+    return formData.contractStartDate ? formatDateForInput(formData.contractStartDate) : undefined;\n+  };\n+\n   const validateForm = (): boolean => {\n     const newErrors: Record<string, string> = {};\n \n     if (!formData.name?.trim()) {\n@@ -233,35 +328,72 @@\n     return Object.keys(newErrors).length === 0;\n   };\n \n   const handleInputChange = (\n-    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>\n+    field: keyof Staff,\n+    value: string | File | null | Date\n   ) => {\n-    const { name, value } = e.target;\n-    setFormData(prev => ({\n-      ...prev,\n-      [name]: value\n-    }));\n+    // 전화번호 필드인 경우 자동 포맷팅\n+    if (field === 'phone' && typeof value === 'string') {\n+      const formattedPhone = formatPhoneNumber(value);\n+      setFormData(prev => ({ ...prev, [field]: formattedPhone }));\n+    } else {\n+      setFormData(prev => ({ ...prev, [field]: value }));\n+    }\n \n     // 에러 메시지 제거\n-    if (errors[name]) {\n+    if (errors[field]) {\n       setErrors(prev => ({\n         ...prev,\n-        [name]: ''\n+        [field]: ''\n       }));\n     }\n   };\n \n+  // 전화번호 자동 포맷팅 함수\n+  const formatPhoneNumber = (value: string): string => {\n+    // 숫자만 추출\n+    const numbers = value.replace(/[^\\d]/g, '');\n+    \n+    // 11자리를 초과하면 잘라내기\n+    const truncated = numbers.slice(0, 11);\n+    \n+    // 자동 하이픈 추가 (01로 시작하지 않아도 포맷팅은 적용)\n+    if (truncated.length <= 3) {\n+      return truncated;\n+    } else if (truncated.length <= 7) {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3)}`;\n+    } else {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3, 7)}-${truncated.slice(7)}`;\n+    }\n+  };\n+\n   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n-    const file = e.target.files?.[0];\n+    const file = e.target.files?.[0] || null;\n+    \n     if (file) {\n-      setFormData(prev => ({\n-        ...prev,\n-        contractFile: file\n-      }));\n+      // 파일 타입 검증 (이미지 또는 PDF만 허용)\n+      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n+      if (!allowedTypes.includes(file.type)) {\n+        setErrors(prev => ({ ...prev, contractFile: '이미지(JPG, PNG) 또는 PDF 파일만 업로드 가능합니다.' }));\n+        return;\n+      }\n+      \n+      // 파일 크기 검증 (10MB 제한)\n+      if (file.size > 10 * 1024 * 1024) {\n+        setErrors(prev => ({ ...prev, contractFile: '파일 크기는 10MB 이하여야 합니다.' }));\n+        return;\n+      }\n     }\n+    \n+    handleInputChange('contractFile', file);\n   };\n \n+  const removeFile = () => {\n+    handleInputChange('contractFile', null);\n+    setErrors(prev => ({ ...prev, contractFile: '' }));\n+  };\n+\n   const handleUpdate = async () => {\n     if (!staff || !validateForm()) return;\n \n     setLoading(true);\n@@ -313,23 +445,22 @@\n         <FormGroup>\n           <Label>이름 *</Label>\n           <Input\n             type=\"text\"\n-            name=\"name\"\n             value={formData.name || ''}\n-            onChange={handleInputChange}\n+            onChange={(e) => handleInputChange('name', e.target.value)}\n             placeholder=\"직원 이름을 입력하세요\"\n           />\n           {errors.name && <ErrorMessage>{errors.name}</ErrorMessage>}\n         </FormGroup>\n         <FormGroup>\n           <Label>전화번호 *</Label>\n           <Input\n             type=\"tel\"\n-            name=\"phone\"\n             value={formData.phone || ''}\n-            onChange={handleInputChange}\n+            onChange={(e) => handleInputChange('phone', e.target.value)}\n             placeholder=\"010-1234-5678\"\n+            maxLength={13}\n           />\n           {errors.phone && <ErrorMessage>{errors.phone}</ErrorMessage>}\n         </FormGroup>\n       </FormRow>\n@@ -338,126 +469,129 @@\n         <FormGroup>\n           <Label>이메일 *</Label>\n           <Input\n             type=\"email\"\n-            name=\"email\"\n             value={formData.email || ''}\n-            onChange={handleInputChange}\n+            onChange={(e) => handleInputChange('email', e.target.value)}\n             placeholder=\"email@example.com\"\n           />\n           {errors.email && <ErrorMessage>{errors.email}</ErrorMessage>}\n         </FormGroup>\n         <FormGroup>\n           <Label>지점 *</Label>\n-          <Select\n-            name=\"branchId\"\n+          <CustomDropdown\n             value={formData.branchId || ''}\n-            onChange={handleInputChange}\n-          >\n-            <option value=\"\">지점을 선택하세요</option>\n-            {branches.map(branch => (\n-              <option key={branch.id} value={branch.id}>\n-                {branch.name}\n-              </option>\n-            ))}\n-          </Select>\n+            onChange={(value) => handleInputChange('branchId', value)}\n+            options={getBranchOptions()}\n+            placeholder=\"지점을 선택하세요\"\n+            error={!!errors.branchId}\n+          />\n           {errors.branchId && <ErrorMessage>{errors.branchId}</ErrorMessage>}\n         </FormGroup>\n       </FormRow>\n \n       <FormRow>\n         <FormGroup>\n           <Label>직급 *</Label>\n-          <Input\n-            type=\"text\"\n-            name=\"position\"\n+          <CustomDropdown\n             value={formData.position || ''}\n-            onChange={handleInputChange}\n-            placeholder=\"예: 매니저, 사원, 팀장\"\n+            onChange={(value) => handleInputChange('position', value)}\n+            options={getPositionOptions()}\n+            placeholder=\"직급을 선택하세요\"\n+            error={!!errors.position}\n           />\n           {errors.position && <ErrorMessage>{errors.position}</ErrorMessage>}\n         </FormGroup>\n         <FormGroup>\n           <Label>직책 *</Label>\n-          <Input\n-            type=\"text\"\n-            name=\"role\"\n+          <CustomDropdown\n             value={formData.role || ''}\n-            onChange={handleInputChange}\n-            placeholder=\"예: 운영팀장, 마케팅 담당\"\n+            onChange={(value) => handleInputChange('role', value)}\n+            options={getRoleOptions()}\n+            placeholder=\"직책을 선택하세요\"\n+            error={!!errors.role}\n           />\n           {errors.role && <ErrorMessage>{errors.role}</ErrorMessage>}\n         </FormGroup>\n       </FormRow>\n \n       <FormRow>\n         <FormGroup>\n           <Label>고용형태 *</Label>\n-          <Select\n-            name=\"employmentType\"\n+          <CustomDropdown\n             value={formData.employmentType || ''}\n-            onChange={handleInputChange}\n-          >\n-            <option value=\"\">고용형태를 선택하세요</option>\n-            <option value=\"정규직\">정규직</option>\n-            <option value=\"계약직\">계약직</option>\n-            <option value=\"파트타임\">파트타임</option>\n-            <option value=\"인턴\">인턴</option>\n-          </Select>\n+            onChange={(value) => handleInputChange('employmentType', value)}\n+            options={getEmploymentTypeOptions()}\n+            placeholder=\"고용형태를 선택하세요\"\n+            error={!!errors.employmentType}\n+          />\n           {errors.employmentType && <ErrorMessage>{errors.employmentType}</ErrorMessage>}\n         </FormGroup>\n         <FormGroup>\n           <Label>권한 *</Label>\n-          <Select\n-            name=\"permission\"\n+          <CustomDropdown\n             value={formData.permission || ''}\n-            onChange={handleInputChange}\n-          >\n-            <option value=\"\">권한을 선택하세요</option>\n-            <option value=\"MASTER\">MASTER (전체 관리)</option>\n-            <option value=\"EDITOR\">EDITOR (편집 권한)</option>\n-            <option value=\"VIEWER\">VIEWER (조회 권한)</option>\n-          </Select>\n+            onChange={(value) => handleInputChange('permission', value)}\n+            options={getPermissionOptions()}\n+            placeholder=\"권한을 선택하세요\"\n+            error={!!errors.permission}\n+          />\n           {errors.permission && <ErrorMessage>{errors.permission}</ErrorMessage>}\n         </FormGroup>\n       </FormRow>\n \n       <FormRow>\n         <FormGroup>\n           <Label>계약 시작일 *</Label>\n-          <Input\n-            type=\"date\"\n-            name=\"contractStartDate\"\n+          <CustomDateInput\n             value={formatDateForInput(formData.contractStartDate || '')}\n-            onChange={handleInputChange}\n+            onChange={(value) => handleInputChange('contractStartDate', new Date(value))}\n+            placeholder=\"계약시작일을 선택하세요\"\n+            error={!!errors.contractStartDate}\n+            max={getContractStartDateMax()}\n           />\n           {errors.contractStartDate && <ErrorMessage>{errors.contractStartDate}</ErrorMessage>}\n         </FormGroup>\n         <FormGroup>\n           <Label>계약 종료일 *</Label>\n-          <Input\n-            type=\"date\"\n-            name=\"contractEndDate\"\n+          <CustomDateInput\n             value={formatDateForInput(formData.contractEndDate || '')}\n-            onChange={handleInputChange}\n+            onChange={(value) => handleInputChange('contractEndDate', new Date(value))}\n+            placeholder=\"계약종료일을 선택하세요\"\n+            error={!!errors.contractEndDate}\n+            min={getContractEndDateMin()}\n           />\n           {errors.contractEndDate && <ErrorMessage>{errors.contractEndDate}</ErrorMessage>}\n         </FormGroup>\n       </FormRow>\n \n       <FormRow>\n         <FormGroup>\n           <Label>계약서 파일</Label>\n-          <FileInput\n-            type=\"file\"\n-            accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n-            onChange={handleFileChange}\n-          />\n-          {staff?.contractFileName && (\n-            <CurrentFile>\n-              현재 파일: {staff.contractFileName}\n-            </CurrentFile>\n-          )}\n+          <FileUploadContainer>\n+            {!formData.contractFile ? (\n+              <FileUploadButton>\n+                <HiddenFileInput\n+                  accept=\"image/*,application/pdf\"\n+                  onChange={handleFileChange}\n+                />\n+                📎 이미지 또는 PDF 파일 선택 (최대 10MB)\n+              </FileUploadButton>\n+            ) : (\n+              <FileInfo>\n+                <span>📄 {formData.contractFile.name}</span>\n+                <FileRemoveButton type=\"button\" onClick={removeFile}>\n+                  ✕\n+                </FileRemoveButton>\n+              </FileInfo>\n+            )}\n+            {staff?.contractFileName && !formData.contractFile && (\n+              <FileInfo>\n+                <span>📄 현재 파일: {staff.contractFileName}</span>\n+              </FileInfo>\n+            )}\n+            {errors.contractFile && <ErrorMessage>{errors.contractFile}</ErrorMessage>}\n+          </FileUploadContainer>\n         </FormGroup>\n       </FormRow>\n \n       <ButtonContainer>\n"
                },
                {
                    "date": 1759904790081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import styled from 'styled-components';\n import Modal from '../../../components/Modal';\n import CustomDropdown from '../../../components/CustomDropdown';\n import CustomDateInput from '../../../components/CustomDateInput';\n+import { StaffTextField, StaffPhoneField, StaffEmailField, StaffFileUploadField } from '../../../components/StaffFormComponents';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n@@ -331,67 +332,33 @@\n   const handleInputChange = (\n     field: keyof Staff,\n     value: string | File | null | Date\n   ) => {\n-    // 전화번호 필드인 경우 자동 포맷팅\n-    if (field === 'phone' && typeof value === 'string') {\n-      const formattedPhone = formatPhoneNumber(value);\n-      setFormData(prev => ({ ...prev, [field]: formattedPhone }));\n-    } else {\n-      setFormData(prev => ({ ...prev, [field]: value }));\n-    }\n-\n-    // 에러 메시지 제거\n-    if (errors[field]) {\n-      setErrors(prev => ({\n-        ...prev,\n-        [field]: ''\n-      }));\n-    }\n-  };\n-\n-  // 전화번호 자동 포맷팅 함수\n-  const formatPhoneNumber = (value: string): string => {\n-    // 숫자만 추출\n-    const numbers = value.replace(/[^\\d]/g, '');\n-    \n-    // 11자리를 초과하면 잘라내기\n-    const truncated = numbers.slice(0, 11);\n-    \n-    // 자동 하이픈 추가 (01로 시작하지 않아도 포맷팅은 적용)\n-    if (truncated.length <= 3) {\n-      return truncated;\n-    } else if (truncated.length <= 7) {\n-      return `${truncated.slice(0, 3)}-${truncated.slice(3)}`;\n-    } else {\n-      return `${truncated.slice(0, 3)}-${truncated.slice(3, 7)}-${truncated.slice(7)}`;\n-    }\n-  };\n-\n-  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n-    const file = e.target.files?.[0] || null;\n-    \n-    if (file) {\n+    // 파일 업로드 필드인 경우 검증 수행\n+    if (field === 'contractFile' && value instanceof File) {\n       // 파일 타입 검증 (이미지 또는 PDF만 허용)\n       const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n-      if (!allowedTypes.includes(file.type)) {\n+      if (!allowedTypes.includes(value.type)) {\n         setErrors(prev => ({ ...prev, contractFile: '이미지(JPG, PNG) 또는 PDF 파일만 업로드 가능합니다.' }));\n         return;\n       }\n       \n       // 파일 크기 검증 (10MB 제한)\n-      if (file.size > 10 * 1024 * 1024) {\n+      if (value.size > 10 * 1024 * 1024) {\n         setErrors(prev => ({ ...prev, contractFile: '파일 크기는 10MB 이하여야 합니다.' }));\n         return;\n       }\n     }\n-    \n-    handleInputChange('contractFile', file);\n-  };\n \n-  const removeFile = () => {\n-    handleInputChange('contractFile', null);\n-    setErrors(prev => ({ ...prev, contractFile: '' }));\n+    setFormData(prev => ({ ...prev, [field]: value }));\n+\n+    // 에러 메시지 제거\n+    if (errors[field]) {\n+      setErrors(prev => ({\n+        ...prev,\n+        [field]: ''\n+      }));\n+    }\n   };\n \n   const handleUpdate = async () => {\n     if (!staff || !validateForm()) return;\n@@ -442,40 +409,37 @@\n   const modalBody = (\n     <FormContainer>\n       <FormRow>\n         <FormGroup>\n-          <Label>이름 *</Label>\n-          <Input\n-            type=\"text\"\n+          <StaffTextField\n+            label=\"이름\"\n             value={formData.name || ''}\n-            onChange={(e) => handleInputChange('name', e.target.value)}\n+            onChange={(value) => handleInputChange('name', value)}\n             placeholder=\"직원 이름을 입력하세요\"\n+            errorMessage={errors.name}\n+            required\n           />\n-          {errors.name && <ErrorMessage>{errors.name}</ErrorMessage>}\n         </FormGroup>\n         <FormGroup>\n-          <Label>전화번호 *</Label>\n-          <Input\n-            type=\"tel\"\n+          <StaffPhoneField\n+            label=\"전화번호\"\n             value={formData.phone || ''}\n-            onChange={(e) => handleInputChange('phone', e.target.value)}\n-            placeholder=\"010-1234-5678\"\n-            maxLength={13}\n+            onChange={(value) => handleInputChange('phone', value)}\n+            errorMessage={errors.phone}\n+            required\n           />\n-          {errors.phone && <ErrorMessage>{errors.phone}</ErrorMessage>}\n         </FormGroup>\n       </FormRow>\n \n       <FormRow>\n         <FormGroup>\n-          <Label>이메일 *</Label>\n-          <Input\n-            type=\"email\"\n+          <StaffEmailField\n+            label=\"이메일\"\n             value={formData.email || ''}\n-            onChange={(e) => handleInputChange('email', e.target.value)}\n-            placeholder=\"email@example.com\"\n+            onChange={(value) => handleInputChange('email', value)}\n+            errorMessage={errors.email}\n+            required\n           />\n-          {errors.email && <ErrorMessage>{errors.email}</ErrorMessage>}\n         </FormGroup>\n         <FormGroup>\n           <Label>지점 *</Label>\n           <CustomDropdown\n@@ -488,9 +452,9 @@\n           {errors.branchId && <ErrorMessage>{errors.branchId}</ErrorMessage>}\n         </FormGroup>\n       </FormRow>\n \n-      <FormRow>\n+            <FormRow>\n         <FormGroup>\n           <Label>직급 *</Label>\n           <CustomDropdown\n             value={formData.position || ''}\n@@ -565,36 +529,53 @@\n       </FormRow>\n \n       <FormRow>\n         <FormGroup>\n-          <Label>계약서 파일</Label>\n-          <FileUploadContainer>\n-            {!formData.contractFile ? (\n-              <FileUploadButton>\n-                <HiddenFileInput\n-                  accept=\"image/*,application/pdf\"\n-                  onChange={handleFileChange}\n-                />\n-                📎 이미지 또는 PDF 파일 선택 (최대 10MB)\n-              </FileUploadButton>\n-            ) : (\n-              <FileInfo>\n-                <span>📄 {formData.contractFile.name}</span>\n-                <FileRemoveButton type=\"button\" onClick={removeFile}>\n-                  ✕\n-                </FileRemoveButton>\n-              </FileInfo>\n-            )}\n-            {staff?.contractFileName && !formData.contractFile && (\n-              <FileInfo>\n-                <span>📄 현재 파일: {staff.contractFileName}</span>\n-              </FileInfo>\n-            )}\n-            {errors.contractFile && <ErrorMessage>{errors.contractFile}</ErrorMessage>}\n-          </FileUploadContainer>\n+          <StaffFileUploadField\n+            label=\"계약서 파일\"\n+            value={formData.contractFile || null}\n+            onChange={(file) => handleInputChange('contractFile', file)}\n+            placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n+            errorMessage={errors.contractFile}\n+            fullWidth\n+          />\n+          {staff?.contractFileName && !formData.contractFile && (\n+            <div style={{ \n+              fontSize: AppTextStyles.body2.fontSize, \n+              color: AppColors.onInput1, \n+              marginTop: '4px' \n+            }}>\n+              현재 파일: {staff.contractFileName}\n+            </div>\n+          )}\n         </FormGroup>\n       </FormRow>\n \n+      <FormRow>\n+        <FormGroup>\n+          <Label>계약 시작일 *</Label>\n+          <CustomDateInput\n+            value={formatDateForInput(formData.contractStartDate || '')}\n+            onChange={(value) => handleInputChange('contractStartDate', new Date(value))}\n+            placeholder=\"계약시작일을 선택하세요\"\n+            error={!!errors.contractStartDate}\n+            max={getContractStartDateMax()}\n+          />\n+          {errors.contractStartDate && <ErrorMessage>{errors.contractStartDate}</ErrorMessage>}\n+        </FormGroup>\n+        <FormGroup>\n+          <Label>계약 종료일 *</Label>\n+          <CustomDateInput\n+            value={formatDateForInput(formData.contractEndDate || '')}\n+            onChange={(value) => handleInputChange('contractEndDate', new Date(value))}\n+            placeholder=\"계약종료일을 선택하세요\"\n+            error={!!errors.contractEndDate}\n+            min={getContractEndDateMin()}\n+          />\n+          {errors.contractEndDate && <ErrorMessage>{errors.contractEndDate}</ErrorMessage>}\n+        </FormGroup>\n+      </FormRow>\n+\n       <ButtonContainer>\n         <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n           취소\n         </Button>\n"
                },
                {
                    "date": 1759905296469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,13 +27,18 @@\n   display: flex;\n   flex-direction: column;\n `;\n \n-const Label = styled.label`\n+const Label = styled.label<{ $required?: boolean }>`\n   font-size: ${AppTextStyles.label1.fontSize};\n   font-weight: 600;\n   color: ${AppColors.onSurface};\n   margin-bottom: 8px;\n+  \n+  &::after {\n+    content: ${props => props.$required ? '\" *\"' : '\"\"'};\n+    color: ${AppColors.error};\n+  }\n `;\n \n const Input = styled.input`\n   height: 48px;\n@@ -440,9 +445,9 @@\n             required\n           />\n         </FormGroup>\n         <FormGroup>\n-          <Label>지점 *</Label>\n+          <Label $required>지점</Label>\n           <CustomDropdown\n             value={formData.branchId || ''}\n             onChange={(value) => handleInputChange('branchId', value)}\n             options={getBranchOptions()}\n@@ -454,9 +459,9 @@\n       </FormRow>\n \n             <FormRow>\n         <FormGroup>\n-          <Label>직급 *</Label>\n+          <Label $required>직급</Label>\n           <CustomDropdown\n             value={formData.position || ''}\n             onChange={(value) => handleInputChange('position', value)}\n             options={getPositionOptions()}\n@@ -465,9 +470,9 @@\n           />\n           {errors.position && <ErrorMessage>{errors.position}</ErrorMessage>}\n         </FormGroup>\n         <FormGroup>\n-          <Label>직책 *</Label>\n+          <Label $required>직책</Label>\n           <CustomDropdown\n             value={formData.role || ''}\n             onChange={(value) => handleInputChange('role', value)}\n             options={getRoleOptions()}\n@@ -479,9 +484,9 @@\n       </FormRow>\n \n       <FormRow>\n         <FormGroup>\n-          <Label>고용형태 *</Label>\n+          <Label $required>고용형태</Label>\n           <CustomDropdown\n             value={formData.employmentType || ''}\n             onChange={(value) => handleInputChange('employmentType', value)}\n             options={getEmploymentTypeOptions()}\n@@ -490,9 +495,9 @@\n           />\n           {errors.employmentType && <ErrorMessage>{errors.employmentType}</ErrorMessage>}\n         </FormGroup>\n         <FormGroup>\n-          <Label>권한 *</Label>\n+          <Label $required>권한</Label>\n           <CustomDropdown\n             value={formData.permission || ''}\n             onChange={(value) => handleInputChange('permission', value)}\n             options={getPermissionOptions()}\n@@ -504,9 +509,9 @@\n       </FormRow>\n \n       <FormRow>\n         <FormGroup>\n-          <Label>계약 시작일 *</Label>\n+          <Label $required>계약 시작일</Label>\n           <CustomDateInput\n             value={formatDateForInput(formData.contractStartDate || '')}\n             onChange={(value) => handleInputChange('contractStartDate', new Date(value))}\n             placeholder=\"계약시작일을 선택하세요\"\n@@ -515,9 +520,9 @@\n           />\n           {errors.contractStartDate && <ErrorMessage>{errors.contractStartDate}</ErrorMessage>}\n         </FormGroup>\n         <FormGroup>\n-          <Label>계약 종료일 *</Label>\n+          <Label $required>계약 종료일</Label>\n           <CustomDateInput\n             value={formatDateForInput(formData.contractEndDate || '')}\n             onChange={(value) => handleInputChange('contractEndDate', new Date(value))}\n             placeholder=\"계약종료일을 선택하세요\"\n"
                },
                {
                    "date": 1759906185702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,183 +2,135 @@\n import styled from 'styled-components';\n import Modal from '../../../components/Modal';\n import CustomDropdown from '../../../components/CustomDropdown';\n import CustomDateInput from '../../../components/CustomDateInput';\n-import { StaffTextField, StaffPhoneField, StaffEmailField, StaffFileUploadField } from '../../../components/StaffFormComponents';\n+import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n \n const FormContainer = styled.div`\n   width: 100%;\n-  max-height: 80vh;\n+  height: 100%;\n   overflow-y: auto;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 24px;\n+  text-align: left; // 모달 기본 center 정렬 재정의\n `;\n \n-const FormRow = styled.div`\n+const FormSection = styled.div`\n   display: flex;\n+  flex-direction: column;\n   gap: 16px;\n-  margin-bottom: 16px;\n-  align-items: flex-start;\n+  padding: 24px;\n+  background: ${AppColors.surface};\n+  border-radius: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n `;\n \n-const FormGroup = styled.div`\n+const SectionTitle = styled.h3`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  margin: 0;\n+`;\n+\n+const FieldRow = styled.div`\n+  display: flex;\n+  gap: 16px;\n+`;\n+\n+const FieldColumn = styled.div`\n   flex: 1;\n   display: flex;\n   flex-direction: column;\n+  gap: 8px;\n+  min-width: 0;\n+  overflow: hidden;\n `;\n \n const Label = styled.label<{ $required?: boolean }>`\n   font-size: ${AppTextStyles.label1.fontSize};\n   font-weight: 600;\n   color: ${AppColors.onSurface};\n-  margin-bottom: 8px;\n   \n-  &::after {\n-    content: ${props => props.$required ? '\" *\"' : '\"\"'};\n-    color: ${AppColors.error};\n-  }\n+  ${({ $required }) => $required && `\n+    &::after {\n+      content: ' *';\n+      color: ${AppColors.error};\n+    }\n+  `}\n `;\n \n-const Input = styled.input`\n-  height: 48px;\n-  padding: 0 16px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 12px;\n+const Input = styled.input<{ error?: boolean }>`\n+  width: 100%;\n+  min-width: 0;\n+  padding: 12px;\n+  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n+  border-radius: 8px;\n   font-size: ${AppTextStyles.body1.fontSize};\n-  outline: none;\n-  background: ${AppColors.surface};\n   color: ${AppColors.onSurface};\n-  transition: all 0.2s ease;\n+  background-color: ${AppColors.input};\n   box-sizing: border-box;\n   \n-  &:hover {\n-    border-color: ${AppColors.primary};\n-    box-shadow: 0 2px 8px rgba(55, 187, 214, 0.1);\n-  }\n-  \n   &:focus {\n+    outline: none;\n     border-color: ${AppColors.primary};\n-    box-shadow: 0 0 0 3px rgba(55, 187, 214, 0.1);\n   }\n   \n   &::placeholder {\n     color: ${AppColors.onInput1};\n   }\n-  \n-  &:disabled {\n-    background-color: ${AppColors.background};\n-    color: ${AppColors.disabled};\n-    border-color: ${AppColors.borderLight};\n-  }\n `;\n \n-const FileUploadContainer = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  gap: 8px;\n-`;\n-\n-const FileUploadButton = styled.label`\n-  display: inline-flex;\n-  align-items: center;\n-  justify-content: center;\n-  gap: 8px;\n-  min-height: 48px;\n-  padding: 14px 16px;\n-  border: 2px dashed ${AppColors.borderLight};\n-  border-radius: 12px;\n-  background-color: ${AppColors.surface};\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-  \n-  &:hover {\n-    border-color: ${AppColors.primary};\n-    background-color: ${AppColors.primary}08;\n-    color: ${AppColors.primary};\n-    box-shadow: 0 2px 8px rgba(55, 187, 214, 0.1);\n-  }\n-`;\n-\n-const HiddenFileInput = styled.input.attrs({ type: 'file' })`\n-  display: none;\n-`;\n-\n-const FileInfo = styled.div`\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  min-height: 48px;\n-  padding: 14px 16px;\n-  background-color: ${AppColors.background};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 12px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${AppColors.onSurface};\n-`;\n-\n-const FileRemoveButton = styled.button`\n-  background: none;\n-  border: none;\n-  color: ${AppColors.error};\n-  cursor: pointer;\n-  padding: 4px;\n-  border-radius: 4px;\n-  \n-  &:hover {\n-    background-color: ${AppColors.error}10;\n-  }\n-`;\n-\n const ButtonContainer = styled.div`\n   display: flex;\n   gap: 12px;\n   justify-content: flex-end;\n   margin-top: 24px;\n `;\n \n const Button = styled.button<{ variant?: 'primary' | 'secondary' | 'danger' }>`\n-  padding: 12px 20px;\n-  border: ${props => \n-    props.variant === 'primary' ? 'none' : \n-    props.variant === 'danger' ? `1px solid ${AppColors.error}` :\n-    `1px solid ${AppColors.borderLight}`\n-  };\n+  padding: 12px 24px;\n   border-radius: 8px;\n-  background: ${props => \n-    props.variant === 'primary' ? AppColors.primary : \n-    props.variant === 'danger' ? AppColors.error :\n-    AppColors.surface\n-  };\n-  color: ${props => \n-    props.variant === 'primary' ? AppColors.onPrimary : \n-    props.variant === 'danger' ? AppColors.onPrimary :\n-    AppColors.onSurface\n-  };\n-  font-size: ${AppTextStyles.body1.fontSize};\n+  font-size: ${AppTextStyles.label1.fontSize};\n   font-weight: 600;\n+  border: none;\n   cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    opacity: 0.9;\n-  }\n-  \n+  transition: all 0.2s ease;\n+\n+  ${({ variant = 'primary' }) => variant === 'primary' ? `\n+    background-color: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n+    \n+    &:hover {\n+      background-color: ${AppColors.buttonPrimaryHover};\n+    }\n+  ` : variant === 'danger' ? `\n+    background-color: ${AppColors.error};\n+    color: ${AppColors.onPrimary};\n+    \n+    &:hover {\n+      opacity: 0.9;\n+    }\n+  ` : `\n+    background-color: ${AppColors.surface};\n+    color: ${AppColors.onSurface};\n+    border: 1px solid ${AppColors.borderLight};\n+    \n+    &:hover {\n+      background-color: ${AppColors.btnC};\n+    }\n+  `}\n+\n   &:disabled {\n     opacity: 0.5;\n     cursor: not-allowed;\n   }\n `;\n \n-const ErrorMessage = styled.div`\n-  color: ${AppColors.error};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  margin-top: 4px;\n-`;\n-\n interface StaffEditPopupProps {\n   isOpen: boolean;\n   staff: Staff | null;\n   onClose: () => void;\n@@ -412,175 +364,184 @@\n   };\n \n   const modalBody = (\n     <FormContainer>\n-      <FormRow>\n-        <FormGroup>\n-          <StaffTextField\n-            label=\"이름\"\n-            value={formData.name || ''}\n-            onChange={(value) => handleInputChange('name', value)}\n-            placeholder=\"직원 이름을 입력하세요\"\n-            errorMessage={errors.name}\n-            required\n-          />\n-        </FormGroup>\n-        <FormGroup>\n-          <StaffPhoneField\n-            label=\"전화번호\"\n-            value={formData.phone || ''}\n-            onChange={(value) => handleInputChange('phone', value)}\n-            errorMessage={errors.phone}\n-            required\n-          />\n-        </FormGroup>\n-      </FormRow>\n+      {/* 기본 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>기본 정보</SectionTitle>\n+        \n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>이름</Label>\n+            <Input\n+              type=\"text\"\n+              value={formData.name || ''}\n+              onChange={(e) => handleInputChange('name', e.target.value)}\n+              placeholder=\"이름을 입력하세요\"\n+              error={!!errors.name}\n+            />\n+            {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n+          </FieldColumn>\n \n-      <FormRow>\n-        <FormGroup>\n-          <StaffEmailField\n-            label=\"이메일\"\n-            value={formData.email || ''}\n-            onChange={(value) => handleInputChange('email', value)}\n-            errorMessage={errors.email}\n-            required\n-          />\n-        </FormGroup>\n-        <FormGroup>\n-          <Label $required>지점</Label>\n-          <CustomDropdown\n-            value={formData.branchId || ''}\n-            onChange={(value) => handleInputChange('branchId', value)}\n-            options={getBranchOptions()}\n-            placeholder=\"지점을 선택하세요\"\n-            error={!!errors.branchId}\n-          />\n-          {errors.branchId && <ErrorMessage>{errors.branchId}</ErrorMessage>}\n-        </FormGroup>\n-      </FormRow>\n+          <FieldColumn>\n+            <Label $required>연락처</Label>\n+            <Input\n+              type=\"tel\"\n+              value={formData.phone || ''}\n+              onChange={(e) => handleInputChange('phone', e.target.value)}\n+              placeholder=\"010-1234-5678\"\n+              error={!!errors.phone}\n+            />\n+            {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n \n-            <FormRow>\n-        <FormGroup>\n-          <Label $required>직급</Label>\n-          <CustomDropdown\n-            value={formData.position || ''}\n-            onChange={(value) => handleInputChange('position', value)}\n-            options={getPositionOptions()}\n-            placeholder=\"직급을 선택하세요\"\n-            error={!!errors.position}\n-          />\n-          {errors.position && <ErrorMessage>{errors.position}</ErrorMessage>}\n-        </FormGroup>\n-        <FormGroup>\n-          <Label $required>직책</Label>\n-          <CustomDropdown\n-            value={formData.role || ''}\n-            onChange={(value) => handleInputChange('role', value)}\n-            options={getRoleOptions()}\n-            placeholder=\"직책을 선택하세요\"\n-            error={!!errors.role}\n-          />\n-          {errors.role && <ErrorMessage>{errors.role}</ErrorMessage>}\n-        </FormGroup>\n-      </FormRow>\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>이메일</Label>\n+            <Input\n+              type=\"email\"\n+              value={formData.email || ''}\n+              onChange={(e) => handleInputChange('email', e.target.value)}\n+              placeholder=\"example@email.com\"\n+              error={!!errors.email}\n+            />\n+            {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n \n-      <FormRow>\n-        <FormGroup>\n-          <Label $required>고용형태</Label>\n-          <CustomDropdown\n-            value={formData.employmentType || ''}\n-            onChange={(value) => handleInputChange('employmentType', value)}\n-            options={getEmploymentTypeOptions()}\n-            placeholder=\"고용형태를 선택하세요\"\n-            error={!!errors.employmentType}\n-          />\n-          {errors.employmentType && <ErrorMessage>{errors.employmentType}</ErrorMessage>}\n-        </FormGroup>\n-        <FormGroup>\n-          <Label $required>권한</Label>\n-          <CustomDropdown\n-            value={formData.permission || ''}\n-            onChange={(value) => handleInputChange('permission', value)}\n-            options={getPermissionOptions()}\n-            placeholder=\"권한을 선택하세요\"\n-            error={!!errors.permission}\n-          />\n-          {errors.permission && <ErrorMessage>{errors.permission}</ErrorMessage>}\n-        </FormGroup>\n-      </FormRow>\n+      {/* 조직 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>조직 정보</SectionTitle>\n+        \n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>지점</Label>\n+            <CustomDropdown\n+              value={formData.branchId || ''}\n+              onChange={(value: string) => handleInputChange('branchId', value)}\n+              options={getBranchOptions()}\n+              placeholder=\"지점을 선택하세요\"\n+              error={!!errors.branchId}\n+              required\n+            />\n+            {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n+          </FieldColumn>\n \n-      <FormRow>\n-        <FormGroup>\n-          <Label $required>계약 시작일</Label>\n-          <CustomDateInput\n-            value={formatDateForInput(formData.contractStartDate || '')}\n-            onChange={(value) => handleInputChange('contractStartDate', new Date(value))}\n-            placeholder=\"계약시작일을 선택하세요\"\n-            error={!!errors.contractStartDate}\n-            max={getContractStartDateMax()}\n-          />\n-          {errors.contractStartDate && <ErrorMessage>{errors.contractStartDate}</ErrorMessage>}\n-        </FormGroup>\n-        <FormGroup>\n-          <Label $required>계약 종료일</Label>\n-          <CustomDateInput\n-            value={formatDateForInput(formData.contractEndDate || '')}\n-            onChange={(value) => handleInputChange('contractEndDate', new Date(value))}\n-            placeholder=\"계약종료일을 선택하세요\"\n-            error={!!errors.contractEndDate}\n-            min={getContractEndDateMin()}\n-          />\n-          {errors.contractEndDate && <ErrorMessage>{errors.contractEndDate}</ErrorMessage>}\n-        </FormGroup>\n-      </FormRow>\n+          <FieldColumn>\n+            <Label $required>직급</Label>\n+            <CustomDropdown\n+              value={formData.position || ''}\n+              onChange={(value: string) => handleInputChange('position', value)}\n+              options={getPositionOptions()}\n+              placeholder=\"직급을 선택하세요\"\n+              error={!!errors.position}\n+              required\n+            />\n+            {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n \n-      <FormRow>\n-        <FormGroup>\n-          <StaffFileUploadField\n-            label=\"계약서 파일\"\n-            value={formData.contractFile || null}\n-            onChange={(file) => handleInputChange('contractFile', file)}\n-            placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n-            errorMessage={errors.contractFile}\n-            fullWidth\n-          />\n-          {staff?.contractFileName && !formData.contractFile && (\n-            <div style={{ \n-              fontSize: AppTextStyles.body2.fontSize, \n-              color: AppColors.onInput1, \n-              marginTop: '4px' \n-            }}>\n-              현재 파일: {staff.contractFileName}\n-            </div>\n-          )}\n-        </FormGroup>\n-      </FormRow>\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>직책</Label>\n+            <CustomDropdown\n+              value={formData.role || ''}\n+              onChange={(value: string) => handleInputChange('role', value)}\n+              options={getRoleOptions()}\n+              placeholder=\"직책을 선택하세요\"\n+              error={!!errors.role}\n+              required\n+            />\n+            {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n+          </FieldColumn>\n \n-      <FormRow>\n-        <FormGroup>\n-          <Label>계약 시작일 *</Label>\n-          <CustomDateInput\n-            value={formatDateForInput(formData.contractStartDate || '')}\n-            onChange={(value) => handleInputChange('contractStartDate', new Date(value))}\n-            placeholder=\"계약시작일을 선택하세요\"\n-            error={!!errors.contractStartDate}\n-            max={getContractStartDateMax()}\n-          />\n-          {errors.contractStartDate && <ErrorMessage>{errors.contractStartDate}</ErrorMessage>}\n-        </FormGroup>\n-        <FormGroup>\n-          <Label>계약 종료일 *</Label>\n-          <CustomDateInput\n-            value={formatDateForInput(formData.contractEndDate || '')}\n-            onChange={(value) => handleInputChange('contractEndDate', new Date(value))}\n-            placeholder=\"계약종료일을 선택하세요\"\n-            error={!!errors.contractEndDate}\n-            min={getContractEndDateMin()}\n-          />\n-          {errors.contractEndDate && <ErrorMessage>{errors.contractEndDate}</ErrorMessage>}\n-        </FormGroup>\n-      </FormRow>\n+          <FieldColumn>\n+            <Label $required>고용형태</Label>\n+            <CustomDropdown\n+              value={formData.employmentType || ''}\n+              onChange={(value: string) => handleInputChange('employmentType', value)}\n+              options={getEmploymentTypeOptions()}\n+              placeholder=\"고용형태를 선택하세요\"\n+              error={!!errors.employmentType}\n+              required\n+            />\n+            {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n \n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>권한</Label>\n+            <CustomDropdown\n+              value={formData.permission || ''}\n+              onChange={(value: string) => handleInputChange('permission', value)}\n+              options={getPermissionOptions()}\n+              placeholder=\"권한을 선택하세요\"\n+              error={!!errors.permission}\n+              required\n+            />\n+            {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n+\n+      {/* 계약 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>계약 정보</SectionTitle>\n+        \n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>계약시작일</Label>\n+            <CustomDateInput\n+              value={formatDateForInput(formData.contractStartDate || '')}\n+              onChange={(value: string) => handleInputChange('contractStartDate', new Date(value))}\n+              placeholder=\"계약시작일을 선택하세요\"\n+              error={!!errors.contractStartDate}\n+              max={getContractStartDateMax()}\n+              required\n+            />\n+            {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>계약종료일</Label>\n+            <CustomDateInput\n+              value={formatDateForInput(formData.contractEndDate || '')}\n+              onChange={(value: string) => handleInputChange('contractEndDate', new Date(value))}\n+              placeholder=\"계약종료일을 선택하세요\"\n+              error={!!errors.contractEndDate}\n+              min={getContractEndDateMin()}\n+              required\n+            />\n+            {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        <FieldRow>\n+          <FieldColumn>\n+            <StaffFileUploadField\n+              label=\"계약서 파일\"\n+              value={formData.contractFile || null}\n+              onChange={(file) => handleInputChange('contractFile', file)}\n+              placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n+              errorMessage={errors.contractFile}\n+              fullWidth\n+            />\n+            {staff?.contractFileName && !formData.contractFile && (\n+              <div style={{ \n+                fontSize: AppTextStyles.body2.fontSize, \n+                color: AppColors.onInput1, \n+                marginTop: '4px' \n+              }}>\n+                현재 파일: {staff.contractFileName}\n+              </div>\n+            )}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n+\n       <ButtonContainer>\n         <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n           취소\n         </Button>\n@@ -597,9 +558,10 @@\n   return (\n     <Modal\n       isOpen={isOpen}\n       onClose={onClose}\n-      width=\"800px\"\n+      width=\"1000px\"\n+      height=\"80vh\"\n       header=\"직원 정보 수정\"\n       body={modalBody}\n     />\n   );\n"
                },
                {
                    "date": 1759906646973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -562,8 +562,9 @@\n       width=\"1000px\"\n       height=\"80vh\"\n       header=\"직원 정보 수정\"\n       body={modalBody}\n+      disableOutsideClick={true}\n     />\n   );\n };\n \n"
                },
                {
                    "date": 1759906762106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n const ButtonContainer = styled.div`\n   display: flex;\n   gap: 12px;\n   justify-content: flex-end;\n-  margin-top: 24px;\n+  width: 100%;\n `;\n \n const Button = styled.button<{ variant?: 'primary' | 'secondary' | 'danger' }>`\n   padding: 12px 24px;\n@@ -540,30 +540,34 @@\n           </FieldColumn>\n         </FieldRow>\n       </FormSection>\n \n-      <ButtonContainer>\n-        <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n-          취소\n-        </Button>\n-        <Button variant=\"danger\" onClick={handleDelete} disabled={loading}>\n-          삭제\n-        </Button>\n-        <Button variant=\"primary\" onClick={handleUpdate} disabled={loading}>\n-          {loading ? '처리 중...' : '수정'}\n-        </Button>\n-      </ButtonContainer>\n     </FormContainer>\n   );\n \n+  const modalFooter = (\n+    <ButtonContainer>\n+      <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n+        취소\n+      </Button>\n+      <Button variant=\"danger\" onClick={handleDelete} disabled={loading}>\n+        삭제\n+      </Button>\n+      <Button variant=\"primary\" onClick={handleUpdate} disabled={loading}>\n+        {loading ? '처리 중...' : '수정'}\n+      </Button>\n+    </ButtonContainer>\n+  );\n+\n   return (\n     <Modal\n       isOpen={isOpen}\n       onClose={onClose}\n       width=\"1000px\"\n       height=\"80vh\"\n       header=\"직원 정보 수정\"\n       body={modalBody}\n+      footer={modalFooter}\n       disableOutsideClick={true}\n     />\n   );\n };\n"
                },
                {
                    "date": 1759907307420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,618 @@\n+import React, { useState, useEffect } from 'react';\n+import styled from 'styled-components';\n+import Modal from '../../../components/Modal';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import CustomDateInput from '../../../components/CustomDateInput';\n+import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n+import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n+\n+const FormContainer = styled.div`\n+  width: 100%;\n+  height: 100%;\n+  overflow-y: auto;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 24px;\n+  text-align: left; // 모달 기본 center 정렬 재정의\n+`;\n+\n+const FormSection = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 16px;\n+  padding: 24px;\n+  background: ${AppColors.surface};\n+  border-radius: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+`;\n+\n+const SectionTitle = styled.h3`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  margin: 0;\n+`;\n+\n+const FieldRow = styled.div`\n+  display: flex;\n+  gap: 16px;\n+`;\n+\n+const FieldColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 8px;\n+  min-width: 0;\n+  overflow: hidden;\n+`;\n+\n+const Label = styled.label<{ $required?: boolean }>`\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  \n+  ${({ $required }) => $required && `\n+    &::after {\n+      content: ' *';\n+      color: ${AppColors.error};\n+    }\n+  `}\n+`;\n+\n+const Input = styled.input<{ error?: boolean }>`\n+  width: 100%;\n+  min-width: 0;\n+  padding: 12px;\n+  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n+  background-color: ${AppColors.input};\n+  box-sizing: border-box;\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &::placeholder {\n+    color: ${AppColors.onInput1};\n+  }\n+`;\n+\n+const ButtonContainer = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  justify-content: flex-end;\n+  width: 100%;\n+`;\n+\n+const Button = styled.button<{ variant?: 'primary' | 'secondary' | 'danger' }>`\n+  padding: 12px 24px;\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  font-weight: 600;\n+  border: none;\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  ${({ variant = 'primary' }) => variant === 'primary' ? `\n+    background-color: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n+    \n+    &:hover {\n+      background-color: ${AppColors.buttonPrimaryHover};\n+    }\n+  ` : variant === 'danger' ? `\n+    background-color: ${AppColors.error};\n+    color: ${AppColors.onPrimary};\n+    \n+    &:hover {\n+      opacity: 0.9;\n+    }\n+  ` : `\n+    background-color: ${AppColors.surface};\n+    color: ${AppColors.onSurface};\n+    border: 1px solid ${AppColors.borderLight};\n+    \n+    &:hover {\n+      background-color: ${AppColors.btnC};\n+    }\n+  `}\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+interface StaffEditPopupProps {\n+  isOpen: boolean;\n+  staff: Staff | null;\n+  onClose: () => void;\n+  onUpdate: () => void; // 업데이트 후 부모 컴포넌트에서 데이터 새로고침\n+}\n+\n+const StaffEditPopup: React.FC<StaffEditPopupProps> = ({\n+  isOpen,\n+  staff,\n+  onClose,\n+  onUpdate\n+}) => {\n+  const [formData, setFormData] = useState<Partial<Staff>>({});\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [loading, setLoading] = useState(false);\n+  const [errors, setErrors] = useState<Record<string, string>>({});\n+\n+  // 직원 데이터가 변경될 때 폼 데이터 초기화\n+  useEffect(() => {\n+    if (staff) {\n+      setFormData({\n+        name: staff.name,\n+        loginId: staff.loginId,\n+        password: staff.password,\n+        phone: staff.phone,\n+        email: staff.email,\n+        branchId: staff.branchId,\n+        position: staff.position,\n+        role: staff.role,\n+        employmentType: staff.employmentType,\n+        permission: staff.permission,\n+        contractStartDate: staff.contractStartDate,\n+        contractEndDate: staff.contractEndDate,\n+      });\n+    }\n+  }, [staff]);\n+\n+  // 지점 데이터 로드\n+  useEffect(() => {\n+    const loadBranches = async () => {\n+      try {\n+        const branchData = await dbManager.getAllBranches();\n+        setBranches(branchData);\n+      } catch (error) {\n+        console.error('지점 데이터 로드 실패:', error);\n+      }\n+    };\n+\n+    if (isOpen) {\n+      loadBranches();\n+    }\n+  }, [isOpen]);\n+\n+  // 드롭다운 옵션 변환 함수들\n+  const getBranchOptions = () => {\n+    return branches.map(branch => ({\n+      value: branch.id,\n+      label: branch.name,\n+      description: branch.address\n+    }));\n+  };\n+\n+  const getPositionOptions = () => {\n+    return POSITIONS.map(position => ({\n+      value: position,\n+      label: position\n+    }));\n+  };\n+\n+  const getRoleOptions = () => {\n+    return ROLES.map(role => ({\n+      value: role,\n+      label: role\n+    }));\n+  };\n+\n+  const getEmploymentTypeOptions = () => {\n+    return EMPLOYMENT_TYPES.map(type => ({\n+      value: type,\n+      label: type\n+    }));\n+  };\n+\n+  const getPermissionOptions = () => {\n+    return PERMISSIONS.map(permission => ({\n+      value: permission.value,\n+      label: permission.label,\n+      description: permission.description\n+    }));\n+  };\n+\n+  // 날짜 범위 계산 함수들\n+  const getContractStartDateMax = (): string | undefined => {\n+    return formData.contractEndDate ? formatDateForInput(formData.contractEndDate) : undefined;\n+  };\n+\n+  const getContractEndDateMin = (): string | undefined => {\n+    return formData.contractStartDate ? formatDateForInput(formData.contractStartDate) : undefined;\n+  };\n+\n+  const validateForm = (): boolean => {\n+    const newErrors: Record<string, string> = {};\n+\n+    if (!formData.name?.trim()) {\n+      newErrors.name = '이름을 입력해주세요.';\n+    }\n+\n+    if (!formData.loginId?.trim()) {\n+      newErrors.loginId = '로그인 ID를 입력해주세요.';\n+    } else if (!/^[a-zA-Z0-9]{4,20}$/.test(formData.loginId)) {\n+      newErrors.loginId = '로그인 ID는 영문, 숫자 4-20자로 입력해주세요.';\n+    }\n+\n+    if (!formData.password?.trim()) {\n+      newErrors.password = '비밀번호를 입력해주세요.';\n+    } else if (!/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(formData.password)) {\n+      newErrors.password = '비밀번호는 8자 이상, 영문+숫자+특수문자 조합이어야 합니다.';\n+    }\n+\n+    if (!formData.phone?.trim()) {\n+      newErrors.phone = '전화번호를 입력해주세요.';\n+    } else if (!/^[0-9-]+$/.test(formData.phone)) {\n+      newErrors.phone = '올바른 전화번호 형식이 아닙니다.';\n+    }\n+\n+    if (!formData.email?.trim()) {\n+      newErrors.email = '이메일을 입력해주세요.';\n+    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n+      newErrors.email = '올바른 이메일 형식이 아닙니다.';\n+    }\n+\n+    if (!formData.branchId) {\n+      newErrors.branchId = '지점을 선택해주세요.';\n+    }\n+\n+    if (!formData.position?.trim()) {\n+      newErrors.position = '직급을 입력해주세요.';\n+    }\n+\n+    if (!formData.role?.trim()) {\n+      newErrors.role = '직책을 입력해주세요.';\n+    }\n+\n+    if (!formData.employmentType) {\n+      newErrors.employmentType = '고용형태를 선택해주세요.';\n+    }\n+\n+    if (!formData.permission) {\n+      newErrors.permission = '권한을 선택해주세요.';\n+    }\n+\n+    if (!formData.contractStartDate) {\n+      newErrors.contractStartDate = '계약 시작일을 선택해주세요.';\n+    }\n+\n+    if (!formData.contractEndDate) {\n+      newErrors.contractEndDate = '계약 종료일을 선택해주세요.';\n+    }\n+\n+    if (formData.contractStartDate && formData.contractEndDate) {\n+      if (new Date(formData.contractStartDate) >= new Date(formData.contractEndDate)) {\n+        newErrors.contractEndDate = '계약 종료일은 시작일보다 늦어야 합니다.';\n+      }\n+    }\n+\n+    setErrors(newErrors);\n+    return Object.keys(newErrors).length === 0;\n+  };\n+\n+  const handleInputChange = (\n+    field: keyof Staff,\n+    value: string | File | null | Date\n+  ) => {\n+    // 파일 업로드 필드인 경우 검증 수행\n+    if (field === 'contractFile' && value instanceof File) {\n+      // 파일 타입 검증 (이미지 또는 PDF만 허용)\n+      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n+      if (!allowedTypes.includes(value.type)) {\n+        setErrors(prev => ({ ...prev, contractFile: '이미지(JPG, PNG) 또는 PDF 파일만 업로드 가능합니다.' }));\n+        return;\n+      }\n+      \n+      // 파일 크기 검증 (10MB 제한)\n+      if (value.size > 10 * 1024 * 1024) {\n+        setErrors(prev => ({ ...prev, contractFile: '파일 크기는 10MB 이하여야 합니다.' }));\n+        return;\n+      }\n+    }\n+\n+    setFormData(prev => ({ ...prev, [field]: value }));\n+\n+    // 에러 메시지 제거\n+    if (errors[field]) {\n+      setErrors(prev => ({\n+        ...prev,\n+        [field]: ''\n+      }));\n+    }\n+  };\n+\n+  const handleUpdate = async () => {\n+    if (!staff || !validateForm()) return;\n+\n+    setLoading(true);\n+    try {\n+      await dbManager.updateStaff(staff.id, formData);\n+      onUpdate();\n+      onClose();\n+    } catch (error) {\n+      console.error('직원 수정 실패:', error);\n+      if (error instanceof Error && error.message.includes('이메일')) {\n+        setErrors({ email: '이미 사용 중인 이메일입니다.' });\n+      }\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const handleDelete = async () => {\n+    if (!staff) return;\n+\n+    const confirmed = window.confirm(\n+      `정말로 ${staff.name} 직원을 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.`\n+    );\n+\n+    if (!confirmed) return;\n+\n+    setLoading(true);\n+    try {\n+      await dbManager.deleteStaff(staff.id);\n+      onUpdate();\n+      onClose();\n+    } catch (error) {\n+      console.error('직원 삭제 실패:', error);\n+      alert('직원 삭제에 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const formatDateForInput = (date: Date | string): string => {\n+    if (!date) return '';\n+    const d = new Date(date);\n+    return d.toISOString().split('T')[0];\n+  };\n+\n+  const modalBody = (\n+    <FormContainer>\n+      {/* 기본 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>기본 정보</SectionTitle>\n+        \n+        {/* 이름 - 전체 너비 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>이름</Label>\n+            <Input\n+              type=\"text\"\n+              value={formData.name || ''}\n+              onChange={(e) => handleInputChange('name', e.target.value)}\n+              placeholder=\"이름을 입력하세요\"\n+              error={!!errors.name}\n+            />\n+            {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 로그인ID, 비밀번호 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>로그인 ID</Label>\n+            <Input\n+              type=\"text\"\n+              value={formData.loginId || ''}\n+              onChange={(e) => handleInputChange('loginId', e.target.value)}\n+              placeholder=\"영문, 숫자 4-20자\"\n+              error={!!errors.loginId}\n+            />\n+            {errors.loginId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.loginId}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>비밀번호</Label>\n+            <Input\n+              type=\"password\"\n+              value={formData.password || ''}\n+              onChange={(e) => handleInputChange('password', e.target.value)}\n+              placeholder=\"영문+숫자+특수문자 8자 이상\"\n+              error={!!errors.password}\n+            />\n+            {errors.password && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.password}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 이메일, 연락처 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>이메일</Label>\n+            <Input\n+              type=\"email\"\n+              value={formData.email || ''}\n+              onChange={(e) => handleInputChange('email', e.target.value)}\n+              placeholder=\"example@email.com\"\n+              error={!!errors.email}\n+            />\n+            {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>연락처</Label>\n+            <Input\n+              type=\"tel\"\n+              value={formData.phone || ''}\n+              onChange={(e) => handleInputChange('phone', e.target.value)}\n+              placeholder=\"010-1234-5678\"\n+              error={!!errors.phone}\n+            />\n+            {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n+\n+      {/* 조직 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>조직 정보</SectionTitle>\n+        \n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>지점</Label>\n+            <CustomDropdown\n+              value={formData.branchId || ''}\n+              onChange={(value: string) => handleInputChange('branchId', value)}\n+              options={getBranchOptions()}\n+              placeholder=\"지점을 선택하세요\"\n+              error={!!errors.branchId}\n+              required\n+            />\n+            {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>직급</Label>\n+            <CustomDropdown\n+              value={formData.position || ''}\n+              onChange={(value: string) => handleInputChange('position', value)}\n+              options={getPositionOptions()}\n+              placeholder=\"직급을 선택하세요\"\n+              error={!!errors.position}\n+              required\n+            />\n+            {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>직책</Label>\n+            <CustomDropdown\n+              value={formData.role || ''}\n+              onChange={(value: string) => handleInputChange('role', value)}\n+              options={getRoleOptions()}\n+              placeholder=\"직책을 선택하세요\"\n+              error={!!errors.role}\n+              required\n+            />\n+            {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>고용형태</Label>\n+            <CustomDropdown\n+              value={formData.employmentType || ''}\n+              onChange={(value: string) => handleInputChange('employmentType', value)}\n+              options={getEmploymentTypeOptions()}\n+              placeholder=\"고용형태를 선택하세요\"\n+              error={!!errors.employmentType}\n+              required\n+            />\n+            {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>권한</Label>\n+            <CustomDropdown\n+              value={formData.permission || ''}\n+              onChange={(value: string) => handleInputChange('permission', value)}\n+              options={getPermissionOptions()}\n+              placeholder=\"권한을 선택하세요\"\n+              error={!!errors.permission}\n+              required\n+            />\n+            {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n+\n+      {/* 계약 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>계약 정보</SectionTitle>\n+        \n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>계약시작일</Label>\n+            <CustomDateInput\n+              value={formatDateForInput(formData.contractStartDate || '')}\n+              onChange={(value: string) => handleInputChange('contractStartDate', new Date(value))}\n+              placeholder=\"계약시작일을 선택하세요\"\n+              error={!!errors.contractStartDate}\n+              max={getContractStartDateMax()}\n+              required\n+            />\n+            {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>계약종료일</Label>\n+            <CustomDateInput\n+              value={formatDateForInput(formData.contractEndDate || '')}\n+              onChange={(value: string) => handleInputChange('contractEndDate', new Date(value))}\n+              placeholder=\"계약종료일을 선택하세요\"\n+              error={!!errors.contractEndDate}\n+              min={getContractEndDateMin()}\n+              required\n+            />\n+            {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        <FieldRow>\n+          <FieldColumn>\n+            <StaffFileUploadField\n+              label=\"계약서 파일\"\n+              value={formData.contractFile || null}\n+              onChange={(file) => handleInputChange('contractFile', file)}\n+              placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n+              errorMessage={errors.contractFile}\n+              fullWidth\n+            />\n+            {staff?.contractFileName && !formData.contractFile && (\n+              <div style={{ \n+                fontSize: AppTextStyles.body2.fontSize, \n+                color: AppColors.onInput1, \n+                marginTop: '4px' \n+              }}>\n+                현재 파일: {staff.contractFileName}\n+              </div>\n+            )}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n+\n+    </FormContainer>\n+  );\n+\n+  const modalFooter = (\n+    <ButtonContainer>\n+      <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n+        취소\n+      </Button>\n+      <Button variant=\"danger\" onClick={handleDelete} disabled={loading}>\n+        삭제\n+      </Button>\n+      <Button variant=\"primary\" onClick={handleUpdate} disabled={loading}>\n+        {loading ? '처리 중...' : '수정'}\n+      </Button>\n+    </ButtonContainer>\n+  );\n+\n+  return (\n+    <Modal\n+      isOpen={isOpen}\n+      onClose={onClose}\n+      width=\"1000px\"\n+      height=\"80vh\"\n+      header=\"직원 정보 수정\"\n+      body={modalBody}\n+      footer={modalFooter}\n+      disableOutsideClick={true}\n+    />\n+  );\n+};\n+\n+export default StaffEditPopup;\n"
                },
                {
                    "date": 1759907600120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,10 +251,10 @@\n     }\n \n     if (!formData.phone?.trim()) {\n       newErrors.phone = '전화번호를 입력해주세요.';\n-    } else if (!/^[0-9-]+$/.test(formData.phone)) {\n-      newErrors.phone = '올바른 전화번호 형식이 아닙니다.';\n+    } else if (!/^010-\\d{4}-\\d{4}$/.test(formData.phone)) {\n+      newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010-1234-5678)';\n     }\n \n     if (!formData.email?.trim()) {\n       newErrors.email = '이메일을 입력해주세요.';\n@@ -303,8 +303,13 @@\n   const handleInputChange = (\n     field: keyof Staff,\n     value: string | File | null | Date\n   ) => {\n+    // 전화번호 필드인 경우 자동 포맷팅 적용\n+    if (field === 'phone' && typeof value === 'string') {\n+      value = formatPhoneNumber(value);\n+    }\n+\n     // 파일 업로드 필드인 경우 검증 수행\n     if (field === 'contractFile' && value instanceof File) {\n       // 파일 타입 검증 (이미지 또는 PDF만 허용)\n       const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n@@ -330,8 +335,26 @@\n       }));\n     }\n   };\n \n+  // 전화번호 자동 포맷팅 함수\n+  const formatPhoneNumber = (inputValue: string): string => {\n+    // 숫자만 추출\n+    const numbers = inputValue.replace(/[^\\d]/g, '');\n+    \n+    // 11자리를 초과하면 잘라내기\n+    const truncated = numbers.slice(0, 11);\n+    \n+    // 자동 하이픈 추가\n+    if (truncated.length <= 3) {\n+      return truncated;\n+    } else if (truncated.length <= 7) {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3)}`;\n+    } else {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3, 7)}-${truncated.slice(7)}`;\n+    }\n+  };\n+\n   const handleUpdate = async () => {\n     if (!staff || !validateForm()) return;\n \n     setLoading(true);\n@@ -442,12 +465,15 @@\n           <FieldColumn>\n             <Label $required>연락처</Label>\n             <Input\n               type=\"tel\"\n+              inputMode=\"numeric\"\n               value={formData.phone || ''}\n               onChange={(e) => handleInputChange('phone', e.target.value)}\n               placeholder=\"010-1234-5678\"\n               error={!!errors.phone}\n+              maxLength={13}\n+              autoComplete=\"tel\"\n             />\n             {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n           </FieldColumn>\n         </FieldRow>\n@@ -615,579 +641,4 @@\n   );\n };\n \n export default StaffEditPopup;\n-import React, { useState, useEffect } from 'react';\n-import styled from 'styled-components';\n-import Modal from '../../../components/Modal';\n-import CustomDropdown from '../../../components/CustomDropdown';\n-import CustomDateInput from '../../../components/CustomDateInput';\n-import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n-import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n-\n-const FormContainer = styled.div`\n-  width: 100%;\n-  height: 100%;\n-  overflow-y: auto;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 24px;\n-  text-align: left; // 모달 기본 center 정렬 재정의\n-`;\n-\n-const FormSection = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  gap: 16px;\n-  padding: 24px;\n-  background: ${AppColors.surface};\n-  border-radius: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const SectionTitle = styled.h3`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onSurface};\n-  margin: 0;\n-`;\n-\n-const FieldRow = styled.div`\n-  display: flex;\n-  gap: 16px;\n-`;\n-\n-const FieldColumn = styled.div`\n-  flex: 1;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 8px;\n-  min-width: 0;\n-  overflow: hidden;\n-`;\n-\n-const Label = styled.label<{ $required?: boolean }>`\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onSurface};\n-  \n-  ${({ $required }) => $required && `\n-    &::after {\n-      content: ' *';\n-      color: ${AppColors.error};\n-    }\n-  `}\n-`;\n-\n-const Input = styled.input<{ error?: boolean }>`\n-  width: 100%;\n-  min-width: 0;\n-  padding: 12px;\n-  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${AppColors.onSurface};\n-  background-color: ${AppColors.input};\n-  box-sizing: border-box;\n-  \n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n-`;\n-\n-const ButtonContainer = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  justify-content: flex-end;\n-  width: 100%;\n-`;\n-\n-const Button = styled.button<{ variant?: 'primary' | 'secondary' | 'danger' }>`\n-  padding: 12px 24px;\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  font-weight: 600;\n-  border: none;\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  ${({ variant = 'primary' }) => variant === 'primary' ? `\n-    background-color: ${AppColors.primary};\n-    color: ${AppColors.onPrimary};\n-    \n-    &:hover {\n-      background-color: ${AppColors.buttonPrimaryHover};\n-    }\n-  ` : variant === 'danger' ? `\n-    background-color: ${AppColors.error};\n-    color: ${AppColors.onPrimary};\n-    \n-    &:hover {\n-      opacity: 0.9;\n-    }\n-  ` : `\n-    background-color: ${AppColors.surface};\n-    color: ${AppColors.onSurface};\n-    border: 1px solid ${AppColors.borderLight};\n-    \n-    &:hover {\n-      background-color: ${AppColors.btnC};\n-    }\n-  `}\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-interface StaffEditPopupProps {\n-  isOpen: boolean;\n-  staff: Staff | null;\n-  onClose: () => void;\n-  onUpdate: () => void; // 업데이트 후 부모 컴포넌트에서 데이터 새로고침\n-}\n-\n-const StaffEditPopup: React.FC<StaffEditPopupProps> = ({\n-  isOpen,\n-  staff,\n-  onClose,\n-  onUpdate\n-}) => {\n-  const [formData, setFormData] = useState<Partial<Staff>>({});\n-  const [branches, setBranches] = useState<Branch[]>([]);\n-  const [loading, setLoading] = useState(false);\n-  const [errors, setErrors] = useState<Record<string, string>>({});\n-\n-  // 직원 데이터가 변경될 때 폼 데이터 초기화\n-  useEffect(() => {\n-    if (staff) {\n-      setFormData({\n-        name: staff.name,\n-        phone: staff.phone,\n-        email: staff.email,\n-        branchId: staff.branchId,\n-        position: staff.position,\n-        role: staff.role,\n-        employmentType: staff.employmentType,\n-        permission: staff.permission,\n-        contractStartDate: staff.contractStartDate,\n-        contractEndDate: staff.contractEndDate,\n-      });\n-    }\n-  }, [staff]);\n-\n-  // 지점 데이터 로드\n-  useEffect(() => {\n-    const loadBranches = async () => {\n-      try {\n-        const branchData = await dbManager.getAllBranches();\n-        setBranches(branchData);\n-      } catch (error) {\n-        console.error('지점 데이터 로드 실패:', error);\n-      }\n-    };\n-\n-    if (isOpen) {\n-      loadBranches();\n-    }\n-  }, [isOpen]);\n-\n-  // 드롭다운 옵션 변환 함수들\n-  const getBranchOptions = () => {\n-    return branches.map(branch => ({\n-      value: branch.id,\n-      label: branch.name,\n-      description: branch.address\n-    }));\n-  };\n-\n-  const getPositionOptions = () => {\n-    return POSITIONS.map(position => ({\n-      value: position,\n-      label: position\n-    }));\n-  };\n-\n-  const getRoleOptions = () => {\n-    return ROLES.map(role => ({\n-      value: role,\n-      label: role\n-    }));\n-  };\n-\n-  const getEmploymentTypeOptions = () => {\n-    return EMPLOYMENT_TYPES.map(type => ({\n-      value: type,\n-      label: type\n-    }));\n-  };\n-\n-  const getPermissionOptions = () => {\n-    return PERMISSIONS.map(permission => ({\n-      value: permission.value,\n-      label: permission.label,\n-      description: permission.description\n-    }));\n-  };\n-\n-  // 날짜 범위 계산 함수들\n-  const getContractStartDateMax = (): string | undefined => {\n-    return formData.contractEndDate ? formatDateForInput(formData.contractEndDate) : undefined;\n-  };\n-\n-  const getContractEndDateMin = (): string | undefined => {\n-    return formData.contractStartDate ? formatDateForInput(formData.contractStartDate) : undefined;\n-  };\n-\n-  const validateForm = (): boolean => {\n-    const newErrors: Record<string, string> = {};\n-\n-    if (!formData.name?.trim()) {\n-      newErrors.name = '이름을 입력해주세요.';\n-    }\n-\n-    if (!formData.phone?.trim()) {\n-      newErrors.phone = '전화번호를 입력해주세요.';\n-    } else if (!/^[0-9-]+$/.test(formData.phone)) {\n-      newErrors.phone = '올바른 전화번호 형식이 아닙니다.';\n-    }\n-\n-    if (!formData.email?.trim()) {\n-      newErrors.email = '이메일을 입력해주세요.';\n-    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n-      newErrors.email = '올바른 이메일 형식이 아닙니다.';\n-    }\n-\n-    if (!formData.branchId) {\n-      newErrors.branchId = '지점을 선택해주세요.';\n-    }\n-\n-    if (!formData.position?.trim()) {\n-      newErrors.position = '직급을 입력해주세요.';\n-    }\n-\n-    if (!formData.role?.trim()) {\n-      newErrors.role = '직책을 입력해주세요.';\n-    }\n-\n-    if (!formData.employmentType) {\n-      newErrors.employmentType = '고용형태를 선택해주세요.';\n-    }\n-\n-    if (!formData.permission) {\n-      newErrors.permission = '권한을 선택해주세요.';\n-    }\n-\n-    if (!formData.contractStartDate) {\n-      newErrors.contractStartDate = '계약 시작일을 선택해주세요.';\n-    }\n-\n-    if (!formData.contractEndDate) {\n-      newErrors.contractEndDate = '계약 종료일을 선택해주세요.';\n-    }\n-\n-    if (formData.contractStartDate && formData.contractEndDate) {\n-      if (new Date(formData.contractStartDate) >= new Date(formData.contractEndDate)) {\n-        newErrors.contractEndDate = '계약 종료일은 시작일보다 늦어야 합니다.';\n-      }\n-    }\n-\n-    setErrors(newErrors);\n-    return Object.keys(newErrors).length === 0;\n-  };\n-\n-  const handleInputChange = (\n-    field: keyof Staff,\n-    value: string | File | null | Date\n-  ) => {\n-    // 파일 업로드 필드인 경우 검증 수행\n-    if (field === 'contractFile' && value instanceof File) {\n-      // 파일 타입 검증 (이미지 또는 PDF만 허용)\n-      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n-      if (!allowedTypes.includes(value.type)) {\n-        setErrors(prev => ({ ...prev, contractFile: '이미지(JPG, PNG) 또는 PDF 파일만 업로드 가능합니다.' }));\n-        return;\n-      }\n-      \n-      // 파일 크기 검증 (10MB 제한)\n-      if (value.size > 10 * 1024 * 1024) {\n-        setErrors(prev => ({ ...prev, contractFile: '파일 크기는 10MB 이하여야 합니다.' }));\n-        return;\n-      }\n-    }\n-\n-    setFormData(prev => ({ ...prev, [field]: value }));\n-\n-    // 에러 메시지 제거\n-    if (errors[field]) {\n-      setErrors(prev => ({\n-        ...prev,\n-        [field]: ''\n-      }));\n-    }\n-  };\n-\n-  const handleUpdate = async () => {\n-    if (!staff || !validateForm()) return;\n-\n-    setLoading(true);\n-    try {\n-      await dbManager.updateStaff(staff.id, formData);\n-      onUpdate();\n-      onClose();\n-    } catch (error) {\n-      console.error('직원 수정 실패:', error);\n-      if (error instanceof Error && error.message.includes('이메일')) {\n-        setErrors({ email: '이미 사용 중인 이메일입니다.' });\n-      }\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const handleDelete = async () => {\n-    if (!staff) return;\n-\n-    const confirmed = window.confirm(\n-      `정말로 ${staff.name} 직원을 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.`\n-    );\n-\n-    if (!confirmed) return;\n-\n-    setLoading(true);\n-    try {\n-      await dbManager.deleteStaff(staff.id);\n-      onUpdate();\n-      onClose();\n-    } catch (error) {\n-      console.error('직원 삭제 실패:', error);\n-      alert('직원 삭제에 실패했습니다.');\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const formatDateForInput = (date: Date | string): string => {\n-    if (!date) return '';\n-    const d = new Date(date);\n-    return d.toISOString().split('T')[0];\n-  };\n-\n-  const modalBody = (\n-    <FormContainer>\n-      {/* 기본 정보 섹션 */}\n-      <FormSection>\n-        <SectionTitle>기본 정보</SectionTitle>\n-        \n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>이름</Label>\n-            <Input\n-              type=\"text\"\n-              value={formData.name || ''}\n-              onChange={(e) => handleInputChange('name', e.target.value)}\n-              placeholder=\"이름을 입력하세요\"\n-              error={!!errors.name}\n-            />\n-            {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required>연락처</Label>\n-            <Input\n-              type=\"tel\"\n-              value={formData.phone || ''}\n-              onChange={(e) => handleInputChange('phone', e.target.value)}\n-              placeholder=\"010-1234-5678\"\n-              error={!!errors.phone}\n-            />\n-            {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>이메일</Label>\n-            <Input\n-              type=\"email\"\n-              value={formData.email || ''}\n-              onChange={(e) => handleInputChange('email', e.target.value)}\n-              placeholder=\"example@email.com\"\n-              error={!!errors.email}\n-            />\n-            {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-      </FormSection>\n-\n-      {/* 조직 정보 섹션 */}\n-      <FormSection>\n-        <SectionTitle>조직 정보</SectionTitle>\n-        \n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>지점</Label>\n-            <CustomDropdown\n-              value={formData.branchId || ''}\n-              onChange={(value: string) => handleInputChange('branchId', value)}\n-              options={getBranchOptions()}\n-              placeholder=\"지점을 선택하세요\"\n-              error={!!errors.branchId}\n-              required\n-            />\n-            {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required>직급</Label>\n-            <CustomDropdown\n-              value={formData.position || ''}\n-              onChange={(value: string) => handleInputChange('position', value)}\n-              options={getPositionOptions()}\n-              placeholder=\"직급을 선택하세요\"\n-              error={!!errors.position}\n-              required\n-            />\n-            {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>직책</Label>\n-            <CustomDropdown\n-              value={formData.role || ''}\n-              onChange={(value: string) => handleInputChange('role', value)}\n-              options={getRoleOptions()}\n-              placeholder=\"직책을 선택하세요\"\n-              error={!!errors.role}\n-              required\n-            />\n-            {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required>고용형태</Label>\n-            <CustomDropdown\n-              value={formData.employmentType || ''}\n-              onChange={(value: string) => handleInputChange('employmentType', value)}\n-              options={getEmploymentTypeOptions()}\n-              placeholder=\"고용형태를 선택하세요\"\n-              error={!!errors.employmentType}\n-              required\n-            />\n-            {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>권한</Label>\n-            <CustomDropdown\n-              value={formData.permission || ''}\n-              onChange={(value: string) => handleInputChange('permission', value)}\n-              options={getPermissionOptions()}\n-              placeholder=\"권한을 선택하세요\"\n-              error={!!errors.permission}\n-              required\n-            />\n-            {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-      </FormSection>\n-\n-      {/* 계약 정보 섹션 */}\n-      <FormSection>\n-        <SectionTitle>계약 정보</SectionTitle>\n-        \n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>계약시작일</Label>\n-            <CustomDateInput\n-              value={formatDateForInput(formData.contractStartDate || '')}\n-              onChange={(value: string) => handleInputChange('contractStartDate', new Date(value))}\n-              placeholder=\"계약시작일을 선택하세요\"\n-              error={!!errors.contractStartDate}\n-              max={getContractStartDateMax()}\n-              required\n-            />\n-            {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required>계약종료일</Label>\n-            <CustomDateInput\n-              value={formatDateForInput(formData.contractEndDate || '')}\n-              onChange={(value: string) => handleInputChange('contractEndDate', new Date(value))}\n-              placeholder=\"계약종료일을 선택하세요\"\n-              error={!!errors.contractEndDate}\n-              min={getContractEndDateMin()}\n-              required\n-            />\n-            {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        <FieldRow>\n-          <FieldColumn>\n-            <StaffFileUploadField\n-              label=\"계약서 파일\"\n-              value={formData.contractFile || null}\n-              onChange={(file) => handleInputChange('contractFile', file)}\n-              placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n-              errorMessage={errors.contractFile}\n-              fullWidth\n-            />\n-            {staff?.contractFileName && !formData.contractFile && (\n-              <div style={{ \n-                fontSize: AppTextStyles.body2.fontSize, \n-                color: AppColors.onInput1, \n-                marginTop: '4px' \n-              }}>\n-                현재 파일: {staff.contractFileName}\n-              </div>\n-            )}\n-          </FieldColumn>\n-        </FieldRow>\n-      </FormSection>\n-\n-    </FormContainer>\n-  );\n-\n-  const modalFooter = (\n-    <ButtonContainer>\n-      <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n-        취소\n-      </Button>\n-      <Button variant=\"danger\" onClick={handleDelete} disabled={loading}>\n-        삭제\n-      </Button>\n-      <Button variant=\"primary\" onClick={handleUpdate} disabled={loading}>\n-        {loading ? '처리 중...' : '수정'}\n-      </Button>\n-    </ButtonContainer>\n-  );\n-\n-  return (\n-    <Modal\n-      isOpen={isOpen}\n-      onClose={onClose}\n-      width=\"1000px\"\n-      height=\"80vh\"\n-      header=\"직원 정보 수정\"\n-      body={modalBody}\n-      footer={modalFooter}\n-      disableOutsideClick={true}\n-    />\n-  );\n-};\n-\n-export default StaffEditPopup;\n"
                },
                {
                    "date": 1759909409250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,35 +136,70 @@\n   onClose: () => void;\n   onUpdate: () => void; // 업데이트 후 부모 컴포넌트에서 데이터 새로고침\n }\n \n+interface StaffFormData {\n+  name: string;\n+  loginId: string;\n+  phone: string;\n+  email: string;\n+  branchId: string;\n+  position: string;\n+  role: string;\n+  employmentType: string;\n+  permission: string;\n+  program: string; // 담당프로그램 필드 추가\n+  contractStartDate: string;\n+  contractEndDate: string;\n+  contractFile: File | null;\n+}\n+\n const StaffEditPopup: React.FC<StaffEditPopupProps> = ({\n   isOpen,\n   staff,\n   onClose,\n   onUpdate\n }) => {\n-  const [formData, setFormData] = useState<Partial<Staff>>({});\n+  const [formData, setFormData] = useState<StaffFormData>({\n+    name: '',\n+    loginId: '',\n+    phone: '',\n+    email: '',\n+    branchId: '',\n+    position: '',\n+    role: '',\n+    employmentType: '',\n+    permission: '',\n+    program: '',\n+    contractStartDate: '',\n+    contractEndDate: '',\n+    contractFile: null\n+  });\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [loading, setLoading] = useState(false);\n   const [errors, setErrors] = useState<Record<string, string>>({});\n+  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n+  const [newPassword, setNewPassword] = useState('');\n+  const [confirmPassword, setConfirmPassword] = useState('');\n+  const [passwordErrors, setPasswordErrors] = useState<Record<string, string>>({});\n \n   // 직원 데이터가 변경될 때 폼 데이터 초기화\n   useEffect(() => {\n     if (staff) {\n       setFormData({\n         name: staff.name,\n         loginId: staff.loginId,\n-        password: staff.password,\n         phone: staff.phone,\n         email: staff.email,\n         branchId: staff.branchId,\n         position: staff.position,\n         role: staff.role,\n         employmentType: staff.employmentType,\n         permission: staff.permission,\n-        contractStartDate: staff.contractStartDate,\n-        contractEndDate: staff.contractEndDate,\n+        program: (staff as any).program || '', // 담당프로그램 필드 추가\n+        contractStartDate: formatDateForInput(staff.contractStartDate),\n+        contractEndDate: formatDateForInput(staff.contractEndDate),\n+        contractFile: null,\n       });\n     }\n   }, [staff]);\n \n@@ -221,15 +256,32 @@\n       description: permission.description\n     }));\n   };\n \n+  const getProgramOptions = () => {\n+    return [\n+      { value: '릴랙싱', label: '릴랙싱' },\n+      { value: 'WBM', label: 'WBM' }\n+    ];\n+  };\n+\n   // 날짜 범위 계산 함수들\n   const getContractStartDateMax = (): string | undefined => {\n-    return formData.contractEndDate ? formatDateForInput(formData.contractEndDate) : undefined;\n+    if (formData.contractEndDate) {\n+      const endDate = new Date(formData.contractEndDate);\n+      endDate.setDate(endDate.getDate() - 1);\n+      return endDate.toISOString().split('T')[0];\n+    }\n+    return undefined;\n   };\n \n   const getContractEndDateMin = (): string | undefined => {\n-    return formData.contractStartDate ? formatDateForInput(formData.contractStartDate) : undefined;\n+    if (formData.contractStartDate) {\n+      const startDate = new Date(formData.contractStartDate);\n+      startDate.setDate(startDate.getDate() + 1);\n+      return startDate.toISOString().split('T')[0];\n+    }\n+    return undefined;\n   };\n \n   const validateForm = (): boolean => {\n     const newErrors: Record<string, string> = {};\n@@ -243,14 +295,8 @@\n     } else if (!/^[a-zA-Z0-9]{4,20}$/.test(formData.loginId)) {\n       newErrors.loginId = '로그인 ID는 영문, 숫자 4-20자로 입력해주세요.';\n     }\n \n-    if (!formData.password?.trim()) {\n-      newErrors.password = '비밀번호를 입력해주세요.';\n-    } else if (!/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(formData.password)) {\n-      newErrors.password = '비밀번호는 8자 이상, 영문+숫자+특수문자 조합이어야 합니다.';\n-    }\n-\n     if (!formData.phone?.trim()) {\n       newErrors.phone = '전화번호를 입력해주세요.';\n     } else if (!/^010-\\d{4}-\\d{4}$/.test(formData.phone)) {\n       newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010-1234-5678)';\n@@ -285,13 +331,20 @@\n     if (!formData.contractStartDate) {\n       newErrors.contractStartDate = '계약 시작일을 선택해주세요.';\n     }\n \n-    if (!formData.contractEndDate) {\n+    // 정규직이 아닌 경우에만 계약종료일 필수\n+    if (formData.employmentType !== '정규직' && !formData.contractEndDate) {\n       newErrors.contractEndDate = '계약 종료일을 선택해주세요.';\n     }\n \n-    if (formData.contractStartDate && formData.contractEndDate) {\n+    // 코치일 경우 담당프로그램 필수\n+    if (formData.role === '코치' && !formData.program) {\n+      newErrors.program = '코치는 담당프로그램 선택이 필수입니다.';\n+    }\n+\n+    // 날짜 검증 (정규직이 아닌 경우에만)\n+    if (formData.employmentType !== '정규직' && formData.contractStartDate && formData.contractEndDate) {\n       if (new Date(formData.contractStartDate) >= new Date(formData.contractEndDate)) {\n         newErrors.contractEndDate = '계약 종료일은 시작일보다 늦어야 합니다.';\n       }\n     }\n@@ -300,10 +353,10 @@\n     return Object.keys(newErrors).length === 0;\n   };\n \n   const handleInputChange = (\n-    field: keyof Staff,\n-    value: string | File | null | Date\n+    field: keyof StaffFormData,\n+    value: string | File | null\n   ) => {\n     // 전화번호 필드인 경우 자동 포맷팅 적용\n     if (field === 'phone' && typeof value === 'string') {\n       value = formatPhoneNumber(value);\n@@ -324,9 +377,26 @@\n         return;\n       }\n     }\n \n-    setFormData(prev => ({ ...prev, [field]: value }));\n+    // 직책이 변경되고 코치가 아닌 경우 담당프로그램 초기화\n+    if (field === 'role' && typeof value === 'string' && value !== '코치') {\n+      setFormData(prev => ({\n+        ...prev,\n+        role: value,\n+        program: ''\n+      }));\n+    } \n+    // 고용형태가 정규직으로 변경되면 계약종료일 초기화\n+    else if (field === 'employmentType' && typeof value === 'string' && value === '정규직') {\n+      setFormData(prev => ({\n+        ...prev,\n+        employmentType: value,\n+        contractEndDate: ''\n+      }));\n+    } else {\n+      setFormData(prev => ({ ...prev, [field]: value }));\n+    }\n \n     // 에러 메시지 제거\n     if (errors[field]) {\n       setErrors(prev => ({\n@@ -358,9 +428,15 @@\n     if (!staff || !validateForm()) return;\n \n     setLoading(true);\n     try {\n-      await dbManager.updateStaff(staff.id, formData);\n+      const updateData = {\n+        ...formData,\n+        contractStartDate: formData.contractStartDate ? new Date(formData.contractStartDate) : new Date(),\n+        contractEndDate: formData.contractEndDate ? new Date(formData.contractEndDate) : new Date(),\n+      };\n+      \n+      await dbManager.updateStaff(staff.id, updateData);\n       onUpdate();\n       onClose();\n     } catch (error) {\n       console.error('직원 수정 실패:', error);\n@@ -399,8 +475,54 @@\n     const d = new Date(date);\n     return d.toISOString().split('T')[0];\n   };\n \n+  // 비밀번호 변경 관련 함수들\n+  const validatePassword = (): boolean => {\n+    const newPasswordErrors: Record<string, string> = {};\n+\n+    if (!newPassword.trim()) {\n+      newPasswordErrors.newPassword = '새 비밀번호를 입력해주세요.';\n+    } else if (!/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(newPassword)) {\n+      newPasswordErrors.newPassword = '비밀번호는 8자 이상, 영문+숫자+특수문자 조합이어야 합니다.';\n+    }\n+\n+    if (!confirmPassword.trim()) {\n+      newPasswordErrors.confirmPassword = '비밀번호 확인을 입력해주세요.';\n+    } else if (newPassword !== confirmPassword) {\n+      newPasswordErrors.confirmPassword = '비밀번호가 일치하지 않습니다.';\n+    }\n+\n+    setPasswordErrors(newPasswordErrors);\n+    return Object.keys(newPasswordErrors).length === 0;\n+  };\n+\n+  const handlePasswordChange = async () => {\n+    if (!staff || !validatePassword()) return;\n+\n+    setLoading(true);\n+    try {\n+      await dbManager.updateStaff(staff.id, { password: newPassword });\n+      alert('비밀번호가 성공적으로 변경되었습니다.');\n+      setIsPasswordModalOpen(false);\n+      setNewPassword('');\n+      setConfirmPassword('');\n+      setPasswordErrors({});\n+    } catch (error) {\n+      console.error('비밀번호 변경 실패:', error);\n+      alert('비밀번호 변경에 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const closePasswordModal = () => {\n+    setIsPasswordModalOpen(false);\n+    setNewPassword('');\n+    setConfirmPassword('');\n+    setPasswordErrors({});\n+  };\n+\n   const modalBody = (\n     <FormContainer>\n       {/* 기본 정보 섹션 */}\n       <FormSection>\n@@ -420,9 +542,9 @@\n             {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n           </FieldColumn>\n         </FieldRow>\n \n-        {/* 로그인ID, 비밀번호 */}\n+        {/* 로그인ID, 비밀번호 변경 */}\n         <FieldRow>\n           <FieldColumn>\n             <Label $required>로그인 ID</Label>\n             <Input\n@@ -435,17 +557,16 @@\n             {errors.loginId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.loginId}</div>}\n           </FieldColumn>\n \n           <FieldColumn>\n-            <Label $required>비밀번호</Label>\n-            <Input\n-              type=\"password\"\n-              value={formData.password || ''}\n-              onChange={(e) => handleInputChange('password', e.target.value)}\n-              placeholder=\"영문+숫자+특수문자 8자 이상\"\n-              error={!!errors.password}\n-            />\n-            {errors.password && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.password}</div>}\n+            <Label>비밀번호</Label>\n+            <Button \n+              variant=\"secondary\" \n+              onClick={() => setIsPasswordModalOpen(true)}\n+              style={{ width: '100%', textAlign: 'center', padding: '12px' }}\n+            >\n+              비밀번호 변경\n+            </Button>\n           </FieldColumn>\n         </FieldRow>\n \n         {/* 이메일, 연락처 */}\n@@ -482,8 +603,9 @@\n       {/* 조직 정보 섹션 */}\n       <FormSection>\n         <SectionTitle>조직 정보</SectionTitle>\n         \n+        {/* 지점, 권한 */}\n         <FieldRow>\n           <FieldColumn>\n             <Label $required>지점</Label>\n             <CustomDropdown\n@@ -497,8 +619,24 @@\n             {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n           </FieldColumn>\n \n           <FieldColumn>\n+            <Label $required>권한</Label>\n+            <CustomDropdown\n+              value={formData.permission || ''}\n+              onChange={(value: string) => handleInputChange('permission', value)}\n+              options={getPermissionOptions()}\n+              placeholder=\"권한을 선택하세요\"\n+              error={!!errors.permission}\n+              required\n+            />\n+            {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 직급, 직책 */}\n+        <FieldRow>\n+          <FieldColumn>\n             <Label $required>직급</Label>\n             <CustomDropdown\n               value={formData.position || ''}\n               onChange={(value: string) => handleInputChange('position', value)}\n@@ -508,11 +646,9 @@\n               required\n             />\n             {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n           </FieldColumn>\n-        </FieldRow>\n \n-        <FieldRow>\n           <FieldColumn>\n             <Label $required>직책</Label>\n             <CustomDropdown\n               value={formData.role || ''}\n@@ -523,9 +659,12 @@\n               required\n             />\n             {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n           </FieldColumn>\n+        </FieldRow>\n \n+        {/* 고용형태, 담당프로그램 */}\n+        <FieldRow>\n           <FieldColumn>\n             <Label $required>고용형태</Label>\n             <CustomDropdown\n               value={formData.employmentType || ''}\n@@ -536,22 +675,20 @@\n               required\n             />\n             {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n           </FieldColumn>\n-        </FieldRow>\n \n-        <FieldRow>\n           <FieldColumn>\n-            <Label $required>권한</Label>\n+            <Label>담당프로그램</Label>\n             <CustomDropdown\n-              value={formData.permission || ''}\n-              onChange={(value: string) => handleInputChange('permission', value)}\n-              options={getPermissionOptions()}\n-              placeholder=\"권한을 선택하세요\"\n-              error={!!errors.permission}\n-              required\n+              value={formData.program || ''}\n+              onChange={(value: string) => handleInputChange('program', value)}\n+              options={getProgramOptions()}\n+              placeholder={formData.role === '코치' ? \"담당프로그램을 선택하세요\" : \"코치만 선택 가능\"}\n+              error={!!errors.program}\n+              disabled={formData.role !== '코치'}\n             />\n-            {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n+            {errors.program && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.program}</div>}\n           </FieldColumn>\n         </FieldRow>\n       </FormSection>\n \n@@ -562,10 +699,10 @@\n         <FieldRow>\n           <FieldColumn>\n             <Label $required>계약시작일</Label>\n             <CustomDateInput\n-              value={formatDateForInput(formData.contractStartDate || '')}\n-              onChange={(value: string) => handleInputChange('contractStartDate', new Date(value))}\n+              value={formData.contractStartDate || ''}\n+              onChange={(value: string) => handleInputChange('contractStartDate', value)}\n               placeholder=\"계약시작일을 선택하세요\"\n               error={!!errors.contractStartDate}\n               max={getContractStartDateMax()}\n               required\n@@ -573,16 +710,17 @@\n             {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n           </FieldColumn>\n \n           <FieldColumn>\n-            <Label $required>계약종료일</Label>\n+            <Label $required={formData.employmentType !== '정규직'}>계약종료일</Label>\n             <CustomDateInput\n-              value={formatDateForInput(formData.contractEndDate || '')}\n-              onChange={(value: string) => handleInputChange('contractEndDate', new Date(value))}\n-              placeholder=\"계약종료일을 선택하세요\"\n+              value={formData.contractEndDate || ''}\n+              onChange={(value: string) => handleInputChange('contractEndDate', value)}\n+              placeholder={formData.employmentType === '정규직' ? \"정규직은 입력 불필요\" : \"계약종료일을 선택하세요\"}\n               error={!!errors.contractEndDate}\n               min={getContractEndDateMin()}\n-              required\n+              disabled={formData.employmentType === '정규직'}\n+              required={formData.employmentType !== '정규직'}\n             />\n             {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n           </FieldColumn>\n         </FieldRow>\n@@ -627,18 +765,75 @@\n     </ButtonContainer>\n   );\n \n   return (\n-    <Modal\n-      isOpen={isOpen}\n-      onClose={onClose}\n-      width=\"1000px\"\n-      height=\"80vh\"\n-      header=\"직원 정보 수정\"\n-      body={modalBody}\n-      footer={modalFooter}\n-      disableOutsideClick={true}\n-    />\n+    <>\n+      <Modal\n+        isOpen={isOpen}\n+        onClose={onClose}\n+        width=\"1000px\"\n+        height=\"80vh\"\n+        header=\"직원 정보 수정\"\n+        body={modalBody}\n+        footer={modalFooter}\n+        disableOutsideClick={true}\n+      />\n+\n+      {/* 비밀번호 변경 모달 */}\n+      <Modal\n+        isOpen={isPasswordModalOpen}\n+        onClose={closePasswordModal}\n+        width=\"400px\"\n+        height=\"auto\"\n+        header=\"비밀번호 변경\"\n+        body={\n+          <div style={{ padding: '20px', display: 'flex', flexDirection: 'column', gap: '16px' }}>\n+            <div>\n+              <Label $required>새 비밀번호</Label>\n+              <Input\n+                type=\"password\"\n+                value={newPassword}\n+                onChange={(e) => setNewPassword(e.target.value)}\n+                placeholder=\"영문+숫자+특수문자 8자 이상\"\n+                error={!!passwordErrors.newPassword}\n+              />\n+              {passwordErrors.newPassword && (\n+                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n+                  {passwordErrors.newPassword}\n+                </div>\n+              )}\n+            </div>\n+            \n+            <div>\n+              <Label $required>비밀번호 확인</Label>\n+              <Input\n+                type=\"password\"\n+                value={confirmPassword}\n+                onChange={(e) => setConfirmPassword(e.target.value)}\n+                placeholder=\"비밀번호를 다시 입력하세요\"\n+                error={!!passwordErrors.confirmPassword}\n+              />\n+              {passwordErrors.confirmPassword && (\n+                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n+                  {passwordErrors.confirmPassword}\n+                </div>\n+              )}\n+            </div>\n+          </div>\n+        }\n+        footer={\n+          <ButtonContainer>\n+            <Button variant=\"secondary\" onClick={closePasswordModal} disabled={loading}>\n+              취소\n+            </Button>\n+            <Button variant=\"primary\" onClick={handlePasswordChange} disabled={loading}>\n+              {loading ? '변경 중...' : '변경'}\n+            </Button>\n+          </ButtonContainer>\n+        }\n+        disableOutsideClick={true}\n+      />\n+    </>\n   );\n };\n \n export default StaffEditPopup;\n"
                },
                {
                    "date": 1759909443997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -381,21 +381,21 @@\n     // 직책이 변경되고 코치가 아닌 경우 담당프로그램 초기화\n     if (field === 'role' && typeof value === 'string' && value !== '코치') {\n       setFormData(prev => ({\n         ...prev,\n-        role: value,\n+        role: value as string,\n         program: ''\n       }));\n     } \n     // 고용형태가 정규직으로 변경되면 계약종료일 초기화\n     else if (field === 'employmentType' && typeof value === 'string' && value === '정규직') {\n       setFormData(prev => ({\n         ...prev,\n-        employmentType: value,\n+        employmentType: value as string,\n         contractEndDate: ''\n       }));\n     } else {\n-      setFormData(prev => ({ ...prev, [field]: value }));\n+      setFormData(prev => ({ ...prev, [field]: value }) as StaffFormData);\n     }\n \n     // 에러 메시지 제거\n     if (errors[field]) {\n"
                },
                {
                    "date": 1759909513493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,10 +195,10 @@\n         role: staff.role,\n         employmentType: staff.employmentType,\n         permission: staff.permission,\n         program: (staff as any).program || '', // 담당프로그램 필드 추가\n-        contractStartDate: formatDateForInput(staff.contractStartDate),\n-        contractEndDate: formatDateForInput(staff.contractEndDate),\n+        contractStartDate: staff.contractStartDate ? formatDateForInput(staff.contractStartDate) : '',\n+        contractEndDate: staff.contractEndDate ? formatDateForInput(staff.contractEndDate) : '',\n         contractFile: null,\n       });\n     }\n   }, [staff]);\n@@ -266,20 +266,32 @@\n \n   // 날짜 범위 계산 함수들\n   const getContractStartDateMax = (): string | undefined => {\n     if (formData.contractEndDate) {\n-      const endDate = new Date(formData.contractEndDate);\n-      endDate.setDate(endDate.getDate() - 1);\n-      return endDate.toISOString().split('T')[0];\n+      try {\n+        const endDate = new Date(formData.contractEndDate);\n+        if (isNaN(endDate.getTime())) return undefined;\n+        \n+        endDate.setDate(endDate.getDate() - 1);\n+        return endDate.toISOString().split('T')[0];\n+      } catch {\n+        return undefined;\n+      }\n     }\n     return undefined;\n   };\n \n   const getContractEndDateMin = (): string | undefined => {\n     if (formData.contractStartDate) {\n-      const startDate = new Date(formData.contractStartDate);\n-      startDate.setDate(startDate.getDate() + 1);\n-      return startDate.toISOString().split('T')[0];\n+      try {\n+        const startDate = new Date(formData.contractStartDate);\n+        if (isNaN(startDate.getTime())) return undefined;\n+        \n+        startDate.setDate(startDate.getDate() + 1);\n+        return startDate.toISOString().split('T')[0];\n+      } catch {\n+        return undefined;\n+      }\n     }\n     return undefined;\n   };\n \n@@ -431,9 +443,9 @@\n     try {\n       const updateData = {\n         ...formData,\n         contractStartDate: formData.contractStartDate ? new Date(formData.contractStartDate) : new Date(),\n-        contractEndDate: formData.contractEndDate ? new Date(formData.contractEndDate) : new Date(),\n+        contractEndDate: formData.contractEndDate && formData.employmentType !== '정규직' ? new Date(formData.contractEndDate) : new Date(),\n       };\n       \n       await dbManager.updateStaff(staff.id, updateData);\n       onUpdate();\n@@ -471,10 +483,19 @@\n   };\n \n   const formatDateForInput = (date: Date | string): string => {\n     if (!date) return '';\n-    const d = new Date(date);\n-    return d.toISOString().split('T')[0];\n+    \n+    try {\n+      const d = new Date(date);\n+      \n+      // Invalid Date 체크\n+      if (isNaN(d.getTime())) return '';\n+      \n+      return d.toISOString().split('T')[0];\n+    } catch {\n+      return '';\n+    }\n   };\n \n   // 비밀번호 변경 관련 함수들\n   const validatePassword = (): boolean => {\n"
                },
                {
                    "date": 1759909776176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,14 +301,8 @@\n     if (!formData.name?.trim()) {\n       newErrors.name = '이름을 입력해주세요.';\n     }\n \n-    if (!formData.loginId?.trim()) {\n-      newErrors.loginId = '로그인 ID를 입력해주세요.';\n-    } else if (!/^[a-zA-Z0-9]{4,20}$/.test(formData.loginId)) {\n-      newErrors.loginId = '로그인 ID는 영문, 숫자 4-20자로 입력해주세요.';\n-    }\n-\n     if (!formData.phone?.trim()) {\n       newErrors.phone = '전화번호를 입력해주세요.';\n     } else if (!/^010-\\d{4}-\\d{4}$/.test(formData.phone)) {\n       newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010-1234-5678)';\n@@ -563,26 +557,25 @@\n             {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n           </FieldColumn>\n         </FieldRow>\n \n-        {/* 로그인ID, 비밀번호 변경 */}\n+        {/* 로그인ID (readonly), 비밀번호 변경 */}\n         <FieldRow>\n           <FieldColumn>\n-            <Label $required>로그인 ID</Label>\n+            <Label>로그인 ID</Label>\n             <Input\n               type=\"text\"\n               value={formData.loginId || ''}\n-              onChange={(e) => handleInputChange('loginId', e.target.value)}\n-              placeholder=\"영문, 숫자 4-20자\"\n-              error={!!errors.loginId}\n+              readOnly\n+              style={{ backgroundColor: AppColors.background, color: AppColors.onInput1, cursor: 'not-allowed' }}\n+              placeholder=\"로그인 ID\"\n             />\n-            {errors.loginId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.loginId}</div>}\n           </FieldColumn>\n \n           <FieldColumn>\n             <Label>비밀번호</Label>\n             <Button \n-              variant=\"secondary\" \n+              variant=\"primary\" \n               onClick={() => setIsPasswordModalOpen(true)}\n               style={{ width: '100%', textAlign: 'center', padding: '12px' }}\n             >\n               비밀번호 변경\n"
                },
                {
                    "date": 1759909826580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,19 @@\n   display: flex;\n   flex-direction: column;\n   gap: 24px;\n   text-align: left; // 모달 기본 center 정렬 재정의\n+  \n+  /* 스크롤바 숨김 - Webkit 브라우저 (Chrome, Safari, Edge) */\n+  &::-webkit-scrollbar {\n+    display: none;\n+  }\n+  \n+  /* 스크롤바 숨김 - Firefox */\n+  scrollbar-width: none;\n+  \n+  /* 스크롤바 숨김 - IE/Edge Legacy */\n+  -ms-overflow-style: none;\n `;\n \n const FormSection = styled.div`\n   display: flex;\n"
                },
                {
                    "date": 1759909866676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,870 @@\n+import React, { useState, useEffect } from 'react';\n+import styled from 'styled-components';\n+import Modal from '../../../components/Modal';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import CustomDateInput from '../../../components/CustomDateInput';\n+import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n+import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n+\n+const FormContainer = styled.div`\n+  width: 100%;\n+  height: 100%;\n+  overflow-y: auto;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 24px;\n+  text-align: left; // 모달 기본 center 정렬 재정의\n+  \n+  /* 스크롤바 숨김 - Webkit 브라우저 (Chrome, Safari, Edge) */\n+  &::-webkit-scrollbar {\n+    display: none;\n+  }\n+  \n+  /* 스크롤바 숨김 - Firefox */\n+  scrollbar-width: none;\n+  \n+  /* 스크롤바 숨김 - IE/Edge Legacy */\n+  -ms-overflow-style: none;\n+`;\n+\n+const FormSection = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 16px;\n+  padding: 24px;\n+  background: ${AppColors.surface};\n+  border-radius: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+`;\n+\n+const SectionTitle = styled.h3`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  margin: 0;\n+`;\n+\n+const FieldRow = styled.div`\n+  display: flex;\n+  gap: 16px;\n+`;\n+\n+const FieldColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 8px;\n+  min-width: 0;\n+  overflow: hidden;\n+`;\n+\n+const Label = styled.label<{ $required?: boolean }>`\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  \n+  ${({ $required }) => $required && `\n+    &::after {\n+      content: ' *';\n+      color: ${AppColors.error};\n+    }\n+  `}\n+`;\n+\n+const Input = styled.input<{ error?: boolean }>`\n+  width: 100%;\n+  min-width: 0;\n+  padding: 12px;\n+  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n+  background-color: ${AppColors.input};\n+  box-sizing: border-box;\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &::placeholder {\n+    color: ${AppColors.onInput1};\n+  }\n+`;\n+\n+const ButtonContainer = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  justify-content: flex-end;\n+  width: 100%;\n+`;\n+\n+const Button = styled.button<{ variant?: 'primary' | 'secondary' | 'danger' }>`\n+  padding: 12px 24px;\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  font-weight: 600;\n+  border: none;\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  ${({ variant = 'primary' }) => variant === 'primary' ? `\n+    background-color: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n+    \n+    &:hover {\n+      background-color: ${AppColors.buttonPrimaryHover};\n+    }\n+  ` : variant === 'danger' ? `\n+    background-color: ${AppColors.error};\n+    color: ${AppColors.onPrimary};\n+    \n+    &:hover {\n+      opacity: 0.9;\n+    }\n+  ` : `\n+    background-color: ${AppColors.surface};\n+    color: ${AppColors.onSurface};\n+    border: 1px solid ${AppColors.borderLight};\n+    \n+    &:hover {\n+      background-color: ${AppColors.btnC};\n+    }\n+  `}\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+interface StaffEditPopupProps {\n+  isOpen: boolean;\n+  staff: Staff | null;\n+  onClose: () => void;\n+  onUpdate: () => void; // 업데이트 후 부모 컴포넌트에서 데이터 새로고침\n+}\n+\n+interface StaffFormData {\n+  name: string;\n+  loginId: string;\n+  phone: string;\n+  email: string;\n+  branchId: string;\n+  position: string;\n+  role: string;\n+  employmentType: string;\n+  permission: string;\n+  program: string; // 담당프로그램 필드 추가\n+  contractStartDate: string;\n+  contractEndDate: string;\n+  contractFile: File | null;\n+}\n+\n+const StaffEditPopup: React.FC<StaffEditPopupProps> = ({\n+  isOpen,\n+  staff,\n+  onClose,\n+  onUpdate\n+}) => {\n+  const [formData, setFormData] = useState<StaffFormData>({\n+    name: '',\n+    loginId: '',\n+    phone: '',\n+    email: '',\n+    branchId: '',\n+    position: '',\n+    role: '',\n+    employmentType: '',\n+    permission: '',\n+    program: '',\n+    contractStartDate: '',\n+    contractEndDate: '',\n+    contractFile: null\n+  });\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [loading, setLoading] = useState(false);\n+  const [errors, setErrors] = useState<Record<string, string>>({});\n+  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n+  const [newPassword, setNewPassword] = useState('');\n+  const [confirmPassword, setConfirmPassword] = useState('');\n+  const [passwordErrors, setPasswordErrors] = useState<Record<string, string>>({});\n+\n+  // 직원 데이터가 변경될 때 폼 데이터 초기화\n+  useEffect(() => {\n+    if (staff) {\n+      setFormData({\n+        name: staff.name,\n+        loginId: staff.loginId,\n+        phone: staff.phone,\n+        email: staff.email,\n+        branchId: staff.branchId,\n+        position: staff.position,\n+        role: staff.role,\n+        employmentType: staff.employmentType,\n+        permission: staff.permission,\n+        program: (staff as any).program || '', // 담당프로그램 필드 추가\n+        contractStartDate: staff.contractStartDate ? formatDateForInput(staff.contractStartDate) : '',\n+        contractEndDate: staff.contractEndDate ? formatDateForInput(staff.contractEndDate) : '',\n+        contractFile: null,\n+      });\n+    }\n+  }, [staff]);\n+\n+  // 지점 데이터 로드\n+  useEffect(() => {\n+    const loadBranches = async () => {\n+      try {\n+        const branchData = await dbManager.getAllBranches();\n+        setBranches(branchData);\n+      } catch (error) {\n+        console.error('지점 데이터 로드 실패:', error);\n+      }\n+    };\n+\n+    if (isOpen) {\n+      loadBranches();\n+    }\n+  }, [isOpen]);\n+\n+  // 드롭다운 옵션 변환 함수들\n+  const getBranchOptions = () => {\n+    return branches.map(branch => ({\n+      value: branch.id,\n+      label: branch.name,\n+      description: branch.address\n+    }));\n+  };\n+\n+  const getPositionOptions = () => {\n+    return POSITIONS.map(position => ({\n+      value: position,\n+      label: position\n+    }));\n+  };\n+\n+  const getRoleOptions = () => {\n+    return ROLES.map(role => ({\n+      value: role,\n+      label: role\n+    }));\n+  };\n+\n+  const getEmploymentTypeOptions = () => {\n+    return EMPLOYMENT_TYPES.map(type => ({\n+      value: type,\n+      label: type\n+    }));\n+  };\n+\n+  const getPermissionOptions = () => {\n+    return PERMISSIONS.map(permission => ({\n+      value: permission.value,\n+      label: permission.label,\n+      description: permission.description\n+    }));\n+  };\n+\n+  const getProgramOptions = () => {\n+    return [\n+      { value: '릴랙싱', label: '릴랙싱' },\n+      { value: 'WBM', label: 'WBM' }\n+    ];\n+  };\n+\n+  // 날짜 범위 계산 함수들\n+  const getContractStartDateMax = (): string | undefined => {\n+    if (formData.contractEndDate) {\n+      try {\n+        const endDate = new Date(formData.contractEndDate);\n+        if (isNaN(endDate.getTime())) return undefined;\n+        \n+        endDate.setDate(endDate.getDate() - 1);\n+        return endDate.toISOString().split('T')[0];\n+      } catch {\n+        return undefined;\n+      }\n+    }\n+    return undefined;\n+  };\n+\n+  const getContractEndDateMin = (): string | undefined => {\n+    if (formData.contractStartDate) {\n+      try {\n+        const startDate = new Date(formData.contractStartDate);\n+        if (isNaN(startDate.getTime())) return undefined;\n+        \n+        startDate.setDate(startDate.getDate() + 1);\n+        return startDate.toISOString().split('T')[0];\n+      } catch {\n+        return undefined;\n+      }\n+    }\n+    return undefined;\n+  };\n+\n+  const validateForm = (): boolean => {\n+    const newErrors: Record<string, string> = {};\n+\n+    if (!formData.name?.trim()) {\n+      newErrors.name = '이름을 입력해주세요.';\n+    }\n+\n+    if (!formData.phone?.trim()) {\n+      newErrors.phone = '전화번호를 입력해주세요.';\n+    } else if (!/^010-\\d{4}-\\d{4}$/.test(formData.phone)) {\n+      newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010-1234-5678)';\n+    }\n+\n+    if (!formData.email?.trim()) {\n+      newErrors.email = '이메일을 입력해주세요.';\n+    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n+      newErrors.email = '올바른 이메일 형식이 아닙니다.';\n+    }\n+\n+    if (!formData.branchId) {\n+      newErrors.branchId = '지점을 선택해주세요.';\n+    }\n+\n+    if (!formData.position?.trim()) {\n+      newErrors.position = '직급을 입력해주세요.';\n+    }\n+\n+    if (!formData.role?.trim()) {\n+      newErrors.role = '직책을 입력해주세요.';\n+    }\n+\n+    if (!formData.employmentType) {\n+      newErrors.employmentType = '고용형태를 선택해주세요.';\n+    }\n+\n+    if (!formData.permission) {\n+      newErrors.permission = '권한을 선택해주세요.';\n+    }\n+\n+    if (!formData.contractStartDate) {\n+      newErrors.contractStartDate = '계약 시작일을 선택해주세요.';\n+    }\n+\n+    // 정규직이 아닌 경우에만 계약종료일 필수\n+    if (formData.employmentType !== '정규직' && !formData.contractEndDate) {\n+      newErrors.contractEndDate = '계약 종료일을 선택해주세요.';\n+    }\n+\n+    // 코치일 경우 담당프로그램 필수\n+    if (formData.role === '코치' && !formData.program) {\n+      newErrors.program = '코치는 담당프로그램 선택이 필수입니다.';\n+    }\n+\n+    // 날짜 검증 (정규직이 아닌 경우에만)\n+    if (formData.employmentType !== '정규직' && formData.contractStartDate && formData.contractEndDate) {\n+      if (new Date(formData.contractStartDate) >= new Date(formData.contractEndDate)) {\n+        newErrors.contractEndDate = '계약 종료일은 시작일보다 늦어야 합니다.';\n+      }\n+    }\n+\n+    setErrors(newErrors);\n+    return Object.keys(newErrors).length === 0;\n+  };\n+\n+  const handleInputChange = (\n+    field: keyof StaffFormData,\n+    value: string | File | null\n+  ) => {\n+    // 전화번호 필드인 경우 자동 포맷팅 적용\n+    if (field === 'phone' && typeof value === 'string') {\n+      value = formatPhoneNumber(value);\n+    }\n+\n+    // 파일 업로드 필드인 경우 검증 수행\n+    if (field === 'contractFile' && value instanceof File) {\n+      // 파일 타입 검증 (이미지 또는 PDF만 허용)\n+      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n+      if (!allowedTypes.includes(value.type)) {\n+        setErrors(prev => ({ ...prev, contractFile: '이미지(JPG, PNG) 또는 PDF 파일만 업로드 가능합니다.' }));\n+        return;\n+      }\n+      \n+      // 파일 크기 검증 (10MB 제한)\n+      if (value.size > 10 * 1024 * 1024) {\n+        setErrors(prev => ({ ...prev, contractFile: '파일 크기는 10MB 이하여야 합니다.' }));\n+        return;\n+      }\n+    }\n+\n+    // 직책이 변경되고 코치가 아닌 경우 담당프로그램 초기화\n+    if (field === 'role' && typeof value === 'string' && value !== '코치') {\n+      setFormData(prev => ({\n+        ...prev,\n+        role: value as string,\n+        program: ''\n+      }));\n+    } \n+    // 고용형태가 정규직으로 변경되면 계약종료일 초기화\n+    else if (field === 'employmentType' && typeof value === 'string' && value === '정규직') {\n+      setFormData(prev => ({\n+        ...prev,\n+        employmentType: value as string,\n+        contractEndDate: ''\n+      }));\n+    } else {\n+      setFormData(prev => ({ ...prev, [field]: value }) as StaffFormData);\n+    }\n+\n+    // 에러 메시지 제거\n+    if (errors[field]) {\n+      setErrors(prev => ({\n+        ...prev,\n+        [field]: ''\n+      }));\n+    }\n+  };\n+\n+  // 전화번호 자동 포맷팅 함수\n+  const formatPhoneNumber = (inputValue: string): string => {\n+    // 숫자만 추출\n+    const numbers = inputValue.replace(/[^\\d]/g, '');\n+    \n+    // 11자리를 초과하면 잘라내기\n+    const truncated = numbers.slice(0, 11);\n+    \n+    // 자동 하이픈 추가\n+    if (truncated.length <= 3) {\n+      return truncated;\n+    } else if (truncated.length <= 7) {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3)}`;\n+    } else {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3, 7)}-${truncated.slice(7)}`;\n+    }\n+  };\n+\n+  const handleUpdate = async () => {\n+    if (!staff || !validateForm()) return;\n+\n+    setLoading(true);\n+    try {\n+      const updateData = {\n+        ...formData,\n+        contractStartDate: formData.contractStartDate ? new Date(formData.contractStartDate) : new Date(),\n+        contractEndDate: formData.contractEndDate && formData.employmentType !== '정규직' ? new Date(formData.contractEndDate) : new Date(),\n+      };\n+      \n+      await dbManager.updateStaff(staff.id, updateData);\n+      onUpdate();\n+      onClose();\n+    } catch (error) {\n+      console.error('직원 수정 실패:', error);\n+      if (error instanceof Error && error.message.includes('이메일')) {\n+        setErrors({ email: '이미 사용 중인 이메일입니다.' });\n+      }\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const handleDelete = async () => {\n+    if (!staff) return;\n+\n+    const confirmed = window.confirm(\n+      `정말로 ${staff.name} 직원을 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.`\n+    );\n+\n+    if (!confirmed) return;\n+\n+    setLoading(true);\n+    try {\n+      await dbManager.deleteStaff(staff.id);\n+      onUpdate();\n+      onClose();\n+    } catch (error) {\n+      console.error('직원 삭제 실패:', error);\n+      alert('직원 삭제에 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const formatDateForInput = (date: Date | string): string => {\n+    if (!date) return '';\n+    \n+    try {\n+      const d = new Date(date);\n+      \n+      // Invalid Date 체크\n+      if (isNaN(d.getTime())) return '';\n+      \n+      return d.toISOString().split('T')[0];\n+    } catch {\n+      return '';\n+    }\n+  };\n+\n+  // 비밀번호 변경 관련 함수들\n+  const validatePassword = (): boolean => {\n+    const newPasswordErrors: Record<string, string> = {};\n+\n+    if (!newPassword.trim()) {\n+      newPasswordErrors.newPassword = '새 비밀번호를 입력해주세요.';\n+    } else if (!/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(newPassword)) {\n+      newPasswordErrors.newPassword = '비밀번호는 8자 이상, 영문+숫자+특수문자 조합이어야 합니다.';\n+    }\n+\n+    if (!confirmPassword.trim()) {\n+      newPasswordErrors.confirmPassword = '비밀번호 확인을 입력해주세요.';\n+    } else if (newPassword !== confirmPassword) {\n+      newPasswordErrors.confirmPassword = '비밀번호가 일치하지 않습니다.';\n+    }\n+\n+    setPasswordErrors(newPasswordErrors);\n+    return Object.keys(newPasswordErrors).length === 0;\n+  };\n+\n+  const handlePasswordChange = async () => {\n+    if (!staff || !validatePassword()) return;\n+\n+    setLoading(true);\n+    try {\n+      await dbManager.updateStaff(staff.id, { password: newPassword });\n+      alert('비밀번호가 성공적으로 변경되었습니다.');\n+      setIsPasswordModalOpen(false);\n+      setNewPassword('');\n+      setConfirmPassword('');\n+      setPasswordErrors({});\n+    } catch (error) {\n+      console.error('비밀번호 변경 실패:', error);\n+      alert('비밀번호 변경에 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const closePasswordModal = () => {\n+    setIsPasswordModalOpen(false);\n+    setNewPassword('');\n+    setConfirmPassword('');\n+    setPasswordErrors({});\n+  };\n+\n+  const modalBody = (\n+    <FormContainer>\n+      {/* 기본 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>기본 정보</SectionTitle>\n+        \n+        {/* 이름 - 전체 너비 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>이름</Label>\n+            <Input\n+              type=\"text\"\n+              value={formData.name || ''}\n+              onChange={(e) => handleInputChange('name', e.target.value)}\n+              placeholder=\"이름을 입력하세요\"\n+              error={!!errors.name}\n+            />\n+            {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 로그인ID (readonly), 비밀번호 변경 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label>로그인 ID</Label>\n+            <Input\n+              type=\"text\"\n+              value={formData.loginId || ''}\n+              readOnly\n+              style={{ backgroundColor: AppColors.background, color: AppColors.onInput1, cursor: 'not-allowed' }}\n+              placeholder=\"로그인 ID\"\n+            />\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label>비밀번호</Label>\n+            <Button \n+              variant=\"primary\" \n+              onClick={() => setIsPasswordModalOpen(true)}\n+              style={{ width: '100%', textAlign: 'center', padding: '12px' }}\n+            >\n+              비밀번호 변경\n+            </Button>\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 이메일, 연락처 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>이메일</Label>\n+            <Input\n+              type=\"email\"\n+              value={formData.email || ''}\n+              onChange={(e) => handleInputChange('email', e.target.value)}\n+              placeholder=\"example@email.com\"\n+              error={!!errors.email}\n+            />\n+            {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>연락처</Label>\n+            <Input\n+              type=\"tel\"\n+              inputMode=\"numeric\"\n+              value={formData.phone || ''}\n+              onChange={(e) => handleInputChange('phone', e.target.value)}\n+              placeholder=\"010-1234-5678\"\n+              error={!!errors.phone}\n+              maxLength={13}\n+              autoComplete=\"tel\"\n+            />\n+            {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n+\n+      {/* 조직 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>조직 정보</SectionTitle>\n+        \n+        {/* 지점, 권한 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>지점</Label>\n+            <CustomDropdown\n+              value={formData.branchId || ''}\n+              onChange={(value: string) => handleInputChange('branchId', value)}\n+              options={getBranchOptions()}\n+              placeholder=\"지점을 선택하세요\"\n+              error={!!errors.branchId}\n+              required\n+            />\n+            {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>권한</Label>\n+            <CustomDropdown\n+              value={formData.permission || ''}\n+              onChange={(value: string) => handleInputChange('permission', value)}\n+              options={getPermissionOptions()}\n+              placeholder=\"권한을 선택하세요\"\n+              error={!!errors.permission}\n+              required\n+            />\n+            {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 직급, 직책 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>직급</Label>\n+            <CustomDropdown\n+              value={formData.position || ''}\n+              onChange={(value: string) => handleInputChange('position', value)}\n+              options={getPositionOptions()}\n+              placeholder=\"직급을 선택하세요\"\n+              error={!!errors.position}\n+              required\n+            />\n+            {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>직책</Label>\n+            <CustomDropdown\n+              value={formData.role || ''}\n+              onChange={(value: string) => handleInputChange('role', value)}\n+              options={getRoleOptions()}\n+              placeholder=\"직책을 선택하세요\"\n+              error={!!errors.role}\n+              required\n+            />\n+            {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 고용형태, 담당프로그램 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>고용형태</Label>\n+            <CustomDropdown\n+              value={formData.employmentType || ''}\n+              onChange={(value: string) => handleInputChange('employmentType', value)}\n+              options={getEmploymentTypeOptions()}\n+              placeholder=\"고용형태를 선택하세요\"\n+              error={!!errors.employmentType}\n+              required\n+            />\n+            {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label>담당프로그램</Label>\n+            <CustomDropdown\n+              value={formData.program || ''}\n+              onChange={(value: string) => handleInputChange('program', value)}\n+              options={getProgramOptions()}\n+              placeholder={formData.role === '코치' ? \"담당프로그램을 선택하세요\" : \"코치만 선택 가능\"}\n+              error={!!errors.program}\n+              disabled={formData.role !== '코치'}\n+            />\n+            {errors.program && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.program}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n+\n+      {/* 계약 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>계약 정보</SectionTitle>\n+        \n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>계약시작일</Label>\n+            <CustomDateInput\n+              value={formData.contractStartDate || ''}\n+              onChange={(value: string) => handleInputChange('contractStartDate', value)}\n+              placeholder=\"계약시작일을 선택하세요\"\n+              error={!!errors.contractStartDate}\n+              max={getContractStartDateMax()}\n+              required\n+            />\n+            {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required={formData.employmentType !== '정규직'}>계약종료일</Label>\n+            <CustomDateInput\n+              value={formData.contractEndDate || ''}\n+              onChange={(value: string) => handleInputChange('contractEndDate', value)}\n+              placeholder={formData.employmentType === '정규직' ? \"정규직은 입력 불필요\" : \"계약종료일을 선택하세요\"}\n+              error={!!errors.contractEndDate}\n+              min={getContractEndDateMin()}\n+              disabled={formData.employmentType === '정규직'}\n+              required={formData.employmentType !== '정규직'}\n+            />\n+            {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        <FieldRow>\n+          <FieldColumn>\n+            <StaffFileUploadField\n+              label=\"계약서 파일\"\n+              value={formData.contractFile || null}\n+              onChange={(file) => handleInputChange('contractFile', file)}\n+              placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n+              errorMessage={errors.contractFile}\n+              fullWidth\n+            />\n+            {staff?.contractFileName && !formData.contractFile && (\n+              <div style={{ \n+                fontSize: AppTextStyles.body2.fontSize, \n+                color: AppColors.onInput1, \n+                marginTop: '4px' \n+              }}>\n+                현재 파일: {staff.contractFileName}\n+              </div>\n+            )}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n+\n+    </FormContainer>\n+  );\n+\n+  const modalFooter = (\n+    <ButtonContainer>\n+      <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n+        취소\n+      </Button>\n+      <Button variant=\"danger\" onClick={handleDelete} disabled={loading}>\n+        삭제\n+      </Button>\n+      <Button variant=\"primary\" onClick={handleUpdate} disabled={loading}>\n+        {loading ? '처리 중...' : '수정'}\n+      </Button>\n+    </ButtonContainer>\n+  );\n+\n+  return (\n+    <>\n+      <Modal\n+        isOpen={isOpen}\n+        onClose={onClose}\n+        width=\"1000px\"\n+        height=\"80vh\"\n+        header=\"직원 정보 수정\"\n+        body={modalBody}\n+        footer={modalFooter}\n+        disableOutsideClick={true}\n+      />\n+\n+      {/* 비밀번호 변경 모달 */}\n+      <Modal\n+        isOpen={isPasswordModalOpen}\n+        onClose={closePasswordModal}\n+        width=\"400px\"\n+        height=\"auto\"\n+        header=\"비밀번호 변경\"\n+        body={\n+          <div style={{ \n+            padding: '20px', \n+            display: 'flex', \n+            flexDirection: 'column', \n+            gap: '16px',\n+            textAlign: 'left' // 중앙정렬 재정의\n+          }}>\n+            <div>\n+              <Label $required>새 비밀번호</Label>\n+              <Input\n+                type=\"password\"\n+                value={newPassword}\n+                onChange={(e) => setNewPassword(e.target.value)}\n+                placeholder=\"영문+숫자+특수문자 8자 이상\"\n+                error={!!passwordErrors.newPassword}\n+              />\n+              {passwordErrors.newPassword && (\n+                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n+                  {passwordErrors.newPassword}\n+                </div>\n+              )}\n+            </div>\n+            \n+            <div>\n+              <Label $required>비밀번호 확인</Label>\n+              <Input\n+                type=\"password\"\n+                value={confirmPassword}\n+                onChange={(e) => setConfirmPassword(e.target.value)}\n+                placeholder=\"비밀번호를 다시 입력하세요\"\n+                error={!!passwordErrors.confirmPassword}\n+              />\n+              {passwordErrors.confirmPassword && (\n+                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n+                  {passwordErrors.confirmPassword}\n+                </div>\n+              )}\n+            </div>\n+          </div>\n+        }\n+        footer={\n+          <ButtonContainer>\n+            <Button variant=\"secondary\" onClick={closePasswordModal} disabled={loading}>\n+              취소\n+            </Button>\n+            <Button variant=\"primary\" onClick={handlePasswordChange} disabled={loading}>\n+              {loading ? '변경 중...' : '변경'}\n+            </Button>\n+          </ButtonContainer>\n+        }\n+        disableOutsideClick={true}\n+      />\n+    </>\n+  );\n+};\n+\n+export default StaffEditPopup;\n"
                },
                {
                    "date": 1759909937845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,873 @@\n+import React, { useState, useEffect } from 'react';\n+import styled from 'styled-components';\n+import Modal from '../../../components/Modal';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import CustomDateInput from '../../../components/CustomDateInput';\n+import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n+import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n+\n+const FormContainer = styled.div`\n+  width: 100%;\n+  height: 100%;\n+  overflow-y: auto;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 24px;\n+  text-align: left; // 모달 기본 center 정렬 재정의\n+  \n+  /* 스크롤바 숨김 - Webkit 브라우저 (Chrome, Safari, Edge) */\n+  &::-webkit-scrollbar {\n+    display: none;\n+  }\n+  \n+  /* 스크롤바 숨김 - Firefox */\n+  scrollbar-width: none;\n+  \n+  /* 스크롤바 숨김 - IE/Edge Legacy */\n+  -ms-overflow-style: none;\n+`;\n+\n+const FormSection = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 16px;\n+  padding: 24px;\n+  background: ${AppColors.surface};\n+  border-radius: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+`;\n+\n+const SectionTitle = styled.h3`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  margin: 0;\n+`;\n+\n+const FieldRow = styled.div`\n+  display: flex;\n+  gap: 16px;\n+`;\n+\n+const FieldColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 8px;\n+  min-width: 0;\n+  overflow: hidden;\n+`;\n+\n+const Label = styled.label<{ $required?: boolean }>`\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  \n+  ${({ $required }) => $required && `\n+    &::after {\n+      content: ' *';\n+      color: ${AppColors.error};\n+    }\n+  `}\n+`;\n+\n+const Input = styled.input<{ error?: boolean }>`\n+  width: 100%;\n+  min-width: 0;\n+  padding: 12px;\n+  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n+  background-color: ${AppColors.input};\n+  box-sizing: border-box;\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &::placeholder {\n+    color: ${AppColors.onInput1};\n+  }\n+`;\n+\n+const ButtonContainer = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  justify-content: space-between;\n+  width: 100%;\n+  align-items: center;\n+`;\n+\n+const Button = styled.button<{ variant?: 'primary' | 'secondary' | 'danger' }>`\n+  padding: 12px 24px;\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  font-weight: 600;\n+  border: none;\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  ${({ variant = 'primary' }) => variant === 'primary' ? `\n+    background-color: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n+    \n+    &:hover {\n+      background-color: ${AppColors.buttonPrimaryHover};\n+    }\n+  ` : variant === 'danger' ? `\n+    background-color: ${AppColors.error};\n+    color: ${AppColors.onPrimary};\n+    \n+    &:hover {\n+      opacity: 0.9;\n+    }\n+  ` : `\n+    background-color: ${AppColors.surface};\n+    color: ${AppColors.onSurface};\n+    border: 1px solid ${AppColors.borderLight};\n+    \n+    &:hover {\n+      background-color: ${AppColors.btnC};\n+    }\n+  `}\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+interface StaffEditPopupProps {\n+  isOpen: boolean;\n+  staff: Staff | null;\n+  onClose: () => void;\n+  onUpdate: () => void; // 업데이트 후 부모 컴포넌트에서 데이터 새로고침\n+}\n+\n+interface StaffFormData {\n+  name: string;\n+  loginId: string;\n+  phone: string;\n+  email: string;\n+  branchId: string;\n+  position: string;\n+  role: string;\n+  employmentType: string;\n+  permission: string;\n+  program: string; // 담당프로그램 필드 추가\n+  contractStartDate: string;\n+  contractEndDate: string;\n+  contractFile: File | null;\n+}\n+\n+const StaffEditPopup: React.FC<StaffEditPopupProps> = ({\n+  isOpen,\n+  staff,\n+  onClose,\n+  onUpdate\n+}) => {\n+  const [formData, setFormData] = useState<StaffFormData>({\n+    name: '',\n+    loginId: '',\n+    phone: '',\n+    email: '',\n+    branchId: '',\n+    position: '',\n+    role: '',\n+    employmentType: '',\n+    permission: '',\n+    program: '',\n+    contractStartDate: '',\n+    contractEndDate: '',\n+    contractFile: null\n+  });\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [loading, setLoading] = useState(false);\n+  const [errors, setErrors] = useState<Record<string, string>>({});\n+  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n+  const [newPassword, setNewPassword] = useState('');\n+  const [confirmPassword, setConfirmPassword] = useState('');\n+  const [passwordErrors, setPasswordErrors] = useState<Record<string, string>>({});\n+\n+  // 직원 데이터가 변경될 때 폼 데이터 초기화\n+  useEffect(() => {\n+    if (staff) {\n+      setFormData({\n+        name: staff.name,\n+        loginId: staff.loginId,\n+        phone: staff.phone,\n+        email: staff.email,\n+        branchId: staff.branchId,\n+        position: staff.position,\n+        role: staff.role,\n+        employmentType: staff.employmentType,\n+        permission: staff.permission,\n+        program: (staff as any).program || '', // 담당프로그램 필드 추가\n+        contractStartDate: staff.contractStartDate ? formatDateForInput(staff.contractStartDate) : '',\n+        contractEndDate: staff.contractEndDate ? formatDateForInput(staff.contractEndDate) : '',\n+        contractFile: null,\n+      });\n+    }\n+  }, [staff]);\n+\n+  // 지점 데이터 로드\n+  useEffect(() => {\n+    const loadBranches = async () => {\n+      try {\n+        const branchData = await dbManager.getAllBranches();\n+        setBranches(branchData);\n+      } catch (error) {\n+        console.error('지점 데이터 로드 실패:', error);\n+      }\n+    };\n+\n+    if (isOpen) {\n+      loadBranches();\n+    }\n+  }, [isOpen]);\n+\n+  // 드롭다운 옵션 변환 함수들\n+  const getBranchOptions = () => {\n+    return branches.map(branch => ({\n+      value: branch.id,\n+      label: branch.name,\n+      description: branch.address\n+    }));\n+  };\n+\n+  const getPositionOptions = () => {\n+    return POSITIONS.map(position => ({\n+      value: position,\n+      label: position\n+    }));\n+  };\n+\n+  const getRoleOptions = () => {\n+    return ROLES.map(role => ({\n+      value: role,\n+      label: role\n+    }));\n+  };\n+\n+  const getEmploymentTypeOptions = () => {\n+    return EMPLOYMENT_TYPES.map(type => ({\n+      value: type,\n+      label: type\n+    }));\n+  };\n+\n+  const getPermissionOptions = () => {\n+    return PERMISSIONS.map(permission => ({\n+      value: permission.value,\n+      label: permission.label,\n+      description: permission.description\n+    }));\n+  };\n+\n+  const getProgramOptions = () => {\n+    return [\n+      { value: '릴랙싱', label: '릴랙싱' },\n+      { value: 'WBM', label: 'WBM' }\n+    ];\n+  };\n+\n+  // 날짜 범위 계산 함수들\n+  const getContractStartDateMax = (): string | undefined => {\n+    if (formData.contractEndDate) {\n+      try {\n+        const endDate = new Date(formData.contractEndDate);\n+        if (isNaN(endDate.getTime())) return undefined;\n+        \n+        endDate.setDate(endDate.getDate() - 1);\n+        return endDate.toISOString().split('T')[0];\n+      } catch {\n+        return undefined;\n+      }\n+    }\n+    return undefined;\n+  };\n+\n+  const getContractEndDateMin = (): string | undefined => {\n+    if (formData.contractStartDate) {\n+      try {\n+        const startDate = new Date(formData.contractStartDate);\n+        if (isNaN(startDate.getTime())) return undefined;\n+        \n+        startDate.setDate(startDate.getDate() + 1);\n+        return startDate.toISOString().split('T')[0];\n+      } catch {\n+        return undefined;\n+      }\n+    }\n+    return undefined;\n+  };\n+\n+  const validateForm = (): boolean => {\n+    const newErrors: Record<string, string> = {};\n+\n+    if (!formData.name?.trim()) {\n+      newErrors.name = '이름을 입력해주세요.';\n+    }\n+\n+    if (!formData.phone?.trim()) {\n+      newErrors.phone = '전화번호를 입력해주세요.';\n+    } else if (!/^010-\\d{4}-\\d{4}$/.test(formData.phone)) {\n+      newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010-1234-5678)';\n+    }\n+\n+    if (!formData.email?.trim()) {\n+      newErrors.email = '이메일을 입력해주세요.';\n+    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n+      newErrors.email = '올바른 이메일 형식이 아닙니다.';\n+    }\n+\n+    if (!formData.branchId) {\n+      newErrors.branchId = '지점을 선택해주세요.';\n+    }\n+\n+    if (!formData.position?.trim()) {\n+      newErrors.position = '직급을 입력해주세요.';\n+    }\n+\n+    if (!formData.role?.trim()) {\n+      newErrors.role = '직책을 입력해주세요.';\n+    }\n+\n+    if (!formData.employmentType) {\n+      newErrors.employmentType = '고용형태를 선택해주세요.';\n+    }\n+\n+    if (!formData.permission) {\n+      newErrors.permission = '권한을 선택해주세요.';\n+    }\n+\n+    if (!formData.contractStartDate) {\n+      newErrors.contractStartDate = '계약 시작일을 선택해주세요.';\n+    }\n+\n+    // 정규직이 아닌 경우에만 계약종료일 필수\n+    if (formData.employmentType !== '정규직' && !formData.contractEndDate) {\n+      newErrors.contractEndDate = '계약 종료일을 선택해주세요.';\n+    }\n+\n+    // 코치일 경우 담당프로그램 필수\n+    if (formData.role === '코치' && !formData.program) {\n+      newErrors.program = '코치는 담당프로그램 선택이 필수입니다.';\n+    }\n+\n+    // 날짜 검증 (정규직이 아닌 경우에만)\n+    if (formData.employmentType !== '정규직' && formData.contractStartDate && formData.contractEndDate) {\n+      if (new Date(formData.contractStartDate) >= new Date(formData.contractEndDate)) {\n+        newErrors.contractEndDate = '계약 종료일은 시작일보다 늦어야 합니다.';\n+      }\n+    }\n+\n+    setErrors(newErrors);\n+    return Object.keys(newErrors).length === 0;\n+  };\n+\n+  const handleInputChange = (\n+    field: keyof StaffFormData,\n+    value: string | File | null\n+  ) => {\n+    // 전화번호 필드인 경우 자동 포맷팅 적용\n+    if (field === 'phone' && typeof value === 'string') {\n+      value = formatPhoneNumber(value);\n+    }\n+\n+    // 파일 업로드 필드인 경우 검증 수행\n+    if (field === 'contractFile' && value instanceof File) {\n+      // 파일 타입 검증 (이미지 또는 PDF만 허용)\n+      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n+      if (!allowedTypes.includes(value.type)) {\n+        setErrors(prev => ({ ...prev, contractFile: '이미지(JPG, PNG) 또는 PDF 파일만 업로드 가능합니다.' }));\n+        return;\n+      }\n+      \n+      // 파일 크기 검증 (10MB 제한)\n+      if (value.size > 10 * 1024 * 1024) {\n+        setErrors(prev => ({ ...prev, contractFile: '파일 크기는 10MB 이하여야 합니다.' }));\n+        return;\n+      }\n+    }\n+\n+    // 직책이 변경되고 코치가 아닌 경우 담당프로그램 초기화\n+    if (field === 'role' && typeof value === 'string' && value !== '코치') {\n+      setFormData(prev => ({\n+        ...prev,\n+        role: value as string,\n+        program: ''\n+      }));\n+    } \n+    // 고용형태가 정규직으로 변경되면 계약종료일 초기화\n+    else if (field === 'employmentType' && typeof value === 'string' && value === '정규직') {\n+      setFormData(prev => ({\n+        ...prev,\n+        employmentType: value as string,\n+        contractEndDate: ''\n+      }));\n+    } else {\n+      setFormData(prev => ({ ...prev, [field]: value }) as StaffFormData);\n+    }\n+\n+    // 에러 메시지 제거\n+    if (errors[field]) {\n+      setErrors(prev => ({\n+        ...prev,\n+        [field]: ''\n+      }));\n+    }\n+  };\n+\n+  // 전화번호 자동 포맷팅 함수\n+  const formatPhoneNumber = (inputValue: string): string => {\n+    // 숫자만 추출\n+    const numbers = inputValue.replace(/[^\\d]/g, '');\n+    \n+    // 11자리를 초과하면 잘라내기\n+    const truncated = numbers.slice(0, 11);\n+    \n+    // 자동 하이픈 추가\n+    if (truncated.length <= 3) {\n+      return truncated;\n+    } else if (truncated.length <= 7) {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3)}`;\n+    } else {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3, 7)}-${truncated.slice(7)}`;\n+    }\n+  };\n+\n+  const handleUpdate = async () => {\n+    if (!staff || !validateForm()) return;\n+\n+    setLoading(true);\n+    try {\n+      const updateData = {\n+        ...formData,\n+        contractStartDate: formData.contractStartDate ? new Date(formData.contractStartDate) : new Date(),\n+        contractEndDate: formData.contractEndDate && formData.employmentType !== '정규직' ? new Date(formData.contractEndDate) : new Date(),\n+      };\n+      \n+      await dbManager.updateStaff(staff.id, updateData);\n+      onUpdate();\n+      onClose();\n+    } catch (error) {\n+      console.error('직원 수정 실패:', error);\n+      if (error instanceof Error && error.message.includes('이메일')) {\n+        setErrors({ email: '이미 사용 중인 이메일입니다.' });\n+      }\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const handleDelete = async () => {\n+    if (!staff) return;\n+\n+    const confirmed = window.confirm(\n+      `정말로 ${staff.name} 직원을 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.`\n+    );\n+\n+    if (!confirmed) return;\n+\n+    setLoading(true);\n+    try {\n+      await dbManager.deleteStaff(staff.id);\n+      onUpdate();\n+      onClose();\n+    } catch (error) {\n+      console.error('직원 삭제 실패:', error);\n+      alert('직원 삭제에 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const formatDateForInput = (date: Date | string): string => {\n+    if (!date) return '';\n+    \n+    try {\n+      const d = new Date(date);\n+      \n+      // Invalid Date 체크\n+      if (isNaN(d.getTime())) return '';\n+      \n+      return d.toISOString().split('T')[0];\n+    } catch {\n+      return '';\n+    }\n+  };\n+\n+  // 비밀번호 변경 관련 함수들\n+  const validatePassword = (): boolean => {\n+    const newPasswordErrors: Record<string, string> = {};\n+\n+    if (!newPassword.trim()) {\n+      newPasswordErrors.newPassword = '새 비밀번호를 입력해주세요.';\n+    } else if (!/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(newPassword)) {\n+      newPasswordErrors.newPassword = '비밀번호는 8자 이상, 영문+숫자+특수문자 조합이어야 합니다.';\n+    }\n+\n+    if (!confirmPassword.trim()) {\n+      newPasswordErrors.confirmPassword = '비밀번호 확인을 입력해주세요.';\n+    } else if (newPassword !== confirmPassword) {\n+      newPasswordErrors.confirmPassword = '비밀번호가 일치하지 않습니다.';\n+    }\n+\n+    setPasswordErrors(newPasswordErrors);\n+    return Object.keys(newPasswordErrors).length === 0;\n+  };\n+\n+  const handlePasswordChange = async () => {\n+    if (!staff || !validatePassword()) return;\n+\n+    setLoading(true);\n+    try {\n+      await dbManager.updateStaff(staff.id, { password: newPassword });\n+      alert('비밀번호가 성공적으로 변경되었습니다.');\n+      setIsPasswordModalOpen(false);\n+      setNewPassword('');\n+      setConfirmPassword('');\n+      setPasswordErrors({});\n+    } catch (error) {\n+      console.error('비밀번호 변경 실패:', error);\n+      alert('비밀번호 변경에 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const closePasswordModal = () => {\n+    setIsPasswordModalOpen(false);\n+    setNewPassword('');\n+    setConfirmPassword('');\n+    setPasswordErrors({});\n+  };\n+\n+  const modalBody = (\n+    <FormContainer>\n+      {/* 기본 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>기본 정보</SectionTitle>\n+        \n+        {/* 이름 - 전체 너비 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>이름</Label>\n+            <Input\n+              type=\"text\"\n+              value={formData.name || ''}\n+              onChange={(e) => handleInputChange('name', e.target.value)}\n+              placeholder=\"이름을 입력하세요\"\n+              error={!!errors.name}\n+            />\n+            {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 로그인ID (readonly), 비밀번호 변경 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label>로그인 ID</Label>\n+            <Input\n+              type=\"text\"\n+              value={formData.loginId || ''}\n+              readOnly\n+              style={{ backgroundColor: AppColors.background, color: AppColors.onInput1, cursor: 'not-allowed' }}\n+              placeholder=\"로그인 ID\"\n+            />\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label>비밀번호</Label>\n+            <Button \n+              variant=\"primary\" \n+              onClick={() => setIsPasswordModalOpen(true)}\n+              style={{ width: '100%', textAlign: 'center', padding: '12px' }}\n+            >\n+              비밀번호 변경\n+            </Button>\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 이메일, 연락처 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>이메일</Label>\n+            <Input\n+              type=\"email\"\n+              value={formData.email || ''}\n+              onChange={(e) => handleInputChange('email', e.target.value)}\n+              placeholder=\"example@email.com\"\n+              error={!!errors.email}\n+            />\n+            {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>연락처</Label>\n+            <Input\n+              type=\"tel\"\n+              inputMode=\"numeric\"\n+              value={formData.phone || ''}\n+              onChange={(e) => handleInputChange('phone', e.target.value)}\n+              placeholder=\"010-1234-5678\"\n+              error={!!errors.phone}\n+              maxLength={13}\n+              autoComplete=\"tel\"\n+            />\n+            {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n+\n+      {/* 조직 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>조직 정보</SectionTitle>\n+        \n+        {/* 지점, 권한 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>지점</Label>\n+            <CustomDropdown\n+              value={formData.branchId || ''}\n+              onChange={(value: string) => handleInputChange('branchId', value)}\n+              options={getBranchOptions()}\n+              placeholder=\"지점을 선택하세요\"\n+              error={!!errors.branchId}\n+              required\n+            />\n+            {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>권한</Label>\n+            <CustomDropdown\n+              value={formData.permission || ''}\n+              onChange={(value: string) => handleInputChange('permission', value)}\n+              options={getPermissionOptions()}\n+              placeholder=\"권한을 선택하세요\"\n+              error={!!errors.permission}\n+              required\n+            />\n+            {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 직급, 직책 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>직급</Label>\n+            <CustomDropdown\n+              value={formData.position || ''}\n+              onChange={(value: string) => handleInputChange('position', value)}\n+              options={getPositionOptions()}\n+              placeholder=\"직급을 선택하세요\"\n+              error={!!errors.position}\n+              required\n+            />\n+            {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>직책</Label>\n+            <CustomDropdown\n+              value={formData.role || ''}\n+              onChange={(value: string) => handleInputChange('role', value)}\n+              options={getRoleOptions()}\n+              placeholder=\"직책을 선택하세요\"\n+              error={!!errors.role}\n+              required\n+            />\n+            {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 고용형태, 담당프로그램 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>고용형태</Label>\n+            <CustomDropdown\n+              value={formData.employmentType || ''}\n+              onChange={(value: string) => handleInputChange('employmentType', value)}\n+              options={getEmploymentTypeOptions()}\n+              placeholder=\"고용형태를 선택하세요\"\n+              error={!!errors.employmentType}\n+              required\n+            />\n+            {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label>담당프로그램</Label>\n+            <CustomDropdown\n+              value={formData.program || ''}\n+              onChange={(value: string) => handleInputChange('program', value)}\n+              options={getProgramOptions()}\n+              placeholder={formData.role === '코치' ? \"담당프로그램을 선택하세요\" : \"코치만 선택 가능\"}\n+              error={!!errors.program}\n+              disabled={formData.role !== '코치'}\n+            />\n+            {errors.program && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.program}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n+\n+      {/* 계약 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>계약 정보</SectionTitle>\n+        \n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>계약시작일</Label>\n+            <CustomDateInput\n+              value={formData.contractStartDate || ''}\n+              onChange={(value: string) => handleInputChange('contractStartDate', value)}\n+              placeholder=\"계약시작일을 선택하세요\"\n+              error={!!errors.contractStartDate}\n+              max={getContractStartDateMax()}\n+              required\n+            />\n+            {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required={formData.employmentType !== '정규직'}>계약종료일</Label>\n+            <CustomDateInput\n+              value={formData.contractEndDate || ''}\n+              onChange={(value: string) => handleInputChange('contractEndDate', value)}\n+              placeholder={formData.employmentType === '정규직' ? \"정규직은 입력 불필요\" : \"계약종료일을 선택하세요\"}\n+              error={!!errors.contractEndDate}\n+              min={getContractEndDateMin()}\n+              disabled={formData.employmentType === '정규직'}\n+              required={formData.employmentType !== '정규직'}\n+            />\n+            {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        <FieldRow>\n+          <FieldColumn>\n+            <StaffFileUploadField\n+              label=\"계약서 파일\"\n+              value={formData.contractFile || null}\n+              onChange={(file) => handleInputChange('contractFile', file)}\n+              placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n+              errorMessage={errors.contractFile}\n+              fullWidth\n+            />\n+            {staff?.contractFileName && !formData.contractFile && (\n+              <div style={{ \n+                fontSize: AppTextStyles.body2.fontSize, \n+                color: AppColors.onInput1, \n+                marginTop: '4px' \n+              }}>\n+                현재 파일: {staff.contractFileName}\n+              </div>\n+            )}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n+\n+    </FormContainer>\n+  );\n+\n+  const modalFooter = (\n+    <ButtonContainer>\n+      <Button variant=\"danger\" onClick={handleDelete} disabled={loading}>\n+        삭제\n+      </Button>\n+      <div style={{ display: 'flex', gap: '12px' }}>\n+        <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n+          취소\n+        </Button>\n+        <Button variant=\"primary\" onClick={handleUpdate} disabled={loading}>\n+          {loading ? '처리 중...' : '수정'}\n+        </Button>\n+      </div>\n+    </ButtonContainer>\n+  );\n+\n+  return (\n+    <>\n+      <Modal\n+        isOpen={isOpen}\n+        onClose={onClose}\n+        width=\"1000px\"\n+        height=\"80vh\"\n+        header=\"직원 정보 수정\"\n+        body={modalBody}\n+        footer={modalFooter}\n+        disableOutsideClick={true}\n+      />\n+\n+      {/* 비밀번호 변경 모달 */}\n+      <Modal\n+        isOpen={isPasswordModalOpen}\n+        onClose={closePasswordModal}\n+        width=\"400px\"\n+        height=\"auto\"\n+        header=\"비밀번호 변경\"\n+        body={\n+          <div style={{ \n+            padding: '20px', \n+            display: 'flex', \n+            flexDirection: 'column', \n+            gap: '16px',\n+            textAlign: 'left' // 중앙정렬 재정의\n+          }}>\n+            <div>\n+              <Label $required>새 비밀번호</Label>\n+              <Input\n+                type=\"password\"\n+                value={newPassword}\n+                onChange={(e) => setNewPassword(e.target.value)}\n+                placeholder=\"영문+숫자+특수문자 8자 이상\"\n+                error={!!passwordErrors.newPassword}\n+              />\n+              {passwordErrors.newPassword && (\n+                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n+                  {passwordErrors.newPassword}\n+                </div>\n+              )}\n+            </div>\n+            \n+            <div>\n+              <Label $required>비밀번호 확인</Label>\n+              <Input\n+                type=\"password\"\n+                value={confirmPassword}\n+                onChange={(e) => setConfirmPassword(e.target.value)}\n+                placeholder=\"비밀번호를 다시 입력하세요\"\n+                error={!!passwordErrors.confirmPassword}\n+              />\n+              {passwordErrors.confirmPassword && (\n+                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n+                  {passwordErrors.confirmPassword}\n+                </div>\n+              )}\n+            </div>\n+          </div>\n+        }\n+        footer={\n+          <ButtonContainer>\n+            <Button variant=\"secondary\" onClick={closePasswordModal} disabled={loading}>\n+              취소\n+            </Button>\n+            <Button variant=\"primary\" onClick={handlePasswordChange} disabled={loading}>\n+              {loading ? '변경 중...' : '변경'}\n+            </Button>\n+          </ButtonContainer>\n+        }\n+        disableOutsideClick={true}\n+      />\n+    </>\n+  );\n+};\n+\n+export default StaffEditPopup;\n"
                },
                {
                    "date": 1759910043095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,8 +189,9 @@\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [loading, setLoading] = useState(false);\n   const [errors, setErrors] = useState<Record<string, string>>({});\n   const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n+  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n   const [newPassword, setNewPassword] = useState('');\n   const [confirmPassword, setConfirmPassword] = useState('');\n   const [passwordErrors, setPasswordErrors] = useState<Record<string, string>>({});\n \n@@ -465,22 +466,25 @@\n       setLoading(false);\n     }\n   };\n \n+  const openDeleteModal = () => {\n+    setIsDeleteModalOpen(true);\n+  };\n+\n+  const closeDeleteModal = () => {\n+    setIsDeleteModalOpen(false);\n+  };\n+\n   const handleDelete = async () => {\n     if (!staff) return;\n \n-    const confirmed = window.confirm(\n-      `정말로 ${staff.name} 직원을 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.`\n-    );\n-\n-    if (!confirmed) return;\n-\n     setLoading(true);\n     try {\n       await dbManager.deleteStaff(staff.id);\n       onUpdate();\n       onClose();\n+      closeDeleteModal();\n     } catch (error) {\n       console.error('직원 삭제 실패:', error);\n       alert('직원 삭제에 실패했습니다.');\n     } finally {\n@@ -778,9 +782,9 @@\n   );\n \n   const modalFooter = (\n     <ButtonContainer>\n-      <Button variant=\"danger\" onClick={handleDelete} disabled={loading}>\n+      <Button variant=\"danger\" onClick={openDeleteModal} disabled={loading}>\n         삭제\n       </Button>\n       <div style={{ display: 'flex', gap: '12px' }}>\n         <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n@@ -865,873 +869,50 @@\n           </ButtonContainer>\n         }\n         disableOutsideClick={true}\n       />\n-    </>\n-  );\n-};\n \n-export default StaffEditPopup;\n-import React, { useState, useEffect } from 'react';\n-import styled from 'styled-components';\n-import Modal from '../../../components/Modal';\n-import CustomDropdown from '../../../components/CustomDropdown';\n-import CustomDateInput from '../../../components/CustomDateInput';\n-import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n-import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n-\n-const FormContainer = styled.div`\n-  width: 100%;\n-  height: 100%;\n-  overflow-y: auto;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 24px;\n-  text-align: left; // 모달 기본 center 정렬 재정의\n-  \n-  /* 스크롤바 숨김 - Webkit 브라우저 (Chrome, Safari, Edge) */\n-  &::-webkit-scrollbar {\n-    display: none;\n-  }\n-  \n-  /* 스크롤바 숨김 - Firefox */\n-  scrollbar-width: none;\n-  \n-  /* 스크롤바 숨김 - IE/Edge Legacy */\n-  -ms-overflow-style: none;\n-`;\n-\n-const FormSection = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  gap: 16px;\n-  padding: 24px;\n-  background: ${AppColors.surface};\n-  border-radius: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const SectionTitle = styled.h3`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onSurface};\n-  margin: 0;\n-`;\n-\n-const FieldRow = styled.div`\n-  display: flex;\n-  gap: 16px;\n-`;\n-\n-const FieldColumn = styled.div`\n-  flex: 1;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 8px;\n-  min-width: 0;\n-  overflow: hidden;\n-`;\n-\n-const Label = styled.label<{ $required?: boolean }>`\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onSurface};\n-  \n-  ${({ $required }) => $required && `\n-    &::after {\n-      content: ' *';\n-      color: ${AppColors.error};\n-    }\n-  `}\n-`;\n-\n-const Input = styled.input<{ error?: boolean }>`\n-  width: 100%;\n-  min-width: 0;\n-  padding: 12px;\n-  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${AppColors.onSurface};\n-  background-color: ${AppColors.input};\n-  box-sizing: border-box;\n-  \n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n-`;\n-\n-const ButtonContainer = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  justify-content: flex-end;\n-  width: 100%;\n-`;\n-\n-const Button = styled.button<{ variant?: 'primary' | 'secondary' | 'danger' }>`\n-  padding: 12px 24px;\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  font-weight: 600;\n-  border: none;\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  ${({ variant = 'primary' }) => variant === 'primary' ? `\n-    background-color: ${AppColors.primary};\n-    color: ${AppColors.onPrimary};\n-    \n-    &:hover {\n-      background-color: ${AppColors.buttonPrimaryHover};\n-    }\n-  ` : variant === 'danger' ? `\n-    background-color: ${AppColors.error};\n-    color: ${AppColors.onPrimary};\n-    \n-    &:hover {\n-      opacity: 0.9;\n-    }\n-  ` : `\n-    background-color: ${AppColors.surface};\n-    color: ${AppColors.onSurface};\n-    border: 1px solid ${AppColors.borderLight};\n-    \n-    &:hover {\n-      background-color: ${AppColors.btnC};\n-    }\n-  `}\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-interface StaffEditPopupProps {\n-  isOpen: boolean;\n-  staff: Staff | null;\n-  onClose: () => void;\n-  onUpdate: () => void; // 업데이트 후 부모 컴포넌트에서 데이터 새로고침\n-}\n-\n-interface StaffFormData {\n-  name: string;\n-  loginId: string;\n-  phone: string;\n-  email: string;\n-  branchId: string;\n-  position: string;\n-  role: string;\n-  employmentType: string;\n-  permission: string;\n-  program: string; // 담당프로그램 필드 추가\n-  contractStartDate: string;\n-  contractEndDate: string;\n-  contractFile: File | null;\n-}\n-\n-const StaffEditPopup: React.FC<StaffEditPopupProps> = ({\n-  isOpen,\n-  staff,\n-  onClose,\n-  onUpdate\n-}) => {\n-  const [formData, setFormData] = useState<StaffFormData>({\n-    name: '',\n-    loginId: '',\n-    phone: '',\n-    email: '',\n-    branchId: '',\n-    position: '',\n-    role: '',\n-    employmentType: '',\n-    permission: '',\n-    program: '',\n-    contractStartDate: '',\n-    contractEndDate: '',\n-    contractFile: null\n-  });\n-  const [branches, setBranches] = useState<Branch[]>([]);\n-  const [loading, setLoading] = useState(false);\n-  const [errors, setErrors] = useState<Record<string, string>>({});\n-  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n-  const [newPassword, setNewPassword] = useState('');\n-  const [confirmPassword, setConfirmPassword] = useState('');\n-  const [passwordErrors, setPasswordErrors] = useState<Record<string, string>>({});\n-\n-  // 직원 데이터가 변경될 때 폼 데이터 초기화\n-  useEffect(() => {\n-    if (staff) {\n-      setFormData({\n-        name: staff.name,\n-        loginId: staff.loginId,\n-        phone: staff.phone,\n-        email: staff.email,\n-        branchId: staff.branchId,\n-        position: staff.position,\n-        role: staff.role,\n-        employmentType: staff.employmentType,\n-        permission: staff.permission,\n-        program: (staff as any).program || '', // 담당프로그램 필드 추가\n-        contractStartDate: staff.contractStartDate ? formatDateForInput(staff.contractStartDate) : '',\n-        contractEndDate: staff.contractEndDate ? formatDateForInput(staff.contractEndDate) : '',\n-        contractFile: null,\n-      });\n-    }\n-  }, [staff]);\n-\n-  // 지점 데이터 로드\n-  useEffect(() => {\n-    const loadBranches = async () => {\n-      try {\n-        const branchData = await dbManager.getAllBranches();\n-        setBranches(branchData);\n-      } catch (error) {\n-        console.error('지점 데이터 로드 실패:', error);\n-      }\n-    };\n-\n-    if (isOpen) {\n-      loadBranches();\n-    }\n-  }, [isOpen]);\n-\n-  // 드롭다운 옵션 변환 함수들\n-  const getBranchOptions = () => {\n-    return branches.map(branch => ({\n-      value: branch.id,\n-      label: branch.name,\n-      description: branch.address\n-    }));\n-  };\n-\n-  const getPositionOptions = () => {\n-    return POSITIONS.map(position => ({\n-      value: position,\n-      label: position\n-    }));\n-  };\n-\n-  const getRoleOptions = () => {\n-    return ROLES.map(role => ({\n-      value: role,\n-      label: role\n-    }));\n-  };\n-\n-  const getEmploymentTypeOptions = () => {\n-    return EMPLOYMENT_TYPES.map(type => ({\n-      value: type,\n-      label: type\n-    }));\n-  };\n-\n-  const getPermissionOptions = () => {\n-    return PERMISSIONS.map(permission => ({\n-      value: permission.value,\n-      label: permission.label,\n-      description: permission.description\n-    }));\n-  };\n-\n-  const getProgramOptions = () => {\n-    return [\n-      { value: '릴랙싱', label: '릴랙싱' },\n-      { value: 'WBM', label: 'WBM' }\n-    ];\n-  };\n-\n-  // 날짜 범위 계산 함수들\n-  const getContractStartDateMax = (): string | undefined => {\n-    if (formData.contractEndDate) {\n-      try {\n-        const endDate = new Date(formData.contractEndDate);\n-        if (isNaN(endDate.getTime())) return undefined;\n-        \n-        endDate.setDate(endDate.getDate() - 1);\n-        return endDate.toISOString().split('T')[0];\n-      } catch {\n-        return undefined;\n-      }\n-    }\n-    return undefined;\n-  };\n-\n-  const getContractEndDateMin = (): string | undefined => {\n-    if (formData.contractStartDate) {\n-      try {\n-        const startDate = new Date(formData.contractStartDate);\n-        if (isNaN(startDate.getTime())) return undefined;\n-        \n-        startDate.setDate(startDate.getDate() + 1);\n-        return startDate.toISOString().split('T')[0];\n-      } catch {\n-        return undefined;\n-      }\n-    }\n-    return undefined;\n-  };\n-\n-  const validateForm = (): boolean => {\n-    const newErrors: Record<string, string> = {};\n-\n-    if (!formData.name?.trim()) {\n-      newErrors.name = '이름을 입력해주세요.';\n-    }\n-\n-    if (!formData.phone?.trim()) {\n-      newErrors.phone = '전화번호를 입력해주세요.';\n-    } else if (!/^010-\\d{4}-\\d{4}$/.test(formData.phone)) {\n-      newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010-1234-5678)';\n-    }\n-\n-    if (!formData.email?.trim()) {\n-      newErrors.email = '이메일을 입력해주세요.';\n-    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n-      newErrors.email = '올바른 이메일 형식이 아닙니다.';\n-    }\n-\n-    if (!formData.branchId) {\n-      newErrors.branchId = '지점을 선택해주세요.';\n-    }\n-\n-    if (!formData.position?.trim()) {\n-      newErrors.position = '직급을 입력해주세요.';\n-    }\n-\n-    if (!formData.role?.trim()) {\n-      newErrors.role = '직책을 입력해주세요.';\n-    }\n-\n-    if (!formData.employmentType) {\n-      newErrors.employmentType = '고용형태를 선택해주세요.';\n-    }\n-\n-    if (!formData.permission) {\n-      newErrors.permission = '권한을 선택해주세요.';\n-    }\n-\n-    if (!formData.contractStartDate) {\n-      newErrors.contractStartDate = '계약 시작일을 선택해주세요.';\n-    }\n-\n-    // 정규직이 아닌 경우에만 계약종료일 필수\n-    if (formData.employmentType !== '정규직' && !formData.contractEndDate) {\n-      newErrors.contractEndDate = '계약 종료일을 선택해주세요.';\n-    }\n-\n-    // 코치일 경우 담당프로그램 필수\n-    if (formData.role === '코치' && !formData.program) {\n-      newErrors.program = '코치는 담당프로그램 선택이 필수입니다.';\n-    }\n-\n-    // 날짜 검증 (정규직이 아닌 경우에만)\n-    if (formData.employmentType !== '정규직' && formData.contractStartDate && formData.contractEndDate) {\n-      if (new Date(formData.contractStartDate) >= new Date(formData.contractEndDate)) {\n-        newErrors.contractEndDate = '계약 종료일은 시작일보다 늦어야 합니다.';\n-      }\n-    }\n-\n-    setErrors(newErrors);\n-    return Object.keys(newErrors).length === 0;\n-  };\n-\n-  const handleInputChange = (\n-    field: keyof StaffFormData,\n-    value: string | File | null\n-  ) => {\n-    // 전화번호 필드인 경우 자동 포맷팅 적용\n-    if (field === 'phone' && typeof value === 'string') {\n-      value = formatPhoneNumber(value);\n-    }\n-\n-    // 파일 업로드 필드인 경우 검증 수행\n-    if (field === 'contractFile' && value instanceof File) {\n-      // 파일 타입 검증 (이미지 또는 PDF만 허용)\n-      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n-      if (!allowedTypes.includes(value.type)) {\n-        setErrors(prev => ({ ...prev, contractFile: '이미지(JPG, PNG) 또는 PDF 파일만 업로드 가능합니다.' }));\n-        return;\n-      }\n-      \n-      // 파일 크기 검증 (10MB 제한)\n-      if (value.size > 10 * 1024 * 1024) {\n-        setErrors(prev => ({ ...prev, contractFile: '파일 크기는 10MB 이하여야 합니다.' }));\n-        return;\n-      }\n-    }\n-\n-    // 직책이 변경되고 코치가 아닌 경우 담당프로그램 초기화\n-    if (field === 'role' && typeof value === 'string' && value !== '코치') {\n-      setFormData(prev => ({\n-        ...prev,\n-        role: value as string,\n-        program: ''\n-      }));\n-    } \n-    // 고용형태가 정규직으로 변경되면 계약종료일 초기화\n-    else if (field === 'employmentType' && typeof value === 'string' && value === '정규직') {\n-      setFormData(prev => ({\n-        ...prev,\n-        employmentType: value as string,\n-        contractEndDate: ''\n-      }));\n-    } else {\n-      setFormData(prev => ({ ...prev, [field]: value }) as StaffFormData);\n-    }\n-\n-    // 에러 메시지 제거\n-    if (errors[field]) {\n-      setErrors(prev => ({\n-        ...prev,\n-        [field]: ''\n-      }));\n-    }\n-  };\n-\n-  // 전화번호 자동 포맷팅 함수\n-  const formatPhoneNumber = (inputValue: string): string => {\n-    // 숫자만 추출\n-    const numbers = inputValue.replace(/[^\\d]/g, '');\n-    \n-    // 11자리를 초과하면 잘라내기\n-    const truncated = numbers.slice(0, 11);\n-    \n-    // 자동 하이픈 추가\n-    if (truncated.length <= 3) {\n-      return truncated;\n-    } else if (truncated.length <= 7) {\n-      return `${truncated.slice(0, 3)}-${truncated.slice(3)}`;\n-    } else {\n-      return `${truncated.slice(0, 3)}-${truncated.slice(3, 7)}-${truncated.slice(7)}`;\n-    }\n-  };\n-\n-  const handleUpdate = async () => {\n-    if (!staff || !validateForm()) return;\n-\n-    setLoading(true);\n-    try {\n-      const updateData = {\n-        ...formData,\n-        contractStartDate: formData.contractStartDate ? new Date(formData.contractStartDate) : new Date(),\n-        contractEndDate: formData.contractEndDate && formData.employmentType !== '정규직' ? new Date(formData.contractEndDate) : new Date(),\n-      };\n-      \n-      await dbManager.updateStaff(staff.id, updateData);\n-      onUpdate();\n-      onClose();\n-    } catch (error) {\n-      console.error('직원 수정 실패:', error);\n-      if (error instanceof Error && error.message.includes('이메일')) {\n-        setErrors({ email: '이미 사용 중인 이메일입니다.' });\n-      }\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const handleDelete = async () => {\n-    if (!staff) return;\n-\n-    const confirmed = window.confirm(\n-      `정말로 ${staff.name} 직원을 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.`\n-    );\n-\n-    if (!confirmed) return;\n-\n-    setLoading(true);\n-    try {\n-      await dbManager.deleteStaff(staff.id);\n-      onUpdate();\n-      onClose();\n-    } catch (error) {\n-      console.error('직원 삭제 실패:', error);\n-      alert('직원 삭제에 실패했습니다.');\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const formatDateForInput = (date: Date | string): string => {\n-    if (!date) return '';\n-    \n-    try {\n-      const d = new Date(date);\n-      \n-      // Invalid Date 체크\n-      if (isNaN(d.getTime())) return '';\n-      \n-      return d.toISOString().split('T')[0];\n-    } catch {\n-      return '';\n-    }\n-  };\n-\n-  // 비밀번호 변경 관련 함수들\n-  const validatePassword = (): boolean => {\n-    const newPasswordErrors: Record<string, string> = {};\n-\n-    if (!newPassword.trim()) {\n-      newPasswordErrors.newPassword = '새 비밀번호를 입력해주세요.';\n-    } else if (!/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(newPassword)) {\n-      newPasswordErrors.newPassword = '비밀번호는 8자 이상, 영문+숫자+특수문자 조합이어야 합니다.';\n-    }\n-\n-    if (!confirmPassword.trim()) {\n-      newPasswordErrors.confirmPassword = '비밀번호 확인을 입력해주세요.';\n-    } else if (newPassword !== confirmPassword) {\n-      newPasswordErrors.confirmPassword = '비밀번호가 일치하지 않습니다.';\n-    }\n-\n-    setPasswordErrors(newPasswordErrors);\n-    return Object.keys(newPasswordErrors).length === 0;\n-  };\n-\n-  const handlePasswordChange = async () => {\n-    if (!staff || !validatePassword()) return;\n-\n-    setLoading(true);\n-    try {\n-      await dbManager.updateStaff(staff.id, { password: newPassword });\n-      alert('비밀번호가 성공적으로 변경되었습니다.');\n-      setIsPasswordModalOpen(false);\n-      setNewPassword('');\n-      setConfirmPassword('');\n-      setPasswordErrors({});\n-    } catch (error) {\n-      console.error('비밀번호 변경 실패:', error);\n-      alert('비밀번호 변경에 실패했습니다.');\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const closePasswordModal = () => {\n-    setIsPasswordModalOpen(false);\n-    setNewPassword('');\n-    setConfirmPassword('');\n-    setPasswordErrors({});\n-  };\n-\n-  const modalBody = (\n-    <FormContainer>\n-      {/* 기본 정보 섹션 */}\n-      <FormSection>\n-        <SectionTitle>기본 정보</SectionTitle>\n-        \n-        {/* 이름 - 전체 너비 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>이름</Label>\n-            <Input\n-              type=\"text\"\n-              value={formData.name || ''}\n-              onChange={(e) => handleInputChange('name', e.target.value)}\n-              placeholder=\"이름을 입력하세요\"\n-              error={!!errors.name}\n-            />\n-            {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        {/* 로그인ID (readonly), 비밀번호 변경 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label>로그인 ID</Label>\n-            <Input\n-              type=\"text\"\n-              value={formData.loginId || ''}\n-              readOnly\n-              style={{ backgroundColor: AppColors.background, color: AppColors.onInput1, cursor: 'not-allowed' }}\n-              placeholder=\"로그인 ID\"\n-            />\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label>비밀번호</Label>\n-            <Button \n-              variant=\"primary\" \n-              onClick={() => setIsPasswordModalOpen(true)}\n-              style={{ width: '100%', textAlign: 'center', padding: '12px' }}\n-            >\n-              비밀번호 변경\n-            </Button>\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        {/* 이메일, 연락처 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>이메일</Label>\n-            <Input\n-              type=\"email\"\n-              value={formData.email || ''}\n-              onChange={(e) => handleInputChange('email', e.target.value)}\n-              placeholder=\"example@email.com\"\n-              error={!!errors.email}\n-            />\n-            {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required>연락처</Label>\n-            <Input\n-              type=\"tel\"\n-              inputMode=\"numeric\"\n-              value={formData.phone || ''}\n-              onChange={(e) => handleInputChange('phone', e.target.value)}\n-              placeholder=\"010-1234-5678\"\n-              error={!!errors.phone}\n-              maxLength={13}\n-              autoComplete=\"tel\"\n-            />\n-            {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-      </FormSection>\n-\n-      {/* 조직 정보 섹션 */}\n-      <FormSection>\n-        <SectionTitle>조직 정보</SectionTitle>\n-        \n-        {/* 지점, 권한 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>지점</Label>\n-            <CustomDropdown\n-              value={formData.branchId || ''}\n-              onChange={(value: string) => handleInputChange('branchId', value)}\n-              options={getBranchOptions()}\n-              placeholder=\"지점을 선택하세요\"\n-              error={!!errors.branchId}\n-              required\n-            />\n-            {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required>권한</Label>\n-            <CustomDropdown\n-              value={formData.permission || ''}\n-              onChange={(value: string) => handleInputChange('permission', value)}\n-              options={getPermissionOptions()}\n-              placeholder=\"권한을 선택하세요\"\n-              error={!!errors.permission}\n-              required\n-            />\n-            {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        {/* 직급, 직책 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>직급</Label>\n-            <CustomDropdown\n-              value={formData.position || ''}\n-              onChange={(value: string) => handleInputChange('position', value)}\n-              options={getPositionOptions()}\n-              placeholder=\"직급을 선택하세요\"\n-              error={!!errors.position}\n-              required\n-            />\n-            {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required>직책</Label>\n-            <CustomDropdown\n-              value={formData.role || ''}\n-              onChange={(value: string) => handleInputChange('role', value)}\n-              options={getRoleOptions()}\n-              placeholder=\"직책을 선택하세요\"\n-              error={!!errors.role}\n-              required\n-            />\n-            {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        {/* 고용형태, 담당프로그램 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>고용형태</Label>\n-            <CustomDropdown\n-              value={formData.employmentType || ''}\n-              onChange={(value: string) => handleInputChange('employmentType', value)}\n-              options={getEmploymentTypeOptions()}\n-              placeholder=\"고용형태를 선택하세요\"\n-              error={!!errors.employmentType}\n-              required\n-            />\n-            {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label>담당프로그램</Label>\n-            <CustomDropdown\n-              value={formData.program || ''}\n-              onChange={(value: string) => handleInputChange('program', value)}\n-              options={getProgramOptions()}\n-              placeholder={formData.role === '코치' ? \"담당프로그램을 선택하세요\" : \"코치만 선택 가능\"}\n-              error={!!errors.program}\n-              disabled={formData.role !== '코치'}\n-            />\n-            {errors.program && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.program}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-      </FormSection>\n-\n-      {/* 계약 정보 섹션 */}\n-      <FormSection>\n-        <SectionTitle>계약 정보</SectionTitle>\n-        \n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>계약시작일</Label>\n-            <CustomDateInput\n-              value={formData.contractStartDate || ''}\n-              onChange={(value: string) => handleInputChange('contractStartDate', value)}\n-              placeholder=\"계약시작일을 선택하세요\"\n-              error={!!errors.contractStartDate}\n-              max={getContractStartDateMax()}\n-              required\n-            />\n-            {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required={formData.employmentType !== '정규직'}>계약종료일</Label>\n-            <CustomDateInput\n-              value={formData.contractEndDate || ''}\n-              onChange={(value: string) => handleInputChange('contractEndDate', value)}\n-              placeholder={formData.employmentType === '정규직' ? \"정규직은 입력 불필요\" : \"계약종료일을 선택하세요\"}\n-              error={!!errors.contractEndDate}\n-              min={getContractEndDateMin()}\n-              disabled={formData.employmentType === '정규직'}\n-              required={formData.employmentType !== '정규직'}\n-            />\n-            {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        <FieldRow>\n-          <FieldColumn>\n-            <StaffFileUploadField\n-              label=\"계약서 파일\"\n-              value={formData.contractFile || null}\n-              onChange={(file) => handleInputChange('contractFile', file)}\n-              placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n-              errorMessage={errors.contractFile}\n-              fullWidth\n-            />\n-            {staff?.contractFileName && !formData.contractFile && (\n-              <div style={{ \n-                fontSize: AppTextStyles.body2.fontSize, \n-                color: AppColors.onInput1, \n-                marginTop: '4px' \n-              }}>\n-                현재 파일: {staff.contractFileName}\n-              </div>\n-            )}\n-          </FieldColumn>\n-        </FieldRow>\n-      </FormSection>\n-\n-    </FormContainer>\n-  );\n-\n-  const modalFooter = (\n-    <ButtonContainer>\n-      <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n-        취소\n-      </Button>\n-      <Button variant=\"danger\" onClick={handleDelete} disabled={loading}>\n-        삭제\n-      </Button>\n-      <Button variant=\"primary\" onClick={handleUpdate} disabled={loading}>\n-        {loading ? '처리 중...' : '수정'}\n-      </Button>\n-    </ButtonContainer>\n-  );\n-\n-  return (\n-    <>\n+      {/* 삭제 확인 모달 */}\n       <Modal\n-        isOpen={isOpen}\n-        onClose={onClose}\n-        width=\"1000px\"\n-        height=\"80vh\"\n-        header=\"직원 정보 수정\"\n-        body={modalBody}\n-        footer={modalFooter}\n-        disableOutsideClick={true}\n-      />\n-\n-      {/* 비밀번호 변경 모달 */}\n-      <Modal\n-        isOpen={isPasswordModalOpen}\n-        onClose={closePasswordModal}\n+        isOpen={isDeleteModalOpen}\n+        onClose={closeDeleteModal}\n         width=\"400px\"\n         height=\"auto\"\n-        header=\"비밀번호 변경\"\n+        header=\"직원 삭제 확인\"\n         body={\n           <div style={{ \n             padding: '20px', \n             display: 'flex', \n             flexDirection: 'column', \n             gap: '16px',\n-            textAlign: 'left' // 중앙정렬 재정의\n+            textAlign: 'left'\n           }}>\n-            <div>\n-              <Label $required>새 비밀번호</Label>\n-              <Input\n-                type=\"password\"\n-                value={newPassword}\n-                onChange={(e) => setNewPassword(e.target.value)}\n-                placeholder=\"영문+숫자+특수문자 8자 이상\"\n-                error={!!passwordErrors.newPassword}\n-              />\n-              {passwordErrors.newPassword && (\n-                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n-                  {passwordErrors.newPassword}\n-                </div>\n-              )}\n+            <div style={{ \n+              fontSize: '16px', \n+              lineHeight: '1.5',\n+              color: '#333'\n+            }}>\n+              정말로 <strong>{staff?.name}</strong> 직원을 삭제하시겠습니까?\n             </div>\n-            \n-            <div>\n-              <Label $required>비밀번호 확인</Label>\n-              <Input\n-                type=\"password\"\n-                value={confirmPassword}\n-                onChange={(e) => setConfirmPassword(e.target.value)}\n-                placeholder=\"비밀번호를 다시 입력하세요\"\n-                error={!!passwordErrors.confirmPassword}\n-              />\n-              {passwordErrors.confirmPassword && (\n-                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n-                  {passwordErrors.confirmPassword}\n-                </div>\n-              )}\n+            <div style={{ \n+              fontSize: '14px', \n+              color: '#666',\n+              backgroundColor: '#fff3cd',\n+              padding: '12px',\n+              borderRadius: '6px',\n+              border: '1px solid #ffeaa7'\n+            }}>\n+              ⚠️ 삭제된 데이터는 복구할 수 없습니다.\n             </div>\n           </div>\n         }\n         footer={\n           <ButtonContainer>\n-            <Button variant=\"secondary\" onClick={closePasswordModal} disabled={loading}>\n+            <Button variant=\"secondary\" onClick={closeDeleteModal} disabled={loading}>\n               취소\n             </Button>\n-            <Button variant=\"primary\" onClick={handlePasswordChange} disabled={loading}>\n-              {loading ? '변경 중...' : '변경'}\n+            <Button variant=\"danger\" onClick={handleDelete} disabled={loading}>\n+              {loading ? '삭제 중...' : '삭제'}\n             </Button>\n           </ButtonContainer>\n         }\n         disableOutsideClick={true}\n@@ -1740,868 +921,4 @@\n   );\n };\n \n export default StaffEditPopup;\n-import React, { useState, useEffect } from 'react';\n-import styled from 'styled-components';\n-import Modal from '../../../components/Modal';\n-import CustomDropdown from '../../../components/CustomDropdown';\n-import CustomDateInput from '../../../components/CustomDateInput';\n-import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n-import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n-\n-const FormContainer = styled.div`\n-  width: 100%;\n-  height: 100%;\n-  overflow-y: auto;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 24px;\n-  text-align: left; // 모달 기본 center 정렬 재정의\n-  \n-  /* 스크롤바 숨김 - Webkit 브라우저 (Chrome, Safari, Edge) */\n-  &::-webkit-scrollbar {\n-    display: none;\n-  }\n-  \n-  /* 스크롤바 숨김 - Firefox */\n-  scrollbar-width: none;\n-  \n-  /* 스크롤바 숨김 - IE/Edge Legacy */\n-  -ms-overflow-style: none;\n-`;\n-\n-const FormSection = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  gap: 16px;\n-  padding: 24px;\n-  background: ${AppColors.surface};\n-  border-radius: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const SectionTitle = styled.h3`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onSurface};\n-  margin: 0;\n-`;\n-\n-const FieldRow = styled.div`\n-  display: flex;\n-  gap: 16px;\n-`;\n-\n-const FieldColumn = styled.div`\n-  flex: 1;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 8px;\n-  min-width: 0;\n-  overflow: hidden;\n-`;\n-\n-const Label = styled.label<{ $required?: boolean }>`\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onSurface};\n-  \n-  ${({ $required }) => $required && `\n-    &::after {\n-      content: ' *';\n-      color: ${AppColors.error};\n-    }\n-  `}\n-`;\n-\n-const Input = styled.input<{ error?: boolean }>`\n-  width: 100%;\n-  min-width: 0;\n-  padding: 12px;\n-  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${AppColors.onSurface};\n-  background-color: ${AppColors.input};\n-  box-sizing: border-box;\n-  \n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n-`;\n-\n-const ButtonContainer = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  justify-content: flex-end;\n-  width: 100%;\n-`;\n-\n-const Button = styled.button<{ variant?: 'primary' | 'secondary' | 'danger' }>`\n-  padding: 12px 24px;\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  font-weight: 600;\n-  border: none;\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  ${({ variant = 'primary' }) => variant === 'primary' ? `\n-    background-color: ${AppColors.primary};\n-    color: ${AppColors.onPrimary};\n-    \n-    &:hover {\n-      background-color: ${AppColors.buttonPrimaryHover};\n-    }\n-  ` : variant === 'danger' ? `\n-    background-color: ${AppColors.error};\n-    color: ${AppColors.onPrimary};\n-    \n-    &:hover {\n-      opacity: 0.9;\n-    }\n-  ` : `\n-    background-color: ${AppColors.surface};\n-    color: ${AppColors.onSurface};\n-    border: 1px solid ${AppColors.borderLight};\n-    \n-    &:hover {\n-      background-color: ${AppColors.btnC};\n-    }\n-  `}\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-interface StaffEditPopupProps {\n-  isOpen: boolean;\n-  staff: Staff | null;\n-  onClose: () => void;\n-  onUpdate: () => void; // 업데이트 후 부모 컴포넌트에서 데이터 새로고침\n-}\n-\n-interface StaffFormData {\n-  name: string;\n-  loginId: string;\n-  phone: string;\n-  email: string;\n-  branchId: string;\n-  position: string;\n-  role: string;\n-  employmentType: string;\n-  permission: string;\n-  program: string; // 담당프로그램 필드 추가\n-  contractStartDate: string;\n-  contractEndDate: string;\n-  contractFile: File | null;\n-}\n-\n-const StaffEditPopup: React.FC<StaffEditPopupProps> = ({\n-  isOpen,\n-  staff,\n-  onClose,\n-  onUpdate\n-}) => {\n-  const [formData, setFormData] = useState<StaffFormData>({\n-    name: '',\n-    loginId: '',\n-    phone: '',\n-    email: '',\n-    branchId: '',\n-    position: '',\n-    role: '',\n-    employmentType: '',\n-    permission: '',\n-    program: '',\n-    contractStartDate: '',\n-    contractEndDate: '',\n-    contractFile: null\n-  });\n-  const [branches, setBranches] = useState<Branch[]>([]);\n-  const [loading, setLoading] = useState(false);\n-  const [errors, setErrors] = useState<Record<string, string>>({});\n-  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n-  const [newPassword, setNewPassword] = useState('');\n-  const [confirmPassword, setConfirmPassword] = useState('');\n-  const [passwordErrors, setPasswordErrors] = useState<Record<string, string>>({});\n-\n-  // 직원 데이터가 변경될 때 폼 데이터 초기화\n-  useEffect(() => {\n-    if (staff) {\n-      setFormData({\n-        name: staff.name,\n-        loginId: staff.loginId,\n-        phone: staff.phone,\n-        email: staff.email,\n-        branchId: staff.branchId,\n-        position: staff.position,\n-        role: staff.role,\n-        employmentType: staff.employmentType,\n-        permission: staff.permission,\n-        program: (staff as any).program || '', // 담당프로그램 필드 추가\n-        contractStartDate: staff.contractStartDate ? formatDateForInput(staff.contractStartDate) : '',\n-        contractEndDate: staff.contractEndDate ? formatDateForInput(staff.contractEndDate) : '',\n-        contractFile: null,\n-      });\n-    }\n-  }, [staff]);\n-\n-  // 지점 데이터 로드\n-  useEffect(() => {\n-    const loadBranches = async () => {\n-      try {\n-        const branchData = await dbManager.getAllBranches();\n-        setBranches(branchData);\n-      } catch (error) {\n-        console.error('지점 데이터 로드 실패:', error);\n-      }\n-    };\n-\n-    if (isOpen) {\n-      loadBranches();\n-    }\n-  }, [isOpen]);\n-\n-  // 드롭다운 옵션 변환 함수들\n-  const getBranchOptions = () => {\n-    return branches.map(branch => ({\n-      value: branch.id,\n-      label: branch.name,\n-      description: branch.address\n-    }));\n-  };\n-\n-  const getPositionOptions = () => {\n-    return POSITIONS.map(position => ({\n-      value: position,\n-      label: position\n-    }));\n-  };\n-\n-  const getRoleOptions = () => {\n-    return ROLES.map(role => ({\n-      value: role,\n-      label: role\n-    }));\n-  };\n-\n-  const getEmploymentTypeOptions = () => {\n-    return EMPLOYMENT_TYPES.map(type => ({\n-      value: type,\n-      label: type\n-    }));\n-  };\n-\n-  const getPermissionOptions = () => {\n-    return PERMISSIONS.map(permission => ({\n-      value: permission.value,\n-      label: permission.label,\n-      description: permission.description\n-    }));\n-  };\n-\n-  const getProgramOptions = () => {\n-    return [\n-      { value: '릴랙싱', label: '릴랙싱' },\n-      { value: 'WBM', label: 'WBM' }\n-    ];\n-  };\n-\n-  // 날짜 범위 계산 함수들\n-  const getContractStartDateMax = (): string | undefined => {\n-    if (formData.contractEndDate) {\n-      try {\n-        const endDate = new Date(formData.contractEndDate);\n-        if (isNaN(endDate.getTime())) return undefined;\n-        \n-        endDate.setDate(endDate.getDate() - 1);\n-        return endDate.toISOString().split('T')[0];\n-      } catch {\n-        return undefined;\n-      }\n-    }\n-    return undefined;\n-  };\n-\n-  const getContractEndDateMin = (): string | undefined => {\n-    if (formData.contractStartDate) {\n-      try {\n-        const startDate = new Date(formData.contractStartDate);\n-        if (isNaN(startDate.getTime())) return undefined;\n-        \n-        startDate.setDate(startDate.getDate() + 1);\n-        return startDate.toISOString().split('T')[0];\n-      } catch {\n-        return undefined;\n-      }\n-    }\n-    return undefined;\n-  };\n-\n-  const validateForm = (): boolean => {\n-    const newErrors: Record<string, string> = {};\n-\n-    if (!formData.name?.trim()) {\n-      newErrors.name = '이름을 입력해주세요.';\n-    }\n-\n-    if (!formData.phone?.trim()) {\n-      newErrors.phone = '전화번호를 입력해주세요.';\n-    } else if (!/^010-\\d{4}-\\d{4}$/.test(formData.phone)) {\n-      newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010-1234-5678)';\n-    }\n-\n-    if (!formData.email?.trim()) {\n-      newErrors.email = '이메일을 입력해주세요.';\n-    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n-      newErrors.email = '올바른 이메일 형식이 아닙니다.';\n-    }\n-\n-    if (!formData.branchId) {\n-      newErrors.branchId = '지점을 선택해주세요.';\n-    }\n-\n-    if (!formData.position?.trim()) {\n-      newErrors.position = '직급을 입력해주세요.';\n-    }\n-\n-    if (!formData.role?.trim()) {\n-      newErrors.role = '직책을 입력해주세요.';\n-    }\n-\n-    if (!formData.employmentType) {\n-      newErrors.employmentType = '고용형태를 선택해주세요.';\n-    }\n-\n-    if (!formData.permission) {\n-      newErrors.permission = '권한을 선택해주세요.';\n-    }\n-\n-    if (!formData.contractStartDate) {\n-      newErrors.contractStartDate = '계약 시작일을 선택해주세요.';\n-    }\n-\n-    // 정규직이 아닌 경우에만 계약종료일 필수\n-    if (formData.employmentType !== '정규직' && !formData.contractEndDate) {\n-      newErrors.contractEndDate = '계약 종료일을 선택해주세요.';\n-    }\n-\n-    // 코치일 경우 담당프로그램 필수\n-    if (formData.role === '코치' && !formData.program) {\n-      newErrors.program = '코치는 담당프로그램 선택이 필수입니다.';\n-    }\n-\n-    // 날짜 검증 (정규직이 아닌 경우에만)\n-    if (formData.employmentType !== '정규직' && formData.contractStartDate && formData.contractEndDate) {\n-      if (new Date(formData.contractStartDate) >= new Date(formData.contractEndDate)) {\n-        newErrors.contractEndDate = '계약 종료일은 시작일보다 늦어야 합니다.';\n-      }\n-    }\n-\n-    setErrors(newErrors);\n-    return Object.keys(newErrors).length === 0;\n-  };\n-\n-  const handleInputChange = (\n-    field: keyof StaffFormData,\n-    value: string | File | null\n-  ) => {\n-    // 전화번호 필드인 경우 자동 포맷팅 적용\n-    if (field === 'phone' && typeof value === 'string') {\n-      value = formatPhoneNumber(value);\n-    }\n-\n-    // 파일 업로드 필드인 경우 검증 수행\n-    if (field === 'contractFile' && value instanceof File) {\n-      // 파일 타입 검증 (이미지 또는 PDF만 허용)\n-      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n-      if (!allowedTypes.includes(value.type)) {\n-        setErrors(prev => ({ ...prev, contractFile: '이미지(JPG, PNG) 또는 PDF 파일만 업로드 가능합니다.' }));\n-        return;\n-      }\n-      \n-      // 파일 크기 검증 (10MB 제한)\n-      if (value.size > 10 * 1024 * 1024) {\n-        setErrors(prev => ({ ...prev, contractFile: '파일 크기는 10MB 이하여야 합니다.' }));\n-        return;\n-      }\n-    }\n-\n-    // 직책이 변경되고 코치가 아닌 경우 담당프로그램 초기화\n-    if (field === 'role' && typeof value === 'string' && value !== '코치') {\n-      setFormData(prev => ({\n-        ...prev,\n-        role: value as string,\n-        program: ''\n-      }));\n-    } \n-    // 고용형태가 정규직으로 변경되면 계약종료일 초기화\n-    else if (field === 'employmentType' && typeof value === 'string' && value === '정규직') {\n-      setFormData(prev => ({\n-        ...prev,\n-        employmentType: value as string,\n-        contractEndDate: ''\n-      }));\n-    } else {\n-      setFormData(prev => ({ ...prev, [field]: value }) as StaffFormData);\n-    }\n-\n-    // 에러 메시지 제거\n-    if (errors[field]) {\n-      setErrors(prev => ({\n-        ...prev,\n-        [field]: ''\n-      }));\n-    }\n-  };\n-\n-  // 전화번호 자동 포맷팅 함수\n-  const formatPhoneNumber = (inputValue: string): string => {\n-    // 숫자만 추출\n-    const numbers = inputValue.replace(/[^\\d]/g, '');\n-    \n-    // 11자리를 초과하면 잘라내기\n-    const truncated = numbers.slice(0, 11);\n-    \n-    // 자동 하이픈 추가\n-    if (truncated.length <= 3) {\n-      return truncated;\n-    } else if (truncated.length <= 7) {\n-      return `${truncated.slice(0, 3)}-${truncated.slice(3)}`;\n-    } else {\n-      return `${truncated.slice(0, 3)}-${truncated.slice(3, 7)}-${truncated.slice(7)}`;\n-    }\n-  };\n-\n-  const handleUpdate = async () => {\n-    if (!staff || !validateForm()) return;\n-\n-    setLoading(true);\n-    try {\n-      const updateData = {\n-        ...formData,\n-        contractStartDate: formData.contractStartDate ? new Date(formData.contractStartDate) : new Date(),\n-        contractEndDate: formData.contractEndDate && formData.employmentType !== '정규직' ? new Date(formData.contractEndDate) : new Date(),\n-      };\n-      \n-      await dbManager.updateStaff(staff.id, updateData);\n-      onUpdate();\n-      onClose();\n-    } catch (error) {\n-      console.error('직원 수정 실패:', error);\n-      if (error instanceof Error && error.message.includes('이메일')) {\n-        setErrors({ email: '이미 사용 중인 이메일입니다.' });\n-      }\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const handleDelete = async () => {\n-    if (!staff) return;\n-\n-    const confirmed = window.confirm(\n-      `정말로 ${staff.name} 직원을 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.`\n-    );\n-\n-    if (!confirmed) return;\n-\n-    setLoading(true);\n-    try {\n-      await dbManager.deleteStaff(staff.id);\n-      onUpdate();\n-      onClose();\n-    } catch (error) {\n-      console.error('직원 삭제 실패:', error);\n-      alert('직원 삭제에 실패했습니다.');\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const formatDateForInput = (date: Date | string): string => {\n-    if (!date) return '';\n-    \n-    try {\n-      const d = new Date(date);\n-      \n-      // Invalid Date 체크\n-      if (isNaN(d.getTime())) return '';\n-      \n-      return d.toISOString().split('T')[0];\n-    } catch {\n-      return '';\n-    }\n-  };\n-\n-  // 비밀번호 변경 관련 함수들\n-  const validatePassword = (): boolean => {\n-    const newPasswordErrors: Record<string, string> = {};\n-\n-    if (!newPassword.trim()) {\n-      newPasswordErrors.newPassword = '새 비밀번호를 입력해주세요.';\n-    } else if (!/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(newPassword)) {\n-      newPasswordErrors.newPassword = '비밀번호는 8자 이상, 영문+숫자+특수문자 조합이어야 합니다.';\n-    }\n-\n-    if (!confirmPassword.trim()) {\n-      newPasswordErrors.confirmPassword = '비밀번호 확인을 입력해주세요.';\n-    } else if (newPassword !== confirmPassword) {\n-      newPasswordErrors.confirmPassword = '비밀번호가 일치하지 않습니다.';\n-    }\n-\n-    setPasswordErrors(newPasswordErrors);\n-    return Object.keys(newPasswordErrors).length === 0;\n-  };\n-\n-  const handlePasswordChange = async () => {\n-    if (!staff || !validatePassword()) return;\n-\n-    setLoading(true);\n-    try {\n-      await dbManager.updateStaff(staff.id, { password: newPassword });\n-      alert('비밀번호가 성공적으로 변경되었습니다.');\n-      setIsPasswordModalOpen(false);\n-      setNewPassword('');\n-      setConfirmPassword('');\n-      setPasswordErrors({});\n-    } catch (error) {\n-      console.error('비밀번호 변경 실패:', error);\n-      alert('비밀번호 변경에 실패했습니다.');\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const closePasswordModal = () => {\n-    setIsPasswordModalOpen(false);\n-    setNewPassword('');\n-    setConfirmPassword('');\n-    setPasswordErrors({});\n-  };\n-\n-  const modalBody = (\n-    <FormContainer>\n-      {/* 기본 정보 섹션 */}\n-      <FormSection>\n-        <SectionTitle>기본 정보</SectionTitle>\n-        \n-        {/* 이름 - 전체 너비 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>이름</Label>\n-            <Input\n-              type=\"text\"\n-              value={formData.name || ''}\n-              onChange={(e) => handleInputChange('name', e.target.value)}\n-              placeholder=\"이름을 입력하세요\"\n-              error={!!errors.name}\n-            />\n-            {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        {/* 로그인ID (readonly), 비밀번호 변경 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label>로그인 ID</Label>\n-            <Input\n-              type=\"text\"\n-              value={formData.loginId || ''}\n-              readOnly\n-              style={{ backgroundColor: AppColors.background, color: AppColors.onInput1, cursor: 'not-allowed' }}\n-              placeholder=\"로그인 ID\"\n-            />\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label>비밀번호</Label>\n-            <Button \n-              variant=\"primary\" \n-              onClick={() => setIsPasswordModalOpen(true)}\n-              style={{ width: '100%', textAlign: 'center', padding: '12px' }}\n-            >\n-              비밀번호 변경\n-            </Button>\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        {/* 이메일, 연락처 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>이메일</Label>\n-            <Input\n-              type=\"email\"\n-              value={formData.email || ''}\n-              onChange={(e) => handleInputChange('email', e.target.value)}\n-              placeholder=\"example@email.com\"\n-              error={!!errors.email}\n-            />\n-            {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required>연락처</Label>\n-            <Input\n-              type=\"tel\"\n-              inputMode=\"numeric\"\n-              value={formData.phone || ''}\n-              onChange={(e) => handleInputChange('phone', e.target.value)}\n-              placeholder=\"010-1234-5678\"\n-              error={!!errors.phone}\n-              maxLength={13}\n-              autoComplete=\"tel\"\n-            />\n-            {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-      </FormSection>\n-\n-      {/* 조직 정보 섹션 */}\n-      <FormSection>\n-        <SectionTitle>조직 정보</SectionTitle>\n-        \n-        {/* 지점, 권한 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>지점</Label>\n-            <CustomDropdown\n-              value={formData.branchId || ''}\n-              onChange={(value: string) => handleInputChange('branchId', value)}\n-              options={getBranchOptions()}\n-              placeholder=\"지점을 선택하세요\"\n-              error={!!errors.branchId}\n-              required\n-            />\n-            {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required>권한</Label>\n-            <CustomDropdown\n-              value={formData.permission || ''}\n-              onChange={(value: string) => handleInputChange('permission', value)}\n-              options={getPermissionOptions()}\n-              placeholder=\"권한을 선택하세요\"\n-              error={!!errors.permission}\n-              required\n-            />\n-            {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        {/* 직급, 직책 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>직급</Label>\n-            <CustomDropdown\n-              value={formData.position || ''}\n-              onChange={(value: string) => handleInputChange('position', value)}\n-              options={getPositionOptions()}\n-              placeholder=\"직급을 선택하세요\"\n-              error={!!errors.position}\n-              required\n-            />\n-            {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required>직책</Label>\n-            <CustomDropdown\n-              value={formData.role || ''}\n-              onChange={(value: string) => handleInputChange('role', value)}\n-              options={getRoleOptions()}\n-              placeholder=\"직책을 선택하세요\"\n-              error={!!errors.role}\n-              required\n-            />\n-            {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        {/* 고용형태, 담당프로그램 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>고용형태</Label>\n-            <CustomDropdown\n-              value={formData.employmentType || ''}\n-              onChange={(value: string) => handleInputChange('employmentType', value)}\n-              options={getEmploymentTypeOptions()}\n-              placeholder=\"고용형태를 선택하세요\"\n-              error={!!errors.employmentType}\n-              required\n-            />\n-            {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label>담당프로그램</Label>\n-            <CustomDropdown\n-              value={formData.program || ''}\n-              onChange={(value: string) => handleInputChange('program', value)}\n-              options={getProgramOptions()}\n-              placeholder={formData.role === '코치' ? \"담당프로그램을 선택하세요\" : \"코치만 선택 가능\"}\n-              error={!!errors.program}\n-              disabled={formData.role !== '코치'}\n-            />\n-            {errors.program && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.program}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-      </FormSection>\n-\n-      {/* 계약 정보 섹션 */}\n-      <FormSection>\n-        <SectionTitle>계약 정보</SectionTitle>\n-        \n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>계약시작일</Label>\n-            <CustomDateInput\n-              value={formData.contractStartDate || ''}\n-              onChange={(value: string) => handleInputChange('contractStartDate', value)}\n-              placeholder=\"계약시작일을 선택하세요\"\n-              error={!!errors.contractStartDate}\n-              max={getContractStartDateMax()}\n-              required\n-            />\n-            {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required={formData.employmentType !== '정규직'}>계약종료일</Label>\n-            <CustomDateInput\n-              value={formData.contractEndDate || ''}\n-              onChange={(value: string) => handleInputChange('contractEndDate', value)}\n-              placeholder={formData.employmentType === '정규직' ? \"정규직은 입력 불필요\" : \"계약종료일을 선택하세요\"}\n-              error={!!errors.contractEndDate}\n-              min={getContractEndDateMin()}\n-              disabled={formData.employmentType === '정규직'}\n-              required={formData.employmentType !== '정규직'}\n-            />\n-            {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        <FieldRow>\n-          <FieldColumn>\n-            <StaffFileUploadField\n-              label=\"계약서 파일\"\n-              value={formData.contractFile || null}\n-              onChange={(file) => handleInputChange('contractFile', file)}\n-              placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n-              errorMessage={errors.contractFile}\n-              fullWidth\n-            />\n-            {staff?.contractFileName && !formData.contractFile && (\n-              <div style={{ \n-                fontSize: AppTextStyles.body2.fontSize, \n-                color: AppColors.onInput1, \n-                marginTop: '4px' \n-              }}>\n-                현재 파일: {staff.contractFileName}\n-              </div>\n-            )}\n-          </FieldColumn>\n-        </FieldRow>\n-      </FormSection>\n-\n-    </FormContainer>\n-  );\n-\n-  const modalFooter = (\n-    <ButtonContainer>\n-      <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n-        취소\n-      </Button>\n-      <Button variant=\"danger\" onClick={handleDelete} disabled={loading}>\n-        삭제\n-      </Button>\n-      <Button variant=\"primary\" onClick={handleUpdate} disabled={loading}>\n-        {loading ? '처리 중...' : '수정'}\n-      </Button>\n-    </ButtonContainer>\n-  );\n-\n-  return (\n-    <>\n-      <Modal\n-        isOpen={isOpen}\n-        onClose={onClose}\n-        width=\"1000px\"\n-        height=\"80vh\"\n-        header=\"직원 정보 수정\"\n-        body={modalBody}\n-        footer={modalFooter}\n-        disableOutsideClick={true}\n-      />\n-\n-      {/* 비밀번호 변경 모달 */}\n-      <Modal\n-        isOpen={isPasswordModalOpen}\n-        onClose={closePasswordModal}\n-        width=\"400px\"\n-        height=\"auto\"\n-        header=\"비밀번호 변경\"\n-        body={\n-          <div style={{ padding: '20px', display: 'flex', flexDirection: 'column', gap: '16px' }}>\n-            <div>\n-              <Label $required>새 비밀번호</Label>\n-              <Input\n-                type=\"password\"\n-                value={newPassword}\n-                onChange={(e) => setNewPassword(e.target.value)}\n-                placeholder=\"영문+숫자+특수문자 8자 이상\"\n-                error={!!passwordErrors.newPassword}\n-              />\n-              {passwordErrors.newPassword && (\n-                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n-                  {passwordErrors.newPassword}\n-                </div>\n-              )}\n-            </div>\n-            \n-            <div>\n-              <Label $required>비밀번호 확인</Label>\n-              <Input\n-                type=\"password\"\n-                value={confirmPassword}\n-                onChange={(e) => setConfirmPassword(e.target.value)}\n-                placeholder=\"비밀번호를 다시 입력하세요\"\n-                error={!!passwordErrors.confirmPassword}\n-              />\n-              {passwordErrors.confirmPassword && (\n-                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n-                  {passwordErrors.confirmPassword}\n-                </div>\n-              )}\n-            </div>\n-          </div>\n-        }\n-        footer={\n-          <ButtonContainer>\n-            <Button variant=\"secondary\" onClick={closePasswordModal} disabled={loading}>\n-              취소\n-            </Button>\n-            <Button variant=\"primary\" onClick={handlePasswordChange} disabled={loading}>\n-              {loading ? '변경 중...' : '변경'}\n-            </Button>\n-          </ButtonContainer>\n-        }\n-        disableOutsideClick={true}\n-      />\n-    </>\n-  );\n-};\n-\n-export default StaffEditPopup;\n"
                },
                {
                    "date": 1759910414044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n-import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n+import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS, SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n \n const FormContainer = styled.div`\n   width: 100%;\n   height: 100%;\n@@ -194,8 +194,13 @@\n   const [newPassword, setNewPassword] = useState('');\n   const [confirmPassword, setConfirmPassword] = useState('');\n   const [passwordErrors, setPasswordErrors] = useState<Record<string, string>>({});\n \n+  // 시스템 관리자인지 확인하는 함수\n+  const isSystemAdmin = (staff: Staff | null): boolean => {\n+    return staff?.loginId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n+  };\n+\n   // 직원 데이터가 변경될 때 폼 데이터 초기화\n   useEffect(() => {\n     if (staff) {\n       setFormData({\n@@ -458,10 +463,16 @@\n       onUpdate();\n       onClose();\n     } catch (error) {\n       console.error('직원 수정 실패:', error);\n-      if (error instanceof Error && error.message.includes('이메일')) {\n-        setErrors({ email: '이미 사용 중인 이메일입니다.' });\n+      if (error instanceof Error) {\n+        if (error.message.includes('이메일')) {\n+          setErrors({ email: '이미 사용 중인 이메일입니다.' });\n+        } else if (error.message.includes('시스템 관리자') && error.message.includes('권한')) {\n+          alert('시스템 관리자 계정의 권한은 변경할 수 없습니다.');\n+        } else {\n+          alert(`수정 실패: ${error.message}`);\n+        }\n       }\n     } finally {\n       setLoading(false);\n     }\n@@ -485,9 +496,13 @@\n       onClose();\n       closeDeleteModal();\n     } catch (error) {\n       console.error('직원 삭제 실패:', error);\n-      alert('직원 삭제에 실패했습니다.');\n+      if (error instanceof Error && error.message.includes('시스템 관리자')) {\n+        alert('시스템 관리자 계정은 삭제할 수 없습니다.');\n+      } else {\n+        alert('직원 삭제에 실패했습니다.');\n+      }\n     } finally {\n       setLoading(false);\n     }\n   };\n@@ -654,12 +669,22 @@\n             <CustomDropdown\n               value={formData.permission || ''}\n               onChange={(value: string) => handleInputChange('permission', value)}\n               options={getPermissionOptions()}\n-              placeholder=\"권한을 선택하세요\"\n+              placeholder={isSystemAdmin(staff) ? \"시스템 관리자 (변경 불가)\" : \"권한을 선택하세요\"}\n               error={!!errors.permission}\n+              disabled={isSystemAdmin(staff)}\n               required\n             />\n+            {isSystemAdmin(staff) && (\n+              <div style={{ \n+                color: AppColors.primary, \n+                fontSize: AppTextStyles.label3.fontSize, \n+                marginTop: '4px' \n+              }}>\n+                🔒 시스템 관리자 권한은 변경할 수 없습니다.\n+              </div>\n+            )}\n             {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n           </FieldColumn>\n         </FieldRow>\n \n@@ -782,10 +807,15 @@\n   );\n \n   const modalFooter = (\n     <ButtonContainer>\n-      <Button variant=\"danger\" onClick={openDeleteModal} disabled={loading}>\n-        삭제\n+      <Button \n+        variant=\"danger\" \n+        onClick={openDeleteModal} \n+        disabled={loading || isSystemAdmin(staff)}\n+        title={isSystemAdmin(staff) ? \"시스템 관리자 계정은 삭제할 수 없습니다.\" : \"\"}\n+      >\n+        {isSystemAdmin(staff) ? \"🔒 삭제 불가\" : \"삭제\"}\n       </Button>\n       <div style={{ display: 'flex', gap: '12px' }}>\n         <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n           취소\n"
                },
                {
                    "date": 1759911853215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,954 @@\n+import React, { useState, useEffect } from 'react';\n+import styled from 'styled-components';\n+import Modal from '../../../components/Modal';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import CustomDateInput from '../../../components/CustomDateInput';\n+import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n+import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS, SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n+\n+const FormContainer = styled.div`\n+  width: 100%;\n+  height: 100%;\n+  overflow-y: auto;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 24px;\n+  text-align: left; // 모달 기본 center 정렬 재정의\n+  \n+  /* 스크롤바 숨김 - Webkit 브라우저 (Chrome, Safari, Edge) */\n+  &::-webkit-scrollbar {\n+    display: none;\n+  }\n+  \n+  /* 스크롤바 숨김 - Firefox */\n+  scrollbar-width: none;\n+  \n+  /* 스크롤바 숨김 - IE/Edge Legacy */\n+  -ms-overflow-style: none;\n+`;\n+\n+const FormSection = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 16px;\n+  padding: 24px;\n+  background: ${AppColors.surface};\n+  border-radius: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+`;\n+\n+const SectionTitle = styled.h3`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  margin: 0;\n+`;\n+\n+const FieldRow = styled.div`\n+  display: flex;\n+  gap: 16px;\n+`;\n+\n+const FieldColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 8px;\n+  min-width: 0;\n+  overflow: hidden;\n+`;\n+\n+const Label = styled.label<{ $required?: boolean }>`\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  \n+  ${({ $required }) => $required && `\n+    &::after {\n+      content: ' *';\n+      color: ${AppColors.error};\n+    }\n+  `}\n+`;\n+\n+const Input = styled.input<{ error?: boolean }>`\n+  width: 100%;\n+  min-width: 0;\n+  padding: 12px;\n+  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n+  background-color: ${AppColors.input};\n+  box-sizing: border-box;\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &::placeholder {\n+    color: ${AppColors.onInput1};\n+  }\n+`;\n+\n+const ButtonContainer = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  justify-content: space-between;\n+  width: 100%;\n+  align-items: center;\n+`;\n+\n+const Button = styled.button<{ variant?: 'primary' | 'secondary' | 'danger' }>`\n+  padding: 12px 24px;\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  font-weight: 600;\n+  border: none;\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  ${({ variant = 'primary' }) => variant === 'primary' ? `\n+    background-color: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n+    \n+    &:hover {\n+      background-color: ${AppColors.buttonPrimaryHover};\n+    }\n+  ` : variant === 'danger' ? `\n+    background-color: ${AppColors.error};\n+    color: ${AppColors.onPrimary};\n+    \n+    &:hover {\n+      opacity: 0.9;\n+    }\n+  ` : `\n+    background-color: ${AppColors.surface};\n+    color: ${AppColors.onSurface};\n+    border: 1px solid ${AppColors.borderLight};\n+    \n+    &:hover {\n+      background-color: ${AppColors.btnC};\n+    }\n+  `}\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+interface StaffEditPopupProps {\n+  isOpen: boolean;\n+  staff: Staff | null;\n+  onClose: () => void;\n+  onUpdate: () => void; // 업데이트 후 부모 컴포넌트에서 데이터 새로고침\n+}\n+\n+interface StaffFormData {\n+  name: string;\n+  loginId: string;\n+  phone: string;\n+  email: string;\n+  branchId: string;\n+  position: string;\n+  role: string;\n+  employmentType: string;\n+  permission: string;\n+  program: string; // 담당프로그램 필드 추가\n+  contractStartDate: string;\n+  contractEndDate: string;\n+  contractFile: File | null;\n+}\n+\n+const StaffEditPopup: React.FC<StaffEditPopupProps> = ({\n+  isOpen,\n+  staff,\n+  onClose,\n+  onUpdate\n+}) => {\n+  const [formData, setFormData] = useState<StaffFormData>({\n+    name: '',\n+    loginId: '',\n+    phone: '',\n+    email: '',\n+    branchId: '',\n+    position: '',\n+    role: '',\n+    employmentType: '',\n+    permission: '',\n+    program: '',\n+    contractStartDate: '',\n+    contractEndDate: '',\n+    contractFile: null\n+  });\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [loading, setLoading] = useState(false);\n+  const [errors, setErrors] = useState<Record<string, string>>({});\n+  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n+  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n+  const [newPassword, setNewPassword] = useState('');\n+  const [confirmPassword, setConfirmPassword] = useState('');\n+  const [passwordErrors, setPasswordErrors] = useState<Record<string, string>>({});\n+\n+  // 시스템 관리자인지 확인하는 함수\n+  const isSystemAdmin = (staff: Staff | null): boolean => {\n+    return staff?.loginId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n+  };\n+\n+  // 직원 데이터가 변경될 때 폼 데이터 초기화\n+  useEffect(() => {\n+    if (staff) {\n+      setFormData({\n+        name: staff.name,\n+        loginId: staff.loginId,\n+        phone: staff.phone,\n+        email: staff.email,\n+        branchId: staff.branchId,\n+        position: staff.position,\n+        role: staff.role,\n+        employmentType: staff.employmentType,\n+        permission: staff.permission,\n+        program: (staff as any).program || '', // 담당프로그램 필드 추가\n+        contractStartDate: staff.contractStartDate ? formatDateForInput(staff.contractStartDate) : '',\n+        contractEndDate: staff.contractEndDate ? formatDateForInput(staff.contractEndDate) : '',\n+        contractFile: null,\n+      });\n+    }\n+  }, [staff]);\n+\n+  // 지점 데이터 로드\n+  useEffect(() => {\n+    const loadBranches = async () => {\n+      try {\n+        const branchData = await dbManager.getAllBranches();\n+        setBranches(branchData);\n+      } catch (error) {\n+        console.error('지점 데이터 로드 실패:', error);\n+      }\n+    };\n+\n+    if (isOpen) {\n+      loadBranches();\n+    }\n+  }, [isOpen]);\n+\n+  // 드롭다운 옵션 변환 함수들\n+  const getBranchOptions = () => {\n+    return branches.map(branch => ({\n+      value: branch.id,\n+      label: branch.name,\n+      description: branch.address\n+    }));\n+  };\n+\n+  const getPositionOptions = () => {\n+    return POSITIONS.map(position => ({\n+      value: position,\n+      label: position\n+    }));\n+  };\n+\n+  const getRoleOptions = () => {\n+    return ROLES.map(role => ({\n+      value: role,\n+      label: role\n+    }));\n+  };\n+\n+  const getEmploymentTypeOptions = () => {\n+    return EMPLOYMENT_TYPES.map(type => ({\n+      value: type,\n+      label: type\n+    }));\n+  };\n+\n+  const getPermissionOptions = () => {\n+    return PERMISSIONS.map(permission => ({\n+      value: permission.value,\n+      label: permission.label,\n+      description: permission.description\n+    }));\n+  };\n+\n+  const getProgramOptions = () => {\n+    return [\n+      { value: '릴랙싱', label: '릴랙싱' },\n+      { value: 'WBM', label: 'WBM' }\n+    ];\n+  };\n+\n+  // 날짜 범위 계산 함수들\n+  const getContractStartDateMax = (): string | undefined => {\n+    if (formData.contractEndDate) {\n+      try {\n+        const endDate = new Date(formData.contractEndDate);\n+        if (isNaN(endDate.getTime())) return undefined;\n+        \n+        endDate.setDate(endDate.getDate() - 1);\n+        return endDate.toISOString().split('T')[0];\n+      } catch {\n+        return undefined;\n+      }\n+    }\n+    return undefined;\n+  };\n+\n+  const getContractEndDateMin = (): string | undefined => {\n+    if (formData.contractStartDate) {\n+      try {\n+        const startDate = new Date(formData.contractStartDate);\n+        if (isNaN(startDate.getTime())) return undefined;\n+        \n+        startDate.setDate(startDate.getDate() + 1);\n+        return startDate.toISOString().split('T')[0];\n+      } catch {\n+        return undefined;\n+      }\n+    }\n+    return undefined;\n+  };\n+\n+  const validateForm = (): boolean => {\n+    const newErrors: Record<string, string> = {};\n+\n+    if (!formData.name?.trim()) {\n+      newErrors.name = '이름을 입력해주세요.';\n+    }\n+\n+    if (!formData.phone?.trim()) {\n+      newErrors.phone = '전화번호를 입력해주세요.';\n+    } else if (!/^010-\\d{4}-\\d{4}$/.test(formData.phone)) {\n+      newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010-1234-5678)';\n+    }\n+\n+    if (!formData.email?.trim()) {\n+      newErrors.email = '이메일을 입력해주세요.';\n+    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n+      newErrors.email = '올바른 이메일 형식이 아닙니다.';\n+    }\n+\n+    if (!formData.branchId) {\n+      newErrors.branchId = '지점을 선택해주세요.';\n+    }\n+\n+    if (!formData.position?.trim()) {\n+      newErrors.position = '직급을 입력해주세요.';\n+    }\n+\n+    if (!formData.role?.trim()) {\n+      newErrors.role = '직책을 입력해주세요.';\n+    }\n+\n+    if (!formData.employmentType) {\n+      newErrors.employmentType = '고용형태를 선택해주세요.';\n+    }\n+\n+    if (!formData.permission) {\n+      newErrors.permission = '권한을 선택해주세요.';\n+    }\n+\n+    if (!formData.contractStartDate) {\n+      newErrors.contractStartDate = '계약 시작일을 선택해주세요.';\n+    }\n+\n+    // 정규직이 아닌 경우에만 계약종료일 필수\n+    if (formData.employmentType !== '정규직' && !formData.contractEndDate) {\n+      newErrors.contractEndDate = '계약 종료일을 선택해주세요.';\n+    }\n+\n+    // 코치일 경우 담당프로그램 필수\n+    if (formData.role === '코치' && !formData.program) {\n+      newErrors.program = '코치는 담당프로그램 선택이 필수입니다.';\n+    }\n+\n+    // 날짜 검증 (정규직이 아닌 경우에만)\n+    if (formData.employmentType !== '정규직' && formData.contractStartDate && formData.contractEndDate) {\n+      if (new Date(formData.contractStartDate) >= new Date(formData.contractEndDate)) {\n+        newErrors.contractEndDate = '계약 종료일은 시작일보다 늦어야 합니다.';\n+      }\n+    }\n+\n+    setErrors(newErrors);\n+    return Object.keys(newErrors).length === 0;\n+  };\n+\n+  const handleInputChange = (\n+    field: keyof StaffFormData,\n+    value: string | File | null\n+  ) => {\n+    // 전화번호 필드인 경우 자동 포맷팅 적용\n+    if (field === 'phone' && typeof value === 'string') {\n+      value = formatPhoneNumber(value);\n+    }\n+\n+    // 파일 업로드 필드인 경우 검증 수행\n+    if (field === 'contractFile' && value instanceof File) {\n+      // 파일 타입 검증 (이미지 또는 PDF만 허용)\n+      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n+      if (!allowedTypes.includes(value.type)) {\n+        setErrors(prev => ({ ...prev, contractFile: '이미지(JPG, PNG) 또는 PDF 파일만 업로드 가능합니다.' }));\n+        return;\n+      }\n+      \n+      // 파일 크기 검증 (10MB 제한)\n+      if (value.size > 10 * 1024 * 1024) {\n+        setErrors(prev => ({ ...prev, contractFile: '파일 크기는 10MB 이하여야 합니다.' }));\n+        return;\n+      }\n+    }\n+\n+    // 직책이 변경되고 코치가 아닌 경우 담당프로그램 초기화\n+    if (field === 'role' && typeof value === 'string' && value !== '코치') {\n+      setFormData(prev => ({\n+        ...prev,\n+        role: value as string,\n+        program: ''\n+      }));\n+    } \n+    // 고용형태가 정규직으로 변경되면 계약종료일 초기화\n+    else if (field === 'employmentType' && typeof value === 'string' && value === '정규직') {\n+      setFormData(prev => ({\n+        ...prev,\n+        employmentType: value as string,\n+        contractEndDate: ''\n+      }));\n+    } else {\n+      setFormData(prev => ({ ...prev, [field]: value }) as StaffFormData);\n+    }\n+\n+    // 에러 메시지 제거\n+    if (errors[field]) {\n+      setErrors(prev => ({\n+        ...prev,\n+        [field]: ''\n+      }));\n+    }\n+  };\n+\n+  // 전화번호 자동 포맷팅 함수\n+  const formatPhoneNumber = (inputValue: string): string => {\n+    // 숫자만 추출\n+    const numbers = inputValue.replace(/[^\\d]/g, '');\n+    \n+    // 11자리를 초과하면 잘라내기\n+    const truncated = numbers.slice(0, 11);\n+    \n+    // 자동 하이픈 추가\n+    if (truncated.length <= 3) {\n+      return truncated;\n+    } else if (truncated.length <= 7) {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3)}`;\n+    } else {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3, 7)}-${truncated.slice(7)}`;\n+    }\n+  };\n+\n+  const handleUpdate = async () => {\n+    if (!staff || !validateForm()) return;\n+\n+    setLoading(true);\n+    try {\n+      const updateData = {\n+        ...formData,\n+        contractStartDate: formData.contractStartDate ? new Date(formData.contractStartDate) : new Date(),\n+        contractEndDate: formData.employmentType === '정규직' ? null : (formData.contractEndDate ? new Date(formData.contractEndDate) : null),\n+      };\n+      \n+      await dbManager.updateStaff(staff.id, updateData);\n+      onUpdate();\n+      onClose();\n+    } catch (error) {\n+      console.error('직원 수정 실패:', error);\n+      if (error instanceof Error) {\n+        if (error.message.includes('이메일')) {\n+          setErrors({ email: '이미 사용 중인 이메일입니다.' });\n+        } else if (error.message.includes('시스템 관리자') && error.message.includes('권한')) {\n+          alert('시스템 관리자 계정의 권한은 변경할 수 없습니다.');\n+        } else {\n+          alert(`수정 실패: ${error.message}`);\n+        }\n+      }\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const openDeleteModal = () => {\n+    setIsDeleteModalOpen(true);\n+  };\n+\n+  const closeDeleteModal = () => {\n+    setIsDeleteModalOpen(false);\n+  };\n+\n+  const handleDelete = async () => {\n+    if (!staff) return;\n+\n+    setLoading(true);\n+    try {\n+      await dbManager.deleteStaff(staff.id);\n+      onUpdate();\n+      onClose();\n+      closeDeleteModal();\n+    } catch (error) {\n+      console.error('직원 삭제 실패:', error);\n+      if (error instanceof Error && error.message.includes('시스템 관리자')) {\n+        alert('시스템 관리자 계정은 삭제할 수 없습니다.');\n+      } else {\n+        alert('직원 삭제에 실패했습니다.');\n+      }\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const formatDateForInput = (date: Date | string): string => {\n+    if (!date) return '';\n+    \n+    try {\n+      const d = new Date(date);\n+      \n+      // Invalid Date 체크\n+      if (isNaN(d.getTime())) return '';\n+      \n+      return d.toISOString().split('T')[0];\n+    } catch {\n+      return '';\n+    }\n+  };\n+\n+  // 비밀번호 변경 관련 함수들\n+  const validatePassword = (): boolean => {\n+    const newPasswordErrors: Record<string, string> = {};\n+\n+    if (!newPassword.trim()) {\n+      newPasswordErrors.newPassword = '새 비밀번호를 입력해주세요.';\n+    } else if (!/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(newPassword)) {\n+      newPasswordErrors.newPassword = '비밀번호는 8자 이상, 영문+숫자+특수문자 조합이어야 합니다.';\n+    }\n+\n+    if (!confirmPassword.trim()) {\n+      newPasswordErrors.confirmPassword = '비밀번호 확인을 입력해주세요.';\n+    } else if (newPassword !== confirmPassword) {\n+      newPasswordErrors.confirmPassword = '비밀번호가 일치하지 않습니다.';\n+    }\n+\n+    setPasswordErrors(newPasswordErrors);\n+    return Object.keys(newPasswordErrors).length === 0;\n+  };\n+\n+  const handlePasswordChange = async () => {\n+    if (!staff || !validatePassword()) return;\n+\n+    setLoading(true);\n+    try {\n+      await dbManager.updateStaff(staff.id, { password: newPassword });\n+      alert('비밀번호가 성공적으로 변경되었습니다.');\n+      setIsPasswordModalOpen(false);\n+      setNewPassword('');\n+      setConfirmPassword('');\n+      setPasswordErrors({});\n+    } catch (error) {\n+      console.error('비밀번호 변경 실패:', error);\n+      alert('비밀번호 변경에 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const closePasswordModal = () => {\n+    setIsPasswordModalOpen(false);\n+    setNewPassword('');\n+    setConfirmPassword('');\n+    setPasswordErrors({});\n+  };\n+\n+  const modalBody = (\n+    <FormContainer>\n+      {/* 기본 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>기본 정보</SectionTitle>\n+        \n+        {/* 이름 - 전체 너비 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>이름</Label>\n+            <Input\n+              type=\"text\"\n+              value={formData.name || ''}\n+              onChange={(e) => handleInputChange('name', e.target.value)}\n+              placeholder=\"이름을 입력하세요\"\n+              error={!!errors.name}\n+            />\n+            {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 로그인ID (readonly), 비밀번호 변경 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label>로그인 ID</Label>\n+            <Input\n+              type=\"text\"\n+              value={formData.loginId || ''}\n+              readOnly\n+              style={{ backgroundColor: AppColors.background, color: AppColors.onInput1, cursor: 'not-allowed' }}\n+              placeholder=\"로그인 ID\"\n+            />\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label>비밀번호</Label>\n+            <Button \n+              variant=\"primary\" \n+              onClick={() => setIsPasswordModalOpen(true)}\n+              style={{ width: '100%', textAlign: 'center', padding: '12px' }}\n+            >\n+              비밀번호 변경\n+            </Button>\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 이메일, 연락처 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>이메일</Label>\n+            <Input\n+              type=\"email\"\n+              value={formData.email || ''}\n+              onChange={(e) => handleInputChange('email', e.target.value)}\n+              placeholder=\"example@email.com\"\n+              error={!!errors.email}\n+            />\n+            {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>연락처</Label>\n+            <Input\n+              type=\"tel\"\n+              inputMode=\"numeric\"\n+              value={formData.phone || ''}\n+              onChange={(e) => handleInputChange('phone', e.target.value)}\n+              placeholder=\"010-1234-5678\"\n+              error={!!errors.phone}\n+              maxLength={13}\n+              autoComplete=\"tel\"\n+            />\n+            {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n+\n+      {/* 조직 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>조직 정보</SectionTitle>\n+        \n+        {/* 지점, 권한 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>지점</Label>\n+            <CustomDropdown\n+              value={formData.branchId || ''}\n+              onChange={(value: string) => handleInputChange('branchId', value)}\n+              options={getBranchOptions()}\n+              placeholder=\"지점을 선택하세요\"\n+              error={!!errors.branchId}\n+              required\n+            />\n+            {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>권한</Label>\n+            <CustomDropdown\n+              value={formData.permission || ''}\n+              onChange={(value: string) => handleInputChange('permission', value)}\n+              options={getPermissionOptions()}\n+              placeholder={isSystemAdmin(staff) ? \"시스템 관리자 (변경 불가)\" : \"권한을 선택하세요\"}\n+              error={!!errors.permission}\n+              disabled={isSystemAdmin(staff)}\n+              required\n+            />\n+            {isSystemAdmin(staff) && (\n+              <div style={{ \n+                color: AppColors.primary, \n+                fontSize: AppTextStyles.label3.fontSize, \n+                marginTop: '4px' \n+              }}>\n+                🔒 시스템 관리자 권한은 변경할 수 없습니다.\n+              </div>\n+            )}\n+            {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 직급, 직책 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>직급</Label>\n+            <CustomDropdown\n+              value={formData.position || ''}\n+              onChange={(value: string) => handleInputChange('position', value)}\n+              options={getPositionOptions()}\n+              placeholder=\"직급을 선택하세요\"\n+              error={!!errors.position}\n+              required\n+            />\n+            {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required>직책</Label>\n+            <CustomDropdown\n+              value={formData.role || ''}\n+              onChange={(value: string) => handleInputChange('role', value)}\n+              options={getRoleOptions()}\n+              placeholder=\"직책을 선택하세요\"\n+              error={!!errors.role}\n+              required\n+            />\n+            {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        {/* 고용형태, 담당프로그램 */}\n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>고용형태</Label>\n+            <CustomDropdown\n+              value={formData.employmentType || ''}\n+              onChange={(value: string) => handleInputChange('employmentType', value)}\n+              options={getEmploymentTypeOptions()}\n+              placeholder=\"고용형태를 선택하세요\"\n+              error={!!errors.employmentType}\n+              required\n+            />\n+            {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label>담당프로그램</Label>\n+            <CustomDropdown\n+              value={formData.program || ''}\n+              onChange={(value: string) => handleInputChange('program', value)}\n+              options={getProgramOptions()}\n+              placeholder={formData.role === '코치' ? \"담당프로그램을 선택하세요\" : \"코치만 선택 가능\"}\n+              error={!!errors.program}\n+              disabled={formData.role !== '코치'}\n+            />\n+            {errors.program && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.program}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n+\n+      {/* 계약 정보 섹션 */}\n+      <FormSection>\n+        <SectionTitle>계약 정보</SectionTitle>\n+        \n+        <FieldRow>\n+          <FieldColumn>\n+            <Label $required>계약시작일</Label>\n+            <CustomDateInput\n+              value={formData.contractStartDate || ''}\n+              onChange={(value: string) => handleInputChange('contractStartDate', value)}\n+              placeholder=\"계약시작일을 선택하세요\"\n+              error={!!errors.contractStartDate}\n+              max={getContractStartDateMax()}\n+              required\n+            />\n+            {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n+          </FieldColumn>\n+\n+          <FieldColumn>\n+            <Label $required={formData.employmentType !== '정규직'}>계약종료일</Label>\n+            <CustomDateInput\n+              value={formData.contractEndDate || ''}\n+              onChange={(value: string) => handleInputChange('contractEndDate', value)}\n+              placeholder={formData.employmentType === '정규직' ? \"정규직은 입력 불필요\" : \"계약종료일을 선택하세요\"}\n+              error={!!errors.contractEndDate}\n+              min={getContractEndDateMin()}\n+              disabled={formData.employmentType === '정규직'}\n+              required={formData.employmentType !== '정규직'}\n+            />\n+            {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n+          </FieldColumn>\n+        </FieldRow>\n+\n+        <FieldRow>\n+          <FieldColumn>\n+            <StaffFileUploadField\n+              label=\"계약서 파일\"\n+              value={formData.contractFile || null}\n+              onChange={(file) => handleInputChange('contractFile', file)}\n+              placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n+              errorMessage={errors.contractFile}\n+              fullWidth\n+            />\n+            {staff?.contractFileName && !formData.contractFile && (\n+              <div style={{ \n+                fontSize: AppTextStyles.body2.fontSize, \n+                color: AppColors.onInput1, \n+                marginTop: '4px' \n+              }}>\n+                현재 파일: {staff.contractFileName}\n+              </div>\n+            )}\n+          </FieldColumn>\n+        </FieldRow>\n+      </FormSection>\n+\n+    </FormContainer>\n+  );\n+\n+  const modalFooter = (\n+    <ButtonContainer>\n+      <Button \n+        variant=\"danger\" \n+        onClick={openDeleteModal} \n+        disabled={loading || isSystemAdmin(staff)}\n+        title={isSystemAdmin(staff) ? \"시스템 관리자 계정은 삭제할 수 없습니다.\" : \"\"}\n+      >\n+        {isSystemAdmin(staff) ? \"🔒 삭제 불가\" : \"삭제\"}\n+      </Button>\n+      <div style={{ display: 'flex', gap: '12px' }}>\n+        <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n+          취소\n+        </Button>\n+        <Button variant=\"primary\" onClick={handleUpdate} disabled={loading}>\n+          {loading ? '처리 중...' : '수정'}\n+        </Button>\n+      </div>\n+    </ButtonContainer>\n+  );\n+\n+  return (\n+    <>\n+      <Modal\n+        isOpen={isOpen}\n+        onClose={onClose}\n+        width=\"1000px\"\n+        height=\"80vh\"\n+        header=\"직원 정보 수정\"\n+        body={modalBody}\n+        footer={modalFooter}\n+        disableOutsideClick={true}\n+      />\n+\n+      {/* 비밀번호 변경 모달 */}\n+      <Modal\n+        isOpen={isPasswordModalOpen}\n+        onClose={closePasswordModal}\n+        width=\"400px\"\n+        height=\"auto\"\n+        header=\"비밀번호 변경\"\n+        body={\n+          <div style={{ \n+            padding: '20px', \n+            display: 'flex', \n+            flexDirection: 'column', \n+            gap: '16px',\n+            textAlign: 'left' // 중앙정렬 재정의\n+          }}>\n+            <div>\n+              <Label $required>새 비밀번호</Label>\n+              <Input\n+                type=\"password\"\n+                value={newPassword}\n+                onChange={(e) => setNewPassword(e.target.value)}\n+                placeholder=\"영문+숫자+특수문자 8자 이상\"\n+                error={!!passwordErrors.newPassword}\n+              />\n+              {passwordErrors.newPassword && (\n+                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n+                  {passwordErrors.newPassword}\n+                </div>\n+              )}\n+            </div>\n+            \n+            <div>\n+              <Label $required>비밀번호 확인</Label>\n+              <Input\n+                type=\"password\"\n+                value={confirmPassword}\n+                onChange={(e) => setConfirmPassword(e.target.value)}\n+                placeholder=\"비밀번호를 다시 입력하세요\"\n+                error={!!passwordErrors.confirmPassword}\n+              />\n+              {passwordErrors.confirmPassword && (\n+                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n+                  {passwordErrors.confirmPassword}\n+                </div>\n+              )}\n+            </div>\n+          </div>\n+        }\n+        footer={\n+          <ButtonContainer>\n+            <Button variant=\"secondary\" onClick={closePasswordModal} disabled={loading}>\n+              취소\n+            </Button>\n+            <Button variant=\"primary\" onClick={handlePasswordChange} disabled={loading}>\n+              {loading ? '변경 중...' : '변경'}\n+            </Button>\n+          </ButtonContainer>\n+        }\n+        disableOutsideClick={true}\n+      />\n+\n+      {/* 삭제 확인 모달 */}\n+      <Modal\n+        isOpen={isDeleteModalOpen}\n+        onClose={closeDeleteModal}\n+        width=\"400px\"\n+        height=\"auto\"\n+        header=\"직원 삭제 확인\"\n+        body={\n+          <div style={{ \n+            padding: '20px', \n+            display: 'flex', \n+            flexDirection: 'column', \n+            gap: '16px',\n+            textAlign: 'left'\n+          }}>\n+            <div style={{ \n+              fontSize: '16px', \n+              lineHeight: '1.5',\n+              color: '#333'\n+            }}>\n+              정말로 <strong>{staff?.name}</strong> 직원을 삭제하시겠습니까?\n+            </div>\n+            <div style={{ \n+              fontSize: '14px', \n+              color: '#666',\n+              backgroundColor: '#fff3cd',\n+              padding: '12px',\n+              borderRadius: '6px',\n+              border: '1px solid #ffeaa7'\n+            }}>\n+              ⚠️ 삭제된 데이터는 복구할 수 없습니다.\n+            </div>\n+          </div>\n+        }\n+        footer={\n+          <ButtonContainer>\n+            <Button variant=\"secondary\" onClick={closeDeleteModal} disabled={loading}>\n+              취소\n+            </Button>\n+            <Button variant=\"danger\" onClick={handleDelete} disabled={loading}>\n+              {loading ? '삭제 중...' : '삭제'}\n+            </Button>\n+          </ButtonContainer>\n+        }\n+        disableOutsideClick={true}\n+      />\n+    </>\n+  );\n+};\n+\n+export default StaffEditPopup;\n"
                },
                {
                    "date": 1759913152387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import Modal from '../../../components/Modal';\n import CustomDropdown from '../../../components/CustomDropdown';\n import CustomDateInput from '../../../components/CustomDateInput';\n import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n+import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS, SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n@@ -192,9 +193,10 @@\n   const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n   const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n   const [newPassword, setNewPassword] = useState('');\n   const [confirmPassword, setConfirmPassword] = useState('');\n-  const [passwordErrors, setPasswordErrors] = useState<Record<string, string>>({});\n+  const [isNewPasswordValid, setIsNewPasswordValid] = useState(false);\n+  const [isConfirmPasswordValid, setIsConfirmPasswordValid] = useState(false);\n \n   // 시스템 관리자인지 확인하는 함수\n   const isSystemAdmin = (staff: Staff | null): boolean => {\n     return staff?.loginId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n@@ -522,38 +524,18 @@\n     }\n   };\n \n   // 비밀번호 변경 관련 함수들\n-  const validatePassword = (): boolean => {\n-    const newPasswordErrors: Record<string, string> = {};\n-\n-    if (!newPassword.trim()) {\n-      newPasswordErrors.newPassword = '새 비밀번호를 입력해주세요.';\n-    } else if (!/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(newPassword)) {\n-      newPasswordErrors.newPassword = '비밀번호는 8자 이상, 영문+숫자+특수문자 조합이어야 합니다.';\n-    }\n-\n-    if (!confirmPassword.trim()) {\n-      newPasswordErrors.confirmPassword = '비밀번호 확인을 입력해주세요.';\n-    } else if (newPassword !== confirmPassword) {\n-      newPasswordErrors.confirmPassword = '비밀번호가 일치하지 않습니다.';\n-    }\n-\n-    setPasswordErrors(newPasswordErrors);\n-    return Object.keys(newPasswordErrors).length === 0;\n-  };\n-\n   const handlePasswordChange = async () => {\n-    if (!staff || !validatePassword()) return;\n+    if (!staff || !isNewPasswordValid || !isConfirmPasswordValid) return;\n \n     setLoading(true);\n     try {\n       await dbManager.updateStaff(staff.id, { password: newPassword });\n       alert('비밀번호가 성공적으로 변경되었습니다.');\n       setIsPasswordModalOpen(false);\n       setNewPassword('');\n       setConfirmPassword('');\n-      setPasswordErrors({});\n     } catch (error) {\n       console.error('비밀번호 변경 실패:', error);\n       alert('비밀번호 변경에 실패했습니다.');\n     } finally {\n@@ -564,9 +546,8 @@\n   const closePasswordModal = () => {\n     setIsPasswordModalOpen(false);\n     setNewPassword('');\n     setConfirmPassword('');\n-    setPasswordErrors({});\n   };\n \n   const modalBody = (\n     <FormContainer>\n@@ -854,1001 +835,36 @@\n             flexDirection: 'column', \n             gap: '16px',\n             textAlign: 'left' // 중앙정렬 재정의\n           }}>\n-            <div>\n-              <Label $required>새 비밀번호</Label>\n-              <Input\n-                type=\"password\"\n-                value={newPassword}\n-                onChange={(e) => setNewPassword(e.target.value)}\n-                placeholder=\"영문+숫자+특수문자 8자 이상\"\n-                error={!!passwordErrors.newPassword}\n-              />\n-              {passwordErrors.newPassword && (\n-                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n-                  {passwordErrors.newPassword}\n-                </div>\n-              )}\n-            </div>\n+            <AppPwdTextField\n+              value={newPassword}\n+              onChange={(e) => setNewPassword(e.target.value)}\n+              fieldType={PwdFieldType.PASSWORD}\n+              onValidationChange={setIsNewPasswordValid}\n+              language=\"ko\"\n+            />\n             \n-            <div>\n-              <Label $required>비밀번호 확인</Label>\n-              <Input\n-                type=\"password\"\n-                value={confirmPassword}\n-                onChange={(e) => setConfirmPassword(e.target.value)}\n-                placeholder=\"비밀번호를 다시 입력하세요\"\n-                error={!!passwordErrors.confirmPassword}\n-              />\n-              {passwordErrors.confirmPassword && (\n-                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n-                  {passwordErrors.confirmPassword}\n-                </div>\n-              )}\n-            </div>\n+            <AppPwdTextField\n+              value={confirmPassword}\n+              onChange={(e) => setConfirmPassword(e.target.value)}\n+              fieldType={PwdFieldType.PASSWORD_CONFIRM}\n+              originalPassword={newPassword}\n+              onValidationChange={setIsConfirmPasswordValid}\n+              language=\"ko\"\n+            />\n           </div>\n         }\n         footer={\n           <ButtonContainer>\n             <Button variant=\"secondary\" onClick={closePasswordModal} disabled={loading}>\n               취소\n             </Button>\n-            <Button variant=\"primary\" onClick={handlePasswordChange} disabled={loading}>\n-              {loading ? '변경 중...' : '변경'}\n-            </Button>\n-          </ButtonContainer>\n-        }\n-        disableOutsideClick={true}\n-      />\n-\n-      {/* 삭제 확인 모달 */}\n-      <Modal\n-        isOpen={isDeleteModalOpen}\n-        onClose={closeDeleteModal}\n-        width=\"400px\"\n-        height=\"auto\"\n-        header=\"직원 삭제 확인\"\n-        body={\n-          <div style={{ \n-            padding: '20px', \n-            display: 'flex', \n-            flexDirection: 'column', \n-            gap: '16px',\n-            textAlign: 'left'\n-          }}>\n-            <div style={{ \n-              fontSize: '16px', \n-              lineHeight: '1.5',\n-              color: '#333'\n-            }}>\n-              정말로 <strong>{staff?.name}</strong> 직원을 삭제하시겠습니까?\n-            </div>\n-            <div style={{ \n-              fontSize: '14px', \n-              color: '#666',\n-              backgroundColor: '#fff3cd',\n-              padding: '12px',\n-              borderRadius: '6px',\n-              border: '1px solid #ffeaa7'\n-            }}>\n-              ⚠️ 삭제된 데이터는 복구할 수 없습니다.\n-            </div>\n-          </div>\n-        }\n-        footer={\n-          <ButtonContainer>\n-            <Button variant=\"secondary\" onClick={closeDeleteModal} disabled={loading}>\n-              취소\n-            </Button>\n-            <Button variant=\"danger\" onClick={handleDelete} disabled={loading}>\n-              {loading ? '삭제 중...' : '삭제'}\n-            </Button>\n-          </ButtonContainer>\n-        }\n-        disableOutsideClick={true}\n-      />\n-    </>\n-  );\n-};\n-\n-export default StaffEditPopup;\n-import React, { useState, useEffect } from 'react';\n-import styled from 'styled-components';\n-import Modal from '../../../components/Modal';\n-import CustomDropdown from '../../../components/CustomDropdown';\n-import CustomDateInput from '../../../components/CustomDateInput';\n-import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n-import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS, SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n-\n-const FormContainer = styled.div`\n-  width: 100%;\n-  height: 100%;\n-  overflow-y: auto;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 24px;\n-  text-align: left; // 모달 기본 center 정렬 재정의\n-  \n-  /* 스크롤바 숨김 - Webkit 브라우저 (Chrome, Safari, Edge) */\n-  &::-webkit-scrollbar {\n-    display: none;\n-  }\n-  \n-  /* 스크롤바 숨김 - Firefox */\n-  scrollbar-width: none;\n-  \n-  /* 스크롤바 숨김 - IE/Edge Legacy */\n-  -ms-overflow-style: none;\n-`;\n-\n-const FormSection = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  gap: 16px;\n-  padding: 24px;\n-  background: ${AppColors.surface};\n-  border-radius: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const SectionTitle = styled.h3`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onSurface};\n-  margin: 0;\n-`;\n-\n-const FieldRow = styled.div`\n-  display: flex;\n-  gap: 16px;\n-`;\n-\n-const FieldColumn = styled.div`\n-  flex: 1;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 8px;\n-  min-width: 0;\n-  overflow: hidden;\n-`;\n-\n-const Label = styled.label<{ $required?: boolean }>`\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onSurface};\n-  \n-  ${({ $required }) => $required && `\n-    &::after {\n-      content: ' *';\n-      color: ${AppColors.error};\n-    }\n-  `}\n-`;\n-\n-const Input = styled.input<{ error?: boolean }>`\n-  width: 100%;\n-  min-width: 0;\n-  padding: 12px;\n-  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${AppColors.onSurface};\n-  background-color: ${AppColors.input};\n-  box-sizing: border-box;\n-  \n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n-`;\n-\n-const ButtonContainer = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  justify-content: space-between;\n-  width: 100%;\n-  align-items: center;\n-`;\n-\n-const Button = styled.button<{ variant?: 'primary' | 'secondary' | 'danger' }>`\n-  padding: 12px 24px;\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  font-weight: 600;\n-  border: none;\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  ${({ variant = 'primary' }) => variant === 'primary' ? `\n-    background-color: ${AppColors.primary};\n-    color: ${AppColors.onPrimary};\n-    \n-    &:hover {\n-      background-color: ${AppColors.buttonPrimaryHover};\n-    }\n-  ` : variant === 'danger' ? `\n-    background-color: ${AppColors.error};\n-    color: ${AppColors.onPrimary};\n-    \n-    &:hover {\n-      opacity: 0.9;\n-    }\n-  ` : `\n-    background-color: ${AppColors.surface};\n-    color: ${AppColors.onSurface};\n-    border: 1px solid ${AppColors.borderLight};\n-    \n-    &:hover {\n-      background-color: ${AppColors.btnC};\n-    }\n-  `}\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-interface StaffEditPopupProps {\n-  isOpen: boolean;\n-  staff: Staff | null;\n-  onClose: () => void;\n-  onUpdate: () => void; // 업데이트 후 부모 컴포넌트에서 데이터 새로고침\n-}\n-\n-interface StaffFormData {\n-  name: string;\n-  loginId: string;\n-  phone: string;\n-  email: string;\n-  branchId: string;\n-  position: string;\n-  role: string;\n-  employmentType: string;\n-  permission: string;\n-  program: string; // 담당프로그램 필드 추가\n-  contractStartDate: string;\n-  contractEndDate: string;\n-  contractFile: File | null;\n-}\n-\n-const StaffEditPopup: React.FC<StaffEditPopupProps> = ({\n-  isOpen,\n-  staff,\n-  onClose,\n-  onUpdate\n-}) => {\n-  const [formData, setFormData] = useState<StaffFormData>({\n-    name: '',\n-    loginId: '',\n-    phone: '',\n-    email: '',\n-    branchId: '',\n-    position: '',\n-    role: '',\n-    employmentType: '',\n-    permission: '',\n-    program: '',\n-    contractStartDate: '',\n-    contractEndDate: '',\n-    contractFile: null\n-  });\n-  const [branches, setBranches] = useState<Branch[]>([]);\n-  const [loading, setLoading] = useState(false);\n-  const [errors, setErrors] = useState<Record<string, string>>({});\n-  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n-  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n-  const [newPassword, setNewPassword] = useState('');\n-  const [confirmPassword, setConfirmPassword] = useState('');\n-  const [passwordErrors, setPasswordErrors] = useState<Record<string, string>>({});\n-\n-  // 시스템 관리자인지 확인하는 함수\n-  const isSystemAdmin = (staff: Staff | null): boolean => {\n-    return staff?.loginId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n-  };\n-\n-  // 직원 데이터가 변경될 때 폼 데이터 초기화\n-  useEffect(() => {\n-    if (staff) {\n-      setFormData({\n-        name: staff.name,\n-        loginId: staff.loginId,\n-        phone: staff.phone,\n-        email: staff.email,\n-        branchId: staff.branchId,\n-        position: staff.position,\n-        role: staff.role,\n-        employmentType: staff.employmentType,\n-        permission: staff.permission,\n-        program: (staff as any).program || '', // 담당프로그램 필드 추가\n-        contractStartDate: staff.contractStartDate ? formatDateForInput(staff.contractStartDate) : '',\n-        contractEndDate: staff.contractEndDate ? formatDateForInput(staff.contractEndDate) : '',\n-        contractFile: null,\n-      });\n-    }\n-  }, [staff]);\n-\n-  // 지점 데이터 로드\n-  useEffect(() => {\n-    const loadBranches = async () => {\n-      try {\n-        const branchData = await dbManager.getAllBranches();\n-        setBranches(branchData);\n-      } catch (error) {\n-        console.error('지점 데이터 로드 실패:', error);\n-      }\n-    };\n-\n-    if (isOpen) {\n-      loadBranches();\n-    }\n-  }, [isOpen]);\n-\n-  // 드롭다운 옵션 변환 함수들\n-  const getBranchOptions = () => {\n-    return branches.map(branch => ({\n-      value: branch.id,\n-      label: branch.name,\n-      description: branch.address\n-    }));\n-  };\n-\n-  const getPositionOptions = () => {\n-    return POSITIONS.map(position => ({\n-      value: position,\n-      label: position\n-    }));\n-  };\n-\n-  const getRoleOptions = () => {\n-    return ROLES.map(role => ({\n-      value: role,\n-      label: role\n-    }));\n-  };\n-\n-  const getEmploymentTypeOptions = () => {\n-    return EMPLOYMENT_TYPES.map(type => ({\n-      value: type,\n-      label: type\n-    }));\n-  };\n-\n-  const getPermissionOptions = () => {\n-    return PERMISSIONS.map(permission => ({\n-      value: permission.value,\n-      label: permission.label,\n-      description: permission.description\n-    }));\n-  };\n-\n-  const getProgramOptions = () => {\n-    return [\n-      { value: '릴랙싱', label: '릴랙싱' },\n-      { value: 'WBM', label: 'WBM' }\n-    ];\n-  };\n-\n-  // 날짜 범위 계산 함수들\n-  const getContractStartDateMax = (): string | undefined => {\n-    if (formData.contractEndDate) {\n-      try {\n-        const endDate = new Date(formData.contractEndDate);\n-        if (isNaN(endDate.getTime())) return undefined;\n-        \n-        endDate.setDate(endDate.getDate() - 1);\n-        return endDate.toISOString().split('T')[0];\n-      } catch {\n-        return undefined;\n-      }\n-    }\n-    return undefined;\n-  };\n-\n-  const getContractEndDateMin = (): string | undefined => {\n-    if (formData.contractStartDate) {\n-      try {\n-        const startDate = new Date(formData.contractStartDate);\n-        if (isNaN(startDate.getTime())) return undefined;\n-        \n-        startDate.setDate(startDate.getDate() + 1);\n-        return startDate.toISOString().split('T')[0];\n-      } catch {\n-        return undefined;\n-      }\n-    }\n-    return undefined;\n-  };\n-\n-  const validateForm = (): boolean => {\n-    const newErrors: Record<string, string> = {};\n-\n-    if (!formData.name?.trim()) {\n-      newErrors.name = '이름을 입력해주세요.';\n-    }\n-\n-    if (!formData.phone?.trim()) {\n-      newErrors.phone = '전화번호를 입력해주세요.';\n-    } else if (!/^010-\\d{4}-\\d{4}$/.test(formData.phone)) {\n-      newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010-1234-5678)';\n-    }\n-\n-    if (!formData.email?.trim()) {\n-      newErrors.email = '이메일을 입력해주세요.';\n-    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n-      newErrors.email = '올바른 이메일 형식이 아닙니다.';\n-    }\n-\n-    if (!formData.branchId) {\n-      newErrors.branchId = '지점을 선택해주세요.';\n-    }\n-\n-    if (!formData.position?.trim()) {\n-      newErrors.position = '직급을 입력해주세요.';\n-    }\n-\n-    if (!formData.role?.trim()) {\n-      newErrors.role = '직책을 입력해주세요.';\n-    }\n-\n-    if (!formData.employmentType) {\n-      newErrors.employmentType = '고용형태를 선택해주세요.';\n-    }\n-\n-    if (!formData.permission) {\n-      newErrors.permission = '권한을 선택해주세요.';\n-    }\n-\n-    if (!formData.contractStartDate) {\n-      newErrors.contractStartDate = '계약 시작일을 선택해주세요.';\n-    }\n-\n-    // 정규직이 아닌 경우에만 계약종료일 필수\n-    if (formData.employmentType !== '정규직' && !formData.contractEndDate) {\n-      newErrors.contractEndDate = '계약 종료일을 선택해주세요.';\n-    }\n-\n-    // 코치일 경우 담당프로그램 필수\n-    if (formData.role === '코치' && !formData.program) {\n-      newErrors.program = '코치는 담당프로그램 선택이 필수입니다.';\n-    }\n-\n-    // 날짜 검증 (정규직이 아닌 경우에만)\n-    if (formData.employmentType !== '정규직' && formData.contractStartDate && formData.contractEndDate) {\n-      if (new Date(formData.contractStartDate) >= new Date(formData.contractEndDate)) {\n-        newErrors.contractEndDate = '계약 종료일은 시작일보다 늦어야 합니다.';\n-      }\n-    }\n-\n-    setErrors(newErrors);\n-    return Object.keys(newErrors).length === 0;\n-  };\n-\n-  const handleInputChange = (\n-    field: keyof StaffFormData,\n-    value: string | File | null\n-  ) => {\n-    // 전화번호 필드인 경우 자동 포맷팅 적용\n-    if (field === 'phone' && typeof value === 'string') {\n-      value = formatPhoneNumber(value);\n-    }\n-\n-    // 파일 업로드 필드인 경우 검증 수행\n-    if (field === 'contractFile' && value instanceof File) {\n-      // 파일 타입 검증 (이미지 또는 PDF만 허용)\n-      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n-      if (!allowedTypes.includes(value.type)) {\n-        setErrors(prev => ({ ...prev, contractFile: '이미지(JPG, PNG) 또는 PDF 파일만 업로드 가능합니다.' }));\n-        return;\n-      }\n-      \n-      // 파일 크기 검증 (10MB 제한)\n-      if (value.size > 10 * 1024 * 1024) {\n-        setErrors(prev => ({ ...prev, contractFile: '파일 크기는 10MB 이하여야 합니다.' }));\n-        return;\n-      }\n-    }\n-\n-    // 직책이 변경되고 코치가 아닌 경우 담당프로그램 초기화\n-    if (field === 'role' && typeof value === 'string' && value !== '코치') {\n-      setFormData(prev => ({\n-        ...prev,\n-        role: value as string,\n-        program: ''\n-      }));\n-    } \n-    // 고용형태가 정규직으로 변경되면 계약종료일 초기화\n-    else if (field === 'employmentType' && typeof value === 'string' && value === '정규직') {\n-      setFormData(prev => ({\n-        ...prev,\n-        employmentType: value as string,\n-        contractEndDate: ''\n-      }));\n-    } else {\n-      setFormData(prev => ({ ...prev, [field]: value }) as StaffFormData);\n-    }\n-\n-    // 에러 메시지 제거\n-    if (errors[field]) {\n-      setErrors(prev => ({\n-        ...prev,\n-        [field]: ''\n-      }));\n-    }\n-  };\n-\n-  // 전화번호 자동 포맷팅 함수\n-  const formatPhoneNumber = (inputValue: string): string => {\n-    // 숫자만 추출\n-    const numbers = inputValue.replace(/[^\\d]/g, '');\n-    \n-    // 11자리를 초과하면 잘라내기\n-    const truncated = numbers.slice(0, 11);\n-    \n-    // 자동 하이픈 추가\n-    if (truncated.length <= 3) {\n-      return truncated;\n-    } else if (truncated.length <= 7) {\n-      return `${truncated.slice(0, 3)}-${truncated.slice(3)}`;\n-    } else {\n-      return `${truncated.slice(0, 3)}-${truncated.slice(3, 7)}-${truncated.slice(7)}`;\n-    }\n-  };\n-\n-  const handleUpdate = async () => {\n-    if (!staff || !validateForm()) return;\n-\n-    setLoading(true);\n-    try {\n-      const updateData = {\n-        ...formData,\n-        contractStartDate: formData.contractStartDate ? new Date(formData.contractStartDate) : new Date(),\n-        contractEndDate: formData.contractEndDate && formData.employmentType !== '정규직' ? new Date(formData.contractEndDate) : new Date(),\n-      };\n-      \n-      await dbManager.updateStaff(staff.id, updateData);\n-      onUpdate();\n-      onClose();\n-    } catch (error) {\n-      console.error('직원 수정 실패:', error);\n-      if (error instanceof Error) {\n-        if (error.message.includes('이메일')) {\n-          setErrors({ email: '이미 사용 중인 이메일입니다.' });\n-        } else if (error.message.includes('시스템 관리자') && error.message.includes('권한')) {\n-          alert('시스템 관리자 계정의 권한은 변경할 수 없습니다.');\n-        } else {\n-          alert(`수정 실패: ${error.message}`);\n-        }\n-      }\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const openDeleteModal = () => {\n-    setIsDeleteModalOpen(true);\n-  };\n-\n-  const closeDeleteModal = () => {\n-    setIsDeleteModalOpen(false);\n-  };\n-\n-  const handleDelete = async () => {\n-    if (!staff) return;\n-\n-    setLoading(true);\n-    try {\n-      await dbManager.deleteStaff(staff.id);\n-      onUpdate();\n-      onClose();\n-      closeDeleteModal();\n-    } catch (error) {\n-      console.error('직원 삭제 실패:', error);\n-      if (error instanceof Error && error.message.includes('시스템 관리자')) {\n-        alert('시스템 관리자 계정은 삭제할 수 없습니다.');\n-      } else {\n-        alert('직원 삭제에 실패했습니다.');\n-      }\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const formatDateForInput = (date: Date | string): string => {\n-    if (!date) return '';\n-    \n-    try {\n-      const d = new Date(date);\n-      \n-      // Invalid Date 체크\n-      if (isNaN(d.getTime())) return '';\n-      \n-      return d.toISOString().split('T')[0];\n-    } catch {\n-      return '';\n-    }\n-  };\n-\n-  // 비밀번호 변경 관련 함수들\n-  const validatePassword = (): boolean => {\n-    const newPasswordErrors: Record<string, string> = {};\n-\n-    if (!newPassword.trim()) {\n-      newPasswordErrors.newPassword = '새 비밀번호를 입력해주세요.';\n-    } else if (!/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(newPassword)) {\n-      newPasswordErrors.newPassword = '비밀번호는 8자 이상, 영문+숫자+특수문자 조합이어야 합니다.';\n-    }\n-\n-    if (!confirmPassword.trim()) {\n-      newPasswordErrors.confirmPassword = '비밀번호 확인을 입력해주세요.';\n-    } else if (newPassword !== confirmPassword) {\n-      newPasswordErrors.confirmPassword = '비밀번호가 일치하지 않습니다.';\n-    }\n-\n-    setPasswordErrors(newPasswordErrors);\n-    return Object.keys(newPasswordErrors).length === 0;\n-  };\n-\n-  const handlePasswordChange = async () => {\n-    if (!staff || !validatePassword()) return;\n-\n-    setLoading(true);\n-    try {\n-      await dbManager.updateStaff(staff.id, { password: newPassword });\n-      alert('비밀번호가 성공적으로 변경되었습니다.');\n-      setIsPasswordModalOpen(false);\n-      setNewPassword('');\n-      setConfirmPassword('');\n-      setPasswordErrors({});\n-    } catch (error) {\n-      console.error('비밀번호 변경 실패:', error);\n-      alert('비밀번호 변경에 실패했습니다.');\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const closePasswordModal = () => {\n-    setIsPasswordModalOpen(false);\n-    setNewPassword('');\n-    setConfirmPassword('');\n-    setPasswordErrors({});\n-  };\n-\n-  const modalBody = (\n-    <FormContainer>\n-      {/* 기본 정보 섹션 */}\n-      <FormSection>\n-        <SectionTitle>기본 정보</SectionTitle>\n-        \n-        {/* 이름 - 전체 너비 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>이름</Label>\n-            <Input\n-              type=\"text\"\n-              value={formData.name || ''}\n-              onChange={(e) => handleInputChange('name', e.target.value)}\n-              placeholder=\"이름을 입력하세요\"\n-              error={!!errors.name}\n-            />\n-            {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        {/* 로그인ID (readonly), 비밀번호 변경 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label>로그인 ID</Label>\n-            <Input\n-              type=\"text\"\n-              value={formData.loginId || ''}\n-              readOnly\n-              style={{ backgroundColor: AppColors.background, color: AppColors.onInput1, cursor: 'not-allowed' }}\n-              placeholder=\"로그인 ID\"\n-            />\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label>비밀번호</Label>\n             <Button \n               variant=\"primary\" \n-              onClick={() => setIsPasswordModalOpen(true)}\n-              style={{ width: '100%', textAlign: 'center', padding: '12px' }}\n+              onClick={handlePasswordChange} \n+              disabled={loading || !isNewPasswordValid || !isConfirmPasswordValid}\n             >\n-              비밀번호 변경\n-            </Button>\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        {/* 이메일, 연락처 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>이메일</Label>\n-            <Input\n-              type=\"email\"\n-              value={formData.email || ''}\n-              onChange={(e) => handleInputChange('email', e.target.value)}\n-              placeholder=\"example@email.com\"\n-              error={!!errors.email}\n-            />\n-            {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required>연락처</Label>\n-            <Input\n-              type=\"tel\"\n-              inputMode=\"numeric\"\n-              value={formData.phone || ''}\n-              onChange={(e) => handleInputChange('phone', e.target.value)}\n-              placeholder=\"010-1234-5678\"\n-              error={!!errors.phone}\n-              maxLength={13}\n-              autoComplete=\"tel\"\n-            />\n-            {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-      </FormSection>\n-\n-      {/* 조직 정보 섹션 */}\n-      <FormSection>\n-        <SectionTitle>조직 정보</SectionTitle>\n-        \n-        {/* 지점, 권한 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>지점</Label>\n-            <CustomDropdown\n-              value={formData.branchId || ''}\n-              onChange={(value: string) => handleInputChange('branchId', value)}\n-              options={getBranchOptions()}\n-              placeholder=\"지점을 선택하세요\"\n-              error={!!errors.branchId}\n-              required\n-            />\n-            {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required>권한</Label>\n-            <CustomDropdown\n-              value={formData.permission || ''}\n-              onChange={(value: string) => handleInputChange('permission', value)}\n-              options={getPermissionOptions()}\n-              placeholder={isSystemAdmin(staff) ? \"시스템 관리자 (변경 불가)\" : \"권한을 선택하세요\"}\n-              error={!!errors.permission}\n-              disabled={isSystemAdmin(staff)}\n-              required\n-            />\n-            {isSystemAdmin(staff) && (\n-              <div style={{ \n-                color: AppColors.primary, \n-                fontSize: AppTextStyles.label3.fontSize, \n-                marginTop: '4px' \n-              }}>\n-                🔒 시스템 관리자 권한은 변경할 수 없습니다.\n-              </div>\n-            )}\n-            {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        {/* 직급, 직책 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>직급</Label>\n-            <CustomDropdown\n-              value={formData.position || ''}\n-              onChange={(value: string) => handleInputChange('position', value)}\n-              options={getPositionOptions()}\n-              placeholder=\"직급을 선택하세요\"\n-              error={!!errors.position}\n-              required\n-            />\n-            {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required>직책</Label>\n-            <CustomDropdown\n-              value={formData.role || ''}\n-              onChange={(value: string) => handleInputChange('role', value)}\n-              options={getRoleOptions()}\n-              placeholder=\"직책을 선택하세요\"\n-              error={!!errors.role}\n-              required\n-            />\n-            {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        {/* 고용형태, 담당프로그램 */}\n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>고용형태</Label>\n-            <CustomDropdown\n-              value={formData.employmentType || ''}\n-              onChange={(value: string) => handleInputChange('employmentType', value)}\n-              options={getEmploymentTypeOptions()}\n-              placeholder=\"고용형태를 선택하세요\"\n-              error={!!errors.employmentType}\n-              required\n-            />\n-            {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label>담당프로그램</Label>\n-            <CustomDropdown\n-              value={formData.program || ''}\n-              onChange={(value: string) => handleInputChange('program', value)}\n-              options={getProgramOptions()}\n-              placeholder={formData.role === '코치' ? \"담당프로그램을 선택하세요\" : \"코치만 선택 가능\"}\n-              error={!!errors.program}\n-              disabled={formData.role !== '코치'}\n-            />\n-            {errors.program && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.program}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-      </FormSection>\n-\n-      {/* 계약 정보 섹션 */}\n-      <FormSection>\n-        <SectionTitle>계약 정보</SectionTitle>\n-        \n-        <FieldRow>\n-          <FieldColumn>\n-            <Label $required>계약시작일</Label>\n-            <CustomDateInput\n-              value={formData.contractStartDate || ''}\n-              onChange={(value: string) => handleInputChange('contractStartDate', value)}\n-              placeholder=\"계약시작일을 선택하세요\"\n-              error={!!errors.contractStartDate}\n-              max={getContractStartDateMax()}\n-              required\n-            />\n-            {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n-          </FieldColumn>\n-\n-          <FieldColumn>\n-            <Label $required={formData.employmentType !== '정규직'}>계약종료일</Label>\n-            <CustomDateInput\n-              value={formData.contractEndDate || ''}\n-              onChange={(value: string) => handleInputChange('contractEndDate', value)}\n-              placeholder={formData.employmentType === '정규직' ? \"정규직은 입력 불필요\" : \"계약종료일을 선택하세요\"}\n-              error={!!errors.contractEndDate}\n-              min={getContractEndDateMin()}\n-              disabled={formData.employmentType === '정규직'}\n-              required={formData.employmentType !== '정규직'}\n-            />\n-            {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n-          </FieldColumn>\n-        </FieldRow>\n-\n-        <FieldRow>\n-          <FieldColumn>\n-            <StaffFileUploadField\n-              label=\"계약서 파일\"\n-              value={formData.contractFile || null}\n-              onChange={(file) => handleInputChange('contractFile', file)}\n-              placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n-              errorMessage={errors.contractFile}\n-              fullWidth\n-            />\n-            {staff?.contractFileName && !formData.contractFile && (\n-              <div style={{ \n-                fontSize: AppTextStyles.body2.fontSize, \n-                color: AppColors.onInput1, \n-                marginTop: '4px' \n-              }}>\n-                현재 파일: {staff.contractFileName}\n-              </div>\n-            )}\n-          </FieldColumn>\n-        </FieldRow>\n-      </FormSection>\n-\n-    </FormContainer>\n-  );\n-\n-  const modalFooter = (\n-    <ButtonContainer>\n-      <Button \n-        variant=\"danger\" \n-        onClick={openDeleteModal} \n-        disabled={loading || isSystemAdmin(staff)}\n-        title={isSystemAdmin(staff) ? \"시스템 관리자 계정은 삭제할 수 없습니다.\" : \"\"}\n-      >\n-        {isSystemAdmin(staff) ? \"🔒 삭제 불가\" : \"삭제\"}\n-      </Button>\n-      <div style={{ display: 'flex', gap: '12px' }}>\n-        <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n-          취소\n-        </Button>\n-        <Button variant=\"primary\" onClick={handleUpdate} disabled={loading}>\n-          {loading ? '처리 중...' : '수정'}\n-        </Button>\n-      </div>\n-    </ButtonContainer>\n-  );\n-\n-  return (\n-    <>\n-      <Modal\n-        isOpen={isOpen}\n-        onClose={onClose}\n-        width=\"1000px\"\n-        height=\"80vh\"\n-        header=\"직원 정보 수정\"\n-        body={modalBody}\n-        footer={modalFooter}\n-        disableOutsideClick={true}\n-      />\n-\n-      {/* 비밀번호 변경 모달 */}\n-      <Modal\n-        isOpen={isPasswordModalOpen}\n-        onClose={closePasswordModal}\n-        width=\"400px\"\n-        height=\"auto\"\n-        header=\"비밀번호 변경\"\n-        body={\n-          <div style={{ \n-            padding: '20px', \n-            display: 'flex', \n-            flexDirection: 'column', \n-            gap: '16px',\n-            textAlign: 'left' // 중앙정렬 재정의\n-          }}>\n-            <div>\n-              <Label $required>새 비밀번호</Label>\n-              <Input\n-                type=\"password\"\n-                value={newPassword}\n-                onChange={(e) => setNewPassword(e.target.value)}\n-                placeholder=\"영문+숫자+특수문자 8자 이상\"\n-                error={!!passwordErrors.newPassword}\n-              />\n-              {passwordErrors.newPassword && (\n-                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n-                  {passwordErrors.newPassword}\n-                </div>\n-              )}\n-            </div>\n-            \n-            <div>\n-              <Label $required>비밀번호 확인</Label>\n-              <Input\n-                type=\"password\"\n-                value={confirmPassword}\n-                onChange={(e) => setConfirmPassword(e.target.value)}\n-                placeholder=\"비밀번호를 다시 입력하세요\"\n-                error={!!passwordErrors.confirmPassword}\n-              />\n-              {passwordErrors.confirmPassword && (\n-                <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>\n-                  {passwordErrors.confirmPassword}\n-                </div>\n-              )}\n-            </div>\n-          </div>\n-        }\n-        footer={\n-          <ButtonContainer>\n-            <Button variant=\"secondary\" onClick={closePasswordModal} disabled={loading}>\n-              취소\n-            </Button>\n-            <Button variant=\"primary\" onClick={handlePasswordChange} disabled={loading}>\n               {loading ? '변경 중...' : '변경'}\n             </Button>\n           </ButtonContainer>\n         }\n"
                },
                {
                    "date": 1759913422903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,8 +191,9 @@\n   const [loading, setLoading] = useState(false);\n   const [errors, setErrors] = useState<Record<string, string>>({});\n   const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n   const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n+  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\n   const [newPassword, setNewPassword] = useState('');\n   const [confirmPassword, setConfirmPassword] = useState('');\n   const [isNewPasswordValid, setIsNewPasswordValid] = useState(false);\n   const [isConfirmPasswordValid, setIsConfirmPasswordValid] = useState(false);\n@@ -233,16 +234,29 @@\n         console.error('지점 데이터 로드 실패:', error);\n       }\n     };\n \n+    const getCurrentUser = () => {\n+      const adminId = sessionStorage.getItem('adminId');\n+      setCurrentUserId(adminId);\n+    };\n+\n     if (isOpen) {\n       loadBranches();\n+      getCurrentUser();\n     }\n   }, [isOpen]);\n \n   // 드롭다운 옵션 변환 함수들\n   const getBranchOptions = () => {\n-    return branches.map(branch => ({\n+    // 시스템관리자(master01)가 아닌 경우 '전체' 지점 제외\n+    const isCurrentUserSystemAdmin = currentUserId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n+    \n+    const filteredBranches = isCurrentUserSystemAdmin \n+      ? branches \n+      : branches.filter(branch => branch.name !== '전체');\n+    \n+    return filteredBranches.map(branch => ({\n       value: branch.id,\n       label: branch.name,\n       description: branch.address\n     }));\n"
                },
                {
                    "date": 1759913677385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -827,9 +827,9 @@\n       <Modal\n         isOpen={isOpen}\n         onClose={onClose}\n         width=\"1000px\"\n-        height=\"80vh\"\n+        height=\"90vh\"\n         header=\"직원 정보 수정\"\n         body={modalBody}\n         footer={modalFooter}\n         disableOutsideClick={true}\n"
                },
                {
                    "date": 1760074449249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,8 +163,9 @@\n   program: string; // 담당프로그램 필드 추가\n   contractStartDate: string;\n   contractEndDate: string;\n   contractFile: File | null;\n+  isActive: boolean; // 활성/비활성 상태\n }\n \n const StaffEditPopup: React.FC<StaffEditPopupProps> = ({\n   isOpen,\n@@ -184,9 +185,10 @@\n     permission: '',\n     program: '',\n     contractStartDate: '',\n     contractEndDate: '',\n-    contractFile: null\n+    contractFile: null,\n+    isActive: true\n   });\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [loading, setLoading] = useState(false);\n   const [errors, setErrors] = useState<Record<string, string>>({});\n@@ -219,8 +221,9 @@\n         program: (staff as any).program || '', // 담당프로그램 필드 추가\n         contractStartDate: staff.contractStartDate ? formatDateForInput(staff.contractStartDate) : '',\n         contractEndDate: staff.contractEndDate ? formatDateForInput(staff.contractEndDate) : '',\n         contractFile: null,\n+        isActive: staff.isActive !== undefined ? staff.isActive : true, // 기본값 true\n       });\n     }\n   }, [staff]);\n \n"
                },
                {
                    "date": 1760076161542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,14 +198,45 @@\n   const [newPassword, setNewPassword] = useState('');\n   const [confirmPassword, setConfirmPassword] = useState('');\n   const [isNewPasswordValid, setIsNewPasswordValid] = useState(false);\n   const [isConfirmPasswordValid, setIsConfirmPasswordValid] = useState(false);\n+  const [currentUserInfo, setCurrentUserInfo] = useState<any>(null); // 현재 로그인한 사용자 정보\n \n   // 시스템 관리자인지 확인하는 함수\n   const isSystemAdmin = (staff: Staff | null): boolean => {\n     return staff?.loginId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n   };\n \n+  // 현재 사용자가 해당 직원을 수정할 수 있는지 확인\n+  const canEditStaff = (targetStaff: Staff | null): boolean => {\n+    if (!currentUserInfo || !targetStaff) return false;\n+\n+    // VIEWER 권한은 수정 불가\n+    if (currentUserInfo.permission === 'VIEWER') return false;\n+\n+    // MASTER 권한은 모든 직원 수정 가능\n+    if (currentUserInfo.permission === 'MASTER') return true;\n+\n+    // EDITOR 권한은 본인이 속한 지점의 직원만 수정 가능\n+    if (currentUserInfo.permission === 'EDITOR') {\n+      return currentUserInfo.branchId === targetStaff.branchId;\n+    }\n+\n+    return false;\n+  };\n+\n+  // 현재 사용자가 VIEWER 권한인지 확인\n+  const isViewer = (): boolean => {\n+    return currentUserInfo?.permission === 'VIEWER';\n+  };\n+\n+  // 현재 사용자가 EDITOR 권한이면서 다른 지점 직원을 보고 있는지 확인\n+  const isEditorViewingOtherBranch = (targetStaff: Staff | null): boolean => {\n+    if (!currentUserInfo || !targetStaff) return false;\n+    return currentUserInfo.permission === 'EDITOR' && \n+           currentUserInfo.branchId !== targetStaff.branchId;\n+  };\n+\n   // 직원 데이터가 변경될 때 폼 데이터 초기화\n   useEffect(() => {\n     if (staff) {\n       setFormData({\n@@ -237,11 +268,22 @@\n         console.error('지점 데이터 로드 실패:', error);\n       }\n     };\n \n-    const getCurrentUser = () => {\n+    const getCurrentUser = async () => {\n       const adminId = sessionStorage.getItem('adminId');\n       setCurrentUserId(adminId);\n+      \n+      if (adminId) {\n+        try {\n+          // 현재 로그인한 사용자 정보 가져오기\n+          const allStaff = await dbManager.getAllStaff();\n+          const currentUser = allStaff.find(staff => staff.loginId === adminId);\n+          setCurrentUserInfo(currentUser || null);\n+        } catch (error) {\n+          console.error('현재 사용자 정보 로드 실패:', error);\n+        }\n+      }\n     };\n \n     if (isOpen) {\n       loadBranches();\n@@ -469,8 +511,19 @@\n \n   const handleUpdate = async () => {\n     if (!staff || !validateForm()) return;\n \n+    // 권한 검증\n+    if (isViewer()) {\n+      alert('수정 권한이 없습니다. VIEWER 권한은 조회만 가능합니다.');\n+      return;\n+    }\n+\n+    if (isEditorViewingOtherBranch(staff)) {\n+      alert('수정 권한이 없습니다. EDITOR 권한은 본인이 속한 지점의 직원만 수정할 수 있습니다.');\n+      return;\n+    }\n+\n     setLoading(true);\n     try {\n       const updateData = {\n         ...formData,\n@@ -507,8 +560,19 @@\n \n   const handleDelete = async () => {\n     if (!staff) return;\n \n+    // 권한 검증\n+    if (isViewer()) {\n+      alert('삭제 권한이 없습니다. VIEWER 권한은 조회만 가능합니다.');\n+      return;\n+    }\n+\n+    if (isEditorViewingOtherBranch(staff)) {\n+      alert('삭제 권한이 없습니다. EDITOR 권한은 본인이 속한 지점의 직원만 삭제할 수 있습니다.');\n+      return;\n+    }\n+\n     setLoading(true);\n     try {\n       await dbManager.deleteStaff(staff.id);\n       onUpdate();\n@@ -544,8 +608,19 @@\n   // 비밀번호 변경 관련 함수들\n   const handlePasswordChange = async () => {\n     if (!staff || !isNewPasswordValid || !isConfirmPasswordValid) return;\n \n+    // 권한 검증\n+    if (isViewer()) {\n+      alert('수정 권한이 없습니다. VIEWER 권한은 조회만 가능합니다.');\n+      return;\n+    }\n+\n+    if (isEditorViewingOtherBranch(staff)) {\n+      alert('수정 권한이 없습니다. EDITOR 권한은 본인이 속한 지점의 직원만 수정할 수 있습니다.');\n+      return;\n+    }\n+\n     setLoading(true);\n     try {\n       await dbManager.updateStaff(staff.id, { password: newPassword });\n       alert('비밀번호가 성공적으로 변경되었습니다.');\n@@ -581,8 +656,14 @@\n               value={formData.name || ''}\n               onChange={(e) => handleInputChange('name', e.target.value)}\n               placeholder=\"이름을 입력하세요\"\n               error={!!errors.name}\n+              readOnly={isViewer() || isEditorViewingOtherBranch(staff)}\n+              style={isViewer() || isEditorViewingOtherBranch(staff) ? {\n+                backgroundColor: AppColors.background,\n+                color: AppColors.onInput1,\n+                cursor: 'not-allowed'\n+              } : {}}\n             />\n             {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n           </FieldColumn>\n         </FieldRow>\n@@ -604,9 +685,17 @@\n             <Label>비밀번호</Label>\n             <Button \n               variant=\"primary\" \n               onClick={() => setIsPasswordModalOpen(true)}\n-              style={{ width: '100%', textAlign: 'center', padding: '12px' }}\n+              disabled={isViewer() || isEditorViewingOtherBranch(staff)}\n+              style={{ \n+                width: '100%', \n+                textAlign: 'center', \n+                padding: '12px',\n+                opacity: isViewer() || isEditorViewingOtherBranch(staff) ? 0.5 : 1,\n+                cursor: isViewer() || isEditorViewingOtherBranch(staff) ? 'not-allowed' : 'pointer'\n+              }}\n+              title={isViewer() || isEditorViewingOtherBranch(staff) ? '수정 권한이 없습니다.' : ''}\n             >\n               비밀번호 변경\n             </Button>\n           </FieldColumn>\n@@ -621,8 +710,14 @@\n               value={formData.email || ''}\n               onChange={(e) => handleInputChange('email', e.target.value)}\n               placeholder=\"example@email.com\"\n               error={!!errors.email}\n+              readOnly={isViewer() || isEditorViewingOtherBranch(staff)}\n+              style={isViewer() || isEditorViewingOtherBranch(staff) ? {\n+                backgroundColor: AppColors.background,\n+                color: AppColors.onInput1,\n+                cursor: 'not-allowed'\n+              } : {}}\n             />\n             {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n           </FieldColumn>\n \n@@ -636,8 +731,14 @@\n               placeholder=\"010-1234-5678\"\n               error={!!errors.phone}\n               maxLength={13}\n               autoComplete=\"tel\"\n+              readOnly={isViewer() || isEditorViewingOtherBranch(staff)}\n+              style={isViewer() || isEditorViewingOtherBranch(staff) ? {\n+                backgroundColor: AppColors.background,\n+                color: AppColors.onInput1,\n+                cursor: 'not-allowed'\n+              } : {}}\n             />\n             {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n           </FieldColumn>\n         </FieldRow>\n@@ -656,10 +757,20 @@\n               onChange={(value: string) => handleInputChange('branchId', value)}\n               options={getBranchOptions()}\n               placeholder=\"지점을 선택하세요\"\n               error={!!errors.branchId}\n+              disabled={isViewer() || isEditorViewingOtherBranch(staff)}\n               required\n             />\n+            {(isViewer() || isEditorViewingOtherBranch(staff)) && (\n+              <div style={{ \n+                color: AppColors.onInput1, \n+                fontSize: AppTextStyles.label3.fontSize, \n+                marginTop: '4px' \n+              }}>\n+                ℹ️ 수정 권한이 없습니다.\n+              </div>\n+            )}\n             {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n           </FieldColumn>\n \n           <FieldColumn>\n@@ -669,9 +780,9 @@\n               onChange={(value: string) => handleInputChange('permission', value)}\n               options={getPermissionOptions()}\n               placeholder={isSystemAdmin(staff) ? \"시스템 관리자 (변경 불가)\" : \"권한을 선택하세요\"}\n               error={!!errors.permission}\n-              disabled={isSystemAdmin(staff)}\n+              disabled={isSystemAdmin(staff) || isViewer() || isEditorViewingOtherBranch(staff)}\n               required\n             />\n             {isSystemAdmin(staff) && (\n               <div style={{ \n@@ -681,8 +792,17 @@\n               }}>\n                 🔒 시스템 관리자 권한은 변경할 수 없습니다.\n               </div>\n             )}\n+            {(isViewer() || isEditorViewingOtherBranch(staff)) && !isSystemAdmin(staff) && (\n+              <div style={{ \n+                color: AppColors.onInput1, \n+                fontSize: AppTextStyles.label3.fontSize, \n+                marginTop: '4px' \n+              }}>\n+                ℹ️ 수정 권한이 없습니다.\n+              </div>\n+            )}\n             {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n           </FieldColumn>\n         </FieldRow>\n \n@@ -695,8 +815,9 @@\n               onChange={(value: string) => handleInputChange('position', value)}\n               options={getPositionOptions()}\n               placeholder=\"직급을 선택하세요\"\n               error={!!errors.position}\n+              disabled={isViewer() || isEditorViewingOtherBranch(staff)}\n               required\n             />\n             {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n           </FieldColumn>\n@@ -708,8 +829,9 @@\n               onChange={(value: string) => handleInputChange('role', value)}\n               options={getRoleOptions()}\n               placeholder=\"직책을 선택하세요\"\n               error={!!errors.role}\n+              disabled={isViewer() || isEditorViewingOtherBranch(staff)}\n               required\n             />\n             {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n           </FieldColumn>\n@@ -724,8 +846,9 @@\n               onChange={(value: string) => handleInputChange('employmentType', value)}\n               options={getEmploymentTypeOptions()}\n               placeholder=\"고용형태를 선택하세요\"\n               error={!!errors.employmentType}\n+              disabled={isViewer() || isEditorViewingOtherBranch(staff)}\n               required\n             />\n             {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n           </FieldColumn>\n@@ -737,9 +860,9 @@\n               onChange={(value: string) => handleInputChange('program', value)}\n               options={getProgramOptions()}\n               placeholder={formData.role === '코치' ? \"담당프로그램을 선택하세요\" : \"코치만 선택 가능\"}\n               error={!!errors.program}\n-              disabled={formData.role !== '코치'}\n+              disabled={formData.role !== '코치' || isViewer() || isEditorViewingOtherBranch(staff)}\n             />\n             {errors.program && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.program}</div>}\n           </FieldColumn>\n         </FieldRow>\n@@ -757,8 +880,9 @@\n               onChange={(value: string) => handleInputChange('contractStartDate', value)}\n               placeholder=\"계약시작일을 선택하세요\"\n               error={!!errors.contractStartDate}\n               max={getContractStartDateMax()}\n+              disabled={isViewer() || isEditorViewingOtherBranch(staff)}\n               required\n             />\n             {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n           </FieldColumn>\n@@ -770,9 +894,9 @@\n               onChange={(value: string) => handleInputChange('contractEndDate', value)}\n               placeholder={formData.employmentType === '정규직' ? \"정규직은 입력 불필요\" : \"계약종료일을 선택하세요\"}\n               error={!!errors.contractEndDate}\n               min={getContractEndDateMin()}\n-              disabled={formData.employmentType === '정규직'}\n+              disabled={formData.employmentType === '정규직' || isViewer() || isEditorViewingOtherBranch(staff)}\n               required={formData.employmentType !== '정규직'}\n             />\n             {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n           </FieldColumn>\n@@ -783,10 +907,11 @@\n             <StaffFileUploadField\n               label=\"계약서 파일\"\n               value={formData.contractFile || null}\n               onChange={(file) => handleInputChange('contractFile', file)}\n-              placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n+              placeholder={isViewer() || isEditorViewingOtherBranch(staff) ? \"수정 권한이 없습니다\" : \"이미지 또는 PDF 파일 선택 (최대 10MB)\"}\n               errorMessage={errors.contractFile}\n+              disabled={isViewer() || isEditorViewingOtherBranch(staff)}\n               fullWidth\n             />\n             {staff?.contractFileName && !formData.contractFile && (\n               <div style={{ \n@@ -808,19 +933,29 @@\n     <ButtonContainer>\n       <Button \n         variant=\"danger\" \n         onClick={openDeleteModal} \n-        disabled={loading || isSystemAdmin(staff)}\n-        title={isSystemAdmin(staff) ? \"시스템 관리자 계정은 삭제할 수 없습니다.\" : \"\"}\n+        disabled={loading || isSystemAdmin(staff) || isViewer() || isEditorViewingOtherBranch(staff)}\n+        title={\n+          isSystemAdmin(staff) ? \"시스템 관리자 계정은 삭제할 수 없습니다.\" :\n+          (isViewer() || isEditorViewingOtherBranch(staff)) ? \"수정 권한이 없습니다.\" : \"\"\n+        }\n       >\n-        {isSystemAdmin(staff) ? \"🔒 삭제 불가\" : \"삭제\"}\n+        {isSystemAdmin(staff) ? \"🔒 삭제 불가\" : \n+         (isViewer() || isEditorViewingOtherBranch(staff)) ? \"🔒 삭제 불가\" : \"삭제\"}\n       </Button>\n       <div style={{ display: 'flex', gap: '12px' }}>\n         <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n-          취소\n+          {isViewer() || isEditorViewingOtherBranch(staff) ? \"닫기\" : \"취소\"}\n         </Button>\n-        <Button variant=\"primary\" onClick={handleUpdate} disabled={loading}>\n-          {loading ? '처리 중...' : '수정'}\n+        <Button \n+          variant=\"primary\" \n+          onClick={handleUpdate} \n+          disabled={loading || isViewer() || isEditorViewingOtherBranch(staff)}\n+          title={isViewer() || isEditorViewingOtherBranch(staff) ? \"수정 권한이 없습니다.\" : \"\"}\n+        >\n+          {loading ? '처리 중...' : \n+           (isViewer() || isEditorViewingOtherBranch(staff)) ? '🔒 수정 불가' : '수정'}\n         </Button>\n       </div>\n     </ButtonContainer>\n   );\n"
                },
                {
                    "date": 1760076271848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,8 +235,15 @@\n     return currentUserInfo.permission === 'EDITOR' && \n            currentUserInfo.branchId !== targetStaff.branchId;\n   };\n \n+  // EDITOR 권한이 MASTER 권한 직원의 권한을 수정하려는지 확인\n+  const isEditorTryingToEditMasterPermission = (targetStaff: Staff | null): boolean => {\n+    if (!currentUserInfo || !targetStaff) return false;\n+    return currentUserInfo.permission === 'EDITOR' && \n+           targetStaff.permission === 'MASTER';\n+  };\n+\n   // 직원 데이터가 변경될 때 폼 데이터 초기화\n   useEffect(() => {\n     if (staff) {\n       setFormData({\n@@ -522,8 +529,16 @@\n       alert('수정 권한이 없습니다. EDITOR 권한은 본인이 속한 지점의 직원만 수정할 수 있습니다.');\n       return;\n     }\n \n+    // EDITOR가 MASTER 권한을 변경하려는 경우 체크\n+    if (currentUserInfo?.permission === 'EDITOR' && \n+        staff.permission === 'MASTER' && \n+        formData.permission !== staff.permission) {\n+      alert('권한 변경이 거부되었습니다. EDITOR 권한은 MASTER 권한을 변경할 수 없습니다.');\n+      return;\n+    }\n+\n     setLoading(true);\n     try {\n       const updateData = {\n         ...formData,\n@@ -778,11 +793,20 @@\n             <CustomDropdown\n               value={formData.permission || ''}\n               onChange={(value: string) => handleInputChange('permission', value)}\n               options={getPermissionOptions()}\n-              placeholder={isSystemAdmin(staff) ? \"시스템 관리자 (변경 불가)\" : \"권한을 선택하세요\"}\n+              placeholder={\n+                isSystemAdmin(staff) ? \"시스템 관리자 (변경 불가)\" : \n+                isEditorTryingToEditMasterPermission(staff) ? \"MASTER 권한 (변경 불가)\" :\n+                \"권한을 선택하세요\"\n+              }\n               error={!!errors.permission}\n-              disabled={isSystemAdmin(staff) || isViewer() || isEditorViewingOtherBranch(staff)}\n+              disabled={\n+                isSystemAdmin(staff) || \n+                isViewer() || \n+                isEditorViewingOtherBranch(staff) || \n+                isEditorTryingToEditMasterPermission(staff)\n+              }\n               required\n             />\n             {isSystemAdmin(staff) && (\n               <div style={{ \n@@ -792,10 +816,19 @@\n               }}>\n                 🔒 시스템 관리자 권한은 변경할 수 없습니다.\n               </div>\n             )}\n-            {(isViewer() || isEditorViewingOtherBranch(staff)) && !isSystemAdmin(staff) && (\n+            {isEditorTryingToEditMasterPermission(staff) && !isSystemAdmin(staff) && (\n               <div style={{ \n+                color: AppColors.primary, \n+                fontSize: AppTextStyles.label3.fontSize, \n+                marginTop: '4px' \n+              }}>\n+                🔒 EDITOR 권한은 MASTER 권한을 변경할 수 없습니다.\n+              </div>\n+            )}\n+            {(isViewer() || isEditorViewingOtherBranch(staff)) && !isSystemAdmin(staff) && !isEditorTryingToEditMasterPermission(staff) && (\n+              <div style={{ \n                 color: AppColors.onInput1, \n                 fontSize: AppTextStyles.label3.fontSize, \n                 marginTop: '4px' \n               }}>\n"
                },
                {
                    "date": 1760076489788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -423,20 +423,15 @@\n     if (!formData.contractStartDate) {\n       newErrors.contractStartDate = '계약 시작일을 선택해주세요.';\n     }\n \n-    // 정규직이 아닌 경우에만 계약종료일 필수\n-    if (formData.employmentType !== '정규직' && !formData.contractEndDate) {\n-      newErrors.contractEndDate = '계약 종료일을 선택해주세요.';\n-    }\n-\n     // 코치일 경우 담당프로그램 필수\n     if (formData.role === '코치' && !formData.program) {\n       newErrors.program = '코치는 담당프로그램 선택이 필수입니다.';\n     }\n \n-    // 날짜 검증 (정규직이 아닌 경우에만)\n-    if (formData.employmentType !== '정규직' && formData.contractStartDate && formData.contractEndDate) {\n+    // 날짜 검증\n+    if (formData.contractStartDate && formData.contractEndDate) {\n       if (new Date(formData.contractStartDate) >= new Date(formData.contractEndDate)) {\n         newErrors.contractEndDate = '계약 종료일은 시작일보다 늦어야 합니다.';\n       }\n     }\n@@ -476,16 +471,8 @@\n         ...prev,\n         role: value as string,\n         program: ''\n       }));\n-    } \n-    // 고용형태가 정규직으로 변경되면 계약종료일 초기화\n-    else if (field === 'employmentType' && typeof value === 'string' && value === '정규직') {\n-      setFormData(prev => ({\n-        ...prev,\n-        employmentType: value as string,\n-        contractEndDate: ''\n-      }));\n     } else {\n       setFormData(prev => ({ ...prev, [field]: value }) as StaffFormData);\n     }\n \n@@ -542,9 +529,9 @@\n     try {\n       const updateData = {\n         ...formData,\n         contractStartDate: formData.contractStartDate ? new Date(formData.contractStartDate) : new Date(),\n-        contractEndDate: formData.employmentType === '정규직' ? null : (formData.contractEndDate ? new Date(formData.contractEndDate) : null),\n+        contractEndDate: formData.contractEndDate ? new Date(formData.contractEndDate) : null,\n       };\n       \n       await dbManager.updateStaff(staff.id, updateData);\n       onUpdate();\n@@ -920,17 +907,16 @@\n             {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n           </FieldColumn>\n \n           <FieldColumn>\n-            <Label $required={formData.employmentType !== '정규직'}>계약종료일</Label>\n+            <Label>계약종료일</Label>\n             <CustomDateInput\n               value={formData.contractEndDate || ''}\n               onChange={(value: string) => handleInputChange('contractEndDate', value)}\n-              placeholder={formData.employmentType === '정규직' ? \"정규직은 입력 불필요\" : \"계약종료일을 선택하세요\"}\n+              placeholder=\"계약종료일을 선택하세요\"\n               error={!!errors.contractEndDate}\n               min={getContractEndDateMin()}\n-              disabled={formData.employmentType === '정규직' || isViewer() || isEditorViewingOtherBranch(staff)}\n-              required={formData.employmentType !== '정규직'}\n+              disabled={isViewer() || isEditorViewingOtherBranch(staff)}\n             />\n             {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n           </FieldColumn>\n         </FieldRow>\n"
                },
                {
                    "date": 1760078176972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,8 +189,9 @@\n     contractFile: null,\n     isActive: true\n   });\n   const [branches, setBranches] = useState<Branch[]>([]);\n+  const [programs, setPrograms] = useState<any[]>([]); // 프로그램 목록 상태 추가\n   const [loading, setLoading] = useState(false);\n   const [errors, setErrors] = useState<Record<string, string>>({});\n   const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n   const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n@@ -205,26 +206,8 @@\n   const isSystemAdmin = (staff: Staff | null): boolean => {\n     return staff?.loginId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n   };\n \n-  // 현재 사용자가 해당 직원을 수정할 수 있는지 확인\n-  const canEditStaff = (targetStaff: Staff | null): boolean => {\n-    if (!currentUserInfo || !targetStaff) return false;\n-\n-    // VIEWER 권한은 수정 불가\n-    if (currentUserInfo.permission === 'VIEWER') return false;\n-\n-    // MASTER 권한은 모든 직원 수정 가능\n-    if (currentUserInfo.permission === 'MASTER') return true;\n-\n-    // EDITOR 권한은 본인이 속한 지점의 직원만 수정 가능\n-    if (currentUserInfo.permission === 'EDITOR') {\n-      return currentUserInfo.branchId === targetStaff.branchId;\n-    }\n-\n-    return false;\n-  };\n-\n   // 현재 사용자가 VIEWER 권한인지 확인\n   const isViewer = (): boolean => {\n     return currentUserInfo?.permission === 'VIEWER';\n   };\n@@ -275,8 +258,19 @@\n         console.error('지점 데이터 로드 실패:', error);\n       }\n     };\n \n+    const loadPrograms = async () => {\n+      try {\n+        const programData = await dbManager.getAllPrograms();\n+        // 활성화된 프로그램만 필터링\n+        const activePrograms = programData.filter(program => program.isActive);\n+        setPrograms(activePrograms);\n+      } catch (error) {\n+        console.error('프로그램 데이터 로드 실패:', error);\n+      }\n+    };\n+\n     const getCurrentUser = async () => {\n       const adminId = sessionStorage.getItem('adminId');\n       setCurrentUserId(adminId);\n       \n@@ -293,8 +287,9 @@\n     };\n \n     if (isOpen) {\n       loadBranches();\n+      loadPrograms();\n       getCurrentUser();\n     }\n   }, [isOpen]);\n \n@@ -343,12 +338,12 @@\n     }));\n   };\n \n   const getProgramOptions = () => {\n-    return [\n-      { value: '릴랙싱', label: '릴랙싱' },\n-      { value: 'WBM', label: 'WBM' }\n-    ];\n+    return programs.map(program => ({\n+      value: program.name,\n+      label: program.name\n+    }));\n   };\n \n   // 날짜 범위 계산 함수들\n   const getContractStartDateMax = (): string | undefined => {\n"
                },
                {
                    "date": 1760078828598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -756,8 +756,9 @@\n               placeholder=\"지점을 선택하세요\"\n               error={!!errors.branchId}\n               disabled={isViewer() || isEditorViewingOtherBranch(staff)}\n               required\n+              inModal={true}\n             />\n             {(isViewer() || isEditorViewingOtherBranch(staff)) && (\n               <div style={{ \n                 color: AppColors.onInput1, \n@@ -788,8 +789,9 @@\n                 isEditorViewingOtherBranch(staff) || \n                 isEditorTryingToEditMasterPermission(staff)\n               }\n               required\n+              inModal={true}\n             />\n             {isSystemAdmin(staff) && (\n               <div style={{ \n                 color: AppColors.primary, \n@@ -832,8 +834,9 @@\n               placeholder=\"직급을 선택하세요\"\n               error={!!errors.position}\n               disabled={isViewer() || isEditorViewingOtherBranch(staff)}\n               required\n+              inModal={true}\n             />\n             {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n           </FieldColumn>\n \n@@ -846,8 +849,9 @@\n               placeholder=\"직책을 선택하세요\"\n               error={!!errors.role}\n               disabled={isViewer() || isEditorViewingOtherBranch(staff)}\n               required\n+              inModal={true}\n             />\n             {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n           </FieldColumn>\n         </FieldRow>\n@@ -863,8 +867,9 @@\n               placeholder=\"고용형태를 선택하세요\"\n               error={!!errors.employmentType}\n               disabled={isViewer() || isEditorViewingOtherBranch(staff)}\n               required\n+              inModal={true}\n             />\n             {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n           </FieldColumn>\n \n@@ -876,8 +881,9 @@\n               options={getProgramOptions()}\n               placeholder={formData.role === '코치' ? \"담당프로그램을 선택하세요\" : \"코치만 선택 가능\"}\n               error={!!errors.program}\n               disabled={formData.role !== '코치' || isViewer() || isEditorViewingOtherBranch(staff)}\n+              inModal={true}\n             />\n             {errors.program && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.program}</div>}\n           </FieldColumn>\n         </FieldRow>\n"
                },
                {
                    "date": 1760161526215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,13 +74,13 @@\n     }\n   `}\n `;\n \n-const Input = styled.input<{ error?: boolean }>`\n+const Input = styled.input<{ $error?: boolean }>`\n   width: 100%;\n   min-width: 0;\n   padding: 12px;\n-  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n+  border: 1px solid ${({ $error }) => $error ? AppColors.error : AppColors.borderLight};\n   border-radius: 8px;\n   font-size: ${AppTextStyles.body1.fontSize};\n   color: ${AppColors.onSurface};\n   background-color: ${AppColors.input};\n@@ -652,9 +652,9 @@\n               type=\"text\"\n               value={formData.name || ''}\n               onChange={(e) => handleInputChange('name', e.target.value)}\n               placeholder=\"이름을 입력하세요\"\n-              error={!!errors.name}\n+              $error={!!errors.name}\n               readOnly={isViewer() || isEditorViewingOtherBranch(staff)}\n               style={isViewer() || isEditorViewingOtherBranch(staff) ? {\n                 backgroundColor: AppColors.background,\n                 color: AppColors.onInput1,\n@@ -706,9 +706,9 @@\n               type=\"email\"\n               value={formData.email || ''}\n               onChange={(e) => handleInputChange('email', e.target.value)}\n               placeholder=\"example@email.com\"\n-              error={!!errors.email}\n+              $error={!!errors.email}\n               readOnly={isViewer() || isEditorViewingOtherBranch(staff)}\n               style={isViewer() || isEditorViewingOtherBranch(staff) ? {\n                 backgroundColor: AppColors.background,\n                 color: AppColors.onInput1,\n@@ -725,9 +725,9 @@\n               inputMode=\"numeric\"\n               value={formData.phone || ''}\n               onChange={(e) => handleInputChange('phone', e.target.value)}\n               placeholder=\"010-1234-5678\"\n-              error={!!errors.phone}\n+              $error={!!errors.phone}\n               maxLength={13}\n               autoComplete=\"tel\"\n               readOnly={isViewer() || isEditorViewingOtherBranch(staff)}\n               style={isViewer() || isEditorViewingOtherBranch(staff) ? {\n"
                }
            ],
            "date": 1759904013901,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Modal from '../../../components/Modal';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\nimport { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n\nconst FormContainer = styled.div`\n  width: 100%;\n  max-height: 80vh;\n  overflow-y: auto;\n`;\n\nconst FormRow = styled.div`\n  display: flex;\n  gap: 16px;\n  margin-bottom: 16px;\n  align-items: flex-start;\n`;\n\nconst FormGroup = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Label = styled.label`\n  font-size: ${AppTextStyles.label1.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin-bottom: 8px;\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  outline: none;\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst Select = styled.select`\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  outline: none;\n  background: ${AppColors.surface};\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n`;\n\nconst FileInput = styled.input`\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  outline: none;\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n`;\n\nconst CurrentFile = styled.div`\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onInput1};\n  margin-top: 4px;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  gap: 12px;\n  justify-content: flex-end;\n  margin-top: 24px;\n`;\n\nconst Button = styled.button<{ variant?: 'primary' | 'secondary' | 'danger' }>`\n  padding: 12px 20px;\n  border: ${props => \n    props.variant === 'primary' ? 'none' : \n    props.variant === 'danger' ? `1px solid ${AppColors.error}` :\n    `1px solid ${AppColors.borderLight}`\n  };\n  border-radius: 8px;\n  background: ${props => \n    props.variant === 'primary' ? AppColors.primary : \n    props.variant === 'danger' ? AppColors.error :\n    AppColors.surface\n  };\n  color: ${props => \n    props.variant === 'primary' ? AppColors.onPrimary : \n    props.variant === 'danger' ? AppColors.onPrimary :\n    AppColors.onSurface\n  };\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    opacity: 0.9;\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst ErrorMessage = styled.div`\n  color: ${AppColors.error};\n  font-size: ${AppTextStyles.body2.fontSize};\n  margin-top: 4px;\n`;\n\ninterface StaffEditPopupProps {\n  isOpen: boolean;\n  staff: Staff | null;\n  onClose: () => void;\n  onUpdate: () => void; // 업데이트 후 부모 컴포넌트에서 데이터 새로고침\n}\n\nconst StaffEditPopup: React.FC<StaffEditPopupProps> = ({\n  isOpen,\n  staff,\n  onClose,\n  onUpdate\n}) => {\n  const [formData, setFormData] = useState<Partial<Staff>>({});\n  const [branches, setBranches] = useState<Branch[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // 직원 데이터가 변경될 때 폼 데이터 초기화\n  useEffect(() => {\n    if (staff) {\n      setFormData({\n        name: staff.name,\n        phone: staff.phone,\n        email: staff.email,\n        branchId: staff.branchId,\n        position: staff.position,\n        role: staff.role,\n        employmentType: staff.employmentType,\n        permission: staff.permission,\n        contractStartDate: staff.contractStartDate,\n        contractEndDate: staff.contractEndDate,\n      });\n    }\n  }, [staff]);\n\n  // 지점 데이터 로드\n  useEffect(() => {\n    const loadBranches = async () => {\n      try {\n        const branchData = await dbManager.getAllBranches();\n        setBranches(branchData);\n      } catch (error) {\n        console.error('지점 데이터 로드 실패:', error);\n      }\n    };\n\n    if (isOpen) {\n      loadBranches();\n    }\n  }, [isOpen]);\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.name?.trim()) {\n      newErrors.name = '이름을 입력해주세요.';\n    }\n\n    if (!formData.phone?.trim()) {\n      newErrors.phone = '전화번호를 입력해주세요.';\n    } else if (!/^[0-9-]+$/.test(formData.phone)) {\n      newErrors.phone = '올바른 전화번호 형식이 아닙니다.';\n    }\n\n    if (!formData.email?.trim()) {\n      newErrors.email = '이메일을 입력해주세요.';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      newErrors.email = '올바른 이메일 형식이 아닙니다.';\n    }\n\n    if (!formData.branchId) {\n      newErrors.branchId = '지점을 선택해주세요.';\n    }\n\n    if (!formData.position?.trim()) {\n      newErrors.position = '직급을 입력해주세요.';\n    }\n\n    if (!formData.role?.trim()) {\n      newErrors.role = '직책을 입력해주세요.';\n    }\n\n    if (!formData.employmentType) {\n      newErrors.employmentType = '고용형태를 선택해주세요.';\n    }\n\n    if (!formData.permission) {\n      newErrors.permission = '권한을 선택해주세요.';\n    }\n\n    if (!formData.contractStartDate) {\n      newErrors.contractStartDate = '계약 시작일을 선택해주세요.';\n    }\n\n    if (!formData.contractEndDate) {\n      newErrors.contractEndDate = '계약 종료일을 선택해주세요.';\n    }\n\n    if (formData.contractStartDate && formData.contractEndDate) {\n      if (new Date(formData.contractStartDate) >= new Date(formData.contractEndDate)) {\n        newErrors.contractEndDate = '계약 종료일은 시작일보다 늦어야 합니다.';\n      }\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleInputChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n\n    // 에러 메시지 제거\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setFormData(prev => ({\n        ...prev,\n        contractFile: file\n      }));\n    }\n  };\n\n  const handleUpdate = async () => {\n    if (!staff || !validateForm()) return;\n\n    setLoading(true);\n    try {\n      await dbManager.updateStaff(staff.id, formData);\n      onUpdate();\n      onClose();\n    } catch (error) {\n      console.error('직원 수정 실패:', error);\n      if (error instanceof Error && error.message.includes('이메일')) {\n        setErrors({ email: '이미 사용 중인 이메일입니다.' });\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!staff) return;\n\n    const confirmed = window.confirm(\n      `정말로 ${staff.name} 직원을 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.`\n    );\n\n    if (!confirmed) return;\n\n    setLoading(true);\n    try {\n      await dbManager.deleteStaff(staff.id);\n      onUpdate();\n      onClose();\n    } catch (error) {\n      console.error('직원 삭제 실패:', error);\n      alert('직원 삭제에 실패했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatDateForInput = (date: Date | string): string => {\n    if (!date) return '';\n    const d = new Date(date);\n    return d.toISOString().split('T')[0];\n  };\n\n  const modalBody = (\n    <FormContainer>\n      <FormRow>\n        <FormGroup>\n          <Label>이름 *</Label>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={formData.name || ''}\n            onChange={handleInputChange}\n            placeholder=\"직원 이름을 입력하세요\"\n          />\n          {errors.name && <ErrorMessage>{errors.name}</ErrorMessage>}\n        </FormGroup>\n        <FormGroup>\n          <Label>전화번호 *</Label>\n          <Input\n            type=\"tel\"\n            name=\"phone\"\n            value={formData.phone || ''}\n            onChange={handleInputChange}\n            placeholder=\"010-1234-5678\"\n          />\n          {errors.phone && <ErrorMessage>{errors.phone}</ErrorMessage>}\n        </FormGroup>\n      </FormRow>\n\n      <FormRow>\n        <FormGroup>\n          <Label>이메일 *</Label>\n          <Input\n            type=\"email\"\n            name=\"email\"\n            value={formData.email || ''}\n            onChange={handleInputChange}\n            placeholder=\"email@example.com\"\n          />\n          {errors.email && <ErrorMessage>{errors.email}</ErrorMessage>}\n        </FormGroup>\n        <FormGroup>\n          <Label>지점 *</Label>\n          <Select\n            name=\"branchId\"\n            value={formData.branchId || ''}\n            onChange={handleInputChange}\n          >\n            <option value=\"\">지점을 선택하세요</option>\n            {branches.map(branch => (\n              <option key={branch.id} value={branch.id}>\n                {branch.name}\n              </option>\n            ))}\n          </Select>\n          {errors.branchId && <ErrorMessage>{errors.branchId}</ErrorMessage>}\n        </FormGroup>\n      </FormRow>\n\n      <FormRow>\n        <FormGroup>\n          <Label>직급 *</Label>\n          <Input\n            type=\"text\"\n            name=\"position\"\n            value={formData.position || ''}\n            onChange={handleInputChange}\n            placeholder=\"예: 매니저, 사원, 팀장\"\n          />\n          {errors.position && <ErrorMessage>{errors.position}</ErrorMessage>}\n        </FormGroup>\n        <FormGroup>\n          <Label>직책 *</Label>\n          <Input\n            type=\"text\"\n            name=\"role\"\n            value={formData.role || ''}\n            onChange={handleInputChange}\n            placeholder=\"예: 운영팀장, 마케팅 담당\"\n          />\n          {errors.role && <ErrorMessage>{errors.role}</ErrorMessage>}\n        </FormGroup>\n      </FormRow>\n\n      <FormRow>\n        <FormGroup>\n          <Label>고용형태 *</Label>\n          <Select\n            name=\"employmentType\"\n            value={formData.employmentType || ''}\n            onChange={handleInputChange}\n          >\n            <option value=\"\">고용형태를 선택하세요</option>\n            <option value=\"정규직\">정규직</option>\n            <option value=\"계약직\">계약직</option>\n            <option value=\"파트타임\">파트타임</option>\n            <option value=\"인턴\">인턴</option>\n          </Select>\n          {errors.employmentType && <ErrorMessage>{errors.employmentType}</ErrorMessage>}\n        </FormGroup>\n        <FormGroup>\n          <Label>권한 *</Label>\n          <Select\n            name=\"permission\"\n            value={formData.permission || ''}\n            onChange={handleInputChange}\n          >\n            <option value=\"\">권한을 선택하세요</option>\n            <option value=\"MASTER\">MASTER (전체 관리)</option>\n            <option value=\"EDITOR\">EDITOR (편집 권한)</option>\n            <option value=\"VIEWER\">VIEWER (조회 권한)</option>\n          </Select>\n          {errors.permission && <ErrorMessage>{errors.permission}</ErrorMessage>}\n        </FormGroup>\n      </FormRow>\n\n      <FormRow>\n        <FormGroup>\n          <Label>계약 시작일 *</Label>\n          <Input\n            type=\"date\"\n            name=\"contractStartDate\"\n            value={formatDateForInput(formData.contractStartDate || '')}\n            onChange={handleInputChange}\n          />\n          {errors.contractStartDate && <ErrorMessage>{errors.contractStartDate}</ErrorMessage>}\n        </FormGroup>\n        <FormGroup>\n          <Label>계약 종료일 *</Label>\n          <Input\n            type=\"date\"\n            name=\"contractEndDate\"\n            value={formatDateForInput(formData.contractEndDate || '')}\n            onChange={handleInputChange}\n          />\n          {errors.contractEndDate && <ErrorMessage>{errors.contractEndDate}</ErrorMessage>}\n        </FormGroup>\n      </FormRow>\n\n      <FormRow>\n        <FormGroup>\n          <Label>계약서 파일</Label>\n          <FileInput\n            type=\"file\"\n            accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n            onChange={handleFileChange}\n          />\n          {staff?.contractFileName && (\n            <CurrentFile>\n              현재 파일: {staff.contractFileName}\n            </CurrentFile>\n          )}\n        </FormGroup>\n      </FormRow>\n\n      <ButtonContainer>\n        <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n          취소\n        </Button>\n        <Button variant=\"danger\" onClick={handleDelete} disabled={loading}>\n          삭제\n        </Button>\n        <Button variant=\"primary\" onClick={handleUpdate} disabled={loading}>\n          {loading ? '처리 중...' : '수정'}\n        </Button>\n      </ButtonContainer>\n    </FormContainer>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      width=\"800px\"\n      header=\"직원 정보 수정\"\n      body={modalBody}\n    />\n  );\n};\n\nexport default StaffEditPopup;\n"
        }
    ]
}