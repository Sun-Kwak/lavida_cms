{
    "sourceFile": "src/pages/CMS/Staff/StaffSearch.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1759900871595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759903573916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n-import React, { useState } from 'react';\n+import React, { useState, useEffect } from 'react';\n import styled from 'styled-components';\n import CMSLayout from '../../../components/CMSLayout';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n \n const PageContainer = styled.div`\n   width: 100%;\n `;\n@@ -177,75 +178,55 @@\n   text-align: center;\n   color: ${AppColors.onInput1};\n `;\n \n-interface Staff {\n-  id: string;\n-  name: string;\n-  phone: string;\n-  email: string;\n-  position: string;\n-  department: string;\n-  permissions: string[];\n-  startDate: string;\n-  status: 'active' | 'inactive' | 'leave';\n-}\n-\n-const DUMMY_STAFF: Staff[] = [\n-  {\n-    id: \"EMP001\",\n-    name: \"한수민\",\n-    phone: \"010-1111-2222\",\n-    email: \"han@lavida.com\",\n-    position: \"코치\",\n-    department: \"코칭팀\",\n-    permissions: [\"회원관리\", \"운동처방\"],\n-    startDate: \"2024-01-15\",\n-    status: \"active\"\n-  },\n-  {\n-    id: \"EMP002\",\n-    name: \"임정현\",\n-    phone: \"010-3333-4444\",\n-    email: \"lim@lavida.com\",\n-    position: \"매니저\",\n-    department: \"운영팀\",\n-    permissions: [\"회원관리\", \"예약관리\", \"결제관리\"],\n-    startDate: \"2023-06-01\",\n-    status: \"active\"\n-  },\n-  {\n-    id: \"EMP003\",\n-    name: \"민웅희\",\n-    phone: \"010-5555-6666\",\n-    email: \"min@lavida.com\",\n-    position: \"코치\",\n-    department: \"코칭팀\",\n-    permissions: [\"회원관리\", \"운동처방\"],\n-    startDate: \"2024-03-10\",\n-    status: \"active\"\n-  },\n-  {\n-    id: \"EMP004\",\n-    name: \"김대표\",\n-    phone: \"010-7777-8888\",\n-    email: \"ceo@lavida.com\",\n-    position: \"대표\",\n-    department: \"운영팀\",\n-    permissions: [\"회원관리\", \"예약관리\", \"운동처방\", \"결제관리\", \"설정관리\"],\n-    startDate: \"2023-01-01\",\n-    status: \"active\"\n-  },\n-];\n-\n const StaffSearch: React.FC = () => {\n   const [searchQuery, setSearchQuery] = useState<string>('');\n-  const [filteredStaff, setFilteredStaff] = useState<Staff[]>(DUMMY_STAFF);\n+  const [allStaff, setAllStaff] = useState<Staff[]>([]);\n+  const [filteredStaff, setFilteredStaff] = useState<Staff[]>([]);\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [loading, setLoading] = useState<boolean>(true);\n   const [showFilters, setShowFilters] = useState<boolean>(false);\n   const [activeFilters, setActiveFilters] = useState<string[]>([]);\n \n+  // 컴포넌트 마운트 시 데이터 로드\n+  useEffect(() => {\n+    loadData();\n+  }, []);\n+\n+  const loadData = async () => {\n+    setLoading(true);\n+    try {\n+      const [staffData, branchData] = await Promise.all([\n+        dbManager.getAllStaff(),\n+        dbManager.getAllBranches()\n+      ]);\n+      \n+      setAllStaff(staffData);\n+      setFilteredStaff(staffData);\n+      setBranches(branchData);\n+    } catch (error) {\n+      console.error('데이터 로드 실패:', error);\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  // 지점명 가져오기 헬퍼 함수\n+  const getBranchName = (branchId: string): string => {\n+    const branch = branches.find(b => b.id === branchId);\n+    return branch ? branch.name : '알 수 없음';\n+  };\n+\n+  // 계약 상태 확인 함수\n+  const getStaffStatus = (staff: Staff): 'active' | 'inactive' => {\n+    const now = new Date();\n+    const endDate = new Date(staff.contractEndDate);\n+    return endDate > now ? 'active' : 'inactive';\n+  };\n+\n   const handleSearch = () => {\n-    let filtered = DUMMY_STAFF;\n+    let filtered = allStaff;\n     \n     // 텍스트 검색\n     if (searchQuery.trim()) {\n       const query = searchQuery.toLowerCase().trim();\n@@ -254,33 +235,33 @@\n         staff.name.toLowerCase().includes(query) ||\n         staff.phone.includes(query) ||\n         staff.email.toLowerCase().includes(query) ||\n         staff.position.toLowerCase().includes(query) ||\n-        staff.department.toLowerCase().includes(query)\n+        staff.role.toLowerCase().includes(query) ||\n+        getBranchName(staff.branchId).toLowerCase().includes(query)\n       );\n     }\n     \n     // 필터 적용\n     if (activeFilters.length > 0) {\n       filtered = filtered.filter(staff => {\n         return activeFilters.some(filter => {\n           switch (filter) {\n-            case '코치':\n-              return staff.position === '코치';\n-            case '매니저':\n-              return staff.position === '매니저';\n-            case '대표':\n-              return staff.position === '대표';\n-            case '운영팀':\n-              return staff.department === '운영팀';\n-            case '코칭팀':\n-              return staff.department === '코칭팀';\n+            case 'MASTER':\n+              return staff.permission === 'MASTER';\n+            case 'EDITOR':\n+              return staff.permission === 'EDITOR';\n+            case 'VIEWER':\n+              return staff.permission === 'VIEWER';\n             case '활성':\n-              return staff.status === 'active';\n+              return getStaffStatus(staff) === 'active';\n             case '비활성':\n-              return staff.status === 'inactive';\n+              return getStaffStatus(staff) === 'inactive';\n             default:\n-              return true;\n+              // 직급, 직책, 고용형태 필터\n+              return staff.position === filter || \n+                     staff.role === filter || \n+                     staff.employmentType === filter;\n           }\n         });\n       });\n     }\n@@ -308,13 +289,24 @@\n \n   const clearFilters = () => {\n     setActiveFilters([]);\n     setSearchQuery('');\n-    setFilteredStaff(DUMMY_STAFF);\n+    setFilteredStaff(allStaff);\n   };\n \n-  const filterOptions = ['코치', '매니저', '대표', '운영팀', '코칭팀', '활성', '비활성'];\n+  // 동적 필터 옵션 생성\n+  const getFilterOptions = () => {\n+    const positions = Array.from(new Set(allStaff.map(staff => staff.position)));\n+    const roles = Array.from(new Set(allStaff.map(staff => staff.role)));\n+    const employmentTypes = Array.from(new Set(allStaff.map(staff => staff.employmentType)));\n+    const permissions = ['MASTER', 'EDITOR', 'VIEWER'];\n+    const statuses = ['활성', '비활성'];\n+    \n+    return [...positions, ...roles, ...employmentTypes, ...permissions, ...statuses];\n+  };\n \n+  const filterOptions = getFilterOptions();\n+\n   return (\n     <CMSLayout currentPath=\"/cms/staff/search\">\n       <PageContainer>\n         <SearchSection>\n@@ -322,9 +314,9 @@\n             <SearchInput\n               value={searchQuery}\n               onChange={(e) => setSearchQuery(e.target.value)}\n               onKeyPress={handleKeyPress}\n-              placeholder=\"직원명, ID, 전화번호, 이메일, 직급, 부서로 검색...\"\n+              placeholder=\"직원명, ID, 전화번호, 이메일, 직급, 직책, 지점명으로 검색...\"\n             />\n             <Button onClick={handleSearch}>검색</Button>\n             <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n               필터\n@@ -355,21 +347,27 @@\n             <ResultsTitle>검색 결과</ResultsTitle>\n             <ResultsCount>총 {filteredStaff.length}명</ResultsCount>\n           </ResultsHeader>\n \n-          {filteredStaff.length > 0 ? (\n+          {loading ? (\n+            <EmptyState>\n+              <p>데이터를 불러오는 중...</p>\n+            </EmptyState>\n+          ) : filteredStaff.length > 0 ? (\n             <TableContainer>\n               <Table>\n                 <TableHeader>\n                   <TableRow>\n                     <TableHeaderCell>직원ID</TableHeaderCell>\n                     <TableHeaderCell>이름</TableHeaderCell>\n                     <TableHeaderCell>연락처</TableHeaderCell>\n                     <TableHeaderCell>이메일</TableHeaderCell>\n+                    <TableHeaderCell>지점</TableHeaderCell>\n                     <TableHeaderCell>직급</TableHeaderCell>\n-                    <TableHeaderCell>부서</TableHeaderCell>\n+                    <TableHeaderCell>직책</TableHeaderCell>\n+                    <TableHeaderCell>고용형태</TableHeaderCell>\n                     <TableHeaderCell>권한</TableHeaderCell>\n-                    <TableHeaderCell>입사일</TableHeaderCell>\n+                    <TableHeaderCell>계약기간</TableHeaderCell>\n                     <TableHeaderCell>상태</TableHeaderCell>\n                     <TableHeaderCell>액션</TableHeaderCell>\n                   </TableRow>\n                 </TableHeader>\n@@ -379,25 +377,24 @@\n                       <TableCell>{staff.id}</TableCell>\n                       <TableCell>{staff.name}</TableCell>\n                       <TableCell>{staff.phone}</TableCell>\n                       <TableCell>{staff.email}</TableCell>\n+                      <TableCell>{getBranchName(staff.branchId)}</TableCell>\n                       <TableCell>{staff.position}</TableCell>\n-                      <TableCell>{staff.department}</TableCell>\n+                      <TableCell>{staff.role}</TableCell>\n+                      <TableCell>{staff.employmentType}</TableCell>\n                       <TableCell>\n-                        {staff.permissions.slice(0, 2).map(permission => (\n-                          <Tag key={permission}>{permission}</Tag>\n-                        ))}\n-                        {staff.permissions.length > 2 && (\n-                          <Tag>+{staff.permissions.length - 2}</Tag>\n-                        )}\n+                        <Tag>{staff.permission}</Tag>\n                       </TableCell>\n-                      <TableCell>{staff.startDate}</TableCell>\n                       <TableCell>\n+                        {new Date(staff.contractStartDate).toLocaleDateString()} ~ {new Date(staff.contractEndDate).toLocaleDateString()}\n+                      </TableCell>\n+                      <TableCell>\n                         <Tag style={{ \n-                          backgroundColor: staff.status === 'active' ? '#e8f5e8' : '#ffebee',\n-                          color: staff.status === 'active' ? '#2e7d32' : '#c62828'\n+                          backgroundColor: getStaffStatus(staff) === 'active' ? '#e8f5e8' : '#ffebee',\n+                          color: getStaffStatus(staff) === 'active' ? '#2e7d32' : '#c62828'\n                         }}>\n-                          {staff.status === 'active' ? '활성' : '비활성'}\n+                          {getStaffStatus(staff) === 'active' ? '활성' : '비활성'}\n                         </Tag>\n                       </TableCell>\n                       <TableCell>\n                         <ActionButton onClick={() => handleStaffAction(staff.id, '상세보기')}>\n"
                },
                {
                    "date": 1759903754794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,23 +157,8 @@\n   font-size: 12px;\n   margin-right: 4px;\n `;\n \n-const ActionButton = styled.button`\n-  padding: 6px 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 6px;\n-  background: ${AppColors.surface};\n-  color: ${AppColors.primary};\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    background: ${AppColors.primary}10;\n-  }\n-`;\n-\n const EmptyState = styled.div`\n   padding: 60px 20px;\n   text-align: center;\n   color: ${AppColors.onInput1};\n@@ -282,12 +267,8 @@\n         : [...prev, filter]\n     );\n   };\n \n-  const handleStaffAction = (staffId: string, action: string) => {\n-    alert(`직원 ${staffId}에 대한 ${action} 작업을 수행합니다.`);\n-  };\n-\n   const clearFilters = () => {\n     setActiveFilters([]);\n     setSearchQuery('');\n     setFilteredStaff(allStaff);\n@@ -356,9 +337,8 @@\n             <TableContainer>\n               <Table>\n                 <TableHeader>\n                   <TableRow>\n-                    <TableHeaderCell>직원ID</TableHeaderCell>\n                     <TableHeaderCell>이름</TableHeaderCell>\n                     <TableHeaderCell>연락처</TableHeaderCell>\n                     <TableHeaderCell>이메일</TableHeaderCell>\n                     <TableHeaderCell>지점</TableHeaderCell>\n@@ -367,15 +347,13 @@\n                     <TableHeaderCell>고용형태</TableHeaderCell>\n                     <TableHeaderCell>권한</TableHeaderCell>\n                     <TableHeaderCell>계약기간</TableHeaderCell>\n                     <TableHeaderCell>상태</TableHeaderCell>\n-                    <TableHeaderCell>액션</TableHeaderCell>\n                   </TableRow>\n                 </TableHeader>\n                 <tbody>\n                   {filteredStaff.map(staff => (\n                     <TableRow key={staff.id}>\n-                      <TableCell>{staff.id}</TableCell>\n                       <TableCell>{staff.name}</TableCell>\n                       <TableCell>{staff.phone}</TableCell>\n                       <TableCell>{staff.email}</TableCell>\n                       <TableCell>{getBranchName(staff.branchId)}</TableCell>\n@@ -395,13 +373,8 @@\n                         }}>\n                           {getStaffStatus(staff) === 'active' ? '활성' : '비활성'}\n                         </Tag>\n                       </TableCell>\n-                      <TableCell>\n-                        <ActionButton onClick={() => handleStaffAction(staff.id, '상세보기')}>\n-                          상세보기\n-                        </ActionButton>\n-                      </TableCell>\n                     </TableRow>\n                   ))}\n                 </tbody>\n               </Table>\n"
                },
                {
                    "date": 1759904013904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import CMSLayout from '../../../components/CMSLayout';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n+import StaffEditPopup from './StaffEditPopup';\n \n const PageContainer = styled.div`\n   width: 100%;\n `;\n@@ -125,8 +126,10 @@\n   background: ${AppColors.background};\n `;\n \n const TableRow = styled.tr`\n+  cursor: pointer;\n+  \n   &:hover td {\n     background: ${AppColors.primary}05;\n   }\n   \n@@ -171,8 +174,10 @@\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [loading, setLoading] = useState<boolean>(true);\n   const [showFilters, setShowFilters] = useState<boolean>(false);\n   const [activeFilters, setActiveFilters] = useState<string[]>([]);\n+  const [selectedStaff, setSelectedStaff] = useState<Staff | null>(null);\n+  const [isEditPopupOpen, setIsEditPopupOpen] = useState<boolean>(false);\n \n   // 컴포넌트 마운트 시 데이터 로드\n   useEffect(() => {\n     loadData();\n@@ -273,8 +278,26 @@\n     setSearchQuery('');\n     setFilteredStaff(allStaff);\n   };\n \n+  // 직원 row 클릭 핸들러\n+  const handleStaffRowClick = (staff: Staff) => {\n+    setSelectedStaff(staff);\n+    setIsEditPopupOpen(true);\n+  };\n+\n+  // 팝업 닫기 핸들러\n+  const handleCloseEditPopup = () => {\n+    setIsEditPopupOpen(false);\n+    setSelectedStaff(null);\n+  };\n+\n+  // 직원 수정/삭제 후 데이터 새로고침\n+  const handleStaffUpdate = async () => {\n+    await loadData();\n+    handleSearch(); // 현재 검색 조건 유지\n+  };\n+\n   // 동적 필터 옵션 생성\n   const getFilterOptions = () => {\n     const positions = Array.from(new Set(allStaff.map(staff => staff.position)));\n     const roles = Array.from(new Set(allStaff.map(staff => staff.role)));\n@@ -351,9 +374,9 @@\n                   </TableRow>\n                 </TableHeader>\n                 <tbody>\n                   {filteredStaff.map(staff => (\n-                    <TableRow key={staff.id}>\n+                    <TableRow key={staff.id} onClick={() => handleStaffRowClick(staff)}>\n                       <TableCell>{staff.name}</TableCell>\n                       <TableCell>{staff.phone}</TableCell>\n                       <TableCell>{staff.email}</TableCell>\n                       <TableCell>{getBranchName(staff.branchId)}</TableCell>\n@@ -385,8 +408,16 @@\n               <p>다른 검색어를 시도해보세요.</p>\n             </EmptyState>\n           )}\n         </ResultsSection>\n+\n+        {/* 직원 수정/삭제 팝업 */}\n+        <StaffEditPopup\n+          isOpen={isEditPopupOpen}\n+          staff={selectedStaff}\n+          onClose={handleCloseEditPopup}\n+          onUpdate={handleStaffUpdate}\n+        />\n       </PageContainer>\n     </CMSLayout>\n   );\n };\n"
                },
                {
                    "date": 1759906581266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState, useEffect } from 'react';\n+import React, { useState, useEffect, useCallback } from 'react';\n import styled from 'styled-components';\n import CMSLayout from '../../../components/CMSLayout';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n@@ -177,45 +177,22 @@\n   const [activeFilters, setActiveFilters] = useState<string[]>([]);\n   const [selectedStaff, setSelectedStaff] = useState<Staff | null>(null);\n   const [isEditPopupOpen, setIsEditPopupOpen] = useState<boolean>(false);\n \n-  // 컴포넌트 마운트 시 데이터 로드\n-  useEffect(() => {\n-    loadData();\n-  }, []);\n-\n-  const loadData = async () => {\n-    setLoading(true);\n-    try {\n-      const [staffData, branchData] = await Promise.all([\n-        dbManager.getAllStaff(),\n-        dbManager.getAllBranches()\n-      ]);\n-      \n-      setAllStaff(staffData);\n-      setFilteredStaff(staffData);\n-      setBranches(branchData);\n-    } catch (error) {\n-      console.error('데이터 로드 실패:', error);\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n   // 지점명 가져오기 헬퍼 함수\n-  const getBranchName = (branchId: string): string => {\n+  const getBranchName = useCallback((branchId: string): string => {\n     const branch = branches.find(b => b.id === branchId);\n     return branch ? branch.name : '알 수 없음';\n-  };\n+  }, [branches]);\n \n   // 계약 상태 확인 함수\n   const getStaffStatus = (staff: Staff): 'active' | 'inactive' => {\n     const now = new Date();\n     const endDate = new Date(staff.contractEndDate);\n     return endDate > now ? 'active' : 'inactive';\n   };\n \n-  const handleSearch = () => {\n+  const handleSearch = useCallback(() => {\n     let filtered = allStaff;\n     \n     // 텍스트 검색\n     if (searchQuery.trim()) {\n@@ -256,12 +233,40 @@\n       });\n     }\n     \n     setFilteredStaff(filtered);\n+  }, [allStaff, searchQuery, activeFilters, getBranchName]);\n+\n+  // 컴포넌트 마운트 시 데이터 로드\n+  useEffect(() => {\n+    loadData();\n+  }, []);\n+\n+  // 검색 조건이 변경될 때마다 자동으로 필터링 적용\n+  useEffect(() => {\n+    handleSearch();\n+  }, [handleSearch]);\n+\n+  const loadData = async () => {\n+    setLoading(true);\n+    try {\n+      const [staffData, branchData] = await Promise.all([\n+        dbManager.getAllStaff(),\n+        dbManager.getAllBranches()\n+      ]);\n+      \n+      setAllStaff(staffData);\n+      setBranches(branchData);\n+    } catch (error) {\n+      console.error('데이터 로드 실패:', error);\n+    } finally {\n+      setLoading(false);\n+    }\n   };\n \n   const handleKeyPress = (e: React.KeyboardEvent) => {\n     if (e.key === 'Enter') {\n+      // Enter 키를 눌렀을 때는 즉시 검색 실행\n       handleSearch();\n     }\n   };\n \n@@ -275,9 +280,9 @@\n \n   const clearFilters = () => {\n     setActiveFilters([]);\n     setSearchQuery('');\n-    setFilteredStaff(allStaff);\n+    // allStaff가 변경되면 자동으로 handleSearch가 호출되므로 별도로 setFilteredStaff 호출 불필요\n   };\n \n   // 직원 row 클릭 핸들러\n   const handleStaffRowClick = (staff: Staff) => {\n@@ -293,9 +298,9 @@\n \n   // 직원 수정/삭제 후 데이터 새로고침\n   const handleStaffUpdate = async () => {\n     await loadData();\n-    handleSearch(); // 현재 검색 조건 유지\n+    // 데이터가 로드되면 자동으로 handleSearch가 호출되므로 별도로 호출 불필요\n   };\n \n   // 동적 필터 옵션 생성\n   const getFilterOptions = () => {\n"
                },
                {
                    "date": 1759907307400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,8 +199,9 @@\n       const query = searchQuery.toLowerCase().trim();\n       filtered = filtered.filter(staff =>\n         staff.id.toLowerCase().includes(query) ||\n         staff.name.toLowerCase().includes(query) ||\n+        staff.loginId.toLowerCase().includes(query) ||\n         staff.phone.includes(query) ||\n         staff.email.toLowerCase().includes(query) ||\n         staff.position.toLowerCase().includes(query) ||\n         staff.role.toLowerCase().includes(query) ||\n@@ -323,9 +324,9 @@\n             <SearchInput\n               value={searchQuery}\n               onChange={(e) => setSearchQuery(e.target.value)}\n               onKeyPress={handleKeyPress}\n-              placeholder=\"직원명, ID, 전화번호, 이메일, 직급, 직책, 지점명으로 검색...\"\n+              placeholder=\"직원명, ID, 로그인ID, 전화번호, 이메일, 직급, 직책, 지점명으로 검색...\"\n             />\n             <Button onClick={handleSearch}>검색</Button>\n             <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n               필터\n@@ -366,8 +367,9 @@\n               <Table>\n                 <TableHeader>\n                   <TableRow>\n                     <TableHeaderCell>이름</TableHeaderCell>\n+                    <TableHeaderCell>로그인ID</TableHeaderCell>\n                     <TableHeaderCell>연락처</TableHeaderCell>\n                     <TableHeaderCell>이메일</TableHeaderCell>\n                     <TableHeaderCell>지점</TableHeaderCell>\n                     <TableHeaderCell>직급</TableHeaderCell>\n@@ -381,8 +383,9 @@\n                 <tbody>\n                   {filteredStaff.map(staff => (\n                     <TableRow key={staff.id} onClick={() => handleStaffRowClick(staff)}>\n                       <TableCell>{staff.name}</TableCell>\n+                      <TableCell>{staff.loginId}</TableCell>\n                       <TableCell>{staff.phone}</TableCell>\n                       <TableCell>{staff.email}</TableCell>\n                       <TableCell>{getBranchName(staff.branchId)}</TableCell>\n                       <TableCell>{staff.position}</TableCell>\n"
                },
                {
                    "date": 1759908993719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,12 +183,54 @@\n     const branch = branches.find(b => b.id === branchId);\n     return branch ? branch.name : '알 수 없음';\n   }, [branches]);\n \n+  // 날짜 포맷팅 함수 (yy.mm.dd 형식)\n+  const formatDate = (dateValue: Date | string): string => {\n+    if (!dateValue) return '';\n+    \n+    try {\n+      const date = typeof dateValue === 'string' ? new Date(dateValue) : dateValue;\n+      \n+      // Invalid Date 체크\n+      if (isNaN(date.getTime())) return '';\n+      \n+      const year = date.getFullYear().toString().slice(-2); // 마지막 2자리\n+      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n+      const day = date.getDate().toString().padStart(2, '0');\n+      \n+      return `${year}.${month}.${day}`;\n+    } catch {\n+      return '';\n+    }\n+  };\n+\n+  // 계약기간 포맷팅 함수\n+  const formatContractPeriod = (startDate: Date | string, endDate: Date | string): string => {\n+    const formattedStart = formatDate(startDate);\n+    const formattedEnd = formatDate(endDate);\n+    \n+    if (!formattedStart) return '';\n+    \n+    // 종료일이 없거나 Invalid Date인 경우 (정규직 등)\n+    if (!formattedEnd) {\n+      return `${formattedStart} 부터`;\n+    }\n+    \n+    return `${formattedStart} ~ ${formattedEnd}`;\n+  };\n+\n   // 계약 상태 확인 함수\n   const getStaffStatus = (staff: Staff): 'active' | 'inactive' => {\n+    // 종료일이 없는 경우 (정규직 등) - 항상 활성\n+    if (!staff.contractEndDate) return 'active';\n+    \n     const now = new Date();\n     const endDate = new Date(staff.contractEndDate);\n+    \n+    // Invalid Date 체크\n+    if (isNaN(endDate.getTime())) return 'active';\n+    \n     return endDate > now ? 'active' : 'inactive';\n   };\n \n   const handleSearch = useCallback(() => {\n@@ -394,9 +436,9 @@\n                       <TableCell>\n                         <Tag>{staff.permission}</Tag>\n                       </TableCell>\n                       <TableCell>\n-                        {new Date(staff.contractStartDate).toLocaleDateString()} ~ {new Date(staff.contractEndDate).toLocaleDateString()}\n+                        {formatContractPeriod(staff.contractStartDate, staff.contractEndDate)}\n                       </TableCell>\n                       <TableCell>\n                         <Tag style={{ \n                           backgroundColor: getStaffStatus(staff) === 'active' ? '#e8f5e8' : '#ffebee',\n"
                },
                {
                    "date": 1759909121929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,8 +166,95 @@\n   text-align: center;\n   color: ${AppColors.onInput1};\n `;\n \n+const FileLink = styled.span`\n+  color: ${AppColors.primary};\n+  cursor: pointer;\n+  text-decoration: underline;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  \n+  &:hover {\n+    color: ${AppColors.secondary};\n+  }\n+`;\n+\n+const Modal = styled.div<{ $isOpen: boolean }>`\n+  position: fixed;\n+  top: 0;\n+  left: 0;\n+  width: 100%;\n+  height: 100%;\n+  background: rgba(0, 0, 0, 0.8);\n+  display: ${props => props.$isOpen ? 'flex' : 'none'};\n+  align-items: center;\n+  justify-content: center;\n+  z-index: 10000;\n+`;\n+\n+const ModalContent = styled.div`\n+  position: relative;\n+  max-width: 90vw;\n+  max-height: 90vh;\n+  background: white;\n+  border-radius: 8px;\n+  overflow: hidden;\n+`;\n+\n+const ModalHeader = styled.div`\n+  padding: 16px 20px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  background: ${AppColors.surface};\n+`;\n+\n+const ModalTitle = styled.h3`\n+  margin: 0;\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  color: ${AppColors.onSurface};\n+`;\n+\n+const CloseButton = styled.button`\n+  background: none;\n+  border: none;\n+  font-size: 24px;\n+  cursor: pointer;\n+  color: ${AppColors.onSurface};\n+  padding: 4px;\n+  \n+  &:hover {\n+    color: ${AppColors.primary};\n+  }\n+`;\n+\n+const PreviewContainer = styled.div`\n+  padding: 20px;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  min-height: 400px;\n+`;\n+\n+const PreviewImage = styled.img`\n+  max-width: 100%;\n+  max-height: 70vh;\n+  object-fit: contain;\n+`;\n+\n+const PreviewIframe = styled.iframe`\n+  width: 80vw;\n+  height: 70vh;\n+  border: none;\n+`;\n+\n+const ErrorMessage = styled.div`\n+  color: ${AppColors.error};\n+  text-align: center;\n+  padding: 40px;\n+`;\n+\n const StaffSearch: React.FC = () => {\n   const [searchQuery, setSearchQuery] = useState<string>('');\n   const [allStaff, setAllStaff] = useState<Staff[]>([]);\n   const [filteredStaff, setFilteredStaff] = useState<Staff[]>([]);\n@@ -176,8 +263,11 @@\n   const [showFilters, setShowFilters] = useState<boolean>(false);\n   const [activeFilters, setActiveFilters] = useState<string[]>([]);\n   const [selectedStaff, setSelectedStaff] = useState<Staff | null>(null);\n   const [isEditPopupOpen, setIsEditPopupOpen] = useState<boolean>(false);\n+  const [previewFile, setPreviewFile] = useState<File | null>(null);\n+  const [isPreviewOpen, setIsPreviewOpen] = useState<boolean>(false);\n+  const [previewError, setPreviewError] = useState<string>('');\n \n   // 지점명 가져오기 헬퍼 함수\n   const getBranchName = useCallback((branchId: string): string => {\n     const branch = branches.find(b => b.id === branchId);\n@@ -218,8 +308,46 @@\n     \n     return `${formattedStart} ~ ${formattedEnd}`;\n   };\n \n+  // 파일명 추출 함수\n+  const getFileName = (file: File | null): string => {\n+    if (!file) return '';\n+    return file.name;\n+  };\n+\n+  // 파일 미리보기 핸들러\n+  const handleFilePreview = (e: React.MouseEvent, file: File | null) => {\n+    e.stopPropagation(); // 행 클릭 이벤트 방지\n+    \n+    if (!file) return;\n+    \n+    setPreviewFile(file);\n+    setPreviewError('');\n+    setIsPreviewOpen(true);\n+  };\n+\n+  // 미리보기 모달 닫기\n+  const closePreview = () => {\n+    setIsPreviewOpen(false);\n+    setPreviewFile(null);\n+    setPreviewError('');\n+  };\n+\n+  // 파일 타입 확인\n+  const getFileType = (file: File): 'image' | 'pdf' | 'unknown' => {\n+    if (!file) return 'unknown';\n+    \n+    if (file.type.startsWith('image/')) return 'image';\n+    if (file.type === 'application/pdf') return 'pdf';\n+    return 'unknown';\n+  };\n+\n+  // 파일 URL 생성\n+  const getFileUrl = (file: File): string => {\n+    return URL.createObjectURL(file);\n+  };\n+\n   // 계약 상태 확인 함수\n   const getStaffStatus = (staff: Staff): 'active' | 'inactive' => {\n     // 종료일이 없는 경우 (정규직 등) - 항상 활성\n     if (!staff.contractEndDate) return 'active';\n@@ -418,8 +546,9 @@\n                     <TableHeaderCell>직책</TableHeaderCell>\n                     <TableHeaderCell>고용형태</TableHeaderCell>\n                     <TableHeaderCell>권한</TableHeaderCell>\n                     <TableHeaderCell>계약기간</TableHeaderCell>\n+                    <TableHeaderCell>계약서</TableHeaderCell>\n                     <TableHeaderCell>상태</TableHeaderCell>\n                   </TableRow>\n                 </TableHeader>\n                 <tbody>\n@@ -439,8 +568,17 @@\n                       <TableCell>\n                         {formatContractPeriod(staff.contractStartDate, staff.contractEndDate)}\n                       </TableCell>\n                       <TableCell>\n+                        {staff.contractFile ? (\n+                          <FileLink onClick={(e) => handleFilePreview(e, staff.contractFile || null)}>\n+                            {getFileName(staff.contractFile)}\n+                          </FileLink>\n+                        ) : (\n+                          <span style={{ color: AppColors.onInput1 }}>없음</span>\n+                        )}\n+                      </TableCell>\n+                      <TableCell>\n                         <Tag style={{ \n                           backgroundColor: getStaffStatus(staff) === 'active' ? '#e8f5e8' : '#ffebee',\n                           color: getStaffStatus(staff) === 'active' ? '#2e7d32' : '#c62828'\n                         }}>\n@@ -466,8 +604,53 @@\n           staff={selectedStaff}\n           onClose={handleCloseEditPopup}\n           onUpdate={handleStaffUpdate}\n         />\n+\n+        {/* 파일 미리보기 모달 */}\n+        <Modal $isOpen={isPreviewOpen}>\n+          <ModalContent>\n+            <ModalHeader>\n+              <ModalTitle>\n+                {previewFile ? getFileName(previewFile) : '파일 미리보기'}\n+              </ModalTitle>\n+              <CloseButton onClick={closePreview}>×</CloseButton>\n+            </ModalHeader>\n+            <PreviewContainer>\n+              {previewError ? (\n+                <ErrorMessage>{previewError}</ErrorMessage>\n+              ) : previewFile ? (\n+                (() => {\n+                  const fileType = getFileType(previewFile);\n+                  const fileUrl = getFileUrl(previewFile);\n+                  \n+                  switch (fileType) {\n+                    case 'image':\n+                      return (\n+                        <PreviewImage \n+                          src={fileUrl} \n+                          alt=\"계약서 미리보기\"\n+                          onError={() => setPreviewError('이미지를 불러올 수 없습니다.')}\n+                        />\n+                      );\n+                    case 'pdf':\n+                      return (\n+                        <PreviewIframe \n+                          src={fileUrl}\n+                          title=\"PDF 미리보기\"\n+                          onError={() => setPreviewError('PDF를 불러올 수 없습니다.')}\n+                        />\n+                      );\n+                    default:\n+                      return <ErrorMessage>지원하지 않는 파일 형식입니다.</ErrorMessage>;\n+                  }\n+                })()\n+              ) : (\n+                <ErrorMessage>파일을 찾을 수 없습니다.</ErrorMessage>\n+              )}\n+            </PreviewContainer>\n+          </ModalContent>\n+        </Modal>\n       </PageContainer>\n     </CMSLayout>\n   );\n };\n"
                },
                {
                    "date": 1759910414071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,683 @@\n+import React, { useState, useEffect, useCallback } from 'react';\n+import styled from 'styled-components';\n+import CMSLayout from '../../../components/CMSLayout';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n+import { SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n+import StaffEditPopup from './StaffEditPopup';\n+\n+const PageContainer = styled.div`\n+  width: 100%;\n+`;\n+\n+const SearchSection = styled.div`\n+  background: ${AppColors.surface};\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 16px;\n+  padding: 24px;\n+  margin-bottom: 24px;\n+  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n+`;\n+\n+const SearchRow = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  align-items: center;\n+  margin-bottom: 16px;\n+`;\n+\n+const SearchInput = styled.input`\n+  flex: 1;\n+  padding: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  outline: none;\n+  \n+  &:focus {\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &::placeholder {\n+    color: ${AppColors.onInput1};\n+  }\n+`;\n+\n+const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n+  padding: 12px 18px;\n+  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n+  border-radius: 8px;\n+  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n+  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  font-weight: 600;\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    opacity: 0.9;\n+  }\n+`;\n+\n+const FilterRow = styled.div<{ $visible: boolean }>`\n+  display: ${props => props.$visible ? 'flex' : 'none'};\n+  gap: 8px;\n+  flex-wrap: wrap;\n+  align-items: center;\n+`;\n+\n+const FilterLabel = styled.span`\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  color: ${AppColors.onSurface};\n+  margin-right: 8px;\n+`;\n+\n+const FilterChip = styled.button<{ $active?: boolean }>`\n+  padding: 6px 12px;\n+  border-radius: 16px;\n+  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n+  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n+  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    background: ${props => props.$active ? AppColors.primary : AppColors.primary}10;\n+  }\n+`;\n+\n+const ResultsSection = styled.div`\n+  background: ${AppColors.surface};\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 16px;\n+  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n+`;\n+\n+const ResultsHeader = styled.div`\n+  padding: 16px 20px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+`;\n+\n+const ResultsTitle = styled.h3`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  margin: 0;\n+`;\n+\n+const ResultsCount = styled.span`\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onInput1};\n+`;\n+\n+const TableContainer = styled.div`\n+  overflow-x: auto;\n+`;\n+\n+const Table = styled.table`\n+  width: 100%;\n+  border-collapse: collapse;\n+`;\n+\n+const TableHeader = styled.thead`\n+  background: ${AppColors.background};\n+`;\n+\n+const TableRow = styled.tr`\n+  cursor: pointer;\n+  \n+  &:hover td {\n+    background: ${AppColors.primary}05;\n+  }\n+  \n+  &:not(:last-child) td {\n+    border-bottom: 1px solid ${AppColors.borderLight};\n+  }\n+`;\n+\n+const TableHeaderCell = styled.th`\n+  padding: 12px 16px;\n+  text-align: left;\n+  font-weight: 600;\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  color: ${AppColors.onSurface};\n+`;\n+\n+const TableCell = styled.td`\n+  padding: 12px 16px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const Tag = styled.span`\n+  display: inline-block;\n+  padding: 4px 8px;\n+  background: ${AppColors.primary}10;\n+  color: ${AppColors.primary};\n+  border-radius: 12px;\n+  font-size: 12px;\n+  margin-right: 4px;\n+`;\n+\n+const EmptyState = styled.div`\n+  padding: 60px 20px;\n+  text-align: center;\n+  color: ${AppColors.onInput1};\n+`;\n+\n+const FileLink = styled.span`\n+  color: ${AppColors.primary};\n+  cursor: pointer;\n+  text-decoration: underline;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  \n+  &:hover {\n+    color: ${AppColors.secondary};\n+  }\n+`;\n+\n+const Modal = styled.div<{ $isOpen: boolean }>`\n+  position: fixed;\n+  top: 0;\n+  left: 0;\n+  width: 100%;\n+  height: 100%;\n+  background: rgba(0, 0, 0, 0.8);\n+  display: ${props => props.$isOpen ? 'flex' : 'none'};\n+  align-items: center;\n+  justify-content: center;\n+  z-index: 10000;\n+`;\n+\n+const ModalContent = styled.div`\n+  position: relative;\n+  max-width: 90vw;\n+  max-height: 90vh;\n+  background: white;\n+  border-radius: 8px;\n+  overflow: hidden;\n+`;\n+\n+const ModalHeader = styled.div`\n+  padding: 16px 20px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  background: ${AppColors.surface};\n+`;\n+\n+const ModalTitle = styled.h3`\n+  margin: 0;\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  color: ${AppColors.onSurface};\n+`;\n+\n+const CloseButton = styled.button`\n+  background: none;\n+  border: none;\n+  font-size: 24px;\n+  cursor: pointer;\n+  color: ${AppColors.onSurface};\n+  padding: 4px;\n+  \n+  &:hover {\n+    color: ${AppColors.primary};\n+  }\n+`;\n+\n+const PreviewContainer = styled.div`\n+  padding: 20px;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  min-height: 400px;\n+`;\n+\n+const PreviewImage = styled.img`\n+  max-width: 100%;\n+  max-height: 70vh;\n+  object-fit: contain;\n+`;\n+\n+const PreviewIframe = styled.iframe`\n+  width: 80vw;\n+  height: 70vh;\n+  border: none;\n+`;\n+\n+const ErrorMessage = styled.div`\n+  color: ${AppColors.error};\n+  text-align: center;\n+  padding: 40px;\n+`;\n+\n+const StaffSearch: React.FC = () => {\n+  const [searchQuery, setSearchQuery] = useState<string>('');\n+  const [allStaff, setAllStaff] = useState<Staff[]>([]);\n+  const [filteredStaff, setFilteredStaff] = useState<Staff[]>([]);\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [loading, setLoading] = useState<boolean>(true);\n+  const [showFilters, setShowFilters] = useState<boolean>(false);\n+  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n+  const [selectedStaff, setSelectedStaff] = useState<Staff | null>(null);\n+  const [isEditPopupOpen, setIsEditPopupOpen] = useState<boolean>(false);\n+  const [previewFile, setPreviewFile] = useState<File | null>(null);\n+  const [isPreviewOpen, setIsPreviewOpen] = useState<boolean>(false);\n+  const [previewError, setPreviewError] = useState<string>('');\n+\n+  // 시스템 관리자인지 확인하는 함수\n+  const isSystemAdmin = (staff: Staff): boolean => {\n+    return staff.loginId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n+  };\n+\n+  // 지점명 가져오기 헬퍼 함수\n+  const getBranchName = useCallback((branchId: string): string => {\n+    const branch = branches.find(b => b.id === branchId);\n+    return branch ? branch.name : '알 수 없음';\n+  }, [branches]);\n+\n+  // 날짜 포맷팅 함수 (yy.mm.dd 형식)\n+  const formatDate = (dateValue: Date | string): string => {\n+    if (!dateValue) return '';\n+    \n+    try {\n+      const date = typeof dateValue === 'string' ? new Date(dateValue) : dateValue;\n+      \n+      // Invalid Date 체크\n+      if (isNaN(date.getTime())) return '';\n+      \n+      const year = date.getFullYear().toString().slice(-2); // 마지막 2자리\n+      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n+      const day = date.getDate().toString().padStart(2, '0');\n+      \n+      return `${year}.${month}.${day}`;\n+    } catch {\n+      return '';\n+    }\n+  };\n+\n+  // 계약기간 포맷팅 함수\n+  const formatContractPeriod = (startDate: Date | string, endDate: Date | string): string => {\n+    const formattedStart = formatDate(startDate);\n+    const formattedEnd = formatDate(endDate);\n+    \n+    if (!formattedStart) return '';\n+    \n+    // 종료일이 없거나 Invalid Date인 경우 (정규직 등)\n+    if (!formattedEnd) {\n+      return `${formattedStart} 부터`;\n+    }\n+    \n+    return `${formattedStart} ~ ${formattedEnd}`;\n+  };\n+\n+  // 파일명 추출 함수\n+  const getFileName = (file: File | null): string => {\n+    if (!file) return '';\n+    return file.name;\n+  };\n+\n+  // 파일 미리보기 핸들러\n+  const handleFilePreview = (e: React.MouseEvent, file: File | null) => {\n+    e.stopPropagation(); // 행 클릭 이벤트 방지\n+    \n+    if (!file) return;\n+    \n+    setPreviewFile(file);\n+    setPreviewError('');\n+    setIsPreviewOpen(true);\n+  };\n+\n+  // 미리보기 모달 닫기\n+  const closePreview = () => {\n+    setIsPreviewOpen(false);\n+    setPreviewFile(null);\n+    setPreviewError('');\n+  };\n+\n+  // 파일 타입 확인\n+  const getFileType = (file: File): 'image' | 'pdf' | 'unknown' => {\n+    if (!file) return 'unknown';\n+    \n+    if (file.type.startsWith('image/')) return 'image';\n+    if (file.type === 'application/pdf') return 'pdf';\n+    return 'unknown';\n+  };\n+\n+  // 파일 URL 생성\n+  const getFileUrl = (file: File): string => {\n+    return URL.createObjectURL(file);\n+  };\n+\n+  // 계약 상태 확인 함수\n+  const getStaffStatus = (staff: Staff): 'active' | 'inactive' => {\n+    // 종료일이 없는 경우 (정규직 등) - 항상 활성\n+    if (!staff.contractEndDate) return 'active';\n+    \n+    const now = new Date();\n+    const endDate = new Date(staff.contractEndDate);\n+    \n+    // Invalid Date 체크\n+    if (isNaN(endDate.getTime())) return 'active';\n+    \n+    return endDate > now ? 'active' : 'inactive';\n+  };\n+\n+  const handleSearch = useCallback(() => {\n+    let filtered = allStaff;\n+    \n+    // 텍스트 검색\n+    if (searchQuery.trim()) {\n+      const query = searchQuery.toLowerCase().trim();\n+      filtered = filtered.filter(staff =>\n+        staff.id.toLowerCase().includes(query) ||\n+        staff.name.toLowerCase().includes(query) ||\n+        staff.loginId.toLowerCase().includes(query) ||\n+        staff.phone.includes(query) ||\n+        staff.email.toLowerCase().includes(query) ||\n+        staff.position.toLowerCase().includes(query) ||\n+        staff.role.toLowerCase().includes(query) ||\n+        getBranchName(staff.branchId).toLowerCase().includes(query)\n+      );\n+    }\n+    \n+    // 필터 적용\n+    if (activeFilters.length > 0) {\n+      filtered = filtered.filter(staff => {\n+        return activeFilters.some(filter => {\n+          switch (filter) {\n+            case 'MASTER':\n+              return staff.permission === 'MASTER';\n+            case 'EDITOR':\n+              return staff.permission === 'EDITOR';\n+            case 'VIEWER':\n+              return staff.permission === 'VIEWER';\n+            case '활성':\n+              return getStaffStatus(staff) === 'active';\n+            case '비활성':\n+              return getStaffStatus(staff) === 'inactive';\n+            default:\n+              // 직급, 직책, 고용형태 필터\n+              return staff.position === filter || \n+                     staff.role === filter || \n+                     staff.employmentType === filter;\n+          }\n+        });\n+      });\n+    }\n+    \n+    setFilteredStaff(filtered);\n+  }, [allStaff, searchQuery, activeFilters, getBranchName]);\n+\n+  // 컴포넌트 마운트 시 데이터 로드\n+  useEffect(() => {\n+    loadData();\n+  }, []);\n+\n+  // 검색 조건이 변경될 때마다 자동으로 필터링 적용\n+  useEffect(() => {\n+    handleSearch();\n+  }, [handleSearch]);\n+\n+  const loadData = async () => {\n+    setLoading(true);\n+    try {\n+      const [staffData, branchData] = await Promise.all([\n+        dbManager.getAllStaff(),\n+        dbManager.getAllBranches()\n+      ]);\n+      \n+      setAllStaff(staffData);\n+      setBranches(branchData);\n+    } catch (error) {\n+      console.error('데이터 로드 실패:', error);\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const handleKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter') {\n+      // Enter 키를 눌렀을 때는 즉시 검색 실행\n+      handleSearch();\n+    }\n+  };\n+\n+  const toggleFilter = (filter: string) => {\n+    setActiveFilters(prev => \n+      prev.includes(filter) \n+        ? prev.filter(f => f !== filter)\n+        : [...prev, filter]\n+    );\n+  };\n+\n+  const clearFilters = () => {\n+    setActiveFilters([]);\n+    setSearchQuery('');\n+    // allStaff가 변경되면 자동으로 handleSearch가 호출되므로 별도로 setFilteredStaff 호출 불필요\n+  };\n+\n+  // 직원 row 클릭 핸들러\n+  const handleStaffRowClick = (staff: Staff) => {\n+    setSelectedStaff(staff);\n+    setIsEditPopupOpen(true);\n+  };\n+\n+  // 팝업 닫기 핸들러\n+  const handleCloseEditPopup = () => {\n+    setIsEditPopupOpen(false);\n+    setSelectedStaff(null);\n+  };\n+\n+  // 직원 수정/삭제 후 데이터 새로고침\n+  const handleStaffUpdate = async () => {\n+    await loadData();\n+    // 데이터가 로드되면 자동으로 handleSearch가 호출되므로 별도로 호출 불필요\n+  };\n+\n+  // 동적 필터 옵션 생성\n+  const getFilterOptions = () => {\n+    const positions = Array.from(new Set(allStaff.map(staff => staff.position)));\n+    const roles = Array.from(new Set(allStaff.map(staff => staff.role)));\n+    const employmentTypes = Array.from(new Set(allStaff.map(staff => staff.employmentType)));\n+    const permissions = ['MASTER', 'EDITOR', 'VIEWER'];\n+    const statuses = ['활성', '비활성'];\n+    \n+    return [...positions, ...roles, ...employmentTypes, ...permissions, ...statuses];\n+  };\n+\n+  const filterOptions = getFilterOptions();\n+\n+  return (\n+    <CMSLayout currentPath=\"/cms/staff/search\">\n+      <PageContainer>\n+        <SearchSection>\n+          <SearchRow>\n+            <SearchInput\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+              onKeyPress={handleKeyPress}\n+              placeholder=\"직원명, ID, 로그인ID, 전화번호, 이메일, 직급, 직책, 지점명으로 검색...\"\n+            />\n+            <Button onClick={handleSearch}>검색</Button>\n+            <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n+              필터\n+            </Button>\n+            {(activeFilters.length > 0 || searchQuery) && (\n+              <Button variant=\"secondary\" onClick={clearFilters}>\n+                초기화\n+              </Button>\n+            )}\n+          </SearchRow>\n+          \n+          <FilterRow $visible={showFilters}>\n+            <FilterLabel>필터:</FilterLabel>\n+            {filterOptions.map(filter => (\n+              <FilterChip\n+                key={filter}\n+                $active={activeFilters.includes(filter)}\n+                onClick={() => toggleFilter(filter)}\n+              >\n+                {filter}\n+              </FilterChip>\n+            ))}\n+          </FilterRow>\n+        </SearchSection>\n+\n+        <ResultsSection>\n+          <ResultsHeader>\n+            <ResultsTitle>검색 결과</ResultsTitle>\n+            <ResultsCount>총 {filteredStaff.length}명</ResultsCount>\n+          </ResultsHeader>\n+\n+          {loading ? (\n+            <EmptyState>\n+              <p>데이터를 불러오는 중...</p>\n+            </EmptyState>\n+          ) : filteredStaff.length > 0 ? (\n+            <TableContainer>\n+              <Table>\n+                <TableHeader>\n+                  <TableRow>\n+                    <TableHeaderCell>이름</TableHeaderCell>\n+                    <TableHeaderCell>로그인ID</TableHeaderCell>\n+                    <TableHeaderCell>연락처</TableHeaderCell>\n+                    <TableHeaderCell>이메일</TableHeaderCell>\n+                    <TableHeaderCell>지점</TableHeaderCell>\n+                    <TableHeaderCell>직급</TableHeaderCell>\n+                    <TableHeaderCell>직책</TableHeaderCell>\n+                    <TableHeaderCell>고용형태</TableHeaderCell>\n+                    <TableHeaderCell>권한</TableHeaderCell>\n+                    <TableHeaderCell>계약기간</TableHeaderCell>\n+                    <TableHeaderCell>계약서</TableHeaderCell>\n+                    <TableHeaderCell>상태</TableHeaderCell>\n+                  </TableRow>\n+                </TableHeader>\n+                <tbody>\n+                  {filteredStaff.map(staff => (\n+                    <TableRow key={staff.id} onClick={() => handleStaffRowClick(staff)}>\n+                      <TableCell>\n+                        {staff.name}\n+                        {isSystemAdmin(staff) && (\n+                          <span style={{ \n+                            marginLeft: '8px', \n+                            color: AppColors.primary, \n+                            fontSize: '12px',\n+                            fontWeight: 'bold'\n+                          }}>\n+                            🔒 시스템관리자\n+                          </span>\n+                        )}\n+                      </TableCell>\n+                      <TableCell>{staff.loginId}</TableCell>\n+                      <TableCell>{staff.phone}</TableCell>\n+                      <TableCell>{staff.email}</TableCell>\n+                      <TableCell>{getBranchName(staff.branchId)}</TableCell>\n+                      <TableCell>{staff.position}</TableCell>\n+                      <TableCell>{staff.role}</TableCell>\n+                      <TableCell>{staff.employmentType}</TableCell>\n+                      <TableCell>\n+                        <Tag style={{\n+                          backgroundColor: isSystemAdmin(staff) ? AppColors.primary : `${AppColors.primary}10`,\n+                          color: isSystemAdmin(staff) ? AppColors.onPrimary : AppColors.primary,\n+                          fontWeight: isSystemAdmin(staff) ? 'bold' : 'normal'\n+                        }}>\n+                          {staff.permission}\n+                          {isSystemAdmin(staff) && ' 🔒'}\n+                        </Tag>\n+                      </TableCell>\n+                      <TableCell>\n+                        {formatContractPeriod(staff.contractStartDate, staff.contractEndDate)}\n+                      </TableCell>\n+                      <TableCell>\n+                        {staff.contractFile ? (\n+                          <FileLink onClick={(e) => handleFilePreview(e, staff.contractFile || null)}>\n+                            {getFileName(staff.contractFile)}\n+                          </FileLink>\n+                        ) : (\n+                          <span style={{ color: AppColors.onInput1 }}>없음</span>\n+                        )}\n+                      </TableCell>\n+                      <TableCell>\n+                        <Tag style={{ \n+                          backgroundColor: getStaffStatus(staff) === 'active' ? '#e8f5e8' : '#ffebee',\n+                          color: getStaffStatus(staff) === 'active' ? '#2e7d32' : '#c62828'\n+                        }}>\n+                          {getStaffStatus(staff) === 'active' ? '활성' : '비활성'}\n+                        </Tag>\n+                      </TableCell>\n+                    </TableRow>\n+                  ))}\n+                </tbody>\n+              </Table>\n+            </TableContainer>\n+          ) : (\n+            <EmptyState>\n+              <p>검색 결과가 없습니다.</p>\n+              <p>다른 검색어를 시도해보세요.</p>\n+            </EmptyState>\n+          )}\n+        </ResultsSection>\n+\n+        {/* 직원 수정/삭제 팝업 */}\n+        <StaffEditPopup\n+          isOpen={isEditPopupOpen}\n+          staff={selectedStaff}\n+          onClose={handleCloseEditPopup}\n+          onUpdate={handleStaffUpdate}\n+        />\n+\n+        {/* 파일 미리보기 모달 */}\n+        <Modal $isOpen={isPreviewOpen}>\n+          <ModalContent>\n+            <ModalHeader>\n+              <ModalTitle>\n+                {previewFile ? getFileName(previewFile) : '파일 미리보기'}\n+              </ModalTitle>\n+              <CloseButton onClick={closePreview}>×</CloseButton>\n+            </ModalHeader>\n+            <PreviewContainer>\n+              {previewError ? (\n+                <ErrorMessage>{previewError}</ErrorMessage>\n+              ) : previewFile ? (\n+                (() => {\n+                  const fileType = getFileType(previewFile);\n+                  const fileUrl = getFileUrl(previewFile);\n+                  \n+                  switch (fileType) {\n+                    case 'image':\n+                      return (\n+                        <PreviewImage \n+                          src={fileUrl} \n+                          alt=\"계약서 미리보기\"\n+                          onError={() => setPreviewError('이미지를 불러올 수 없습니다.')}\n+                        />\n+                      );\n+                    case 'pdf':\n+                      return (\n+                        <PreviewIframe \n+                          src={fileUrl}\n+                          title=\"PDF 미리보기\"\n+                          onError={() => setPreviewError('PDF를 불러올 수 없습니다.')}\n+                        />\n+                      );\n+                    default:\n+                      return <ErrorMessage>지원하지 않는 파일 형식입니다.</ErrorMessage>;\n+                  }\n+                })()\n+              ) : (\n+                <ErrorMessage>파일을 찾을 수 없습니다.</ErrorMessage>\n+              )}\n+            </PreviewContainer>\n+          </ModalContent>\n+        </Modal>\n+      </PageContainer>\n+    </CMSLayout>\n+  );\n+};\n+\n+export default StaffSearch;\n"
                },
                {
                    "date": 1759910468708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -564,13 +564,11 @@\n                         {staff.name}\n                         {isSystemAdmin(staff) && (\n                           <span style={{ \n                             marginLeft: '8px', \n-                            color: AppColors.primary, \n-                            fontSize: '12px',\n-                            fontWeight: 'bold'\n+                            fontSize: '12px'\n                           }}>\n-                            🔒 시스템관리자\n+                            🔒\n                           </span>\n                         )}\n                       </TableCell>\n                       <TableCell>{staff.loginId}</TableCell>\n@@ -680,662 +678,4 @@\n   );\n };\n \n export default StaffSearch;\n-import React, { useState, useEffect, useCallback } from 'react';\n-import styled from 'styled-components';\n-import CMSLayout from '../../../components/CMSLayout';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n-import StaffEditPopup from './StaffEditPopup';\n-\n-const PageContainer = styled.div`\n-  width: 100%;\n-`;\n-\n-const SearchSection = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  padding: 24px;\n-  margin-bottom: 24px;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const SearchRow = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  align-items: center;\n-  margin-bottom: 16px;\n-`;\n-\n-const SearchInput = styled.input`\n-  flex: 1;\n-  padding: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  outline: none;\n-  \n-  &:focus {\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n-`;\n-\n-const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n-  padding: 12px 18px;\n-  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n-  border-radius: 8px;\n-  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n-  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  font-weight: 600;\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    opacity: 0.9;\n-  }\n-`;\n-\n-const FilterRow = styled.div<{ $visible: boolean }>`\n-  display: ${props => props.$visible ? 'flex' : 'none'};\n-  gap: 8px;\n-  flex-wrap: wrap;\n-  align-items: center;\n-`;\n-\n-const FilterLabel = styled.span`\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  color: ${AppColors.onSurface};\n-  margin-right: 8px;\n-`;\n-\n-const FilterChip = styled.button<{ $active?: boolean }>`\n-  padding: 6px 12px;\n-  border-radius: 16px;\n-  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n-  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n-  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    background: ${props => props.$active ? AppColors.primary : AppColors.primary}10;\n-  }\n-`;\n-\n-const ResultsSection = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const ResultsHeader = styled.div`\n-  padding: 16px 20px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-`;\n-\n-const ResultsTitle = styled.h3`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 600;\n-  margin: 0;\n-`;\n-\n-const ResultsCount = styled.span`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const TableContainer = styled.div`\n-  overflow-x: auto;\n-`;\n-\n-const Table = styled.table`\n-  width: 100%;\n-  border-collapse: collapse;\n-`;\n-\n-const TableHeader = styled.thead`\n-  background: ${AppColors.background};\n-`;\n-\n-const TableRow = styled.tr`\n-  cursor: pointer;\n-  \n-  &:hover td {\n-    background: ${AppColors.primary}05;\n-  }\n-  \n-  &:not(:last-child) td {\n-    border-bottom: 1px solid ${AppColors.borderLight};\n-  }\n-`;\n-\n-const TableHeaderCell = styled.th`\n-  padding: 12px 16px;\n-  text-align: left;\n-  font-weight: 600;\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  color: ${AppColors.onSurface};\n-`;\n-\n-const TableCell = styled.td`\n-  padding: 12px 16px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-`;\n-\n-const Tag = styled.span`\n-  display: inline-block;\n-  padding: 4px 8px;\n-  background: ${AppColors.primary}10;\n-  color: ${AppColors.primary};\n-  border-radius: 12px;\n-  font-size: 12px;\n-  margin-right: 4px;\n-`;\n-\n-const EmptyState = styled.div`\n-  padding: 60px 20px;\n-  text-align: center;\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const FileLink = styled.span`\n-  color: ${AppColors.primary};\n-  cursor: pointer;\n-  text-decoration: underline;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  \n-  &:hover {\n-    color: ${AppColors.secondary};\n-  }\n-`;\n-\n-const Modal = styled.div<{ $isOpen: boolean }>`\n-  position: fixed;\n-  top: 0;\n-  left: 0;\n-  width: 100%;\n-  height: 100%;\n-  background: rgba(0, 0, 0, 0.8);\n-  display: ${props => props.$isOpen ? 'flex' : 'none'};\n-  align-items: center;\n-  justify-content: center;\n-  z-index: 10000;\n-`;\n-\n-const ModalContent = styled.div`\n-  position: relative;\n-  max-width: 90vw;\n-  max-height: 90vh;\n-  background: white;\n-  border-radius: 8px;\n-  overflow: hidden;\n-`;\n-\n-const ModalHeader = styled.div`\n-  padding: 16px 20px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-  background: ${AppColors.surface};\n-`;\n-\n-const ModalTitle = styled.h3`\n-  margin: 0;\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  color: ${AppColors.onSurface};\n-`;\n-\n-const CloseButton = styled.button`\n-  background: none;\n-  border: none;\n-  font-size: 24px;\n-  cursor: pointer;\n-  color: ${AppColors.onSurface};\n-  padding: 4px;\n-  \n-  &:hover {\n-    color: ${AppColors.primary};\n-  }\n-`;\n-\n-const PreviewContainer = styled.div`\n-  padding: 20px;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  min-height: 400px;\n-`;\n-\n-const PreviewImage = styled.img`\n-  max-width: 100%;\n-  max-height: 70vh;\n-  object-fit: contain;\n-`;\n-\n-const PreviewIframe = styled.iframe`\n-  width: 80vw;\n-  height: 70vh;\n-  border: none;\n-`;\n-\n-const ErrorMessage = styled.div`\n-  color: ${AppColors.error};\n-  text-align: center;\n-  padding: 40px;\n-`;\n-\n-const StaffSearch: React.FC = () => {\n-  const [searchQuery, setSearchQuery] = useState<string>('');\n-  const [allStaff, setAllStaff] = useState<Staff[]>([]);\n-  const [filteredStaff, setFilteredStaff] = useState<Staff[]>([]);\n-  const [branches, setBranches] = useState<Branch[]>([]);\n-  const [loading, setLoading] = useState<boolean>(true);\n-  const [showFilters, setShowFilters] = useState<boolean>(false);\n-  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n-  const [selectedStaff, setSelectedStaff] = useState<Staff | null>(null);\n-  const [isEditPopupOpen, setIsEditPopupOpen] = useState<boolean>(false);\n-  const [previewFile, setPreviewFile] = useState<File | null>(null);\n-  const [isPreviewOpen, setIsPreviewOpen] = useState<boolean>(false);\n-  const [previewError, setPreviewError] = useState<string>('');\n-\n-  // 지점명 가져오기 헬퍼 함수\n-  const getBranchName = useCallback((branchId: string): string => {\n-    const branch = branches.find(b => b.id === branchId);\n-    return branch ? branch.name : '알 수 없음';\n-  }, [branches]);\n-\n-  // 날짜 포맷팅 함수 (yy.mm.dd 형식)\n-  const formatDate = (dateValue: Date | string): string => {\n-    if (!dateValue) return '';\n-    \n-    try {\n-      const date = typeof dateValue === 'string' ? new Date(dateValue) : dateValue;\n-      \n-      // Invalid Date 체크\n-      if (isNaN(date.getTime())) return '';\n-      \n-      const year = date.getFullYear().toString().slice(-2); // 마지막 2자리\n-      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n-      const day = date.getDate().toString().padStart(2, '0');\n-      \n-      return `${year}.${month}.${day}`;\n-    } catch {\n-      return '';\n-    }\n-  };\n-\n-  // 계약기간 포맷팅 함수\n-  const formatContractPeriod = (startDate: Date | string, endDate: Date | string): string => {\n-    const formattedStart = formatDate(startDate);\n-    const formattedEnd = formatDate(endDate);\n-    \n-    if (!formattedStart) return '';\n-    \n-    // 종료일이 없거나 Invalid Date인 경우 (정규직 등)\n-    if (!formattedEnd) {\n-      return `${formattedStart} 부터`;\n-    }\n-    \n-    return `${formattedStart} ~ ${formattedEnd}`;\n-  };\n-\n-  // 파일명 추출 함수\n-  const getFileName = (file: File | null): string => {\n-    if (!file) return '';\n-    return file.name;\n-  };\n-\n-  // 파일 미리보기 핸들러\n-  const handleFilePreview = (e: React.MouseEvent, file: File | null) => {\n-    e.stopPropagation(); // 행 클릭 이벤트 방지\n-    \n-    if (!file) return;\n-    \n-    setPreviewFile(file);\n-    setPreviewError('');\n-    setIsPreviewOpen(true);\n-  };\n-\n-  // 미리보기 모달 닫기\n-  const closePreview = () => {\n-    setIsPreviewOpen(false);\n-    setPreviewFile(null);\n-    setPreviewError('');\n-  };\n-\n-  // 파일 타입 확인\n-  const getFileType = (file: File): 'image' | 'pdf' | 'unknown' => {\n-    if (!file) return 'unknown';\n-    \n-    if (file.type.startsWith('image/')) return 'image';\n-    if (file.type === 'application/pdf') return 'pdf';\n-    return 'unknown';\n-  };\n-\n-  // 파일 URL 생성\n-  const getFileUrl = (file: File): string => {\n-    return URL.createObjectURL(file);\n-  };\n-\n-  // 계약 상태 확인 함수\n-  const getStaffStatus = (staff: Staff): 'active' | 'inactive' => {\n-    // 종료일이 없는 경우 (정규직 등) - 항상 활성\n-    if (!staff.contractEndDate) return 'active';\n-    \n-    const now = new Date();\n-    const endDate = new Date(staff.contractEndDate);\n-    \n-    // Invalid Date 체크\n-    if (isNaN(endDate.getTime())) return 'active';\n-    \n-    return endDate > now ? 'active' : 'inactive';\n-  };\n-\n-  const handleSearch = useCallback(() => {\n-    let filtered = allStaff;\n-    \n-    // 텍스트 검색\n-    if (searchQuery.trim()) {\n-      const query = searchQuery.toLowerCase().trim();\n-      filtered = filtered.filter(staff =>\n-        staff.id.toLowerCase().includes(query) ||\n-        staff.name.toLowerCase().includes(query) ||\n-        staff.loginId.toLowerCase().includes(query) ||\n-        staff.phone.includes(query) ||\n-        staff.email.toLowerCase().includes(query) ||\n-        staff.position.toLowerCase().includes(query) ||\n-        staff.role.toLowerCase().includes(query) ||\n-        getBranchName(staff.branchId).toLowerCase().includes(query)\n-      );\n-    }\n-    \n-    // 필터 적용\n-    if (activeFilters.length > 0) {\n-      filtered = filtered.filter(staff => {\n-        return activeFilters.some(filter => {\n-          switch (filter) {\n-            case 'MASTER':\n-              return staff.permission === 'MASTER';\n-            case 'EDITOR':\n-              return staff.permission === 'EDITOR';\n-            case 'VIEWER':\n-              return staff.permission === 'VIEWER';\n-            case '활성':\n-              return getStaffStatus(staff) === 'active';\n-            case '비활성':\n-              return getStaffStatus(staff) === 'inactive';\n-            default:\n-              // 직급, 직책, 고용형태 필터\n-              return staff.position === filter || \n-                     staff.role === filter || \n-                     staff.employmentType === filter;\n-          }\n-        });\n-      });\n-    }\n-    \n-    setFilteredStaff(filtered);\n-  }, [allStaff, searchQuery, activeFilters, getBranchName]);\n-\n-  // 컴포넌트 마운트 시 데이터 로드\n-  useEffect(() => {\n-    loadData();\n-  }, []);\n-\n-  // 검색 조건이 변경될 때마다 자동으로 필터링 적용\n-  useEffect(() => {\n-    handleSearch();\n-  }, [handleSearch]);\n-\n-  const loadData = async () => {\n-    setLoading(true);\n-    try {\n-      const [staffData, branchData] = await Promise.all([\n-        dbManager.getAllStaff(),\n-        dbManager.getAllBranches()\n-      ]);\n-      \n-      setAllStaff(staffData);\n-      setBranches(branchData);\n-    } catch (error) {\n-      console.error('데이터 로드 실패:', error);\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const handleKeyPress = (e: React.KeyboardEvent) => {\n-    if (e.key === 'Enter') {\n-      // Enter 키를 눌렀을 때는 즉시 검색 실행\n-      handleSearch();\n-    }\n-  };\n-\n-  const toggleFilter = (filter: string) => {\n-    setActiveFilters(prev => \n-      prev.includes(filter) \n-        ? prev.filter(f => f !== filter)\n-        : [...prev, filter]\n-    );\n-  };\n-\n-  const clearFilters = () => {\n-    setActiveFilters([]);\n-    setSearchQuery('');\n-    // allStaff가 변경되면 자동으로 handleSearch가 호출되므로 별도로 setFilteredStaff 호출 불필요\n-  };\n-\n-  // 직원 row 클릭 핸들러\n-  const handleStaffRowClick = (staff: Staff) => {\n-    setSelectedStaff(staff);\n-    setIsEditPopupOpen(true);\n-  };\n-\n-  // 팝업 닫기 핸들러\n-  const handleCloseEditPopup = () => {\n-    setIsEditPopupOpen(false);\n-    setSelectedStaff(null);\n-  };\n-\n-  // 직원 수정/삭제 후 데이터 새로고침\n-  const handleStaffUpdate = async () => {\n-    await loadData();\n-    // 데이터가 로드되면 자동으로 handleSearch가 호출되므로 별도로 호출 불필요\n-  };\n-\n-  // 동적 필터 옵션 생성\n-  const getFilterOptions = () => {\n-    const positions = Array.from(new Set(allStaff.map(staff => staff.position)));\n-    const roles = Array.from(new Set(allStaff.map(staff => staff.role)));\n-    const employmentTypes = Array.from(new Set(allStaff.map(staff => staff.employmentType)));\n-    const permissions = ['MASTER', 'EDITOR', 'VIEWER'];\n-    const statuses = ['활성', '비활성'];\n-    \n-    return [...positions, ...roles, ...employmentTypes, ...permissions, ...statuses];\n-  };\n-\n-  const filterOptions = getFilterOptions();\n-\n-  return (\n-    <CMSLayout currentPath=\"/cms/staff/search\">\n-      <PageContainer>\n-        <SearchSection>\n-          <SearchRow>\n-            <SearchInput\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-              onKeyPress={handleKeyPress}\n-              placeholder=\"직원명, ID, 로그인ID, 전화번호, 이메일, 직급, 직책, 지점명으로 검색...\"\n-            />\n-            <Button onClick={handleSearch}>검색</Button>\n-            <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n-              필터\n-            </Button>\n-            {(activeFilters.length > 0 || searchQuery) && (\n-              <Button variant=\"secondary\" onClick={clearFilters}>\n-                초기화\n-              </Button>\n-            )}\n-          </SearchRow>\n-          \n-          <FilterRow $visible={showFilters}>\n-            <FilterLabel>필터:</FilterLabel>\n-            {filterOptions.map(filter => (\n-              <FilterChip\n-                key={filter}\n-                $active={activeFilters.includes(filter)}\n-                onClick={() => toggleFilter(filter)}\n-              >\n-                {filter}\n-              </FilterChip>\n-            ))}\n-          </FilterRow>\n-        </SearchSection>\n-\n-        <ResultsSection>\n-          <ResultsHeader>\n-            <ResultsTitle>검색 결과</ResultsTitle>\n-            <ResultsCount>총 {filteredStaff.length}명</ResultsCount>\n-          </ResultsHeader>\n-\n-          {loading ? (\n-            <EmptyState>\n-              <p>데이터를 불러오는 중...</p>\n-            </EmptyState>\n-          ) : filteredStaff.length > 0 ? (\n-            <TableContainer>\n-              <Table>\n-                <TableHeader>\n-                  <TableRow>\n-                    <TableHeaderCell>이름</TableHeaderCell>\n-                    <TableHeaderCell>로그인ID</TableHeaderCell>\n-                    <TableHeaderCell>연락처</TableHeaderCell>\n-                    <TableHeaderCell>이메일</TableHeaderCell>\n-                    <TableHeaderCell>지점</TableHeaderCell>\n-                    <TableHeaderCell>직급</TableHeaderCell>\n-                    <TableHeaderCell>직책</TableHeaderCell>\n-                    <TableHeaderCell>고용형태</TableHeaderCell>\n-                    <TableHeaderCell>권한</TableHeaderCell>\n-                    <TableHeaderCell>계약기간</TableHeaderCell>\n-                    <TableHeaderCell>계약서</TableHeaderCell>\n-                    <TableHeaderCell>상태</TableHeaderCell>\n-                  </TableRow>\n-                </TableHeader>\n-                <tbody>\n-                  {filteredStaff.map(staff => (\n-                    <TableRow key={staff.id} onClick={() => handleStaffRowClick(staff)}>\n-                      <TableCell>{staff.name}</TableCell>\n-                      <TableCell>{staff.loginId}</TableCell>\n-                      <TableCell>{staff.phone}</TableCell>\n-                      <TableCell>{staff.email}</TableCell>\n-                      <TableCell>{getBranchName(staff.branchId)}</TableCell>\n-                      <TableCell>{staff.position}</TableCell>\n-                      <TableCell>{staff.role}</TableCell>\n-                      <TableCell>{staff.employmentType}</TableCell>\n-                      <TableCell>\n-                        <Tag>{staff.permission}</Tag>\n-                      </TableCell>\n-                      <TableCell>\n-                        {formatContractPeriod(staff.contractStartDate, staff.contractEndDate)}\n-                      </TableCell>\n-                      <TableCell>\n-                        {staff.contractFile ? (\n-                          <FileLink onClick={(e) => handleFilePreview(e, staff.contractFile || null)}>\n-                            {getFileName(staff.contractFile)}\n-                          </FileLink>\n-                        ) : (\n-                          <span style={{ color: AppColors.onInput1 }}>없음</span>\n-                        )}\n-                      </TableCell>\n-                      <TableCell>\n-                        <Tag style={{ \n-                          backgroundColor: getStaffStatus(staff) === 'active' ? '#e8f5e8' : '#ffebee',\n-                          color: getStaffStatus(staff) === 'active' ? '#2e7d32' : '#c62828'\n-                        }}>\n-                          {getStaffStatus(staff) === 'active' ? '활성' : '비활성'}\n-                        </Tag>\n-                      </TableCell>\n-                    </TableRow>\n-                  ))}\n-                </tbody>\n-              </Table>\n-            </TableContainer>\n-          ) : (\n-            <EmptyState>\n-              <p>검색 결과가 없습니다.</p>\n-              <p>다른 검색어를 시도해보세요.</p>\n-            </EmptyState>\n-          )}\n-        </ResultsSection>\n-\n-        {/* 직원 수정/삭제 팝업 */}\n-        <StaffEditPopup\n-          isOpen={isEditPopupOpen}\n-          staff={selectedStaff}\n-          onClose={handleCloseEditPopup}\n-          onUpdate={handleStaffUpdate}\n-        />\n-\n-        {/* 파일 미리보기 모달 */}\n-        <Modal $isOpen={isPreviewOpen}>\n-          <ModalContent>\n-            <ModalHeader>\n-              <ModalTitle>\n-                {previewFile ? getFileName(previewFile) : '파일 미리보기'}\n-              </ModalTitle>\n-              <CloseButton onClick={closePreview}>×</CloseButton>\n-            </ModalHeader>\n-            <PreviewContainer>\n-              {previewError ? (\n-                <ErrorMessage>{previewError}</ErrorMessage>\n-              ) : previewFile ? (\n-                (() => {\n-                  const fileType = getFileType(previewFile);\n-                  const fileUrl = getFileUrl(previewFile);\n-                  \n-                  switch (fileType) {\n-                    case 'image':\n-                      return (\n-                        <PreviewImage \n-                          src={fileUrl} \n-                          alt=\"계약서 미리보기\"\n-                          onError={() => setPreviewError('이미지를 불러올 수 없습니다.')}\n-                        />\n-                      );\n-                    case 'pdf':\n-                      return (\n-                        <PreviewIframe \n-                          src={fileUrl}\n-                          title=\"PDF 미리보기\"\n-                          onError={() => setPreviewError('PDF를 불러올 수 없습니다.')}\n-                        />\n-                      );\n-                    default:\n-                      return <ErrorMessage>지원하지 않는 파일 형식입니다.</ErrorMessage>;\n-                  }\n-                })()\n-              ) : (\n-                <ErrorMessage>파일을 찾을 수 없습니다.</ErrorMessage>\n-              )}\n-            </PreviewContainer>\n-          </ModalContent>\n-        </Modal>\n-      </PageContainer>\n-    </CMSLayout>\n-  );\n-};\n-\n-export default StaffSearch;\n"
                },
                {
                    "date": 1759911853276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,17 +300,23 @@\n     }\n   };\n \n   // 계약기간 포맷팅 함수\n-  const formatContractPeriod = (startDate: Date | string, endDate: Date | string): string => {\n+  const formatContractPeriod = (startDate: Date | string, endDate?: Date | string | null): string => {\n     const formattedStart = formatDate(startDate);\n-    const formattedEnd = formatDate(endDate);\n     \n     if (!formattedStart) return '';\n     \n-    // 종료일이 없거나 Invalid Date인 경우 (정규직 등)\n+    // 종료일이 없거나 null인 경우 (정규직 등)\n+    if (!endDate) {\n+      return `${formattedStart} 부터 (정규직)`;\n+    }\n+    \n+    const formattedEnd = formatDate(endDate);\n+    \n+    // 종료일이 Invalid Date인 경우\n     if (!formattedEnd) {\n-      return `${formattedStart} 부터`;\n+      return `${formattedStart} 부터 (정규직)`;\n     }\n     \n     return `${formattedStart} ~ ${formattedEnd}`;\n   };\n"
                },
                {
                    "date": 1760074449210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,8 +161,21 @@\n   font-size: 12px;\n   margin-right: 4px;\n `;\n \n+const StatusTag = styled.span<{ $clickable?: boolean }>`\n+  display: inline-block;\n+  padding: 4px 8px;\n+  border-radius: 12px;\n+  font-size: 12px;\n+  cursor: ${props => props.$clickable ? 'pointer' : 'default'};\n+  transition: opacity 0.2s;\n+  \n+  &:hover {\n+    opacity: ${props => props.$clickable ? 0.8 : 1};\n+  }\n+`;\n+\n const EmptyState = styled.div`\n   padding: 60px 20px;\n   text-align: center;\n   color: ${AppColors.onInput1};\n@@ -267,8 +280,19 @@\n   const [isEditPopupOpen, setIsEditPopupOpen] = useState<boolean>(false);\n   const [previewFile, setPreviewFile] = useState<File | null>(null);\n   const [isPreviewOpen, setIsPreviewOpen] = useState<boolean>(false);\n   const [previewError, setPreviewError] = useState<string>('');\n+  \n+  // 상태 토글 확인 모달 상태\n+  const [statusToggleModal, setStatusToggleModal] = useState<{\n+    isOpen: boolean;\n+    staff: Staff | null;\n+    newStatus: 'active' | 'inactive';\n+  }>({\n+    isOpen: false,\n+    staff: null,\n+    newStatus: 'active'\n+  });\n \n   // 시스템 관리자인지 확인하는 함수\n   const isSystemAdmin = (staff: Staff): boolean => {\n     return staff.loginId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n@@ -358,22 +382,51 @@\n   const getFileUrl = (file: File): string => {\n     return URL.createObjectURL(file);\n   };\n \n-  // 계약 상태 확인 함수\n+  // 직원 상태 확인 함수 (DB의 isActive 필드 기반)\n   const getStaffStatus = (staff: Staff): 'active' | 'inactive' => {\n-    // 종료일이 없는 경우 (정규직 등) - 항상 활성\n-    if (!staff.contractEndDate) return 'active';\n+    return staff.isActive ? 'active' : 'inactive';\n+  };\n+\n+  // 상태 토글 클릭 핸들러\n+  const handleStatusClick = (e: React.MouseEvent, staff: Staff) => {\n+    e.stopPropagation(); // 행 클릭 이벤트 방지\n     \n-    const now = new Date();\n-    const endDate = new Date(staff.contractEndDate);\n+    const currentStatus = getStaffStatus(staff);\n+    const newStatus = currentStatus === 'active' ? 'inactive' : 'active';\n     \n-    // Invalid Date 체크\n-    if (isNaN(endDate.getTime())) return 'active';\n-    \n-    return endDate > now ? 'active' : 'inactive';\n+    setStatusToggleModal({\n+      isOpen: true,\n+      staff: staff,\n+      newStatus: newStatus\n+    });\n   };\n \n+  // 상태 토글 확인\n+  const handleConfirmStatusToggle = async () => {\n+    if (!statusToggleModal.staff) return;\n+\n+    try {\n+      await dbManager.toggleStaffStatus(statusToggleModal.staff.id);\n+      await loadData(); // 데이터 새로고침\n+      setStatusToggleModal({ isOpen: false, staff: null, newStatus: 'active' });\n+    } catch (error) {\n+      console.error('상태 변경 실패:', error);\n+      if (error instanceof Error && error.message.includes('시스템 관리자')) {\n+        alert('시스템 관리자 계정의 상태는 변경할 수 없습니다.');\n+      } else {\n+        alert('상태 변경에 실패했습니다.');\n+      }\n+      setStatusToggleModal({ isOpen: false, staff: null, newStatus: 'active' });\n+    }\n+  };\n+\n+  // 상태 토글 취소\n+  const handleCancelStatusToggle = () => {\n+    setStatusToggleModal({ isOpen: false, staff: null, newStatus: 'active' });\n+  };\n+\n   const handleSearch = useCallback(() => {\n     let filtered = allStaff;\n     \n     // 텍스트 검색\n@@ -420,9 +473,16 @@\n   }, [allStaff, searchQuery, activeFilters, getBranchName]);\n \n   // 컴포넌트 마운트 시 데이터 로드\n   useEffect(() => {\n-    loadData();\n+    const initializeData = async () => {\n+      // 기존 직원들의 isActive 필드 마이그레이션\n+      await dbManager.migrateStaffActiveStatus();\n+      // 데이터 로드\n+      await loadData();\n+    };\n+    \n+    initializeData();\n   }, []);\n \n   // 검색 조건이 변경될 때마다 자동으로 필터링 적용\n   useEffect(() => {\n@@ -606,14 +666,20 @@\n                           <span style={{ color: AppColors.onInput1 }}>없음</span>\n                         )}\n                       </TableCell>\n                       <TableCell>\n-                        <Tag style={{ \n-                          backgroundColor: getStaffStatus(staff) === 'active' ? '#e8f5e8' : '#ffebee',\n-                          color: getStaffStatus(staff) === 'active' ? '#2e7d32' : '#c62828'\n-                        }}>\n+                        <StatusTag \n+                          $clickable={!isSystemAdmin(staff)}\n+                          onClick={(e) => !isSystemAdmin(staff) && handleStatusClick(e, staff)}\n+                          style={{ \n+                            backgroundColor: getStaffStatus(staff) === 'active' ? '#e8f5e8' : '#ffebee',\n+                            color: getStaffStatus(staff) === 'active' ? '#2e7d32' : '#c62828'\n+                          }}\n+                          title={isSystemAdmin(staff) ? \"시스템 관리자는 상태 변경 불가\" : \"클릭하여 상태 변경\"}\n+                        >\n                           {getStaffStatus(staff) === 'active' ? '활성' : '비활성'}\n-                        </Tag>\n+                          {isSystemAdmin(staff) && ' 🔒'}\n+                        </StatusTag>\n                       </TableCell>\n                     </TableRow>\n                   ))}\n                 </tbody>\n@@ -678,8 +744,71 @@\n               )}\n             </PreviewContainer>\n           </ModalContent>\n         </Modal>\n+\n+        {/* 상태 토글 확인 모달 */}\n+        <Modal $isOpen={statusToggleModal.isOpen}>\n+          <ModalContent>\n+            <ModalHeader>\n+              <ModalTitle>직원 상태 변경 확인</ModalTitle>\n+              <CloseButton onClick={handleCancelStatusToggle}>×</CloseButton>\n+            </ModalHeader>\n+            <div style={{ \n+              padding: '20px', \n+              display: 'flex', \n+              flexDirection: 'column', \n+              gap: '16px',\n+              textAlign: 'left'\n+            }}>\n+              <div style={{ \n+                fontSize: '16px', \n+                lineHeight: '1.5',\n+                color: '#333'\n+              }}>\n+                <strong>{statusToggleModal.staff?.name}</strong> 직원의 상태를{' '}\n+                <strong style={{ \n+                  color: statusToggleModal.newStatus === 'active' ? '#2e7d32' : '#c62828' \n+                }}>\n+                  {statusToggleModal.newStatus === 'active' ? '활성' : '비활성'}\n+                </strong>으로 변경하시겠습니까?\n+              </div>\n+              <div style={{ \n+                fontSize: '14px', \n+                color: '#666',\n+                backgroundColor: '#fff3cd',\n+                padding: '12px',\n+                borderRadius: '6px',\n+                border: '1px solid #ffeaa7'\n+              }}>\n+                ℹ️ {statusToggleModal.newStatus === 'active' \n+                  ? '활성화하면 해당 직원이 시스템에 로그인할 수 있습니다.' \n+                  : '비활성화하면 해당 직원이 시스템에 로그인할 수 없습니다.'}\n+              </div>\n+              <div style={{\n+                display: 'flex',\n+                gap: '12px',\n+                justifyContent: 'flex-end',\n+                marginTop: '8px'\n+              }}>\n+                <Button variant=\"secondary\" onClick={handleCancelStatusToggle}>\n+                  취소\n+                </Button>\n+                <Button \n+                  variant={statusToggleModal.newStatus === 'active' ? 'primary' : 'secondary'}\n+                  onClick={handleConfirmStatusToggle}\n+                  style={statusToggleModal.newStatus === 'inactive' ? { \n+                    backgroundColor: AppColors.error, \n+                    color: AppColors.onPrimary,\n+                    border: 'none'\n+                  } : {}}\n+                >\n+                  {statusToggleModal.newStatus === 'active' ? '활성화' : '비활성화'}\n+                </Button>\n+              </div>\n+            </div>\n+          </ModalContent>\n+        </Modal>\n       </PageContainer>\n     </CMSLayout>\n   );\n };\n"
                },
                {
                    "date": 1760076489778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,16 +331,16 @@\n     if (!formattedStart) return '';\n     \n     // 종료일이 없거나 null인 경우 (정규직 등)\n     if (!endDate) {\n-      return `${formattedStart} 부터 (정규직)`;\n+      return `${formattedStart} 부터`;\n     }\n     \n     const formattedEnd = formatDate(endDate);\n     \n     // 종료일이 Invalid Date인 경우\n     if (!formattedEnd) {\n-      return `${formattedStart} 부터 (정규직)`;\n+      return `${formattedStart} 부터`;\n     }\n     \n     return `${formattedStart} ~ ${formattedEnd}`;\n   };\n"
                },
                {
                    "date": 1760150546176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -439,8 +439,9 @@\n         staff.phone.includes(query) ||\n         staff.email.toLowerCase().includes(query) ||\n         staff.position.toLowerCase().includes(query) ||\n         staff.role.toLowerCase().includes(query) ||\n+        (staff.program && staff.program.toLowerCase().includes(query)) ||\n         getBranchName(staff.branchId).toLowerCase().includes(query)\n       );\n     }\n     \n@@ -566,9 +567,9 @@\n             <SearchInput\n               value={searchQuery}\n               onChange={(e) => setSearchQuery(e.target.value)}\n               onKeyPress={handleKeyPress}\n-              placeholder=\"직원명, ID, 로그인ID, 전화번호, 이메일, 직급, 직책, 지점명으로 검색...\"\n+              placeholder=\"직원명, ID, 로그인ID, 전화번호, 이메일, 직급, 직책, 담당프로그램, 지점명으로 검색...\"\n             />\n             <Button onClick={handleSearch}>검색</Button>\n             <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n               필터\n@@ -615,8 +616,9 @@\n                     <TableHeaderCell>이메일</TableHeaderCell>\n                     <TableHeaderCell>지점</TableHeaderCell>\n                     <TableHeaderCell>직급</TableHeaderCell>\n                     <TableHeaderCell>직책</TableHeaderCell>\n+                    <TableHeaderCell>담당프로그램</TableHeaderCell>\n                     <TableHeaderCell>고용형태</TableHeaderCell>\n                     <TableHeaderCell>권한</TableHeaderCell>\n                     <TableHeaderCell>계약기간</TableHeaderCell>\n                     <TableHeaderCell>계약서</TableHeaderCell>\n@@ -642,8 +644,15 @@\n                       <TableCell>{staff.email}</TableCell>\n                       <TableCell>{getBranchName(staff.branchId)}</TableCell>\n                       <TableCell>{staff.position}</TableCell>\n                       <TableCell>{staff.role}</TableCell>\n+                      <TableCell>\n+                        {staff.role === '코치' && staff.program ? (\n+                          <span style={{ color: AppColors.primary }}>{staff.program}</span>\n+                        ) : (\n+                          <span style={{ color: AppColors.onInput1 }}>-</span>\n+                        )}\n+                      </TableCell>\n                       <TableCell>{staff.employmentType}</TableCell>\n                       <TableCell>\n                         <Tag style={{\n                           backgroundColor: isSystemAdmin(staff) ? AppColors.primary : `${AppColors.primary}10`,\n"
                },
                {
                    "date": 1760162638435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import React, { useState, useEffect, useCallback } from 'react';\n import styled from 'styled-components';\n-import CMSLayout from '../../../components/CMSLayout';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n import { SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n@@ -559,10 +558,9 @@\n \n   const filterOptions = getFilterOptions();\n \n   return (\n-    <CMSLayout currentPath=\"/cms/staff/search\">\n-      <PageContainer>\n+    <PageContainer>\n         <SearchSection>\n           <SearchRow>\n             <SearchInput\n               value={searchQuery}\n@@ -817,9 +815,8 @@\n             </div>\n           </ModalContent>\n         </Modal>\n       </PageContainer>\n-    </CMSLayout>\n-  );\n-};\n+    );\n+  };\n \n export default StaffSearch;\n"
                },
                {
                    "date": 1761131222242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Staff, type Branch } from '../../../utils/indexedDB';\n import { SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n import StaffEditPopup from './StaffEditPopup';\n+import DataTable, { type TableColumn } from '../../../components/DataTable';\n \n const PageContainer = styled.div`\n   width: 100%;\n `;\n@@ -86,72 +87,8 @@\n     background: ${props => props.$active ? AppColors.primary : AppColors.primary}10;\n   }\n `;\n \n-const ResultsSection = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const ResultsHeader = styled.div`\n-  padding: 16px 20px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-`;\n-\n-const ResultsTitle = styled.h3`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 600;\n-  margin: 0;\n-`;\n-\n-const ResultsCount = styled.span`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const TableContainer = styled.div`\n-  overflow-x: auto;\n-`;\n-\n-const Table = styled.table`\n-  width: 100%;\n-  border-collapse: collapse;\n-`;\n-\n-const TableHeader = styled.thead`\n-  background: ${AppColors.background};\n-`;\n-\n-const TableRow = styled.tr`\n-  cursor: pointer;\n-  \n-  &:hover td {\n-    background: ${AppColors.primary}05;\n-  }\n-  \n-  &:not(:last-child) td {\n-    border-bottom: 1px solid ${AppColors.borderLight};\n-  }\n-`;\n-\n-const TableHeaderCell = styled.th`\n-  padding: 12px 16px;\n-  text-align: left;\n-  font-weight: 600;\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  color: ${AppColors.onSurface};\n-`;\n-\n-const TableCell = styled.td`\n-  padding: 12px 16px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-`;\n-\n const Tag = styled.span`\n   display: inline-block;\n   padding: 4px 8px;\n   background: ${AppColors.primary}10;\n@@ -173,14 +110,8 @@\n     opacity: ${props => props.$clickable ? 0.8 : 1};\n   }\n `;\n \n-const EmptyState = styled.div`\n-  padding: 60px 20px;\n-  text-align: center;\n-  color: ${AppColors.onInput1};\n-`;\n-\n const FileLink = styled.span`\n   color: ${AppColors.primary};\n   cursor: pointer;\n   text-decoration: underline;\n@@ -526,8 +457,134 @@\n     setSearchQuery('');\n     // allStaff가 변경되면 자동으로 handleSearch가 호출되므로 별도로 setFilteredStaff 호출 불필요\n   };\n \n+  // 테이블 컬럼 정의\n+  const columns: TableColumn<Staff>[] = [\n+    {\n+      key: 'name',\n+      title: '이름',\n+      width: '120px',\n+      render: (value, record) => (\n+        <div>\n+          {record.name}\n+          {isSystemAdmin(record) && (\n+            <span style={{ \n+              marginLeft: '8px', \n+              fontSize: '12px'\n+            }}>\n+              🔒\n+            </span>\n+          )}\n+        </div>\n+      )\n+    },\n+    {\n+      key: 'loginId',\n+      title: '로그인ID',\n+      width: '120px'\n+    },\n+    {\n+      key: 'phone',\n+      title: '연락처',\n+      width: '130px'\n+    },\n+    {\n+      key: 'email',\n+      title: '이메일',\n+      width: '180px'\n+    },\n+    {\n+      key: 'branchId',\n+      title: '지점',\n+      width: '100px',\n+      render: (value, record) => getBranchName(record.branchId)\n+    },\n+    {\n+      key: 'position',\n+      title: '직급',\n+      width: '80px'\n+    },\n+    {\n+      key: 'role',\n+      title: '직책',\n+      width: '80px'\n+    },\n+    {\n+      key: 'program',\n+      title: '담당프로그램',\n+      width: '120px',\n+      render: (value, record) => (\n+        record.role === '코치' && record.program ? (\n+          <span style={{ color: AppColors.primary }}>{record.program}</span>\n+        ) : (\n+          <span style={{ color: AppColors.onInput1 }}>-</span>\n+        )\n+      )\n+    },\n+    {\n+      key: 'employmentType',\n+      title: '고용형태',\n+      width: '100px'\n+    },\n+    {\n+      key: 'permission',\n+      title: '권한',\n+      width: '100px',\n+      render: (value, record) => (\n+        <Tag style={{\n+          backgroundColor: isSystemAdmin(record) ? AppColors.primary : `${AppColors.primary}10`,\n+          color: isSystemAdmin(record) ? AppColors.onPrimary : AppColors.primary,\n+          fontWeight: isSystemAdmin(record) ? 'bold' : 'normal'\n+        }}>\n+          {record.permission}\n+          {isSystemAdmin(record) && ' 🔒'}\n+        </Tag>\n+      )\n+    },\n+    {\n+      key: 'contractPeriod',\n+      title: '계약기간',\n+      width: '160px',\n+      render: (value, record) => \n+        formatContractPeriod(record.contractStartDate, record.contractEndDate)\n+    },\n+    {\n+      key: 'contractFile',\n+      title: '계약서',\n+      width: '120px',\n+      render: (value, record) => (\n+        record.contractFile ? (\n+          <FileLink onClick={(e) => handleFilePreview(e, record.contractFile || null)}>\n+            {getFileName(record.contractFile)}\n+          </FileLink>\n+        ) : (\n+          <span style={{ color: AppColors.onInput1 }}>없음</span>\n+        )\n+      )\n+    },\n+    {\n+      key: 'isActive',\n+      title: '상태',\n+      width: '100px',\n+      align: 'center' as const,\n+      render: (value, record) => (\n+        <StatusTag \n+          $clickable={!isSystemAdmin(record)}\n+          onClick={(e) => !isSystemAdmin(record) && handleStatusClick(e, record)}\n+          style={{ \n+            backgroundColor: getStaffStatus(record) === 'active' ? '#e8f5e8' : '#ffebee',\n+            color: getStaffStatus(record) === 'active' ? '#2e7d32' : '#c62828'\n+          }}\n+          title={isSystemAdmin(record) ? \"시스템 관리자는 상태 변경 불가\" : \"클릭하여 상태 변경\"}\n+        >\n+          {getStaffStatus(record) === 'active' ? '활성' : '비활성'}\n+          {isSystemAdmin(record) && ' 🔒'}\n+        </StatusTag>\n+      )\n+    }\n+  ];\n+\n   // 직원 row 클릭 핸들러\n   const handleStaffRowClick = (staff: Staff) => {\n     setSelectedStaff(staff);\n     setIsEditPopupOpen(true);\n@@ -592,115 +649,19 @@\n             ))}\n           </FilterRow>\n         </SearchSection>\n \n-        <ResultsSection>\n-          <ResultsHeader>\n-            <ResultsTitle>검색 결과</ResultsTitle>\n-            <ResultsCount>총 {filteredStaff.length}명</ResultsCount>\n-          </ResultsHeader>\n+        <DataTable\n+          title=\"검색 결과\"\n+          columns={columns}\n+          data={filteredStaff}\n+          loading={loading}\n+          emptyText=\"검색 결과가 없습니다.\"\n+          emptyDescription=\"다른 검색어를 시도해보세요.\"\n+          resultCount={`총 ${filteredStaff.length}명`}\n+          onRowClick={handleStaffRowClick}\n+        />\n \n-          {loading ? (\n-            <EmptyState>\n-              <p>데이터를 불러오는 중...</p>\n-            </EmptyState>\n-          ) : filteredStaff.length > 0 ? (\n-            <TableContainer>\n-              <Table>\n-                <TableHeader>\n-                  <TableRow>\n-                    <TableHeaderCell>이름</TableHeaderCell>\n-                    <TableHeaderCell>로그인ID</TableHeaderCell>\n-                    <TableHeaderCell>연락처</TableHeaderCell>\n-                    <TableHeaderCell>이메일</TableHeaderCell>\n-                    <TableHeaderCell>지점</TableHeaderCell>\n-                    <TableHeaderCell>직급</TableHeaderCell>\n-                    <TableHeaderCell>직책</TableHeaderCell>\n-                    <TableHeaderCell>담당프로그램</TableHeaderCell>\n-                    <TableHeaderCell>고용형태</TableHeaderCell>\n-                    <TableHeaderCell>권한</TableHeaderCell>\n-                    <TableHeaderCell>계약기간</TableHeaderCell>\n-                    <TableHeaderCell>계약서</TableHeaderCell>\n-                    <TableHeaderCell>상태</TableHeaderCell>\n-                  </TableRow>\n-                </TableHeader>\n-                <tbody>\n-                  {filteredStaff.map(staff => (\n-                    <TableRow key={staff.id} onClick={() => handleStaffRowClick(staff)}>\n-                      <TableCell>\n-                        {staff.name}\n-                        {isSystemAdmin(staff) && (\n-                          <span style={{ \n-                            marginLeft: '8px', \n-                            fontSize: '12px'\n-                          }}>\n-                            🔒\n-                          </span>\n-                        )}\n-                      </TableCell>\n-                      <TableCell>{staff.loginId}</TableCell>\n-                      <TableCell>{staff.phone}</TableCell>\n-                      <TableCell>{staff.email}</TableCell>\n-                      <TableCell>{getBranchName(staff.branchId)}</TableCell>\n-                      <TableCell>{staff.position}</TableCell>\n-                      <TableCell>{staff.role}</TableCell>\n-                      <TableCell>\n-                        {staff.role === '코치' && staff.program ? (\n-                          <span style={{ color: AppColors.primary }}>{staff.program}</span>\n-                        ) : (\n-                          <span style={{ color: AppColors.onInput1 }}>-</span>\n-                        )}\n-                      </TableCell>\n-                      <TableCell>{staff.employmentType}</TableCell>\n-                      <TableCell>\n-                        <Tag style={{\n-                          backgroundColor: isSystemAdmin(staff) ? AppColors.primary : `${AppColors.primary}10`,\n-                          color: isSystemAdmin(staff) ? AppColors.onPrimary : AppColors.primary,\n-                          fontWeight: isSystemAdmin(staff) ? 'bold' : 'normal'\n-                        }}>\n-                          {staff.permission}\n-                          {isSystemAdmin(staff) && ' 🔒'}\n-                        </Tag>\n-                      </TableCell>\n-                      <TableCell>\n-                        {formatContractPeriod(staff.contractStartDate, staff.contractEndDate)}\n-                      </TableCell>\n-                      <TableCell>\n-                        {staff.contractFile ? (\n-                          <FileLink onClick={(e) => handleFilePreview(e, staff.contractFile || null)}>\n-                            {getFileName(staff.contractFile)}\n-                          </FileLink>\n-                        ) : (\n-                          <span style={{ color: AppColors.onInput1 }}>없음</span>\n-                        )}\n-                      </TableCell>\n-                      <TableCell>\n-                        <StatusTag \n-                          $clickable={!isSystemAdmin(staff)}\n-                          onClick={(e) => !isSystemAdmin(staff) && handleStatusClick(e, staff)}\n-                          style={{ \n-                            backgroundColor: getStaffStatus(staff) === 'active' ? '#e8f5e8' : '#ffebee',\n-                            color: getStaffStatus(staff) === 'active' ? '#2e7d32' : '#c62828'\n-                          }}\n-                          title={isSystemAdmin(staff) ? \"시스템 관리자는 상태 변경 불가\" : \"클릭하여 상태 변경\"}\n-                        >\n-                          {getStaffStatus(staff) === 'active' ? '활성' : '비활성'}\n-                          {isSystemAdmin(staff) && ' 🔒'}\n-                        </StatusTag>\n-                      </TableCell>\n-                    </TableRow>\n-                  ))}\n-                </tbody>\n-              </Table>\n-            </TableContainer>\n-          ) : (\n-            <EmptyState>\n-              <p>검색 결과가 없습니다.</p>\n-              <p>다른 검색어를 시도해보세요.</p>\n-            </EmptyState>\n-          )}\n-        </ResultsSection>\n-\n         {/* 직원 수정/삭제 팝업 */}\n         <StaffEditPopup\n           isOpen={isEditPopupOpen}\n           staff={selectedStaff}\n"
                },
                {
                    "date": 1761131475233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -658,8 +658,14 @@\n           emptyText=\"검색 결과가 없습니다.\"\n           emptyDescription=\"다른 검색어를 시도해보세요.\"\n           resultCount={`총 ${filteredStaff.length}명`}\n           onRowClick={handleStaffRowClick}\n+          pagination={{\n+            enabled: true,\n+            pageSize: 15,\n+            pageSizeOptions: [15, 30, 100],\n+            showTotal: true\n+          }}\n         />\n \n         {/* 직원 수정/삭제 팝업 */}\n         <StaffEditPopup\n"
                },
                {
                    "date": 1761369527685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -404,16 +404,9 @@\n   }, [allStaff, searchQuery, activeFilters, getBranchName]);\n \n   // 컴포넌트 마운트 시 데이터 로드\n   useEffect(() => {\n-    const initializeData = async () => {\n-      // 기존 직원들의 isActive 필드 마이그레이션\n-      await dbManager.migrateStaffActiveStatus();\n-      // 데이터 로드\n-      await loadData();\n-    };\n-    \n-    initializeData();\n+    loadData();\n   }, []);\n \n   // 검색 조건이 변경될 때마다 자동으로 필터링 적용\n   useEffect(() => {\n"
                },
                {
                    "date": 1761369747725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -420,9 +420,14 @@\n         dbManager.getAllStaff(),\n         dbManager.getAllBranches()\n       ]);\n       \n-      setAllStaff(staffData);\n+      // 최근 등록순으로 정렬 (createdAt 내림차순)\n+      const sortedStaffData = staffData.sort((a, b) => \n+        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n+      );\n+      \n+      setAllStaff(sortedStaffData);\n       setBranches(branchData);\n     } catch (error) {\n       console.error('데이터 로드 실패:', error);\n     } finally {\n"
                }
            ],
            "date": 1759900871595,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport CMSLayout from '../../../components/CMSLayout';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\n\nconst PageContainer = styled.div`\n  width: 100%;\n`;\n\nconst SearchSection = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  padding: 24px;\n  margin-bottom: 24px;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n`;\n\nconst SearchRow = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: center;\n  margin-bottom: 16px;\n`;\n\nconst SearchInput = styled.input`\n  flex: 1;\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  outline: none;\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n  padding: 12px 18px;\n  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n  border-radius: 8px;\n  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    opacity: 0.9;\n  }\n`;\n\nconst FilterRow = styled.div<{ $visible: boolean }>`\n  display: ${props => props.$visible ? 'flex' : 'none'};\n  gap: 8px;\n  flex-wrap: wrap;\n  align-items: center;\n`;\n\nconst FilterLabel = styled.span`\n  font-size: ${AppTextStyles.label1.fontSize};\n  color: ${AppColors.onSurface};\n  margin-right: 8px;\n`;\n\nconst FilterChip = styled.button<{ $active?: boolean }>`\n  padding: 6px 12px;\n  border-radius: 16px;\n  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n  font-size: ${AppTextStyles.label2.fontSize};\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    background: ${props => props.$active ? AppColors.primary : AppColors.primary}10;\n  }\n`;\n\nconst ResultsSection = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n`;\n\nconst ResultsHeader = styled.div`\n  padding: 16px 20px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst ResultsTitle = styled.h3`\n  font-size: ${AppTextStyles.title3.fontSize};\n  font-weight: 600;\n  margin: 0;\n`;\n\nconst ResultsCount = styled.span`\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onInput1};\n`;\n\nconst TableContainer = styled.div`\n  overflow-x: auto;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nconst TableHeader = styled.thead`\n  background: ${AppColors.background};\n`;\n\nconst TableRow = styled.tr`\n  &:hover td {\n    background: ${AppColors.primary}05;\n  }\n  \n  &:not(:last-child) td {\n    border-bottom: 1px solid ${AppColors.borderLight};\n  }\n`;\n\nconst TableHeaderCell = styled.th`\n  padding: 12px 16px;\n  text-align: left;\n  font-weight: 600;\n  font-size: ${AppTextStyles.label1.fontSize};\n  color: ${AppColors.onSurface};\n`;\n\nconst TableCell = styled.td`\n  padding: 12px 16px;\n  font-size: ${AppTextStyles.body2.fontSize};\n`;\n\nconst Tag = styled.span`\n  display: inline-block;\n  padding: 4px 8px;\n  background: ${AppColors.primary}10;\n  color: ${AppColors.primary};\n  border-radius: 12px;\n  font-size: 12px;\n  margin-right: 4px;\n`;\n\nconst ActionButton = styled.button`\n  padding: 6px 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 6px;\n  background: ${AppColors.surface};\n  color: ${AppColors.primary};\n  font-size: ${AppTextStyles.label2.fontSize};\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    background: ${AppColors.primary}10;\n  }\n`;\n\nconst EmptyState = styled.div`\n  padding: 60px 20px;\n  text-align: center;\n  color: ${AppColors.onInput1};\n`;\n\ninterface Staff {\n  id: string;\n  name: string;\n  phone: string;\n  email: string;\n  position: string;\n  department: string;\n  permissions: string[];\n  startDate: string;\n  status: 'active' | 'inactive' | 'leave';\n}\n\nconst DUMMY_STAFF: Staff[] = [\n  {\n    id: \"EMP001\",\n    name: \"한수민\",\n    phone: \"010-1111-2222\",\n    email: \"han@lavida.com\",\n    position: \"코치\",\n    department: \"코칭팀\",\n    permissions: [\"회원관리\", \"운동처방\"],\n    startDate: \"2024-01-15\",\n    status: \"active\"\n  },\n  {\n    id: \"EMP002\",\n    name: \"임정현\",\n    phone: \"010-3333-4444\",\n    email: \"lim@lavida.com\",\n    position: \"매니저\",\n    department: \"운영팀\",\n    permissions: [\"회원관리\", \"예약관리\", \"결제관리\"],\n    startDate: \"2023-06-01\",\n    status: \"active\"\n  },\n  {\n    id: \"EMP003\",\n    name: \"민웅희\",\n    phone: \"010-5555-6666\",\n    email: \"min@lavida.com\",\n    position: \"코치\",\n    department: \"코칭팀\",\n    permissions: [\"회원관리\", \"운동처방\"],\n    startDate: \"2024-03-10\",\n    status: \"active\"\n  },\n  {\n    id: \"EMP004\",\n    name: \"김대표\",\n    phone: \"010-7777-8888\",\n    email: \"ceo@lavida.com\",\n    position: \"대표\",\n    department: \"운영팀\",\n    permissions: [\"회원관리\", \"예약관리\", \"운동처방\", \"결제관리\", \"설정관리\"],\n    startDate: \"2023-01-01\",\n    status: \"active\"\n  },\n];\n\nconst StaffSearch: React.FC = () => {\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [filteredStaff, setFilteredStaff] = useState<Staff[]>(DUMMY_STAFF);\n  const [showFilters, setShowFilters] = useState<boolean>(false);\n  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n\n  const handleSearch = () => {\n    let filtered = DUMMY_STAFF;\n    \n    // 텍스트 검색\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase().trim();\n      filtered = filtered.filter(staff =>\n        staff.id.toLowerCase().includes(query) ||\n        staff.name.toLowerCase().includes(query) ||\n        staff.phone.includes(query) ||\n        staff.email.toLowerCase().includes(query) ||\n        staff.position.toLowerCase().includes(query) ||\n        staff.department.toLowerCase().includes(query)\n      );\n    }\n    \n    // 필터 적용\n    if (activeFilters.length > 0) {\n      filtered = filtered.filter(staff => {\n        return activeFilters.some(filter => {\n          switch (filter) {\n            case '코치':\n              return staff.position === '코치';\n            case '매니저':\n              return staff.position === '매니저';\n            case '대표':\n              return staff.position === '대표';\n            case '운영팀':\n              return staff.department === '운영팀';\n            case '코칭팀':\n              return staff.department === '코칭팀';\n            case '활성':\n              return staff.status === 'active';\n            case '비활성':\n              return staff.status === 'inactive';\n            default:\n              return true;\n          }\n        });\n      });\n    }\n    \n    setFilteredStaff(filtered);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const toggleFilter = (filter: string) => {\n    setActiveFilters(prev => \n      prev.includes(filter) \n        ? prev.filter(f => f !== filter)\n        : [...prev, filter]\n    );\n  };\n\n  const handleStaffAction = (staffId: string, action: string) => {\n    alert(`직원 ${staffId}에 대한 ${action} 작업을 수행합니다.`);\n  };\n\n  const clearFilters = () => {\n    setActiveFilters([]);\n    setSearchQuery('');\n    setFilteredStaff(DUMMY_STAFF);\n  };\n\n  const filterOptions = ['코치', '매니저', '대표', '운영팀', '코칭팀', '활성', '비활성'];\n\n  return (\n    <CMSLayout currentPath=\"/cms/staff/search\">\n      <PageContainer>\n        <SearchSection>\n          <SearchRow>\n            <SearchInput\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"직원명, ID, 전화번호, 이메일, 직급, 부서로 검색...\"\n            />\n            <Button onClick={handleSearch}>검색</Button>\n            <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n              필터\n            </Button>\n            {(activeFilters.length > 0 || searchQuery) && (\n              <Button variant=\"secondary\" onClick={clearFilters}>\n                초기화\n              </Button>\n            )}\n          </SearchRow>\n          \n          <FilterRow $visible={showFilters}>\n            <FilterLabel>필터:</FilterLabel>\n            {filterOptions.map(filter => (\n              <FilterChip\n                key={filter}\n                $active={activeFilters.includes(filter)}\n                onClick={() => toggleFilter(filter)}\n              >\n                {filter}\n              </FilterChip>\n            ))}\n          </FilterRow>\n        </SearchSection>\n\n        <ResultsSection>\n          <ResultsHeader>\n            <ResultsTitle>검색 결과</ResultsTitle>\n            <ResultsCount>총 {filteredStaff.length}명</ResultsCount>\n          </ResultsHeader>\n\n          {filteredStaff.length > 0 ? (\n            <TableContainer>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHeaderCell>직원ID</TableHeaderCell>\n                    <TableHeaderCell>이름</TableHeaderCell>\n                    <TableHeaderCell>연락처</TableHeaderCell>\n                    <TableHeaderCell>이메일</TableHeaderCell>\n                    <TableHeaderCell>직급</TableHeaderCell>\n                    <TableHeaderCell>부서</TableHeaderCell>\n                    <TableHeaderCell>권한</TableHeaderCell>\n                    <TableHeaderCell>입사일</TableHeaderCell>\n                    <TableHeaderCell>상태</TableHeaderCell>\n                    <TableHeaderCell>액션</TableHeaderCell>\n                  </TableRow>\n                </TableHeader>\n                <tbody>\n                  {filteredStaff.map(staff => (\n                    <TableRow key={staff.id}>\n                      <TableCell>{staff.id}</TableCell>\n                      <TableCell>{staff.name}</TableCell>\n                      <TableCell>{staff.phone}</TableCell>\n                      <TableCell>{staff.email}</TableCell>\n                      <TableCell>{staff.position}</TableCell>\n                      <TableCell>{staff.department}</TableCell>\n                      <TableCell>\n                        {staff.permissions.slice(0, 2).map(permission => (\n                          <Tag key={permission}>{permission}</Tag>\n                        ))}\n                        {staff.permissions.length > 2 && (\n                          <Tag>+{staff.permissions.length - 2}</Tag>\n                        )}\n                      </TableCell>\n                      <TableCell>{staff.startDate}</TableCell>\n                      <TableCell>\n                        <Tag style={{ \n                          backgroundColor: staff.status === 'active' ? '#e8f5e8' : '#ffebee',\n                          color: staff.status === 'active' ? '#2e7d32' : '#c62828'\n                        }}>\n                          {staff.status === 'active' ? '활성' : '비활성'}\n                        </Tag>\n                      </TableCell>\n                      <TableCell>\n                        <ActionButton onClick={() => handleStaffAction(staff.id, '상세보기')}>\n                          상세보기\n                        </ActionButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </tbody>\n              </Table>\n            </TableContainer>\n          ) : (\n            <EmptyState>\n              <p>검색 결과가 없습니다.</p>\n              <p>다른 검색어를 시도해보세요.</p>\n            </EmptyState>\n          )}\n        </ResultsSection>\n      </PageContainer>\n    </CMSLayout>\n  );\n};\n\nexport default StaffSearch;\n"
        }
    ]
}