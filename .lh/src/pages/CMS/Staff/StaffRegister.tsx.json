{
    "sourceFile": "src/pages/CMS/Staff/StaffRegister.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1759900871595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759901587721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n-import React, { useState } from 'react';\n+import React, { useState, useEffect } from 'react';\n import styled from 'styled-components';\n import CMSLayout from '../../../components/CMSLayout';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, type Branch } from '../../../utils/indexedDB';\n+import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n \n const PageContainer = styled.div`\n   width: 100%;\n   max-width: 800px;\n@@ -86,44 +88,64 @@\n     border-color: ${AppColors.primary};\n   }\n `;\n \n-const TextArea = styled.textarea`\n-  padding: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n+const FileUploadContainer = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 8px;\n+`;\n+\n+const FileUploadButton = styled.label`\n+  display: inline-flex;\n+  align-items: center;\n+  gap: 8px;\n+  padding: 12px 16px;\n+  border: 2px dashed ${AppColors.borderLight};\n   border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  outline: none;\n-  min-height: 100px;\n-  resize: vertical;\n+  background-color: ${AppColors.background};\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s;\n   \n-  &:focus {\n+  &:hover {\n     border-color: ${AppColors.primary};\n+    background-color: ${AppColors.primary}10;\n   }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n `;\n \n-const CheckboxGroup = styled.div`\n-  display: flex;\n-  flex-wrap: wrap;\n-  gap: 12px;\n+const HiddenFileInput = styled.input.attrs({ type: 'file' })`\n+  display: none;\n `;\n \n-const CheckboxLabel = styled.label`\n+const FileInfo = styled.div`\n   display: flex;\n   align-items: center;\n-  gap: 8px;\n+  justify-content: space-between;\n+  padding: 8px 12px;\n+  background-color: ${AppColors.background};\n+  border-radius: 6px;\n   font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const FileRemoveButton = styled.button`\n+  background: none;\n+  border: none;\n+  color: ${AppColors.error};\n   cursor: pointer;\n+  padding: 4px;\n+  border-radius: 4px;\n+  \n+  &:hover {\n+    background-color: ${AppColors.error}10;\n+  }\n `;\n \n-const Checkbox = styled.input.attrs({ type: 'checkbox' })`\n-  width: 18px;\n-  height: 18px;\n-  accent-color: ${AppColors.primary};\n+const ErrorMessage = styled.div`\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  margin-top: 4px;\n `;\n \n const ButtonGroup = styled.div`\n   display: flex;\n@@ -142,89 +164,203 @@\n   font-weight: 600;\n   cursor: pointer;\n   transition: all 0.2s;\n   \n-  &:hover {\n+  &:hover:not(:disabled) {\n     opacity: 0.9;\n   }\n+  \n+  &:disabled {\n+    opacity: 0.6;\n+    cursor: not-allowed;\n+  }\n `;\n \n interface StaffFormData {\n   name: string;\n   phone: string;\n   email: string;\n-  birth: string;\n-  gender: string;\n-  address: string;\n-  emergencyContact: string;\n-  emergencyPhone: string;\n-  position: string;\n-  department: string;\n-  startDate: string;\n-  salary: string;\n-  permissions: string[];\n-  notes: string;\n+  branchId: string;\n+  position: string; // 직급\n+  role: string; // 직책\n+  employmentType: string; // 고용형태\n+  permission: string; // 권한\n+  contractStartDate: string;\n+  contractEndDate: string;\n+  contractFile: File | null; // 계약서 파일\n }\n \n const StaffRegister: React.FC = () => {\n   const [formData, setFormData] = useState<StaffFormData>({\n     name: '',\n     phone: '',\n     email: '',\n-    birth: '',\n-    gender: '',\n-    address: '',\n-    emergencyContact: '',\n-    emergencyPhone: '',\n+    branchId: '',\n     position: '',\n-    department: '',\n-    startDate: '',\n-    salary: '',\n-    permissions: [],\n-    notes: '',\n+    role: '',\n+    employmentType: '',\n+    permission: '',\n+    contractStartDate: '',\n+    contractEndDate: '',\n+    contractFile: null,\n   });\n \n-  const availablePermissions = ['회원관리', '예약관리', '운동처방', '결제관리', '설정관리'];\n-  const positions = ['대표', '매니저', '코치', '인턴', '계약직'];\n-  const departments = ['운영팀', '코칭팀', '관리팀', '마케팅팀'];\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [loading, setLoading] = useState(false);\n+  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n \n-  const handleInputChange = (field: keyof StaffFormData, value: string) => {\n+  // 컴포넌트 마운트 시 지점 데이터 로드\n+  useEffect(() => {\n+    loadBranches();\n+  }, []);\n+\n+  const loadBranches = async () => {\n+    try {\n+      const branchList = await dbManager.getActiveBranches();\n+      setBranches(branchList);\n+    } catch (error) {\n+      console.error('지점 데이터 로드 실패:', error);\n+    }\n+  };\n+\n+  const handleInputChange = (field: keyof StaffFormData, value: string | File | null) => {\n     setFormData(prev => ({ ...prev, [field]: value }));\n+    // 에러 메시지 제거\n+    if (errors[field]) {\n+      setErrors(prev => ({ ...prev, [field]: '' }));\n+    }\n   };\n \n-  const handlePermissionChange = (permission: string, checked: boolean) => {\n-    setFormData(prev => ({\n-      ...prev,\n-      permissions: checked \n-        ? [...prev.permissions, permission]\n-        : prev.permissions.filter(p => p !== permission)\n-    }));\n+  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n+    const file = e.target.files?.[0] || null;\n+    \n+    if (file) {\n+      // 파일 타입 검증 (이미지 또는 PDF만 허용)\n+      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n+      if (!allowedTypes.includes(file.type)) {\n+        setErrors(prev => ({ ...prev, contractFile: '이미지(JPG, PNG) 또는 PDF 파일만 업로드 가능합니다.' }));\n+        return;\n+      }\n+      \n+      // 파일 크기 검증 (10MB 제한)\n+      if (file.size > 10 * 1024 * 1024) {\n+        setErrors(prev => ({ ...prev, contractFile: '파일 크기는 10MB 이하여야 합니다.' }));\n+        return;\n+      }\n+    }\n+    \n+    handleInputChange('contractFile', file);\n   };\n \n-  const handleSubmit = (e: React.FormEvent) => {\n+  const removeFile = () => {\n+    handleInputChange('contractFile', null);\n+    setErrors(prev => ({ ...prev, contractFile: '' }));\n+  };\n+\n+  const validateForm = (): boolean => {\n+    const newErrors: { [key: string]: string } = {};\n+    \n+    if (!formData.name.trim()) newErrors.name = '이름을 입력해주세요.';\n+    if (!formData.phone.trim()) newErrors.phone = '전화번호를 입력해주세요.';\n+    if (!formData.email.trim()) newErrors.email = '이메일을 입력해주세요.';\n+    if (!formData.branchId) newErrors.branchId = '지점을 선택해주세요.';\n+    if (!formData.position) newErrors.position = '직급을 선택해주세요.';\n+    if (!formData.role) newErrors.role = '직책을 선택해주세요.';\n+    if (!formData.employmentType) newErrors.employmentType = '고용형태를 선택해주세요.';\n+    if (!formData.permission) newErrors.permission = '권한을 선택해주세요.';\n+    if (!formData.contractStartDate) newErrors.contractStartDate = '계약시작일을 입력해주세요.';\n+    if (!formData.contractEndDate) newErrors.contractEndDate = '계약종료일을 입력해주세요.';\n+    \n+    // 이메일 형식 검증\n+    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n+    if (formData.email && !emailRegex.test(formData.email)) {\n+      newErrors.email = '올바른 이메일 형식을 입력해주세요.';\n+    }\n+    \n+    // 전화번호 형식 검증\n+    const phoneRegex = /^01[0-9]-?[0-9]{4}-?[0-9]{4}$/;\n+    if (formData.phone && !phoneRegex.test(formData.phone.replace(/-/g, ''))) {\n+      newErrors.phone = '올바른 전화번호 형식을 입력해주세요. (예: 010-1234-5678)';\n+    }\n+    \n+    // 계약 기간 검증\n+    if (formData.contractStartDate && formData.contractEndDate) {\n+      if (new Date(formData.contractStartDate) >= new Date(formData.contractEndDate)) {\n+        newErrors.contractEndDate = '계약종료일은 계약시작일보다 나중이어야 합니다.';\n+      }\n+    }\n+    \n+    setErrors(newErrors);\n+    return Object.keys(newErrors).length === 0;\n+  };\n+\n+  const handleSubmit = async (e: React.FormEvent) => {\n     e.preventDefault();\n-    console.log('직원 등록 데이터:', formData);\n-    alert('직원이 성공적으로 등록되었습니다!');\n+    \n+    if (!validateForm()) {\n+      return;\n+    }\n+    \n+    setLoading(true);\n+    \n+    try {\n+      // 이메일 중복 확인\n+      const existingStaff = await dbManager.getStaffByEmail(formData.email);\n+      if (existingStaff) {\n+        setErrors({ email: '이미 등록된 이메일입니다.' });\n+        setLoading(false);\n+        return;\n+      }\n+      \n+      const staffData = {\n+        ...formData,\n+        contractStartDate: new Date(formData.contractStartDate),\n+        contractEndDate: new Date(formData.contractEndDate),\n+      };\n+      \n+      await dbManager.addStaff(staffData);\n+      \n+      alert('직원이 성공적으로 등록되었습니다!');\n+      \n+      // 폼 초기화\n+      setFormData({\n+        name: '',\n+        phone: '',\n+        email: '',\n+        branchId: '',\n+        position: '',\n+        role: '',\n+        employmentType: '',\n+        permission: '',\n+        contractStartDate: '',\n+        contractEndDate: '',\n+        contractFile: null,\n+      });\n+      \n+    } catch (error) {\n+      console.error('직원 등록 실패:', error);\n+      alert('직원 등록에 실패했습니다. 다시 시도해주세요.');\n+    } finally {\n+      setLoading(false);\n+    }\n   };\n \n   const handleCancel = () => {\n     if (window.confirm('작성 중인 내용이 사라집니다. 정말 취소하시겠습니까?')) {\n       setFormData({\n         name: '',\n         phone: '',\n         email: '',\n-        birth: '',\n-        gender: '',\n-        address: '',\n-        emergencyContact: '',\n-        emergencyPhone: '',\n+        branchId: '',\n         position: '',\n-        department: '',\n-        startDate: '',\n-        salary: '',\n-        permissions: [],\n-        notes: '',\n+        role: '',\n+        employmentType: '',\n+        permission: '',\n+        contractStartDate: '',\n+        contractEndDate: '',\n+        contractFile: null,\n       });\n+      setErrors({});\n     }\n   };\n \n   return (\n@@ -245,19 +381,21 @@\n                   onChange={(e) => handleInputChange('name', e.target.value)}\n                   placeholder=\"홍길동\"\n                   required\n                 />\n+                {errors.name && <ErrorMessage>{errors.name}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n-                <Label>연락처 *</Label>\n+                <Label>전화번호 *</Label>\n                 <Input\n                   type=\"tel\"\n                   value={formData.phone}\n                   onChange={(e) => handleInputChange('phone', e.target.value)}\n-                  placeholder=\"010-0000-0000\"\n+                  placeholder=\"010-1234-5678\"\n                   required\n                 />\n+                {errors.phone && <ErrorMessage>{errors.phone}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n                 <Label>이메일 *</Label>\n@@ -267,29 +405,24 @@\n                   onChange={(e) => handleInputChange('email', e.target.value)}\n                   placeholder=\"example@email.com\"\n                   required\n                 />\n+                {errors.email && <ErrorMessage>{errors.email}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n-                <Label>생년월일</Label>\n-                <Input\n-                  type=\"date\"\n-                  value={formData.birth}\n-                  onChange={(e) => handleInputChange('birth', e.target.value)}\n-                />\n-              </FormField>\n-\n-              <FormField>\n-                <Label>성별</Label>\n+                <Label>지점 *</Label>\n                 <Select\n-                  value={formData.gender}\n-                  onChange={(e) => handleInputChange('gender', e.target.value)}\n+                  value={formData.branchId}\n+                  onChange={(e) => handleInputChange('branchId', e.target.value)}\n+                  required\n                 >\n-                  <option value=\"\">선택하세요</option>\n-                  <option value=\"male\">남성</option>\n-                  <option value=\"female\">여성</option>\n+                  <option value=\"\">지점을 선택하세요</option>\n+                  {branches.map(branch => (\n+                    <option key={branch.id} value={branch.id}>{branch.name}</option>\n+                  ))}\n                 </Select>\n+                {errors.branchId && <ErrorMessage>{errors.branchId}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n                 <Label>직급 *</Label>\n@@ -297,107 +430,115 @@\n                   value={formData.position}\n                   onChange={(e) => handleInputChange('position', e.target.value)}\n                   required\n                 >\n-                  <option value=\"\">선택하세요</option>\n-                  {positions.map(position => (\n+                  <option value=\"\">직급을 선택하세요</option>\n+                  {POSITIONS.map(position => (\n                     <option key={position} value={position}>{position}</option>\n                   ))}\n                 </Select>\n+                {errors.position && <ErrorMessage>{errors.position}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n-                <Label>부서</Label>\n+                <Label>직책 *</Label>\n                 <Select\n-                  value={formData.department}\n-                  onChange={(e) => handleInputChange('department', e.target.value)}\n+                  value={formData.role}\n+                  onChange={(e) => handleInputChange('role', e.target.value)}\n+                  required\n                 >\n-                  <option value=\"\">선택하세요</option>\n-                  {departments.map(department => (\n-                    <option key={department} value={department}>{department}</option>\n+                  <option value=\"\">직책을 선택하세요</option>\n+                  {ROLES.map(role => (\n+                    <option key={role} value={role}>{role}</option>\n                   ))}\n                 </Select>\n+                {errors.role && <ErrorMessage>{errors.role}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n-                <Label>입사일 *</Label>\n-                <Input\n-                  type=\"date\"\n-                  value={formData.startDate}\n-                  onChange={(e) => handleInputChange('startDate', e.target.value)}\n+                <Label>고용형태 *</Label>\n+                <Select\n+                  value={formData.employmentType}\n+                  onChange={(e) => handleInputChange('employmentType', e.target.value)}\n                   required\n-                />\n+                >\n+                  <option value=\"\">고용형태를 선택하세요</option>\n+                  {EMPLOYMENT_TYPES.map(type => (\n+                    <option key={type} value={type}>{type}</option>\n+                  ))}\n+                </Select>\n+                {errors.employmentType && <ErrorMessage>{errors.employmentType}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n-                <Label>급여</Label>\n-                <Input\n-                  type=\"number\"\n-                  value={formData.salary}\n-                  onChange={(e) => handleInputChange('salary', e.target.value)}\n-                  placeholder=\"월급여 (원)\"\n-                />\n+                <Label>권한 *</Label>\n+                <Select\n+                  value={formData.permission}\n+                  onChange={(e) => handleInputChange('permission', e.target.value)}\n+                  required\n+                >\n+                  <option value=\"\">권한을 선택하세요</option>\n+                  {PERMISSIONS.map(permission => (\n+                    <option key={permission.value} value={permission.value}>\n+                      {permission.label} - {permission.description}\n+                    </option>\n+                  ))}\n+                </Select>\n+                {errors.permission && <ErrorMessage>{errors.permission}</ErrorMessage>}\n               </FormField>\n \n-              <FormField $fullWidth>\n-                <Label>주소</Label>\n-                <Input\n-                  value={formData.address}\n-                  onChange={(e) => handleInputChange('address', e.target.value)}\n-                  placeholder=\"서울시 강남구...\"\n-                />\n-              </FormField>\n-\n               <FormField>\n-                <Label>비상연락처 (이름)</Label>\n+                <Label>계약시작일 *</Label>\n                 <Input\n-                  value={formData.emergencyContact}\n-                  onChange={(e) => handleInputChange('emergencyContact', e.target.value)}\n-                  placeholder=\"김가족\"\n+                  type=\"date\"\n+                  value={formData.contractStartDate}\n+                  onChange={(e) => handleInputChange('contractStartDate', e.target.value)}\n+                  required\n                 />\n+                {errors.contractStartDate && <ErrorMessage>{errors.contractStartDate}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n-                <Label>비상연락처 (전화번호)</Label>\n+                <Label>계약종료일 *</Label>\n                 <Input\n-                  type=\"tel\"\n-                  value={formData.emergencyPhone}\n-                  onChange={(e) => handleInputChange('emergencyPhone', e.target.value)}\n-                  placeholder=\"010-0000-0000\"\n+                  type=\"date\"\n+                  value={formData.contractEndDate}\n+                  onChange={(e) => handleInputChange('contractEndDate', e.target.value)}\n+                  required\n                 />\n+                {errors.contractEndDate && <ErrorMessage>{errors.contractEndDate}</ErrorMessage>}\n               </FormField>\n \n               <FormField $fullWidth>\n-                <Label>권한</Label>\n-                <CheckboxGroup>\n-                  {availablePermissions.map(permission => (\n-                    <CheckboxLabel key={permission}>\n-                      <Checkbox\n-                        checked={formData.permissions.includes(permission)}\n-                        onChange={(e) => handlePermissionChange(permission, e.target.checked)}\n+                <Label>계약서 첨부</Label>\n+                <FileUploadContainer>\n+                  {!formData.contractFile ? (\n+                    <FileUploadButton>\n+                      <HiddenFileInput\n+                        accept=\"image/*,application/pdf\"\n+                        onChange={handleFileChange}\n                       />\n-                      {permission}\n-                    </CheckboxLabel>\n-                  ))}\n-                </CheckboxGroup>\n+                      📎 이미지 또는 PDF 파일 선택 (최대 10MB)\n+                    </FileUploadButton>\n+                  ) : (\n+                    <FileInfo>\n+                      <span>📄 {formData.contractFile.name}</span>\n+                      <FileRemoveButton type=\"button\" onClick={removeFile}>\n+                        ✕\n+                      </FileRemoveButton>\n+                    </FileInfo>\n+                  )}\n+                  {errors.contractFile && <ErrorMessage>{errors.contractFile}</ErrorMessage>}\n+                </FileUploadContainer>\n               </FormField>\n-\n-              <FormField $fullWidth>\n-                <Label>특이사항</Label>\n-                <TextArea\n-                  value={formData.notes}\n-                  onChange={(e) => handleInputChange('notes', e.target.value)}\n-                  placeholder=\"직원에 대한 특이사항이나 주의사항을 입력하세요...\"\n-                />\n-              </FormField>\n             </FormGrid>\n \n             <ButtonGroup>\n-              <Button type=\"button\" variant=\"secondary\" onClick={handleCancel}>\n+              <Button type=\"button\" variant=\"secondary\" onClick={handleCancel} disabled={loading}>\n                 취소\n               </Button>\n-              <Button type=\"submit\">\n-                등록하기\n+              <Button type=\"submit\" disabled={loading}>\n+                {loading ? '등록 중...' : '등록하기'}\n               </Button>\n             </ButtonGroup>\n           </form>\n         </Card>\n"
                },
                {
                    "date": 1759901672422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,10 +214,17 @@\n   }, []);\n \n   const loadBranches = async () => {\n     try {\n-      const branchList = await dbManager.getActiveBranches();\n-      setBranches(branchList);\n+      // 먼저 모든 지점을 로드\n+      const allBranches = await dbManager.getAllBranches();\n+      console.log('모든 지점 목록:', allBranches);\n+      \n+      // 활성 지점만 필터링\n+      const activeBranches = allBranches.filter(branch => branch.isActive);\n+      console.log('활성 지점 목록:', activeBranches);\n+      \n+      setBranches(activeBranches);\n     } catch (error) {\n       console.error('지점 데이터 로드 실패:', error);\n     }\n   };\n@@ -409,9 +416,9 @@\n                 {errors.email && <ErrorMessage>{errors.email}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n-                <Label>지점 *</Label>\n+                <Label>지점 * (로드된 지점: {branches.length}개)</Label>\n                 <Select\n                   value={formData.branchId}\n                   onChange={(e) => handleInputChange('branchId', e.target.value)}\n                   required\n"
                },
                {
                    "date": 1759901894703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import React, { useState, useEffect } from 'react';\n import styled from 'styled-components';\n import CMSLayout from '../../../components/CMSLayout';\n+import CustomDropdown from '../../../components/CustomDropdown';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Branch } from '../../../utils/indexedDB';\n import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n@@ -60,33 +61,36 @@\n   color: ${AppColors.onSurface};\n `;\n \n const Input = styled.input`\n-  padding: 12px;\n+  min-height: 48px;\n+  padding: 14px 16px;\n   border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n+  border-radius: 12px;\n   font-size: ${AppTextStyles.body1.fontSize};\n   outline: none;\n+  background: ${AppColors.surface};\n+  color: ${AppColors.onSurface};\n+  transition: all 0.2s ease;\n   \n+  &:hover {\n+    border-color: ${AppColors.primary};\n+    box-shadow: 0 2px 8px rgba(55, 187, 214, 0.1);\n+  }\n+  \n   &:focus {\n     border-color: ${AppColors.primary};\n+    box-shadow: 0 0 0 3px rgba(55, 187, 214, 0.1);\n   }\n   \n   &::placeholder {\n     color: ${AppColors.onInput1};\n   }\n-`;\n-\n-const Select = styled.select`\n-  padding: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  outline: none;\n-  background-color: ${AppColors.surface};\n   \n-  &:focus {\n-    border-color: ${AppColors.primary};\n+  &:disabled {\n+    background-color: ${AppColors.background};\n+    color: ${AppColors.disabled};\n+    border-color: ${AppColors.borderLight};\n   }\n `;\n \n const FileUploadContainer = styled.div`\n@@ -97,21 +101,25 @@\n \n const FileUploadButton = styled.label`\n   display: inline-flex;\n   align-items: center;\n+  justify-content: center;\n   gap: 8px;\n-  padding: 12px 16px;\n+  min-height: 48px;\n+  padding: 14px 16px;\n   border: 2px dashed ${AppColors.borderLight};\n-  border-radius: 8px;\n-  background-color: ${AppColors.background};\n+  border-radius: 12px;\n+  background-color: ${AppColors.surface};\n   color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body2.fontSize};\n+  font-size: ${AppTextStyles.body1.fontSize};\n   cursor: pointer;\n-  transition: all 0.2s;\n+  transition: all 0.2s ease;\n   \n   &:hover {\n     border-color: ${AppColors.primary};\n-    background-color: ${AppColors.primary}10;\n+    background-color: ${AppColors.primary}08;\n+    color: ${AppColors.primary};\n+    box-shadow: 0 2px 8px rgba(55, 187, 214, 0.1);\n   }\n `;\n \n const HiddenFileInput = styled.input.attrs({ type: 'file' })`\n@@ -121,12 +129,15 @@\n const FileInfo = styled.div`\n   display: flex;\n   align-items: center;\n   justify-content: space-between;\n-  padding: 8px 12px;\n+  min-height: 48px;\n+  padding: 14px 16px;\n   background-color: ${AppColors.background};\n-  border-radius: 6px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 12px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n `;\n \n const FileRemoveButton = styled.button`\n   background: none;\n@@ -154,20 +165,22 @@\n   margin-top: 24px;\n `;\n \n const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n-  padding: 12px 24px;\n+  min-height: 48px;\n+  padding: 14px 24px;\n   border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n-  border-radius: 8px;\n+  border-radius: 12px;\n   background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n   color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n   font-size: ${AppTextStyles.body1.fontSize};\n   font-weight: 600;\n   cursor: pointer;\n-  transition: all 0.2s;\n+  transition: all 0.2s ease;\n   \n   &:hover:not(:disabled) {\n     opacity: 0.9;\n+    box-shadow: 0 2px 8px rgba(55, 187, 214, 0.2);\n   }\n   \n   &:disabled {\n     opacity: 0.6;\n@@ -228,8 +241,46 @@\n       console.error('지점 데이터 로드 실패:', error);\n     }\n   };\n \n+  // 드롭다운 옵션 변환 함수들\n+  const getBranchOptions = () => {\n+    return branches.map(branch => ({\n+      value: branch.id,\n+      label: branch.name,\n+      description: branch.address\n+    }));\n+  };\n+\n+  const getPositionOptions = () => {\n+    return POSITIONS.map(position => ({\n+      value: position,\n+      label: position\n+    }));\n+  };\n+\n+  const getRoleOptions = () => {\n+    return ROLES.map(role => ({\n+      value: role,\n+      label: role\n+    }));\n+  };\n+\n+  const getEmploymentTypeOptions = () => {\n+    return EMPLOYMENT_TYPES.map(type => ({\n+      value: type,\n+      label: type\n+    }));\n+  };\n+\n+  const getPermissionOptions = () => {\n+    return PERMISSIONS.map(permission => ({\n+      value: permission.value,\n+      label: permission.label,\n+      description: permission.description\n+    }));\n+  };\n+\n   const handleInputChange = (field: keyof StaffFormData, value: string | File | null) => {\n     setFormData(prev => ({ ...prev, [field]: value }));\n     // 에러 메시지 제거\n     if (errors[field]) {\n@@ -417,80 +468,68 @@\n               </FormField>\n \n               <FormField>\n                 <Label>지점 * (로드된 지점: {branches.length}개)</Label>\n-                <Select\n+                <CustomDropdown\n                   value={formData.branchId}\n-                  onChange={(e) => handleInputChange('branchId', e.target.value)}\n+                  onChange={(value) => handleInputChange('branchId', value)}\n+                  options={getBranchOptions()}\n+                  placeholder=\"지점을 선택하세요\"\n+                  error={!!errors.branchId}\n                   required\n-                >\n-                  <option value=\"\">지점을 선택하세요</option>\n-                  {branches.map(branch => (\n-                    <option key={branch.id} value={branch.id}>{branch.name}</option>\n-                  ))}\n-                </Select>\n+                />\n                 {errors.branchId && <ErrorMessage>{errors.branchId}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n                 <Label>직급 *</Label>\n-                <Select\n+                <CustomDropdown\n                   value={formData.position}\n-                  onChange={(e) => handleInputChange('position', e.target.value)}\n+                  onChange={(value) => handleInputChange('position', value)}\n+                  options={getPositionOptions()}\n+                  placeholder=\"직급을 선택하세요\"\n+                  error={!!errors.position}\n                   required\n-                >\n-                  <option value=\"\">직급을 선택하세요</option>\n-                  {POSITIONS.map(position => (\n-                    <option key={position} value={position}>{position}</option>\n-                  ))}\n-                </Select>\n+                />\n                 {errors.position && <ErrorMessage>{errors.position}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n                 <Label>직책 *</Label>\n-                <Select\n+                <CustomDropdown\n                   value={formData.role}\n-                  onChange={(e) => handleInputChange('role', e.target.value)}\n+                  onChange={(value) => handleInputChange('role', value)}\n+                  options={getRoleOptions()}\n+                  placeholder=\"직책을 선택하세요\"\n+                  error={!!errors.role}\n                   required\n-                >\n-                  <option value=\"\">직책을 선택하세요</option>\n-                  {ROLES.map(role => (\n-                    <option key={role} value={role}>{role}</option>\n-                  ))}\n-                </Select>\n+                />\n                 {errors.role && <ErrorMessage>{errors.role}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n                 <Label>고용형태 *</Label>\n-                <Select\n+                <CustomDropdown\n                   value={formData.employmentType}\n-                  onChange={(e) => handleInputChange('employmentType', e.target.value)}\n+                  onChange={(value) => handleInputChange('employmentType', value)}\n+                  options={getEmploymentTypeOptions()}\n+                  placeholder=\"고용형태를 선택하세요\"\n+                  error={!!errors.employmentType}\n                   required\n-                >\n-                  <option value=\"\">고용형태를 선택하세요</option>\n-                  {EMPLOYMENT_TYPES.map(type => (\n-                    <option key={type} value={type}>{type}</option>\n-                  ))}\n-                </Select>\n+                />\n                 {errors.employmentType && <ErrorMessage>{errors.employmentType}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n                 <Label>권한 *</Label>\n-                <Select\n+                <CustomDropdown\n                   value={formData.permission}\n-                  onChange={(e) => handleInputChange('permission', e.target.value)}\n+                  onChange={(value) => handleInputChange('permission', value)}\n+                  options={getPermissionOptions()}\n+                  placeholder=\"권한을 선택하세요\"\n+                  error={!!errors.permission}\n                   required\n-                >\n-                  <option value=\"\">권한을 선택하세요</option>\n-                  {PERMISSIONS.map(permission => (\n-                    <option key={permission.value} value={permission.value}>\n-                      {permission.label} - {permission.description}\n-                    </option>\n-                  ))}\n-                </Select>\n+                />\n                 {errors.permission && <ErrorMessage>{errors.permission}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n"
                },
                {
                    "date": 1759901956223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,17 +61,18 @@\n   color: ${AppColors.onSurface};\n `;\n \n const Input = styled.input`\n-  min-height: 48px;\n-  padding: 14px 16px;\n+  height: 48px;\n+  padding: 0 16px;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 12px;\n   font-size: ${AppTextStyles.body1.fontSize};\n   outline: none;\n   background: ${AppColors.surface};\n   color: ${AppColors.onSurface};\n   transition: all 0.2s ease;\n+  box-sizing: border-box;\n   \n   &:hover {\n     border-color: ${AppColors.primary};\n     box-shadow: 0 2px 8px rgba(55, 187, 214, 0.1);\n"
                },
                {
                    "date": 1759902049201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import React, { useState, useEffect } from 'react';\n import styled from 'styled-components';\n import CMSLayout from '../../../components/CMSLayout';\n import CustomDropdown from '../../../components/CustomDropdown';\n+import CustomDateInput from '../../../components/CustomDateInput';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Branch } from '../../../utils/indexedDB';\n import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n@@ -534,23 +535,25 @@\n               </FormField>\n \n               <FormField>\n                 <Label>계약시작일 *</Label>\n-                <Input\n-                  type=\"date\"\n+                <CustomDateInput\n                   value={formData.contractStartDate}\n-                  onChange={(e) => handleInputChange('contractStartDate', e.target.value)}\n+                  onChange={(value) => handleInputChange('contractStartDate', value)}\n+                  placeholder=\"계약시작일을 선택하세요\"\n+                  error={!!errors.contractStartDate}\n                   required\n                 />\n                 {errors.contractStartDate && <ErrorMessage>{errors.contractStartDate}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n                 <Label>계약종료일 *</Label>\n-                <Input\n-                  type=\"date\"\n+                <CustomDateInput\n                   value={formData.contractEndDate}\n-                  onChange={(e) => handleInputChange('contractEndDate', e.target.value)}\n+                  onChange={(value) => handleInputChange('contractEndDate', value)}\n+                  placeholder=\"계약종료일을 선택하세요\"\n+                  error={!!errors.contractEndDate}\n                   required\n                 />\n                 {errors.contractEndDate && <ErrorMessage>{errors.contractEndDate}</ErrorMessage>}\n               </FormField>\n"
                },
                {
                    "date": 1759902161366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,15 +282,45 @@\n     }));\n   };\n \n   const handleInputChange = (field: keyof StaffFormData, value: string | File | null) => {\n-    setFormData(prev => ({ ...prev, [field]: value }));\n+    // 전화번호 필드인 경우 자동 포맷팅\n+    if (field === 'phone' && typeof value === 'string') {\n+      const formattedPhone = formatPhoneNumber(value);\n+      setFormData(prev => ({ ...prev, [field]: formattedPhone }));\n+    } else {\n+      setFormData(prev => ({ ...prev, [field]: value }));\n+    }\n+    \n     // 에러 메시지 제거\n     if (errors[field]) {\n       setErrors(prev => ({ ...prev, [field]: '' }));\n     }\n   };\n \n+  // 전화번호 자동 포맷팅 함수\n+  const formatPhoneNumber = (value: string): string => {\n+    // 숫자만 추출\n+    const numbers = value.replace(/[^\\d]/g, '');\n+    \n+    // 11자리를 초과하면 잘라내기\n+    const truncated = numbers.slice(0, 11);\n+    \n+    // 01로 시작하지 않으면 그대로 반환 (유효성 검사에서 걸러짐)\n+    if (truncated.length > 0 && !truncated.startsWith('01')) {\n+      return truncated;\n+    }\n+    \n+    // 자동 하이픈 추가\n+    if (truncated.length <= 3) {\n+      return truncated;\n+    } else if (truncated.length <= 7) {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3)}`;\n+    } else {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3, 7)}-${truncated.slice(7)}`;\n+    }\n+  };\n+\n   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n     const file = e.target.files?.[0] || null;\n     \n     if (file) {\n@@ -335,12 +365,19 @@\n     if (formData.email && !emailRegex.test(formData.email)) {\n       newErrors.email = '올바른 이메일 형식을 입력해주세요.';\n     }\n     \n-    // 전화번호 형식 검증\n-    const phoneRegex = /^01[0-9]-?[0-9]{4}-?[0-9]{4}$/;\n-    if (formData.phone && !phoneRegex.test(formData.phone.replace(/-/g, ''))) {\n-      newErrors.phone = '올바른 전화번호 형식을 입력해주세요. (예: 010-1234-5678)';\n+    // 전화번호 형식 검증 - 01로 시작하는 11자리\n+    if (formData.phone) {\n+      const phoneNumbers = formData.phone.replace(/[^\\d]/g, ''); // 숫자만 추출\n+      \n+      if (phoneNumbers.length !== 11) {\n+        newErrors.phone = '전화번호는 11자리여야 합니다.';\n+      } else if (!phoneNumbers.startsWith('01')) {\n+        newErrors.phone = '전화번호는 01로 시작해야 합니다.';\n+      } else if (!/^01[0-9]/.test(phoneNumbers)) {\n+        newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010, 011, 016, 017, 018, 019)';\n+      }\n     }\n     \n     // 계약 기간 검증\n     if (formData.contractStartDate && formData.contractEndDate) {\n@@ -445,14 +482,15 @@\n                 {errors.name && <ErrorMessage>{errors.name}</ErrorMessage>}\n               </FormField>\n \n               <FormField>\n-                <Label>전화번호 *</Label>\n+                <Label>전화번호 * (01로 시작하는 11자리)</Label>\n                 <Input\n                   type=\"tel\"\n                   value={formData.phone}\n                   onChange={(e) => handleInputChange('phone', e.target.value)}\n                   placeholder=\"010-1234-5678\"\n+                  maxLength={13}\n                   required\n                 />\n                 {errors.phone && <ErrorMessage>{errors.phone}</ErrorMessage>}\n               </FormField>\n"
                },
                {
                    "date": 1759902230903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,14 +368,15 @@\n     \n     // 전화번호 형식 검증 - 01로 시작하는 11자리\n     if (formData.phone) {\n       const phoneNumbers = formData.phone.replace(/[^\\d]/g, ''); // 숫자만 추출\n+      console.log('전화번호 검증:', phoneNumbers);\n       \n       if (phoneNumbers.length !== 11) {\n         newErrors.phone = '전화번호는 11자리여야 합니다.';\n       } else if (!phoneNumbers.startsWith('01')) {\n         newErrors.phone = '전화번호는 01로 시작해야 합니다.';\n-      } else if (!/^01[0-9]/.test(phoneNumbers)) {\n+      } else if (!/^01[016789][0-9]{8}$/.test(phoneNumbers)) {\n         newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010, 011, 016, 017, 018, 019)';\n       }\n     }\n     \n"
                },
                {
                    "date": 1759902368924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,8 +346,9 @@\n     setErrors(prev => ({ ...prev, contractFile: '' }));\n   };\n \n   const validateForm = (): boolean => {\n+    console.log('validateForm 시작, formData:', formData);\n     const newErrors: { [key: string]: string } = {};\n     \n     if (!formData.name.trim()) newErrors.name = '이름을 입력해주세요.';\n     if (!formData.phone.trim()) newErrors.phone = '전화번호를 입력해주세요.';\n@@ -368,15 +369,18 @@\n     \n     // 전화번호 형식 검증 - 01로 시작하는 11자리\n     if (formData.phone) {\n       const phoneNumbers = formData.phone.replace(/[^\\d]/g, ''); // 숫자만 추출\n-      console.log('전화번호 검증:', phoneNumbers);\n+      console.log('전화번호 검증:', phoneNumbers, '길이:', phoneNumbers.length);\n       \n       if (phoneNumbers.length !== 11) {\n+        console.log('길이 체크 실패');\n         newErrors.phone = '전화번호는 11자리여야 합니다.';\n       } else if (!phoneNumbers.startsWith('01')) {\n+        console.log('01 시작 체크 실패');\n         newErrors.phone = '전화번호는 01로 시작해야 합니다.';\n       } else if (!/^01[016789][0-9]{8}$/.test(phoneNumbers)) {\n+        console.log('정규표현식 체크 실패');\n         newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010, 011, 016, 017, 018, 019)';\n       }\n     }\n     \n@@ -386,8 +390,9 @@\n         newErrors.contractEndDate = '계약종료일은 계약시작일보다 나중이어야 합니다.';\n       }\n     }\n     \n+    console.log('검증 에러:', newErrors);\n     setErrors(newErrors);\n     return Object.keys(newErrors).length === 0;\n   };\n \n"
                },
                {
                    "date": 1759902375404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -487,9 +487,9 @@\n                 />\n                 {errors.name && <ErrorMessage>{errors.name}</ErrorMessage>}\n               </FormField>\n \n-              <FormField>\n+              {/* <FormField>\n                 <Label>전화번호 * (01로 시작하는 11자리)</Label>\n                 <Input\n                   type=\"tel\"\n                   value={formData.phone}\n@@ -498,9 +498,9 @@\n                   maxLength={13}\n                   required\n                 />\n                 {errors.phone && <ErrorMessage>{errors.phone}</ErrorMessage>}\n-              </FormField>\n+              </FormField> */}\n \n               <FormField>\n                 <Label>이메일 *</Label>\n                 <Input\n"
                },
                {
                    "date": 1759902784717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,14 +304,9 @@\n     \n     // 11자리를 초과하면 잘라내기\n     const truncated = numbers.slice(0, 11);\n     \n-    // 01로 시작하지 않으면 그대로 반환 (유효성 검사에서 걸러짐)\n-    if (truncated.length > 0 && !truncated.startsWith('01')) {\n-      return truncated;\n-    }\n-    \n-    // 자동 하이픈 추가\n+    // 자동 하이픈 추가 (01로 시작하지 않아도 포맷팅은 적용)\n     if (truncated.length <= 3) {\n       return truncated;\n     } else if (truncated.length <= 7) {\n       return `${truncated.slice(0, 3)}-${truncated.slice(3)}`;\n@@ -349,10 +344,10 @@\n   const validateForm = (): boolean => {\n     console.log('validateForm 시작, formData:', formData);\n     const newErrors: { [key: string]: string } = {};\n     \n+    // 필수 필드 검증\n     if (!formData.name.trim()) newErrors.name = '이름을 입력해주세요.';\n-    if (!formData.phone.trim()) newErrors.phone = '전화번호를 입력해주세요.';\n     if (!formData.email.trim()) newErrors.email = '이메일을 입력해주세요.';\n     if (!formData.branchId) newErrors.branchId = '지점을 선택해주세요.';\n     if (!formData.position) newErrors.position = '직급을 선택해주세요.';\n     if (!formData.role) newErrors.role = '직책을 선택해주세요.';\n@@ -360,16 +355,14 @@\n     if (!formData.permission) newErrors.permission = '권한을 선택해주세요.';\n     if (!formData.contractStartDate) newErrors.contractStartDate = '계약시작일을 입력해주세요.';\n     if (!formData.contractEndDate) newErrors.contractEndDate = '계약종료일을 입력해주세요.';\n     \n-    // 이메일 형식 검증\n-    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n-    if (formData.email && !emailRegex.test(formData.email)) {\n-      newErrors.email = '올바른 이메일 형식을 입력해주세요.';\n-    }\n-    \n-    // 전화번호 형식 검증 - 01로 시작하는 11자리\n-    if (formData.phone) {\n+    // 전화번호 검증 (필수 + 형식)\n+    console.log('전화번호 검증 시작, phone:', formData.phone);\n+    if (!formData.phone.trim()) {\n+      console.log('전화번호 빈 값');\n+      newErrors.phone = '전화번호를 입력해주세요.';\n+    } else {\n       const phoneNumbers = formData.phone.replace(/[^\\d]/g, ''); // 숫자만 추출\n       console.log('전화번호 검증:', phoneNumbers, '길이:', phoneNumbers.length);\n       \n       if (phoneNumbers.length !== 11) {\n@@ -380,11 +373,19 @@\n         newErrors.phone = '전화번호는 01로 시작해야 합니다.';\n       } else if (!/^01[016789][0-9]{8}$/.test(phoneNumbers)) {\n         console.log('정규표현식 체크 실패');\n         newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010, 011, 016, 017, 018, 019)';\n+      } else {\n+        console.log('전화번호 검증 통과');\n       }\n     }\n     \n+    // 이메일 형식 검증\n+    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n+    if (formData.email && !emailRegex.test(formData.email)) {\n+      newErrors.email = '올바른 이메일 형식을 입력해주세요.';\n+    }\n+    \n     // 계약 기간 검증\n     if (formData.contractStartDate && formData.contractEndDate) {\n       if (new Date(formData.contractStartDate) >= new Date(formData.contractEndDate)) {\n         newErrors.contractEndDate = '계약종료일은 계약시작일보다 나중이어야 합니다.';\n@@ -397,13 +398,19 @@\n   };\n \n   const handleSubmit = async (e: React.FormEvent) => {\n     e.preventDefault();\n+    console.log('handleSubmit 호출됨');\n     \n-    if (!validateForm()) {\n+    const validationResult = validateForm();\n+    console.log('validation 결과:', validationResult);\n+    \n+    if (!validationResult) {\n+      console.log('validation 실패, 등록 중단');\n       return;\n     }\n     \n+    console.log('validation 통과, 등록 진행');\n     setLoading(true);\n     \n     try {\n       // 이메일 중복 확인\n@@ -474,9 +481,9 @@\n           <PageDescription>새로운 직원의 정보를 입력하여 등록합니다.</PageDescription>\n         </PageHeader>\n \n         <Card>\n-          <form onSubmit={handleSubmit}>\n+          <form onSubmit={handleSubmit} noValidate>\n             <FormGrid>\n               <FormField>\n                 <Label>이름 *</Label>\n                 <Input\n@@ -487,9 +494,9 @@\n                 />\n                 {errors.name && <ErrorMessage>{errors.name}</ErrorMessage>}\n               </FormField>\n \n-              {/* <FormField>\n+              <FormField>\n                 <Label>전화번호 * (01로 시작하는 11자리)</Label>\n                 <Input\n                   type=\"tel\"\n                   value={formData.phone}\n@@ -498,9 +505,9 @@\n                   maxLength={13}\n                   required\n                 />\n                 {errors.phone && <ErrorMessage>{errors.phone}</ErrorMessage>}\n-              </FormField> */}\n+              </FormField>\n \n               <FormField>\n                 <Label>이메일 *</Label>\n                 <Input\n"
                },
                {
                    "date": 1759902957549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,8 +281,17 @@\n       description: permission.description\n     }));\n   };\n \n+  // 날짜 범위 계산 함수들\n+  const getContractStartDateMax = (): string | undefined => {\n+    return formData.contractEndDate || undefined;\n+  };\n+\n+  const getContractEndDateMin = (): string | undefined => {\n+    return formData.contractStartDate || undefined;\n+  };\n+\n   const handleInputChange = (field: keyof StaffFormData, value: string | File | null) => {\n     // 전화번호 필드인 경우 자동 포맷팅\n     if (field === 'phone' && typeof value === 'string') {\n       const formattedPhone = formatPhoneNumber(value);\n@@ -386,9 +395,12 @@\n     }\n     \n     // 계약 기간 검증\n     if (formData.contractStartDate && formData.contractEndDate) {\n-      if (new Date(formData.contractStartDate) >= new Date(formData.contractEndDate)) {\n+      const startDate = new Date(formData.contractStartDate);\n+      const endDate = new Date(formData.contractEndDate);\n+      \n+      if (startDate >= endDate) {\n         newErrors.contractEndDate = '계약종료일은 계약시작일보다 나중이어야 합니다.';\n       }\n     }\n     \n@@ -591,8 +603,9 @@\n                   value={formData.contractStartDate}\n                   onChange={(value) => handleInputChange('contractStartDate', value)}\n                   placeholder=\"계약시작일을 선택하세요\"\n                   error={!!errors.contractStartDate}\n+                  max={getContractStartDateMax()}\n                   required\n                 />\n                 {errors.contractStartDate && <ErrorMessage>{errors.contractStartDate}</ErrorMessage>}\n               </FormField>\n@@ -603,8 +616,9 @@\n                   value={formData.contractEndDate}\n                   onChange={(value) => handleInputChange('contractEndDate', value)}\n                   placeholder=\"계약종료일을 선택하세요\"\n                   error={!!errors.contractEndDate}\n+                  min={getContractEndDateMin()}\n                   required\n                 />\n                 {errors.contractEndDate && <ErrorMessage>{errors.contractEndDate}</ErrorMessage>}\n               </FormField>\n"
                },
                {
                    "date": 1759904790154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import styled from 'styled-components';\n import CMSLayout from '../../../components/CMSLayout';\n import CustomDropdown from '../../../components/CustomDropdown';\n import CustomDateInput from '../../../components/CustomDateInput';\n+import { StaffTextField, StaffPhoneField, StaffEmailField, StaffFileUploadField } from '../../../components/StaffFormComponents';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Branch } from '../../../utils/indexedDB';\n import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n@@ -48,119 +49,8 @@\n     grid-template-columns: 1fr 1fr;\n   }\n `;\n \n-const FormField = styled.div<{ $fullWidth?: boolean }>`\n-  display: flex;\n-  flex-direction: column;\n-  gap: 8px;\n-  grid-column: ${props => props.$fullWidth ? '1 / -1' : 'auto'};\n-`;\n-\n-const Label = styled.label`\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onSurface};\n-`;\n-\n-const Input = styled.input`\n-  height: 48px;\n-  padding: 0 16px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 12px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  outline: none;\n-  background: ${AppColors.surface};\n-  color: ${AppColors.onSurface};\n-  transition: all 0.2s ease;\n-  box-sizing: border-box;\n-  \n-  &:hover {\n-    border-color: ${AppColors.primary};\n-    box-shadow: 0 2px 8px rgba(55, 187, 214, 0.1);\n-  }\n-  \n-  &:focus {\n-    border-color: ${AppColors.primary};\n-    box-shadow: 0 0 0 3px rgba(55, 187, 214, 0.1);\n-  }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n-  \n-  &:disabled {\n-    background-color: ${AppColors.background};\n-    color: ${AppColors.disabled};\n-    border-color: ${AppColors.borderLight};\n-  }\n-`;\n-\n-const FileUploadContainer = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  gap: 8px;\n-`;\n-\n-const FileUploadButton = styled.label`\n-  display: inline-flex;\n-  align-items: center;\n-  justify-content: center;\n-  gap: 8px;\n-  min-height: 48px;\n-  padding: 14px 16px;\n-  border: 2px dashed ${AppColors.borderLight};\n-  border-radius: 12px;\n-  background-color: ${AppColors.surface};\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-  \n-  &:hover {\n-    border-color: ${AppColors.primary};\n-    background-color: ${AppColors.primary}08;\n-    color: ${AppColors.primary};\n-    box-shadow: 0 2px 8px rgba(55, 187, 214, 0.1);\n-  }\n-`;\n-\n-const HiddenFileInput = styled.input.attrs({ type: 'file' })`\n-  display: none;\n-`;\n-\n-const FileInfo = styled.div`\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  min-height: 48px;\n-  padding: 14px 16px;\n-  background-color: ${AppColors.background};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 12px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${AppColors.onSurface};\n-`;\n-\n-const FileRemoveButton = styled.button`\n-  background: none;\n-  border: none;\n-  color: ${AppColors.error};\n-  cursor: pointer;\n-  padding: 4px;\n-  border-radius: 4px;\n-  \n-  &:hover {\n-    background-color: ${AppColors.error}10;\n-  }\n-`;\n-\n-const ErrorMessage = styled.div`\n-  color: ${AppColors.error};\n-  font-size: ${AppTextStyles.label3.fontSize};\n-  margin-top: 4px;\n-`;\n-\n const ButtonGroup = styled.div`\n   display: flex;\n   gap: 12px;\n   justify-content: flex-end;\n@@ -291,66 +181,32 @@\n     return formData.contractStartDate || undefined;\n   };\n \n   const handleInputChange = (field: keyof StaffFormData, value: string | File | null) => {\n-    // 전화번호 필드인 경우 자동 포맷팅\n-    if (field === 'phone' && typeof value === 'string') {\n-      const formattedPhone = formatPhoneNumber(value);\n-      setFormData(prev => ({ ...prev, [field]: formattedPhone }));\n-    } else {\n-      setFormData(prev => ({ ...prev, [field]: value }));\n-    }\n-    \n-    // 에러 메시지 제거\n-    if (errors[field]) {\n-      setErrors(prev => ({ ...prev, [field]: '' }));\n-    }\n-  };\n-\n-  // 전화번호 자동 포맷팅 함수\n-  const formatPhoneNumber = (value: string): string => {\n-    // 숫자만 추출\n-    const numbers = value.replace(/[^\\d]/g, '');\n-    \n-    // 11자리를 초과하면 잘라내기\n-    const truncated = numbers.slice(0, 11);\n-    \n-    // 자동 하이픈 추가 (01로 시작하지 않아도 포맷팅은 적용)\n-    if (truncated.length <= 3) {\n-      return truncated;\n-    } else if (truncated.length <= 7) {\n-      return `${truncated.slice(0, 3)}-${truncated.slice(3)}`;\n-    } else {\n-      return `${truncated.slice(0, 3)}-${truncated.slice(3, 7)}-${truncated.slice(7)}`;\n-    }\n-  };\n-\n-  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n-    const file = e.target.files?.[0] || null;\n-    \n-    if (file) {\n+    // 파일 업로드 필드인 경우 검증 수행\n+    if (field === 'contractFile' && value instanceof File) {\n       // 파일 타입 검증 (이미지 또는 PDF만 허용)\n       const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n-      if (!allowedTypes.includes(file.type)) {\n+      if (!allowedTypes.includes(value.type)) {\n         setErrors(prev => ({ ...prev, contractFile: '이미지(JPG, PNG) 또는 PDF 파일만 업로드 가능합니다.' }));\n         return;\n       }\n       \n       // 파일 크기 검증 (10MB 제한)\n-      if (file.size > 10 * 1024 * 1024) {\n+      if (value.size > 10 * 1024 * 1024) {\n         setErrors(prev => ({ ...prev, contractFile: '파일 크기는 10MB 이하여야 합니다.' }));\n         return;\n       }\n     }\n+\n+    setFormData(prev => ({ ...prev, [field]: value }));\n     \n-    handleInputChange('contractFile', file);\n+    // 에러 메시지 제거\n+    if (errors[field]) {\n+      setErrors(prev => ({ ...prev, [field]: '' }));\n+    }\n   };\n \n-  const removeFile = () => {\n-    handleInputChange('contractFile', null);\n-    setErrors(prev => ({ ...prev, contractFile: '' }));\n-  };\n-\n   const validateForm = (): boolean => {\n     console.log('validateForm 시작, formData:', formData);\n     const newErrors: { [key: string]: string } = {};\n     \n@@ -495,157 +351,146 @@\n \n         <Card>\n           <form onSubmit={handleSubmit} noValidate>\n             <FormGrid>\n-              <FormField>\n-                <Label>이름 *</Label>\n-                <Input\n-                  value={formData.name}\n-                  onChange={(e) => handleInputChange('name', e.target.value)}\n-                  placeholder=\"홍길동\"\n-                  required\n-                />\n-                {errors.name && <ErrorMessage>{errors.name}</ErrorMessage>}\n-              </FormField>\n+              <StaffTextField\n+                label=\"이름\"\n+                value={formData.name}\n+                onChange={(value) => handleInputChange('name', value)}\n+                placeholder=\"홍길동\"\n+                errorMessage={errors.name}\n+                required\n+              />\n \n-              <FormField>\n-                <Label>전화번호 * (01로 시작하는 11자리)</Label>\n-                <Input\n-                  type=\"tel\"\n-                  value={formData.phone}\n-                  onChange={(e) => handleInputChange('phone', e.target.value)}\n-                  placeholder=\"010-1234-5678\"\n-                  maxLength={13}\n-                  required\n-                />\n-                {errors.phone && <ErrorMessage>{errors.phone}</ErrorMessage>}\n-              </FormField>\n+              <StaffPhoneField\n+                label=\"전화번호 (01로 시작하는 11자리)\"\n+                value={formData.phone}\n+                onChange={(value) => handleInputChange('phone', value)}\n+                errorMessage={errors.phone}\n+                required\n+              />\n \n-              <FormField>\n-                <Label>이메일 *</Label>\n-                <Input\n-                  type=\"email\"\n-                  value={formData.email}\n-                  onChange={(e) => handleInputChange('email', e.target.value)}\n-                  placeholder=\"example@email.com\"\n-                  required\n-                />\n-                {errors.email && <ErrorMessage>{errors.email}</ErrorMessage>}\n-              </FormField>\n+              <StaffEmailField\n+                label=\"이메일\"\n+                value={formData.email}\n+                onChange={(value) => handleInputChange('email', value)}\n+                errorMessage={errors.email}\n+                required\n+              />\n \n-              <FormField>\n-                <Label>지점 * (로드된 지점: {branches.length}개)</Label>\n+              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n+                  지점 * (로드된 지점: {branches.length}개)\n+                </label>\n                 <CustomDropdown\n                   value={formData.branchId}\n                   onChange={(value) => handleInputChange('branchId', value)}\n                   options={getBranchOptions()}\n                   placeholder=\"지점을 선택하세요\"\n                   error={!!errors.branchId}\n                   required\n                 />\n-                {errors.branchId && <ErrorMessage>{errors.branchId}</ErrorMessage>}\n-              </FormField>\n+                {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n+              </div>\n \n-              <FormField>\n-                <Label>직급 *</Label>\n+              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n+                  직급 *\n+                </label>\n                 <CustomDropdown\n                   value={formData.position}\n                   onChange={(value) => handleInputChange('position', value)}\n                   options={getPositionOptions()}\n                   placeholder=\"직급을 선택하세요\"\n                   error={!!errors.position}\n                   required\n                 />\n-                {errors.position && <ErrorMessage>{errors.position}</ErrorMessage>}\n-              </FormField>\n+                {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n+              </div>\n \n-              <FormField>\n-                <Label>직책 *</Label>\n+              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n+                  직책 *\n+                </label>\n                 <CustomDropdown\n                   value={formData.role}\n                   onChange={(value) => handleInputChange('role', value)}\n                   options={getRoleOptions()}\n                   placeholder=\"직책을 선택하세요\"\n                   error={!!errors.role}\n                   required\n                 />\n-                {errors.role && <ErrorMessage>{errors.role}</ErrorMessage>}\n-              </FormField>\n+                {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n+              </div>\n \n-              <FormField>\n-                <Label>고용형태 *</Label>\n+              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n+                  고용형태 *\n+                </label>\n                 <CustomDropdown\n                   value={formData.employmentType}\n                   onChange={(value) => handleInputChange('employmentType', value)}\n                   options={getEmploymentTypeOptions()}\n                   placeholder=\"고용형태를 선택하세요\"\n                   error={!!errors.employmentType}\n                   required\n                 />\n-                {errors.employmentType && <ErrorMessage>{errors.employmentType}</ErrorMessage>}\n-              </FormField>\n+                {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n+              </div>\n \n-              <FormField>\n-                <Label>권한 *</Label>\n+              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n+                  권한 *\n+                </label>\n                 <CustomDropdown\n                   value={formData.permission}\n                   onChange={(value) => handleInputChange('permission', value)}\n                   options={getPermissionOptions()}\n                   placeholder=\"권한을 선택하세요\"\n                   error={!!errors.permission}\n                   required\n                 />\n-                {errors.permission && <ErrorMessage>{errors.permission}</ErrorMessage>}\n-              </FormField>\n+                {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n+              </div>\n \n-              <FormField>\n-                <Label>계약시작일 *</Label>\n+              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n+                  계약시작일 *\n+                </label>\n                 <CustomDateInput\n                   value={formData.contractStartDate}\n                   onChange={(value) => handleInputChange('contractStartDate', value)}\n                   placeholder=\"계약시작일을 선택하세요\"\n                   error={!!errors.contractStartDate}\n                   max={getContractStartDateMax()}\n                   required\n                 />\n-                {errors.contractStartDate && <ErrorMessage>{errors.contractStartDate}</ErrorMessage>}\n-              </FormField>\n+                {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n+              </div>\n \n-              <FormField>\n-                <Label>계약종료일 *</Label>\n+              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n+                  계약종료일 *\n+                </label>\n                 <CustomDateInput\n                   value={formData.contractEndDate}\n                   onChange={(value) => handleInputChange('contractEndDate', value)}\n                   placeholder=\"계약종료일을 선택하세요\"\n                   error={!!errors.contractEndDate}\n                   min={getContractEndDateMin()}\n                   required\n                 />\n-                {errors.contractEndDate && <ErrorMessage>{errors.contractEndDate}</ErrorMessage>}\n-              </FormField>\n+                {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n+              </div>\n \n-              <FormField $fullWidth>\n-                <Label>계약서 첨부</Label>\n-                <FileUploadContainer>\n-                  {!formData.contractFile ? (\n-                    <FileUploadButton>\n-                      <HiddenFileInput\n-                        accept=\"image/*,application/pdf\"\n-                        onChange={handleFileChange}\n-                      />\n-                      📎 이미지 또는 PDF 파일 선택 (최대 10MB)\n-                    </FileUploadButton>\n-                  ) : (\n-                    <FileInfo>\n-                      <span>📄 {formData.contractFile.name}</span>\n-                      <FileRemoveButton type=\"button\" onClick={removeFile}>\n-                        ✕\n-                      </FileRemoveButton>\n-                    </FileInfo>\n-                  )}\n-                  {errors.contractFile && <ErrorMessage>{errors.contractFile}</ErrorMessage>}\n-                </FileUploadContainer>\n-              </FormField>\n+              <StaffFileUploadField\n+                label=\"계약서 첨부\"\n+                value={formData.contractFile}\n+                onChange={(file) => handleInputChange('contractFile', file)}\n+                placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n+                errorMessage={errors.contractFile}\n+                fullWidth\n+              />\n             </FormGrid>\n \n             <ButtonGroup>\n               <Button type=\"button\" variant=\"secondary\" onClick={handleCancel} disabled={loading}>\n"
                },
                {
                    "date": 1759905296481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,575 @@\n+import React, { useState, useEffect } from 'react';\n+import styled from 'styled-components';\n+import CMSLayout from '../../../components/CMSLayout';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import CustomDateInput from '../../../components/CustomDateInput';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, type Branch } from '../../../utils/indexedDB';\n+import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n+\n+const Label = styled.label<{ $required?: boolean }>`\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  \n+  ${({ $required }) => $required && `\n+    &::after {\n+      content: ' *';\n+      color: ${AppColors.error};\n+    }\n+  `}\n+`;\n+\n+const Input = styled.input<{ error?: boolean }>`\n+  width: 100%;\n+  padding: 12px;\n+  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n+  background-color: ${AppColors.input};\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &::placeholder {\n+    color: ${AppColors.onInput1};\n+  }\n+`;\n+\n+const FileInput = styled.input`\n+  width: 100%;\n+  padding: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n+  background-color: ${AppColors.input};\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+`;\n+\n+const PageContainer = styled.div`\n+  width: 100%;\n+  max-width: 800px;\n+  margin: 0 auto;\n+`;\n+\n+const PageHeader = styled.div`\n+  margin-bottom: 24px;\n+`;\n+\n+const PageTitle = styled.h1`\n+  font-size: ${AppTextStyles.title1.fontSize};\n+  font-weight: 700;\n+  color: ${AppColors.onBackground};\n+  margin: 0 0 8px 0;\n+`;\n+\n+const PageDescription = styled.p`\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onInput1};\n+  margin: 0;\n+`;\n+\n+const FormContainer = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 24px;\n+`;\n+\n+const FormSection = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 16px;\n+  padding: 24px;\n+  background: ${AppColors.surface};\n+  border-radius: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+`;\n+\n+const SectionTitle = styled.h2`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  margin: 0;\n+`;\n+\n+const FieldRow = styled.div`\n+  display: flex;\n+  gap: 16px;\n+`;\n+\n+const FieldColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 8px;\n+  min-width: 0;\n+`;\n+\n+const ButtonContainer = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  justify-content: flex-end;\n+  margin-top: 24px;\n+`;\n+\n+const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n+  padding: 12px 24px;\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  font-weight: 600;\n+  border: none;\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  ${({ variant = 'primary' }) => variant === 'primary' ? `\n+    background-color: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n+    \n+    &:hover {\n+      background-color: ${AppColors.buttonPrimaryHover};\n+    }\n+  ` : `\n+    background-color: ${AppColors.surface};\n+    color: ${AppColors.onSurface};\n+    border: 1px solid ${AppColors.borderLight};\n+    \n+    &:hover {\n+      background-color: ${AppColors.btnC};\n+    }\n+  `}\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+// 타입 정의\n+interface StaffFormData {\n+  name: string;\n+  phone: string;\n+  email: string;\n+  branchId: string;\n+  position: string;\n+  role: string;\n+  employmentType: string;\n+  permission: string;\n+  contractStartDate: string;\n+  contractEndDate: string;\n+  contractFile: File | null;\n+}\n+\n+interface FormErrors {\n+  [key: string]: string;\n+}\n+\n+const StaffRegister: React.FC = () => {\n+  const [formData, setFormData] = useState<StaffFormData>({\n+    name: '',\n+    phone: '',\n+    email: '',\n+    branchId: '',\n+    position: '',\n+    role: '',\n+    employmentType: '',\n+    permission: '',\n+    contractStartDate: '',\n+    contractEndDate: '',\n+    contractFile: null\n+  });\n+\n+  const [errors, setErrors] = useState<FormErrors>({});\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [isSubmitting, setIsSubmitting] = useState(false);\n+\n+  useEffect(() => {\n+    const fetchBranches = async () => {\n+      try {\n+        const branchList = await dbManager.getAllBranches();\n+        setBranches(branchList);\n+      } catch (error) {\n+        console.error('지점 목록 로드 실패:', error);\n+      }\n+    };\n+\n+    fetchBranches();\n+  }, []);\n+\n+  const handleInputChange = (field: keyof StaffFormData, value: string | File | null) => {\n+    setFormData(prev => ({\n+      ...prev,\n+      [field]: value\n+    }));\n+\n+    // 에러 초기화\n+    if (errors[field]) {\n+      setErrors(prev => {\n+        const newErrors = { ...prev };\n+        delete newErrors[field];\n+        return newErrors;\n+      });\n+    }\n+  };\n+\n+  const validateForm = (): boolean => {\n+    const newErrors: FormErrors = {};\n+\n+    // 필수 필드 검증\n+    if (!formData.name.trim()) newErrors.name = '이름은 필수입니다.';\n+    if (!formData.phone.trim()) newErrors.phone = '연락처는 필수입니다.';\n+    if (!formData.email.trim()) newErrors.email = '이메일은 필수입니다.';\n+    if (!formData.branchId) newErrors.branchId = '지점은 필수입니다.';\n+    if (!formData.position) newErrors.position = '직급은 필수입니다.';\n+    if (!formData.role) newErrors.role = '직책은 필수입니다.';\n+    if (!formData.employmentType) newErrors.employmentType = '고용형태는 필수입니다.';\n+    if (!formData.permission) newErrors.permission = '권한은 필수입니다.';\n+    if (!formData.contractStartDate) newErrors.contractStartDate = '계약시작일은 필수입니다.';\n+    if (!formData.contractEndDate) newErrors.contractEndDate = '계약종료일은 필수입니다.';\n+\n+    // 날짜 검증\n+    if (formData.contractStartDate && formData.contractEndDate) {\n+      const startDate = new Date(formData.contractStartDate);\n+      const endDate = new Date(formData.contractEndDate);\n+      \n+      if (startDate >= endDate) {\n+        newErrors.contractEndDate = '계약종료일은 계약시작일보다 늦어야 합니다.';\n+      }\n+    }\n+\n+    setErrors(newErrors);\n+    return Object.keys(newErrors).length === 0;\n+  };\n+\n+  const handleSubmit = async () => {\n+    if (!validateForm()) return;\n+\n+    setIsSubmitting(true);\n+    try {\n+      const staffData = {\n+        ...formData,\n+        id: Date.now().toString(),\n+        registrationDate: new Date().toISOString().split('T')[0],\n+        contractStartDate: new Date(formData.contractStartDate),\n+        contractEndDate: new Date(formData.contractEndDate)\n+      };\n+\n+      await dbManager.addStaff(staffData);\n+      \n+      // 성공 시 폼 초기화\n+      setFormData({\n+        name: '',\n+        phone: '',\n+        email: '',\n+        branchId: '',\n+        position: '',\n+        role: '',\n+        employmentType: '',\n+        permission: '',\n+        contractStartDate: '',\n+        contractEndDate: '',\n+        contractFile: null\n+      });\n+      \n+      alert('직원이 성공적으로 등록되었습니다.');\n+    } catch (error) {\n+      console.error('직원 등록 실패:', error);\n+      alert('직원 등록에 실패했습니다.');\n+    } finally {\n+      setIsSubmitting(false);\n+    }\n+  };\n+\n+  const handleReset = () => {\n+    setFormData({\n+      name: '',\n+      phone: '',\n+      email: '',\n+      branchId: '',\n+      position: '',\n+      role: '',\n+      employmentType: '',\n+      permission: '',\n+      contractStartDate: '',\n+      contractEndDate: '',\n+      contractFile: null\n+    });\n+    setErrors({});\n+  };\n+\n+  // 옵션 생성 함수들\n+  const getBranchOptions = () => {\n+    return branches.map(branch => ({\n+      value: branch.id,\n+      label: branch.name\n+    }));\n+  };\n+\n+  const getPositionOptions = () => {\n+    return POSITIONS.map(position => ({\n+      value: position,\n+      label: position\n+    }));\n+  };\n+\n+  const getRoleOptions = () => {\n+    return ROLES.map(role => ({\n+      value: role,\n+      label: role\n+    }));\n+  };\n+\n+  const getEmploymentTypeOptions = () => {\n+    return EMPLOYMENT_TYPES.map(type => ({\n+      value: type,\n+      label: type\n+    }));\n+  };\n+\n+  const getPermissionOptions = () => {\n+    return PERMISSIONS.map(permission => ({\n+      value: permission.value,\n+      label: permission.label\n+    }));\n+  };\n+\n+  // 날짜 제한 함수들\n+  const getContractStartDateMax = () => {\n+    if (formData.contractEndDate) {\n+      const endDate = new Date(formData.contractEndDate);\n+      endDate.setDate(endDate.getDate() - 1);\n+      return endDate.toISOString().split('T')[0];\n+    }\n+    return '';\n+  };\n+\n+  const getContractEndDateMin = () => {\n+    if (formData.contractStartDate) {\n+      const startDate = new Date(formData.contractStartDate);\n+      startDate.setDate(startDate.getDate() + 1);\n+      return startDate.toISOString().split('T')[0];\n+    }\n+    return '';\n+  };\n+\n+  return (\n+    <CMSLayout>\n+      <PageContainer>\n+        <PageHeader>\n+          <PageTitle>직원 등록</PageTitle>\n+          <PageDescription>새로운 직원 정보를 등록합니다.</PageDescription>\n+        </PageHeader>\n+\n+        <FormContainer>\n+          {/* 기본 정보 섹션 */}\n+          <FormSection>\n+            <SectionTitle>기본 정보</SectionTitle>\n+            \n+            <FieldRow>\n+              <FieldColumn>\n+                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                  <Label $required>이름</Label>\n+                  <Input\n+                    type=\"text\"\n+                    value={formData.name}\n+                    onChange={(e) => handleInputChange('name', e.target.value)}\n+                    placeholder=\"이름을 입력하세요\"\n+                    error={!!errors.name}\n+                  />\n+                  {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n+                </div>\n+              </FieldColumn>\n+\n+              <FieldColumn>\n+                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                  <Label $required>연락처</Label>\n+                  <Input\n+                    type=\"tel\"\n+                    value={formData.phone}\n+                    onChange={(e) => handleInputChange('phone', e.target.value)}\n+                    placeholder=\"010-1234-5678\"\n+                    error={!!errors.phone}\n+                  />\n+                  {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n+                </div>\n+              </FieldColumn>\n+            </FieldRow>\n+\n+            <FieldRow>\n+              <FieldColumn>\n+                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                  <Label $required>이메일</Label>\n+                  <Input\n+                    type=\"email\"\n+                    value={formData.email}\n+                    onChange={(e) => handleInputChange('email', e.target.value)}\n+                    placeholder=\"example@email.com\"\n+                    error={!!errors.email}\n+                  />\n+                  {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n+                </div>\n+              </FieldColumn>\n+            </FieldRow>\n+          </FormSection>\n+\n+          {/* 조직 정보 섹션 */}\n+          <FormSection>\n+            <SectionTitle>조직 정보</SectionTitle>\n+            \n+            <FieldRow>\n+              <FieldColumn>\n+                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                  <Label $required>지점</Label>\n+                  <CustomDropdown\n+                    value={formData.branchId}\n+                    onChange={(value: string) => handleInputChange('branchId', value)}\n+                    options={getBranchOptions()}\n+                    placeholder=\"지점을 선택하세요\"\n+                    error={!!errors.branchId}\n+                    required\n+                  />\n+                  {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n+                </div>\n+              </FieldColumn>\n+\n+              <FieldColumn>\n+                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                  <Label $required>직급</Label>\n+                  <CustomDropdown\n+                    value={formData.position}\n+                    onChange={(value: string) => handleInputChange('position', value)}\n+                    options={getPositionOptions()}\n+                    placeholder=\"직급을 선택하세요\"\n+                    error={!!errors.position}\n+                    required\n+                  />\n+                  {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n+                </div>\n+              </FieldColumn>\n+            </FieldRow>\n+\n+            <FieldRow>\n+              <FieldColumn>\n+                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                  <Label $required>직책</Label>\n+                  <CustomDropdown\n+                    value={formData.role}\n+                    onChange={(value: string) => handleInputChange('role', value)}\n+                    options={getRoleOptions()}\n+                    placeholder=\"직책을 선택하세요\"\n+                    error={!!errors.role}\n+                    required\n+                  />\n+                  {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n+                </div>\n+              </FieldColumn>\n+\n+              <FieldColumn>\n+                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                  <Label $required>고용형태</Label>\n+                  <CustomDropdown\n+                    value={formData.employmentType}\n+                    onChange={(value: string) => handleInputChange('employmentType', value)}\n+                    options={getEmploymentTypeOptions()}\n+                    placeholder=\"고용형태를 선택하세요\"\n+                    error={!!errors.employmentType}\n+                    required\n+                  />\n+                  {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n+                </div>\n+              </FieldColumn>\n+            </FieldRow>\n+\n+            <FieldRow>\n+              <FieldColumn>\n+                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                  <Label $required>권한</Label>\n+                  <CustomDropdown\n+                    value={formData.permission}\n+                    onChange={(value: string) => handleInputChange('permission', value)}\n+                    options={getPermissionOptions()}\n+                    placeholder=\"권한을 선택하세요\"\n+                    error={!!errors.permission}\n+                    required\n+                  />\n+                  {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n+                </div>\n+              </FieldColumn>\n+            </FieldRow>\n+          </FormSection>\n+\n+          {/* 계약 정보 섹션 */}\n+          <FormSection>\n+            <SectionTitle>계약 정보</SectionTitle>\n+            \n+            <FieldRow>\n+              <FieldColumn>\n+                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                  <Label $required>계약시작일</Label>\n+                  <CustomDateInput\n+                    value={formData.contractStartDate}\n+                    onChange={(value: string) => handleInputChange('contractStartDate', value)}\n+                    placeholder=\"계약시작일을 선택하세요\"\n+                    error={!!errors.contractStartDate}\n+                    max={getContractStartDateMax()}\n+                    required\n+                  />\n+                  {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n+                </div>\n+              </FieldColumn>\n+\n+              <FieldColumn>\n+                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                  <Label $required>계약종료일</Label>\n+                  <CustomDateInput\n+                    value={formData.contractEndDate}\n+                    onChange={(value: string) => handleInputChange('contractEndDate', value)}\n+                    placeholder=\"계약종료일을 선택하세요\"\n+                    error={!!errors.contractEndDate}\n+                    min={getContractEndDateMin()}\n+                    required\n+                  />\n+                  {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n+                </div>\n+              </FieldColumn>\n+            </FieldRow>\n+\n+            <FieldRow>\n+              <FieldColumn>\n+                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                  <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n+                    계약서 파일\n+                  </label>\n+                  <FileInput\n+                    type=\"file\"\n+                    onChange={(e) => handleInputChange('contractFile', e.target.files?.[0] || null)}\n+                    accept=\".pdf,.doc,.docx\"\n+                  />\n+                </div>\n+              </FieldColumn>\n+            </FieldRow>\n+          </FormSection>\n+        </FormContainer>\n+\n+        <ButtonContainer>\n+          <Button variant=\"secondary\" onClick={handleReset}>\n+            초기화\n+          </Button>\n+          <Button variant=\"primary\" onClick={handleSubmit} disabled={isSubmitting}>\n+            {isSubmitting ? '등록 중...' : '등록'}\n+          </Button>\n+        </ButtonContainer>\n+      </PageContainer>\n+    </CMSLayout>\n+  );\n+};\n+\n+export default StaffRegister;\n"
                },
                {
                    "date": 1759905671971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -572,514 +572,4 @@\n   );\n };\n \n export default StaffRegister;\n-import React, { useState, useEffect } from 'react';\n-import styled from 'styled-components';\n-import CMSLayout from '../../../components/CMSLayout';\n-import CustomDropdown from '../../../components/CustomDropdown';\n-import CustomDateInput from '../../../components/CustomDateInput';\n-import { StaffTextField, StaffPhoneField, StaffEmailField, StaffFileUploadField } from '../../../components/StaffFormComponents';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager, type Branch } from '../../../utils/indexedDB';\n-import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n-\n-const PageContainer = styled.div`\n-  width: 100%;\n-  max-width: 800px;\n-  margin: 0 auto;\n-`;\n-\n-const PageHeader = styled.div`\n-  margin-bottom: 24px;\n-`;\n-\n-const PageTitle = styled.h1`\n-  font-size: ${AppTextStyles.title1.fontSize};\n-  font-weight: 700;\n-  color: ${AppColors.onBackground};\n-  margin: 0 0 8px 0;\n-`;\n-\n-const PageDescription = styled.p`\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${AppColors.onInput1};\n-  margin: 0;\n-`;\n-\n-const Card = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  padding: 24px;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const FormGrid = styled.div`\n-  display: grid;\n-  gap: 16px;\n-  grid-template-columns: 1fr;\n-  \n-  @media (min-width: 768px) {\n-    grid-template-columns: 1fr 1fr;\n-  }\n-`;\n-\n-const ButtonGroup = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  justify-content: flex-end;\n-  margin-top: 24px;\n-`;\n-\n-const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n-  min-height: 48px;\n-  padding: 14px 24px;\n-  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n-  border-radius: 12px;\n-  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n-  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  font-weight: 600;\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-  \n-  &:hover:not(:disabled) {\n-    opacity: 0.9;\n-    box-shadow: 0 2px 8px rgba(55, 187, 214, 0.2);\n-  }\n-  \n-  &:disabled {\n-    opacity: 0.6;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-interface StaffFormData {\n-  name: string;\n-  phone: string;\n-  email: string;\n-  branchId: string;\n-  position: string; // 직급\n-  role: string; // 직책\n-  employmentType: string; // 고용형태\n-  permission: string; // 권한\n-  contractStartDate: string;\n-  contractEndDate: string;\n-  contractFile: File | null; // 계약서 파일\n-}\n-\n-const StaffRegister: React.FC = () => {\n-  const [formData, setFormData] = useState<StaffFormData>({\n-    name: '',\n-    phone: '',\n-    email: '',\n-    branchId: '',\n-    position: '',\n-    role: '',\n-    employmentType: '',\n-    permission: '',\n-    contractStartDate: '',\n-    contractEndDate: '',\n-    contractFile: null,\n-  });\n-\n-  const [branches, setBranches] = useState<Branch[]>([]);\n-  const [loading, setLoading] = useState(false);\n-  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n-\n-  // 컴포넌트 마운트 시 지점 데이터 로드\n-  useEffect(() => {\n-    loadBranches();\n-  }, []);\n-\n-  const loadBranches = async () => {\n-    try {\n-      // 먼저 모든 지점을 로드\n-      const allBranches = await dbManager.getAllBranches();\n-      console.log('모든 지점 목록:', allBranches);\n-      \n-      // 활성 지점만 필터링\n-      const activeBranches = allBranches.filter(branch => branch.isActive);\n-      console.log('활성 지점 목록:', activeBranches);\n-      \n-      setBranches(activeBranches);\n-    } catch (error) {\n-      console.error('지점 데이터 로드 실패:', error);\n-    }\n-  };\n-\n-  // 드롭다운 옵션 변환 함수들\n-  const getBranchOptions = () => {\n-    return branches.map(branch => ({\n-      value: branch.id,\n-      label: branch.name,\n-      description: branch.address\n-    }));\n-  };\n-\n-  const getPositionOptions = () => {\n-    return POSITIONS.map(position => ({\n-      value: position,\n-      label: position\n-    }));\n-  };\n-\n-  const getRoleOptions = () => {\n-    return ROLES.map(role => ({\n-      value: role,\n-      label: role\n-    }));\n-  };\n-\n-  const getEmploymentTypeOptions = () => {\n-    return EMPLOYMENT_TYPES.map(type => ({\n-      value: type,\n-      label: type\n-    }));\n-  };\n-\n-  const getPermissionOptions = () => {\n-    return PERMISSIONS.map(permission => ({\n-      value: permission.value,\n-      label: permission.label,\n-      description: permission.description\n-    }));\n-  };\n-\n-  // 날짜 범위 계산 함수들\n-  const getContractStartDateMax = (): string | undefined => {\n-    return formData.contractEndDate || undefined;\n-  };\n-\n-  const getContractEndDateMin = (): string | undefined => {\n-    return formData.contractStartDate || undefined;\n-  };\n-\n-  const handleInputChange = (field: keyof StaffFormData, value: string | File | null) => {\n-    // 파일 업로드 필드인 경우 검증 수행\n-    if (field === 'contractFile' && value instanceof File) {\n-      // 파일 타입 검증 (이미지 또는 PDF만 허용)\n-      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n-      if (!allowedTypes.includes(value.type)) {\n-        setErrors(prev => ({ ...prev, contractFile: '이미지(JPG, PNG) 또는 PDF 파일만 업로드 가능합니다.' }));\n-        return;\n-      }\n-      \n-      // 파일 크기 검증 (10MB 제한)\n-      if (value.size > 10 * 1024 * 1024) {\n-        setErrors(prev => ({ ...prev, contractFile: '파일 크기는 10MB 이하여야 합니다.' }));\n-        return;\n-      }\n-    }\n-\n-    setFormData(prev => ({ ...prev, [field]: value }));\n-    \n-    // 에러 메시지 제거\n-    if (errors[field]) {\n-      setErrors(prev => ({ ...prev, [field]: '' }));\n-    }\n-  };\n-\n-  const validateForm = (): boolean => {\n-    console.log('validateForm 시작, formData:', formData);\n-    const newErrors: { [key: string]: string } = {};\n-    \n-    // 필수 필드 검증\n-    if (!formData.name.trim()) newErrors.name = '이름을 입력해주세요.';\n-    if (!formData.email.trim()) newErrors.email = '이메일을 입력해주세요.';\n-    if (!formData.branchId) newErrors.branchId = '지점을 선택해주세요.';\n-    if (!formData.position) newErrors.position = '직급을 선택해주세요.';\n-    if (!formData.role) newErrors.role = '직책을 선택해주세요.';\n-    if (!formData.employmentType) newErrors.employmentType = '고용형태를 선택해주세요.';\n-    if (!formData.permission) newErrors.permission = '권한을 선택해주세요.';\n-    if (!formData.contractStartDate) newErrors.contractStartDate = '계약시작일을 입력해주세요.';\n-    if (!formData.contractEndDate) newErrors.contractEndDate = '계약종료일을 입력해주세요.';\n-    \n-    // 전화번호 검증 (필수 + 형식)\n-    console.log('전화번호 검증 시작, phone:', formData.phone);\n-    if (!formData.phone.trim()) {\n-      console.log('전화번호 빈 값');\n-      newErrors.phone = '전화번호를 입력해주세요.';\n-    } else {\n-      const phoneNumbers = formData.phone.replace(/[^\\d]/g, ''); // 숫자만 추출\n-      console.log('전화번호 검증:', phoneNumbers, '길이:', phoneNumbers.length);\n-      \n-      if (phoneNumbers.length !== 11) {\n-        console.log('길이 체크 실패');\n-        newErrors.phone = '전화번호는 11자리여야 합니다.';\n-      } else if (!phoneNumbers.startsWith('01')) {\n-        console.log('01 시작 체크 실패');\n-        newErrors.phone = '전화번호는 01로 시작해야 합니다.';\n-      } else if (!/^01[016789][0-9]{8}$/.test(phoneNumbers)) {\n-        console.log('정규표현식 체크 실패');\n-        newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010, 011, 016, 017, 018, 019)';\n-      } else {\n-        console.log('전화번호 검증 통과');\n-      }\n-    }\n-    \n-    // 이메일 형식 검증\n-    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n-    if (formData.email && !emailRegex.test(formData.email)) {\n-      newErrors.email = '올바른 이메일 형식을 입력해주세요.';\n-    }\n-    \n-    // 계약 기간 검증\n-    if (formData.contractStartDate && formData.contractEndDate) {\n-      const startDate = new Date(formData.contractStartDate);\n-      const endDate = new Date(formData.contractEndDate);\n-      \n-      if (startDate >= endDate) {\n-        newErrors.contractEndDate = '계약종료일은 계약시작일보다 나중이어야 합니다.';\n-      }\n-    }\n-    \n-    console.log('검증 에러:', newErrors);\n-    setErrors(newErrors);\n-    return Object.keys(newErrors).length === 0;\n-  };\n-\n-  const handleSubmit = async (e: React.FormEvent) => {\n-    e.preventDefault();\n-    console.log('handleSubmit 호출됨');\n-    \n-    const validationResult = validateForm();\n-    console.log('validation 결과:', validationResult);\n-    \n-    if (!validationResult) {\n-      console.log('validation 실패, 등록 중단');\n-      return;\n-    }\n-    \n-    console.log('validation 통과, 등록 진행');\n-    setLoading(true);\n-    \n-    try {\n-      // 이메일 중복 확인\n-      const existingStaff = await dbManager.getStaffByEmail(formData.email);\n-      if (existingStaff) {\n-        setErrors({ email: '이미 등록된 이메일입니다.' });\n-        setLoading(false);\n-        return;\n-      }\n-      \n-      const staffData = {\n-        ...formData,\n-        contractStartDate: new Date(formData.contractStartDate),\n-        contractEndDate: new Date(formData.contractEndDate),\n-      };\n-      \n-      await dbManager.addStaff(staffData);\n-      \n-      alert('직원이 성공적으로 등록되었습니다!');\n-      \n-      // 폼 초기화\n-      setFormData({\n-        name: '',\n-        phone: '',\n-        email: '',\n-        branchId: '',\n-        position: '',\n-        role: '',\n-        employmentType: '',\n-        permission: '',\n-        contractStartDate: '',\n-        contractEndDate: '',\n-        contractFile: null,\n-      });\n-      \n-    } catch (error) {\n-      console.error('직원 등록 실패:', error);\n-      alert('직원 등록에 실패했습니다. 다시 시도해주세요.');\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const handleCancel = () => {\n-    if (window.confirm('작성 중인 내용이 사라집니다. 정말 취소하시겠습니까?')) {\n-      setFormData({\n-        name: '',\n-        phone: '',\n-        email: '',\n-        branchId: '',\n-        position: '',\n-        role: '',\n-        employmentType: '',\n-        permission: '',\n-        contractStartDate: '',\n-        contractEndDate: '',\n-        contractFile: null,\n-      });\n-      setErrors({});\n-    }\n-  };\n-\n-  return (\n-    <CMSLayout currentPath=\"/cms/staff/register\">\n-      <PageContainer>\n-        <PageHeader>\n-          <PageTitle>신규 직원 등록</PageTitle>\n-          <PageDescription>새로운 직원의 정보를 입력하여 등록합니다.</PageDescription>\n-        </PageHeader>\n-\n-        <Card>\n-          <form onSubmit={handleSubmit} noValidate>\n-            <FormGrid>\n-              <StaffTextField\n-                label=\"이름\"\n-                value={formData.name}\n-                onChange={(value) => handleInputChange('name', value)}\n-                placeholder=\"홍길동\"\n-                errorMessage={errors.name}\n-                required\n-              />\n-\n-              <StaffPhoneField\n-                label=\"전화번호 (01로 시작하는 11자리)\"\n-                value={formData.phone}\n-                onChange={(value) => handleInputChange('phone', value)}\n-                errorMessage={errors.phone}\n-                required\n-              />\n-\n-              <StaffEmailField\n-                label=\"이메일\"\n-                value={formData.email}\n-                onChange={(value) => handleInputChange('email', value)}\n-                errorMessage={errors.email}\n-                required\n-              />\n-\n-              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n-                  지점 * (로드된 지점: {branches.length}개)\n-                </label>\n-                <CustomDropdown\n-                  value={formData.branchId}\n-                  onChange={(value) => handleInputChange('branchId', value)}\n-                  options={getBranchOptions()}\n-                  placeholder=\"지점을 선택하세요\"\n-                  error={!!errors.branchId}\n-                  required\n-                />\n-                {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n-              </div>\n-\n-              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n-                  직급 *\n-                </label>\n-                <CustomDropdown\n-                  value={formData.position}\n-                  onChange={(value) => handleInputChange('position', value)}\n-                  options={getPositionOptions()}\n-                  placeholder=\"직급을 선택하세요\"\n-                  error={!!errors.position}\n-                  required\n-                />\n-                {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n-              </div>\n-\n-              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n-                  직책 *\n-                </label>\n-                <CustomDropdown\n-                  value={formData.role}\n-                  onChange={(value) => handleInputChange('role', value)}\n-                  options={getRoleOptions()}\n-                  placeholder=\"직책을 선택하세요\"\n-                  error={!!errors.role}\n-                  required\n-                />\n-                {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n-              </div>\n-\n-              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n-                  고용형태 *\n-                </label>\n-                <CustomDropdown\n-                  value={formData.employmentType}\n-                  onChange={(value) => handleInputChange('employmentType', value)}\n-                  options={getEmploymentTypeOptions()}\n-                  placeholder=\"고용형태를 선택하세요\"\n-                  error={!!errors.employmentType}\n-                  required\n-                />\n-                {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n-              </div>\n-\n-              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n-                  권한 *\n-                </label>\n-                <CustomDropdown\n-                  value={formData.permission}\n-                  onChange={(value) => handleInputChange('permission', value)}\n-                  options={getPermissionOptions()}\n-                  placeholder=\"권한을 선택하세요\"\n-                  error={!!errors.permission}\n-                  required\n-                />\n-                {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n-              </div>\n-\n-              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n-                  계약시작일 *\n-                </label>\n-                <CustomDateInput\n-                  value={formData.contractStartDate}\n-                  onChange={(value) => handleInputChange('contractStartDate', value)}\n-                  placeholder=\"계약시작일을 선택하세요\"\n-                  error={!!errors.contractStartDate}\n-                  max={getContractStartDateMax()}\n-                  required\n-                />\n-                {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n-              </div>\n-\n-              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n-                  계약종료일 *\n-                </label>\n-                <CustomDateInput\n-                  value={formData.contractEndDate}\n-                  onChange={(value) => handleInputChange('contractEndDate', value)}\n-                  placeholder=\"계약종료일을 선택하세요\"\n-                  error={!!errors.contractEndDate}\n-                  min={getContractEndDateMin()}\n-                  required\n-                />\n-                {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n-              </div>\n-\n-              <StaffFileUploadField\n-                label=\"계약서 첨부\"\n-                value={formData.contractFile}\n-                onChange={(file) => handleInputChange('contractFile', file)}\n-                placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n-                errorMessage={errors.contractFile}\n-                fullWidth\n-              />\n-            </FormGrid>\n-\n-            <ButtonGroup>\n-              <Button type=\"button\" variant=\"secondary\" onClick={handleCancel} disabled={loading}>\n-                취소\n-              </Button>\n-              <Button type=\"submit\" disabled={loading}>\n-                {loading ? '등록 중...' : '등록하기'}\n-              </Button>\n-            </ButtonGroup>\n-          </form>\n-        </Card>\n-      </PageContainer>\n-    </CMSLayout>\n-  );\n-};\n-\n-export default StaffRegister;\n"
                },
                {
                    "date": 1759905854864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,14 +22,16 @@\n `;\n \n const Input = styled.input<{ error?: boolean }>`\n   width: 100%;\n+  min-width: 0;\n   padding: 12px;\n   border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n   border-radius: 8px;\n   font-size: ${AppTextStyles.body1.fontSize};\n   color: ${AppColors.onSurface};\n   background-color: ${AppColors.input};\n+  box-sizing: border-box;\n   \n   &:focus {\n     outline: none;\n     border-color: ${AppColors.primary};\n@@ -111,8 +113,9 @@\n   display: flex;\n   flex-direction: column;\n   gap: 8px;\n   min-width: 0;\n+  overflow: hidden;\n `;\n \n const ButtonContainer = styled.div`\n   display: flex;\n@@ -374,49 +377,43 @@\n             <SectionTitle>기본 정보</SectionTitle>\n             \n             <FieldRow>\n               <FieldColumn>\n-                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                  <Label $required>이름</Label>\n-                  <Input\n-                    type=\"text\"\n-                    value={formData.name}\n-                    onChange={(e) => handleInputChange('name', e.target.value)}\n-                    placeholder=\"이름을 입력하세요\"\n-                    error={!!errors.name}\n-                  />\n-                  {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n-                </div>\n+                <Label $required>이름</Label>\n+                <Input\n+                  type=\"text\"\n+                  value={formData.name}\n+                  onChange={(e) => handleInputChange('name', e.target.value)}\n+                  placeholder=\"이름을 입력하세요\"\n+                  error={!!errors.name}\n+                />\n+                {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n               </FieldColumn>\n \n               <FieldColumn>\n-                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                  <Label $required>연락처</Label>\n-                  <Input\n-                    type=\"tel\"\n-                    value={formData.phone}\n-                    onChange={(e) => handleInputChange('phone', e.target.value)}\n-                    placeholder=\"010-1234-5678\"\n-                    error={!!errors.phone}\n-                  />\n-                  {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n-                </div>\n+                <Label $required>연락처</Label>\n+                <Input\n+                  type=\"tel\"\n+                  value={formData.phone}\n+                  onChange={(e) => handleInputChange('phone', e.target.value)}\n+                  placeholder=\"010-1234-5678\"\n+                  error={!!errors.phone}\n+                />\n+                {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n               </FieldColumn>\n             </FieldRow>\n \n             <FieldRow>\n               <FieldColumn>\n-                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                  <Label $required>이메일</Label>\n-                  <Input\n-                    type=\"email\"\n-                    value={formData.email}\n-                    onChange={(e) => handleInputChange('email', e.target.value)}\n-                    placeholder=\"example@email.com\"\n-                    error={!!errors.email}\n-                  />\n-                  {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n-                </div>\n+                <Label $required>이메일</Label>\n+                <Input\n+                  type=\"email\"\n+                  value={formData.email}\n+                  onChange={(e) => handleInputChange('email', e.target.value)}\n+                  placeholder=\"example@email.com\"\n+                  error={!!errors.email}\n+                />\n+                {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n               </FieldColumn>\n             </FieldRow>\n           </FormSection>\n \n@@ -425,84 +422,74 @@\n             <SectionTitle>조직 정보</SectionTitle>\n             \n             <FieldRow>\n               <FieldColumn>\n-                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                  <Label $required>지점</Label>\n-                  <CustomDropdown\n-                    value={formData.branchId}\n-                    onChange={(value: string) => handleInputChange('branchId', value)}\n-                    options={getBranchOptions()}\n-                    placeholder=\"지점을 선택하세요\"\n-                    error={!!errors.branchId}\n-                    required\n-                  />\n-                  {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n-                </div>\n+                <Label $required>지점</Label>\n+                <CustomDropdown\n+                  value={formData.branchId}\n+                  onChange={(value: string) => handleInputChange('branchId', value)}\n+                  options={getBranchOptions()}\n+                  placeholder=\"지점을 선택하세요\"\n+                  error={!!errors.branchId}\n+                  required\n+                />\n+                {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n               </FieldColumn>\n \n               <FieldColumn>\n-                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                  <Label $required>직급</Label>\n-                  <CustomDropdown\n-                    value={formData.position}\n-                    onChange={(value: string) => handleInputChange('position', value)}\n-                    options={getPositionOptions()}\n-                    placeholder=\"직급을 선택하세요\"\n-                    error={!!errors.position}\n-                    required\n-                  />\n-                  {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n-                </div>\n+                <Label $required>직급</Label>\n+                <CustomDropdown\n+                  value={formData.position}\n+                  onChange={(value: string) => handleInputChange('position', value)}\n+                  options={getPositionOptions()}\n+                  placeholder=\"직급을 선택하세요\"\n+                  error={!!errors.position}\n+                  required\n+                />\n+                {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n               </FieldColumn>\n             </FieldRow>\n \n             <FieldRow>\n               <FieldColumn>\n-                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                  <Label $required>직책</Label>\n-                  <CustomDropdown\n-                    value={formData.role}\n-                    onChange={(value: string) => handleInputChange('role', value)}\n-                    options={getRoleOptions()}\n-                    placeholder=\"직책을 선택하세요\"\n-                    error={!!errors.role}\n-                    required\n-                  />\n-                  {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n-                </div>\n+                <Label $required>직책</Label>\n+                <CustomDropdown\n+                  value={formData.role}\n+                  onChange={(value: string) => handleInputChange('role', value)}\n+                  options={getRoleOptions()}\n+                  placeholder=\"직책을 선택하세요\"\n+                  error={!!errors.role}\n+                  required\n+                />\n+                {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n               </FieldColumn>\n \n               <FieldColumn>\n-                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                  <Label $required>고용형태</Label>\n-                  <CustomDropdown\n-                    value={formData.employmentType}\n-                    onChange={(value: string) => handleInputChange('employmentType', value)}\n-                    options={getEmploymentTypeOptions()}\n-                    placeholder=\"고용형태를 선택하세요\"\n-                    error={!!errors.employmentType}\n-                    required\n-                  />\n-                  {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n-                </div>\n+                <Label $required>고용형태</Label>\n+                <CustomDropdown\n+                  value={formData.employmentType}\n+                  onChange={(value: string) => handleInputChange('employmentType', value)}\n+                  options={getEmploymentTypeOptions()}\n+                  placeholder=\"고용형태를 선택하세요\"\n+                  error={!!errors.employmentType}\n+                  required\n+                />\n+                {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n               </FieldColumn>\n             </FieldRow>\n \n             <FieldRow>\n               <FieldColumn>\n-                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                  <Label $required>권한</Label>\n-                  <CustomDropdown\n-                    value={formData.permission}\n-                    onChange={(value: string) => handleInputChange('permission', value)}\n-                    options={getPermissionOptions()}\n-                    placeholder=\"권한을 선택하세요\"\n-                    error={!!errors.permission}\n-                    required\n-                  />\n-                  {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n-                </div>\n+                <Label $required>권한</Label>\n+                <CustomDropdown\n+                  value={formData.permission}\n+                  onChange={(value: string) => handleInputChange('permission', value)}\n+                  options={getPermissionOptions()}\n+                  placeholder=\"권한을 선택하세요\"\n+                  error={!!errors.permission}\n+                  required\n+                />\n+                {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n               </FieldColumn>\n             </FieldRow>\n           </FormSection>\n \n@@ -511,50 +498,44 @@\n             <SectionTitle>계약 정보</SectionTitle>\n             \n             <FieldRow>\n               <FieldColumn>\n-                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                  <Label $required>계약시작일</Label>\n-                  <CustomDateInput\n-                    value={formData.contractStartDate}\n-                    onChange={(value: string) => handleInputChange('contractStartDate', value)}\n-                    placeholder=\"계약시작일을 선택하세요\"\n-                    error={!!errors.contractStartDate}\n-                    max={getContractStartDateMax()}\n-                    required\n-                  />\n-                  {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n-                </div>\n+                <Label $required>계약시작일</Label>\n+                <CustomDateInput\n+                  value={formData.contractStartDate}\n+                  onChange={(value: string) => handleInputChange('contractStartDate', value)}\n+                  placeholder=\"계약시작일을 선택하세요\"\n+                  error={!!errors.contractStartDate}\n+                  max={getContractStartDateMax()}\n+                  required\n+                />\n+                {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n               </FieldColumn>\n \n               <FieldColumn>\n-                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                  <Label $required>계약종료일</Label>\n-                  <CustomDateInput\n-                    value={formData.contractEndDate}\n-                    onChange={(value: string) => handleInputChange('contractEndDate', value)}\n-                    placeholder=\"계약종료일을 선택하세요\"\n-                    error={!!errors.contractEndDate}\n-                    min={getContractEndDateMin()}\n-                    required\n-                  />\n-                  {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n-                </div>\n+                <Label $required>계약종료일</Label>\n+                <CustomDateInput\n+                  value={formData.contractEndDate}\n+                  onChange={(value: string) => handleInputChange('contractEndDate', value)}\n+                  placeholder=\"계약종료일을 선택하세요\"\n+                  error={!!errors.contractEndDate}\n+                  min={getContractEndDateMin()}\n+                  required\n+                />\n+                {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n               </FieldColumn>\n             </FieldRow>\n \n             <FieldRow>\n               <FieldColumn>\n-                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n-                  <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n-                    계약서 파일\n-                  </label>\n-                  <FileInput\n-                    type=\"file\"\n-                    onChange={(e) => handleInputChange('contractFile', e.target.files?.[0] || null)}\n-                    accept=\".pdf,.doc,.docx\"\n-                  />\n-                </div>\n+                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n+                  계약서 파일\n+                </label>\n+                <FileInput\n+                  type=\"file\"\n+                  onChange={(e) => handleInputChange('contractFile', e.target.files?.[0] || null)}\n+                  accept=\".pdf,.doc,.docx\"\n+                />\n               </FieldColumn>\n             </FieldRow>\n           </FormSection>\n         </FormContainer>\n"
                },
                {
                    "date": 1759905991596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import styled from 'styled-components';\n import CMSLayout from '../../../components/CMSLayout';\n import CustomDropdown from '../../../components/CustomDropdown';\n import CustomDateInput from '../../../components/CustomDateInput';\n+import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Branch } from '../../../utils/indexedDB';\n import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n@@ -41,23 +42,8 @@\n     color: ${AppColors.onInput1};\n   }\n `;\n \n-const FileInput = styled.input`\n-  width: 100%;\n-  padding: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${AppColors.onSurface};\n-  background-color: ${AppColors.input};\n-  \n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-  }\n-`;\n-\n const PageContainer = styled.div`\n   width: 100%;\n   max-width: 800px;\n   margin: 0 auto;\n@@ -207,8 +193,24 @@\n     fetchBranches();\n   }, []);\n \n   const handleInputChange = (field: keyof StaffFormData, value: string | File | null) => {\n+    // 파일 업로드 필드인 경우 검증 수행\n+    if (field === 'contractFile' && value instanceof File) {\n+      // 파일 타입 검증 (이미지 또는 PDF만 허용)\n+      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n+      if (!allowedTypes.includes(value.type)) {\n+        setErrors(prev => ({ ...prev, contractFile: '이미지(JPG, PNG) 또는 PDF 파일만 업로드 가능합니다.' }));\n+        return;\n+      }\n+      \n+      // 파일 크기 검증 (10MB 제한)\n+      if (value.size > 10 * 1024 * 1024) {\n+        setErrors(prev => ({ ...prev, contractFile: '파일 크기는 10MB 이하여야 합니다.' }));\n+        return;\n+      }\n+    }\n+\n     setFormData(prev => ({\n       ...prev,\n       [field]: value\n     }));\n@@ -526,15 +528,15 @@\n             </FieldRow>\n \n             <FieldRow>\n               <FieldColumn>\n-                <label style={{ fontSize: AppTextStyles.label1.fontSize, fontWeight: '600', color: AppColors.onSurface }}>\n-                  계약서 파일\n-                </label>\n-                <FileInput\n-                  type=\"file\"\n-                  onChange={(e) => handleInputChange('contractFile', e.target.files?.[0] || null)}\n-                  accept=\".pdf,.doc,.docx\"\n+                <StaffFileUploadField\n+                  label=\"계약서 파일\"\n+                  value={formData.contractFile || null}\n+                  onChange={(file) => handleInputChange('contractFile', file)}\n+                  placeholder=\"이미지 또는 PDF 파일 선택 (최대 10MB)\"\n+                  errorMessage={errors.contractFile}\n+                  fullWidth\n                 />\n               </FieldColumn>\n             </FieldRow>\n           </FormSection>\n"
                },
                {
                    "date": 1759907307403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,8 +144,10 @@\n \n // 타입 정의\n interface StaffFormData {\n   name: string;\n+  loginId: string;\n+  password: string;\n   phone: string;\n   email: string;\n   branchId: string;\n   position: string;\n@@ -163,8 +165,10 @@\n \n const StaffRegister: React.FC = () => {\n   const [formData, setFormData] = useState<StaffFormData>({\n     name: '',\n+    loginId: '',\n+    password: '',\n     phone: '',\n     email: '',\n     branchId: '',\n     position: '',\n@@ -229,8 +233,10 @@\n     const newErrors: FormErrors = {};\n \n     // 필수 필드 검증\n     if (!formData.name.trim()) newErrors.name = '이름은 필수입니다.';\n+    if (!formData.loginId.trim()) newErrors.loginId = '로그인 ID는 필수입니다.';\n+    if (!formData.password.trim()) newErrors.password = '비밀번호는 필수입니다.';\n     if (!formData.phone.trim()) newErrors.phone = '연락처는 필수입니다.';\n     if (!formData.email.trim()) newErrors.email = '이메일은 필수입니다.';\n     if (!formData.branchId) newErrors.branchId = '지점은 필수입니다.';\n     if (!formData.position) newErrors.position = '직급은 필수입니다.';\n@@ -239,8 +245,18 @@\n     if (!formData.permission) newErrors.permission = '권한은 필수입니다.';\n     if (!formData.contractStartDate) newErrors.contractStartDate = '계약시작일은 필수입니다.';\n     if (!formData.contractEndDate) newErrors.contractEndDate = '계약종료일은 필수입니다.';\n \n+    // 로그인 ID 형식 검증 (영문, 숫자만 허용, 4-20자)\n+    if (formData.loginId && !/^[a-zA-Z0-9]{4,20}$/.test(formData.loginId)) {\n+      newErrors.loginId = '로그인 ID는 영문, 숫자 4-20자로 입력해주세요.';\n+    }\n+\n+    // 비밀번호 형식 검증 (8자 이상, 영문+숫자+특수문자 조합)\n+    if (formData.password && !/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(formData.password)) {\n+      newErrors.password = '비밀번호는 8자 이상, 영문+숫자+특수문자 조합이어야 합니다.';\n+    }\n+\n     // 날짜 검증\n     if (formData.contractStartDate && formData.contractEndDate) {\n       const startDate = new Date(formData.contractStartDate);\n       const endDate = new Date(formData.contractEndDate);\n@@ -271,8 +287,10 @@\n       \n       // 성공 시 폼 초기화\n       setFormData({\n         name: '',\n+        loginId: '',\n+        password: '',\n         phone: '',\n         email: '',\n         branchId: '',\n         position: '',\n@@ -295,8 +313,10 @@\n \n   const handleReset = () => {\n     setFormData({\n       name: '',\n+      loginId: '',\n+      password: '',\n       phone: '',\n       email: '',\n       branchId: '',\n       position: '',\n@@ -377,8 +397,9 @@\n           {/* 기본 정보 섹션 */}\n           <FormSection>\n             <SectionTitle>기본 정보</SectionTitle>\n             \n+            {/* 이름 - 전체 너비 */}\n             <FieldRow>\n               <FieldColumn>\n                 <Label $required>이름</Label>\n                 <Input\n@@ -389,22 +410,38 @@\n                   error={!!errors.name}\n                 />\n                 {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n               </FieldColumn>\n+            </FieldRow>\n \n+            {/* 로그인ID, 비밀번호 */}\n+            <FieldRow>\n               <FieldColumn>\n-                <Label $required>연락처</Label>\n+                <Label $required>로그인 ID</Label>\n                 <Input\n-                  type=\"tel\"\n-                  value={formData.phone}\n-                  onChange={(e) => handleInputChange('phone', e.target.value)}\n-                  placeholder=\"010-1234-5678\"\n-                  error={!!errors.phone}\n+                  type=\"text\"\n+                  value={formData.loginId}\n+                  onChange={(e) => handleInputChange('loginId', e.target.value)}\n+                  placeholder=\"영문, 숫자 4-20자\"\n+                  error={!!errors.loginId}\n                 />\n-                {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n+                {errors.loginId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.loginId}</div>}\n               </FieldColumn>\n+\n+              <FieldColumn>\n+                <Label $required>비밀번호</Label>\n+                <Input\n+                  type=\"password\"\n+                  value={formData.password}\n+                  onChange={(e) => handleInputChange('password', e.target.value)}\n+                  placeholder=\"영문+숫자+특수문자 8자 이상\"\n+                  error={!!errors.password}\n+                />\n+                {errors.password && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.password}</div>}\n+              </FieldColumn>\n             </FieldRow>\n \n+            {/* 이메일, 연락처 */}\n             <FieldRow>\n               <FieldColumn>\n                 <Label $required>이메일</Label>\n                 <Input\n@@ -415,8 +452,20 @@\n                   error={!!errors.email}\n                 />\n                 {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n               </FieldColumn>\n+\n+              <FieldColumn>\n+                <Label $required>연락처</Label>\n+                <Input\n+                  type=\"tel\"\n+                  value={formData.phone}\n+                  onChange={(e) => handleInputChange('phone', e.target.value)}\n+                  placeholder=\"010-1234-5678\"\n+                  error={!!errors.phone}\n+                />\n+                {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n+              </FieldColumn>\n             </FieldRow>\n           </FormSection>\n \n           {/* 조직 정보 섹션 */}\n"
                },
                {
                    "date": 1759907600089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,8 +197,13 @@\n     fetchBranches();\n   }, []);\n \n   const handleInputChange = (field: keyof StaffFormData, value: string | File | null) => {\n+    // 전화번호 필드인 경우 자동 포맷팅 적용\n+    if (field === 'phone' && typeof value === 'string') {\n+      value = formatPhoneNumber(value);\n+    }\n+\n     // 파일 업로드 필드인 경우 검증 수행\n     if (field === 'contractFile' && value instanceof File) {\n       // 파일 타입 검증 (이미지 또는 PDF만 허용)\n       const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n@@ -228,8 +233,26 @@\n       });\n     }\n   };\n \n+  // 전화번호 자동 포맷팅 함수\n+  const formatPhoneNumber = (inputValue: string): string => {\n+    // 숫자만 추출\n+    const numbers = inputValue.replace(/[^\\d]/g, '');\n+    \n+    // 11자리를 초과하면 잘라내기\n+    const truncated = numbers.slice(0, 11);\n+    \n+    // 자동 하이픈 추가\n+    if (truncated.length <= 3) {\n+      return truncated;\n+    } else if (truncated.length <= 7) {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3)}`;\n+    } else {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3, 7)}-${truncated.slice(7)}`;\n+    }\n+  };\n+\n   const validateForm = (): boolean => {\n     const newErrors: FormErrors = {};\n \n     // 필수 필드 검증\n@@ -255,8 +278,18 @@\n     if (formData.password && !/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(formData.password)) {\n       newErrors.password = '비밀번호는 8자 이상, 영문+숫자+특수문자 조합이어야 합니다.';\n     }\n \n+    // 전화번호 형식 검증 (010-1234-5678 형태)\n+    if (formData.phone && !/^010-\\d{4}-\\d{4}$/.test(formData.phone)) {\n+      newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010-1234-5678)';\n+    }\n+\n+    // 이메일 형식 검증\n+    if (formData.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n+      newErrors.email = '올바른 이메일 형식이 아닙니다.';\n+    }\n+\n     // 날짜 검증\n     if (formData.contractStartDate && formData.contractEndDate) {\n       const startDate = new Date(formData.contractStartDate);\n       const endDate = new Date(formData.contractEndDate);\n@@ -457,12 +490,15 @@\n               <FieldColumn>\n                 <Label $required>연락처</Label>\n                 <Input\n                   type=\"tel\"\n+                  inputMode=\"numeric\"\n                   value={formData.phone}\n                   onChange={(e) => handleInputChange('phone', e.target.value)}\n                   placeholder=\"010-1234-5678\"\n                   error={!!errors.phone}\n+                  maxLength={13}\n+                  autoComplete=\"tel\"\n                 />\n                 {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n               </FieldColumn>\n             </FieldRow>\n"
                },
                {
                    "date": 1759908405840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,8 +153,9 @@\n   position: string;\n   role: string;\n   employmentType: string;\n   permission: string;\n+  program: string; // 담당프로그램 필드 추가\n   contractStartDate: string;\n   contractEndDate: string;\n   contractFile: File | null;\n }\n@@ -174,8 +175,9 @@\n     position: '',\n     role: '',\n     employmentType: '',\n     permission: '',\n+    program: '',\n     contractStartDate: '',\n     contractEndDate: '',\n     contractFile: null\n   });\n@@ -218,12 +220,21 @@\n         return;\n       }\n     }\n \n-    setFormData(prev => ({\n-      ...prev,\n-      [field]: value\n-    }));\n+    // 직책이 변경되고 코치가 아닌 경우 담당프로그램 초기화\n+    if (field === 'role' && typeof value === 'string' && value !== '코치') {\n+      setFormData(prev => ({\n+        ...prev,\n+        [field]: value,\n+        program: ''\n+      }));\n+    } else {\n+      setFormData(prev => ({\n+        ...prev,\n+        [field]: value\n+      }));\n+    }\n \n     // 에러 초기화\n     if (errors[field]) {\n       setErrors(prev => {\n@@ -267,8 +278,13 @@\n     if (!formData.employmentType) newErrors.employmentType = '고용형태는 필수입니다.';\n     if (!formData.permission) newErrors.permission = '권한은 필수입니다.';\n     if (!formData.contractStartDate) newErrors.contractStartDate = '계약시작일은 필수입니다.';\n     if (!formData.contractEndDate) newErrors.contractEndDate = '계약종료일은 필수입니다.';\n+    \n+    // 코치일 경우 담당프로그램 필수\n+    if (formData.role === '코치' && !formData.program) {\n+      newErrors.program = '코치는 담당프로그램 선택이 필수입니다.';\n+    }\n \n     // 로그인 ID 형식 검증 (영문, 숫자만 허용, 4-20자)\n     if (formData.loginId && !/^[a-zA-Z0-9]{4,20}$/.test(formData.loginId)) {\n       newErrors.loginId = '로그인 ID는 영문, 숫자 4-20자로 입력해주세요.';\n@@ -329,8 +345,9 @@\n         position: '',\n         role: '',\n         employmentType: '',\n         permission: '',\n+        program: '',\n         contractStartDate: '',\n         contractEndDate: '',\n         contractFile: null\n       });\n@@ -355,8 +372,9 @@\n       position: '',\n       role: '',\n       employmentType: '',\n       permission: '',\n+      program: '',\n       contractStartDate: '',\n       contractEndDate: '',\n       contractFile: null\n     });\n@@ -398,8 +416,15 @@\n       label: permission.label\n     }));\n   };\n \n+  const getProgramOptions = () => {\n+    return [\n+      { value: '릴랙싱', label: '릴랙싱' },\n+      { value: 'WBM', label: 'WBM' }\n+    ];\n+  };\n+\n   // 날짜 제한 함수들\n   const getContractStartDateMax = () => {\n     if (formData.contractEndDate) {\n       const endDate = new Date(formData.contractEndDate);\n@@ -507,8 +532,9 @@\n           {/* 조직 정보 섹션 */}\n           <FormSection>\n             <SectionTitle>조직 정보</SectionTitle>\n             \n+            {/* 지점, 권한 */}\n             <FieldRow>\n               <FieldColumn>\n                 <Label $required>지점</Label>\n                 <CustomDropdown\n@@ -522,8 +548,24 @@\n                 {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n               </FieldColumn>\n \n               <FieldColumn>\n+                <Label $required>권한</Label>\n+                <CustomDropdown\n+                  value={formData.permission}\n+                  onChange={(value: string) => handleInputChange('permission', value)}\n+                  options={getPermissionOptions()}\n+                  placeholder=\"권한을 선택하세요\"\n+                  error={!!errors.permission}\n+                  required\n+                />\n+                {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n+              </FieldColumn>\n+            </FieldRow>\n+\n+            {/* 직급, 직책 */}\n+            <FieldRow>\n+              <FieldColumn>\n                 <Label $required>직급</Label>\n                 <CustomDropdown\n                   value={formData.position}\n                   onChange={(value: string) => handleInputChange('position', value)}\n@@ -533,11 +575,9 @@\n                   required\n                 />\n                 {errors.position && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.position}</div>}\n               </FieldColumn>\n-            </FieldRow>\n \n-            <FieldRow>\n               <FieldColumn>\n                 <Label $required>직책</Label>\n                 <CustomDropdown\n                   value={formData.role}\n@@ -548,9 +588,12 @@\n                   required\n                 />\n                 {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n               </FieldColumn>\n+            </FieldRow>\n \n+            {/* 고용형태, 담당프로그램 (코치일 때만) */}\n+            <FieldRow>\n               <FieldColumn>\n                 <Label $required>고용형태</Label>\n                 <CustomDropdown\n                   value={formData.employmentType}\n@@ -561,23 +604,22 @@\n                   required\n                 />\n                 {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n               </FieldColumn>\n-            </FieldRow>\n \n-            <FieldRow>\n-              <FieldColumn>\n-                <Label $required>권한</Label>\n-                <CustomDropdown\n-                  value={formData.permission}\n-                  onChange={(value: string) => handleInputChange('permission', value)}\n-                  options={getPermissionOptions()}\n-                  placeholder=\"권한을 선택하세요\"\n-                  error={!!errors.permission}\n-                  required\n-                />\n-                {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n-              </FieldColumn>\n+              {formData.role === '코치' && (\n+                <FieldColumn>\n+                  <Label>담당프로그램</Label>\n+                  <CustomDropdown\n+                    value={formData.program}\n+                    onChange={(value: string) => handleInputChange('program', value)}\n+                    options={getProgramOptions()}\n+                    placeholder=\"담당프로그램을 선택하세요\"\n+                    error={!!errors.program}\n+                  />\n+                  {errors.program && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.program}</div>}\n+                </FieldColumn>\n+              )}\n             </FieldRow>\n           </FormSection>\n \n           {/* 계약 정보 섹션 */}\n"
                },
                {
                    "date": 1759908440423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,9 +224,9 @@\n     // 직책이 변경되고 코치가 아닌 경우 담당프로그램 초기화\n     if (field === 'role' && typeof value === 'string' && value !== '코치') {\n       setFormData(prev => ({\n         ...prev,\n-        [field]: value,\n+        role: value,\n         program: ''\n       }));\n     } else {\n       setFormData(prev => ({\n"
                },
                {
                    "date": 1759908583341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,16 +224,16 @@\n     // 직책이 변경되고 코치가 아닌 경우 담당프로그램 초기화\n     if (field === 'role' && typeof value === 'string' && value !== '코치') {\n       setFormData(prev => ({\n         ...prev,\n-        role: value,\n+        role: value as string,\n         program: ''\n       }));\n     } else {\n       setFormData(prev => ({\n         ...prev,\n         [field]: value\n-      }));\n+      }) as StaffFormData);\n     }\n \n     // 에러 초기화\n     if (errors[field]) {\n@@ -590,9 +590,9 @@\n                 {errors.role && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.role}</div>}\n               </FieldColumn>\n             </FieldRow>\n \n-            {/* 고용형태, 담당프로그램 (코치일 때만) */}\n+            {/* 고용형태, 담당프로그램 */}\n             <FieldRow>\n               <FieldColumn>\n                 <Label $required>고용형태</Label>\n                 <CustomDropdown\n@@ -605,21 +605,20 @@\n                 />\n                 {errors.employmentType && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.employmentType}</div>}\n               </FieldColumn>\n \n-              {formData.role === '코치' && (\n-                <FieldColumn>\n-                  <Label>담당프로그램</Label>\n-                  <CustomDropdown\n-                    value={formData.program}\n-                    onChange={(value: string) => handleInputChange('program', value)}\n-                    options={getProgramOptions()}\n-                    placeholder=\"담당프로그램을 선택하세요\"\n-                    error={!!errors.program}\n-                  />\n-                  {errors.program && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.program}</div>}\n-                </FieldColumn>\n-              )}\n+              <FieldColumn>\n+                <Label>담당프로그램</Label>\n+                <CustomDropdown\n+                  value={formData.program}\n+                  onChange={(value: string) => handleInputChange('program', value)}\n+                  options={getProgramOptions()}\n+                  placeholder={formData.role === '코치' ? \"담당프로그램을 선택하세요\" : \"코치만 선택 가능\"}\n+                  error={!!errors.program}\n+                  disabled={formData.role !== '코치'}\n+                />\n+                {errors.program && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.program}</div>}\n+              </FieldColumn>\n             </FieldRow>\n           </FormSection>\n \n           {/* 계약 정보 섹션 */}\n"
                },
                {
                    "date": 1759908854323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,8 +227,16 @@\n         ...prev,\n         role: value as string,\n         program: ''\n       }));\n+    } \n+    // 고용형태가 정규직으로 변경되면 계약종료일 초기화\n+    else if (field === 'employmentType' && typeof value === 'string' && value === '정규직') {\n+      setFormData(prev => ({\n+        ...prev,\n+        employmentType: value as string,\n+        contractEndDate: ''\n+      }));\n     } else {\n       setFormData(prev => ({\n         ...prev,\n         [field]: value\n@@ -277,10 +285,14 @@\n     if (!formData.role) newErrors.role = '직책은 필수입니다.';\n     if (!formData.employmentType) newErrors.employmentType = '고용형태는 필수입니다.';\n     if (!formData.permission) newErrors.permission = '권한은 필수입니다.';\n     if (!formData.contractStartDate) newErrors.contractStartDate = '계약시작일은 필수입니다.';\n-    if (!formData.contractEndDate) newErrors.contractEndDate = '계약종료일은 필수입니다.';\n     \n+    // 정규직이 아닌 경우에만 계약종료일 필수\n+    if (formData.employmentType !== '정규직' && !formData.contractEndDate) {\n+      newErrors.contractEndDate = '계약종료일은 필수입니다.';\n+    }\n+    \n     // 코치일 경우 담당프로그램 필수\n     if (formData.role === '코치' && !formData.program) {\n       newErrors.program = '코치는 담당프로그램 선택이 필수입니다.';\n     }\n@@ -304,10 +316,10 @@\n     if (formData.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n       newErrors.email = '올바른 이메일 형식이 아닙니다.';\n     }\n \n-    // 날짜 검증\n-    if (formData.contractStartDate && formData.contractEndDate) {\n+    // 날짜 검증 (정규직이 아닌 경우에만)\n+    if (formData.employmentType !== '정규직' && formData.contractStartDate && formData.contractEndDate) {\n       const startDate = new Date(formData.contractStartDate);\n       const endDate = new Date(formData.contractEndDate);\n       \n       if (startDate >= endDate) {\n@@ -639,16 +651,17 @@\n                 {errors.contractStartDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractStartDate}</div>}\n               </FieldColumn>\n \n               <FieldColumn>\n-                <Label $required>계약종료일</Label>\n+                <Label $required={formData.employmentType !== '정규직'}>계약종료일</Label>\n                 <CustomDateInput\n                   value={formData.contractEndDate}\n                   onChange={(value: string) => handleInputChange('contractEndDate', value)}\n-                  placeholder=\"계약종료일을 선택하세요\"\n+                  placeholder={formData.employmentType === '정규직' ? \"정규직은 입력 불필요\" : \"계약종료일을 선택하세요\"}\n                   error={!!errors.contractEndDate}\n                   min={getContractEndDateMin()}\n-                  required\n+                  disabled={formData.employmentType === '정규직'}\n+                  required={formData.employmentType !== '정규직'}\n                 />\n                 {errors.contractEndDate && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.contractEndDate}</div>}\n               </FieldColumn>\n             </FieldRow>\n"
                },
                {
                    "date": 1759911853224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -340,9 +340,9 @@\n         ...formData,\n         id: Date.now().toString(),\n         registrationDate: new Date().toISOString().split('T')[0],\n         contractStartDate: new Date(formData.contractStartDate),\n-        contractEndDate: new Date(formData.contractEndDate)\n+        contractEndDate: formData.employmentType === '정규직' ? null : new Date(formData.contractEndDate)\n       };\n \n       await dbManager.addStaff(staffData);\n       \n"
                },
                {
                    "date": 1759913422958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Branch } from '../../../utils/indexedDB';\n-import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS } from '../../../constants/staffConstants';\n+import { POSITIONS, ROLES, EMPLOYMENT_TYPES, PERMISSIONS, SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n \n const Label = styled.label<{ $required?: boolean }>`\n   font-size: ${AppTextStyles.label1.fontSize};\n   font-weight: 600;\n@@ -184,8 +184,9 @@\n \n   const [errors, setErrors] = useState<FormErrors>({});\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [isSubmitting, setIsSubmitting] = useState(false);\n+  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\n \n   useEffect(() => {\n     const fetchBranches = async () => {\n       try {\n@@ -195,9 +196,15 @@\n         console.error('지점 목록 로드 실패:', error);\n       }\n     };\n \n+    const getCurrentUser = () => {\n+      const adminId = sessionStorage.getItem('adminId');\n+      setCurrentUserId(adminId);\n+    };\n+\n     fetchBranches();\n+    getCurrentUser();\n   }, []);\n \n   const handleInputChange = (field: keyof StaffFormData, value: string | File | null) => {\n     // 전화번호 필드인 경우 자동 포맷팅 적용\n@@ -394,9 +401,16 @@\n   };\n \n   // 옵션 생성 함수들\n   const getBranchOptions = () => {\n-    return branches.map(branch => ({\n+    // 시스템관리자(master01)가 아닌 경우 '전체' 지점 제외\n+    const isSystemAdmin = currentUserId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n+    \n+    const filteredBranches = isSystemAdmin \n+      ? branches \n+      : branches.filter(branch => branch.name !== '전체');\n+    \n+    return filteredBranches.map(branch => ({\n       value: branch.id,\n       label: branch.name\n     }));\n   };\n"
                },
                {
                    "date": 1759913964763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useState, useEffect } from 'react';\n import styled from 'styled-components';\n+import { toast } from 'react-toastify';\n import CMSLayout from '../../../components/CMSLayout';\n import CustomDropdown from '../../../components/CustomDropdown';\n import CustomDateInput from '../../../components/CustomDateInput';\n import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n@@ -342,8 +343,21 @@\n     if (!validateForm()) return;\n \n     setIsSubmitting(true);\n     try {\n+      // 중복 체크 수행\n+      const duplicateCheck = await dbManager.checkDuplicateStaff(\n+        formData.loginId.trim(),\n+        formData.email.trim(),\n+        formData.phone.trim()\n+      );\n+\n+      if (duplicateCheck.isDuplicate) {\n+        toast.error(duplicateCheck.message || '중복된 정보가 있습니다.');\n+        setIsSubmitting(false);\n+        return;\n+      }\n+\n       const staffData = {\n         ...formData,\n         id: Date.now().toString(),\n         registrationDate: new Date().toISOString().split('T')[0],\n@@ -370,12 +384,12 @@\n         contractEndDate: '',\n         contractFile: null\n       });\n       \n-      alert('직원이 성공적으로 등록되었습니다.');\n+      toast.success('직원이 성공적으로 등록되었습니다.');\n     } catch (error) {\n       console.error('직원 등록 실패:', error);\n-      alert('직원 등록에 실패했습니다.');\n+      toast.error('직원 등록에 실패했습니다.');\n     } finally {\n       setIsSubmitting(false);\n     }\n   };\n"
                },
                {
                    "date": 1760073499608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import React, { useState, useEffect } from 'react';\n import styled from 'styled-components';\n import { toast } from 'react-toastify';\n+import { Visibility, VisibilityOff } from '@mui/icons-material';\n import CMSLayout from '../../../components/CMSLayout';\n import CustomDropdown from '../../../components/CustomDropdown';\n import CustomDateInput from '../../../components/CustomDateInput';\n import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n@@ -43,8 +44,29 @@\n     color: ${AppColors.onInput1};\n   }\n `;\n \n+const PasswordInputWrapper = styled.div`\n+  position: relative;\n+  width: 100%;\n+`;\n+\n+const PasswordToggleIcon = styled.div`\n+  position: absolute;\n+  right: 12px;\n+  top: 50%;\n+  transform: translateY(-50%);\n+  cursor: pointer;\n+  color: ${AppColors.onInput1};\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  \n+  &:hover {\n+    color: ${AppColors.primary};\n+  }\n+`;\n+\n const PageContainer = styled.div`\n   width: 100%;\n   max-width: 800px;\n   margin: 0 auto;\n@@ -186,8 +208,9 @@\n   const [errors, setErrors] = useState<FormErrors>({});\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [isSubmitting, setIsSubmitting] = useState(false);\n   const [currentUserId, setCurrentUserId] = useState<string | null>(null);\n+  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n \n   useEffect(() => {\n     const fetchBranches = async () => {\n       try {\n@@ -278,8 +301,13 @@\n       return `${truncated.slice(0, 3)}-${truncated.slice(3, 7)}-${truncated.slice(7)}`;\n     }\n   };\n \n+  // 비밀번호 토글 함수\n+  const handlePasswordToggle = () => {\n+    setIsPasswordVisible(prev => !prev);\n+  };\n+\n   const validateForm = (): boolean => {\n     const newErrors: FormErrors = {};\n \n     // 필수 필드 검증\n@@ -526,15 +554,21 @@\n               </FieldColumn>\n \n               <FieldColumn>\n                 <Label $required>비밀번호</Label>\n-                <Input\n-                  type=\"password\"\n-                  value={formData.password}\n-                  onChange={(e) => handleInputChange('password', e.target.value)}\n-                  placeholder=\"영문+숫자+특수문자 8자 이상\"\n-                  error={!!errors.password}\n-                />\n+                <PasswordInputWrapper>\n+                  <Input\n+                    type={isPasswordVisible ? \"text\" : \"password\"}\n+                    value={formData.password}\n+                    onChange={(e) => handleInputChange('password', e.target.value)}\n+                    placeholder=\"영문+숫자+특수문자 8자 이상\"\n+                    error={!!errors.password}\n+                    style={{ paddingRight: '40px' }}\n+                  />\n+                  <PasswordToggleIcon onClick={handlePasswordToggle}>\n+                    {isPasswordVisible ? <VisibilityOff /> : <Visibility />}\n+                  </PasswordToggleIcon>\n+                </PasswordInputWrapper>\n                 {errors.password && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.password}</div>}\n               </FieldColumn>\n             </FieldRow>\n \n"
                },
                {
                    "date": 1760074506211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -389,9 +389,10 @@\n         ...formData,\n         id: Date.now().toString(),\n         registrationDate: new Date().toISOString().split('T')[0],\n         contractStartDate: new Date(formData.contractStartDate),\n-        contractEndDate: formData.employmentType === '정규직' ? null : new Date(formData.contractEndDate)\n+        contractEndDate: formData.employmentType === '정규직' ? null : new Date(formData.contractEndDate),\n+        isActive: true // 신규 등록 직원은 기본적으로 활성 상태\n       };\n \n       await dbManager.addStaff(staffData);\n       \n"
                },
                {
                    "date": 1760075117001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -479,9 +479,17 @@\n     }));\n   };\n \n   const getPermissionOptions = () => {\n-    return PERMISSIONS.map(permission => ({\n+    // 시스템 관리자인지 확인\n+    const isSystemAdmin = currentUserId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n+    \n+    // 시스템 관리자가 아닌 경우 MASTER 권한 제외\n+    const availablePermissions = isSystemAdmin \n+      ? PERMISSIONS \n+      : PERMISSIONS.filter(permission => permission.value !== 'MASTER');\n+    \n+    return availablePermissions.map(permission => ({\n       value: permission.value,\n       label: permission.label\n     }));\n   };\n@@ -632,8 +640,17 @@\n                   placeholder=\"권한을 선택하세요\"\n                   error={!!errors.permission}\n                   required\n                 />\n+                {!currentUserId || currentUserId !== SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID ? (\n+                  <div style={{ \n+                    color: AppColors.onInput1, \n+                    fontSize: AppTextStyles.label3.fontSize, \n+                    marginTop: '4px' \n+                  }}>\n+                    ℹ️ MASTER 권한은 시스템 관리자만 부여할 수 있습니다.\n+                  </div>\n+                ) : null}\n                 {errors.permission && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.permission}</div>}\n               </FieldColumn>\n             </FieldRow>\n \n"
                },
                {
                    "date": 1760075365000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,8 +208,9 @@\n   const [errors, setErrors] = useState<FormErrors>({});\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [isSubmitting, setIsSubmitting] = useState(false);\n   const [currentUserId, setCurrentUserId] = useState<string | null>(null);\n+  const [currentUserInfo, setCurrentUserInfo] = useState<any>(null); // 현재 로그인한 사용자 정보\n   const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n \n   useEffect(() => {\n     const fetchBranches = async () => {\n@@ -220,11 +221,30 @@\n         console.error('지점 목록 로드 실패:', error);\n       }\n     };\n \n-    const getCurrentUser = () => {\n+    const getCurrentUser = async () => {\n       const adminId = sessionStorage.getItem('adminId');\n       setCurrentUserId(adminId);\n+      \n+      if (adminId) {\n+        try {\n+          // 현재 로그인한 사용자 정보 가져오기\n+          const allStaff = await dbManager.getAllStaff();\n+          const currentUser = allStaff.find(staff => staff.loginId === adminId);\n+          setCurrentUserInfo(currentUser || null);\n+          \n+          // EDITOR 권한이면 지점을 자동으로 설정\n+          if (currentUser && currentUser.permission === 'EDITOR') {\n+            setFormData(prev => ({\n+              ...prev,\n+              branchId: currentUser.branchId\n+            }));\n+          }\n+        } catch (error) {\n+          console.error('현재 사용자 정보 로드 실패:', error);\n+        }\n+      }\n     };\n \n     fetchBranches();\n     getCurrentUser();\n@@ -447,12 +467,17 @@\n   const getBranchOptions = () => {\n     // 시스템관리자(master01)가 아닌 경우 '전체' 지점 제외\n     const isSystemAdmin = currentUserId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n     \n-    const filteredBranches = isSystemAdmin \n+    let filteredBranches = isSystemAdmin \n       ? branches \n       : branches.filter(branch => branch.name !== '전체');\n     \n+    // EDITOR 권한이면 본인 지점만 표시\n+    if (currentUserInfo && currentUserInfo.permission === 'EDITOR') {\n+      filteredBranches = branches.filter(branch => branch.id === currentUserInfo.branchId);\n+    }\n+    \n     return filteredBranches.map(branch => ({\n       value: branch.id,\n       label: branch.name\n     }));\n@@ -625,10 +650,20 @@\n                   onChange={(value: string) => handleInputChange('branchId', value)}\n                   options={getBranchOptions()}\n                   placeholder=\"지점을 선택하세요\"\n                   error={!!errors.branchId}\n+                  disabled={currentUserInfo && currentUserInfo.permission === 'EDITOR'} // EDITOR 권한일 때 비활성화\n                   required\n                 />\n+                {currentUserInfo && currentUserInfo.permission === 'EDITOR' && (\n+                  <div style={{ \n+                    color: AppColors.onInput1, \n+                    fontSize: AppTextStyles.label3.fontSize, \n+                    marginTop: '4px' \n+                  }}>\n+                    ℹ️ EDITOR 권한은 소속 지점에서만 직원을 등록할 수 있습니다.\n+                  </div>\n+                )}\n                 {errors.branchId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.branchId}</div>}\n               </FieldColumn>\n \n               <FieldColumn>\n"
                },
                {
                    "date": 1760075585597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState, useEffect } from 'react';\n+import React, { useState, useEffect, useCallback } from 'react';\n import styled from 'styled-components';\n import { toast } from 'react-toastify';\n import { Visibility, VisibilityOff } from '@mui/icons-material';\n import CMSLayout from '../../../components/CMSLayout';\n@@ -249,8 +249,26 @@\n     fetchBranches();\n     getCurrentUser();\n   }, []);\n \n+  // 현재 사용자 권한 확인\n+  const checkUserPermission = useCallback(() => {\n+    if (currentUserInfo && currentUserInfo.permission === 'VIEWER') {\n+      alert('접근 권한이 없습니다. VIEWER 권한은 조회만 가능합니다.');\n+      // StaffSearch 페이지로 리다이렉트\n+      window.location.href = '/cms/staff/search';\n+      return false;\n+    }\n+    return true;\n+  }, [currentUserInfo]);\n+\n+  // 컴포넌트 마운트 시 권한 체크\n+  useEffect(() => {\n+    if (currentUserInfo) {\n+      checkUserPermission();\n+    }\n+  }, [currentUserInfo, checkUserPermission]);\n+\n   const handleInputChange = (field: keyof StaffFormData, value: string | File | null) => {\n     // 전화번호 필드인 경우 자동 포맷팅 적용\n     if (field === 'phone' && typeof value === 'string') {\n       value = formatPhoneNumber(value);\n"
                },
                {
                    "date": 1760078176961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,8 +206,9 @@\n   });\n \n   const [errors, setErrors] = useState<FormErrors>({});\n   const [branches, setBranches] = useState<Branch[]>([]);\n+  const [programs, setPrograms] = useState<any[]>([]); // 프로그램 목록 상태 추가\n   const [isSubmitting, setIsSubmitting] = useState(false);\n   const [currentUserId, setCurrentUserId] = useState<string | null>(null);\n   const [currentUserInfo, setCurrentUserInfo] = useState<any>(null); // 현재 로그인한 사용자 정보\n   const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n@@ -221,8 +222,19 @@\n         console.error('지점 목록 로드 실패:', error);\n       }\n     };\n \n+    const fetchPrograms = async () => {\n+      try {\n+        const programList = await dbManager.getAllPrograms();\n+        // 활성화된 프로그램만 필터링\n+        const activePrograms = programList.filter(program => program.isActive);\n+        setPrograms(activePrograms);\n+      } catch (error) {\n+        console.error('프로그램 목록 로드 실패:', error);\n+      }\n+    };\n+\n     const getCurrentUser = async () => {\n       const adminId = sessionStorage.getItem('adminId');\n       setCurrentUserId(adminId);\n       \n@@ -246,8 +258,9 @@\n       }\n     };\n \n     fetchBranches();\n+    fetchPrograms();\n     getCurrentUser();\n   }, []);\n \n   // 현재 사용자 권한 확인\n@@ -537,12 +550,12 @@\n     }));\n   };\n \n   const getProgramOptions = () => {\n-    return [\n-      { value: '릴랙싱', label: '릴랙싱' },\n-      { value: 'WBM', label: 'WBM' }\n-    ];\n+    return programs.map(program => ({\n+      value: program.name,\n+      label: program.name\n+    }));\n   };\n \n   // 날짜 제한 함수들\n   const getContractStartDateMax = () => {\n"
                },
                {
                    "date": 1760161526169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,13 +23,13 @@\n     }\n   `}\n `;\n \n-const Input = styled.input<{ error?: boolean }>`\n+const Input = styled.input<{ $error?: boolean }>`\n   width: 100%;\n   min-width: 0;\n   padding: 12px;\n-  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n+  border: 1px solid ${({ $error }) => $error ? AppColors.error : AppColors.borderLight};\n   border-radius: 8px;\n   font-size: ${AppTextStyles.body1.fontSize};\n   color: ${AppColors.onSurface};\n   background-color: ${AppColors.input};\n@@ -597,9 +597,9 @@\n                   type=\"text\"\n                   value={formData.name}\n                   onChange={(e) => handleInputChange('name', e.target.value)}\n                   placeholder=\"이름을 입력하세요\"\n-                  error={!!errors.name}\n+                  $error={!!errors.name}\n                 />\n                 {errors.name && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.name}</div>}\n               </FieldColumn>\n             </FieldRow>\n@@ -612,9 +612,9 @@\n                   type=\"text\"\n                   value={formData.loginId}\n                   onChange={(e) => handleInputChange('loginId', e.target.value)}\n                   placeholder=\"영문, 숫자 4-20자\"\n-                  error={!!errors.loginId}\n+                  $error={!!errors.loginId}\n                 />\n                 {errors.loginId && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.loginId}</div>}\n               </FieldColumn>\n \n@@ -625,9 +625,9 @@\n                     type={isPasswordVisible ? \"text\" : \"password\"}\n                     value={formData.password}\n                     onChange={(e) => handleInputChange('password', e.target.value)}\n                     placeholder=\"영문+숫자+특수문자 8자 이상\"\n-                    error={!!errors.password}\n+                    $error={!!errors.password}\n                     style={{ paddingRight: '40px' }}\n                   />\n                   <PasswordToggleIcon onClick={handlePasswordToggle}>\n                     {isPasswordVisible ? <VisibilityOff /> : <Visibility />}\n@@ -645,9 +645,9 @@\n                   type=\"email\"\n                   value={formData.email}\n                   onChange={(e) => handleInputChange('email', e.target.value)}\n                   placeholder=\"example@email.com\"\n-                  error={!!errors.email}\n+                  $error={!!errors.email}\n                 />\n                 {errors.email && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.email}</div>}\n               </FieldColumn>\n \n@@ -658,9 +658,9 @@\n                   inputMode=\"numeric\"\n                   value={formData.phone}\n                   onChange={(e) => handleInputChange('phone', e.target.value)}\n                   placeholder=\"010-1234-5678\"\n-                  error={!!errors.phone}\n+                  $error={!!errors.phone}\n                   maxLength={13}\n                   autoComplete=\"tel\"\n                 />\n                 {errors.phone && <div style={{ color: AppColors.error, fontSize: AppTextStyles.label3.fontSize, marginTop: '4px' }}>{errors.phone}</div>}\n"
                },
                {
                    "date": 1760163015562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import React, { useState, useEffect, useCallback } from 'react';\n import styled from 'styled-components';\n import { toast } from 'react-toastify';\n import { Visibility, VisibilityOff } from '@mui/icons-material';\n-import CMSLayout from '../../../components/CMSLayout';\n import CustomDropdown from '../../../components/CustomDropdown';\n import CustomDateInput from '../../../components/CustomDateInput';\n import { StaffFileUploadField } from '../../../components/StaffFormComponents';\n import { AppColors } from '../../../styles/colors';\n@@ -576,14 +575,13 @@\n     return '';\n   };\n \n   return (\n-    <CMSLayout>\n-      <PageContainer>\n-        <PageHeader>\n-          <PageTitle>직원 등록</PageTitle>\n-          <PageDescription>새로운 직원 정보를 등록합니다.</PageDescription>\n-        </PageHeader>\n+    <PageContainer>\n+      <PageHeader>\n+        <PageTitle>직원 등록</PageTitle>\n+        <PageDescription>새로운 직원 정보를 등록합니다.</PageDescription>\n+      </PageHeader>\n \n         <FormContainer>\n           {/* 기본 정보 섹션 */}\n           <FormSection>\n@@ -835,9 +833,8 @@\n             {isSubmitting ? '등록 중...' : '등록'}\n           </Button>\n         </ButtonContainer>\n       </PageContainer>\n-    </CMSLayout>\n-  );\n-};\n+    );\n+  };\n \n export default StaffRegister;\n"
                },
                {
                    "date": 1761650403335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import React, { useState, useEffect, useCallback } from 'react';\n+import { useNavigate } from 'react-router-dom';\n import styled from 'styled-components';\n import { toast } from 'react-toastify';\n import { Visibility, VisibilityOff } from '@mui/icons-material';\n import CustomDropdown from '../../../components/CustomDropdown';\n@@ -186,8 +187,9 @@\n   [key: string]: string;\n }\n \n const StaffRegister: React.FC = () => {\n+  const navigate = useNavigate();\n   const [formData, setFormData] = useState<StaffFormData>({\n     name: '',\n     loginId: '',\n     password: '',\n@@ -266,13 +268,13 @@\n   const checkUserPermission = useCallback(() => {\n     if (currentUserInfo && currentUserInfo.permission === 'VIEWER') {\n       alert('접근 권한이 없습니다. VIEWER 권한은 조회만 가능합니다.');\n       // StaffSearch 페이지로 리다이렉트\n-      window.location.href = '/cms/staff/search';\n+      navigate('/cms/staff/search');\n       return false;\n     }\n     return true;\n-  }, [currentUserInfo]);\n+  }, [currentUserInfo, navigate]);\n \n   // 컴포넌트 마운트 시 권한 체크\n   useEffect(() => {\n     if (currentUserInfo) {\n"
                }
            ],
            "date": 1759900871595,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport CMSLayout from '../../../components/CMSLayout';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\n\nconst PageContainer = styled.div`\n  width: 100%;\n  max-width: 800px;\n  margin: 0 auto;\n`;\n\nconst PageHeader = styled.div`\n  margin-bottom: 24px;\n`;\n\nconst PageTitle = styled.h1`\n  font-size: ${AppTextStyles.title1.fontSize};\n  font-weight: 700;\n  color: ${AppColors.onBackground};\n  margin: 0 0 8px 0;\n`;\n\nconst PageDescription = styled.p`\n  font-size: ${AppTextStyles.body1.fontSize};\n  color: ${AppColors.onInput1};\n  margin: 0;\n`;\n\nconst Card = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  padding: 24px;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n`;\n\nconst FormGrid = styled.div`\n  display: grid;\n  gap: 16px;\n  grid-template-columns: 1fr;\n  \n  @media (min-width: 768px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`;\n\nconst FormField = styled.div<{ $fullWidth?: boolean }>`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  grid-column: ${props => props.$fullWidth ? '1 / -1' : 'auto'};\n`;\n\nconst Label = styled.label`\n  font-size: ${AppTextStyles.label1.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  outline: none;\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst Select = styled.select`\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  outline: none;\n  background-color: ${AppColors.surface};\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n`;\n\nconst TextArea = styled.textarea`\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  outline: none;\n  min-height: 100px;\n  resize: vertical;\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst CheckboxGroup = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n`;\n\nconst CheckboxLabel = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  cursor: pointer;\n`;\n\nconst Checkbox = styled.input.attrs({ type: 'checkbox' })`\n  width: 18px;\n  height: 18px;\n  accent-color: ${AppColors.primary};\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  gap: 12px;\n  justify-content: flex-end;\n  margin-top: 24px;\n`;\n\nconst Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n  padding: 12px 24px;\n  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n  border-radius: 8px;\n  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    opacity: 0.9;\n  }\n`;\n\ninterface StaffFormData {\n  name: string;\n  phone: string;\n  email: string;\n  birth: string;\n  gender: string;\n  address: string;\n  emergencyContact: string;\n  emergencyPhone: string;\n  position: string;\n  department: string;\n  startDate: string;\n  salary: string;\n  permissions: string[];\n  notes: string;\n}\n\nconst StaffRegister: React.FC = () => {\n  const [formData, setFormData] = useState<StaffFormData>({\n    name: '',\n    phone: '',\n    email: '',\n    birth: '',\n    gender: '',\n    address: '',\n    emergencyContact: '',\n    emergencyPhone: '',\n    position: '',\n    department: '',\n    startDate: '',\n    salary: '',\n    permissions: [],\n    notes: '',\n  });\n\n  const availablePermissions = ['회원관리', '예약관리', '운동처방', '결제관리', '설정관리'];\n  const positions = ['대표', '매니저', '코치', '인턴', '계약직'];\n  const departments = ['운영팀', '코칭팀', '관리팀', '마케팅팀'];\n\n  const handleInputChange = (field: keyof StaffFormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handlePermissionChange = (permission: string, checked: boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      permissions: checked \n        ? [...prev.permissions, permission]\n        : prev.permissions.filter(p => p !== permission)\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('직원 등록 데이터:', formData);\n    alert('직원이 성공적으로 등록되었습니다!');\n  };\n\n  const handleCancel = () => {\n    if (window.confirm('작성 중인 내용이 사라집니다. 정말 취소하시겠습니까?')) {\n      setFormData({\n        name: '',\n        phone: '',\n        email: '',\n        birth: '',\n        gender: '',\n        address: '',\n        emergencyContact: '',\n        emergencyPhone: '',\n        position: '',\n        department: '',\n        startDate: '',\n        salary: '',\n        permissions: [],\n        notes: '',\n      });\n    }\n  };\n\n  return (\n    <CMSLayout currentPath=\"/cms/staff/register\">\n      <PageContainer>\n        <PageHeader>\n          <PageTitle>신규 직원 등록</PageTitle>\n          <PageDescription>새로운 직원의 정보를 입력하여 등록합니다.</PageDescription>\n        </PageHeader>\n\n        <Card>\n          <form onSubmit={handleSubmit}>\n            <FormGrid>\n              <FormField>\n                <Label>이름 *</Label>\n                <Input\n                  value={formData.name}\n                  onChange={(e) => handleInputChange('name', e.target.value)}\n                  placeholder=\"홍길동\"\n                  required\n                />\n              </FormField>\n\n              <FormField>\n                <Label>연락처 *</Label>\n                <Input\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={(e) => handleInputChange('phone', e.target.value)}\n                  placeholder=\"010-0000-0000\"\n                  required\n                />\n              </FormField>\n\n              <FormField>\n                <Label>이메일 *</Label>\n                <Input\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  placeholder=\"example@email.com\"\n                  required\n                />\n              </FormField>\n\n              <FormField>\n                <Label>생년월일</Label>\n                <Input\n                  type=\"date\"\n                  value={formData.birth}\n                  onChange={(e) => handleInputChange('birth', e.target.value)}\n                />\n              </FormField>\n\n              <FormField>\n                <Label>성별</Label>\n                <Select\n                  value={formData.gender}\n                  onChange={(e) => handleInputChange('gender', e.target.value)}\n                >\n                  <option value=\"\">선택하세요</option>\n                  <option value=\"male\">남성</option>\n                  <option value=\"female\">여성</option>\n                </Select>\n              </FormField>\n\n              <FormField>\n                <Label>직급 *</Label>\n                <Select\n                  value={formData.position}\n                  onChange={(e) => handleInputChange('position', e.target.value)}\n                  required\n                >\n                  <option value=\"\">선택하세요</option>\n                  {positions.map(position => (\n                    <option key={position} value={position}>{position}</option>\n                  ))}\n                </Select>\n              </FormField>\n\n              <FormField>\n                <Label>부서</Label>\n                <Select\n                  value={formData.department}\n                  onChange={(e) => handleInputChange('department', e.target.value)}\n                >\n                  <option value=\"\">선택하세요</option>\n                  {departments.map(department => (\n                    <option key={department} value={department}>{department}</option>\n                  ))}\n                </Select>\n              </FormField>\n\n              <FormField>\n                <Label>입사일 *</Label>\n                <Input\n                  type=\"date\"\n                  value={formData.startDate}\n                  onChange={(e) => handleInputChange('startDate', e.target.value)}\n                  required\n                />\n              </FormField>\n\n              <FormField>\n                <Label>급여</Label>\n                <Input\n                  type=\"number\"\n                  value={formData.salary}\n                  onChange={(e) => handleInputChange('salary', e.target.value)}\n                  placeholder=\"월급여 (원)\"\n                />\n              </FormField>\n\n              <FormField $fullWidth>\n                <Label>주소</Label>\n                <Input\n                  value={formData.address}\n                  onChange={(e) => handleInputChange('address', e.target.value)}\n                  placeholder=\"서울시 강남구...\"\n                />\n              </FormField>\n\n              <FormField>\n                <Label>비상연락처 (이름)</Label>\n                <Input\n                  value={formData.emergencyContact}\n                  onChange={(e) => handleInputChange('emergencyContact', e.target.value)}\n                  placeholder=\"김가족\"\n                />\n              </FormField>\n\n              <FormField>\n                <Label>비상연락처 (전화번호)</Label>\n                <Input\n                  type=\"tel\"\n                  value={formData.emergencyPhone}\n                  onChange={(e) => handleInputChange('emergencyPhone', e.target.value)}\n                  placeholder=\"010-0000-0000\"\n                />\n              </FormField>\n\n              <FormField $fullWidth>\n                <Label>권한</Label>\n                <CheckboxGroup>\n                  {availablePermissions.map(permission => (\n                    <CheckboxLabel key={permission}>\n                      <Checkbox\n                        checked={formData.permissions.includes(permission)}\n                        onChange={(e) => handlePermissionChange(permission, e.target.checked)}\n                      />\n                      {permission}\n                    </CheckboxLabel>\n                  ))}\n                </CheckboxGroup>\n              </FormField>\n\n              <FormField $fullWidth>\n                <Label>특이사항</Label>\n                <TextArea\n                  value={formData.notes}\n                  onChange={(e) => handleInputChange('notes', e.target.value)}\n                  placeholder=\"직원에 대한 특이사항이나 주의사항을 입력하세요...\"\n                />\n              </FormField>\n            </FormGrid>\n\n            <ButtonGroup>\n              <Button type=\"button\" variant=\"secondary\" onClick={handleCancel}>\n                취소\n              </Button>\n              <Button type=\"submit\">\n                등록하기\n              </Button>\n            </ButtonGroup>\n          </form>\n        </Card>\n      </PageContainer>\n    </CMSLayout>\n  );\n};\n\nexport default StaffRegister;\n"
        }
    ]
}