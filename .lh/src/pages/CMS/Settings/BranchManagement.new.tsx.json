{
    "sourceFile": "src/pages/CMS/Settings/BranchManagement.new.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759899370645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759912075453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,477 @@\n+import React, { useState, useEffect } from 'react';\n+import styled from 'styled-components';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, Branch } from '../../../utils/indexedDB';\n+\n+const Container = styled.div`\n+  width: 100%;\n+`;\n+\n+const LoadingState = styled.div`\n+  padding: 24px;\n+  text-align: center;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const ErrorState = styled.div`\n+  padding: 16px;\n+  margin-bottom: 16px;\n+  border: 1px solid ${AppColors.error};\n+  border-radius: 8px;\n+  background-color: ${AppColors.error}10;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const RefreshButton = styled.button`\n+  padding: 8px 16px;\n+  margin-left: 8px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.primary};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: white;\n+  }\n+`;\n+\n+const AddButton = styled.button`\n+  width: 100%;\n+  padding: 12px;\n+  margin-bottom: 16px;\n+  border: 2px dashed ${AppColors.borderLight};\n+  border-radius: 8px;\n+  background-color: transparent;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    border-color: ${AppColors.primary};\n+    color: ${AppColors.primary};\n+    background-color: ${AppColors.primary}05;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const Table = styled.div`\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  overflow: hidden;\n+`;\n+\n+const TableHeader = styled.div`\n+  background-color: ${AppColors.background};\n+  padding: 12px 16px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  font-weight: 600;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface};\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+`;\n+\n+const TableStats = styled.span`\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}80;\n+  font-weight: normal;\n+`;\n+\n+const TableRow = styled.div`\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 12px 16px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface};\n+\n+  &:last-child {\n+    border-bottom: none;\n+  }\n+\n+  &:hover {\n+    background-color: ${AppColors.background};\n+  }\n+`;\n+\n+const BranchInfo = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 4px;\n+`;\n+\n+const BranchName = styled.span`\n+  font-weight: 500;\n+`;\n+\n+const BranchDetails = styled.span`\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}60;\n+`;\n+\n+const BranchId = styled.span`\n+  font-family: monospace;\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}40;\n+  background-color: ${AppColors.background};\n+  padding: 2px 6px;\n+  border-radius: 4px;\n+`;\n+\n+const ActionButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const EditButton = styled.button`\n+  padding: 4px 8px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.primary};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: white;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const DeleteButton = styled.button`\n+  padding: 4px 8px;\n+  border: 1px solid ${AppColors.error};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.error};\n+    color: white;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const EmptyState = styled.div`\n+  padding: 24px;\n+  text-align: center;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const AddForm = styled.div`\n+  padding: 16px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  margin-bottom: 16px;\n+  background-color: ${AppColors.background};\n+`;\n+\n+const FormRow = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  margin-bottom: 12px;\n+`;\n+\n+const Input = styled.input`\n+  flex: 1;\n+  padding: 8px 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 4px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  box-sizing: border-box;\n+\n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+\n+  &:disabled {\n+    background-color: ${AppColors.background};\n+    opacity: 0.5;\n+  }\n+`;\n+\n+const FormButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const SaveButton = styled.button`\n+  flex: 1;\n+  padding: 8px 16px;\n+  border: none;\n+  border-radius: 4px;\n+  background-color: ${AppColors.primary};\n+  color: white;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover:not(:disabled) {\n+    background-color: ${AppColors.secondary};\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const CancelButton = styled.button`\n+  flex: 1;\n+  padding: 8px 16px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover:not(:disabled) {\n+    background-color: ${AppColors.background};\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const BranchManagement: React.FC = () => {\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [isAdding, setIsAdding] = useState(false);\n+  const [newBranchName, setNewBranchName] = useState('');\n+  const [newBranchAddress, setNewBranchAddress] = useState('');\n+  const [newBranchPhone, setNewBranchPhone] = useState('');\n+  const [loading, setLoading] = useState(true);\n+  const [saving, setSaving] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  // 컴포넌트 마운트 시 데이터 로드\n+  useEffect(() => {\n+    loadBranches();\n+  }, []);\n+\n+  const loadBranches = async () => {\n+    try {\n+      setLoading(true);\n+      setError(null);\n+      const branchData = await dbManager.getAllBranches();\n+      setBranches(branchData);\n+    } catch (err) {\n+      console.error('지점 데이터 로드 실패:', err);\n+      setError('지점 데이터를 불러오는데 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const handleAddBranch = async () => {\n+    if (!newBranchName.trim()) {\n+      alert('지점명을 입력해주세요.');\n+      return;\n+    }\n+\n+    try {\n+      setSaving(true);\n+      setError(null);\n+      \n+      const newBranch = await dbManager.addBranch({\n+        name: newBranchName.trim(),\n+        address: newBranchAddress.trim() || undefined,\n+        phone: newBranchPhone.trim() || undefined,\n+        isActive: true,\n+      });\n+      \n+      setBranches(prev => [...prev, newBranch]);\n+      setNewBranchName('');\n+      setNewBranchAddress('');\n+      setNewBranchPhone('');\n+      setIsAdding(false);\n+      \n+      console.log('새 지점 추가됨:', newBranch);\n+    } catch (err) {\n+      console.error('지점 추가 실패:', err);\n+      setError('지점 추가에 실패했습니다.');\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleDeleteBranch = async (id: string) => {\n+    if (!window.confirm('정말로 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.')) {\n+      return;\n+    }\n+\n+    try {\n+      setError(null);\n+      const success = await dbManager.deleteBranch(id);\n+      \n+      if (success) {\n+        setBranches(prev => prev.filter(branch => branch.id !== id));\n+        console.log('지점 삭제됨:', id);\n+      } else {\n+        throw new Error('삭제 실패');\n+      }\n+    } catch (err) {\n+      console.error('지점 삭제 실패:', err);\n+      setError('지점 삭제에 실패했습니다.');\n+    }\n+  };\n+\n+  const handleCancel = () => {\n+    setNewBranchName('');\n+    setNewBranchAddress('');\n+    setNewBranchPhone('');\n+    setIsAdding(false);\n+    setError(null);\n+  };\n+\n+  const handleKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter' && !saving) {\n+      handleAddBranch();\n+    }\n+  };\n+\n+  if (loading) {\n+    return (\n+      <Container>\n+        <LoadingState>지점 데이터를 불러오는 중...</LoadingState>\n+      </Container>\n+    );\n+  }\n+\n+  return (\n+    <Container>\n+      {error && (\n+        <ErrorState>\n+          {error}\n+          <RefreshButton onClick={loadBranches}>\n+            다시 시도\n+          </RefreshButton>\n+        </ErrorState>\n+      )}\n+\n+      {isAdding && (\n+        <AddForm>\n+          <FormRow>\n+            <Input\n+              type=\"text\"\n+              placeholder=\"지점명 (필수)\"\n+              value={newBranchName}\n+              onChange={(e) => setNewBranchName(e.target.value)}\n+              onKeyPress={handleKeyPress}\n+              disabled={saving}\n+              autoFocus\n+            />\n+          </FormRow>\n+          <FormRow>\n+            <Input\n+              type=\"text\"\n+              placeholder=\"주소 (선택)\"\n+              value={newBranchAddress}\n+              onChange={(e) => setNewBranchAddress(e.target.value)}\n+              onKeyPress={handleKeyPress}\n+              disabled={saving}\n+            />\n+            <Input\n+              type=\"text\"\n+              placeholder=\"전화번호 (선택)\"\n+              value={newBranchPhone}\n+              onChange={(e) => setNewBranchPhone(e.target.value)}\n+              onKeyPress={handleKeyPress}\n+              disabled={saving}\n+            />\n+          </FormRow>\n+          <FormButtons>\n+            <SaveButton onClick={handleAddBranch} disabled={saving}>\n+              {saving ? '저장 중...' : '저장'}\n+            </SaveButton>\n+            <CancelButton onClick={handleCancel} disabled={saving}>\n+              취소\n+            </CancelButton>\n+          </FormButtons>\n+        </AddForm>\n+      )}\n+\n+      {!isAdding && (\n+        <AddButton onClick={() => setIsAdding(true)} disabled={loading}>\n+          + 새 지점 추가\n+        </AddButton>\n+      )}\n+\n+      <Table>\n+        <TableHeader>\n+          지점 목록\n+          <TableStats>총 {branches.length}개 지점</TableStats>\n+        </TableHeader>\n+        {branches.length === 0 ? (\n+          <EmptyState>등록된 지점이 없습니다.</EmptyState>\n+        ) : (\n+          branches.map((branch) => (\n+            <TableRow key={branch.id}>\n+              <BranchInfo>\n+                <BranchName>{branch.name}</BranchName>\n+                <BranchDetails>\n+                  {branch.address && <span>{branch.address}</span>}\n+                  {branch.address && branch.phone && <span> | </span>}\n+                  {branch.phone && <span>{branch.phone}</span>}\n+                </BranchDetails>\n+                <BranchId>ID: {branch.id}</BranchId>\n+              </BranchInfo>\n+              <ActionButtons>\n+                <EditButton \n+                  onClick={() => {\n+                    // TODO: 수정 기능 구현\n+                    alert('수정 기능은 곧 추가됩니다.');\n+                  }}\n+                  disabled={saving}\n+                >\n+                  수정\n+                </EditButton>\n+                <DeleteButton \n+                  onClick={() => handleDeleteBranch(branch.id)}\n+                  disabled={saving}\n+                >\n+                  삭제\n+                </DeleteButton>\n+              </ActionButtons>\n+            </TableRow>\n+          ))\n+        )}\n+      </Table>\n+    </Container>\n+  );\n+};\n+\n+export default BranchManagement;\n"
                }
            ],
            "date": 1759899370645,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\nimport { dbManager, Branch } from '../../../utils/indexedDB';\n\nconst Container = styled.div`\n  width: 100%;\n`;\n\nconst LoadingState = styled.div`\n  padding: 24px;\n  text-align: center;\n  color: ${AppColors.onSurface};\n  font-size: ${AppTextStyles.body2.fontSize};\n`;\n\nconst ErrorState = styled.div`\n  padding: 16px;\n  margin-bottom: 16px;\n  border: 1px solid ${AppColors.error};\n  border-radius: 8px;\n  background-color: ${AppColors.error}10;\n  color: ${AppColors.error};\n  font-size: ${AppTextStyles.body2.fontSize};\n`;\n\nconst RefreshButton = styled.button`\n  padding: 8px 16px;\n  margin-left: 8px;\n  border: 1px solid ${AppColors.primary};\n  border-radius: 4px;\n  background-color: transparent;\n  color: ${AppColors.primary};\n  font-size: ${AppTextStyles.label3.fontSize};\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: ${AppColors.primary};\n    color: white;\n  }\n`;\n\nconst AddButton = styled.button`\n  width: 100%;\n  padding: 12px;\n  margin-bottom: 16px;\n  border: 2px dashed ${AppColors.borderLight};\n  border-radius: 8px;\n  background-color: transparent;\n  color: ${AppColors.onSurface};\n  font-size: ${AppTextStyles.body2.fontSize};\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    border-color: ${AppColors.primary};\n    color: ${AppColors.primary};\n    background-color: ${AppColors.primary}05;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst Table = styled.div`\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  overflow: hidden;\n`;\n\nconst TableHeader = styled.div`\n  background-color: ${AppColors.background};\n  padding: 12px 16px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  font-weight: 600;\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onSurface};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst TableStats = styled.span`\n  font-size: ${AppTextStyles.label3.fontSize};\n  color: ${AppColors.onSurface}80;\n  font-weight: normal;\n`;\n\nconst TableRow = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px 16px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onSurface};\n\n  &:last-child {\n    border-bottom: none;\n  }\n\n  &:hover {\n    background-color: ${AppColors.background};\n  }\n`;\n\nconst BranchInfo = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nconst BranchName = styled.span`\n  font-weight: 500;\n`;\n\nconst BranchDetails = styled.span`\n  font-size: ${AppTextStyles.label3.fontSize};\n  color: ${AppColors.onSurface}60;\n`;\n\nconst BranchId = styled.span`\n  font-family: monospace;\n  font-size: ${AppTextStyles.label3.fontSize};\n  color: ${AppColors.onSurface}40;\n  background-color: ${AppColors.background};\n  padding: 2px 6px;\n  border-radius: 4px;\n`;\n\nconst ActionButtons = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst EditButton = styled.button`\n  padding: 4px 8px;\n  border: 1px solid ${AppColors.primary};\n  border-radius: 4px;\n  background-color: transparent;\n  color: ${AppColors.primary};\n  font-size: ${AppTextStyles.label3.fontSize};\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: ${AppColors.primary};\n    color: white;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst DeleteButton = styled.button`\n  padding: 4px 8px;\n  border: 1px solid ${AppColors.error};\n  border-radius: 4px;\n  background-color: transparent;\n  color: ${AppColors.error};\n  font-size: ${AppTextStyles.label3.fontSize};\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: ${AppColors.error};\n    color: white;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst EmptyState = styled.div`\n  padding: 24px;\n  text-align: center;\n  color: ${AppColors.onSurface};\n  font-size: ${AppTextStyles.body2.fontSize};\n`;\n\nconst AddForm = styled.div`\n  padding: 16px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  margin-bottom: 16px;\n  background-color: ${AppColors.background};\n`;\n\nconst FormRow = styled.div`\n  display: flex;\n  gap: 12px;\n  margin-bottom: 12px;\n`;\n\nconst Input = styled.input`\n  flex: 1;\n  padding: 8px 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 4px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  box-sizing: border-box;\n\n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n  }\n\n  &:disabled {\n    background-color: ${AppColors.background};\n    opacity: 0.5;\n  }\n`;\n\nconst FormButtons = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SaveButton = styled.button`\n  flex: 1;\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  background-color: ${AppColors.primary};\n  color: white;\n  font-size: ${AppTextStyles.body2.fontSize};\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover:not(:disabled) {\n    background-color: ${AppColors.secondary};\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst CancelButton = styled.button`\n  flex: 1;\n  padding: 8px 16px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 4px;\n  background-color: transparent;\n  color: ${AppColors.onSurface};\n  font-size: ${AppTextStyles.body2.fontSize};\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover:not(:disabled) {\n    background-color: ${AppColors.background};\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst BranchManagement: React.FC = () => {\n  const [branches, setBranches] = useState<Branch[]>([]);\n  const [isAdding, setIsAdding] = useState(false);\n  const [newBranchName, setNewBranchName] = useState('');\n  const [newBranchAddress, setNewBranchAddress] = useState('');\n  const [newBranchPhone, setNewBranchPhone] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // 컴포넌트 마운트 시 데이터 로드\n  useEffect(() => {\n    loadBranches();\n  }, []);\n\n  const loadBranches = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const branchData = await dbManager.getAllBranches();\n      \n      // 첫 실행시 데이터가 없으면 샘플 데이터 생성\n      if (branchData.length === 0) {\n        console.log('초기 데이터 없음, 샘플 데이터 생성 중...');\n        await dbManager.seedSampleData();\n        const sampleData = await dbManager.getAllBranches();\n        setBranches(sampleData);\n      } else {\n        setBranches(branchData);\n      }\n    } catch (err) {\n      console.error('지점 데이터 로드 실패:', err);\n      setError('지점 데이터를 불러오는데 실패했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddBranch = async () => {\n    if (!newBranchName.trim()) {\n      alert('지점명을 입력해주세요.');\n      return;\n    }\n\n    try {\n      setSaving(true);\n      setError(null);\n      \n      const newBranch = await dbManager.addBranch({\n        name: newBranchName.trim(),\n        address: newBranchAddress.trim() || undefined,\n        phone: newBranchPhone.trim() || undefined,\n        isActive: true,\n      });\n      \n      setBranches(prev => [...prev, newBranch]);\n      setNewBranchName('');\n      setNewBranchAddress('');\n      setNewBranchPhone('');\n      setIsAdding(false);\n      \n      console.log('새 지점 추가됨:', newBranch);\n    } catch (err) {\n      console.error('지점 추가 실패:', err);\n      setError('지점 추가에 실패했습니다.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleDeleteBranch = async (id: string) => {\n    if (!window.confirm('정말로 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.')) {\n      return;\n    }\n\n    try {\n      setError(null);\n      const success = await dbManager.deleteBranch(id);\n      \n      if (success) {\n        setBranches(prev => prev.filter(branch => branch.id !== id));\n        console.log('지점 삭제됨:', id);\n      } else {\n        throw new Error('삭제 실패');\n      }\n    } catch (err) {\n      console.error('지점 삭제 실패:', err);\n      setError('지점 삭제에 실패했습니다.');\n    }\n  };\n\n  const handleCancel = () => {\n    setNewBranchName('');\n    setNewBranchAddress('');\n    setNewBranchPhone('');\n    setIsAdding(false);\n    setError(null);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !saving) {\n      handleAddBranch();\n    }\n  };\n\n  if (loading) {\n    return (\n      <Container>\n        <LoadingState>지점 데이터를 불러오는 중...</LoadingState>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      {error && (\n        <ErrorState>\n          {error}\n          <RefreshButton onClick={loadBranches}>\n            다시 시도\n          </RefreshButton>\n        </ErrorState>\n      )}\n\n      {isAdding && (\n        <AddForm>\n          <FormRow>\n            <Input\n              type=\"text\"\n              placeholder=\"지점명 (필수)\"\n              value={newBranchName}\n              onChange={(e) => setNewBranchName(e.target.value)}\n              onKeyPress={handleKeyPress}\n              disabled={saving}\n              autoFocus\n            />\n          </FormRow>\n          <FormRow>\n            <Input\n              type=\"text\"\n              placeholder=\"주소 (선택)\"\n              value={newBranchAddress}\n              onChange={(e) => setNewBranchAddress(e.target.value)}\n              onKeyPress={handleKeyPress}\n              disabled={saving}\n            />\n            <Input\n              type=\"text\"\n              placeholder=\"전화번호 (선택)\"\n              value={newBranchPhone}\n              onChange={(e) => setNewBranchPhone(e.target.value)}\n              onKeyPress={handleKeyPress}\n              disabled={saving}\n            />\n          </FormRow>\n          <FormButtons>\n            <SaveButton onClick={handleAddBranch} disabled={saving}>\n              {saving ? '저장 중...' : '저장'}\n            </SaveButton>\n            <CancelButton onClick={handleCancel} disabled={saving}>\n              취소\n            </CancelButton>\n          </FormButtons>\n        </AddForm>\n      )}\n\n      {!isAdding && (\n        <AddButton onClick={() => setIsAdding(true)} disabled={loading}>\n          + 새 지점 추가\n        </AddButton>\n      )}\n\n      <Table>\n        <TableHeader>\n          지점 목록\n          <TableStats>총 {branches.length}개 지점</TableStats>\n        </TableHeader>\n        {branches.length === 0 ? (\n          <EmptyState>등록된 지점이 없습니다.</EmptyState>\n        ) : (\n          branches.map((branch) => (\n            <TableRow key={branch.id}>\n              <BranchInfo>\n                <BranchName>{branch.name}</BranchName>\n                <BranchDetails>\n                  {branch.address && <span>{branch.address}</span>}\n                  {branch.address && branch.phone && <span> | </span>}\n                  {branch.phone && <span>{branch.phone}</span>}\n                </BranchDetails>\n                <BranchId>ID: {branch.id}</BranchId>\n              </BranchInfo>\n              <ActionButtons>\n                <EditButton \n                  onClick={() => {\n                    // TODO: 수정 기능 구현\n                    alert('수정 기능은 곧 추가됩니다.');\n                  }}\n                  disabled={saving}\n                >\n                  수정\n                </EditButton>\n                <DeleteButton \n                  onClick={() => handleDeleteBranch(branch.id)}\n                  disabled={saving}\n                >\n                  삭제\n                </DeleteButton>\n              </ActionButtons>\n            </TableRow>\n          ))\n        )}\n      </Table>\n    </Container>\n  );\n};\n\nexport default BranchManagement;\n"
        }
    ]
}