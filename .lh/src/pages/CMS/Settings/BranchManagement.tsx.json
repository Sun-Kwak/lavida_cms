{
    "sourceFile": "src/pages/CMS/Settings/BranchManagement.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1759897448295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759899370685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,48 @@\n-import React, { useState } from 'react';\n+import React, { useState, useEffect } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, Branch } from '../../../utils/indexedDB';\n \n const Container = styled.div`\n   width: 100%;\n `;\n \n+const LoadingState = styled.div`\n+  padding: 24px;\n+  text-align: center;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const ErrorState = styled.div`\n+  padding: 16px;\n+  margin-bottom: 16px;\n+  border: 1px solid ${AppColors.error};\n+  border-radius: 8px;\n+  background-color: ${AppColors.error}10;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const RefreshButton = styled.button`\n+  padding: 8px 16px;\n+  margin-left: 8px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.primary};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: white;\n+  }\n+`;\n+\n const AddButton = styled.button`\n   width: 100%;\n   padding: 12px;\n   margin-bottom: 16px;\n@@ -23,8 +58,13 @@\n     border-color: ${AppColors.primary};\n     color: ${AppColors.primary};\n     background-color: ${AppColors.primary}05;\n   }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n `;\n \n const Table = styled.div`\n   border: 1px solid ${AppColors.borderLight};\n@@ -38,10 +78,19 @@\n   border-bottom: 1px solid ${AppColors.borderLight};\n   font-weight: 600;\n   font-size: ${AppTextStyles.body2.fontSize};\n   color: ${AppColors.onSurface};\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n `;\n \n+const TableStats = styled.span`\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}80;\n+  font-weight: normal;\n+`;\n+\n const TableRow = styled.div`\n   display: flex;\n   align-items: center;\n   justify-content: space-between;\n@@ -58,12 +107,59 @@\n     background-color: ${AppColors.background};\n   }\n `;\n \n-const BranchName = styled.span`\n+const BranchInfo = styled.div`\n   flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 4px;\n `;\n \n+const BranchName = styled.span`\n+  font-weight: 500;\n+`;\n+\n+const BranchDetails = styled.span`\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}60;\n+`;\n+\n+const BranchId = styled.span`\n+  font-family: monospace;\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}40;\n+  background-color: ${AppColors.background};\n+  padding: 2px 6px;\n+  border-radius: 4px;\n+`;\n+\n+const ActionButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const EditButton = styled.button`\n+  padding: 4px 8px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.primary};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: white;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n const DeleteButton = styled.button`\n   padding: 4px 8px;\n   border: 1px solid ${AppColors.error};\n   border-radius: 4px;\n@@ -76,8 +172,13 @@\n   &:hover {\n     background-color: ${AppColors.error};\n     color: white;\n   }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n `;\n \n const EmptyState = styled.div`\n   padding: 24px;\n@@ -93,21 +194,31 @@\n   margin-bottom: 16px;\n   background-color: ${AppColors.background};\n `;\n \n+const FormRow = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  margin-bottom: 12px;\n+`;\n+\n const Input = styled.input`\n-  width: 100%;\n+  flex: 1;\n   padding: 8px 12px;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 4px;\n   font-size: ${AppTextStyles.body2.fontSize};\n-  margin-bottom: 12px;\n   box-sizing: border-box;\n \n   &:focus {\n     outline: none;\n     border-color: ${AppColors.primary};\n   }\n+\n+  &:disabled {\n+    background-color: ${AppColors.background};\n+    opacity: 0.5;\n+  }\n `;\n \n const FormButtons = styled.div`\n   display: flex;\n@@ -124,11 +235,16 @@\n   font-size: ${AppTextStyles.body2.fontSize};\n   cursor: pointer;\n   transition: all 0.2s ease;\n \n-  &:hover {\n+  &:hover:not(:disabled) {\n     background-color: ${AppColors.secondary};\n   }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n `;\n \n const CancelButton = styled.button`\n   flex: 1;\n@@ -140,86 +256,226 @@\n   font-size: ${AppTextStyles.body2.fontSize};\n   cursor: pointer;\n   transition: all 0.2s ease;\n \n-  &:hover {\n+  &:hover:not(:disabled) {\n     background-color: ${AppColors.background};\n   }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n `;\n \n-interface Branch {\n-  id: string;\n-  name: string;\n-}\n-\n const BranchManagement: React.FC = () => {\n-  const [branches, setBranches] = useState<Branch[]>([\n-    { id: '1', name: '강남점' },\n-    { id: '2', name: '홍대점' },\n-    { id: '3', name: '판교점' },\n-  ]);\n+  const [branches, setBranches] = useState<Branch[]>([]);\n   const [isAdding, setIsAdding] = useState(false);\n   const [newBranchName, setNewBranchName] = useState('');\n+  const [newBranchAddress, setNewBranchAddress] = useState('');\n+  const [newBranchPhone, setNewBranchPhone] = useState('');\n+  const [loading, setLoading] = useState(true);\n+  const [saving, setSaving] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n \n-  const handleAddBranch = () => {\n-    if (newBranchName.trim()) {\n-      const newBranch: Branch = {\n-        id: Date.now().toString(),\n+  // 컴포넌트 마운트 시 데이터 로드\n+  useEffect(() => {\n+    loadBranches();\n+  }, []);\n+\n+  const loadBranches = async () => {\n+    try {\n+      setLoading(true);\n+      setError(null);\n+      const branchData = await dbManager.getAllBranches();\n+      \n+      // 첫 실행시 데이터가 없으면 샘플 데이터 생성\n+      if (branchData.length === 0) {\n+        console.log('초기 데이터 없음, 샘플 데이터 생성 중...');\n+        await dbManager.seedSampleData();\n+        const sampleData = await dbManager.getAllBranches();\n+        setBranches(sampleData);\n+      } else {\n+        setBranches(branchData);\n+      }\n+    } catch (err) {\n+      console.error('지점 데이터 로드 실패:', err);\n+      setError('지점 데이터를 불러오는데 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const handleAddBranch = async () => {\n+    if (!newBranchName.trim()) {\n+      alert('지점명을 입력해주세요.');\n+      return;\n+    }\n+\n+    try {\n+      setSaving(true);\n+      setError(null);\n+      \n+      const newBranch = await dbManager.addBranch({\n         name: newBranchName.trim(),\n-      };\n-      setBranches([...branches, newBranch]);\n+        address: newBranchAddress.trim() || undefined,\n+        phone: newBranchPhone.trim() || undefined,\n+        isActive: true,\n+      });\n+      \n+      setBranches(prev => [...prev, newBranch]);\n       setNewBranchName('');\n+      setNewBranchAddress('');\n+      setNewBranchPhone('');\n       setIsAdding(false);\n+      \n+      console.log('새 지점 추가됨:', newBranch);\n+    } catch (err) {\n+      console.error('지점 추가 실패:', err);\n+      setError('지점 추가에 실패했습니다.');\n+    } finally {\n+      setSaving(false);\n     }\n   };\n \n-  const handleDeleteBranch = (id: string) => {\n-    if (window.confirm('정말로 삭제하시겠습니까?')) {\n-      setBranches(branches.filter(branch => branch.id !== id));\n+  const handleDeleteBranch = async (id: string) => {\n+    if (!window.confirm('정말로 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.')) {\n+      return;\n     }\n+\n+    try {\n+      setError(null);\n+      const success = await dbManager.deleteBranch(id);\n+      \n+      if (success) {\n+        setBranches(prev => prev.filter(branch => branch.id !== id));\n+        console.log('지점 삭제됨:', id);\n+      } else {\n+        throw new Error('삭제 실패');\n+      }\n+    } catch (err) {\n+      console.error('지점 삭제 실패:', err);\n+      setError('지점 삭제에 실패했습니다.');\n+    }\n   };\n \n   const handleCancel = () => {\n     setNewBranchName('');\n+    setNewBranchAddress('');\n+    setNewBranchPhone('');\n     setIsAdding(false);\n+    setError(null);\n   };\n \n+  const handleKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter' && !saving) {\n+      handleAddBranch();\n+    }\n+  };\n+\n+  if (loading) {\n+    return (\n+      <Container>\n+        <LoadingState>지점 데이터를 불러오는 중...</LoadingState>\n+      </Container>\n+    );\n+  }\n+\n   return (\n     <Container>\n+      {error && (\n+        <ErrorState>\n+          {error}\n+          <RefreshButton onClick={loadBranches}>\n+            다시 시도\n+          </RefreshButton>\n+        </ErrorState>\n+      )}\n+\n       {isAdding && (\n         <AddForm>\n-          <Input\n-            type=\"text\"\n-            placeholder=\"지점명을 입력하세요\"\n-            value={newBranchName}\n-            onChange={(e) => setNewBranchName(e.target.value)}\n-            onKeyPress={(e) => e.key === 'Enter' && handleAddBranch()}\n-            autoFocus\n-          />\n+          <FormRow>\n+            <Input\n+              type=\"text\"\n+              placeholder=\"지점명 (필수)\"\n+              value={newBranchName}\n+              onChange={(e) => setNewBranchName(e.target.value)}\n+              onKeyPress={handleKeyPress}\n+              disabled={saving}\n+              autoFocus\n+            />\n+          </FormRow>\n+          <FormRow>\n+            <Input\n+              type=\"text\"\n+              placeholder=\"주소 (선택)\"\n+              value={newBranchAddress}\n+              onChange={(e) => setNewBranchAddress(e.target.value)}\n+              onKeyPress={handleKeyPress}\n+              disabled={saving}\n+            />\n+            <Input\n+              type=\"text\"\n+              placeholder=\"전화번호 (선택)\"\n+              value={newBranchPhone}\n+              onChange={(e) => setNewBranchPhone(e.target.value)}\n+              onKeyPress={handleKeyPress}\n+              disabled={saving}\n+            />\n+          </FormRow>\n           <FormButtons>\n-            <SaveButton onClick={handleAddBranch}>저장</SaveButton>\n-            <CancelButton onClick={handleCancel}>취소</CancelButton>\n+            <SaveButton onClick={handleAddBranch} disabled={saving}>\n+              {saving ? '저장 중...' : '저장'}\n+            </SaveButton>\n+            <CancelButton onClick={handleCancel} disabled={saving}>\n+              취소\n+            </CancelButton>\n           </FormButtons>\n         </AddForm>\n       )}\n \n       {!isAdding && (\n-        <AddButton onClick={() => setIsAdding(true)}>\n+        <AddButton onClick={() => setIsAdding(true)} disabled={loading}>\n           + 새 지점 추가\n         </AddButton>\n       )}\n \n       <Table>\n-        <TableHeader>지점 목록</TableHeader>\n+        <TableHeader>\n+          지점 목록\n+          <TableStats>총 {branches.length}개 지점</TableStats>\n+        </TableHeader>\n         {branches.length === 0 ? (\n           <EmptyState>등록된 지점이 없습니다.</EmptyState>\n         ) : (\n           branches.map((branch) => (\n             <TableRow key={branch.id}>\n-              <BranchName>{branch.name}</BranchName>\n-              <DeleteButton onClick={() => handleDeleteBranch(branch.id)}>\n-                삭제\n-              </DeleteButton>\n+              <BranchInfo>\n+                <BranchName>{branch.name}</BranchName>\n+                <BranchDetails>\n+                  {branch.address && <span>{branch.address}</span>}\n+                  {branch.address && branch.phone && <span> | </span>}\n+                  {branch.phone && <span>{branch.phone}</span>}\n+                </BranchDetails>\n+                <BranchId>ID: {branch.id}</BranchId>\n+              </BranchInfo>\n+              <ActionButtons>\n+                <EditButton \n+                  onClick={() => {\n+                    // TODO: 수정 기능 구현\n+                    alert('수정 기능은 곧 추가됩니다.');\n+                  }}\n+                  disabled={saving}\n+                >\n+                  수정\n+                </EditButton>\n+                <DeleteButton \n+                  onClick={() => handleDeleteBranch(branch.id)}\n+                  disabled={saving}\n+                >\n+                  삭제\n+                </DeleteButton>\n+              </ActionButtons>\n             </TableRow>\n           ))\n         )}\n       </Table>\n"
                },
                {
                    "date": 1759899583928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,18 +286,9 @@\n     try {\n       setLoading(true);\n       setError(null);\n       const branchData = await dbManager.getAllBranches();\n-      \n-      // 첫 실행시 데이터가 없으면 샘플 데이터 생성\n-      if (branchData.length === 0) {\n-        console.log('초기 데이터 없음, 샘플 데이터 생성 중...');\n-        await dbManager.seedSampleData();\n-        const sampleData = await dbManager.getAllBranches();\n-        setBranches(sampleData);\n-      } else {\n-        setBranches(branchData);\n-      }\n+      setBranches(branchData);\n     } catch (err) {\n       console.error('지점 데이터 로드 실패:', err);\n       setError('지점 데이터를 불러오는데 실패했습니다.');\n     } finally {\n"
                },
                {
                    "date": 1759899777623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,22 +118,32 @@\n const BranchName = styled.span`\n   font-weight: 500;\n `;\n \n-const BranchDetails = styled.span`\n+const BranchDetails = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 4px;\n+`;\n+\n+const DetailItem = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 6px;\n   font-size: ${AppTextStyles.label3.fontSize};\n   color: ${AppColors.onSurface}60;\n `;\n \n-const BranchId = styled.span`\n-  font-family: monospace;\n-  font-size: ${AppTextStyles.label3.fontSize};\n-  color: ${AppColors.onSurface}40;\n-  background-color: ${AppColors.background};\n-  padding: 2px 6px;\n-  border-radius: 4px;\n+const DetailLabel = styled.span`\n+  font-weight: 500;\n+  min-width: 40px;\n+  color: ${AppColors.onSurface}80;\n `;\n \n+const DetailValue = styled.span`\n+  color: ${AppColors.onSurface}60;\n+`;\n+\n const ActionButtons = styled.div`\n   display: flex;\n   gap: 8px;\n `;\n@@ -442,13 +452,21 @@\n             <TableRow key={branch.id}>\n               <BranchInfo>\n                 <BranchName>{branch.name}</BranchName>\n                 <BranchDetails>\n-                  {branch.address && <span>{branch.address}</span>}\n-                  {branch.address && branch.phone && <span> | </span>}\n-                  {branch.phone && <span>{branch.phone}</span>}\n+                  {branch.address && (\n+                    <DetailItem>\n+                      <DetailLabel>주소:</DetailLabel>\n+                      <DetailValue>{branch.address}</DetailValue>\n+                    </DetailItem>\n+                  )}\n+                  {branch.phone && (\n+                    <DetailItem>\n+                      <DetailLabel>전화:</DetailLabel>\n+                      <DetailValue>{branch.phone}</DetailValue>\n+                    </DetailItem>\n+                  )}\n                 </BranchDetails>\n-                <BranchId>ID: {branch.id}</BranchId>\n               </BranchInfo>\n               <ActionButtons>\n                 <EditButton \n                   onClick={() => {\n"
                },
                {
                    "date": 1759913530669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -413,8 +413,10 @@\n               onChange={(e) => setNewBranchAddress(e.target.value)}\n               onKeyPress={handleKeyPress}\n               disabled={saving}\n             />\n+          </FormRow>\n+          <FormRow>\n             <Input\n               type=\"text\"\n               placeholder=\"전화번호 (선택)\"\n               value={newBranchPhone}\n"
                },
                {
                    "date": 1759913589550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,9 +296,13 @@\n     try {\n       setLoading(true);\n       setError(null);\n       const branchData = await dbManager.getAllBranches();\n-      setBranches(branchData);\n+      // 오래된 등록 순서로 정렬 (createdAt 오름차순)\n+      const sortedBranches = branchData.sort((a, b) => \n+        new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n+      );\n+      setBranches(sortedBranches);\n     } catch (err) {\n       console.error('지점 데이터 로드 실패:', err);\n       setError('지점 데이터를 불러오는데 실패했습니다.');\n     } finally {\n@@ -322,9 +326,15 @@\n         phone: newBranchPhone.trim() || undefined,\n         isActive: true,\n       });\n       \n-      setBranches(prev => [...prev, newBranch]);\n+      // 새로운 지점 추가 후 정렬 유지\n+      setBranches(prev => {\n+        const updated = [...prev, newBranch];\n+        return updated.sort((a, b) => \n+          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n+        );\n+      });\n       setNewBranchName('');\n       setNewBranchAddress('');\n       setNewBranchPhone('');\n       setIsAdding(false);\n"
                },
                {
                    "date": 1760077228147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,629 @@\n+import React, { useState, useEffect } from 'react';\n+import styled from 'styled-components';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, Branch } from '../../../utils/indexedDB';\n+\n+const Container = styled.div`\n+  width: 100%;\n+`;\n+\n+const LoadingState = styled.div`\n+  padding: 24px;\n+  text-align: center;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const ErrorState = styled.div`\n+  padding: 16px;\n+  margin-bottom: 16px;\n+  border: 1px solid ${AppColors.error};\n+  border-radius: 8px;\n+  background-color: ${AppColors.error}10;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const RefreshButton = styled.button`\n+  padding: 8px 16px;\n+  margin-left: 8px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.primary};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: white;\n+  }\n+`;\n+\n+const AddButton = styled.button`\n+  width: 100%;\n+  padding: 12px;\n+  margin-bottom: 16px;\n+  border: 2px dashed ${AppColors.borderLight};\n+  border-radius: 8px;\n+  background-color: transparent;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    border-color: ${AppColors.primary};\n+    color: ${AppColors.primary};\n+    background-color: ${AppColors.primary}05;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const Table = styled.div`\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  overflow: hidden;\n+`;\n+\n+const TableHeader = styled.div`\n+  background-color: ${AppColors.background};\n+  padding: 12px 16px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  font-weight: 600;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface};\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+`;\n+\n+const TableStats = styled.span`\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}80;\n+  font-weight: normal;\n+`;\n+\n+const TableRow = styled.div`\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 12px 16px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface};\n+\n+  &:last-child {\n+    border-bottom: none;\n+  }\n+\n+  &:hover {\n+    background-color: ${AppColors.background};\n+  }\n+`;\n+\n+const BranchInfo = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 4px;\n+`;\n+\n+const BranchName = styled.span`\n+  font-weight: 500;\n+`;\n+\n+const BranchDetails = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 4px;\n+`;\n+\n+const DetailItem = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 6px;\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}60;\n+`;\n+\n+const DetailLabel = styled.span`\n+  font-weight: 500;\n+  min-width: 40px;\n+  color: ${AppColors.onSurface}80;\n+`;\n+\n+const DetailValue = styled.span`\n+  color: ${AppColors.onSurface}60;\n+`;\n+\n+const ActionButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const EditButton = styled.button`\n+  padding: 4px 8px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.primary};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: white;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const DeleteButton = styled.button`\n+  padding: 4px 8px;\n+  border: 1px solid ${AppColors.error};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.error};\n+    color: white;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const EmptyState = styled.div`\n+  padding: 24px;\n+  text-align: center;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const AddForm = styled.div`\n+  padding: 16px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  margin-bottom: 16px;\n+  background-color: ${AppColors.background};\n+`;\n+\n+const FormRow = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  margin-bottom: 12px;\n+`;\n+\n+const Input = styled.input`\n+  flex: 1;\n+  padding: 8px 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 4px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  box-sizing: border-box;\n+\n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+\n+  &:disabled {\n+    background-color: ${AppColors.background};\n+    opacity: 0.5;\n+  }\n+`;\n+\n+const FormButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const SaveButton = styled.button`\n+  flex: 1;\n+  padding: 8px 16px;\n+  border: none;\n+  border-radius: 4px;\n+  background-color: ${AppColors.primary};\n+  color: white;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover:not(:disabled) {\n+    background-color: ${AppColors.secondary};\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const CancelButton = styled.button`\n+  flex: 1;\n+  padding: 8px 16px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover:not(:disabled) {\n+    background-color: ${AppColors.background};\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const BranchManagement: React.FC = () => {\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [isAdding, setIsAdding] = useState(false);\n+  const [editingId, setEditingId] = useState<string | null>(null);\n+  const [newBranchName, setNewBranchName] = useState('');\n+  const [newBranchAddress, setNewBranchAddress] = useState('');\n+  const [newBranchPhone, setNewBranchPhone] = useState('');\n+  const [editBranchName, setEditBranchName] = useState('');\n+  const [editBranchAddress, setEditBranchAddress] = useState('');\n+  const [editBranchPhone, setEditBranchPhone] = useState('');\n+  const [loading, setLoading] = useState(true);\n+  const [saving, setSaving] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  // 컴포넌트 마운트 시 데이터 로드\n+  useEffect(() => {\n+    loadBranches();\n+  }, []);\n+\n+  const loadBranches = async () => {\n+    try {\n+      setLoading(true);\n+      setError(null);\n+      const branchData = await dbManager.getAllBranches();\n+      // 오래된 등록 순서로 정렬 (createdAt 오름차순)\n+      const sortedBranches = branchData.sort((a, b) => \n+        new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n+      );\n+      setBranches(sortedBranches);\n+    } catch (err) {\n+      console.error('지점 데이터 로드 실패:', err);\n+      setError('지점 데이터를 불러오는데 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const handleAddBranch = async () => {\n+    if (!newBranchName.trim()) {\n+      alert('지점명을 입력해주세요.');\n+      return;\n+    }\n+\n+    try {\n+      setSaving(true);\n+      setError(null);\n+      \n+      const newBranch = await dbManager.addBranch({\n+        name: newBranchName.trim(),\n+        address: newBranchAddress.trim() || undefined,\n+        phone: newBranchPhone.trim() || undefined,\n+        isActive: true,\n+      });\n+      \n+      // 새로운 지점 추가 후 정렬 유지\n+      setBranches(prev => {\n+        const updated = [...prev, newBranch];\n+        return updated.sort((a, b) => \n+          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n+        );\n+      });\n+      setNewBranchName('');\n+      setNewBranchAddress('');\n+      setNewBranchPhone('');\n+      setIsAdding(false);\n+      setEditingId(null); // 수정 모드 해제\n+      \n+      console.log('새 지점 추가됨:', newBranch);\n+    } catch (err) {\n+      console.error('지점 추가 실패:', err);\n+      setError('지점 추가에 실패했습니다.');\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleDeleteBranch = async (id: string) => {\n+    if (!window.confirm('정말로 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.')) {\n+      return;\n+    }\n+\n+    try {\n+      setError(null);\n+      const success = await dbManager.deleteBranch(id);\n+      \n+      if (success) {\n+        setBranches(prev => prev.filter(branch => branch.id !== id));\n+        console.log('지점 삭제됨:', id);\n+      } else {\n+        throw new Error('삭제 실패');\n+      }\n+    } catch (err) {\n+      console.error('지점 삭제 실패:', err);\n+      setError('지점 삭제에 실패했습니다.');\n+    }\n+  };\n+\n+  const handleEditBranch = (branch: Branch) => {\n+    setEditingId(branch.id);\n+    setEditBranchName(branch.name);\n+    setEditBranchAddress(branch.address || '');\n+    setEditBranchPhone(branch.phone || '');\n+    setIsAdding(false);\n+  };\n+\n+  const handleUpdateBranch = async () => {\n+    if (!editBranchName.trim()) {\n+      alert('지점명을 입력해주세요.');\n+      return;\n+    }\n+\n+    if (!editingId) return;\n+\n+    try {\n+      setSaving(true);\n+      setError(null);\n+      \n+      const updatedBranch = await dbManager.updateBranch(editingId, {\n+        name: editBranchName.trim(),\n+        address: editBranchAddress.trim() || undefined,\n+        phone: editBranchPhone.trim() || undefined,\n+      });\n+      \n+      if (updatedBranch) {\n+        setBranches(prev => prev.map(branch => \n+          branch.id === editingId ? updatedBranch : branch\n+        ));\n+        \n+        handleCancelEdit();\n+        console.log('지점 수정됨:', updatedBranch);\n+      } else {\n+        throw new Error('수정 실패');\n+      }\n+    } catch (err) {\n+      console.error('지점 수정 실패:', err);\n+      setError('지점 수정에 실패했습니다.');\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleCancelEdit = () => {\n+    setEditingId(null);\n+    setEditBranchName('');\n+    setEditBranchAddress('');\n+    setEditBranchPhone('');\n+    setError(null);\n+  };\n+\n+  const handleCancel = () => {\n+    setNewBranchName('');\n+    setNewBranchAddress('');\n+    setNewBranchPhone('');\n+    setIsAdding(false);\n+    setEditingId(null);\n+    setEditBranchName('');\n+    setEditBranchAddress('');\n+    setEditBranchPhone('');\n+    setError(null);\n+  };\n+\n+  const handleKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter' && !saving) {\n+      handleAddBranch();\n+    }\n+  };\n+\n+  const handleEditKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter' && !saving) {\n+      handleUpdateBranch();\n+    }\n+  };\n+\n+  if (loading) {\n+    return (\n+      <Container>\n+        <LoadingState>지점 데이터를 불러오는 중...</LoadingState>\n+      </Container>\n+    );\n+  }\n+\n+  return (\n+    <Container>\n+      {error && (\n+        <ErrorState>\n+          {error}\n+          <RefreshButton onClick={loadBranches}>\n+            다시 시도\n+          </RefreshButton>\n+        </ErrorState>\n+      )}\n+\n+      {isAdding && (\n+        <AddForm>\n+          <FormRow>\n+            <Input\n+              type=\"text\"\n+              placeholder=\"지점명 (필수)\"\n+              value={newBranchName}\n+              onChange={(e) => setNewBranchName(e.target.value)}\n+              onKeyPress={handleKeyPress}\n+              disabled={saving}\n+              autoFocus\n+            />\n+          </FormRow>\n+          <FormRow>\n+            <Input\n+              type=\"text\"\n+              placeholder=\"주소 (선택)\"\n+              value={newBranchAddress}\n+              onChange={(e) => setNewBranchAddress(e.target.value)}\n+              onKeyPress={handleKeyPress}\n+              disabled={saving}\n+            />\n+          </FormRow>\n+          <FormRow>\n+            <Input\n+              type=\"text\"\n+              placeholder=\"전화번호 (선택)\"\n+              value={newBranchPhone}\n+              onChange={(e) => setNewBranchPhone(e.target.value)}\n+              onKeyPress={handleKeyPress}\n+              disabled={saving}\n+            />\n+          </FormRow>\n+          <FormButtons>\n+            <SaveButton onClick={handleAddBranch} disabled={saving}>\n+              {saving ? '저장 중...' : '저장'}\n+            </SaveButton>\n+            <CancelButton onClick={handleCancel} disabled={saving}>\n+              취소\n+            </CancelButton>\n+          </FormButtons>\n+        </AddForm>\n+      )}\n+\n+      {!isAdding && (\n+        <AddButton onClick={() => {\n+          setIsAdding(true);\n+          setEditingId(null);\n+          setEditBranchName('');\n+          setEditBranchAddress('');\n+          setEditBranchPhone('');\n+        }} disabled={loading || editingId !== null}>\n+          + 새 지점 추가\n+        </AddButton>\n+      )}\n+\n+      <Table>\n+        <TableHeader>\n+          지점 목록\n+          <TableStats>총 {branches.length}개 지점</TableStats>\n+        </TableHeader>\n+        {branches.length === 0 ? (\n+          <EmptyState>등록된 지점이 없습니다.</EmptyState>\n+        ) : (\n+          branches.map((branch) => (\n+            <TableRow key={branch.id}>\n+              {editingId === branch.id ? (\n+                // 수정 모드\n+                <>\n+                  <div style={{ flex: 1, display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                    <Input\n+                      type=\"text\"\n+                      value={editBranchName}\n+                      onChange={(e) => setEditBranchName(e.target.value)}\n+                      onKeyPress={handleEditKeyPress}\n+                      disabled={saving}\n+                      placeholder=\"지점명 (필수)\"\n+                      autoFocus\n+                    />\n+                    <Input\n+                      type=\"text\"\n+                      value={editBranchAddress}\n+                      onChange={(e) => setEditBranchAddress(e.target.value)}\n+                      onKeyPress={handleEditKeyPress}\n+                      disabled={saving}\n+                      placeholder=\"주소 (선택)\"\n+                    />\n+                    <Input\n+                      type=\"text\"\n+                      value={editBranchPhone}\n+                      onChange={(e) => setEditBranchPhone(e.target.value)}\n+                      onKeyPress={handleEditKeyPress}\n+                      disabled={saving}\n+                      placeholder=\"전화번호 (선택)\"\n+                    />\n+                  </div>\n+                  <ActionButtons>\n+                    <SaveButton \n+                      onClick={handleUpdateBranch} \n+                      disabled={saving}\n+                      style={{ padding: '4px 8px', fontSize: '12px' }}\n+                    >\n+                      {saving ? '저장 중...' : '저장'}\n+                    </SaveButton>\n+                    <CancelButton \n+                      onClick={handleCancelEdit} \n+                      disabled={saving}\n+                      style={{ padding: '4px 8px', fontSize: '12px' }}\n+                    >\n+                      취소\n+                    </CancelButton>\n+                  </ActionButtons>\n+                </>\n+              ) : (\n+                // 보기 모드\n+                <>\n+                  <BranchInfo>\n+                    <BranchName>{branch.name}</BranchName>\n+                    <BranchDetails>\n+                      {branch.address && (\n+                        <DetailItem>\n+                          <DetailLabel>주소:</DetailLabel>\n+                          <DetailValue>{branch.address}</DetailValue>\n+                        </DetailItem>\n+                      )}\n+                      {branch.phone && (\n+                        <DetailItem>\n+                          <DetailLabel>전화:</DetailLabel>\n+                          <DetailValue>{branch.phone}</DetailValue>\n+                        </DetailItem>\n+                      )}\n+                    </BranchDetails>\n+                  </BranchInfo>\n+                  <ActionButtons>\n+                    <EditButton \n+                      onClick={() => handleEditBranch(branch)}\n+                      disabled={saving || editingId !== null}\n+                    >\n+                      수정\n+                    </EditButton>\n+                    <DeleteButton \n+                      onClick={() => handleDeleteBranch(branch.id)}\n+                      disabled={saving || editingId !== null}\n+                    >\n+                      삭제\n+                    </DeleteButton>\n+                  </ActionButtons>\n+                </>\n+              )}\n+            </TableRow>\n+          ))\n+        )}\n+      </Table>\n+    </Container>\n+  );\n+};\n+\n+export default BranchManagement;\n"
                },
                {
                    "date": 1760077312142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -533,13 +533,27 @@\n         {branches.length === 0 ? (\n           <EmptyState>등록된 지점이 없습니다.</EmptyState>\n         ) : (\n           branches.map((branch) => (\n-            <TableRow key={branch.id}>\n+            <TableRow \n+              key={branch.id}\n+              style={editingId === branch.id ? {\n+                flexDirection: 'column',\n+                alignItems: 'stretch',\n+                padding: '16px',\n+                backgroundColor: `${AppColors.primary}05`\n+              } : {}}\n+            >\n               {editingId === branch.id ? (\n                 // 수정 모드\n-                <>\n-                  <div style={{ flex: 1, display: 'flex', flexDirection: 'column', gap: '8px' }}>\n+                <div style={{ \n+                  width: '100%', \n+                  display: 'flex', \n+                  flexDirection: 'column', \n+                  gap: '12px',\n+                  padding: '8px 0'\n+                }}>\n+                  <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n                     <Input\n                       type=\"text\"\n                       value={editBranchName}\n                       onChange={(e) => setEditBranchName(e.target.value)}\n@@ -564,25 +578,38 @@\n                       disabled={saving}\n                       placeholder=\"전화번호 (선택)\"\n                     />\n                   </div>\n-                  <ActionButtons>\n+                  <div style={{ \n+                    display: 'flex', \n+                    gap: '8px', \n+                    justifyContent: 'flex-end',\n+                    marginTop: '4px'\n+                  }}>\n                     <SaveButton \n                       onClick={handleUpdateBranch} \n                       disabled={saving}\n-                      style={{ padding: '4px 8px', fontSize: '12px' }}\n+                      style={{ \n+                        padding: '6px 16px', \n+                        fontSize: '13px',\n+                        minWidth: '60px'\n+                      }}\n                     >\n                       {saving ? '저장 중...' : '저장'}\n                     </SaveButton>\n                     <CancelButton \n                       onClick={handleCancelEdit} \n                       disabled={saving}\n-                      style={{ padding: '4px 8px', fontSize: '12px' }}\n+                      style={{ \n+                        padding: '6px 16px', \n+                        fontSize: '13px',\n+                        minWidth: '60px'\n+                      }}\n                     >\n                       취소\n                     </CancelButton>\n-                  </ActionButtons>\n-                </>\n+                  </div>\n+                </div>\n               ) : (\n                 // 보기 모드\n                 <>\n                   <BranchInfo>\n@@ -626,511 +653,4 @@\n   );\n };\n \n export default BranchManagement;\n-import React, { useState, useEffect } from 'react';\n-import styled from 'styled-components';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager, Branch } from '../../../utils/indexedDB';\n-\n-const Container = styled.div`\n-  width: 100%;\n-`;\n-\n-const LoadingState = styled.div`\n-  padding: 24px;\n-  text-align: center;\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-`;\n-\n-const ErrorState = styled.div`\n-  padding: 16px;\n-  margin-bottom: 16px;\n-  border: 1px solid ${AppColors.error};\n-  border-radius: 8px;\n-  background-color: ${AppColors.error}10;\n-  color: ${AppColors.error};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-`;\n-\n-const RefreshButton = styled.button`\n-  padding: 8px 16px;\n-  margin-left: 8px;\n-  border: 1px solid ${AppColors.primary};\n-  border-radius: 4px;\n-  background-color: transparent;\n-  color: ${AppColors.primary};\n-  font-size: ${AppTextStyles.label3.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.primary};\n-    color: white;\n-  }\n-`;\n-\n-const AddButton = styled.button`\n-  width: 100%;\n-  padding: 12px;\n-  margin-bottom: 16px;\n-  border: 2px dashed ${AppColors.borderLight};\n-  border-radius: 8px;\n-  background-color: transparent;\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    border-color: ${AppColors.primary};\n-    color: ${AppColors.primary};\n-    background-color: ${AppColors.primary}05;\n-  }\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-const Table = styled.div`\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  overflow: hidden;\n-`;\n-\n-const TableHeader = styled.div`\n-  background-color: ${AppColors.background};\n-  padding: 12px 16px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  font-weight: 600;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onSurface};\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-`;\n-\n-const TableStats = styled.span`\n-  font-size: ${AppTextStyles.label3.fontSize};\n-  color: ${AppColors.onSurface}80;\n-  font-weight: normal;\n-`;\n-\n-const TableRow = styled.div`\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  padding: 12px 16px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onSurface};\n-\n-  &:last-child {\n-    border-bottom: none;\n-  }\n-\n-  &:hover {\n-    background-color: ${AppColors.background};\n-  }\n-`;\n-\n-const BranchInfo = styled.div`\n-  flex: 1;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 4px;\n-`;\n-\n-const BranchName = styled.span`\n-  font-weight: 500;\n-`;\n-\n-const BranchDetails = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  gap: 4px;\n-`;\n-\n-const DetailItem = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 6px;\n-  font-size: ${AppTextStyles.label3.fontSize};\n-  color: ${AppColors.onSurface}60;\n-`;\n-\n-const DetailLabel = styled.span`\n-  font-weight: 500;\n-  min-width: 40px;\n-  color: ${AppColors.onSurface}80;\n-`;\n-\n-const DetailValue = styled.span`\n-  color: ${AppColors.onSurface}60;\n-`;\n-\n-const ActionButtons = styled.div`\n-  display: flex;\n-  gap: 8px;\n-`;\n-\n-const EditButton = styled.button`\n-  padding: 4px 8px;\n-  border: 1px solid ${AppColors.primary};\n-  border-radius: 4px;\n-  background-color: transparent;\n-  color: ${AppColors.primary};\n-  font-size: ${AppTextStyles.label3.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.primary};\n-    color: white;\n-  }\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-const DeleteButton = styled.button`\n-  padding: 4px 8px;\n-  border: 1px solid ${AppColors.error};\n-  border-radius: 4px;\n-  background-color: transparent;\n-  color: ${AppColors.error};\n-  font-size: ${AppTextStyles.label3.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.error};\n-    color: white;\n-  }\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-const EmptyState = styled.div`\n-  padding: 24px;\n-  text-align: center;\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-`;\n-\n-const AddForm = styled.div`\n-  padding: 16px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  margin-bottom: 16px;\n-  background-color: ${AppColors.background};\n-`;\n-\n-const FormRow = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  margin-bottom: 12px;\n-`;\n-\n-const Input = styled.input`\n-  flex: 1;\n-  padding: 8px 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 4px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  box-sizing: border-box;\n-\n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-  }\n-\n-  &:disabled {\n-    background-color: ${AppColors.background};\n-    opacity: 0.5;\n-  }\n-`;\n-\n-const FormButtons = styled.div`\n-  display: flex;\n-  gap: 8px;\n-`;\n-\n-const SaveButton = styled.button`\n-  flex: 1;\n-  padding: 8px 16px;\n-  border: none;\n-  border-radius: 4px;\n-  background-color: ${AppColors.primary};\n-  color: white;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover:not(:disabled) {\n-    background-color: ${AppColors.secondary};\n-  }\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-const CancelButton = styled.button`\n-  flex: 1;\n-  padding: 8px 16px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 4px;\n-  background-color: transparent;\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover:not(:disabled) {\n-    background-color: ${AppColors.background};\n-  }\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-const BranchManagement: React.FC = () => {\n-  const [branches, setBranches] = useState<Branch[]>([]);\n-  const [isAdding, setIsAdding] = useState(false);\n-  const [newBranchName, setNewBranchName] = useState('');\n-  const [newBranchAddress, setNewBranchAddress] = useState('');\n-  const [newBranchPhone, setNewBranchPhone] = useState('');\n-  const [loading, setLoading] = useState(true);\n-  const [saving, setSaving] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-\n-  // 컴포넌트 마운트 시 데이터 로드\n-  useEffect(() => {\n-    loadBranches();\n-  }, []);\n-\n-  const loadBranches = async () => {\n-    try {\n-      setLoading(true);\n-      setError(null);\n-      const branchData = await dbManager.getAllBranches();\n-      // 오래된 등록 순서로 정렬 (createdAt 오름차순)\n-      const sortedBranches = branchData.sort((a, b) => \n-        new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n-      );\n-      setBranches(sortedBranches);\n-    } catch (err) {\n-      console.error('지점 데이터 로드 실패:', err);\n-      setError('지점 데이터를 불러오는데 실패했습니다.');\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const handleAddBranch = async () => {\n-    if (!newBranchName.trim()) {\n-      alert('지점명을 입력해주세요.');\n-      return;\n-    }\n-\n-    try {\n-      setSaving(true);\n-      setError(null);\n-      \n-      const newBranch = await dbManager.addBranch({\n-        name: newBranchName.trim(),\n-        address: newBranchAddress.trim() || undefined,\n-        phone: newBranchPhone.trim() || undefined,\n-        isActive: true,\n-      });\n-      \n-      // 새로운 지점 추가 후 정렬 유지\n-      setBranches(prev => {\n-        const updated = [...prev, newBranch];\n-        return updated.sort((a, b) => \n-          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n-        );\n-      });\n-      setNewBranchName('');\n-      setNewBranchAddress('');\n-      setNewBranchPhone('');\n-      setIsAdding(false);\n-      \n-      console.log('새 지점 추가됨:', newBranch);\n-    } catch (err) {\n-      console.error('지점 추가 실패:', err);\n-      setError('지점 추가에 실패했습니다.');\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-\n-  const handleDeleteBranch = async (id: string) => {\n-    if (!window.confirm('정말로 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.')) {\n-      return;\n-    }\n-\n-    try {\n-      setError(null);\n-      const success = await dbManager.deleteBranch(id);\n-      \n-      if (success) {\n-        setBranches(prev => prev.filter(branch => branch.id !== id));\n-        console.log('지점 삭제됨:', id);\n-      } else {\n-        throw new Error('삭제 실패');\n-      }\n-    } catch (err) {\n-      console.error('지점 삭제 실패:', err);\n-      setError('지점 삭제에 실패했습니다.');\n-    }\n-  };\n-\n-  const handleCancel = () => {\n-    setNewBranchName('');\n-    setNewBranchAddress('');\n-    setNewBranchPhone('');\n-    setIsAdding(false);\n-    setError(null);\n-  };\n-\n-  const handleKeyPress = (e: React.KeyboardEvent) => {\n-    if (e.key === 'Enter' && !saving) {\n-      handleAddBranch();\n-    }\n-  };\n-\n-  if (loading) {\n-    return (\n-      <Container>\n-        <LoadingState>지점 데이터를 불러오는 중...</LoadingState>\n-      </Container>\n-    );\n-  }\n-\n-  return (\n-    <Container>\n-      {error && (\n-        <ErrorState>\n-          {error}\n-          <RefreshButton onClick={loadBranches}>\n-            다시 시도\n-          </RefreshButton>\n-        </ErrorState>\n-      )}\n-\n-      {isAdding && (\n-        <AddForm>\n-          <FormRow>\n-            <Input\n-              type=\"text\"\n-              placeholder=\"지점명 (필수)\"\n-              value={newBranchName}\n-              onChange={(e) => setNewBranchName(e.target.value)}\n-              onKeyPress={handleKeyPress}\n-              disabled={saving}\n-              autoFocus\n-            />\n-          </FormRow>\n-          <FormRow>\n-            <Input\n-              type=\"text\"\n-              placeholder=\"주소 (선택)\"\n-              value={newBranchAddress}\n-              onChange={(e) => setNewBranchAddress(e.target.value)}\n-              onKeyPress={handleKeyPress}\n-              disabled={saving}\n-            />\n-          </FormRow>\n-          <FormRow>\n-            <Input\n-              type=\"text\"\n-              placeholder=\"전화번호 (선택)\"\n-              value={newBranchPhone}\n-              onChange={(e) => setNewBranchPhone(e.target.value)}\n-              onKeyPress={handleKeyPress}\n-              disabled={saving}\n-            />\n-          </FormRow>\n-          <FormButtons>\n-            <SaveButton onClick={handleAddBranch} disabled={saving}>\n-              {saving ? '저장 중...' : '저장'}\n-            </SaveButton>\n-            <CancelButton onClick={handleCancel} disabled={saving}>\n-              취소\n-            </CancelButton>\n-          </FormButtons>\n-        </AddForm>\n-      )}\n-\n-      {!isAdding && (\n-        <AddButton onClick={() => setIsAdding(true)} disabled={loading}>\n-          + 새 지점 추가\n-        </AddButton>\n-      )}\n-\n-      <Table>\n-        <TableHeader>\n-          지점 목록\n-          <TableStats>총 {branches.length}개 지점</TableStats>\n-        </TableHeader>\n-        {branches.length === 0 ? (\n-          <EmptyState>등록된 지점이 없습니다.</EmptyState>\n-        ) : (\n-          branches.map((branch) => (\n-            <TableRow key={branch.id}>\n-              <BranchInfo>\n-                <BranchName>{branch.name}</BranchName>\n-                <BranchDetails>\n-                  {branch.address && (\n-                    <DetailItem>\n-                      <DetailLabel>주소:</DetailLabel>\n-                      <DetailValue>{branch.address}</DetailValue>\n-                    </DetailItem>\n-                  )}\n-                  {branch.phone && (\n-                    <DetailItem>\n-                      <DetailLabel>전화:</DetailLabel>\n-                      <DetailValue>{branch.phone}</DetailValue>\n-                    </DetailItem>\n-                  )}\n-                </BranchDetails>\n-              </BranchInfo>\n-              <ActionButtons>\n-                <EditButton \n-                  onClick={() => {\n-                    // TODO: 수정 기능 구현\n-                    alert('수정 기능은 곧 추가됩니다.');\n-                  }}\n-                  disabled={saving}\n-                >\n-                  수정\n-                </EditButton>\n-                <DeleteButton \n-                  onClick={() => handleDeleteBranch(branch.id)}\n-                  disabled={saving}\n-                >\n-                  삭제\n-                </DeleteButton>\n-              </ActionButtons>\n-            </TableRow>\n-          ))\n-        )}\n-      </Table>\n-    </Container>\n-  );\n-};\n-\n-export default BranchManagement;\n"
                },
                {
                    "date": 1761911246900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,10 +114,19 @@\n   flex-direction: column;\n   gap: 4px;\n `;\n \n-const BranchName = styled.span`\n+const BranchName = styled.span<{ isDefault?: boolean }>`\n   font-weight: 500;\n+  color: ${props => props.isDefault ? AppColors.primary : 'inherit'};\n+  ${props => props.isDefault && `\n+    &::after {\n+      content: ' (기본)';\n+      font-size: ${AppTextStyles.label3.fontSize};\n+      color: ${AppColors.primary};\n+      font-weight: 400;\n+    }\n+  `}\n `;\n \n const BranchDetails = styled.div`\n   display: flex;\n@@ -319,8 +328,17 @@\n       alert('지점명을 입력해주세요.');\n       return;\n     }\n \n+    // 중복 지점명 검사\n+    const existingBranch = branches.find(branch => \n+      branch.name.toLowerCase() === newBranchName.trim().toLowerCase()\n+    );\n+    if (existingBranch) {\n+      alert('이미 존재하는 지점명입니다.');\n+      return;\n+    }\n+\n     try {\n       setSaving(true);\n       setError(null);\n       \n@@ -353,8 +371,15 @@\n     }\n   };\n \n   const handleDeleteBranch = async (id: string) => {\n+    // '전체' 지점 삭제 방지\n+    const branchToDelete = branches.find(branch => branch.id === id);\n+    if (branchToDelete?.name === '전체') {\n+      alert('전체 지점은 삭제할 수 없습니다.');\n+      return;\n+    }\n+\n     if (!window.confirm('정말로 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.')) {\n       return;\n     }\n \n@@ -389,8 +414,18 @@\n     }\n \n     if (!editingId) return;\n \n+    // 중복 지점명 검사 (현재 편집 중인 지점 제외)\n+    const existingBranch = branches.find(branch => \n+      branch.id !== editingId && \n+      branch.name.toLowerCase() === editBranchName.trim().toLowerCase()\n+    );\n+    if (existingBranch) {\n+      alert('이미 존재하는 지점명입니다.');\n+      return;\n+    }\n+\n     try {\n       setSaving(true);\n       setError(null);\n       \n@@ -612,9 +647,9 @@\n               ) : (\n                 // 보기 모드\n                 <>\n                   <BranchInfo>\n-                    <BranchName>{branch.name}</BranchName>\n+                    <BranchName isDefault={branch.name === '전체'}>{branch.name}</BranchName>\n                     <BranchDetails>\n                       {branch.address && (\n                         <DetailItem>\n                           <DetailLabel>주소:</DetailLabel>\n@@ -637,9 +672,10 @@\n                       수정\n                     </EditButton>\n                     <DeleteButton \n                       onClick={() => handleDeleteBranch(branch.id)}\n-                      disabled={saving || editingId !== null}\n+                      disabled={saving || editingId !== null || branch.name === '전체'}\n+                      title={branch.name === '전체' ? '전체 지점은 삭제할 수 없습니다' : ''}\n                     >\n                       삭제\n                     </DeleteButton>\n                   </ActionButtons>\n"
                }
            ],
            "date": 1759897448295,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\n\nconst Container = styled.div`\n  width: 100%;\n`;\n\nconst AddButton = styled.button`\n  width: 100%;\n  padding: 12px;\n  margin-bottom: 16px;\n  border: 2px dashed ${AppColors.borderLight};\n  border-radius: 8px;\n  background-color: transparent;\n  color: ${AppColors.onSurface};\n  font-size: ${AppTextStyles.body2.fontSize};\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    border-color: ${AppColors.primary};\n    color: ${AppColors.primary};\n    background-color: ${AppColors.primary}05;\n  }\n`;\n\nconst Table = styled.div`\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  overflow: hidden;\n`;\n\nconst TableHeader = styled.div`\n  background-color: ${AppColors.background};\n  padding: 12px 16px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  font-weight: 600;\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onSurface};\n`;\n\nconst TableRow = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px 16px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onSurface};\n\n  &:last-child {\n    border-bottom: none;\n  }\n\n  &:hover {\n    background-color: ${AppColors.background};\n  }\n`;\n\nconst BranchName = styled.span`\n  flex: 1;\n`;\n\nconst DeleteButton = styled.button`\n  padding: 4px 8px;\n  border: 1px solid ${AppColors.error};\n  border-radius: 4px;\n  background-color: transparent;\n  color: ${AppColors.error};\n  font-size: ${AppTextStyles.label3.fontSize};\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: ${AppColors.error};\n    color: white;\n  }\n`;\n\nconst EmptyState = styled.div`\n  padding: 24px;\n  text-align: center;\n  color: ${AppColors.onSurface};\n  font-size: ${AppTextStyles.body2.fontSize};\n`;\n\nconst AddForm = styled.div`\n  padding: 16px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  margin-bottom: 16px;\n  background-color: ${AppColors.background};\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 8px 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 4px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  margin-bottom: 12px;\n  box-sizing: border-box;\n\n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n  }\n`;\n\nconst FormButtons = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SaveButton = styled.button`\n  flex: 1;\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  background-color: ${AppColors.primary};\n  color: white;\n  font-size: ${AppTextStyles.body2.fontSize};\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: ${AppColors.secondary};\n  }\n`;\n\nconst CancelButton = styled.button`\n  flex: 1;\n  padding: 8px 16px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 4px;\n  background-color: transparent;\n  color: ${AppColors.onSurface};\n  font-size: ${AppTextStyles.body2.fontSize};\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: ${AppColors.background};\n  }\n`;\n\ninterface Branch {\n  id: string;\n  name: string;\n}\n\nconst BranchManagement: React.FC = () => {\n  const [branches, setBranches] = useState<Branch[]>([\n    { id: '1', name: '강남점' },\n    { id: '2', name: '홍대점' },\n    { id: '3', name: '판교점' },\n  ]);\n  const [isAdding, setIsAdding] = useState(false);\n  const [newBranchName, setNewBranchName] = useState('');\n\n  const handleAddBranch = () => {\n    if (newBranchName.trim()) {\n      const newBranch: Branch = {\n        id: Date.now().toString(),\n        name: newBranchName.trim(),\n      };\n      setBranches([...branches, newBranch]);\n      setNewBranchName('');\n      setIsAdding(false);\n    }\n  };\n\n  const handleDeleteBranch = (id: string) => {\n    if (window.confirm('정말로 삭제하시겠습니까?')) {\n      setBranches(branches.filter(branch => branch.id !== id));\n    }\n  };\n\n  const handleCancel = () => {\n    setNewBranchName('');\n    setIsAdding(false);\n  };\n\n  return (\n    <Container>\n      {isAdding && (\n        <AddForm>\n          <Input\n            type=\"text\"\n            placeholder=\"지점명을 입력하세요\"\n            value={newBranchName}\n            onChange={(e) => setNewBranchName(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && handleAddBranch()}\n            autoFocus\n          />\n          <FormButtons>\n            <SaveButton onClick={handleAddBranch}>저장</SaveButton>\n            <CancelButton onClick={handleCancel}>취소</CancelButton>\n          </FormButtons>\n        </AddForm>\n      )}\n\n      {!isAdding && (\n        <AddButton onClick={() => setIsAdding(true)}>\n          + 새 지점 추가\n        </AddButton>\n      )}\n\n      <Table>\n        <TableHeader>지점 목록</TableHeader>\n        {branches.length === 0 ? (\n          <EmptyState>등록된 지점이 없습니다.</EmptyState>\n        ) : (\n          branches.map((branch) => (\n            <TableRow key={branch.id}>\n              <BranchName>{branch.name}</BranchName>\n              <DeleteButton onClick={() => handleDeleteBranch(branch.id)}>\n                삭제\n              </DeleteButton>\n            </TableRow>\n          ))\n        )}\n      </Table>\n    </Container>\n  );\n};\n\nexport default BranchManagement;\n"
        }
    ]
}