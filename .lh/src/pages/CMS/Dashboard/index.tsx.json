{
    "sourceFile": "src/pages/CMS/Dashboard/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759105835943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760162918009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import React, { useState } from 'react';\n import styled from 'styled-components';\n-import CMSLayout from '../../../components/CMSLayout';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n \n // 스타일 컴포넌트들\n@@ -272,10 +271,9 @@\n     alert(`${action} 기능을 실행합니다. (데모)`);\n   };\n \n   return (\n-    <CMSLayout currentPath=\"/cms/dashboard\">\n-      <DashboardContainer>\n+    <DashboardContainer>\n         <GridContainer>\n           <LeftColumn>\n             {/* 빠른 검색 카드 */}\n             <Card>\n@@ -389,9 +387,8 @@\n             </Card>\n           </RightColumn>\n         </GridContainer>\n       </DashboardContainer>\n-    </CMSLayout>\n-  );\n-};\n+    );\n+  };\n \n export default Dashboard;\n"
                }
            ],
            "date": 1759105835943,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport CMSLayout from '../../../components/CMSLayout';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\n\n// 스타일 컴포넌트들\nconst DashboardContainer = styled.div`\n  width: 100%;\n`;\n\nconst GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  gap: 16px;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nconst LeftColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst RightColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst Card = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n`;\n\nconst CardHeader = styled.div`\n  padding: 14px 16px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  font-weight: 600;\n  font-size: ${AppTextStyles.body1.fontSize};\n`;\n\nconst CardBody = styled.div`\n  padding: 16px;\n`;\n\nconst SearchRow = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n`;\n\nconst SearchInput = styled.input`\n  flex: 1;\n  padding: 10px 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 12px;\n  font-size: 14px;\n  outline: none;\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n`;\n\nconst Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n  padding: 10px 14px;\n  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n  border-radius: 12px;\n  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 14px;\n  \n  &:hover {\n    opacity: 0.9;\n  }\n`;\n\nconst FilterPanel = styled.div<{ $isVisible: boolean }>`\n  display: ${props => props.$isVisible ? 'block' : 'none'};\n  margin-top: 10px;\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n`;\n\nconst FilterButton = styled.button`\n  padding: 8px 12px;\n  border-radius: 12px;\n  background: ${AppColors.primary}10;\n  border: 1px solid ${AppColors.borderLight};\n  cursor: pointer;\n  font-size: 14px;\n  \n  &:hover {\n    background: ${AppColors.primary}20;\n  }\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 14px;\n`;\n\nconst TableHeader = styled.thead`\n  background: ${AppColors.background};\n`;\n\nconst TableRow = styled.tr`\n  &:hover td {\n    background: ${AppColors.primary}05;\n  }\n`;\n\nconst TableHeaderCell = styled.th`\n  padding: 10px 12px;\n  text-align: left;\n  border-top: 1px solid ${AppColors.borderLight};\n  font-weight: 600;\n`;\n\nconst TableCell = styled.td`\n  padding: 10px 12px;\n  border-top: 1px solid ${AppColors.borderLight};\n`;\n\nconst Chip = styled.span`\n  display: inline-block;\n  padding: 4px 8px;\n  background: ${AppColors.primary}10;\n  color: ${AppColors.primary};\n  border-radius: 999px;\n  margin-right: 6px;\n  margin-bottom: 4px;\n  font-size: 12px;\n`;\n\nconst StatsGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 12px;\n`;\n\nconst StatCard = styled.div`\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 14px;\n  background: ${AppColors.surface};\n`;\n\nconst StatLabel = styled.div`\n  font-size: 12px;\n  color: ${AppColors.onInput1};\n  margin-bottom: 2px;\n`;\n\nconst StatValue = styled.div`\n  font-size: 22px;\n  font-weight: 700;\n`;\n\nconst NotificationItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 6px;\n  \n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst NotificationText = styled.span<{ $isWarning?: boolean }>`\n  color: ${props => props.$isWarning ? AppColors.error : AppColors.onSurface};\n`;\n\nconst NotificationCount = styled.strong`\n  font-weight: 600;\n`;\n\nconst FullWidthButton = styled(Button)`\n  width: 100%;\n  margin-top: 12px;\n`;\n\n// 멤버 타입 정의\ninterface Member {\n  id: string;\n  name: string;\n  tags: string[];\n  coach: string;\n  points: number;\n  remainingSessions: number;\n  lastVisit: string;\n}\n\n// 더미 데이터\nconst MEMBERS: Member[] = [\n  { id: \"LV0001\", name: \"김라비\", tags: [\"WBM\", \"릴렉싱\"], coach: \"한수민\", points: 120000, remainingSessions: 8, lastVisit: \"2025-09-07\" },\n  { id: \"LV0002\", name: \"박봄\", tags: [\"릴렉싱\"], coach: \"임정현\", points: 40000, remainingSessions: 2, lastVisit: \"2025-09-09\" },\n  { id: \"LV0003\", name: \"최다움\", tags: [\"WBM\"], coach: \"민웅희\", points: 0, remainingSessions: 0, lastVisit: \"2025-08-28\" },\n  { id: \"LV0004\", name: \"이지유\", tags: [\"WBM\", \"VIP\"], coach: \"한수민\", points: 320000, remainingSessions: 14, lastVisit: \"2025-09-10\" },\n];\n\nconst Dashboard: React.FC = () => {\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [filteredMembers, setFilteredMembers] = useState<Member[]>(MEMBERS);\n  const [isFilterVisible, setIsFilterVisible] = useState<boolean>(false);\n\n  // 검색 기능\n  const handleSearch = () => {\n    const query = searchQuery.toLowerCase().trim();\n    if (!query) {\n      setFilteredMembers(MEMBERS);\n      return;\n    }\n    \n    const filtered = MEMBERS.filter(member =>\n      member.id.toLowerCase().includes(query) ||\n      member.name.toLowerCase().includes(query) ||\n      member.coach.toLowerCase().includes(query)\n    );\n    setFilteredMembers(filtered);\n  };\n\n  // Enter 키로 검색\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  // 필터 토글\n  const toggleFilter = () => {\n    setIsFilterVisible(!isFilterVisible);\n  };\n\n  // 필터 액션들\n  const handleFilterAction = (filterType: string) => {\n    let filtered: Member[] = [];\n    \n    switch (filterType) {\n      case 'WBM':\n        filtered = MEMBERS.filter(member => member.tags.includes('WBM'));\n        break;\n      case '릴렉싱':\n        filtered = MEMBERS.filter(member => member.tags.includes('릴렉싱'));\n        break;\n      case '휴면':\n        // 최근 내원일이 30일 이상인 회원\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        filtered = MEMBERS.filter(member => new Date(member.lastVisit) < thirtyDaysAgo);\n        break;\n      default:\n        filtered = MEMBERS;\n    }\n    \n    setFilteredMembers(filtered);\n    setSearchQuery('');\n  };\n\n  // 알림 액션\n  const handleNotificationAction = (action: string) => {\n    alert(`${action} 기능을 실행합니다. (데모)`);\n  };\n\n  return (\n    <CMSLayout currentPath=\"/cms/dashboard\">\n      <DashboardContainer>\n        <GridContainer>\n          <LeftColumn>\n            {/* 빠른 검색 카드 */}\n            <Card>\n              <CardHeader>빠른 검색</CardHeader>\n              <CardBody>\n                <SearchRow>\n                  <SearchInput\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"회원명 / ID / 코치 검색\"\n                  />\n                  <Button onClick={handleSearch}>검색</Button>\n                  <Button variant=\"secondary\" onClick={toggleFilter}>필터</Button>\n                </SearchRow>\n                <FilterPanel $isVisible={isFilterVisible}>\n                  <FilterButton onClick={() => handleFilterAction('WBM')}>WBM만</FilterButton>\n                  <FilterButton onClick={() => handleFilterAction('릴렉싱')}>릴렉싱만</FilterButton>\n                  <FilterButton onClick={() => handleFilterAction('휴면')}>휴면만</FilterButton>\n                </FilterPanel>\n              </CardBody>\n            </Card>\n\n            {/* 회원 목록 카드 */}\n            <Card>\n              <CardHeader>회원 목록</CardHeader>\n              <CardBody style={{ overflowX: 'auto' }}>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHeaderCell>회원ID</TableHeaderCell>\n                      <TableHeaderCell>이름</TableHeaderCell>\n                      <TableHeaderCell>태그</TableHeaderCell>\n                      <TableHeaderCell>담당 코치</TableHeaderCell>\n                      <TableHeaderCell>포인트</TableHeaderCell>\n                      <TableHeaderCell>잔여</TableHeaderCell>\n                      <TableHeaderCell>최근 내원</TableHeaderCell>\n                    </TableRow>\n                  </TableHeader>\n                  <tbody>\n                    {filteredMembers.map((member) => (\n                      <TableRow key={member.id}>\n                        <TableCell>{member.id}</TableCell>\n                        <TableCell>{member.name}</TableCell>\n                        <TableCell>\n                          {member.tags.map(tag => (\n                            <Chip key={tag}>{tag}</Chip>\n                          ))}\n                        </TableCell>\n                        <TableCell>{member.coach}</TableCell>\n                        <TableCell>{member.points.toLocaleString()}p</TableCell>\n                        <TableCell>{member.remainingSessions}</TableCell>\n                        <TableCell>{member.lastVisit}</TableCell>\n                      </TableRow>\n                    ))}\n                  </tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </LeftColumn>\n\n          <RightColumn>\n            {/* 오늘의 요약 카드 */}\n            <Card>\n              <CardHeader>오늘의 요약</CardHeader>\n              <CardBody>\n                <StatsGrid>\n                  <StatCard>\n                    <StatLabel>금일 예약</StatLabel>\n                    <StatValue>42</StatValue>\n                  </StatCard>\n                  <StatCard>\n                    <StatLabel>체크인</StatLabel>\n                    <StatValue>35</StatValue>\n                  </StatCard>\n                  <StatCard>\n                    <StatLabel>완료 세션</StatLabel>\n                    <StatValue>29</StatValue>\n                  </StatCard>\n                  <StatCard>\n                    <StatLabel>취소/노쇼</StatLabel>\n                    <StatValue>4</StatValue>\n                  </StatCard>\n                </StatsGrid>\n              </CardBody>\n            </Card>\n\n            {/* 알림 센터 카드 */}\n            <Card>\n              <CardHeader>알림 센터</CardHeader>\n              <CardBody>\n                <NotificationItem>\n                  <NotificationText>예약 D-1 리마인드 발송</NotificationText>\n                  <NotificationCount>24건</NotificationCount>\n                </NotificationItem>\n                <NotificationItem>\n                  <NotificationText>휴면 30일 대상</NotificationText>\n                  <NotificationCount>7명</NotificationCount>\n                </NotificationItem>\n                <NotificationItem>\n                  <NotificationText $isWarning>잔여세션 1회 이하</NotificationText>\n                  <NotificationCount>5명</NotificationCount>\n                </NotificationItem>\n                <FullWidthButton \n                  variant=\"secondary\"\n                  onClick={() => handleNotificationAction('대상자 문자 보내기')}\n                >\n                  대상자 문자 보내기\n                </FullWidthButton>\n              </CardBody>\n            </Card>\n          </RightColumn>\n        </GridContainer>\n      </DashboardContainer>\n    </CMSLayout>\n  );\n};\n\nexport default Dashboard;\n"
        }
    ]
}