{
    "sourceFile": "src/pages/CMS/Member/MemberRegisterNew.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1760248357523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760250172406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n         jibunAddress: '',\n       },\n     },\n     joinInfo: {\n+      branchId: '',\n       coach: '',\n       joinPath: '',\n       loginId: '',\n       loginPassword: '',\n@@ -148,8 +149,9 @@\n           jibunAddress: '',\n         },\n       },\n       joinInfo: {\n+        branchId: '',\n         coach: '',\n         joinPath: '',\n         loginId: '',\n         loginPassword: '',\n"
                },
                {
                    "date": 1760253496925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,10 @@\n import BasicInfoStep from './BasicInfoStep';\n import JoinInfoStep from './JoinInfoStep';\n import PaymentInfoStep from './PaymentInfoStep';\n import AgreementStep from './AgreementStep';\n+import { saveDocumentAsFile } from './PreviewDocument';\n+import { dbManager } from '../../../utils/indexedDB';\n \n const MemberRegister: React.FC = () => {\n   const [currentStep, setCurrentStep] = useState(1);\n   const [formData, setFormData] = useState<MemberFormData>({\n@@ -127,75 +129,130 @@\n   const handleSkipPayment = () => {\n     setCurrentStep(4);\n   };\n \n-  const handleSubmit = () => {\n-    console.log('회원 등록 데이터:', formData);\n-    alert('회원이 성공적으로 등록되었습니다!');\n-    \n-    // 등록 완료 후 초기화\n-    setCurrentStep(1);\n-    setFormData({\n-      basicInfo: {\n-        name: '',\n-        phone: '',\n-        email: '',\n-        birth: '',\n-        gender: '',\n-        addressInfo: {\n-          address: '',\n-          sigunguCode: '',\n-          dong: '',\n-          roadAddress: '',\n-          jibunAddress: '',\n+  const handleSubmit = async () => {\n+    try {\n+      console.log('회원 등록 데이터:', formData);\n+      \n+      // 1. 지점명과 코치명 가져오기\n+      const branches = await dbManager.getAllBranches();\n+      const staff = await dbManager.getAllStaff();\n+      const branch = branches.find(b => b.id === formData.joinInfo.branchId);\n+      const coach = staff.find(s => s.id === formData.joinInfo.coach);\n+      \n+      // 2. 회원 정보 저장 (기본정보 + 가입정보)\n+      const memberId = await dbManager.addMember({\n+        name: formData.basicInfo.name,\n+        phone: formData.basicInfo.phone,\n+        email: formData.basicInfo.email,\n+        birth: formData.basicInfo.birth,\n+        gender: formData.basicInfo.gender as 'male' | 'female' | '',\n+        address: formData.basicInfo.addressInfo.address,\n+        sigunguCode: formData.basicInfo.addressInfo.sigunguCode,\n+        dong: formData.basicInfo.addressInfo.dong,\n+        roadAddress: formData.basicInfo.addressInfo.roadAddress,\n+        jibunAddress: formData.basicInfo.addressInfo.jibunAddress,\n+        branchId: formData.joinInfo.branchId,\n+        branchName: branch?.name || '',\n+        coach: formData.joinInfo.coach,\n+        coachName: coach?.name || '',\n+        joinPath: formData.joinInfo.joinPath,\n+        loginId: formData.joinInfo.loginId,\n+        loginPassword: formData.joinInfo.loginPassword,\n+        enableLogin: formData.joinInfo.enableLogin,\n+        agreementInfo: formData.agreementInfo,\n+        isActive: true,\n+      });\n+      \n+      // 3. 결제 정보 저장 (상품이 선택된 경우에만)\n+      if (formData.paymentInfo.selectedProducts.length > 0) {\n+        const totalAmount = formData.paymentInfo.selectedProducts.reduce(\n+          (sum, product) => sum + product.price, 0\n+        );\n+        \n+        await dbManager.addPayment({\n+          memberId: memberId,\n+          memberName: formData.basicInfo.name,\n+          products: formData.paymentInfo.selectedProducts,\n+          totalAmount: totalAmount,\n+          paymentStatus: 'pending', // 기본값으로 대기 상태\n+          notes: '회원 등록 시 선택된 상품',\n+        });\n+      }\n+      \n+      // 4. 회원 등록 문서를 HTML 파일로 저장\n+      const fileName = await saveDocumentAsFile(formData);\n+      \n+      alert(`회원이 성공적으로 등록되었습니다!\\n회원 ID: ${memberId}\\n등록 문서가 \"${fileName}\" 파일로 저장되었습니다.`);\n+      \n+      // 등록 완료 후 초기화\n+      setCurrentStep(1);\n+      setFormData({\n+        basicInfo: {\n+          name: '',\n+          phone: '',\n+          email: '',\n+          birth: '',\n+          gender: '',\n+          addressInfo: {\n+            address: '',\n+            sigunguCode: '',\n+            dong: '',\n+            roadAddress: '',\n+            jibunAddress: '',\n+          },\n         },\n-      },\n-      joinInfo: {\n-        branchId: '',\n-        coach: '',\n-        joinPath: '',\n-        loginId: '',\n-        loginPassword: '',\n-        enableLogin: false,\n-      },\n-      paymentInfo: {\n-        selectedProducts: [],\n-      },\n-      agreementInfo: {\n-        agreements: [\n-          {\n-            id: 'terms',\n-            title: '회원이용약관',\n-            content: '회원이용약관 내용입니다...',\n-            required: true,\n-            agreed: false,\n-          },\n-          {\n-            id: 'privacy',\n-            title: '개인정보처리방침',\n-            content: '개인정보처리방침 내용입니다...',\n-            required: true,\n-            agreed: false,\n-          },\n-          {\n-            id: 'service',\n-            title: '서비스이용약관',\n-            content: '서비스이용약관 내용입니다...',\n-            required: true,\n-            agreed: false,\n-          },\n-          {\n-            id: 'marketing',\n-            title: '마케팅활용 동의',\n-            content: '마케팅활용 동의 내용입니다...',\n-            required: false,\n-            agreed: false,\n-          },\n-        ],\n-        customerSignature: '',\n-        staffSignature: '',\n-      },\n-    });\n+        joinInfo: {\n+          branchId: '',\n+          coach: '',\n+          joinPath: '',\n+          loginId: '',\n+          loginPassword: '',\n+          enableLogin: false,\n+        },\n+        paymentInfo: {\n+          selectedProducts: [],\n+        },\n+        agreementInfo: {\n+          agreements: [\n+            {\n+              id: 'terms',\n+              title: '회원이용약관',\n+              content: '회원이용약관 내용입니다...',\n+              required: true,\n+              agreed: false,\n+            },\n+            {\n+              id: 'privacy',\n+              title: '개인정보처리방침',\n+              content: '개인정보처리방침 내용입니다...',\n+              required: true,\n+              agreed: false,\n+            },\n+            {\n+              id: 'service',\n+              title: '서비스이용약관',\n+              content: '서비스이용약관 내용입니다...',\n+              required: true,\n+              agreed: false,\n+            },\n+            {\n+              id: 'marketing',\n+              title: '마케팅활용 동의',\n+              content: '마케팅활용 동의 내용입니다...',\n+              required: false,\n+              agreed: false,\n+            },\n+          ],\n+          customerSignature: '',\n+          staffSignature: '',\n+        },\n+      });\n+    } catch (error) {\n+      console.error('회원 등록 처리 중 오류:', error);\n+      alert(`회원 등록 중 오류가 발생했습니다: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);\n+    }\n   };\n \n   const renderStepContent = () => {\n     const stepProps = {\n"
                },
                {
                    "date": 1760253605918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,18 +131,23 @@\n   };\n \n   const handleSubmit = async () => {\n     try {\n-      console.log('회원 등록 데이터:', formData);\n+      console.log('회원 등록 시작 - 폼 데이터:', formData);\n       \n       // 1. 지점명과 코치명 가져오기\n+      console.log('지점과 직원 정보 조회 중...');\n       const branches = await dbManager.getAllBranches();\n       const staff = await dbManager.getAllStaff();\n       const branch = branches.find(b => b.id === formData.joinInfo.branchId);\n       const coach = staff.find(s => s.id === formData.joinInfo.coach);\n       \n+      console.log('선택된 지점:', branch);\n+      console.log('선택된 코치:', coach);\n+      \n       // 2. 회원 정보 저장 (기본정보 + 가입정보)\n-      const memberId = await dbManager.addMember({\n+      console.log('회원 정보 저장 중...');\n+      const memberData = {\n         name: formData.basicInfo.name,\n         phone: formData.basicInfo.phone,\n         email: formData.basicInfo.email,\n         birth: formData.basicInfo.birth,\n@@ -161,28 +166,36 @@\n         loginPassword: formData.joinInfo.loginPassword,\n         enableLogin: formData.joinInfo.enableLogin,\n         agreementInfo: formData.agreementInfo,\n         isActive: true,\n-      });\n+      };\n       \n+      console.log('저장할 회원 데이터:', memberData);\n+      const memberId = await dbManager.addMember(memberData);\n+      console.log('회원 저장 완료 - ID:', memberId);\n+      \n       // 3. 결제 정보 저장 (상품이 선택된 경우에만)\n       if (formData.paymentInfo.selectedProducts.length > 0) {\n+        console.log('결제 정보 저장 중...');\n         const totalAmount = formData.paymentInfo.selectedProducts.reduce(\n           (sum, product) => sum + product.price, 0\n         );\n         \n-        await dbManager.addPayment({\n+        const paymentId = await dbManager.addPayment({\n           memberId: memberId,\n           memberName: formData.basicInfo.name,\n           products: formData.paymentInfo.selectedProducts,\n           totalAmount: totalAmount,\n           paymentStatus: 'pending', // 기본값으로 대기 상태\n           notes: '회원 등록 시 선택된 상품',\n         });\n+        console.log('결제 정보 저장 완료 - ID:', paymentId);\n       }\n       \n       // 4. 회원 등록 문서를 HTML 파일로 저장\n+      console.log('문서 생성 중...');\n       const fileName = await saveDocumentAsFile(formData);\n+      console.log('문서 저장 완료:', fileName);\n       \n       alert(`회원이 성공적으로 등록되었습니다!\\n회원 ID: ${memberId}\\n등록 문서가 \"${fileName}\" 파일로 저장되었습니다.`);\n       \n       // 등록 완료 후 초기화\n"
                },
                {
                    "date": 1760254633084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,10 +106,20 @@\n       case 3:\n         return true; // 결제정보는 선택사항\n       case 4:\n         const requiredAgreements = formData.agreementInfo.agreements.filter(a => a.required);\n-        return requiredAgreements.every(a => a.agreed) && \n-               !!(formData.agreementInfo.customerSignature && formData.agreementInfo.staffSignature);\n+        const allRequiredAgreed = requiredAgreements.every(a => a.agreed);\n+        const hasCustomerSignature = !!formData.agreementInfo.customerSignature;\n+        const hasStaffSignature = !!formData.agreementInfo.staffSignature;\n+        \n+        console.log('=== 4단계 검증 ===');\n+        console.log('필수 약관 수:', requiredAgreements.length);\n+        console.log('필수 약관 모두 동의:', allRequiredAgreed);\n+        console.log('고객 서명 존재:', hasCustomerSignature);\n+        console.log('직원 서명 존재:', hasStaffSignature);\n+        console.log('전체 검증 결과:', allRequiredAgreed && hasCustomerSignature && hasStaffSignature);\n+        \n+        return allRequiredAgreed && hasCustomerSignature && hasStaffSignature;\n       default:\n         return true;\n     }\n   };\n@@ -131,22 +141,38 @@\n   };\n \n   const handleSubmit = async () => {\n     try {\n-      console.log('회원 등록 시작 - 폼 데이터:', formData);\n+      console.log('=== 회원 등록 시작 ===');\n+      console.log('폼 데이터:', formData);\n       \n+      // 0. IndexedDB 연결 상태 확인\n+      console.log('IndexedDB 상태 확인 중...');\n+      try {\n+        const testBranches = await dbManager.getAllBranches();\n+        console.log('IndexedDB 연결 성공, 지점 수:', testBranches.length);\n+      } catch (dbError) {\n+        console.error('IndexedDB 연결 실패:', dbError);\n+        throw new Error('데이터베이스 연결에 실패했습니다.');\n+      }\n+      \n       // 1. 지점명과 코치명 가져오기\n-      console.log('지점과 직원 정보 조회 중...');\n+      console.log('=== 1단계: 지점과 직원 정보 조회 ===');\n       const branches = await dbManager.getAllBranches();\n       const staff = await dbManager.getAllStaff();\n+      console.log('전체 지점 수:', branches.length);\n+      console.log('전체 직원 수:', staff.length);\n+      \n       const branch = branches.find(b => b.id === formData.joinInfo.branchId);\n       const coach = staff.find(s => s.id === formData.joinInfo.coach);\n       \n-      console.log('선택된 지점:', branch);\n-      console.log('선택된 코치:', coach);\n+      console.log('선택된 지점 ID:', formData.joinInfo.branchId);\n+      console.log('찾은 지점 정보:', branch);\n+      console.log('선택된 코치 ID:', formData.joinInfo.coach);\n+      console.log('찾은 코치 정보:', coach);\n       \n       // 2. 회원 정보 저장 (기본정보 + 가입정보)\n-      console.log('회원 정보 저장 중...');\n+      console.log('=== 2단계: 회원 정보 저장 ===');\n       const memberData = {\n         name: formData.basicInfo.name,\n         phone: formData.basicInfo.phone,\n         email: formData.basicInfo.email,\n@@ -166,14 +192,58 @@\n         loginPassword: formData.joinInfo.loginPassword,\n         enableLogin: formData.joinInfo.enableLogin,\n         agreementInfo: formData.agreementInfo,\n         isActive: true,\n+        registrationDate: new Date().toISOString(),\n+        // 기본값으로 빈 값 설정 - 추후 필요시 업데이트\n+        agreementDate: '',\n+        signatureData: '',\n+        membershipType: '',\n+        duration: 0,\n+        durationUnit: '',\n+        startDate: '',\n+        endDate: '',\n+        monthlyFee: 0,\n+        totalAmount: 0,\n+        discountAmount: 0,\n+        finalAmount: 0,\n+        paymentMethod: '',\n+        paymentDate: '',\n+        remarks: ''\n       };\n       \n       console.log('저장할 회원 데이터:', memberData);\n+      console.log('데이터 타입 검증:');\n+      console.log('- name 타입:', typeof memberData.name, '값:', memberData.name);\n+      console.log('- phone 타입:', typeof memberData.phone, '값:', memberData.phone);\n+      console.log('- email 타입:', typeof memberData.email, '값:', memberData.email);\n+      \n+      console.log('dbManager.addMember 함수 호출 전...');\n       const memberId = await dbManager.addMember(memberData);\n-      console.log('회원 저장 완료 - ID:', memberId);\n+      console.log('dbManager.addMember 함수 호출 후 - 반환값:', memberId);\n+      console.log('반환값 타입:', typeof memberId);\n       \n+      if (!memberId) {\n+        throw new Error('회원 저장에 실패했습니다 - 반환값 없음');\n+      }\n+      \n+      // 즉시 저장 확인\n+      console.log('=== 저장 확인 테스트 ===');\n+      try {\n+        const allMembers = await dbManager.getAllMembers();\n+        console.log('저장 후 전체 회원 수:', allMembers.length);\n+        console.log('저장된 모든 회원:', allMembers);\n+        \n+        const foundMember = allMembers.find(m => m.id === memberId);\n+        if (foundMember) {\n+          console.log('✅ 방금 저장한 회원을 데이터베이스에서 찾았습니다:', foundMember);\n+        } else {\n+          console.error('❌ 방금 저장한 회원을 데이터베이스에서 찾을 수 없습니다');\n+        }\n+      } catch (verifyError) {\n+        console.error('저장 확인 중 오류:', verifyError);\n+      }\n+      \n       // 3. 결제 정보 저장 (상품이 선택된 경우에만)\n       if (formData.paymentInfo.selectedProducts.length > 0) {\n         console.log('결제 정보 저장 중...');\n         const totalAmount = formData.paymentInfo.selectedProducts.reduce(\n"
                },
                {
                    "date": 1760255178501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,10 +147,20 @@\n       \n       // 0. IndexedDB 연결 상태 확인\n       console.log('IndexedDB 상태 확인 중...');\n       try {\n+        // 데이터베이스 테이블 존재 여부 확인\n+        console.log('데이터베이스 객체:', dbManager);\n+        \n         const testBranches = await dbManager.getAllBranches();\n         console.log('IndexedDB 연결 성공, 지점 수:', testBranches.length);\n+        \n+        // members 테이블 접근 테스트\n+        console.log('회원 테이블 접근 테스트 중...');\n+        const existingMembers = await dbManager.getAllMembers();\n+        console.log('기존 회원 수:', existingMembers.length);\n+        console.log('기존 회원 목록:', existingMembers);\n+        \n       } catch (dbError) {\n         console.error('IndexedDB 연결 실패:', dbError);\n         throw new Error('데이터베이스 연결에 실패했습니다.');\n       }\n@@ -217,11 +227,20 @@\n       console.log('- phone 타입:', typeof memberData.phone, '값:', memberData.phone);\n       console.log('- email 타입:', typeof memberData.email, '값:', memberData.email);\n       \n       console.log('dbManager.addMember 함수 호출 전...');\n-      const memberId = await dbManager.addMember(memberData);\n-      console.log('dbManager.addMember 함수 호출 후 - 반환값:', memberId);\n-      console.log('반환값 타입:', typeof memberId);\n+      let memberId: string;\n+      try {\n+        memberId = await dbManager.addMember(memberData);\n+        console.log('dbManager.addMember 함수 호출 후 - 반환값:', memberId);\n+        console.log('반환값 타입:', typeof memberId);\n+      } catch (addMemberError) {\n+        console.error('❌ addMember 함수에서 에러 발생:', addMemberError);\n+        console.error('에러 타입:', typeof addMemberError);\n+        console.error('에러 메시지:', addMemberError instanceof Error ? addMemberError.message : addMemberError);\n+        console.error('에러 스택:', addMemberError instanceof Error ? addMemberError.stack : '스택 없음');\n+        throw new Error(`회원 저장 중 오류: ${addMemberError instanceof Error ? addMemberError.message : '알 수 없는 오류'}`);\n+      }\n       \n       if (!memberId) {\n         throw new Error('회원 저장에 실패했습니다 - 반환값 없음');\n       }\n"
                }
            ],
            "date": 1760248357523,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport { \n  PageContainer, \n  PageHeader, \n  PageTitle, \n  PageDescription,\n  StepContainer,\n  StepWrapper,\n  StepItem,\n  StepCircle,\n  StepLabel,\n  StepLine,\n  Card,\n  ButtonGroup,\n  Button\n} from './StyledComponents';\nimport { MemberFormData } from './types';\nimport BasicInfoStep from './BasicInfoStep';\nimport JoinInfoStep from './JoinInfoStep';\nimport PaymentInfoStep from './PaymentInfoStep';\nimport AgreementStep from './AgreementStep';\n\nconst MemberRegister: React.FC = () => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [formData, setFormData] = useState<MemberFormData>({\n    basicInfo: {\n      name: '',\n      phone: '',\n      email: '',\n      birth: '',\n      gender: '',\n      addressInfo: {\n        address: '',\n        sigunguCode: '',\n        dong: '',\n        roadAddress: '',\n        jibunAddress: '',\n      },\n    },\n    joinInfo: {\n      coach: '',\n      joinPath: '',\n      loginId: '',\n      loginPassword: '',\n      enableLogin: false,\n    },\n    paymentInfo: {\n      selectedProducts: [],\n    },\n    agreementInfo: {\n      agreements: [\n        {\n          id: 'terms',\n          title: '회원이용약관',\n          content: '회원이용약관 내용입니다...',\n          required: true,\n          agreed: false,\n        },\n        {\n          id: 'privacy',\n          title: '개인정보처리방침',\n          content: '개인정보처리방침 내용입니다...',\n          required: true,\n          agreed: false,\n        },\n        {\n          id: 'service',\n          title: '서비스이용약관',\n          content: '서비스이용약관 내용입니다...',\n          required: true,\n          agreed: false,\n        },\n        {\n          id: 'marketing',\n          title: '마케팅활용 동의',\n          content: '마케팅활용 동의 내용입니다...',\n          required: false,\n          agreed: false,\n        },\n      ],\n      customerSignature: '',\n      staffSignature: '',\n    },\n  });\n\n  const steps = [\n    { number: 1, label: '기본정보' },\n    { number: 2, label: '가입정보' },\n    { number: 3, label: '결제정보' },\n    { number: 4, label: '동의서명' },\n  ];\n\n  const handleFormUpdate = (updatedData: Partial<MemberFormData>) => {\n    setFormData(prev => ({ ...prev, ...updatedData }));\n  };\n\n  const validateCurrentStep = (): boolean => {\n    switch (currentStep) {\n      case 1:\n        return !!(formData.basicInfo.name && formData.basicInfo.phone);\n      case 2:\n        return !!(formData.joinInfo.coach && formData.joinInfo.joinPath);\n      case 3:\n        return true; // 결제정보는 선택사항\n      case 4:\n        const requiredAgreements = formData.agreementInfo.agreements.filter(a => a.required);\n        return requiredAgreements.every(a => a.agreed) && \n               !!(formData.agreementInfo.customerSignature && formData.agreementInfo.staffSignature);\n      default:\n        return true;\n    }\n  };\n\n  const handleNext = () => {\n    if (validateCurrentStep() && currentStep < 4) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrev = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSkipPayment = () => {\n    setCurrentStep(4);\n  };\n\n  const handleSubmit = () => {\n    console.log('회원 등록 데이터:', formData);\n    alert('회원이 성공적으로 등록되었습니다!');\n    \n    // 등록 완료 후 초기화\n    setCurrentStep(1);\n    setFormData({\n      basicInfo: {\n        name: '',\n        phone: '',\n        email: '',\n        birth: '',\n        gender: '',\n        addressInfo: {\n          address: '',\n          sigunguCode: '',\n          dong: '',\n          roadAddress: '',\n          jibunAddress: '',\n        },\n      },\n      joinInfo: {\n        coach: '',\n        joinPath: '',\n        loginId: '',\n        loginPassword: '',\n        enableLogin: false,\n      },\n      paymentInfo: {\n        selectedProducts: [],\n      },\n      agreementInfo: {\n        agreements: [\n          {\n            id: 'terms',\n            title: '회원이용약관',\n            content: '회원이용약관 내용입니다...',\n            required: true,\n            agreed: false,\n          },\n          {\n            id: 'privacy',\n            title: '개인정보처리방침',\n            content: '개인정보처리방침 내용입니다...',\n            required: true,\n            agreed: false,\n          },\n          {\n            id: 'service',\n            title: '서비스이용약관',\n            content: '서비스이용약관 내용입니다...',\n            required: true,\n            agreed: false,\n          },\n          {\n            id: 'marketing',\n            title: '마케팅활용 동의',\n            content: '마케팅활용 동의 내용입니다...',\n            required: false,\n            agreed: false,\n          },\n        ],\n        customerSignature: '',\n        staffSignature: '',\n      },\n    });\n  };\n\n  const renderStepContent = () => {\n    const stepProps = {\n      formData,\n      onUpdate: handleFormUpdate,\n      onNext: handleNext,\n      onPrev: handlePrev,\n      isValid: validateCurrentStep(),\n    };\n\n    switch (currentStep) {\n      case 1:\n        return <BasicInfoStep {...stepProps} />;\n      case 2:\n        return <JoinInfoStep {...stepProps} />;\n      case 3:\n        return <PaymentInfoStep {...stepProps} />;\n      case 4:\n        return <AgreementStep {...stepProps} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <PageContainer>\n      <PageHeader>\n        <PageTitle>신규 회원 등록</PageTitle>\n        <PageDescription>새로운 회원의 정보를 단계별로 입력하여 등록합니다.</PageDescription>\n      </PageHeader>\n\n      <StepContainer>\n        <StepWrapper>\n          {steps.map((step, index) => (\n            <StepItem\n              key={step.number}\n              $active={currentStep === step.number}\n              $completed={currentStep > step.number}\n            >\n              <StepCircle\n                $active={currentStep === step.number}\n                $completed={currentStep > step.number}\n              >\n                {currentStep > step.number ? '✓' : step.number}\n              </StepCircle>\n              <StepLabel\n                $active={currentStep === step.number}\n                $completed={currentStep > step.number}\n              >\n                {step.label}\n              </StepLabel>\n              {index < steps.length - 1 && (\n                <StepLine $completed={currentStep > step.number} />\n              )}\n            </StepItem>\n          ))}\n        </StepWrapper>\n      </StepContainer>\n\n      <Card>\n        {renderStepContent()}\n\n        <ButtonGroup>\n          <div>\n            {currentStep > 1 && (\n              <Button variant=\"secondary\" onClick={handlePrev}>\n                이전\n              </Button>\n            )}\n          </div>\n\n          <div style={{ display: 'flex', gap: '12px' }}>\n            {currentStep === 3 && (\n              <Button variant=\"outline\" onClick={handleSkipPayment}>\n                건너뛰기\n              </Button>\n            )}\n            \n            {currentStep < 4 ? (\n              <Button \n                onClick={handleNext} \n                disabled={!validateCurrentStep()}\n              >\n                다음\n              </Button>\n            ) : (\n              <Button \n                onClick={handleSubmit}\n                disabled={!validateCurrentStep()}\n              >\n                회원등록 완료\n              </Button>\n            )}\n          </div>\n        </ButtonGroup>\n      </Card>\n    </PageContainer>\n  );\n};\n\nexport default MemberRegister;\n"
        }
    ]
}