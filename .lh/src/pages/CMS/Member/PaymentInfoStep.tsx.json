{
    "sourceFile": "src/pages/CMS/Member/PaymentInfoStep.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1760248001088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760250885914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,17 +3,17 @@\n   StepContent, \n   StepTitle, \n   FormField, \n   Label, \n-  Select, \n   ProductItem, \n   ProductInfo, \n   ProductName, \n   ProductPrice, \n   RemoveButton,\n   SkipMessage \n } from './StyledComponents';\n import { Product, StepProps } from './types';\n+import CustomDropdown from '../../../components/CustomDropdown';\n \n const PaymentInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n   // 가상의 상품 목록\n   const availableProducts: Product[] = [\n@@ -24,8 +24,26 @@\n     { id: '5', name: 'PT 20회', price: 1500000 },\n     { id: '6', name: '그룹PT 10회', price: 400000 },\n   ];\n \n+  // 상품 선택 옵션 생성\n+  const getProductOptions = () => [\n+    { value: '', label: '상품을 선택하세요' },\n+    ...availableProducts.map(product => ({\n+      value: product.id,\n+      label: `${product.name} - ${product.price.toLocaleString()}원`\n+    }))\n+  ];\n+\n+  const handleProductSelect = (value: string) => {\n+    if (value) {\n+      const product = availableProducts.find(p => p.id === value);\n+      if (product) {\n+        handleProductAdd(product);\n+      }\n+    }\n+  };\n+\n   const handleProductAdd = (product: Product) => {\n     onUpdate({\n       paymentInfo: {\n         selectedProducts: [...formData.paymentInfo.selectedProducts, product]\n@@ -90,24 +108,13 @@\n       )}\n \n       <FormField style={{ marginTop: '24px' }}>\n         <Label>상품 추가</Label>\n-        <Select\n-          onChange={(e) => {\n-            const product = availableProducts.find(p => p.id === e.target.value);\n-            if (product) {\n-              handleProductAdd(product);\n-              e.target.value = '';\n-            }\n-          }}\n-        >\n-          <option value=\"\">상품을 선택하세요</option>\n-          {availableProducts.map(product => (\n-            <option key={product.id} value={product.id}>\n-              {product.name} - {product.price.toLocaleString()}원\n-            </option>\n-          ))}\n-        </Select>\n+        <CustomDropdown\n+          value=\"\"\n+          onChange={handleProductSelect}\n+          options={getProductOptions()}\n+        />\n       </FormField>\n     </StepContent>\n   );\n };\n"
                },
                {
                    "date": 1760251043651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React from 'react';\n+import React, { useState, useEffect } from 'react';\n import { \n   StepContent, \n   StepTitle, \n   FormField, \n@@ -12,34 +12,60 @@\n   SkipMessage \n } from './StyledComponents';\n import { Product, StepProps } from './types';\n import CustomDropdown from '../../../components/CustomDropdown';\n+import { dbManager, type Product as DBProduct } from '../../../utils/indexedDB';\n \n const PaymentInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n-  // 가상의 상품 목록\n-  const availableProducts: Product[] = [\n-    { id: '1', name: '헬스 회원권 (1개월)', price: 80000 },\n-    { id: '2', name: '헬스 회원권 (3개월)', price: 220000 },\n-    { id: '3', name: '헬스 회원권 (6개월)', price: 420000 },\n-    { id: '4', name: 'PT 10회', price: 800000 },\n-    { id: '5', name: 'PT 20회', price: 1500000 },\n-    { id: '6', name: '그룹PT 10회', price: 400000 },\n-  ];\n+  const [availableProducts, setAvailableProducts] = useState<DBProduct[]>([]);\n+  const [loading, setLoading] = useState(false);\n \n+  // 선택된 지점이 변경될 때마다 상품 목록 로드\n+  useEffect(() => {\n+    if (formData.joinInfo.branchId) {\n+      loadProductsByBranch(formData.joinInfo.branchId);\n+    } else {\n+      setAvailableProducts([]);\n+    }\n+  }, [formData.joinInfo.branchId]);\n+\n+  // 지점별 상품 로드\n+  const loadProductsByBranch = async (branchId: string) => {\n+    setLoading(true);\n+    try {\n+      const products = await dbManager.getProductsByBranch(branchId);\n+      // 활성 상품만 필터링\n+      const activeProducts = products.filter(product => product.isActive);\n+      setAvailableProducts(activeProducts);\n+    } catch (error) {\n+      console.error('상품 로드 실패:', error);\n+      setAvailableProducts([]);\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n   // 상품 선택 옵션 생성\n   const getProductOptions = () => [\n-    { value: '', label: '상품을 선택하세요' },\n+    { value: '', label: loading ? '상품 로딩 중...' : '상품을 선택하세요' },\n     ...availableProducts.map(product => ({\n       value: product.id,\n-      label: `${product.name} - ${product.price.toLocaleString()}원`\n+      label: `${product.name} - ${product.price?.toLocaleString() || '가격미정'}원`\n     }))\n   ];\n \n   const handleProductSelect = (value: string) => {\n     if (value) {\n       const product = availableProducts.find(p => p.id === value);\n       if (product) {\n-        handleProductAdd(product);\n+        // DBProduct를 Product 타입으로 변환\n+        const convertedProduct: Product = {\n+          id: product.id,\n+          name: product.name,\n+          price: product.price || 0,\n+          description: product.description\n+        };\n+        handleProductAdd(convertedProduct);\n       }\n     }\n   };\n \n@@ -108,13 +134,36 @@\n       )}\n \n       <FormField style={{ marginTop: '24px' }}>\n         <Label>상품 추가</Label>\n-        <CustomDropdown\n-          value=\"\"\n-          onChange={handleProductSelect}\n-          options={getProductOptions()}\n-        />\n+        {!formData.joinInfo.branchId ? (\n+          <div style={{ \n+            padding: '12px', \n+            backgroundColor: '#fff3cd', \n+            border: '1px solid #ffeaa7', \n+            borderRadius: '4px',\n+            color: '#856404',\n+            fontSize: '14px'\n+          }}>\n+            먼저 가입정보에서 지점을 선택해주세요.\n+          </div>\n+        ) : (\n+          <CustomDropdown\n+            value=\"\"\n+            onChange={handleProductSelect}\n+            options={getProductOptions()}\n+            disabled={loading || availableProducts.length === 0}\n+          />\n+        )}\n+        {formData.joinInfo.branchId && availableProducts.length === 0 && !loading && (\n+          <div style={{ \n+            marginTop: '8px',\n+            color: '#6c757d',\n+            fontSize: '12px'\n+          }}>\n+            선택한 지점에 등록된 상품이 없습니다.\n+          </div>\n+        )}\n       </FormField>\n     </StepContent>\n   );\n };\n"
                },
                {
                    "date": 1760256816575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,9 @@\n \n   const handleProductAdd = (product: Product) => {\n     onUpdate({\n       paymentInfo: {\n+        ...formData.paymentInfo,\n         selectedProducts: [...formData.paymentInfo.selectedProducts, product]\n       }\n     });\n   };\n@@ -85,19 +86,45 @@\n     });\n     \n     onUpdate({\n       paymentInfo: {\n+        ...formData.paymentInfo,\n         selectedProducts: updatedProducts\n       }\n     });\n   };\n \n   const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n \n+  // 결제 방법 옵션\n+  const paymentMethodOptions = [\n+    { value: 'card', label: '카드' },\n+    { value: 'cash', label: '현금' },\n+    { value: 'transfer', label: '계좌이체' }\n+  ];\n+\n+  const handlePaymentMethodChange = (value: string) => {\n+    onUpdate({\n+      paymentInfo: {\n+        ...formData.paymentInfo,\n+        paymentMethod: value\n+      }\n+    });\n+  };\n+\n   return (\n     <StepContent>\n       <StepTitle>결제정보</StepTitle>\n       \n+      <FormField>\n+        <Label>결제 방법</Label>\n+        <CustomDropdown\n+          value={formData.paymentInfo.paymentMethod || 'card'}\n+          onChange={handlePaymentMethodChange}\n+          options={paymentMethodOptions}\n+        />\n+      </FormField>\n+      \n       {formData.paymentInfo.selectedProducts.length === 0 ? (\n         <SkipMessage>\n           결제할 상품이 없습니다.<br />\n           상품을 선택하거나 건너뛰기를 선택하세요.\n"
                },
                {
                    "date": 1760757227936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,14 +149,55 @@\n           <div style={{ \n             marginTop: '16px', \n             padding: '16px', \n             backgroundColor: '#f8f9fa', \n-            borderRadius: '8px',\n-            textAlign: 'right',\n-            fontWeight: 'bold',\n-            fontSize: '18px'\n+            borderRadius: '8px'\n           }}>\n-            총 결제금액: {totalAmount.toLocaleString()}원\n+            <div style={{\n+              textAlign: 'right',\n+              fontWeight: 'bold',\n+              fontSize: '18px',\n+              marginBottom: '12px'\n+            }}>\n+              총 결제금액: {totalAmount.toLocaleString()}원\n+            </div>\n+            \n+            <FormField>\n+              <Label>받은금액</Label>\n+              <input\n+                type=\"number\"\n+                value={formData.paymentInfo.receivedAmount || totalAmount}\n+                onChange={(e) => {\n+                  const value = e.target.value ? parseFloat(e.target.value) : 0;\n+                  onUpdate({\n+                    paymentInfo: {\n+                      ...formData.paymentInfo,\n+                      receivedAmount: value\n+                    }\n+                  });\n+                }}\n+                placeholder=\"받은 금액을 입력하세요\"\n+                style={{\n+                  width: '100%',\n+                  padding: '8px 12px',\n+                  border: '1px solid #ddd',\n+                  borderRadius: '4px',\n+                  fontSize: '14px'\n+                }}\n+              />\n+              {formData.paymentInfo.receivedAmount !== undefined && formData.paymentInfo.receivedAmount !== totalAmount && (\n+                <div style={{ \n+                  marginTop: '8px', \n+                  fontSize: '12px',\n+                  color: formData.paymentInfo.receivedAmount > totalAmount ? '#28a745' : '#dc3545'\n+                }}>\n+                  {formData.paymentInfo.receivedAmount > totalAmount \n+                    ? `초과금액: ${(formData.paymentInfo.receivedAmount - totalAmount).toLocaleString()}원 (포인트로 적립 예정)`\n+                    : `부족금액: ${(totalAmount - formData.paymentInfo.receivedAmount).toLocaleString()}원 (미수금으로 처리 예정)`\n+                  }\n+                </div>\n+              )}\n+            </FormField>\n           </div>\n         </div>\n       )}\n \n"
                },
                {
                    "date": 1761373763988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,9 +190,20 @@\n                   fontSize: '12px',\n                   color: formData.paymentInfo.receivedAmount > totalAmount ? '#28a745' : '#dc3545'\n                 }}>\n                   {formData.paymentInfo.receivedAmount > totalAmount \n-                    ? `초과금액: ${(formData.paymentInfo.receivedAmount - totalAmount).toLocaleString()}원 (포인트로 적립 예정)`\n+                    ? (() => {\n+                        const excessAmount = formData.paymentInfo.receivedAmount - totalAmount;\n+                        let message = `초과금액: ${excessAmount.toLocaleString()}원 (포인트로 적립 예정)`;\n+                        \n+                        if (excessAmount >= 1000000) {\n+                          const millionUnits = Math.floor(excessAmount / 1000000);\n+                          const bonusPoints = millionUnits * 100000;\n+                          message += ` + 보너스 ${bonusPoints.toLocaleString()}원`;\n+                        }\n+                        \n+                        return message;\n+                      })()\n                     : `부족금액: ${(totalAmount - formData.paymentInfo.receivedAmount).toLocaleString()}원 (미수금으로 처리 예정)`\n                   }\n                 </div>\n               )}\n"
                },
                {
                    "date": 1761457974467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n   Label, \n   ProductItem, \n   ProductInfo, \n   ProductName, \n-  ProductPrice, \n   RemoveButton,\n   SkipMessage \n } from './StyledComponents';\n import { Product, StepProps } from './types';\n@@ -43,28 +42,57 @@\n       setLoading(false);\n     }\n   };\n \n+  // 기간제 상품의 금액 계산 (기본 한달 기준으로 일할 계산)\n+  const calculatePeriodPrice = (basePrice: number, days: number): number => {\n+    const baseDays = 30; // 기본 한달 (30일) 기준\n+    return Math.round((basePrice / baseDays) * days);\n+  };\n+\n   // 상품 선택 옵션 생성\n   const getProductOptions = () => [\n     { value: '', label: loading ? '상품 로딩 중...' : '상품을 선택하세요' },\n     ...availableProducts.map(product => ({\n       value: product.id,\n-      label: `${product.name} - ${product.price?.toLocaleString() || '가격미정'}원`\n+      label: `${product.name} - ${product.price?.toLocaleString() || '가격미정'}원${product.programType === '기간제' ? ' (기간제)' : ''}`\n     }))\n   ];\n \n   const handleProductSelect = (value: string) => {\n     if (value) {\n       const product = availableProducts.find(p => p.id === value);\n       if (product) {\n-        // DBProduct를 Product 타입으로 변환\n+        // 기본값으로 상품 추가 (기간제는 30일, 횟수제는 기본 횟수)\n+        const tomorrow = new Date();\n+        tomorrow.setDate(tomorrow.getDate() + 1);\n+        \n         const convertedProduct: Product = {\n           id: product.id,\n           name: product.name,\n           price: product.price || 0,\n-          description: product.description\n+          originalPrice: product.price || 0, // 원본 가격 저장\n+          description: product.description,\n+          programType: product.programType\n         };\n+\n+        // 기간제 상품인 경우 기본 30일 설정\n+        if (product.programType === '기간제') {\n+          const endDate = new Date(tomorrow);\n+          endDate.setDate(endDate.getDate() + 30);\n+          \n+          convertedProduct.duration = 30;\n+          convertedProduct.startDate = tomorrow;\n+          convertedProduct.endDate = endDate;\n+          convertedProduct.calculatedPrice = calculatePeriodPrice(product.price || 0, 30);\n+        }\n+        // 횟수제 상품인 경우 기본 횟수 설정 (상품에 정의된 횟수 또는 10회)\n+        else if (product.programType === '횟수제') {\n+          // sessions 필드가 있다면 사용, 없으면 기본 10회\n+          const defaultSessions = (product as any).sessions || 10;\n+          convertedProduct.duration = defaultSessions; // duration 필드를 횟수로 사용\n+        }\n+\n         handleProductAdd(convertedProduct);\n       }\n     }\n   };\n@@ -77,8 +105,51 @@\n       }\n     });\n   };\n \n+  // 상품 편집 (기간, 횟수, 가격 등)\n+  const handleProductEdit = (index: number, field: string, value: any) => {\n+    const updatedProducts = [...formData.paymentInfo.selectedProducts];\n+    const product = { ...updatedProducts[index] };\n+    \n+    if (field === 'duration') {\n+      product.duration = value;\n+      if (product.programType === '기간제' && product.startDate) {\n+        // 기간제: 종료일 재계산\n+        const endDate = new Date(product.startDate);\n+        endDate.setDate(endDate.getDate() + value);\n+        product.endDate = endDate;\n+        // 가격 재계산\n+        const basePrice = product.originalPrice || product.price;\n+        product.calculatedPrice = calculatePeriodPrice(basePrice, value);\n+      } else if (product.programType === '횟수제') {\n+        // 횟수제: 횟수 변경 시 가격은 기본적으로 동일하게 유지\n+        // 필요시 여기서 횟수에 따른 가격 계산 로직 추가\n+      }\n+    } else if (field === 'startDate') {\n+      product.startDate = value;\n+      if (product.programType === '기간제' && product.duration) {\n+        // 시작일 변경 시 종료일 재계산\n+        const endDate = new Date(value);\n+        endDate.setDate(endDate.getDate() + product.duration);\n+        product.endDate = endDate;\n+      }\n+    } else if (field === 'calculatedPrice') {\n+      product.calculatedPrice = value;\n+    } else if (field === 'price') {\n+      product.price = value;\n+    }\n+    \n+    updatedProducts[index] = product;\n+    \n+    onUpdate({\n+      paymentInfo: {\n+        ...formData.paymentInfo,\n+        selectedProducts: updatedProducts\n+      }\n+    });\n+  };\n+\n   const handleProductRemove = (productId: string) => {\n     const updatedProducts = formData.paymentInfo.selectedProducts.filter((p, index) => {\n       // 같은 상품이 여러 개 있을 수 있으므로 첫 번째 것만 제거\n       const firstMatchIndex = formData.paymentInfo.selectedProducts.findIndex(product => product.id === productId);\n@@ -92,9 +163,11 @@\n       }\n     });\n   };\n \n-  const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n+  const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => {\n+    return sum + (product.calculatedPrice || product.price);\n+  }, 0);\n \n   // 결제 방법 옵션\n   const paymentMethodOptions = [\n     { value: 'card', label: '카드' },\n@@ -132,21 +205,138 @@\n       ) : (\n         <div>\n           <h3>선택된 상품</h3>\n           {formData.paymentInfo.selectedProducts.map((product, index) => (\n-            <ProductItem key={`${product.id}-${index}`}>\n-              <ProductInfo>\n+            <ProductItem key={`${product.id}-${index}`} style={{ marginBottom: '16px' }}>\n+              <ProductInfo style={{ flex: 1 }}>\n                 <ProductName>{product.name}</ProductName>\n-                <ProductPrice>{product.price.toLocaleString()}원</ProductPrice>\n+                \n+                {/* 기간제 상품 편집 */}\n+                {product.programType === '기간제' && (\n+                  <div style={{ \n+                    marginTop: '8px', \n+                    padding: '12px', \n+                    backgroundColor: '#f8f9fa', \n+                    borderRadius: '6px',\n+                    border: '1px solid #e9ecef'\n+                  }}>\n+                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px', marginBottom: '8px' }}>\n+                      <div>\n+                        <label style={{ fontSize: '12px', color: '#666', display: 'block', marginBottom: '4px' }}>시작일</label>\n+                        <input\n+                          type=\"date\"\n+                          value={product.startDate ? product.startDate.toISOString().split('T')[0] : ''}\n+                          onChange={(e) => handleProductEdit(index, 'startDate', new Date(e.target.value))}\n+                          style={{\n+                            width: '100%',\n+                            padding: '6px 8px',\n+                            border: '1px solid #ddd',\n+                            borderRadius: '4px',\n+                            fontSize: '12px'\n+                          }}\n+                        />\n+                      </div>\n+                      <div>\n+                        <label style={{ fontSize: '12px', color: '#666', display: 'block', marginBottom: '4px' }}>기간(일)</label>\n+                        <input\n+                          type=\"number\"\n+                          min=\"1\"\n+                          max=\"365\"\n+                          value={product.duration || 30}\n+                          onChange={(e) => handleProductEdit(index, 'duration', parseInt(e.target.value) || 1)}\n+                          style={{\n+                            width: '100%',\n+                            padding: '6px 8px',\n+                            border: '1px solid #ddd',\n+                            borderRadius: '4px',\n+                            fontSize: '12px'\n+                          }}\n+                        />\n+                      </div>\n+                    </div>\n+                    {product.endDate && (\n+                      <div style={{ fontSize: '11px', color: '#666' }}>\n+                        종료일: {product.endDate.toLocaleDateString()}\n+                      </div>\n+                    )}\n+                  </div>\n+                )}\n+\n+                {/* 횟수제 상품 편집 */}\n+                {product.programType === '횟수제' && (\n+                  <div style={{ \n+                    marginTop: '8px', \n+                    padding: '12px', \n+                    backgroundColor: '#f8f9fa', \n+                    borderRadius: '6px',\n+                    border: '1px solid #e9ecef'\n+                  }}>\n+                    <div>\n+                      <label style={{ fontSize: '12px', color: '#666', display: 'block', marginBottom: '4px' }}>수업 횟수</label>\n+                      <input\n+                        type=\"number\"\n+                        min=\"1\"\n+                        max=\"100\"\n+                        value={product.duration || 10}\n+                        onChange={(e) => handleProductEdit(index, 'duration', parseInt(e.target.value) || 1)}\n+                        style={{\n+                          width: '100px',\n+                          padding: '6px 8px',\n+                          border: '1px solid #ddd',\n+                          borderRadius: '4px',\n+                          fontSize: '12px'\n+                        }}\n+                      />\n+                      <span style={{ marginLeft: '8px', fontSize: '12px', color: '#666' }}>회</span>\n+                    </div>\n+                  </div>\n+                )}\n+\n+                <div style={{ \n+                  marginTop: '8px', \n+                  display: 'flex', \n+                  alignItems: 'center', \n+                  justifyContent: 'space-between' \n+                }}>\n+                  <div>\n+                    <label style={{ fontSize: '12px', color: '#666', display: 'block', marginBottom: '4px' }}>가격</label>\n+                    <input\n+                      type=\"number\"\n+                      min=\"0\"\n+                      step=\"1000\"\n+                      value={product.calculatedPrice || product.price}\n+                      onChange={(e) => handleProductEdit(index, 'calculatedPrice', parseInt(e.target.value) || 0)}\n+                      style={{\n+                        width: '120px',\n+                        padding: '6px 8px',\n+                        border: '1px solid #ddd',\n+                        borderRadius: '4px',\n+                        fontSize: '14px',\n+                        fontWeight: 'bold'\n+                      }}\n+                    />\n+                    <span style={{ marginLeft: '6px', fontSize: '14px', fontWeight: 'bold' }}>원</span>\n+                  </div>\n+                  \n+                  {product.programType === '기간제' && product.calculatedPrice !== product.originalPrice && (\n+                    <div style={{ fontSize: '11px', color: '#999' }}>\n+                      기본가: {(product.originalPrice || product.price).toLocaleString()}원\n+                    </div>\n+                  )}\n+                </div>\n               </ProductInfo>\n+              \n               <RemoveButton\n                 onClick={() => handleProductRemove(product.id)}\n+                style={{ alignSelf: 'flex-start', marginTop: '8px' }}\n               >\n                 ✕\n               </RemoveButton>\n             </ProductItem>\n           ))}\n           \n+          {/* 기존 기간제 상품 설정 UI 제거 */}\n+          \n           <div style={{ \n             marginTop: '16px', \n             padding: '16px', \n             backgroundColor: '#f8f9fa', \n"
                },
                {
                    "date": 1761458536853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,13 @@\n     const baseDays = 30; // 기본 한달 (30일) 기준\n     return Math.round((basePrice / baseDays) * days);\n   };\n \n+  // 횟수제 상품의 금액 계산 (기준 횟수 대비 비례 계산)\n+  const calculateSessionPrice = (basePrice: number, sessions: number, baseSessions: number): number => {\n+    return Math.round((basePrice / baseSessions) * sessions);\n+  };\n+\n   // 상품 선택 옵션 생성\n   const getProductOptions = () => [\n     { value: '', label: loading ? '상품 로딩 중...' : '상품을 선택하세요' },\n     ...availableProducts.map(product => ({\n@@ -61,44 +66,48 @@\n   const handleProductSelect = (value: string) => {\n     if (value) {\n       const product = availableProducts.find(p => p.id === value);\n       if (product) {\n-        // 기본값으로 상품 추가 (기간제는 30일, 횟수제는 기본 횟수)\n-        const tomorrow = new Date();\n-        tomorrow.setDate(tomorrow.getDate() + 1);\n-        \n+        // DBProduct를 Product 타입으로 변환\n         const convertedProduct: Product = {\n           id: product.id,\n           name: product.name,\n-          price: product.price || 0,\n-          originalPrice: product.price || 0, // 원본 가격 저장\n+          originalPrice: product.price || 0, // 원래 기본 가격\n+          basePrice: product.price || 0, // 기준 가격\n+          price: product.price || 0, // 상품금액 (초기값은 기본 가격)\n+          appliedPrice: product.price || 0, // 적용금액 (초기값은 기본 가격)\n           description: product.description,\n           programType: product.programType\n         };\n \n-        // 기간제 상품인 경우 기본 30일 설정\n+        // 기간제인 경우 기본 30일 설정\n         if (product.programType === '기간제') {\n+          const tomorrow = new Date();\n+          tomorrow.setDate(tomorrow.getDate() + 1);\n           const endDate = new Date(tomorrow);\n           endDate.setDate(endDate.getDate() + 30);\n           \n           convertedProduct.duration = 30;\n+          convertedProduct.baseDuration = 30;\n           convertedProduct.startDate = tomorrow;\n           convertedProduct.endDate = endDate;\n-          convertedProduct.calculatedPrice = calculatePeriodPrice(product.price || 0, 30);\n+          convertedProduct.price = calculatePeriodPrice(product.price || 0, 30);\n+          convertedProduct.appliedPrice = convertedProduct.price;\n         }\n-        // 횟수제 상품인 경우 기본 횟수 설정 (상품에 정의된 횟수 또는 10회)\n+        // 횟수제인 경우 기본 횟수 설정 (상품에서 가져오거나 기본값 사용)\n         else if (product.programType === '횟수제') {\n-          // sessions 필드가 있다면 사용, 없으면 기본 10회\n-          const defaultSessions = (product as any).sessions || 10;\n-          convertedProduct.duration = defaultSessions; // duration 필드를 횟수로 사용\n+          // DB에서 sessions 정보를 가져와야 하지만, 임시로 기본값 사용\n+          const defaultSessions = 10; // 기본 10회\n+          convertedProduct.sessions = defaultSessions;\n+          convertedProduct.baseSessions = defaultSessions;\n+          convertedProduct.price = calculateSessionPrice(product.price || 0, defaultSessions, defaultSessions);\n+          convertedProduct.appliedPrice = convertedProduct.price;\n         }\n \n         handleProductAdd(convertedProduct);\n       }\n     }\n-  };\n-\n-  const handleProductAdd = (product: Product) => {\n+  };  const handleProductAdd = (product: Product) => {\n     onUpdate({\n       paymentInfo: {\n         ...formData.paymentInfo,\n         selectedProducts: [...formData.paymentInfo.selectedProducts, product]\n@@ -117,27 +126,33 @@\n         // 기간제: 종료일 재계산\n         const endDate = new Date(product.startDate);\n         endDate.setDate(endDate.getDate() + value);\n         product.endDate = endDate;\n-        // 가격 재계산\n-        const basePrice = product.originalPrice || product.price;\n-        product.calculatedPrice = calculatePeriodPrice(basePrice, value);\n-      } else if (product.programType === '횟수제') {\n-        // 횟수제: 횟수 변경 시 가격은 기본적으로 동일하게 유지\n-        // 필요시 여기서 횟수에 따른 가격 계산 로직 추가\n+        // 상품금액 재계산\n+        const basePrice = product.basePrice || product.originalPrice || 0;\n+        product.price = calculatePeriodPrice(basePrice, value);\n+        product.appliedPrice = product.price; // 적용금액도 함께 업데이트\n       }\n+    } else if (field === 'sessions') {\n+      product.sessions = value;\n+      if (product.programType === '횟수제') {\n+        // 횟수제: 횟수에 따른 상품금액 재계산\n+        const basePrice = product.basePrice || product.originalPrice || 0;\n+        const baseSessions = product.baseSessions || 10; // 기준 횟수\n+        product.price = calculateSessionPrice(basePrice, value, baseSessions);\n+        product.appliedPrice = product.price; // 적용금액도 함께 업데이트\n+      }\n     } else if (field === 'startDate') {\n       product.startDate = value;\n       if (product.programType === '기간제' && product.duration) {\n         // 시작일 변경 시 종료일 재계산\n         const endDate = new Date(value);\n         endDate.setDate(endDate.getDate() + product.duration);\n         product.endDate = endDate;\n       }\n-    } else if (field === 'calculatedPrice') {\n-      product.calculatedPrice = value;\n-    } else if (field === 'price') {\n-      product.price = value;\n+    } else if (field === 'appliedPrice') {\n+      // 적용금액은 사용자가 직접 수정 가능\n+      product.appliedPrice = value;\n     }\n     \n     updatedProducts[index] = product;\n     \n@@ -164,9 +179,9 @@\n     });\n   };\n \n   const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => {\n-    return sum + (product.calculatedPrice || product.price);\n+    return sum + (product.appliedPrice || product.price);\n   }, 0);\n \n   // 결제 방법 옵션\n   const paymentMethodOptions = [\n@@ -275,10 +290,10 @@\n                       <input\n                         type=\"number\"\n                         min=\"1\"\n                         max=\"100\"\n-                        value={product.duration || 10}\n-                        onChange={(e) => handleProductEdit(index, 'duration', parseInt(e.target.value) || 1)}\n+                        value={product.sessions || 10}\n+                        onChange={(e) => handleProductEdit(index, 'sessions', parseInt(e.target.value) || 1)}\n                         style={{\n                           width: '100px',\n                           padding: '6px 8px',\n                           border: '1px solid #ddd',\n@@ -290,39 +305,65 @@\n                     </div>\n                   </div>\n                 )}\n \n+                {/* 가격 정보 */}\n                 <div style={{ \n-                  marginTop: '8px', \n-                  display: 'flex', \n-                  alignItems: 'center', \n-                  justifyContent: 'space-between' \n+                  marginTop: '12px', \n+                  padding: '12px', \n+                  backgroundColor: '#fff', \n+                  borderRadius: '6px',\n+                  border: '1px solid #ddd'\n                 }}>\n-                  <div>\n-                    <label style={{ fontSize: '12px', color: '#666', display: 'block', marginBottom: '4px' }}>가격</label>\n+                  <div style={{ marginBottom: '8px' }}>\n+                    <span style={{ fontSize: '12px', color: '#666' }}>상품금액: </span>\n+                    <span style={{ fontSize: '14px', fontWeight: 'bold', color: '#333' }}>\n+                      {product.price.toLocaleString()}원\n+                    </span>\n+                    {product.price !== (product.originalPrice || 0) && (\n+                      <span style={{ \n+                        fontSize: '11px', \n+                        color: '#999', \n+                        textDecoration: 'line-through',\n+                        marginLeft: '8px'\n+                      }}>\n+                        (원가: {(product.originalPrice || 0).toLocaleString()}원)\n+                      </span>\n+                    )}\n+                  </div>\n+                  \n+                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n+                    <label style={{ fontSize: '12px', color: '#666', minWidth: '60px' }}>적용금액:</label>\n                     <input\n                       type=\"number\"\n                       min=\"0\"\n                       step=\"1000\"\n-                      value={product.calculatedPrice || product.price}\n-                      onChange={(e) => handleProductEdit(index, 'calculatedPrice', parseInt(e.target.value) || 0)}\n+                      value={product.appliedPrice || product.price}\n+                      onChange={(e) => handleProductEdit(index, 'appliedPrice', parseInt(e.target.value) || 0)}\n                       style={{\n                         width: '120px',\n                         padding: '6px 8px',\n                         border: '1px solid #ddd',\n                         borderRadius: '4px',\n                         fontSize: '14px',\n-                        fontWeight: 'bold'\n+                        fontWeight: 'bold',\n+                        color: '#0066cc'\n                       }}\n                     />\n-                    <span style={{ marginLeft: '6px', fontSize: '14px', fontWeight: 'bold' }}>원</span>\n+                    <span style={{ fontSize: '14px', fontWeight: 'bold', color: '#0066cc' }}>원</span>\n+                    \n+                    {/* 상품금액 대비 적용금액 차이 표시 */}\n+                    {(product.appliedPrice || product.price) !== product.price && (\n+                      <span style={{ \n+                        fontSize: '11px', \n+                        color: (product.appliedPrice || product.price) > product.price ? '#dc3545' : '#28a745',\n+                        fontWeight: 'bold'\n+                      }}>\n+                        ({(product.appliedPrice || product.price) > product.price ? '+' : ''}\n+                        {((product.appliedPrice || product.price) - product.price).toLocaleString()}원)\n+                      </span>\n+                    )}\n                   </div>\n-                  \n-                  {product.programType === '기간제' && product.calculatedPrice !== product.originalPrice && (\n-                    <div style={{ fontSize: '11px', color: '#999' }}>\n-                      기본가: {(product.originalPrice || product.price).toLocaleString()}원\n-                    </div>\n-                  )}\n                 </div>\n               </ProductInfo>\n               \n               <RemoveButton\n@@ -352,29 +393,52 @@\n             </div>\n             \n             <FormField>\n               <Label>받은금액</Label>\n-              <input\n-                type=\"number\"\n-                value={formData.paymentInfo.receivedAmount || totalAmount}\n-                onChange={(e) => {\n-                  const value = e.target.value ? parseFloat(e.target.value) : 0;\n-                  onUpdate({\n-                    paymentInfo: {\n-                      ...formData.paymentInfo,\n-                      receivedAmount: value\n-                    }\n-                  });\n-                }}\n-                placeholder=\"받은 금액을 입력하세요\"\n-                style={{\n-                  width: '100%',\n-                  padding: '8px 12px',\n-                  border: '1px solid #ddd',\n-                  borderRadius: '4px',\n-                  fontSize: '14px'\n-                }}\n-              />\n+              <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\n+                <input\n+                  type=\"number\"\n+                  value={formData.paymentInfo.receivedAmount || totalAmount}\n+                  onChange={(e) => {\n+                    const value = e.target.value ? parseFloat(e.target.value) : 0;\n+                    onUpdate({\n+                      paymentInfo: {\n+                        ...formData.paymentInfo,\n+                        receivedAmount: value\n+                      }\n+                    });\n+                  }}\n+                  placeholder=\"받은 금액을 입력하세요\"\n+                  style={{\n+                    flex: 1,\n+                    padding: '8px 12px',\n+                    border: '1px solid #ddd',\n+                    borderRadius: '4px',\n+                    fontSize: '14px'\n+                  }}\n+                />\n+                <button\n+                  type=\"button\"\n+                  onClick={() => {\n+                    onUpdate({\n+                      paymentInfo: {\n+                        ...formData.paymentInfo,\n+                        receivedAmount: totalAmount\n+                      }\n+                    });\n+                  }}\n+                  style={{\n+                    padding: '8px 12px',\n+                    border: '1px solid #ddd',\n+                    borderRadius: '4px',\n+                    backgroundColor: '#fff',\n+                    cursor: 'pointer',\n+                    fontSize: '12px'\n+                  }}\n+                >\n+                  적용금액 합계로 설정\n+                </button>\n+              </div>\n               {formData.paymentInfo.receivedAmount !== undefined && formData.paymentInfo.receivedAmount !== totalAmount && (\n                 <div style={{ \n                   marginTop: '8px', \n                   fontSize: '12px',\n"
                },
                {
                    "date": 1761458742441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,44 +233,72 @@\n                     backgroundColor: '#f8f9fa', \n                     borderRadius: '6px',\n                     border: '1px solid #e9ecef'\n                   }}>\n-                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px', marginBottom: '8px' }}>\n+                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginBottom: '8px' }}>\n                       <div>\n-                        <label style={{ fontSize: '12px', color: '#666', display: 'block', marginBottom: '4px' }}>시작일</label>\n+                        <label style={{ \n+                          fontSize: '12px', \n+                          color: '#666', \n+                          display: 'block', \n+                          marginBottom: '6px',\n+                          fontWeight: '500'\n+                        }}>\n+                          시작일\n+                        </label>\n                         <input\n                           type=\"date\"\n                           value={product.startDate ? product.startDate.toISOString().split('T')[0] : ''}\n                           onChange={(e) => handleProductEdit(index, 'startDate', new Date(e.target.value))}\n                           style={{\n                             width: '100%',\n-                            padding: '6px 8px',\n+                            padding: '8px 10px',\n                             border: '1px solid #ddd',\n                             borderRadius: '4px',\n-                            fontSize: '12px'\n+                            fontSize: '13px',\n+                            boxSizing: 'border-box',\n+                            height: '36px'\n                           }}\n                         />\n                       </div>\n                       <div>\n-                        <label style={{ fontSize: '12px', color: '#666', display: 'block', marginBottom: '4px' }}>기간(일)</label>\n+                        <label style={{ \n+                          fontSize: '12px', \n+                          color: '#666', \n+                          display: 'block', \n+                          marginBottom: '6px',\n+                          fontWeight: '500'\n+                        }}>\n+                          기간(일)\n+                        </label>\n                         <input\n                           type=\"number\"\n                           min=\"1\"\n                           max=\"365\"\n                           value={product.duration || 30}\n                           onChange={(e) => handleProductEdit(index, 'duration', parseInt(e.target.value) || 1)}\n                           style={{\n                             width: '100%',\n-                            padding: '6px 8px',\n+                            padding: '8px 10px',\n                             border: '1px solid #ddd',\n                             borderRadius: '4px',\n-                            fontSize: '12px'\n+                            fontSize: '13px',\n+                            boxSizing: 'border-box',\n+                            height: '36px'\n                           }}\n                         />\n                       </div>\n                     </div>\n                     {product.endDate && (\n-                      <div style={{ fontSize: '11px', color: '#666' }}>\n+                      <div style={{ \n+                        fontSize: '11px', \n+                        color: '#666',\n+                        marginTop: '4px',\n+                        padding: '4px 8px',\n+                        backgroundColor: '#fff',\n+                        borderRadius: '3px',\n+                        border: '1px solid #e9ecef'\n+                      }}>\n                         종료일: {product.endDate.toLocaleDateString()}\n                       </div>\n                     )}\n                   </div>\n@@ -285,24 +313,36 @@\n                     borderRadius: '6px',\n                     border: '1px solid #e9ecef'\n                   }}>\n                     <div>\n-                      <label style={{ fontSize: '12px', color: '#666', display: 'block', marginBottom: '4px' }}>수업 횟수</label>\n-                      <input\n-                        type=\"number\"\n-                        min=\"1\"\n-                        max=\"100\"\n-                        value={product.sessions || 10}\n-                        onChange={(e) => handleProductEdit(index, 'sessions', parseInt(e.target.value) || 1)}\n-                        style={{\n-                          width: '100px',\n-                          padding: '6px 8px',\n-                          border: '1px solid #ddd',\n-                          borderRadius: '4px',\n-                          fontSize: '12px'\n-                        }}\n-                      />\n-                      <span style={{ marginLeft: '8px', fontSize: '12px', color: '#666' }}>회</span>\n+                      <label style={{ \n+                        fontSize: '12px', \n+                        color: '#666', \n+                        display: 'block', \n+                        marginBottom: '6px',\n+                        fontWeight: '500'\n+                      }}>\n+                        수업 횟수\n+                      </label>\n+                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n+                        <input\n+                          type=\"number\"\n+                          min=\"1\"\n+                          max=\"100\"\n+                          value={product.sessions || 10}\n+                          onChange={(e) => handleProductEdit(index, 'sessions', parseInt(e.target.value) || 1)}\n+                          style={{\n+                            width: '100px',\n+                            padding: '8px 10px',\n+                            border: '1px solid #ddd',\n+                            borderRadius: '4px',\n+                            fontSize: '13px',\n+                            boxSizing: 'border-box',\n+                            height: '36px'\n+                          }}\n+                        />\n+                        <span style={{ fontSize: '13px', color: '#666', fontWeight: '500' }}>회</span>\n+                      </div>\n                     </div>\n                   </div>\n                 )}\n \n@@ -313,10 +353,10 @@\n                   backgroundColor: '#fff', \n                   borderRadius: '6px',\n                   border: '1px solid #ddd'\n                 }}>\n-                  <div style={{ marginBottom: '8px' }}>\n-                    <span style={{ fontSize: '12px', color: '#666' }}>상품금액: </span>\n+                  <div style={{ marginBottom: '10px' }}>\n+                    <span style={{ fontSize: '12px', color: '#666', fontWeight: '500' }}>상품금액: </span>\n                     <span style={{ fontSize: '14px', fontWeight: 'bold', color: '#333' }}>\n                       {product.price.toLocaleString()}원\n                     </span>\n                     {product.price !== (product.originalPrice || 0) && (\n@@ -331,23 +371,32 @@\n                     )}\n                   </div>\n                   \n                   <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n-                    <label style={{ fontSize: '12px', color: '#666', minWidth: '60px' }}>적용금액:</label>\n+                    <label style={{ \n+                      fontSize: '12px', \n+                      color: '#666', \n+                      minWidth: '60px',\n+                      fontWeight: '500'\n+                    }}>\n+                      적용금액:\n+                    </label>\n                     <input\n                       type=\"number\"\n                       min=\"0\"\n                       step=\"1000\"\n                       value={product.appliedPrice || product.price}\n                       onChange={(e) => handleProductEdit(index, 'appliedPrice', parseInt(e.target.value) || 0)}\n                       style={{\n                         width: '120px',\n-                        padding: '6px 8px',\n+                        padding: '8px 10px',\n                         border: '1px solid #ddd',\n                         borderRadius: '4px',\n                         fontSize: '14px',\n                         fontWeight: 'bold',\n-                        color: '#0066cc'\n+                        color: '#0066cc',\n+                        boxSizing: 'border-box',\n+                        height: '36px'\n                       }}\n                     />\n                     <span style={{ fontSize: '14px', fontWeight: 'bold', color: '#0066cc' }}>원</span>\n                     \n@@ -355,9 +404,10 @@\n                     {(product.appliedPrice || product.price) !== product.price && (\n                       <span style={{ \n                         fontSize: '11px', \n                         color: (product.appliedPrice || product.price) > product.price ? '#dc3545' : '#28a745',\n-                        fontWeight: 'bold'\n+                        fontWeight: 'bold',\n+                        marginLeft: '4px'\n                       }}>\n                         ({(product.appliedPrice || product.price) > product.price ? '+' : ''}\n                         {((product.appliedPrice || product.price) - product.price).toLocaleString()}원)\n                       </span>\n@@ -412,9 +462,11 @@\n                     flex: 1,\n                     padding: '8px 12px',\n                     border: '1px solid #ddd',\n                     borderRadius: '4px',\n-                    fontSize: '14px'\n+                    fontSize: '14px',\n+                    boxSizing: 'border-box',\n+                    height: '36px'\n                   }}\n                 />\n                 <button\n                   type=\"button\"\n@@ -431,9 +483,11 @@\n                     border: '1px solid #ddd',\n                     borderRadius: '4px',\n                     backgroundColor: '#fff',\n                     cursor: 'pointer',\n-                    fontSize: '12px'\n+                    fontSize: '12px',\n+                    height: '36px',\n+                    whiteSpace: 'nowrap'\n                   }}\n                 >\n                   적용금액 합계로 설정\n                 </button>\n"
                },
                {
                    "date": 1761459201845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,12 +70,12 @@\n         // DBProduct를 Product 타입으로 변환\n         const convertedProduct: Product = {\n           id: product.id,\n           name: product.name,\n-          originalPrice: product.price || 0, // 원래 기본 가격\n+          originalPrice: product.price || 0, // DB에서 가져온 기본 가격\n           basePrice: product.price || 0, // 기준 가격\n-          price: product.price || 0, // 상품금액 (초기값은 기본 가격)\n-          appliedPrice: product.price || 0, // 적용금액 (초기값은 기본 가격)\n+          price: product.price || 0, // 상품금액 (계산될 정확한 금액)\n+          appliedPrice: product.price || 0, // 적용금액 (사용자가 조정할 수 있는 최종 금액)\n           description: product.description,\n           programType: product.programType\n         };\n \n@@ -89,18 +89,22 @@\n           convertedProduct.duration = 30;\n           convertedProduct.baseDuration = 30;\n           convertedProduct.startDate = tomorrow;\n           convertedProduct.endDate = endDate;\n+          // 계산된 정확한 상품금액\n           convertedProduct.price = calculatePeriodPrice(product.price || 0, 30);\n+          // 적용금액도 초기에는 계산된 금액과 동일\n           convertedProduct.appliedPrice = convertedProduct.price;\n         }\n         // 횟수제인 경우 기본 횟수 설정 (상품에서 가져오거나 기본값 사용)\n         else if (product.programType === '횟수제') {\n           // DB에서 sessions 정보를 가져와야 하지만, 임시로 기본값 사용\n           const defaultSessions = 10; // 기본 10회\n           convertedProduct.sessions = defaultSessions;\n           convertedProduct.baseSessions = defaultSessions;\n+          // 계산된 정확한 상품금액\n           convertedProduct.price = calculateSessionPrice(product.price || 0, defaultSessions, defaultSessions);\n+          // 적용금액도 초기에는 계산된 금액과 동일\n           convertedProduct.appliedPrice = convertedProduct.price;\n         }\n \n         handleProductAdd(convertedProduct);\n"
                },
                {
                    "date": 1761736880386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,561 @@\n+import React, { useState, useEffect } from 'react';\n+import { \n+  StepContent, \n+  StepTitle, \n+  FormField, \n+  Label, \n+  ProductItem, \n+  ProductInfo, \n+  ProductName, \n+  RemoveButton,\n+  SkipMessage \n+} from './StyledComponents';\n+import { Product, StepProps } from './types';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import { dbManager, type Product as DBProduct } from '../../../utils/indexedDB';\n+\n+const PaymentInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n+  const [availableProducts, setAvailableProducts] = useState<DBProduct[]>([]);\n+  const [loading, setLoading] = useState(false);\n+\n+  // 선택된 지점이 변경될 때마다 상품 목록 로드\n+  useEffect(() => {\n+    if (formData.joinInfo.branchId) {\n+      loadProductsByBranch(formData.joinInfo.branchId);\n+    } else {\n+      setAvailableProducts([]);\n+    }\n+  }, [formData.joinInfo.branchId]);\n+\n+  // 지점별 상품 로드\n+  const loadProductsByBranch = async (branchId: string) => {\n+    setLoading(true);\n+    try {\n+      const products = await dbManager.getProductsByBranch(branchId);\n+      // 활성 상품만 필터링\n+      const activeProducts = products.filter(product => product.isActive);\n+      setAvailableProducts(activeProducts);\n+    } catch (error) {\n+      console.error('상품 로드 실패:', error);\n+      setAvailableProducts([]);\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  // 기간제 상품의 금액 계산 (기본 한달 기준으로 일할 계산)\n+  const calculatePeriodPrice = (basePrice: number, days: number): number => {\n+    const baseDays = 30; // 기본 한달 (30일) 기준\n+    return Math.round((basePrice / baseDays) * days);\n+  };\n+\n+  // 횟수제 상품의 금액 계산 (기준 횟수 대비 비례 계산)\n+  const calculateSessionPrice = (basePrice: number, sessions: number, baseSessions: number): number => {\n+    return Math.round((basePrice / baseSessions) * sessions);\n+  };\n+\n+  // 상품 선택 옵션 생성\n+  const getProductOptions = () => [\n+    { value: '', label: loading ? '상품 로딩 중...' : '상품을 선택하세요' },\n+    ...availableProducts.map(product => ({\n+      value: product.id,\n+      label: `${product.name} - ${product.price?.toLocaleString() || '가격미정'}원${product.programType === '기간제' ? ' (기간제)' : ''}`\n+    }))\n+  ];\n+\n+  const handleProductSelect = (value: string) => {\n+    if (value) {\n+      const product = availableProducts.find(p => p.id === value);\n+      if (product) {\n+        // DBProduct를 Product 타입으로 변환\n+        const convertedProduct: Product = {\n+          id: product.id,\n+          name: product.name,\n+          originalPrice: product.price || 0, // DB에서 가져온 기본 가격\n+          basePrice: product.price || 0, // 기준 가격\n+          price: product.price || 0, // 상품금액 (계산될 정확한 금액)\n+          appliedPrice: product.price || 0, // 적용금액 (사용자가 조정할 수 있는 최종 금액)\n+          description: product.description,\n+          programType: product.programType\n+        };\n+\n+        // 기간제인 경우 기본 30일 설정\n+        if (product.programType === '기간제') {\n+          const tomorrow = new Date();\n+          tomorrow.setDate(tomorrow.getDate() + 1);\n+          const endDate = new Date(tomorrow);\n+          endDate.setDate(endDate.getDate() + 30);\n+          \n+          convertedProduct.duration = 30;\n+          convertedProduct.baseDuration = 30;\n+          convertedProduct.startDate = tomorrow;\n+          convertedProduct.endDate = endDate;\n+          // 계산된 정확한 상품금액\n+          convertedProduct.price = calculatePeriodPrice(product.price || 0, 30);\n+          // 적용금액도 초기에는 계산된 금액과 동일\n+          convertedProduct.appliedPrice = convertedProduct.price;\n+        }\n+        // 횟수제인 경우 상품의 실제 횟수 설정\n+        else if (product.programType === '횟수제') {\n+          const productSessions = product.sessions || 10; // 상품에 설정된 횟수 또는 기본 10회\n+          convertedProduct.sessions = productSessions;\n+          convertedProduct.baseSessions = productSessions;\n+          // 횟수제는 상품 가격이 해당 횟수에 대한 가격이므로 그대로 사용\n+          convertedProduct.price = product.price || 0;\n+          // 적용금액도 초기에는 상품 가격과 동일\n+          convertedProduct.appliedPrice = convertedProduct.price;\n+        }\n+\n+        handleProductAdd(convertedProduct);\n+      }\n+    }\n+  };  const handleProductAdd = (product: Product) => {\n+    onUpdate({\n+      paymentInfo: {\n+        ...formData.paymentInfo,\n+        selectedProducts: [...formData.paymentInfo.selectedProducts, product]\n+      }\n+    });\n+  };\n+\n+  // 상품 편집 (기간, 횟수, 가격 등)\n+  const handleProductEdit = (index: number, field: string, value: any) => {\n+    const updatedProducts = [...formData.paymentInfo.selectedProducts];\n+    const product = { ...updatedProducts[index] };\n+    \n+    if (field === 'duration') {\n+      product.duration = value;\n+      if (product.programType === '기간제' && product.startDate) {\n+        // 기간제: 종료일 재계산\n+        const endDate = new Date(product.startDate);\n+        endDate.setDate(endDate.getDate() + value);\n+        product.endDate = endDate;\n+        // 상품금액 재계산\n+        const basePrice = product.basePrice || product.originalPrice || 0;\n+        product.price = calculatePeriodPrice(basePrice, value);\n+        product.appliedPrice = product.price; // 적용금액도 함께 업데이트\n+      }\n+    } else if (field === 'sessions') {\n+      product.sessions = value;\n+      if (product.programType === '횟수제') {\n+        // 횟수제: 상품의 기본 횟수와 가격을 기준으로 비례 계산\n+        const basePrice = product.basePrice || product.originalPrice || 0;\n+        const baseSessions = product.baseSessions || 1; // 상품의 기본 횟수\n+        product.price = calculateSessionPrice(basePrice, value, baseSessions);\n+        product.appliedPrice = product.price; // 적용금액도 함께 업데이트\n+      }\n+    } else if (field === 'startDate') {\n+      product.startDate = value;\n+      if (product.programType === '기간제' && product.duration) {\n+        // 시작일 변경 시 종료일 재계산\n+        const endDate = new Date(value);\n+        endDate.setDate(endDate.getDate() + product.duration);\n+        product.endDate = endDate;\n+      }\n+    } else if (field === 'appliedPrice') {\n+      // 적용금액은 사용자가 직접 수정 가능\n+      product.appliedPrice = value;\n+    }\n+    \n+    updatedProducts[index] = product;\n+    \n+    onUpdate({\n+      paymentInfo: {\n+        ...formData.paymentInfo,\n+        selectedProducts: updatedProducts\n+      }\n+    });\n+  };\n+\n+  const handleProductRemove = (productId: string) => {\n+    const updatedProducts = formData.paymentInfo.selectedProducts.filter((p, index) => {\n+      // 같은 상품이 여러 개 있을 수 있으므로 첫 번째 것만 제거\n+      const firstMatchIndex = formData.paymentInfo.selectedProducts.findIndex(product => product.id === productId);\n+      return index !== firstMatchIndex;\n+    });\n+    \n+    onUpdate({\n+      paymentInfo: {\n+        ...formData.paymentInfo,\n+        selectedProducts: updatedProducts\n+      }\n+    });\n+  };\n+\n+  const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => {\n+    return sum + (product.appliedPrice || product.price);\n+  }, 0);\n+\n+  // 결제 방법 옵션\n+  const paymentMethodOptions = [\n+    { value: 'card', label: '카드' },\n+    { value: 'cash', label: '현금' },\n+    { value: 'transfer', label: '계좌이체' }\n+  ];\n+\n+  const handlePaymentMethodChange = (value: string) => {\n+    onUpdate({\n+      paymentInfo: {\n+        ...formData.paymentInfo,\n+        paymentMethod: value\n+      }\n+    });\n+  };\n+\n+  return (\n+    <StepContent>\n+      <StepTitle>결제정보</StepTitle>\n+      \n+      <FormField>\n+        <Label>결제 방법</Label>\n+        <CustomDropdown\n+          value={formData.paymentInfo.paymentMethod || 'card'}\n+          onChange={handlePaymentMethodChange}\n+          options={paymentMethodOptions}\n+        />\n+      </FormField>\n+      \n+      {formData.paymentInfo.selectedProducts.length === 0 ? (\n+        <SkipMessage>\n+          결제할 상품이 없습니다.<br />\n+          상품을 선택하거나 건너뛰기를 선택하세요.\n+        </SkipMessage>\n+      ) : (\n+        <div>\n+          <h3>선택된 상품</h3>\n+          {formData.paymentInfo.selectedProducts.map((product, index) => (\n+            <ProductItem key={`${product.id}-${index}`} style={{ marginBottom: '16px' }}>\n+              <ProductInfo style={{ flex: 1 }}>\n+                <ProductName>{product.name}</ProductName>\n+                \n+                {/* 기간제 상품 편집 */}\n+                {product.programType === '기간제' && (\n+                  <div style={{ \n+                    marginTop: '8px', \n+                    padding: '12px', \n+                    backgroundColor: '#f8f9fa', \n+                    borderRadius: '6px',\n+                    border: '1px solid #e9ecef'\n+                  }}>\n+                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginBottom: '8px' }}>\n+                      <div>\n+                        <label style={{ \n+                          fontSize: '12px', \n+                          color: '#666', \n+                          display: 'block', \n+                          marginBottom: '6px',\n+                          fontWeight: '500'\n+                        }}>\n+                          시작일\n+                        </label>\n+                        <input\n+                          type=\"date\"\n+                          value={product.startDate ? product.startDate.toISOString().split('T')[0] : ''}\n+                          onChange={(e) => handleProductEdit(index, 'startDate', new Date(e.target.value))}\n+                          style={{\n+                            width: '100%',\n+                            padding: '8px 10px',\n+                            border: '1px solid #ddd',\n+                            borderRadius: '4px',\n+                            fontSize: '13px',\n+                            boxSizing: 'border-box',\n+                            height: '36px'\n+                          }}\n+                        />\n+                      </div>\n+                      <div>\n+                        <label style={{ \n+                          fontSize: '12px', \n+                          color: '#666', \n+                          display: 'block', \n+                          marginBottom: '6px',\n+                          fontWeight: '500'\n+                        }}>\n+                          기간(일)\n+                        </label>\n+                        <input\n+                          type=\"number\"\n+                          min=\"1\"\n+                          max=\"365\"\n+                          value={product.duration || 30}\n+                          onChange={(e) => handleProductEdit(index, 'duration', parseInt(e.target.value) || 1)}\n+                          style={{\n+                            width: '100%',\n+                            padding: '8px 10px',\n+                            border: '1px solid #ddd',\n+                            borderRadius: '4px',\n+                            fontSize: '13px',\n+                            boxSizing: 'border-box',\n+                            height: '36px'\n+                          }}\n+                        />\n+                      </div>\n+                    </div>\n+                    {product.endDate && (\n+                      <div style={{ \n+                        fontSize: '11px', \n+                        color: '#666',\n+                        marginTop: '4px',\n+                        padding: '4px 8px',\n+                        backgroundColor: '#fff',\n+                        borderRadius: '3px',\n+                        border: '1px solid #e9ecef'\n+                      }}>\n+                        종료일: {product.endDate.toLocaleDateString()}\n+                      </div>\n+                    )}\n+                  </div>\n+                )}\n+\n+                {/* 횟수제 상품 편집 */}\n+                {product.programType === '횟수제' && (\n+                  <div style={{ \n+                    marginTop: '8px', \n+                    padding: '12px', \n+                    backgroundColor: '#f8f9fa', \n+                    borderRadius: '6px',\n+                    border: '1px solid #e9ecef'\n+                  }}>\n+                    <div>\n+                      <label style={{ \n+                        fontSize: '12px', \n+                        color: '#666', \n+                        display: 'block', \n+                        marginBottom: '6px',\n+                        fontWeight: '500'\n+                      }}>\n+                        수업 횟수\n+                      </label>\n+                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n+                        <input\n+                          type=\"number\"\n+                          min=\"1\"\n+                          max=\"100\"\n+                          value={product.sessions || (product.baseSessions || 10)}\n+                          onChange={(e) => handleProductEdit(index, 'sessions', parseInt(e.target.value) || 1)}\n+                          style={{\n+                            width: '100px',\n+                            padding: '8px 10px',\n+                            border: '1px solid #ddd',\n+                            borderRadius: '4px',\n+                            fontSize: '13px',\n+                            boxSizing: 'border-box',\n+                            height: '36px'\n+                          }}\n+                        />\n+                        <span style={{ fontSize: '13px', color: '#666', fontWeight: '500' }}>회</span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                )}\n+\n+                {/* 가격 정보 */}\n+                <div style={{ \n+                  marginTop: '12px', \n+                  padding: '12px', \n+                  backgroundColor: '#fff', \n+                  borderRadius: '6px',\n+                  border: '1px solid #ddd'\n+                }}>\n+                  <div style={{ marginBottom: '10px' }}>\n+                    <span style={{ fontSize: '12px', color: '#666', fontWeight: '500' }}>상품금액: </span>\n+                    <span style={{ fontSize: '14px', fontWeight: 'bold', color: '#333' }}>\n+                      {product.price.toLocaleString()}원\n+                    </span>\n+                    {product.price !== (product.originalPrice || 0) && (\n+                      <span style={{ \n+                        fontSize: '11px', \n+                        color: '#999', \n+                        textDecoration: 'line-through',\n+                        marginLeft: '8px'\n+                      }}>\n+                        (원가: {(product.originalPrice || 0).toLocaleString()}원)\n+                      </span>\n+                    )}\n+                  </div>\n+                  \n+                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n+                    <label style={{ \n+                      fontSize: '12px', \n+                      color: '#666', \n+                      minWidth: '60px',\n+                      fontWeight: '500'\n+                    }}>\n+                      적용금액:\n+                    </label>\n+                    <input\n+                      type=\"number\"\n+                      min=\"0\"\n+                      step=\"1000\"\n+                      value={product.appliedPrice || product.price}\n+                      onChange={(e) => handleProductEdit(index, 'appliedPrice', parseInt(e.target.value) || 0)}\n+                      style={{\n+                        width: '120px',\n+                        padding: '8px 10px',\n+                        border: '1px solid #ddd',\n+                        borderRadius: '4px',\n+                        fontSize: '14px',\n+                        fontWeight: 'bold',\n+                        color: '#0066cc',\n+                        boxSizing: 'border-box',\n+                        height: '36px'\n+                      }}\n+                    />\n+                    <span style={{ fontSize: '14px', fontWeight: 'bold', color: '#0066cc' }}>원</span>\n+                    \n+                    {/* 상품금액 대비 적용금액 차이 표시 */}\n+                    {(product.appliedPrice || product.price) !== product.price && (\n+                      <span style={{ \n+                        fontSize: '11px', \n+                        color: (product.appliedPrice || product.price) > product.price ? '#dc3545' : '#28a745',\n+                        fontWeight: 'bold',\n+                        marginLeft: '4px'\n+                      }}>\n+                        ({(product.appliedPrice || product.price) > product.price ? '+' : ''}\n+                        {((product.appliedPrice || product.price) - product.price).toLocaleString()}원)\n+                      </span>\n+                    )}\n+                  </div>\n+                </div>\n+              </ProductInfo>\n+              \n+              <RemoveButton\n+                onClick={() => handleProductRemove(product.id)}\n+                style={{ alignSelf: 'flex-start', marginTop: '8px' }}\n+              >\n+                ✕\n+              </RemoveButton>\n+            </ProductItem>\n+          ))}\n+          \n+          {/* 기존 기간제 상품 설정 UI 제거 */}\n+          \n+          <div style={{ \n+            marginTop: '16px', \n+            padding: '16px', \n+            backgroundColor: '#f8f9fa', \n+            borderRadius: '8px'\n+          }}>\n+            <div style={{\n+              textAlign: 'right',\n+              fontWeight: 'bold',\n+              fontSize: '18px',\n+              marginBottom: '12px'\n+            }}>\n+              총 결제금액: {totalAmount.toLocaleString()}원\n+            </div>\n+            \n+            <FormField>\n+              <Label>받은금액</Label>\n+              <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\n+                <input\n+                  type=\"number\"\n+                  value={formData.paymentInfo.receivedAmount || totalAmount}\n+                  onChange={(e) => {\n+                    const value = e.target.value ? parseFloat(e.target.value) : 0;\n+                    onUpdate({\n+                      paymentInfo: {\n+                        ...formData.paymentInfo,\n+                        receivedAmount: value\n+                      }\n+                    });\n+                  }}\n+                  placeholder=\"받은 금액을 입력하세요\"\n+                  style={{\n+                    flex: 1,\n+                    padding: '8px 12px',\n+                    border: '1px solid #ddd',\n+                    borderRadius: '4px',\n+                    fontSize: '14px',\n+                    boxSizing: 'border-box',\n+                    height: '36px'\n+                  }}\n+                />\n+                <button\n+                  type=\"button\"\n+                  onClick={() => {\n+                    onUpdate({\n+                      paymentInfo: {\n+                        ...formData.paymentInfo,\n+                        receivedAmount: totalAmount\n+                      }\n+                    });\n+                  }}\n+                  style={{\n+                    padding: '8px 12px',\n+                    border: '1px solid #ddd',\n+                    borderRadius: '4px',\n+                    backgroundColor: '#fff',\n+                    cursor: 'pointer',\n+                    fontSize: '12px',\n+                    height: '36px',\n+                    whiteSpace: 'nowrap'\n+                  }}\n+                >\n+                  적용금액 합계로 설정\n+                </button>\n+              </div>\n+              {formData.paymentInfo.receivedAmount !== undefined && formData.paymentInfo.receivedAmount !== totalAmount && (\n+                <div style={{ \n+                  marginTop: '8px', \n+                  fontSize: '12px',\n+                  color: formData.paymentInfo.receivedAmount > totalAmount ? '#28a745' : '#dc3545'\n+                }}>\n+                  {formData.paymentInfo.receivedAmount > totalAmount \n+                    ? (() => {\n+                        const excessAmount = formData.paymentInfo.receivedAmount - totalAmount;\n+                        let message = `초과금액: ${excessAmount.toLocaleString()}원 (포인트로 적립 예정)`;\n+                        \n+                        if (excessAmount >= 1000000) {\n+                          const millionUnits = Math.floor(excessAmount / 1000000);\n+                          const bonusPoints = millionUnits * 100000;\n+                          message += ` + 보너스 ${bonusPoints.toLocaleString()}원`;\n+                        }\n+                        \n+                        return message;\n+                      })()\n+                    : `부족금액: ${(totalAmount - formData.paymentInfo.receivedAmount).toLocaleString()}원 (미수금으로 처리 예정)`\n+                  }\n+                </div>\n+              )}\n+            </FormField>\n+          </div>\n+        </div>\n+      )}\n+\n+      <FormField style={{ marginTop: '24px' }}>\n+        <Label>상품 추가</Label>\n+        {!formData.joinInfo.branchId ? (\n+          <div style={{ \n+            padding: '12px', \n+            backgroundColor: '#fff3cd', \n+            border: '1px solid #ffeaa7', \n+            borderRadius: '4px',\n+            color: '#856404',\n+            fontSize: '14px'\n+          }}>\n+            먼저 가입정보에서 지점을 선택해주세요.\n+          </div>\n+        ) : (\n+          <CustomDropdown\n+            value=\"\"\n+            onChange={handleProductSelect}\n+            options={getProductOptions()}\n+            disabled={loading || availableProducts.length === 0}\n+          />\n+        )}\n+        {formData.joinInfo.branchId && availableProducts.length === 0 && !loading && (\n+          <div style={{ \n+            marginTop: '8px',\n+            color: '#6c757d',\n+            fontSize: '12px'\n+          }}>\n+            선택한 지점에 등록된 상품이 없습니다.\n+          </div>\n+        )}\n+      </FormField>\n+    </StepContent>\n+  );\n+};\n+\n+export default PaymentInfoStep;\n"
                },
                {
                    "date": 1761910063211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,14 +42,8 @@\n       setLoading(false);\n     }\n   };\n \n-  // 기간제 상품의 금액 계산 (기본 한달 기준으로 일할 계산)\n-  const calculatePeriodPrice = (basePrice: number, days: number): number => {\n-    const baseDays = 30; // 기본 한달 (30일) 기준\n-    return Math.round((basePrice / baseDays) * days);\n-  };\n-\n   // 횟수제 상품의 금액 계산 (기준 횟수 대비 비례 계산)\n   const calculateSessionPrice = (basePrice: number, sessions: number, baseSessions: number): number => {\n     return Math.round((basePrice / baseSessions) * sessions);\n   };\n@@ -78,22 +72,29 @@\n           description: product.description,\n           programType: product.programType\n         };\n \n-        // 기간제인 경우 기본 30일 설정\n+        // 기간제인 경우 상품의 개월수를 기준으로 설정\n         if (product.programType === '기간제') {\n           const tomorrow = new Date();\n           tomorrow.setDate(tomorrow.getDate() + 1);\n+          \n+          // 상품에 등록된 개월수를 기준으로 설정 (기본값: 1개월)\n+          const productMonths = product.months || 1;\n+          const days = productMonths * 30; // 개월수를 일수로 변환 (1개월 = 30일)\n+          \n           const endDate = new Date(tomorrow);\n-          endDate.setDate(endDate.getDate() + 30);\n+          endDate.setDate(endDate.getDate() + days);\n           \n-          convertedProduct.duration = 30;\n-          convertedProduct.baseDuration = 30;\n+          convertedProduct.duration = days;\n+          convertedProduct.baseDuration = days;\n+          convertedProduct.months = productMonths; // 개월수 저장\n+          convertedProduct.baseMonths = productMonths; // 기준 개월수 저장\n           convertedProduct.startDate = tomorrow;\n           convertedProduct.endDate = endDate;\n-          // 계산된 정확한 상품금액\n-          convertedProduct.price = calculatePeriodPrice(product.price || 0, 30);\n-          // 적용금액도 초기에는 계산된 금액과 동일\n+          // 상품 가격은 해당 개월수에 대한 가격이므로 그대로 사용 (기간제는 가격 고정)\n+          convertedProduct.price = product.price || 0;\n+          // 적용금액도 초기에는 상품 가격과 동일\n           convertedProduct.appliedPrice = convertedProduct.price;\n         }\n         // 횟수제인 경우 상품의 실제 횟수 설정\n         else if (product.programType === '횟수제') {\n@@ -125,17 +126,34 @@\n     \n     if (field === 'duration') {\n       product.duration = value;\n       if (product.programType === '기간제' && product.startDate) {\n-        // 기간제: 종료일 재계산\n+        // 기간제: 일수를 개월수로 변환 (가격은 변경하지 않음)\n+        const months = Math.round(value / 30); // 일수를 개월수로 변환 (30일 = 1개월)\n+        product.months = months;\n+        \n+        // 종료일 재계산\n         const endDate = new Date(product.startDate);\n         endDate.setDate(endDate.getDate() + value);\n         product.endDate = endDate;\n-        // 상품금액 재계산\n-        const basePrice = product.basePrice || product.originalPrice || 0;\n-        product.price = calculatePeriodPrice(basePrice, value);\n-        product.appliedPrice = product.price; // 적용금액도 함께 업데이트\n+        \n+        // 기간제는 가격 고정 (기간 변경해도 가격 변동 없음)\n       }\n+    } else if (field === 'months') {\n+      // 개월수 직접 변경 (기간제)\n+      product.months = value;\n+      if (product.programType === '기간제' && product.startDate) {\n+        // 개월수를 일수로 변환\n+        const days = value * 30; // 1개월 = 30일\n+        product.duration = days;\n+        \n+        // 종료일 재계산\n+        const endDate = new Date(product.startDate);\n+        endDate.setDate(endDate.getDate() + days);\n+        product.endDate = endDate;\n+        \n+        // 기간제는 가격 고정 (기간 변경해도 가격 변동 없음)\n+      }\n     } else if (field === 'sessions') {\n       product.sessions = value;\n       if (product.programType === '횟수제') {\n         // 횟수제: 상품의 기본 횟수와 가격을 기준으로 비례 계산\n@@ -151,570 +169,16 @@\n         const endDate = new Date(value);\n         endDate.setDate(endDate.getDate() + product.duration);\n         product.endDate = endDate;\n       }\n-    } else if (field === 'appliedPrice') {\n-      // 적용금액은 사용자가 직접 수정 가능\n-      product.appliedPrice = value;\n-    }\n-    \n-    updatedProducts[index] = product;\n-    \n-    onUpdate({\n-      paymentInfo: {\n-        ...formData.paymentInfo,\n-        selectedProducts: updatedProducts\n-      }\n-    });\n-  };\n-\n-  const handleProductRemove = (productId: string) => {\n-    const updatedProducts = formData.paymentInfo.selectedProducts.filter((p, index) => {\n-      // 같은 상품이 여러 개 있을 수 있으므로 첫 번째 것만 제거\n-      const firstMatchIndex = formData.paymentInfo.selectedProducts.findIndex(product => product.id === productId);\n-      return index !== firstMatchIndex;\n-    });\n-    \n-    onUpdate({\n-      paymentInfo: {\n-        ...formData.paymentInfo,\n-        selectedProducts: updatedProducts\n-      }\n-    });\n-  };\n-\n-  const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => {\n-    return sum + (product.appliedPrice || product.price);\n-  }, 0);\n-\n-  // 결제 방법 옵션\n-  const paymentMethodOptions = [\n-    { value: 'card', label: '카드' },\n-    { value: 'cash', label: '현금' },\n-    { value: 'transfer', label: '계좌이체' }\n-  ];\n-\n-  const handlePaymentMethodChange = (value: string) => {\n-    onUpdate({\n-      paymentInfo: {\n-        ...formData.paymentInfo,\n-        paymentMethod: value\n-      }\n-    });\n-  };\n-\n-  return (\n-    <StepContent>\n-      <StepTitle>결제정보</StepTitle>\n-      \n-      <FormField>\n-        <Label>결제 방법</Label>\n-        <CustomDropdown\n-          value={formData.paymentInfo.paymentMethod || 'card'}\n-          onChange={handlePaymentMethodChange}\n-          options={paymentMethodOptions}\n-        />\n-      </FormField>\n-      \n-      {formData.paymentInfo.selectedProducts.length === 0 ? (\n-        <SkipMessage>\n-          결제할 상품이 없습니다.<br />\n-          상품을 선택하거나 건너뛰기를 선택하세요.\n-        </SkipMessage>\n-      ) : (\n-        <div>\n-          <h3>선택된 상품</h3>\n-          {formData.paymentInfo.selectedProducts.map((product, index) => (\n-            <ProductItem key={`${product.id}-${index}`} style={{ marginBottom: '16px' }}>\n-              <ProductInfo style={{ flex: 1 }}>\n-                <ProductName>{product.name}</ProductName>\n-                \n-                {/* 기간제 상품 편집 */}\n-                {product.programType === '기간제' && (\n-                  <div style={{ \n-                    marginTop: '8px', \n-                    padding: '12px', \n-                    backgroundColor: '#f8f9fa', \n-                    borderRadius: '6px',\n-                    border: '1px solid #e9ecef'\n-                  }}>\n-                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginBottom: '8px' }}>\n-                      <div>\n-                        <label style={{ \n-                          fontSize: '12px', \n-                          color: '#666', \n-                          display: 'block', \n-                          marginBottom: '6px',\n-                          fontWeight: '500'\n-                        }}>\n-                          시작일\n-                        </label>\n-                        <input\n-                          type=\"date\"\n-                          value={product.startDate ? product.startDate.toISOString().split('T')[0] : ''}\n-                          onChange={(e) => handleProductEdit(index, 'startDate', new Date(e.target.value))}\n-                          style={{\n-                            width: '100%',\n-                            padding: '8px 10px',\n-                            border: '1px solid #ddd',\n-                            borderRadius: '4px',\n-                            fontSize: '13px',\n-                            boxSizing: 'border-box',\n-                            height: '36px'\n-                          }}\n-                        />\n-                      </div>\n-                      <div>\n-                        <label style={{ \n-                          fontSize: '12px', \n-                          color: '#666', \n-                          display: 'block', \n-                          marginBottom: '6px',\n-                          fontWeight: '500'\n-                        }}>\n-                          기간(일)\n-                        </label>\n-                        <input\n-                          type=\"number\"\n-                          min=\"1\"\n-                          max=\"365\"\n-                          value={product.duration || 30}\n-                          onChange={(e) => handleProductEdit(index, 'duration', parseInt(e.target.value) || 1)}\n-                          style={{\n-                            width: '100%',\n-                            padding: '8px 10px',\n-                            border: '1px solid #ddd',\n-                            borderRadius: '4px',\n-                            fontSize: '13px',\n-                            boxSizing: 'border-box',\n-                            height: '36px'\n-                          }}\n-                        />\n-                      </div>\n-                    </div>\n-                    {product.endDate && (\n-                      <div style={{ \n-                        fontSize: '11px', \n-                        color: '#666',\n-                        marginTop: '4px',\n-                        padding: '4px 8px',\n-                        backgroundColor: '#fff',\n-                        borderRadius: '3px',\n-                        border: '1px solid #e9ecef'\n-                      }}>\n-                        종료일: {product.endDate.toLocaleDateString()}\n-                      </div>\n-                    )}\n-                  </div>\n-                )}\n-\n-                {/* 횟수제 상품 편집 */}\n-                {product.programType === '횟수제' && (\n-                  <div style={{ \n-                    marginTop: '8px', \n-                    padding: '12px', \n-                    backgroundColor: '#f8f9fa', \n-                    borderRadius: '6px',\n-                    border: '1px solid #e9ecef'\n-                  }}>\n-                    <div>\n-                      <label style={{ \n-                        fontSize: '12px', \n-                        color: '#666', \n-                        display: 'block', \n-                        marginBottom: '6px',\n-                        fontWeight: '500'\n-                      }}>\n-                        수업 횟수\n-                      </label>\n-                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n-                        <input\n-                          type=\"number\"\n-                          min=\"1\"\n-                          max=\"100\"\n-                          value={product.sessions || (product.baseSessions || 10)}\n-                          onChange={(e) => handleProductEdit(index, 'sessions', parseInt(e.target.value) || 1)}\n-                          style={{\n-                            width: '100px',\n-                            padding: '8px 10px',\n-                            border: '1px solid #ddd',\n-                            borderRadius: '4px',\n-                            fontSize: '13px',\n-                            boxSizing: 'border-box',\n-                            height: '36px'\n-                          }}\n-                        />\n-                        <span style={{ fontSize: '13px', color: '#666', fontWeight: '500' }}>회</span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                )}\n-\n-                {/* 가격 정보 */}\n-                <div style={{ \n-                  marginTop: '12px', \n-                  padding: '12px', \n-                  backgroundColor: '#fff', \n-                  borderRadius: '6px',\n-                  border: '1px solid #ddd'\n-                }}>\n-                  <div style={{ marginBottom: '10px' }}>\n-                    <span style={{ fontSize: '12px', color: '#666', fontWeight: '500' }}>상품금액: </span>\n-                    <span style={{ fontSize: '14px', fontWeight: 'bold', color: '#333' }}>\n-                      {product.price.toLocaleString()}원\n-                    </span>\n-                    {product.price !== (product.originalPrice || 0) && (\n-                      <span style={{ \n-                        fontSize: '11px', \n-                        color: '#999', \n-                        textDecoration: 'line-through',\n-                        marginLeft: '8px'\n-                      }}>\n-                        (원가: {(product.originalPrice || 0).toLocaleString()}원)\n-                      </span>\n-                    )}\n-                  </div>\n-                  \n-                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n-                    <label style={{ \n-                      fontSize: '12px', \n-                      color: '#666', \n-                      minWidth: '60px',\n-                      fontWeight: '500'\n-                    }}>\n-                      적용금액:\n-                    </label>\n-                    <input\n-                      type=\"number\"\n-                      min=\"0\"\n-                      step=\"1000\"\n-                      value={product.appliedPrice || product.price}\n-                      onChange={(e) => handleProductEdit(index, 'appliedPrice', parseInt(e.target.value) || 0)}\n-                      style={{\n-                        width: '120px',\n-                        padding: '8px 10px',\n-                        border: '1px solid #ddd',\n-                        borderRadius: '4px',\n-                        fontSize: '14px',\n-                        fontWeight: 'bold',\n-                        color: '#0066cc',\n-                        boxSizing: 'border-box',\n-                        height: '36px'\n-                      }}\n-                    />\n-                    <span style={{ fontSize: '14px', fontWeight: 'bold', color: '#0066cc' }}>원</span>\n-                    \n-                    {/* 상품금액 대비 적용금액 차이 표시 */}\n-                    {(product.appliedPrice || product.price) !== product.price && (\n-                      <span style={{ \n-                        fontSize: '11px', \n-                        color: (product.appliedPrice || product.price) > product.price ? '#dc3545' : '#28a745',\n-                        fontWeight: 'bold',\n-                        marginLeft: '4px'\n-                      }}>\n-                        ({(product.appliedPrice || product.price) > product.price ? '+' : ''}\n-                        {((product.appliedPrice || product.price) - product.price).toLocaleString()}원)\n-                      </span>\n-                    )}\n-                  </div>\n-                </div>\n-              </ProductInfo>\n-              \n-              <RemoveButton\n-                onClick={() => handleProductRemove(product.id)}\n-                style={{ alignSelf: 'flex-start', marginTop: '8px' }}\n-              >\n-                ✕\n-              </RemoveButton>\n-            </ProductItem>\n-          ))}\n-          \n-          {/* 기존 기간제 상품 설정 UI 제거 */}\n-          \n-          <div style={{ \n-            marginTop: '16px', \n-            padding: '16px', \n-            backgroundColor: '#f8f9fa', \n-            borderRadius: '8px'\n-          }}>\n-            <div style={{\n-              textAlign: 'right',\n-              fontWeight: 'bold',\n-              fontSize: '18px',\n-              marginBottom: '12px'\n-            }}>\n-              총 결제금액: {totalAmount.toLocaleString()}원\n-            </div>\n-            \n-            <FormField>\n-              <Label>받은금액</Label>\n-              <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\n-                <input\n-                  type=\"number\"\n-                  value={formData.paymentInfo.receivedAmount || totalAmount}\n-                  onChange={(e) => {\n-                    const value = e.target.value ? parseFloat(e.target.value) : 0;\n-                    onUpdate({\n-                      paymentInfo: {\n-                        ...formData.paymentInfo,\n-                        receivedAmount: value\n-                      }\n-                    });\n-                  }}\n-                  placeholder=\"받은 금액을 입력하세요\"\n-                  style={{\n-                    flex: 1,\n-                    padding: '8px 12px',\n-                    border: '1px solid #ddd',\n-                    borderRadius: '4px',\n-                    fontSize: '14px',\n-                    boxSizing: 'border-box',\n-                    height: '36px'\n-                  }}\n-                />\n-                <button\n-                  type=\"button\"\n-                  onClick={() => {\n-                    onUpdate({\n-                      paymentInfo: {\n-                        ...formData.paymentInfo,\n-                        receivedAmount: totalAmount\n-                      }\n-                    });\n-                  }}\n-                  style={{\n-                    padding: '8px 12px',\n-                    border: '1px solid #ddd',\n-                    borderRadius: '4px',\n-                    backgroundColor: '#fff',\n-                    cursor: 'pointer',\n-                    fontSize: '12px',\n-                    height: '36px',\n-                    whiteSpace: 'nowrap'\n-                  }}\n-                >\n-                  적용금액 합계로 설정\n-                </button>\n-              </div>\n-              {formData.paymentInfo.receivedAmount !== undefined && formData.paymentInfo.receivedAmount !== totalAmount && (\n-                <div style={{ \n-                  marginTop: '8px', \n-                  fontSize: '12px',\n-                  color: formData.paymentInfo.receivedAmount > totalAmount ? '#28a745' : '#dc3545'\n-                }}>\n-                  {formData.paymentInfo.receivedAmount > totalAmount \n-                    ? (() => {\n-                        const excessAmount = formData.paymentInfo.receivedAmount - totalAmount;\n-                        let message = `초과금액: ${excessAmount.toLocaleString()}원 (포인트로 적립 예정)`;\n-                        \n-                        if (excessAmount >= 1000000) {\n-                          const millionUnits = Math.floor(excessAmount / 1000000);\n-                          const bonusPoints = millionUnits * 100000;\n-                          message += ` + 보너스 ${bonusPoints.toLocaleString()}원`;\n-                        }\n-                        \n-                        return message;\n-                      })()\n-                    : `부족금액: ${(totalAmount - formData.paymentInfo.receivedAmount).toLocaleString()}원 (미수금으로 처리 예정)`\n-                  }\n-                </div>\n-              )}\n-            </FormField>\n-          </div>\n-        </div>\n-      )}\n-\n-      <FormField style={{ marginTop: '24px' }}>\n-        <Label>상품 추가</Label>\n-        {!formData.joinInfo.branchId ? (\n-          <div style={{ \n-            padding: '12px', \n-            backgroundColor: '#fff3cd', \n-            border: '1px solid #ffeaa7', \n-            borderRadius: '4px',\n-            color: '#856404',\n-            fontSize: '14px'\n-          }}>\n-            먼저 가입정보에서 지점을 선택해주세요.\n-          </div>\n-        ) : (\n-          <CustomDropdown\n-            value=\"\"\n-            onChange={handleProductSelect}\n-            options={getProductOptions()}\n-            disabled={loading || availableProducts.length === 0}\n-          />\n-        )}\n-        {formData.joinInfo.branchId && availableProducts.length === 0 && !loading && (\n-          <div style={{ \n-            marginTop: '8px',\n-            color: '#6c757d',\n-            fontSize: '12px'\n-          }}>\n-            선택한 지점에 등록된 상품이 없습니다.\n-          </div>\n-        )}\n-      </FormField>\n-    </StepContent>\n-  );\n-};\n-\n-export default PaymentInfoStep;\n-import React, { useState, useEffect } from 'react';\n-import { \n-  StepContent, \n-  StepTitle, \n-  FormField, \n-  Label, \n-  ProductItem, \n-  ProductInfo, \n-  ProductName, \n-  RemoveButton,\n-  SkipMessage \n-} from './StyledComponents';\n-import { Product, StepProps } from './types';\n-import CustomDropdown from '../../../components/CustomDropdown';\n-import { dbManager, type Product as DBProduct } from '../../../utils/indexedDB';\n-\n-const PaymentInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n-  const [availableProducts, setAvailableProducts] = useState<DBProduct[]>([]);\n-  const [loading, setLoading] = useState(false);\n-\n-  // 선택된 지점이 변경될 때마다 상품 목록 로드\n-  useEffect(() => {\n-    if (formData.joinInfo.branchId) {\n-      loadProductsByBranch(formData.joinInfo.branchId);\n-    } else {\n-      setAvailableProducts([]);\n-    }\n-  }, [formData.joinInfo.branchId]);\n-\n-  // 지점별 상품 로드\n-  const loadProductsByBranch = async (branchId: string) => {\n-    setLoading(true);\n-    try {\n-      const products = await dbManager.getProductsByBranch(branchId);\n-      // 활성 상품만 필터링\n-      const activeProducts = products.filter(product => product.isActive);\n-      setAvailableProducts(activeProducts);\n-    } catch (error) {\n-      console.error('상품 로드 실패:', error);\n-      setAvailableProducts([]);\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  // 기간제 상품의 금액 계산 (기본 한달 기준으로 일할 계산)\n-  const calculatePeriodPrice = (basePrice: number, days: number): number => {\n-    const baseDays = 30; // 기본 한달 (30일) 기준\n-    return Math.round((basePrice / baseDays) * days);\n-  };\n-\n-  // 횟수제 상품의 금액 계산 (기준 횟수 대비 비례 계산)\n-  const calculateSessionPrice = (basePrice: number, sessions: number, baseSessions: number): number => {\n-    return Math.round((basePrice / baseSessions) * sessions);\n-  };\n-\n-  // 상품 선택 옵션 생성\n-  const getProductOptions = () => [\n-    { value: '', label: loading ? '상품 로딩 중...' : '상품을 선택하세요' },\n-    ...availableProducts.map(product => ({\n-      value: product.id,\n-      label: `${product.name} - ${product.price?.toLocaleString() || '가격미정'}원${product.programType === '기간제' ? ' (기간제)' : ''}`\n-    }))\n-  ];\n-\n-  const handleProductSelect = (value: string) => {\n-    if (value) {\n-      const product = availableProducts.find(p => p.id === value);\n-      if (product) {\n-        // DBProduct를 Product 타입으로 변환\n-        const convertedProduct: Product = {\n-          id: product.id,\n-          name: product.name,\n-          originalPrice: product.price || 0, // DB에서 가져온 기본 가격\n-          basePrice: product.price || 0, // 기준 가격\n-          price: product.price || 0, // 상품금액 (계산될 정확한 금액)\n-          appliedPrice: product.price || 0, // 적용금액 (사용자가 조정할 수 있는 최종 금액)\n-          description: product.description,\n-          programType: product.programType\n-        };\n-\n-        // 기간제인 경우 기본 30일 설정\n-        if (product.programType === '기간제') {\n-          const tomorrow = new Date();\n-          tomorrow.setDate(tomorrow.getDate() + 1);\n-          const endDate = new Date(tomorrow);\n-          endDate.setDate(endDate.getDate() + 30);\n-          \n-          convertedProduct.duration = 30;\n-          convertedProduct.baseDuration = 30;\n-          convertedProduct.startDate = tomorrow;\n-          convertedProduct.endDate = endDate;\n-          // 계산된 정확한 상품금액\n-          convertedProduct.price = calculatePeriodPrice(product.price || 0, 30);\n-          // 적용금액도 초기에는 계산된 금액과 동일\n-          convertedProduct.appliedPrice = convertedProduct.price;\n-        }\n-        // 횟수제인 경우 기본 횟수 설정 (상품에서 가져오거나 기본값 사용)\n-        else if (product.programType === '횟수제') {\n-          // DB에서 sessions 정보를 가져와야 하지만, 임시로 기본값 사용\n-          const defaultSessions = 10; // 기본 10회\n-          convertedProduct.sessions = defaultSessions;\n-          convertedProduct.baseSessions = defaultSessions;\n-          // 계산된 정확한 상품금액\n-          convertedProduct.price = calculateSessionPrice(product.price || 0, defaultSessions, defaultSessions);\n-          // 적용금액도 초기에는 계산된 금액과 동일\n-          convertedProduct.appliedPrice = convertedProduct.price;\n-        }\n-\n-        handleProductAdd(convertedProduct);\n-      }\n-    }\n-  };  const handleProductAdd = (product: Product) => {\n-    onUpdate({\n-      paymentInfo: {\n-        ...formData.paymentInfo,\n-        selectedProducts: [...formData.paymentInfo.selectedProducts, product]\n-      }\n-    });\n-  };\n-\n-  // 상품 편집 (기간, 횟수, 가격 등)\n-  const handleProductEdit = (index: number, field: string, value: any) => {\n-    const updatedProducts = [...formData.paymentInfo.selectedProducts];\n-    const product = { ...updatedProducts[index] };\n-    \n-    if (field === 'duration') {\n-      product.duration = value;\n+    } else if (field === 'endDate') {\n+      product.endDate = value;\n       if (product.programType === '기간제' && product.startDate) {\n-        // 기간제: 종료일 재계산\n-        const endDate = new Date(product.startDate);\n-        endDate.setDate(endDate.getDate() + value);\n-        product.endDate = endDate;\n-        // 상품금액 재계산\n-        const basePrice = product.basePrice || product.originalPrice || 0;\n-        product.price = calculatePeriodPrice(basePrice, value);\n-        product.appliedPrice = product.price; // 적용금액도 함께 업데이트\n+        // 종료일 변경 시 기간 재계산 (가격은 변경하지 않음)\n+        const days = Math.ceil((value.getTime() - product.startDate.getTime()) / (1000 * 3600 * 24));\n+        product.duration = days;\n+        product.months = Math.round(days / 30);\n       }\n-    } else if (field === 'sessions') {\n-      product.sessions = value;\n-      if (product.programType === '횟수제') {\n-        // 횟수제: 횟수에 따른 상품금액 재계산\n-        const basePrice = product.basePrice || product.originalPrice || 0;\n-        const baseSessions = product.baseSessions || 10; // 기준 횟수\n-        product.price = calculateSessionPrice(basePrice, value, baseSessions);\n-        product.appliedPrice = product.price; // 적용금액도 함께 업데이트\n-      }\n-    } else if (field === 'startDate') {\n-      product.startDate = value;\n-      if (product.programType === '기간제' && product.duration) {\n-        // 시작일 변경 시 종료일 재계산\n-        const endDate = new Date(value);\n-        endDate.setDate(endDate.getDate() + product.duration);\n-        product.endDate = endDate;\n-      }\n     } else if (field === 'appliedPrice') {\n       // 적용금액은 사용자가 직접 수정 가능\n       product.appliedPrice = value;\n     }\n@@ -832,16 +296,14 @@\n                           display: 'block', \n                           marginBottom: '6px',\n                           fontWeight: '500'\n                         }}>\n-                          기간(일)\n+                          종료일\n                         </label>\n                         <input\n-                          type=\"number\"\n-                          min=\"1\"\n-                          max=\"365\"\n-                          value={product.duration || 30}\n-                          onChange={(e) => handleProductEdit(index, 'duration', parseInt(e.target.value) || 1)}\n+                          type=\"date\"\n+                          value={product.endDate ? product.endDate.toISOString().split('T')[0] : ''}\n+                          onChange={(e) => handleProductEdit(index, 'endDate', new Date(e.target.value))}\n                           style={{\n                             width: '100%',\n                             padding: '8px 10px',\n                             border: '1px solid #ddd',\n@@ -852,21 +314,24 @@\n                           }}\n                         />\n                       </div>\n                     </div>\n-                    {product.endDate && (\n-                      <div style={{ \n-                        fontSize: '11px', \n-                        color: '#666',\n-                        marginTop: '4px',\n-                        padding: '4px 8px',\n-                        backgroundColor: '#fff',\n-                        borderRadius: '3px',\n-                        border: '1px solid #e9ecef'\n-                      }}>\n-                        종료일: {product.endDate.toLocaleDateString()}\n-                      </div>\n-                    )}\n+                    <div style={{ \n+                      fontSize: '11px', \n+                      color: '#666',\n+                      marginTop: '4px',\n+                      padding: '4px 8px',\n+                      backgroundColor: '#fff',\n+                      borderRadius: '3px',\n+                      border: '1px solid #e9ecef'\n+                    }}>\n+                      💡 기간제는 가격이 고정되어 있습니다. 기간을 조정해도 가격은 변경되지 않습니다.\n+                      {product.startDate && product.endDate && (\n+                        <>\n+                          <br />기간: {Math.ceil((product.endDate.getTime() - product.startDate.getTime()) / (1000 * 3600 * 24))}일\n+                        </>\n+                      )}\n+                    </div>\n                   </div>\n                 )}\n \n                 {/* 횟수제 상품 편집 */}\n@@ -892,9 +357,9 @@\n                         <input\n                           type=\"number\"\n                           min=\"1\"\n                           max=\"100\"\n-                          value={product.sessions || 10}\n+                          value={product.sessions || (product.baseSessions || 10)}\n                           onChange={(e) => handleProductEdit(index, 'sessions', parseInt(e.target.value) || 1)}\n                           style={{\n                             width: '100px',\n                             padding: '8px 10px',\n"
                }
            ],
            "date": 1760248001088,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport { \n  StepContent, \n  StepTitle, \n  FormField, \n  Label, \n  Select, \n  ProductItem, \n  ProductInfo, \n  ProductName, \n  ProductPrice, \n  RemoveButton,\n  SkipMessage \n} from './StyledComponents';\nimport { Product, StepProps } from './types';\n\nconst PaymentInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n  // 가상의 상품 목록\n  const availableProducts: Product[] = [\n    { id: '1', name: '헬스 회원권 (1개월)', price: 80000 },\n    { id: '2', name: '헬스 회원권 (3개월)', price: 220000 },\n    { id: '3', name: '헬스 회원권 (6개월)', price: 420000 },\n    { id: '4', name: 'PT 10회', price: 800000 },\n    { id: '5', name: 'PT 20회', price: 1500000 },\n    { id: '6', name: '그룹PT 10회', price: 400000 },\n  ];\n\n  const handleProductAdd = (product: Product) => {\n    onUpdate({\n      paymentInfo: {\n        selectedProducts: [...formData.paymentInfo.selectedProducts, product]\n      }\n    });\n  };\n\n  const handleProductRemove = (productId: string) => {\n    const updatedProducts = formData.paymentInfo.selectedProducts.filter((p, index) => {\n      // 같은 상품이 여러 개 있을 수 있으므로 첫 번째 것만 제거\n      const firstMatchIndex = formData.paymentInfo.selectedProducts.findIndex(product => product.id === productId);\n      return index !== firstMatchIndex;\n    });\n    \n    onUpdate({\n      paymentInfo: {\n        selectedProducts: updatedProducts\n      }\n    });\n  };\n\n  const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n\n  return (\n    <StepContent>\n      <StepTitle>결제정보</StepTitle>\n      \n      {formData.paymentInfo.selectedProducts.length === 0 ? (\n        <SkipMessage>\n          결제할 상품이 없습니다.<br />\n          상품을 선택하거나 건너뛰기를 선택하세요.\n        </SkipMessage>\n      ) : (\n        <div>\n          <h3>선택된 상품</h3>\n          {formData.paymentInfo.selectedProducts.map((product, index) => (\n            <ProductItem key={`${product.id}-${index}`}>\n              <ProductInfo>\n                <ProductName>{product.name}</ProductName>\n                <ProductPrice>{product.price.toLocaleString()}원</ProductPrice>\n              </ProductInfo>\n              <RemoveButton\n                onClick={() => handleProductRemove(product.id)}\n              >\n                ✕\n              </RemoveButton>\n            </ProductItem>\n          ))}\n          \n          <div style={{ \n            marginTop: '16px', \n            padding: '16px', \n            backgroundColor: '#f8f9fa', \n            borderRadius: '8px',\n            textAlign: 'right',\n            fontWeight: 'bold',\n            fontSize: '18px'\n          }}>\n            총 결제금액: {totalAmount.toLocaleString()}원\n          </div>\n        </div>\n      )}\n\n      <FormField style={{ marginTop: '24px' }}>\n        <Label>상품 추가</Label>\n        <Select\n          onChange={(e) => {\n            const product = availableProducts.find(p => p.id === e.target.value);\n            if (product) {\n              handleProductAdd(product);\n              e.target.value = '';\n            }\n          }}\n        >\n          <option value=\"\">상품을 선택하세요</option>\n          {availableProducts.map(product => (\n            <option key={product.id} value={product.id}>\n              {product.name} - {product.price.toLocaleString()}원\n            </option>\n          ))}\n        </Select>\n      </FormField>\n    </StepContent>\n  );\n};\n\nexport default PaymentInfoStep;\n"
        }
    ]
}