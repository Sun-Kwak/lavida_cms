{
    "sourceFile": "src/pages/CMS/Member/PointRegistrationModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1761374511590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1761374511590,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { toast } from 'react-toastify';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\nimport { dbManager } from '../../../utils/indexedDB';\nimport Modal from '../../../components/Modal';\nimport CustomDropdown from '../../../components/CustomDropdown';\n\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  padding: 24px;\n  min-height: 300px;\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nconst Label = styled.label`\n  ${AppTextStyles.body1}\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n`;\n\nconst RequiredMark = styled.span`\n  color: ${AppColors.error};\n  margin-left: 4px;\n`;\n\nconst TextInput = styled.input`\n  padding: 12px 16px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: 14px;\n  \n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst AmountInput = styled.input`\n  padding: 12px 16px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  text-align: right;\n  \n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n    font-weight: normal;\n  }\n`;\n\nconst MemberSearchContainer = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: flex-end;\n`;\n\nconst SearchButton = styled.button`\n  padding: 12px 16px;\n  background: ${AppColors.primary};\n  color: ${AppColors.onPrimary};\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  white-space: nowrap;\n  \n  &:hover {\n    opacity: 0.9;\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst MemberInfo = styled.div`\n  padding: 16px;\n  background: ${AppColors.background};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: 14px;\n  \n  .member-name {\n    font-weight: 600;\n    font-size: 16px;\n    margin-bottom: 8px;\n  }\n  \n  .member-details {\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst PaymentSummary = styled.div`\n  padding: 16px;\n  background: #e3f2fd;\n  border-radius: 8px;\n  border: 1px solid ${AppColors.primary};\n  \n  .summary-title {\n    font-weight: 600;\n    margin-bottom: 12px;\n    color: ${AppColors.primary};\n  }\n  \n  .summary-item {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 8px;\n    \n    &.total {\n      border-top: 1px solid ${AppColors.primary};\n      padding-top: 8px;\n      font-weight: 600;\n      font-size: 16px;\n    }\n  }\n`;\n\nconst ModalButton = styled.button<{ $variant?: 'primary' | 'secondary'; disabled?: boolean }>`\n  flex: 1;\n  padding: 12px 16px;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  border: none;\n  \n  ${({ $variant, disabled }) => $variant === 'primary' ? `\n    background-color: ${disabled ? '#cccccc' : AppColors.primary};\n    color: ${AppColors.onPrimary};\n    cursor: ${disabled ? 'not-allowed' : 'pointer'};\n    \n    &:hover {\n      background-color: ${disabled ? '#cccccc' : AppColors.secondary};\n    }\n  ` : `\n    background-color: ${AppColors.surface};\n    color: ${AppColors.onSurface};\n    border: 1px solid ${AppColors.borderLight};\n    \n    &:hover {\n      background-color: ${AppColors.background};\n    }\n  `}\n`;\n\nconst CustomModalFooter = styled.div`\n  display: flex;\n  width: 100%;\n  gap: 12px;\n  padding: 0 24px 24px;\n`;\n\nconst BonusInfo = styled.div`\n  padding: 12px;\n  background: #e8f5e8;\n  border: 1px solid ${AppColors.success};\n  border-radius: 8px;\n  font-size: 14px;\n  color: ${AppColors.success};\n  \n  .bonus-title {\n    font-weight: 600;\n    margin-bottom: 4px;\n  }\n`;\n\ninterface PointRegistrationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\ninterface Member {\n  id: string;\n  name: string;\n  phone: string;\n  email?: string;\n  branchId: string;\n  branchName: string;\n  coach: string;\n  coachName: string;\n}\n\nconst PointRegistrationModal: React.FC<PointRegistrationModalProps> = ({\n  isOpen,\n  onClose,\n  onSuccess\n}) => {\n  const [memberSearchQuery, setMemberSearchQuery] = useState('');\n  const [selectedMember, setSelectedMember] = useState<Member | null>(null);\n  const [paymentMethod, setPaymentMethod] = useState<'cash' | 'card' | 'transfer'>('cash');\n  const [amount, setAmount] = useState<string>('');\n  const [memo, setMemo] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n\n  // 모달이 닫힐 때 상태 초기화\n  useEffect(() => {\n    if (!isOpen) {\n      setMemberSearchQuery('');\n      setSelectedMember(null);\n      setPaymentMethod('cash');\n      setAmount('');\n      setMemo('');\n      setIsProcessing(false);\n      setIsSearching(false);\n    }\n  }, [isOpen]);\n\n  // 회원 검색\n  const handleMemberSearch = async () => {\n    if (!memberSearchQuery.trim()) {\n      toast.warning('회원명 또는 전화번호를 입력해주세요.');\n      return;\n    }\n\n    setIsSearching(true);\n    try {\n      const members = await dbManager.getAllMembers();\n      const foundMember = members.find(member => \n        member.name.includes(memberSearchQuery.trim()) ||\n        member.phone.includes(memberSearchQuery.trim())\n      );\n\n      if (foundMember) {\n        setSelectedMember(foundMember);\n        toast.success(`회원을 찾았습니다: ${foundMember.name}`);\n      } else {\n        setSelectedMember(null);\n        toast.error('해당하는 회원을 찾을 수 없습니다.');\n      }\n    } catch (error) {\n      console.error('회원 검색 실패:', error);\n      toast.error('회원 검색 중 오류가 발생했습니다.');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // 금액 포맷팅\n  const formatAmount = (value: string) => {\n    const numericValue = value.replace(/[^\\d]/g, '');\n    return numericValue ? parseInt(numericValue).toLocaleString() : '';\n  };\n\n  // 금액 입력 처리\n  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]/g, '');\n    setAmount(value);\n  };\n\n  // 보너스 포인트 계산\n  const calculateBonus = (baseAmount: number) => {\n    if (baseAmount >= 1000000) {\n      const millionUnits = Math.floor(baseAmount / 1000000);\n      return millionUnits * 100000; // 100만원당 10만원(10%) 보너스\n    }\n    return 0;\n  };\n\n  // 적립금 등록 처리\n  const handleSubmit = async () => {\n    if (!selectedMember) {\n      toast.error('회원을 선택해주세요.');\n      return;\n    }\n\n    if (!amount || parseInt(amount) <= 0) {\n      toast.error('유효한 금액을 입력해주세요.');\n      return;\n    }\n\n    const baseAmount = parseInt(amount);\n    const bonusAmount = calculateBonus(baseAmount);\n    const totalAmount = baseAmount + bonusAmount;\n\n    setIsProcessing(true);\n    try {\n      // 1. 결제 정보 기록 생성\n      const paymentId = await dbManager.addPayment({\n        memberId: selectedMember.id,\n        memberName: selectedMember.name,\n        branchId: selectedMember.branchId,\n        branchName: selectedMember.branchName,\n        coach: selectedMember.coach,\n        coachName: selectedMember.coachName,\n        products: [], // 상품 없음\n        totalAmount: baseAmount,\n        paidAmount: baseAmount,\n        unpaidAmount: 0,\n        paymentStatus: 'completed',\n        paymentMethod: paymentMethod,\n        paymentDate: new Date(),\n        paymentType: 'other',\n        amount: baseAmount,\n        memo: memo || `적립금 등록 - ${paymentMethod} ${baseAmount.toLocaleString()}원`\n      });\n\n      // 2. 기본 포인트 적립\n      const expiryDate = new Date();\n      expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n\n      await dbManager.point.addPointTransaction({\n        memberId: selectedMember.id,\n        memberName: selectedMember.name,\n        amount: baseAmount,\n        transactionType: 'earn',\n        relatedOrderId: undefined,\n        relatedPaymentId: paymentId,\n        products: [],\n        branchId: selectedMember.branchId,\n        branchName: selectedMember.branchName,\n        staffId: selectedMember.coach,\n        staffName: selectedMember.coachName,\n        earnedDate: new Date(),\n        expiryDate,\n        isExpired: false,\n        source: '적립금 등록',\n        description: `적립금 등록 - ${paymentMethod} ${baseAmount.toLocaleString()}원${memo ? ` (${memo})` : ''}`\n      });\n\n      // 3. 보너스 포인트 적립 (100만원 이상인 경우)\n      if (bonusAmount > 0) {\n        await dbManager.point.addPointTransaction({\n          memberId: selectedMember.id,\n          memberName: selectedMember.name,\n          amount: bonusAmount,\n          transactionType: 'earn',\n          relatedOrderId: undefined,\n          relatedPaymentId: paymentId,\n          products: [],\n          branchId: selectedMember.branchId,\n          branchName: selectedMember.branchName,\n          staffId: selectedMember.coach,\n          staffName: selectedMember.coachName,\n          earnedDate: new Date(),\n          expiryDate,\n          isExpired: false,\n          source: '보너스포인트',\n          description: `적립금 등록 보너스 포인트 (${baseAmount.toLocaleString()}원 → ${Math.floor(baseAmount / 1000000)}개 100만원 단위)`\n        });\n      }\n\n      const successMessage = bonusAmount > 0 \n        ? `적립금이 등록되었습니다!\\n기본 적립: ${baseAmount.toLocaleString()}원\\n보너스 적립: ${bonusAmount.toLocaleString()}원\\n총 적립: ${totalAmount.toLocaleString()}원`\n        : `적립금이 등록되었습니다!\\n총 적립: ${baseAmount.toLocaleString()}원`;\n\n      toast.success(successMessage);\n      onSuccess();\n      onClose();\n    } catch (error) {\n      console.error('적립금 등록 실패:', error);\n      toast.error('적립금 등록 중 오류가 발생했습니다.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const paymentMethodOptions = [\n    { value: 'cash', label: '현금' },\n    { value: 'card', label: '카드' },\n    { value: 'transfer', label: '계좌이체' }\n  ];\n\n  const baseAmount = amount ? parseInt(amount) : 0;\n  const bonusAmount = calculateBonus(baseAmount);\n  const totalAmount = baseAmount + bonusAmount;\n  const isValid = selectedMember && baseAmount > 0;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      header=\"적립금 등록\"\n      width=\"600px\"\n      body={\n        <FormContainer>\n          {/* 회원 검색 */}\n          <FormGroup>\n            <Label>\n              회원 검색<RequiredMark>*</RequiredMark>\n            </Label>\n            <MemberSearchContainer>\n              <TextInput\n                value={memberSearchQuery}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setMemberSearchQuery(e.target.value)}\n                placeholder=\"회원명 또는 전화번호 입력\"\n                onKeyPress={(e: React.KeyboardEvent<HTMLInputElement>) => {\n                  if (e.key === 'Enter') {\n                    handleMemberSearch();\n                  }\n                }}\n              />\n              <SearchButton\n                onClick={handleMemberSearch}\n                disabled={isSearching || !memberSearchQuery.trim()}\n              >\n                {isSearching ? '검색 중...' : '검색'}\n              </SearchButton>\n            </MemberSearchContainer>\n          </FormGroup>\n\n          {/* 선택된 회원 정보 */}\n          {selectedMember && (\n            <FormGroup>\n              <Label>선택된 회원</Label>\n              <MemberInfo>\n                <div className=\"member-name\">{selectedMember.name}</div>\n                <div className=\"member-details\">\n                  <div>전화번호: {selectedMember.phone}</div>\n                  <div>이메일: {selectedMember.email || '-'}</div>\n                  <div>지점: {selectedMember.branchName}</div>\n                  <div>담당코치: {selectedMember.coachName}</div>\n                </div>\n              </MemberInfo>\n            </FormGroup>\n          )}\n\n          {/* 결제 방식 */}\n          <FormGroup>\n            <Label>\n              결제 방식<RequiredMark>*</RequiredMark>\n            </Label>\n            <CustomDropdown\n              value={paymentMethod}\n              onChange={(value) => setPaymentMethod(value as 'cash' | 'card' | 'transfer')}\n              options={paymentMethodOptions}\n              placeholder=\"결제 방식 선택\"\n            />\n          </FormGroup>\n\n          {/* 금액 */}\n          <FormGroup>\n            <Label>\n              금액<RequiredMark>*</RequiredMark>\n            </Label>\n            <AmountInput\n              type=\"text\"\n              value={formatAmount(amount)}\n              onChange={handleAmountChange}\n              placeholder=\"금액을 입력하세요\"\n            />\n          </FormGroup>\n\n          {/* 메모 */}\n          <FormGroup>\n            <Label>메모</Label>\n            <TextInput\n              value={memo}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setMemo(e.target.value)}\n              placeholder=\"추가 메모 (선택사항)\"\n            />\n          </FormGroup>\n\n          {/* 100만원 이상일 때 보너스 정보 표시 */}\n          {bonusAmount > 0 && (\n            <BonusInfo>\n              <div className=\"bonus-title\">🎉 보너스 포인트 적용!</div>\n              <div>100만원 단위마다 10% 추가 적립됩니다.</div>\n            </BonusInfo>\n          )}\n\n          {/* 적립 요약 */}\n          {baseAmount > 0 && (\n            <PaymentSummary>\n              <div className=\"summary-title\">적립 요약</div>\n              <div className=\"summary-item\">\n                <span>기본 적립</span>\n                <span>{baseAmount.toLocaleString()}원</span>\n              </div>\n              {bonusAmount > 0 && (\n                <div className=\"summary-item\">\n                  <span>보너스 적립 ({Math.floor(baseAmount / 1000000)}개 100만원 단위)</span>\n                  <span>{bonusAmount.toLocaleString()}원</span>\n                </div>\n              )}\n              <div className=\"summary-item total\">\n                <span>총 적립 포인트</span>\n                <span>{totalAmount.toLocaleString()}원</span>\n              </div>\n            </PaymentSummary>\n          )}\n        </FormContainer>\n      }\n      footer={\n        <CustomModalFooter>\n          <ModalButton onClick={onClose}>\n            취소\n          </ModalButton>\n          <ModalButton \n            $variant=\"primary\" \n            disabled={!isValid || isProcessing}\n            onClick={handleSubmit}\n          >\n            {isProcessing ? '등록 중...' : '적립금 등록'}\n          </ModalButton>\n        </CustomModalFooter>\n      }\n    />\n  );\n};\n\nexport default PointRegistrationModal;"
        }
    ]
}