{
    "sourceFile": "src/pages/CMS/Member/CourseHistory.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1760758580231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760762285625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,93 +1,16 @@\n-import React, { useState, useEffect } from 'react';\n+import React, { useState, useEffect, useCallback } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type CourseEnrollment } from '../../../utils/indexedDB';\n+import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n+import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n \n const PageContainer = styled.div`\n   width: 100%;\n `;\n \n-const SearchSection = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  padding: 24px;\n-  margin-bottom: 24px;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const SearchRow = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  align-items: center;\n-  margin-bottom: 16px;\n-`;\n-\n-const SearchInput = styled.input`\n-  flex: 1;\n-  padding: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  outline: none;\n-  \n-  &:focus {\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n-`;\n-\n-const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n-  padding: 12px 18px;\n-  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n-  border-radius: 8px;\n-  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n-  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  font-weight: 600;\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    opacity: 0.9;\n-    transform: translateY(-1px);\n-  }\n-  \n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-    transform: none;\n-  }\n-`;\n-\n-const FilterRow = styled.div<{ $visible: boolean }>`\n-  display: ${props => props.$visible ? 'flex' : 'none'};\n-  gap: 8px;\n-  align-items: center;\n-  flex-wrap: wrap;\n-`;\n-\n-const FilterChip = styled.button<{ $active: boolean }>`\n-  padding: 6px 12px;\n-  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n-  border-radius: 20px;\n-  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n-  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    border-color: ${AppColors.primary};\n-    background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n-  }\n-`;\n-\n const ResultsSection = styled.div`\n   background: ${AppColors.surface};\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 16px;\n@@ -197,34 +120,166 @@\n const CourseHistory: React.FC = () => {\n   const [searchQuery, setSearchQuery] = useState<string>('');\n   const [courseEnrollments, setCourseEnrollments] = useState<CourseEnrollment[]>([]);\n   const [filteredEnrollments, setFilteredEnrollments] = useState<CourseEnrollment[]>([]);\n-  const [showFilters, setShowFilters] = useState<boolean>(false);\n-  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n   const [loading, setLoading] = useState<boolean>(true);\n+  \n+  // 기간 선택 관련 상태\n+  const [selectedPeriod, setSelectedPeriod] = useState<PeriodOption>('1month');\n+  const [customStartDate, setCustomStartDate] = useState<string>('');\n+  const [customEndDate, setCustomEndDate] = useState<string>('');\n+  \n+  // 미수 필터 관련 상태\n+  const [showUnpaidOnly, setShowUnpaidOnly] = useState<boolean>(false);\n+  const [unpaidMetaInfo, setUnpaidMetaInfo] = useState<{ unpaidCourseCount: number; totalUnpaidAmount: number }>({\n+    unpaidCourseCount: 0,\n+    totalUnpaidAmount: 0\n+  });\n \n-  useEffect(() => {\n-    loadCourseEnrollments();\n+  // 미수 메타정보 로드\n+  const loadUnpaidMetaInfo = useCallback(async () => {\n+    try {\n+      const allEnrollments = await dbManager.getAllCourseEnrollments();\n+      const unpaidEnrollments = allEnrollments.filter(e => e.enrollmentStatus === 'unpaid');\n+      const unpaidCourseCount = unpaidEnrollments.length;\n+      const totalUnpaidAmount = unpaidEnrollments.reduce((sum, e) => sum + (e.unpaidAmount || 0), 0);\n+      \n+      setUnpaidMetaInfo({ unpaidCourseCount, totalUnpaidAmount });\n+    } catch (error) {\n+      console.error('미수 메타정보 로드 실패:', error);\n+    }\n   }, []);\n \n-  const loadCourseEnrollments = async () => {\n+  // 기간별 검색 범위 계산\n+  const getDateRange = useCallback(() => {\n+    const today = new Date();\n+    const startDate = new Date();\n+    \n+    switch (selectedPeriod) {\n+      case '1month':\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+      case '3month':\n+        startDate.setMonth(today.getMonth() - 3);\n+        return { start: startDate, end: today };\n+      case '6month':\n+        startDate.setMonth(today.getMonth() - 6);\n+        return { start: startDate, end: today };\n+      case 'custom':\n+        if (customStartDate && customEndDate) {\n+          return { \n+            start: new Date(customStartDate), \n+            end: new Date(customEndDate) \n+          };\n+        }\n+        // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+      default:\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+    }\n+  }, [selectedPeriod, customStartDate, customEndDate]);\n+\n+  // 날짜 범위 표시 문자열 생성\n+  const getDateRangeDisplay = useCallback(() => {\n+    const range = getDateRange();\n+    const formatDate = (date: Date) => {\n+      return date.toLocaleDateString('ko-KR', {\n+        year: 'numeric',\n+        month: 'short',\n+        day: 'numeric'\n+      });\n+    };\n+    return `${formatDate(range.start)} ~ ${formatDate(range.end)}`;\n+  }, [getDateRange]);\n+\n+  const loadCourseEnrollments = useCallback(async (period?: PeriodOption, startDate?: string, endDate?: string) => {\n     try {\n       setLoading(true);\n-      const enrollments = await dbManager.getAllCourseEnrollments();\n-      setCourseEnrollments(enrollments);\n-      setFilteredEnrollments(enrollments);\n+      console.log('수강 데이터 로딩 시작...');\n+      \n+      // 미수 메타정보 로드\n+      await loadUnpaidMetaInfo();\n+      \n+      const allEnrollments = await dbManager.getAllCourseEnrollments();\n+      console.log('전체 수강 이력 수:', allEnrollments.length);\n+      \n+      // 기간별 필터링 (등록일 기준) - 매개변수가 있으면 사용, 없으면 현재 상태 사용\n+      const currentPeriod = period ?? selectedPeriod;\n+      const currentStartDate = startDate ?? customStartDate;\n+      const currentEndDate = endDate ?? customEndDate;\n+      \n+      let dateRange: { start: Date; end: Date };\n+      const today = new Date();\n+      const rangeStartDate = new Date();\n+      \n+      switch (currentPeriod) {\n+        case '1month':\n+          rangeStartDate.setMonth(today.getMonth() - 1);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case '3month':\n+          rangeStartDate.setMonth(today.getMonth() - 3);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case '6month':\n+          rangeStartDate.setMonth(today.getMonth() - 6);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case 'custom':\n+          if (currentStartDate && currentEndDate) {\n+            dateRange = { \n+              start: new Date(currentStartDate), \n+              end: new Date(currentEndDate) \n+            };\n+          } else {\n+            // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+            rangeStartDate.setMonth(today.getMonth() - 1);\n+            dateRange = { start: rangeStartDate, end: today };\n+          }\n+          break;\n+        default:\n+          rangeStartDate.setMonth(today.getMonth() - 1);\n+          dateRange = { start: rangeStartDate, end: today };\n+      }\n+      \n+      const filteredByDate = allEnrollments.filter(enrollment => {\n+        const enrollmentDate = new Date(enrollment.createdAt);\n+        return enrollmentDate >= dateRange.start && enrollmentDate <= dateRange.end;\n+      });\n+      \n+      console.log(`${currentPeriod} 기간 내 수강 이력:`, filteredByDate.length);\n+      \n+      setCourseEnrollments(filteredByDate);\n+      setFilteredEnrollments(filteredByDate);\n     } catch (error) {\n       console.error('수강 데이터 로드 실패:', error);\n     } finally {\n       setLoading(false);\n     }\n-  };\n+  }, [loadUnpaidMetaInfo, selectedPeriod, customStartDate, customEndDate]);\n \n+  // 컴포넌트 마운트 시 초기 데이터 로드 (1개월 기준)\n+  useEffect(() => {\n+    const initializeData = async () => {\n+      await loadCourseEnrollments();\n+    };\n+    initializeData();\n+  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n+\n   const handleSearch = async () => {\n-    await loadCourseEnrollments();\n+    // 현재 선택된 조건으로 데이터를 불러옵니다\n+    await loadCourseEnrollments(selectedPeriod, customStartDate, customEndDate);\n     \n     let filtered = courseEnrollments;\n     \n+    // 미수 필터 적용\n+    if (showUnpaidOnly) {\n+      filtered = filtered.filter(enrollment => enrollment.enrollmentStatus === 'unpaid');\n+    }\n+    \n+    // 텍스트 검색\n     if (searchQuery.trim()) {\n       const query = searchQuery.toLowerCase().trim();\n       filtered = filtered.filter(enrollment =>\n         enrollment.memberName.toLowerCase().includes(query) ||\n@@ -234,50 +289,11 @@\n         enrollment.coachName.toLowerCase().includes(query)\n       );\n     }\n     \n-    if (activeFilters.length > 0) {\n-      filtered = filtered.filter(enrollment => {\n-        return activeFilters.some(filter => {\n-          switch (filter) {\n-            case '완료':\n-              return enrollment.enrollmentStatus === 'completed';\n-            case '미수':\n-              return enrollment.enrollmentStatus === 'unpaid';\n-            case '횟수제':\n-              return enrollment.programType === '횟수제';\n-            case '기간제':\n-              return enrollment.programType === '기간제';\n-            default:\n-              return enrollment.branchName === filter;\n-          }\n-        });\n-      });\n-    }\n-    \n     setFilteredEnrollments(filtered);\n   };\n \n-  const handleKeyPress = (e: React.KeyboardEvent) => {\n-    if (e.key === 'Enter') {\n-      handleSearch();\n-    }\n-  };\n-\n-  const toggleFilter = (filter: string) => {\n-    setActiveFilters(prev => \n-      prev.includes(filter) \n-        ? prev.filter(f => f !== filter)\n-        : [...prev, filter]\n-    );\n-  };\n-\n-  const clearFilters = () => {\n-    setActiveFilters([]);\n-    setSearchQuery('');\n-    setFilteredEnrollments(courseEnrollments);\n-  };\n-\n   const formatDate = (date: Date | null | undefined) => {\n     return date ? new Date(date).toLocaleDateString() : '-';\n   };\n \n@@ -301,11 +317,8 @@\n     }\n     return '진행률 미설정';\n   };\n \n-  const branchNames = Array.from(new Set(courseEnrollments.map(e => e.branchName))).filter(Boolean);\n-  const filterOptions = ['완료', '미수', '횟수제', '기간제', ...branchNames];\n-\n   if (loading) {\n     return (\n       <PageContainer>\n         <LoadingState>\n@@ -316,47 +329,46 @@\n   }\n \n   return (\n     <PageContainer>\n-      <SearchSection>\n-        <SearchRow>\n-          <SearchInput\n-            value={searchQuery}\n-            onChange={(e) => setSearchQuery(e.target.value)}\n-            onKeyPress={handleKeyPress}\n-            placeholder=\"회원명, 상품명, 프로그램명, 지점명, 코치명으로 검색...\"\n-          />\n-          <Button onClick={handleSearch}>검색</Button>\n-          <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n-            필터\n-          </Button>\n-          <Button variant=\"secondary\" onClick={loadCourseEnrollments}>\n-            새로고침\n-          </Button>\n-          {(activeFilters.length > 0 || searchQuery) && (\n-            <Button variant=\"secondary\" onClick={clearFilters}>\n-              초기화\n-            </Button>\n-          )}\n-        </SearchRow>\n-        \n-        <FilterRow $visible={showFilters}>\n-          {filterOptions.map(filter => (\n-            <FilterChip\n-              key={filter}\n-              $active={activeFilters.includes(filter)}\n-              onClick={() => toggleFilter(filter)}\n-            >\n-              {filter}\n-            </FilterChip>\n-          ))}\n-        </FilterRow>\n-      </SearchSection>\n+      {/* 새로운 SearchArea 컴포넌트 사용 */}\n+      <SearchArea\n+        metaContent={\n+          <div style={{ display: 'flex', gap: '12px', alignItems: 'center', flexWrap: 'wrap' }}>\n+            <UnpaidFilter\n+              active={showUnpaidOnly}\n+              unpaidCount={unpaidMetaInfo.unpaidCourseCount}\n+              totalAmount={unpaidMetaInfo.totalUnpaidAmount}\n+              onClick={() => setShowUnpaidOnly(!showUnpaidOnly)}\n+            />\n+          </div>\n+        }\n+        selectedPeriod={selectedPeriod}\n+        onPeriodChange={setSelectedPeriod}\n+        customStartDate={customStartDate}\n+        customEndDate={customEndDate}\n+        onCustomStartDateChange={setCustomStartDate}\n+        onCustomEndDateChange={setCustomEndDate}\n+        dateRangeDisplay={getDateRangeDisplay()}\n+        searchValue={searchQuery}\n+        onSearchChange={setSearchQuery}\n+        onSearch={handleSearch}\n+        searchPlaceholder=\"회원명, 상품명, 프로그램명, 지점명, 코치명으로 검색...\"\n+        autoSearchOnDateChange={false}\n+      />\n \n       <ResultsSection>\n         <ResultsHeader>\n           <ResultsTitle>수강 이력</ResultsTitle>\n-          <ResultsCount>총 {filteredEnrollments.length}건</ResultsCount>\n+          <ResultsCount>\n+            {showUnpaidOnly ? '미수 수강: ' : ''}{filteredEnrollments.length}건 \n+            (완료: {filteredEnrollments.filter(e => e.enrollmentStatus === 'completed').length}건, \n+            미수: {filteredEnrollments.filter(e => e.enrollmentStatus === 'unpaid').length}건)\n+            <br />\n+            <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+              기간: {getDateRangeDisplay()} | 전체: {courseEnrollments.length}건\n+            </span>\n+          </ResultsCount>\n         </ResultsHeader>\n \n         {filteredEnrollments.length > 0 ? (\n           <TableContainer>\n"
                },
                {
                    "date": 1760762493059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,13 @@\n import React, { useState, useEffect, useCallback } from 'react';\n import styled from 'styled-components';\n+import { toast } from 'react-toastify';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type CourseEnrollment } from '../../../utils/indexedDB';\n import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n+import Modal from '../../../components/Modal';\n \n const PageContainer = styled.div`\n   width: 100%;\n `;\n@@ -74,15 +76,22 @@\n   color: ${AppColors.onBackground};\n   vertical-align: middle;\n `;\n \n-const StatusBadge = styled.span<{ $status: 'completed' | 'unpaid' }>`\n+const StatusBadge = styled.span<{ $status: 'completed' | 'unpaid'; $clickable?: boolean }>`\n   padding: 4px 8px;\n   border-radius: 12px;\n   font-size: 12px;\n   font-weight: 500;\n   background: ${props => props.$status === 'completed' ? '#e7f5e7' : '#fff2f2'};\n   color: ${props => props.$status === 'completed' ? '#2d5a2d' : '#8b1538'};\n+  cursor: ${props => props.$clickable ? 'pointer' : 'default'};\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    opacity: ${props => props.$clickable ? 0.8 : 1};\n+    transform: ${props => props.$clickable ? 'translateY(-1px)' : 'none'};\n+  }\n `;\n \n const ProgressInfo = styled.div`\n   font-size: 12px;\n@@ -116,8 +125,73 @@\n   text-align: center;\n   color: ${AppColors.onInput1};\n `;\n \n+const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n+  padding: 12px 18px;\n+  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n+  border-radius: 8px;\n+  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n+  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  font-weight: 600;\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    opacity: 0.9;\n+    transform: translateY(-1px);\n+  }\n+  \n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+    transform: none;\n+  }\n+`;\n+\n+const ModalContent = styled.div`\n+  text-align: left;\n+`;\n+\n+const InfoRow = styled.div`\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  padding: 12px 0;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  \n+  &:last-child {\n+    border-bottom: none;\n+  }\n+`;\n+\n+const InfoLabel = styled.span`\n+  font-weight: 600;\n+  color: ${AppColors.onBackground};\n+`;\n+\n+const InfoValue = styled.span`\n+  color: ${AppColors.onInput1};\n+`;\n+\n+const ModalUnpaidAmount = styled.span`\n+  color: #d32f2f;\n+  font-weight: 600;\n+  font-size: 16px;\n+`;\n+\n+const WarningText = styled.div`\n+  background: #fff3cd;\n+  border: 1px solid #ffeaa7;\n+  border-radius: 8px;\n+  padding: 12px;\n+  margin: 16px 0;\n+  color: #856404;\n+  font-size: 14px;\n+  text-align: center;\n+`;\n+\n const CourseHistory: React.FC = () => {\n   const [searchQuery, setSearchQuery] = useState<string>('');\n   const [courseEnrollments, setCourseEnrollments] = useState<CourseEnrollment[]>([]);\n   const [filteredEnrollments, setFilteredEnrollments] = useState<CourseEnrollment[]>([]);\n@@ -133,8 +207,13 @@\n   const [unpaidMetaInfo, setUnpaidMetaInfo] = useState<{ unpaidCourseCount: number; totalUnpaidAmount: number }>({\n     unpaidCourseCount: 0,\n     totalUnpaidAmount: 0\n   });\n+  \n+  // 완료 처리 모달 관련 상태\n+  const [showCompleteModal, setShowCompleteModal] = useState<boolean>(false);\n+  const [selectedEnrollment, setSelectedEnrollment] = useState<CourseEnrollment | null>(null);\n+  const [isProcessing, setIsProcessing] = useState<boolean>(false);\n \n   // 미수 메타정보 로드\n   const loadUnpaidMetaInfo = useCallback(async () => {\n     try {\n@@ -292,8 +371,83 @@\n     \n     setFilteredEnrollments(filtered);\n   };\n \n+  // 미수 상태 클릭 처리\n+  const handleUnpaidClick = (enrollment: CourseEnrollment) => {\n+    setSelectedEnrollment(enrollment);\n+    setShowCompleteModal(true);\n+  };\n+\n+  // 완료 처리 확인\n+  const handleCompletePayment = async () => {\n+    if (!selectedEnrollment) return;\n+\n+    try {\n+      setIsProcessing(true);\n+\n+      // 1. 수강 이력의 상태를 'completed'로 변경하고 미수금액을 0으로 설정\n+      const updatedEnrollment: CourseEnrollment = {\n+        ...selectedEnrollment,\n+        enrollmentStatus: 'completed',\n+        paidAmount: selectedEnrollment.productPrice, // 상품 전체 금액으로 설정\n+        unpaidAmount: 0\n+      };\n+\n+      await dbManager.updateCourseEnrollment(selectedEnrollment.id, updatedEnrollment);\n+\n+      // 2. 결제 데이터 생성 및 저장\n+      const paymentData = {\n+        memberId: selectedEnrollment.memberId,\n+        memberName: selectedEnrollment.memberName,\n+        branchId: selectedEnrollment.branchId,\n+        branchName: selectedEnrollment.branchName,\n+        coach: selectedEnrollment.coach,\n+        coachName: selectedEnrollment.coachName,\n+        paymentMethod: 'cash', // 기본값으로 현금 설정\n+        paymentStatus: 'completed' as const, // 완료 상태로 설정\n+        totalAmount: selectedEnrollment.unpaidAmount || 0,\n+        paidAmount: selectedEnrollment.unpaidAmount || 0,\n+        unpaidAmount: 0,\n+        paymentDate: new Date(),\n+        products: [{\n+          id: selectedEnrollment.productId,\n+          name: selectedEnrollment.productName,\n+          price: selectedEnrollment.unpaidAmount || 0,\n+          quantity: 1,\n+          programId: selectedEnrollment.programId,\n+          programName: selectedEnrollment.programName,\n+          programType: selectedEnrollment.programType\n+        }],\n+        memo: `미수금 완료 처리 - ${selectedEnrollment.productName}`\n+      };\n+\n+      await dbManager.addPayment(paymentData);\n+\n+      toast.success('미수금이 성공적으로 완료 처리되었습니다.');\n+      \n+      // 3. 데이터 새로고침\n+      await loadCourseEnrollments();\n+      await handleSearch(); // 현재 검색 조건으로 다시 검색\n+      \n+      // 4. 모달 닫기\n+      setShowCompleteModal(false);\n+      setSelectedEnrollment(null);\n+      \n+    } catch (error) {\n+      console.error('완료 처리 실패:', error);\n+      toast.error('완료 처리 중 오류가 발생했습니다.');\n+    } finally {\n+      setIsProcessing(false);\n+    }\n+  };\n+\n+  // 모달 닫기\n+  const handleCloseCompleteModal = () => {\n+    setShowCompleteModal(false);\n+    setSelectedEnrollment(null);\n+  };\n+\n   const formatDate = (date: Date | null | undefined) => {\n     return date ? new Date(date).toLocaleDateString() : '-';\n   };\n \n@@ -430,9 +584,14 @@\n                         </div>\n                       )}\n                     </TableCell>\n                     <TableCell>\n-                      <StatusBadge $status={enrollment.enrollmentStatus}>\n+                      <StatusBadge \n+                        $status={enrollment.enrollmentStatus}\n+                        $clickable={enrollment.enrollmentStatus === 'unpaid'}\n+                        onClick={enrollment.enrollmentStatus === 'unpaid' ? () => handleUnpaidClick(enrollment) : undefined}\n+                        title={enrollment.enrollmentStatus === 'unpaid' ? '클릭하여 완료 처리' : ''}\n+                      >\n                         {enrollment.enrollmentStatus === 'completed' ? '완료' : '미수'}\n                       </StatusBadge>\n                     </TableCell>\n                   </TableRow>\n@@ -446,8 +605,77 @@\n             <p>검색 조건을 변경하거나 새로운 수강생을 등록해보세요.</p>\n           </EmptyState>\n         )}\n       </ResultsSection>\n+\n+      {/* 완료 처리 모달 */}\n+      {showCompleteModal && selectedEnrollment && (\n+        <Modal \n+          isOpen={showCompleteModal}\n+          onClose={handleCloseCompleteModal}\n+          width=\"min(95vw, 500px)\"\n+          header=\"미수금 완료 처리\"\n+          body={\n+            <ModalContent>\n+              <WarningText>\n+                ⚠️ 미수금을 완료 처리하시겠습니까?\n+              </WarningText>\n+              \n+              <InfoRow>\n+                <InfoLabel>회원명:</InfoLabel>\n+                <InfoValue>{selectedEnrollment.memberName}</InfoValue>\n+              </InfoRow>\n+              \n+              <InfoRow>\n+                <InfoLabel>상품명:</InfoLabel>\n+                <InfoValue>{selectedEnrollment.productName}</InfoValue>\n+              </InfoRow>\n+              \n+              <InfoRow>\n+                <InfoLabel>프로그램:</InfoLabel>\n+                <InfoValue>{selectedEnrollment.programName} ({selectedEnrollment.programType})</InfoValue>\n+              </InfoRow>\n+              \n+              <InfoRow>\n+                <InfoLabel>지점:</InfoLabel>\n+                <InfoValue>{selectedEnrollment.branchName}</InfoValue>\n+              </InfoRow>\n+              \n+              <InfoRow>\n+                <InfoLabel>담당코치:</InfoLabel>\n+                <InfoValue>{selectedEnrollment.coachName}</InfoValue>\n+              </InfoRow>\n+              \n+              <InfoRow>\n+                <InfoLabel>미수금액:</InfoLabel>\n+                <ModalUnpaidAmount>{selectedEnrollment.unpaidAmount?.toLocaleString() || 0}원</ModalUnpaidAmount>\n+              </InfoRow>\n+              \n+              <div style={{ \n+                padding: '12px', \n+                backgroundColor: '#f0f9ff', \n+                border: '1px solid #93c5fd', \n+                borderRadius: '8px',\n+                fontSize: '14px',\n+                color: '#1e40af',\n+                marginTop: '16px'\n+              }}>\n+                💡 완료 처리 시 해당 금액이 결제 내역에 자동으로 등록되며, 수강 상태가 '완료'로 변경됩니다.\n+              </div>\n+            </ModalContent>\n+          }\n+          footer={\n+            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '12px', width: '100%' }}>\n+              <Button variant=\"secondary\" onClick={handleCloseCompleteModal} disabled={isProcessing}>\n+                취소\n+              </Button>\n+              <Button onClick={handleCompletePayment} disabled={isProcessing}>\n+                {isProcessing ? '처리 중...' : '완료 처리'}\n+              </Button>\n+            </div>\n+          }\n+        />\n+      )}\n     </PageContainer>\n   );\n };\n \n"
                },
                {
                    "date": 1760762961938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -404,33 +404,41 @@\n         coach: selectedEnrollment.coach,\n         coachName: selectedEnrollment.coachName,\n         paymentMethod: 'cash', // 기본값으로 현금 설정\n         paymentStatus: 'completed' as const, // 완료 상태로 설정\n-        totalAmount: selectedEnrollment.unpaidAmount || 0,\n-        paidAmount: selectedEnrollment.unpaidAmount || 0,\n-        unpaidAmount: 0,\n+        totalAmount: selectedEnrollment.unpaidAmount || 0, // 이번에 받는 금액\n+        paidAmount: selectedEnrollment.unpaidAmount || 0, // 이번에 받는 금액\n+        unpaidAmount: 0, // 완료 처리이므로 0\n         paymentDate: new Date(),\n+        // 수강/자산 구분 및 연결 정보 추가\n+        paymentType: 'course' as const, // 'course' | 'asset' | 'other'\n+        relatedCourseId: selectedEnrollment.id, // 수강 이력 ID로 연결\n+        relatedAssetId: null, // 자산 관련 결제가 아니므로 null\n         products: [{\n           id: selectedEnrollment.productId,\n           name: selectedEnrollment.productName,\n-          price: selectedEnrollment.unpaidAmount || 0,\n+          price: selectedEnrollment.unpaidAmount || 0, // 이번에 받는 금액\n           quantity: 1,\n           programId: selectedEnrollment.programId,\n           programName: selectedEnrollment.programName,\n           programType: selectedEnrollment.programType\n         }],\n-        memo: `미수금 완료 처리 - ${selectedEnrollment.productName}`\n+        memo: `미수금 완료 처리 - ${selectedEnrollment.productName} (수강 ID: ${selectedEnrollment.id})`\n       };\n \n       await dbManager.addPayment(paymentData);\n \n       toast.success('미수금이 성공적으로 완료 처리되었습니다.');\n       \n       // 3. 데이터 새로고침\n       await loadCourseEnrollments();\n-      await handleSearch(); // 현재 검색 조건으로 다시 검색\n       \n-      // 4. 모달 닫기\n+      // 4. 현재 검색 조건으로 다시 필터링\n+      setTimeout(() => {\n+        handleSearch();\n+      }, 100);\n+      \n+      // 5. 모달 닫기\n       setShowCompleteModal(false);\n       setSelectedEnrollment(null);\n       \n     } catch (error) {\n"
                },
                {
                    "date": 1760763299913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -543,8 +543,9 @@\n                   <TableHeaderCell>진행상황</TableHeaderCell>\n                   <TableHeaderCell>지점</TableHeaderCell>\n                   <TableHeaderCell>담당코치</TableHeaderCell>\n                   <TableHeaderCell>결제정보</TableHeaderCell>\n+                  <TableHeaderCell>연결정보</TableHeaderCell>\n                   <TableHeaderCell>수강기간</TableHeaderCell>\n                   <TableHeaderCell>상태</TableHeaderCell>\n                 </TableRow>\n               </TableHeader>\n@@ -584,8 +585,18 @@\n                         </UnpaidAmount>\n                       </PriceInfo>\n                     </TableCell>\n                     <TableCell>\n+                      <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+                        <div style={{ color: AppColors.primary, fontWeight: '600' }}>\n+                          수강 ID: {enrollment.id.slice(-8)}\n+                        </div>\n+                        <div style={{ marginTop: '2px', fontSize: '11px' }}>\n+                          결제 이력에서 확인 가능\n+                        </div>\n+                      </div>\n+                    </TableCell>\n+                    <TableCell>\n                       <div>{formatDate(enrollment.startDate)}</div>\n                       {enrollment.endDate && (\n                         <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n                           ~ {formatDate(enrollment.endDate)}\n"
                },
                {
                    "date": 1760763753156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import { dbManager, type CourseEnrollment } from '../../../utils/indexedDB';\n import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n import Modal from '../../../components/Modal';\n+import CustomDropdown from '../../../components/CustomDropdown';\n \n const PageContainer = styled.div`\n   width: 100%;\n `;\n@@ -212,8 +213,9 @@\n   // 완료 처리 모달 관련 상태\n   const [showCompleteModal, setShowCompleteModal] = useState<boolean>(false);\n   const [selectedEnrollment, setSelectedEnrollment] = useState<CourseEnrollment | null>(null);\n   const [isProcessing, setIsProcessing] = useState<boolean>(false);\n+  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>('card');\n \n   // 미수 메타정보 로드\n   const loadUnpaidMetaInfo = useCallback(async () => {\n     try {\n@@ -374,8 +376,9 @@\n \n   // 미수 상태 클릭 처리\n   const handleUnpaidClick = (enrollment: CourseEnrollment) => {\n     setSelectedEnrollment(enrollment);\n+    setSelectedPaymentMethod('card'); // 기본값을 카드로 설정\n     setShowCompleteModal(true);\n   };\n \n   // 완료 처리 확인\n@@ -402,9 +405,9 @@\n         branchId: selectedEnrollment.branchId,\n         branchName: selectedEnrollment.branchName,\n         coach: selectedEnrollment.coach,\n         coachName: selectedEnrollment.coachName,\n-        paymentMethod: 'cash', // 기본값으로 현금 설정\n+        paymentMethod: selectedPaymentMethod, // 사용자가 선택한 결제 방법 사용\n         paymentStatus: 'completed' as const, // 완료 상태로 설정\n         totalAmount: selectedEnrollment.unpaidAmount || 0, // 이번에 받는 금액\n         paidAmount: selectedEnrollment.unpaidAmount || 0, // 이번에 받는 금액\n         unpaidAmount: 0, // 완료 처리이므로 0\n@@ -426,10 +429,18 @@\n       };\n \n       await dbManager.addPayment(paymentData);\n \n-      toast.success('미수금이 성공적으로 완료 처리되었습니다.');\n+      // 결제 방법별 메시지 표시\n+      const paymentMethodLabels: { [key: string]: string } = {\n+        'card': '카드',\n+        'cash': '현금',\n+        'transfer': '계좌이체'\n+      };\n+      const paymentMethodLabel = paymentMethodLabels[selectedPaymentMethod] || '카드';\n       \n+      toast.success(`미수금이 성공적으로 완료 처리되었습니다. (결제방법: ${paymentMethodLabel})`);\n+      \n       // 3. 데이터 새로고침\n       await loadCourseEnrollments();\n       \n       // 4. 현재 검색 조건으로 다시 필터링\n@@ -452,8 +463,9 @@\n   // 모달 닫기\n   const handleCloseCompleteModal = () => {\n     setShowCompleteModal(false);\n     setSelectedEnrollment(null);\n+    setSelectedPaymentMethod('card'); // 기본값으로 리셋\n   };\n \n   const formatDate = (date: Date | null | undefined) => {\n     return date ? new Date(date).toLocaleDateString() : '-';\n@@ -479,8 +491,15 @@\n     }\n     return '진행률 미설정';\n   };\n \n+  // 결제 방법 옵션\n+  const paymentMethodOptions = [\n+    { value: 'card', label: '카드' },\n+    { value: 'cash', label: '현금' },\n+    { value: 'transfer', label: '계좌이체' }\n+  ];\n+\n   if (loading) {\n     return (\n       <PageContainer>\n         <LoadingState>\n@@ -667,8 +686,19 @@\n               <InfoRow>\n                 <InfoLabel>미수금액:</InfoLabel>\n                 <ModalUnpaidAmount>{selectedEnrollment.unpaidAmount?.toLocaleString() || 0}원</ModalUnpaidAmount>\n               </InfoRow>\n+\n+              <InfoRow>\n+                <InfoLabel>결제 방법:</InfoLabel>\n+                <div style={{ flex: 1, marginLeft: '12px' }}>\n+                  <CustomDropdown\n+                    value={selectedPaymentMethod}\n+                    onChange={setSelectedPaymentMethod}\n+                    options={paymentMethodOptions}\n+                  />\n+                </div>\n+              </InfoRow>\n               \n               <div style={{ \n                 padding: '12px', \n                 backgroundColor: '#f0f9ff', \n"
                },
                {
                    "date": 1760763851586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -656,8 +656,20 @@\n             <ModalContent>\n               <WarningText>\n                 ⚠️ 미수금을 완료 처리하시겠습니까?\n               </WarningText>\n+\n+              <InfoRow>\n+                <InfoLabel>결제 방법:</InfoLabel>\n+                <div style={{ flex: 1, marginLeft: '12px' }}>\n+                  <CustomDropdown\n+                    value={selectedPaymentMethod}\n+                    onChange={setSelectedPaymentMethod}\n+                    options={paymentMethodOptions}\n+                    inModal={true}\n+                  />\n+                </div>\n+              </InfoRow>\n               \n               <InfoRow>\n                 <InfoLabel>회원명:</InfoLabel>\n                 <InfoValue>{selectedEnrollment.memberName}</InfoValue>\n@@ -686,19 +698,8 @@\n               <InfoRow>\n                 <InfoLabel>미수금액:</InfoLabel>\n                 <ModalUnpaidAmount>{selectedEnrollment.unpaidAmount?.toLocaleString() || 0}원</ModalUnpaidAmount>\n               </InfoRow>\n-\n-              <InfoRow>\n-                <InfoLabel>결제 방법:</InfoLabel>\n-                <div style={{ flex: 1, marginLeft: '12px' }}>\n-                  <CustomDropdown\n-                    value={selectedPaymentMethod}\n-                    onChange={setSelectedPaymentMethod}\n-                    options={paymentMethodOptions}\n-                  />\n-                </div>\n-              </InfoRow>\n               \n               <div style={{ \n                 padding: '12px', \n                 backgroundColor: '#f0f9ff', \n"
                },
                {
                    "date": 1761130065875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -347,12 +347,10 @@\n     };\n     initializeData();\n   }, []); // eslint-disable-line react-hooks/exhaustive-deps\n \n-  const handleSearch = async () => {\n-    // 현재 선택된 조건으로 데이터를 불러옵니다\n-    await loadCourseEnrollments(selectedPeriod, customStartDate, customEndDate);\n-    \n+  // 필터 적용 함수 (데이터 로드와 분리)\n+  const applyFilters = useCallback(() => {\n     let filtered = courseEnrollments;\n     \n     // 미수 필터 적용\n     if (showUnpaidOnly) {\n@@ -371,8 +369,18 @@\n       );\n     }\n     \n     setFilteredEnrollments(filtered);\n+  }, [courseEnrollments, showUnpaidOnly, searchQuery]);\n+\n+  // 데이터나 필터 조건이 변경될 때마다 필터 적용\n+  useEffect(() => {\n+    applyFilters();\n+  }, [applyFilters]);\n+\n+  const handleSearch = async () => {\n+    // 현재 선택된 조건으로 데이터를 불러옵니다\n+    await loadCourseEnrollments(selectedPeriod, customStartDate, customEndDate);\n   };\n \n   // 미수 상태 클릭 처리\n   const handleUnpaidClick = (enrollment: CourseEnrollment) => {\n"
                },
                {
                    "date": 1761130638652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,78 +7,14 @@\n import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n import Modal from '../../../components/Modal';\n import CustomDropdown from '../../../components/CustomDropdown';\n+import DataTable, { type TableColumn } from '../../../components/DataTable';\n \n const PageContainer = styled.div`\n   width: 100%;\n `;\n \n-const ResultsSection = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  overflow: hidden;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const ResultsHeader = styled.div`\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-  padding: 20px 24px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const ResultsTitle = styled.h2`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onBackground};\n-  margin: 0;\n-`;\n-\n-const ResultsCount = styled.span`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const TableContainer = styled.div`\n-  overflow-x: auto;\n-`;\n-\n-const Table = styled.table`\n-  width: 100%;\n-  border-collapse: collapse;\n-`;\n-\n-const TableHeader = styled.thead`\n-  background: #f8f9fa;\n-`;\n-\n-const TableRow = styled.tr`\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  \n-  &:hover {\n-    background: #f8f9fa;\n-  }\n-`;\n-\n-const TableHeaderCell = styled.th`\n-  padding: 12px 16px;\n-  text-align: left;\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onInput1};\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const TableCell = styled.td`\n-  padding: 12px 16px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onBackground};\n-  vertical-align: middle;\n-`;\n-\n const StatusBadge = styled.span<{ $status: 'completed' | 'unpaid'; $clickable?: boolean }>`\n   padding: 4px 8px;\n   border-radius: 12px;\n   font-size: 12px;\n@@ -114,20 +50,8 @@\n   font-size: 12px;\n   margin-top: 2px;\n `;\n \n-const EmptyState = styled.div`\n-  padding: 60px 24px;\n-  text-align: center;\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const LoadingState = styled.div`\n-  padding: 60px 24px;\n-  text-align: center;\n-  color: ${AppColors.onInput1};\n-`;\n-\n const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n   padding: 12px 18px;\n   border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n   border-radius: 8px;\n@@ -506,14 +430,150 @@\n     { value: 'cash', label: '현금' },\n     { value: 'transfer', label: '계좌이체' }\n   ];\n \n+  // 테이블 컬럼 정의\n+  const columns: TableColumn<CourseEnrollment>[] = [\n+    {\n+      key: 'memberName',\n+      title: '회원명',\n+      width: '120px'\n+    },\n+    {\n+      key: 'productName',\n+      title: '상품명',\n+      width: '180px',\n+      render: (value, record) => (\n+        <div>\n+          <div>{record.productName}</div>\n+          <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+            {record.productPrice.toLocaleString()}원\n+          </div>\n+        </div>\n+      )\n+    },\n+    {\n+      key: 'programName',\n+      title: '프로그램',\n+      width: '150px',\n+      render: (value, record) => (\n+        <div>\n+          <div>{record.programName}</div>\n+          <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+            {record.programType}\n+          </div>\n+        </div>\n+      )\n+    },\n+    {\n+      key: 'progress',\n+      title: '진행상황',\n+      width: '120px',\n+      render: (value, record) => (\n+        <ProgressInfo>\n+          {getProgressInfo(record)}\n+        </ProgressInfo>\n+      )\n+    },\n+    {\n+      key: 'branchName',\n+      title: '지점',\n+      width: '100px'\n+    },\n+    {\n+      key: 'coachName',\n+      title: '담당코치',\n+      width: '100px'\n+    },\n+    {\n+      key: 'payment',\n+      title: '결제정보',\n+      width: '140px',\n+      align: 'right' as const,\n+      render: (value, record) => (\n+        <PriceInfo>\n+          <PaidAmount>\n+            {record.paidAmount.toLocaleString()}원\n+          </PaidAmount>\n+          <UnpaidAmount $hasUnpaid={record.unpaidAmount > 0}>\n+            {record.unpaidAmount > 0 ? \n+              `미수: ${record.unpaidAmount.toLocaleString()}원` : \n+              '완납'\n+            }\n+          </UnpaidAmount>\n+        </PriceInfo>\n+      )\n+    },\n+    {\n+      key: 'connection',\n+      title: '연결정보',\n+      width: '140px',\n+      render: (value, record) => (\n+        <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+          <div style={{ color: AppColors.primary, fontWeight: '600' }}>\n+            수강 ID: {record.id.slice(-8)}\n+          </div>\n+          <div style={{ marginTop: '2px', fontSize: '11px' }}>\n+            결제 이력에서 확인 가능\n+          </div>\n+        </div>\n+      )\n+    },\n+    {\n+      key: 'period',\n+      title: '수강기간',\n+      width: '140px',\n+      render: (value, record) => (\n+        <div>\n+          <div>{formatDate(record.startDate)}</div>\n+          {record.endDate && (\n+            <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+              ~ {formatDate(record.endDate)}\n+            </div>\n+          )}\n+        </div>\n+      )\n+    },\n+    {\n+      key: 'enrollmentStatus',\n+      title: '상태',\n+      width: '80px',\n+      align: 'center' as const,\n+      render: (value, record) => (\n+        <StatusBadge \n+          $status={record.enrollmentStatus}\n+          $clickable={record.enrollmentStatus === 'unpaid'}\n+          onClick={record.enrollmentStatus === 'unpaid' ? () => handleUnpaidClick(record) : undefined}\n+          title={record.enrollmentStatus === 'unpaid' ? '클릭하여 완료 처리' : ''}\n+        >\n+          {record.enrollmentStatus === 'completed' ? '완료' : '미수'}\n+        </StatusBadge>\n+      )\n+    }\n+  ];\n+\n+  // 결과 카운트 정보 컴포넌트\n+  const resultCountInfo = (\n+    <>\n+      {showUnpaidOnly ? '미수 수강: ' : ''}{filteredEnrollments.length}건 \n+      (완료: {filteredEnrollments.filter(e => e.enrollmentStatus === 'completed').length}건, \n+      미수: {filteredEnrollments.filter(e => e.enrollmentStatus === 'unpaid').length}건)\n+      <br />\n+      <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+        기간: {getDateRangeDisplay()} | 전체: {courseEnrollments.length}건\n+      </span>\n+    </>\n+  );\n+\n   if (loading) {\n     return (\n       <PageContainer>\n-        <LoadingState>\n-          <h3>수강 데이터를 불러오는 중...</h3>\n-        </LoadingState>\n+        <DataTable\n+          title=\"수강 이력\"\n+          columns={columns}\n+          data={[]}\n+          loading={true}\n+        />\n       </PageContainer>\n     );\n   }\n \n@@ -544,116 +604,18 @@\n         searchPlaceholder=\"회원명, 상품명, 프로그램명, 지점명, 코치명으로 검색...\"\n         autoSearchOnDateChange={false}\n       />\n \n-      <ResultsSection>\n-        <ResultsHeader>\n-          <ResultsTitle>수강 이력</ResultsTitle>\n-          <ResultsCount>\n-            {showUnpaidOnly ? '미수 수강: ' : ''}{filteredEnrollments.length}건 \n-            (완료: {filteredEnrollments.filter(e => e.enrollmentStatus === 'completed').length}건, \n-            미수: {filteredEnrollments.filter(e => e.enrollmentStatus === 'unpaid').length}건)\n-            <br />\n-            <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-              기간: {getDateRangeDisplay()} | 전체: {courseEnrollments.length}건\n-            </span>\n-          </ResultsCount>\n-        </ResultsHeader>\n+      <DataTable\n+        title=\"수강 이력\"\n+        columns={columns}\n+        data={filteredEnrollments}\n+        loading={loading}\n+        emptyText=\"수강 이력이 없습니다\"\n+        emptyDescription=\"검색 조건을 변경하거나 새로운 수강생을 등록해보세요.\"\n+        resultCount={resultCountInfo}\n+      />\n \n-        {filteredEnrollments.length > 0 ? (\n-          <TableContainer>\n-            <Table>\n-              <TableHeader>\n-                <TableRow>\n-                  <TableHeaderCell>회원명</TableHeaderCell>\n-                  <TableHeaderCell>상품명</TableHeaderCell>\n-                  <TableHeaderCell>프로그램</TableHeaderCell>\n-                  <TableHeaderCell>진행상황</TableHeaderCell>\n-                  <TableHeaderCell>지점</TableHeaderCell>\n-                  <TableHeaderCell>담당코치</TableHeaderCell>\n-                  <TableHeaderCell>결제정보</TableHeaderCell>\n-                  <TableHeaderCell>연결정보</TableHeaderCell>\n-                  <TableHeaderCell>수강기간</TableHeaderCell>\n-                  <TableHeaderCell>상태</TableHeaderCell>\n-                </TableRow>\n-              </TableHeader>\n-              <tbody>\n-                {filteredEnrollments.map(enrollment => (\n-                  <TableRow key={enrollment.id}>\n-                    <TableCell>{enrollment.memberName}</TableCell>\n-                    <TableCell>\n-                      <div>{enrollment.productName}</div>\n-                      <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-                        {enrollment.productPrice.toLocaleString()}원\n-                      </div>\n-                    </TableCell>\n-                    <TableCell>\n-                      <div>{enrollment.programName}</div>\n-                      <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-                        {enrollment.programType}\n-                      </div>\n-                    </TableCell>\n-                    <TableCell>\n-                      <ProgressInfo>\n-                        {getProgressInfo(enrollment)}\n-                      </ProgressInfo>\n-                    </TableCell>\n-                    <TableCell>{enrollment.branchName}</TableCell>\n-                    <TableCell>{enrollment.coachName}</TableCell>\n-                    <TableCell>\n-                      <PriceInfo>\n-                        <PaidAmount>\n-                          {enrollment.paidAmount.toLocaleString()}원\n-                        </PaidAmount>\n-                        <UnpaidAmount $hasUnpaid={enrollment.unpaidAmount > 0}>\n-                          {enrollment.unpaidAmount > 0 ? \n-                            `미수: ${enrollment.unpaidAmount.toLocaleString()}원` : \n-                            '완납'\n-                          }\n-                        </UnpaidAmount>\n-                      </PriceInfo>\n-                    </TableCell>\n-                    <TableCell>\n-                      <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-                        <div style={{ color: AppColors.primary, fontWeight: '600' }}>\n-                          수강 ID: {enrollment.id.slice(-8)}\n-                        </div>\n-                        <div style={{ marginTop: '2px', fontSize: '11px' }}>\n-                          결제 이력에서 확인 가능\n-                        </div>\n-                      </div>\n-                    </TableCell>\n-                    <TableCell>\n-                      <div>{formatDate(enrollment.startDate)}</div>\n-                      {enrollment.endDate && (\n-                        <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-                          ~ {formatDate(enrollment.endDate)}\n-                        </div>\n-                      )}\n-                    </TableCell>\n-                    <TableCell>\n-                      <StatusBadge \n-                        $status={enrollment.enrollmentStatus}\n-                        $clickable={enrollment.enrollmentStatus === 'unpaid'}\n-                        onClick={enrollment.enrollmentStatus === 'unpaid' ? () => handleUnpaidClick(enrollment) : undefined}\n-                        title={enrollment.enrollmentStatus === 'unpaid' ? '클릭하여 완료 처리' : ''}\n-                      >\n-                        {enrollment.enrollmentStatus === 'completed' ? '완료' : '미수'}\n-                      </StatusBadge>\n-                    </TableCell>\n-                  </TableRow>\n-                ))}\n-              </tbody>\n-            </Table>\n-          </TableContainer>\n-        ) : (\n-          <EmptyState>\n-            <h3>수강 이력이 없습니다</h3>\n-            <p>검색 조건을 변경하거나 새로운 수강생을 등록해보세요.</p>\n-          </EmptyState>\n-        )}\n-      </ResultsSection>\n-\n       {/* 완료 처리 모달 */}\n       {showCompleteModal && selectedEnrollment && (\n         <Modal \n           isOpen={showCompleteModal}\n"
                },
                {
                    "date": 1761131475171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -612,8 +612,14 @@\n         loading={loading}\n         emptyText=\"수강 이력이 없습니다\"\n         emptyDescription=\"검색 조건을 변경하거나 새로운 수강생을 등록해보세요.\"\n         resultCount={resultCountInfo}\n+        pagination={{\n+          enabled: true,\n+          pageSize: 15,\n+          pageSizeOptions: [15, 30, 100],\n+          showTotal: true\n+        }}\n       />\n \n       {/* 완료 처리 모달 */}\n       {showCompleteModal && selectedEnrollment && (\n"
                },
                {
                    "date": 1761131758238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -614,10 +614,10 @@\n         emptyDescription=\"검색 조건을 변경하거나 새로운 수강생을 등록해보세요.\"\n         resultCount={resultCountInfo}\n         pagination={{\n           enabled: true,\n-          pageSize: 15,\n-          pageSizeOptions: [15, 30, 100],\n+          pageSize: 5,\n+          pageSizeOptions: [5, 15, 30],\n           showTotal: true\n         }}\n       />\n \n"
                },
                {
                    "date": 1761132526132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n import Modal from '../../../components/Modal';\n import CustomDropdown from '../../../components/CustomDropdown';\n import DataTable, { type TableColumn } from '../../../components/DataTable';\n+import CourseRegistrationModal from './CourseRegistrationModal';\n \n const PageContainer = styled.div`\n   width: 100%;\n `;\n@@ -139,8 +140,11 @@\n   const [selectedEnrollment, setSelectedEnrollment] = useState<CourseEnrollment | null>(null);\n   const [isProcessing, setIsProcessing] = useState<boolean>(false);\n   const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>('card');\n \n+  // 새 수강 등록 모달 관련 상태\n+  const [showRegistrationModal, setShowRegistrationModal] = useState<boolean>(false);\n+\n   // 미수 메타정보 로드\n   const loadUnpaidMetaInfo = useCallback(async () => {\n     try {\n       const allEnrollments = await dbManager.getAllCourseEnrollments();\n@@ -305,8 +309,29 @@\n     // 현재 선택된 조건으로 데이터를 불러옵니다\n     await loadCourseEnrollments(selectedPeriod, customStartDate, customEndDate);\n   };\n \n+  // 새 수강 등록 모달 열기\n+  const handleOpenRegistrationModal = () => {\n+    setShowRegistrationModal(true);\n+  };\n+\n+  // 새 수강 등록 모달 닫기\n+  const handleCloseRegistrationModal = () => {\n+    setShowRegistrationModal(false);\n+  };\n+\n+  // 새 수강 등록 성공 처리\n+  const handleRegistrationSuccess = async () => {\n+    toast.success('새 수강이 성공적으로 등록되었습니다.');\n+    // 데이터 새로고침\n+    await loadCourseEnrollments();\n+    // 현재 검색 조건으로 다시 필터링\n+    setTimeout(() => {\n+      handleSearch();\n+    }, 100);\n+  };\n+\n   // 미수 상태 클릭 처리\n   const handleUnpaidClick = (enrollment: CourseEnrollment) => {\n     setSelectedEnrollment(enrollment);\n     setSelectedPaymentMethod('card'); // 기본값을 카드로 설정\n@@ -582,8 +607,11 @@\n       {/* 새로운 SearchArea 컴포넌트 사용 */}\n       <SearchArea\n         metaContent={\n           <div style={{ display: 'flex', gap: '12px', alignItems: 'center', flexWrap: 'wrap' }}>\n+            <Button onClick={handleOpenRegistrationModal}>\n+              + 새 수강 등록\n+            </Button>\n             <UnpaidFilter\n               active={showUnpaidOnly}\n               unpaidCount={unpaidMetaInfo.unpaidCourseCount}\n               totalAmount={unpaidMetaInfo.totalUnpaidAmount}\n@@ -620,8 +648,15 @@\n           showTotal: true\n         }}\n       />\n \n+      {/* 새 수강 등록 모달 */}\n+      <CourseRegistrationModal\n+        isOpen={showRegistrationModal}\n+        onClose={handleCloseRegistrationModal}\n+        onSuccess={handleRegistrationSuccess}\n+      />\n+\n       {/* 완료 처리 모달 */}\n       {showCompleteModal && selectedEnrollment && (\n         <Modal \n           isOpen={showCompleteModal}\n"
                },
                {
                    "date": 1761132724869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,749 @@\n+import React, { useState, useEffect, useCallback } from 'react';\n+import styled from 'styled-components';\n+import { toast } from 'react-toastify';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, type CourseEnrollment } from '../../../utils/indexedDB';\n+import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n+import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n+import Modal from '../../../components/Modal';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import DataTable, { type TableColumn } from '../../../components/DataTable';\n+import CourseRegistrationModal from './CourseRegistrationModal';\n+\n+const PageContainer = styled.div`\n+  width: 100%;\n+`;\n+\n+const StatusBadge = styled.span<{ $status: 'completed' | 'unpaid'; $clickable?: boolean }>`\n+  padding: 4px 8px;\n+  border-radius: 12px;\n+  font-size: 12px;\n+  font-weight: 500;\n+  background: ${props => props.$status === 'completed' ? '#e7f5e7' : '#fff2f2'};\n+  color: ${props => props.$status === 'completed' ? '#2d5a2d' : '#8b1538'};\n+  cursor: ${props => props.$clickable ? 'pointer' : 'default'};\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    opacity: ${props => props.$clickable ? 0.8 : 1};\n+    transform: ${props => props.$clickable ? 'translateY(-1px)' : 'none'};\n+  }\n+`;\n+\n+const ProgressInfo = styled.div`\n+  font-size: 12px;\n+  color: ${AppColors.onInput1};\n+  margin-top: 4px;\n+`;\n+\n+const PriceInfo = styled.div`\n+  text-align: right;\n+`;\n+\n+const PaidAmount = styled.div`\n+  color: ${AppColors.primary};\n+  font-weight: 600;\n+`;\n+\n+const UnpaidAmount = styled.div<{ $hasUnpaid: boolean }>`\n+  color: ${props => props.$hasUnpaid ? '#d32f2f' : AppColors.onInput1};\n+  font-size: 12px;\n+  margin-top: 2px;\n+`;\n+\n+const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n+  padding: 12px 18px;\n+  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n+  border-radius: 8px;\n+  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n+  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  font-weight: 600;\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    opacity: 0.9;\n+    transform: translateY(-1px);\n+  }\n+  \n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+    transform: none;\n+  }\n+`;\n+\n+const ModalContent = styled.div`\n+  text-align: left;\n+`;\n+\n+const InfoRow = styled.div`\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  padding: 12px 0;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  \n+  &:last-child {\n+    border-bottom: none;\n+  }\n+`;\n+\n+const InfoLabel = styled.span`\n+  font-weight: 600;\n+  color: ${AppColors.onBackground};\n+`;\n+\n+const InfoValue = styled.span`\n+  color: ${AppColors.onInput1};\n+`;\n+\n+const ModalUnpaidAmount = styled.span`\n+  color: #d32f2f;\n+  font-weight: 600;\n+  font-size: 16px;\n+`;\n+\n+const WarningText = styled.div`\n+  background: #fff3cd;\n+  border: 1px solid #ffeaa7;\n+  border-radius: 8px;\n+  padding: 12px;\n+  margin: 16px 0;\n+  color: #856404;\n+  font-size: 14px;\n+  text-align: center;\n+`;\n+\n+const CourseHistory: React.FC = () => {\n+  const [searchQuery, setSearchQuery] = useState<string>('');\n+  const [courseEnrollments, setCourseEnrollments] = useState<CourseEnrollment[]>([]);\n+  const [filteredEnrollments, setFilteredEnrollments] = useState<CourseEnrollment[]>([]);\n+  const [loading, setLoading] = useState<boolean>(true);\n+  \n+  // 기간 선택 관련 상태\n+  const [selectedPeriod, setSelectedPeriod] = useState<PeriodOption>('1month');\n+  const [customStartDate, setCustomStartDate] = useState<string>('');\n+  const [customEndDate, setCustomEndDate] = useState<string>('');\n+  \n+  // 미수 필터 관련 상태\n+  const [showUnpaidOnly, setShowUnpaidOnly] = useState<boolean>(false);\n+  const [unpaidMetaInfo, setUnpaidMetaInfo] = useState<{ unpaidCourseCount: number; totalUnpaidAmount: number }>({\n+    unpaidCourseCount: 0,\n+    totalUnpaidAmount: 0\n+  });\n+  \n+  // 완료 처리 모달 관련 상태\n+  const [showCompleteModal, setShowCompleteModal] = useState<boolean>(false);\n+  const [selectedEnrollment, setSelectedEnrollment] = useState<CourseEnrollment | null>(null);\n+  const [isProcessing, setIsProcessing] = useState<boolean>(false);\n+  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>('card');\n+\n+  // 새 수강 등록 모달 관련 상태\n+  const [showRegistrationModal, setShowRegistrationModal] = useState<boolean>(false);\n+\n+  // 새 수강 등록 성공 처리\n+  const handleRegistrationSuccess = async () => {\n+    // 데이터 새로고침\n+    await loadCourseEnrollments();\n+    // 현재 검색 조건으로 다시 필터링\n+    setTimeout(() => {\n+      handleSearch();\n+    }, 100);\n+  };\n+\n+  // 새 수강 등록 모달 열기\n+  const handleOpenRegistrationModal = () => {\n+    setShowRegistrationModal(true);\n+  };\n+\n+  // 새 수강 등록 모달 닫기\n+  const handleCloseRegistrationModal = () => {\n+    setShowRegistrationModal(false);\n+  };\n+\n+  // 미수 메타정보 로드\n+  const loadUnpaidMetaInfo = useCallback(async () => {\n+    try {\n+      const allEnrollments = await dbManager.getAllCourseEnrollments();\n+      const unpaidEnrollments = allEnrollments.filter(e => e.enrollmentStatus === 'unpaid');\n+      const unpaidCourseCount = unpaidEnrollments.length;\n+      const totalUnpaidAmount = unpaidEnrollments.reduce((sum, e) => sum + (e.unpaidAmount || 0), 0);\n+      \n+      setUnpaidMetaInfo({ unpaidCourseCount, totalUnpaidAmount });\n+    } catch (error) {\n+      console.error('미수 메타정보 로드 실패:', error);\n+    }\n+  }, []);\n+\n+  // 기간별 검색 범위 계산\n+  const getDateRange = useCallback(() => {\n+    const today = new Date();\n+    const startDate = new Date();\n+    \n+    switch (selectedPeriod) {\n+      case '1month':\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+      case '3month':\n+        startDate.setMonth(today.getMonth() - 3);\n+        return { start: startDate, end: today };\n+      case '6month':\n+        startDate.setMonth(today.getMonth() - 6);\n+        return { start: startDate, end: today };\n+      case 'custom':\n+        if (customStartDate && customEndDate) {\n+          return { \n+            start: new Date(customStartDate), \n+            end: new Date(customEndDate) \n+          };\n+        }\n+        // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+      default:\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+    }\n+  }, [selectedPeriod, customStartDate, customEndDate]);\n+\n+  // 날짜 범위 표시 문자열 생성\n+  const getDateRangeDisplay = useCallback(() => {\n+    const range = getDateRange();\n+    const formatDate = (date: Date) => {\n+      return date.toLocaleDateString('ko-KR', {\n+        year: 'numeric',\n+        month: 'short',\n+        day: 'numeric'\n+      });\n+    };\n+    return `${formatDate(range.start)} ~ ${formatDate(range.end)}`;\n+  }, [getDateRange]);\n+\n+  const loadCourseEnrollments = useCallback(async (period?: PeriodOption, startDate?: string, endDate?: string) => {\n+    try {\n+      setLoading(true);\n+      console.log('수강 데이터 로딩 시작...');\n+      \n+      // 미수 메타정보 로드\n+      await loadUnpaidMetaInfo();\n+      \n+      const allEnrollments = await dbManager.getAllCourseEnrollments();\n+      console.log('전체 수강 이력 수:', allEnrollments.length);\n+      \n+      // 기간별 필터링 (등록일 기준) - 매개변수가 있으면 사용, 없으면 현재 상태 사용\n+      const currentPeriod = period ?? selectedPeriod;\n+      const currentStartDate = startDate ?? customStartDate;\n+      const currentEndDate = endDate ?? customEndDate;\n+      \n+      let dateRange: { start: Date; end: Date };\n+      const today = new Date();\n+      const rangeStartDate = new Date();\n+      \n+      switch (currentPeriod) {\n+        case '1month':\n+          rangeStartDate.setMonth(today.getMonth() - 1);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case '3month':\n+          rangeStartDate.setMonth(today.getMonth() - 3);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case '6month':\n+          rangeStartDate.setMonth(today.getMonth() - 6);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case 'custom':\n+          if (currentStartDate && currentEndDate) {\n+            dateRange = { \n+              start: new Date(currentStartDate), \n+              end: new Date(currentEndDate) \n+            };\n+          } else {\n+            // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+            rangeStartDate.setMonth(today.getMonth() - 1);\n+            dateRange = { start: rangeStartDate, end: today };\n+          }\n+          break;\n+        default:\n+          rangeStartDate.setMonth(today.getMonth() - 1);\n+          dateRange = { start: rangeStartDate, end: today };\n+      }\n+      \n+      const filteredByDate = allEnrollments.filter(enrollment => {\n+        const enrollmentDate = new Date(enrollment.createdAt);\n+        return enrollmentDate >= dateRange.start && enrollmentDate <= dateRange.end;\n+      });\n+      \n+      console.log(`${currentPeriod} 기간 내 수강 이력:`, filteredByDate.length);\n+      \n+      setCourseEnrollments(filteredByDate);\n+      setFilteredEnrollments(filteredByDate);\n+    } catch (error) {\n+      console.error('수강 데이터 로드 실패:', error);\n+    } finally {\n+      setLoading(false);\n+    }\n+  }, [loadUnpaidMetaInfo, selectedPeriod, customStartDate, customEndDate]);\n+\n+  // 컴포넌트 마운트 시 초기 데이터 로드 (1개월 기준)\n+  useEffect(() => {\n+    const initializeData = async () => {\n+      await loadCourseEnrollments();\n+    };\n+    initializeData();\n+  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n+\n+  // 필터 적용 함수 (데이터 로드와 분리)\n+  const applyFilters = useCallback(() => {\n+    let filtered = courseEnrollments;\n+    \n+    // 미수 필터 적용\n+    if (showUnpaidOnly) {\n+      filtered = filtered.filter(enrollment => enrollment.enrollmentStatus === 'unpaid');\n+    }\n+    \n+    // 텍스트 검색\n+    if (searchQuery.trim()) {\n+      const query = searchQuery.toLowerCase().trim();\n+      filtered = filtered.filter(enrollment =>\n+        enrollment.memberName.toLowerCase().includes(query) ||\n+        enrollment.productName.toLowerCase().includes(query) ||\n+        enrollment.programName.toLowerCase().includes(query) ||\n+        enrollment.branchName.toLowerCase().includes(query) ||\n+        enrollment.coachName.toLowerCase().includes(query)\n+      );\n+    }\n+    \n+    setFilteredEnrollments(filtered);\n+  }, [courseEnrollments, showUnpaidOnly, searchQuery]);\n+\n+  // 데이터나 필터 조건이 변경될 때마다 필터 적용\n+  useEffect(() => {\n+    applyFilters();\n+  }, [applyFilters]);\n+\n+  const handleSearch = async () => {\n+    // 현재 선택된 조건으로 데이터를 불러옵니다\n+    await loadCourseEnrollments(selectedPeriod, customStartDate, customEndDate);\n+  };\n+\n+  // 미수 상태 클릭 처리\n+  const handleUnpaidClick = (enrollment: CourseEnrollment) => {\n+    setSelectedEnrollment(enrollment);\n+    setSelectedPaymentMethod('card'); // 기본값을 카드로 설정\n+    setShowCompleteModal(true);\n+  };\n+\n+  // 완료 처리 확인\n+  const handleCompletePayment = async () => {\n+    if (!selectedEnrollment) return;\n+\n+    try {\n+      setIsProcessing(true);\n+\n+      // 1. 수강 이력의 상태를 'completed'로 변경하고 미수금액을 0으로 설정\n+      const updatedEnrollment: CourseEnrollment = {\n+        ...selectedEnrollment,\n+        enrollmentStatus: 'completed',\n+        paidAmount: selectedEnrollment.productPrice, // 상품 전체 금액으로 설정\n+        unpaidAmount: 0\n+      };\n+\n+      await dbManager.updateCourseEnrollment(selectedEnrollment.id, updatedEnrollment);\n+\n+      // 2. 결제 데이터 생성 및 저장\n+      const paymentData = {\n+        memberId: selectedEnrollment.memberId,\n+        memberName: selectedEnrollment.memberName,\n+        branchId: selectedEnrollment.branchId,\n+        branchName: selectedEnrollment.branchName,\n+        coach: selectedEnrollment.coach,\n+        coachName: selectedEnrollment.coachName,\n+        paymentMethod: selectedPaymentMethod, // 사용자가 선택한 결제 방법 사용\n+        paymentStatus: 'completed' as const, // 완료 상태로 설정\n+        totalAmount: selectedEnrollment.unpaidAmount || 0, // 이번에 받는 금액\n+        paidAmount: selectedEnrollment.unpaidAmount || 0, // 이번에 받는 금액\n+        unpaidAmount: 0, // 완료 처리이므로 0\n+        paymentDate: new Date(),\n+        // 수강/자산 구분 및 연결 정보 추가\n+        paymentType: 'course' as const, // 'course' | 'asset' | 'other'\n+        relatedCourseId: selectedEnrollment.id, // 수강 이력 ID로 연결\n+        relatedAssetId: null, // 자산 관련 결제가 아니므로 null\n+        products: [{\n+          id: selectedEnrollment.productId,\n+          name: selectedEnrollment.productName,\n+          price: selectedEnrollment.unpaidAmount || 0, // 이번에 받는 금액\n+          quantity: 1,\n+          programId: selectedEnrollment.programId,\n+          programName: selectedEnrollment.programName,\n+          programType: selectedEnrollment.programType\n+        }],\n+        memo: `미수금 완료 처리 - ${selectedEnrollment.productName} (수강 ID: ${selectedEnrollment.id})`\n+      };\n+\n+      await dbManager.addPayment(paymentData);\n+\n+      // 결제 방법별 메시지 표시\n+      const paymentMethodLabels: { [key: string]: string } = {\n+        'card': '카드',\n+        'cash': '현금',\n+        'transfer': '계좌이체'\n+      };\n+      const paymentMethodLabel = paymentMethodLabels[selectedPaymentMethod] || '카드';\n+      \n+      toast.success(`미수금이 성공적으로 완료 처리되었습니다. (결제방법: ${paymentMethodLabel})`);\n+      \n+      // 3. 데이터 새로고침\n+      await loadCourseEnrollments();\n+      \n+      // 4. 현재 검색 조건으로 다시 필터링\n+      setTimeout(() => {\n+        handleSearch();\n+      }, 100);\n+      \n+      // 5. 모달 닫기\n+      setShowCompleteModal(false);\n+      setSelectedEnrollment(null);\n+      \n+    } catch (error) {\n+      console.error('완료 처리 실패:', error);\n+      toast.error('완료 처리 중 오류가 발생했습니다.');\n+    } finally {\n+      setIsProcessing(false);\n+    }\n+  };\n+\n+  // 모달 닫기\n+  const handleCloseCompleteModal = () => {\n+    setShowCompleteModal(false);\n+    setSelectedEnrollment(null);\n+    setSelectedPaymentMethod('card'); // 기본값으로 리셋\n+  };\n+\n+  const formatDate = (date: Date | null | undefined) => {\n+    return date ? new Date(date).toLocaleDateString() : '-';\n+  };\n+\n+  const getProgressInfo = (enrollment: CourseEnrollment) => {\n+    if (enrollment.programType === '횟수제' && enrollment.sessionCount) {\n+      const remaining = enrollment.sessionCount - (enrollment.completedSessions || 0);\n+      return `${remaining}/${enrollment.sessionCount}회 남음`;\n+    } else if (enrollment.programType === '기간제' && enrollment.endDate) {\n+      const today = new Date();\n+      const endDate = new Date(enrollment.endDate);\n+      const timeDiff = endDate.getTime() - today.getTime();\n+      const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n+      \n+      if (daysDiff > 0) {\n+        return `${daysDiff}일 남음`;\n+      } else if (daysDiff === 0) {\n+        return '오늘 종료';\n+      } else {\n+        return `${Math.abs(daysDiff)}일 경과`;\n+      }\n+    }\n+    return '진행률 미설정';\n+  };\n+\n+  // 결제 방법 옵션\n+  const paymentMethodOptions = [\n+    { value: 'card', label: '카드' },\n+    { value: 'cash', label: '현금' },\n+    { value: 'transfer', label: '계좌이체' }\n+  ];\n+\n+  // 테이블 컬럼 정의\n+  const columns: TableColumn<CourseEnrollment>[] = [\n+    {\n+      key: 'memberName',\n+      title: '회원명',\n+      width: '120px'\n+    },\n+    {\n+      key: 'productName',\n+      title: '상품명',\n+      width: '180px',\n+      render: (value, record) => (\n+        <div>\n+          <div>{record.productName}</div>\n+          <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+            {record.productPrice.toLocaleString()}원\n+          </div>\n+        </div>\n+      )\n+    },\n+    {\n+      key: 'programName',\n+      title: '프로그램',\n+      width: '150px',\n+      render: (value, record) => (\n+        <div>\n+          <div>{record.programName}</div>\n+          <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+            {record.programType}\n+          </div>\n+        </div>\n+      )\n+    },\n+    {\n+      key: 'progress',\n+      title: '진행상황',\n+      width: '120px',\n+      render: (value, record) => (\n+        <ProgressInfo>\n+          {getProgressInfo(record)}\n+        </ProgressInfo>\n+      )\n+    },\n+    {\n+      key: 'branchName',\n+      title: '지점',\n+      width: '100px'\n+    },\n+    {\n+      key: 'coachName',\n+      title: '담당코치',\n+      width: '100px'\n+    },\n+    {\n+      key: 'payment',\n+      title: '결제정보',\n+      width: '140px',\n+      align: 'right' as const,\n+      render: (value, record) => (\n+        <PriceInfo>\n+          <PaidAmount>\n+            {record.paidAmount.toLocaleString()}원\n+          </PaidAmount>\n+          <UnpaidAmount $hasUnpaid={record.unpaidAmount > 0}>\n+            {record.unpaidAmount > 0 ? \n+              `미수: ${record.unpaidAmount.toLocaleString()}원` : \n+              '완납'\n+            }\n+          </UnpaidAmount>\n+        </PriceInfo>\n+      )\n+    },\n+    {\n+      key: 'connection',\n+      title: '연결정보',\n+      width: '140px',\n+      render: (value, record) => (\n+        <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+          <div style={{ color: AppColors.primary, fontWeight: '600' }}>\n+            수강 ID: {record.id.slice(-8)}\n+          </div>\n+          <div style={{ marginTop: '2px', fontSize: '11px' }}>\n+            결제 이력에서 확인 가능\n+          </div>\n+        </div>\n+      )\n+    },\n+    {\n+      key: 'period',\n+      title: '수강기간',\n+      width: '140px',\n+      render: (value, record) => (\n+        <div>\n+          <div>{formatDate(record.startDate)}</div>\n+          {record.endDate && (\n+            <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+              ~ {formatDate(record.endDate)}\n+            </div>\n+          )}\n+        </div>\n+      )\n+    },\n+    {\n+      key: 'enrollmentStatus',\n+      title: '상태',\n+      width: '80px',\n+      align: 'center' as const,\n+      render: (value, record) => (\n+        <StatusBadge \n+          $status={record.enrollmentStatus}\n+          $clickable={record.enrollmentStatus === 'unpaid'}\n+          onClick={record.enrollmentStatus === 'unpaid' ? () => handleUnpaidClick(record) : undefined}\n+          title={record.enrollmentStatus === 'unpaid' ? '클릭하여 완료 처리' : ''}\n+        >\n+          {record.enrollmentStatus === 'completed' ? '완료' : '미수'}\n+        </StatusBadge>\n+      )\n+    }\n+  ];\n+\n+  // 결과 카운트 정보 컴포넌트\n+  const resultCountInfo = (\n+    <>\n+      {showUnpaidOnly ? '미수 수강: ' : ''}{filteredEnrollments.length}건 \n+      (완료: {filteredEnrollments.filter(e => e.enrollmentStatus === 'completed').length}건, \n+      미수: {filteredEnrollments.filter(e => e.enrollmentStatus === 'unpaid').length}건)\n+      <br />\n+      <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+        기간: {getDateRangeDisplay()} | 전체: {courseEnrollments.length}건\n+      </span>\n+    </>\n+  );\n+\n+  if (loading) {\n+    return (\n+      <PageContainer>\n+        <DataTable\n+          title=\"수강 이력\"\n+          columns={columns}\n+          data={[]}\n+          loading={true}\n+        />\n+      </PageContainer>\n+    );\n+  }\n+\n+  return (\n+    <PageContainer>\n+      {/* 새로운 SearchArea 컴포넌트 사용 */}\n+      <SearchArea\n+        metaContent={\n+          <div style={{ display: 'flex', gap: '12px', alignItems: 'center', flexWrap: 'wrap' }}>\n+            <Button onClick={handleOpenRegistrationModal}>\n+              + 새 수강 등록\n+            </Button>\n+            <UnpaidFilter\n+              active={showUnpaidOnly}\n+              unpaidCount={unpaidMetaInfo.unpaidCourseCount}\n+              totalAmount={unpaidMetaInfo.totalUnpaidAmount}\n+              onClick={() => setShowUnpaidOnly(!showUnpaidOnly)}\n+            />\n+          </div>\n+        }\n+        selectedPeriod={selectedPeriod}\n+        onPeriodChange={setSelectedPeriod}\n+        customStartDate={customStartDate}\n+        customEndDate={customEndDate}\n+        onCustomStartDateChange={setCustomStartDate}\n+        onCustomEndDateChange={setCustomEndDate}\n+        dateRangeDisplay={getDateRangeDisplay()}\n+        searchValue={searchQuery}\n+        onSearchChange={setSearchQuery}\n+        onSearch={handleSearch}\n+        searchPlaceholder=\"회원명, 상품명, 프로그램명, 지점명, 코치명으로 검색...\"\n+        autoSearchOnDateChange={false}\n+      />\n+\n+      <DataTable\n+        title=\"수강 이력\"\n+        columns={columns}\n+        data={filteredEnrollments}\n+        loading={loading}\n+        emptyText=\"수강 이력이 없습니다\"\n+        emptyDescription=\"검색 조건을 변경하거나 새로운 수강생을 등록해보세요.\"\n+        resultCount={resultCountInfo}\n+        pagination={{\n+          enabled: true,\n+          pageSize: 5,\n+          pageSizeOptions: [5, 15, 30],\n+          showTotal: true\n+        }}\n+      />\n+\n+      {/* 새 수강 등록 모달 */}\n+      <CourseRegistrationModal\n+        isOpen={showRegistrationModal}\n+        onClose={handleCloseRegistrationModal}\n+        onSuccess={handleRegistrationSuccess}\n+      />\n+\n+      {/* 완료 처리 모달 */}\n+      {showCompleteModal && selectedEnrollment && (\n+        <Modal \n+          isOpen={showCompleteModal}\n+          onClose={handleCloseCompleteModal}\n+          width=\"min(95vw, 500px)\"\n+          header=\"미수금 완료 처리\"\n+          body={\n+            <ModalContent>\n+              <WarningText>\n+                ⚠️ 미수금을 완료 처리하시겠습니까?\n+              </WarningText>\n+\n+              <InfoRow>\n+                <InfoLabel>결제 방법:</InfoLabel>\n+                <div style={{ flex: 1, marginLeft: '12px' }}>\n+                  <CustomDropdown\n+                    value={selectedPaymentMethod}\n+                    onChange={setSelectedPaymentMethod}\n+                    options={paymentMethodOptions}\n+                    inModal={true}\n+                  />\n+                </div>\n+              </InfoRow>\n+              \n+              <InfoRow>\n+                <InfoLabel>회원명:</InfoLabel>\n+                <InfoValue>{selectedEnrollment.memberName}</InfoValue>\n+              </InfoRow>\n+              \n+              <InfoRow>\n+                <InfoLabel>상품명:</InfoLabel>\n+                <InfoValue>{selectedEnrollment.productName}</InfoValue>\n+              </InfoRow>\n+              \n+              <InfoRow>\n+                <InfoLabel>프로그램:</InfoLabel>\n+                <InfoValue>{selectedEnrollment.programName} ({selectedEnrollment.programType})</InfoValue>\n+              </InfoRow>\n+              \n+              <InfoRow>\n+                <InfoLabel>지점:</InfoLabel>\n+                <InfoValue>{selectedEnrollment.branchName}</InfoValue>\n+              </InfoRow>\n+              \n+              <InfoRow>\n+                <InfoLabel>담당코치:</InfoLabel>\n+                <InfoValue>{selectedEnrollment.coachName}</InfoValue>\n+              </InfoRow>\n+              \n+              <InfoRow>\n+                <InfoLabel>미수금액:</InfoLabel>\n+                <ModalUnpaidAmount>{selectedEnrollment.unpaidAmount?.toLocaleString() || 0}원</ModalUnpaidAmount>\n+              </InfoRow>\n+              \n+              <div style={{ \n+                padding: '12px', \n+                backgroundColor: '#f0f9ff', \n+                border: '1px solid #93c5fd', \n+                borderRadius: '8px',\n+                fontSize: '14px',\n+                color: '#1e40af',\n+                marginTop: '16px'\n+              }}>\n+                💡 완료 처리 시 해당 금액이 결제 내역에 자동으로 등록되며, 수강 상태가 '완료'로 변경됩니다.\n+              </div>\n+            </ModalContent>\n+          }\n+          footer={\n+            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '12px', width: '100%' }}>\n+              <Button variant=\"secondary\" onClick={handleCloseCompleteModal} disabled={isProcessing}>\n+                취소\n+              </Button>\n+              <Button onClick={handleCompletePayment} disabled={isProcessing}>\n+                {isProcessing ? '처리 중...' : '완료 처리'}\n+              </Button>\n+            </div>\n+          }\n+        />\n+      )}\n+\n+      {/* 새 수강 등록 모달 */}\n+      <CourseRegistrationModal\n+        isOpen={showRegistrationModal}\n+        onClose={handleCloseRegistrationModal}\n+        onSuccess={handleRegistrationSuccess}\n+      />\n+    </PageContainer>\n+  );\n+};\n+\n+export default CourseHistory;\n"
                },
                {
                    "date": 1761366606848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,15 +14,33 @@\n const PageContainer = styled.div`\n   width: 100%;\n `;\n \n-const StatusBadge = styled.span<{ $status: 'completed' | 'unpaid'; $clickable?: boolean }>`\n+const StatusBadge = styled.span<{ $status: 'active' | 'completed' | 'suspended' | 'cancelled' | 'unpaid'; $clickable?: boolean }>`\n   padding: 4px 8px;\n   border-radius: 12px;\n   font-size: 12px;\n   font-weight: 500;\n-  background: ${props => props.$status === 'completed' ? '#e7f5e7' : '#fff2f2'};\n-  color: ${props => props.$status === 'completed' ? '#2d5a2d' : '#8b1538'};\n+  background: ${props => {\n+    switch (props.$status) {\n+      case 'completed': return '#e7f5e7';\n+      case 'active': return '#e3f2fd';\n+      case 'suspended': return '#fff3e0';\n+      case 'cancelled': return '#fce4ec';\n+      case 'unpaid': return '#fff2f2';\n+      default: return '#f5f5f5';\n+    }\n+  }};\n+  color: ${props => {\n+    switch (props.$status) {\n+      case 'completed': return '#2d5a2d';\n+      case 'active': return '#1565c0';\n+      case 'suspended': return '#ef6c00';\n+      case 'cancelled': return '#c2185b';\n+      case 'unpaid': return '#8b1538';\n+      default: return '#424242';\n+    }\n+  }};\n   cursor: ${props => props.$clickable ? 'pointer' : 'default'};\n   transition: all 0.2s;\n   \n   &:hover {\n@@ -568,9 +586,18 @@\n           $clickable={record.enrollmentStatus === 'unpaid'}\n           onClick={record.enrollmentStatus === 'unpaid' ? () => handleUnpaidClick(record) : undefined}\n           title={record.enrollmentStatus === 'unpaid' ? '클릭하여 완료 처리' : ''}\n         >\n-          {record.enrollmentStatus === 'completed' ? '완료' : '미수'}\n+          {(() => {\n+            switch (record.enrollmentStatus) {\n+              case 'active': return '수강중';\n+              case 'completed': return '완료';\n+              case 'suspended': return '중단';\n+              case 'cancelled': return '취소';\n+              case 'unpaid': return '미수';\n+              default: return record.enrollmentStatus;\n+            }\n+          })()}\n         </StatusBadge>\n       )\n     }\n   ];\n@@ -746,747 +773,4 @@\n   );\n };\n \n export default CourseHistory;\n-import React, { useState, useEffect, useCallback } from 'react';\n-import styled from 'styled-components';\n-import { toast } from 'react-toastify';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager, type CourseEnrollment } from '../../../utils/indexedDB';\n-import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n-import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n-import Modal from '../../../components/Modal';\n-import CustomDropdown from '../../../components/CustomDropdown';\n-import DataTable, { type TableColumn } from '../../../components/DataTable';\n-import CourseRegistrationModal from './CourseRegistrationModal';\n-\n-const PageContainer = styled.div`\n-  width: 100%;\n-`;\n-\n-const StatusBadge = styled.span<{ $status: 'completed' | 'unpaid'; $clickable?: boolean }>`\n-  padding: 4px 8px;\n-  border-radius: 12px;\n-  font-size: 12px;\n-  font-weight: 500;\n-  background: ${props => props.$status === 'completed' ? '#e7f5e7' : '#fff2f2'};\n-  color: ${props => props.$status === 'completed' ? '#2d5a2d' : '#8b1538'};\n-  cursor: ${props => props.$clickable ? 'pointer' : 'default'};\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    opacity: ${props => props.$clickable ? 0.8 : 1};\n-    transform: ${props => props.$clickable ? 'translateY(-1px)' : 'none'};\n-  }\n-`;\n-\n-const ProgressInfo = styled.div`\n-  font-size: 12px;\n-  color: ${AppColors.onInput1};\n-  margin-top: 4px;\n-`;\n-\n-const PriceInfo = styled.div`\n-  text-align: right;\n-`;\n-\n-const PaidAmount = styled.div`\n-  color: ${AppColors.primary};\n-  font-weight: 600;\n-`;\n-\n-const UnpaidAmount = styled.div<{ $hasUnpaid: boolean }>`\n-  color: ${props => props.$hasUnpaid ? '#d32f2f' : AppColors.onInput1};\n-  font-size: 12px;\n-  margin-top: 2px;\n-`;\n-\n-const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n-  padding: 12px 18px;\n-  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n-  border-radius: 8px;\n-  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n-  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  font-weight: 600;\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    opacity: 0.9;\n-    transform: translateY(-1px);\n-  }\n-  \n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-    transform: none;\n-  }\n-`;\n-\n-const ModalContent = styled.div`\n-  text-align: left;\n-`;\n-\n-const InfoRow = styled.div`\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-  padding: 12px 0;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  \n-  &:last-child {\n-    border-bottom: none;\n-  }\n-`;\n-\n-const InfoLabel = styled.span`\n-  font-weight: 600;\n-  color: ${AppColors.onBackground};\n-`;\n-\n-const InfoValue = styled.span`\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const ModalUnpaidAmount = styled.span`\n-  color: #d32f2f;\n-  font-weight: 600;\n-  font-size: 16px;\n-`;\n-\n-const WarningText = styled.div`\n-  background: #fff3cd;\n-  border: 1px solid #ffeaa7;\n-  border-radius: 8px;\n-  padding: 12px;\n-  margin: 16px 0;\n-  color: #856404;\n-  font-size: 14px;\n-  text-align: center;\n-`;\n-\n-const CourseHistory: React.FC = () => {\n-  const [searchQuery, setSearchQuery] = useState<string>('');\n-  const [courseEnrollments, setCourseEnrollments] = useState<CourseEnrollment[]>([]);\n-  const [filteredEnrollments, setFilteredEnrollments] = useState<CourseEnrollment[]>([]);\n-  const [loading, setLoading] = useState<boolean>(true);\n-  \n-  // 기간 선택 관련 상태\n-  const [selectedPeriod, setSelectedPeriod] = useState<PeriodOption>('1month');\n-  const [customStartDate, setCustomStartDate] = useState<string>('');\n-  const [customEndDate, setCustomEndDate] = useState<string>('');\n-  \n-  // 미수 필터 관련 상태\n-  const [showUnpaidOnly, setShowUnpaidOnly] = useState<boolean>(false);\n-  const [unpaidMetaInfo, setUnpaidMetaInfo] = useState<{ unpaidCourseCount: number; totalUnpaidAmount: number }>({\n-    unpaidCourseCount: 0,\n-    totalUnpaidAmount: 0\n-  });\n-  \n-  // 완료 처리 모달 관련 상태\n-  const [showCompleteModal, setShowCompleteModal] = useState<boolean>(false);\n-  const [selectedEnrollment, setSelectedEnrollment] = useState<CourseEnrollment | null>(null);\n-  const [isProcessing, setIsProcessing] = useState<boolean>(false);\n-  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>('card');\n-\n-  // 새 수강 등록 모달 관련 상태\n-  const [showRegistrationModal, setShowRegistrationModal] = useState<boolean>(false);\n-\n-  // 미수 메타정보 로드\n-  const loadUnpaidMetaInfo = useCallback(async () => {\n-    try {\n-      const allEnrollments = await dbManager.getAllCourseEnrollments();\n-      const unpaidEnrollments = allEnrollments.filter(e => e.enrollmentStatus === 'unpaid');\n-      const unpaidCourseCount = unpaidEnrollments.length;\n-      const totalUnpaidAmount = unpaidEnrollments.reduce((sum, e) => sum + (e.unpaidAmount || 0), 0);\n-      \n-      setUnpaidMetaInfo({ unpaidCourseCount, totalUnpaidAmount });\n-    } catch (error) {\n-      console.error('미수 메타정보 로드 실패:', error);\n-    }\n-  }, []);\n-\n-  // 기간별 검색 범위 계산\n-  const getDateRange = useCallback(() => {\n-    const today = new Date();\n-    const startDate = new Date();\n-    \n-    switch (selectedPeriod) {\n-      case '1month':\n-        startDate.setMonth(today.getMonth() - 1);\n-        return { start: startDate, end: today };\n-      case '3month':\n-        startDate.setMonth(today.getMonth() - 3);\n-        return { start: startDate, end: today };\n-      case '6month':\n-        startDate.setMonth(today.getMonth() - 6);\n-        return { start: startDate, end: today };\n-      case 'custom':\n-        if (customStartDate && customEndDate) {\n-          return { \n-            start: new Date(customStartDate), \n-            end: new Date(customEndDate) \n-          };\n-        }\n-        // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n-        startDate.setMonth(today.getMonth() - 1);\n-        return { start: startDate, end: today };\n-      default:\n-        startDate.setMonth(today.getMonth() - 1);\n-        return { start: startDate, end: today };\n-    }\n-  }, [selectedPeriod, customStartDate, customEndDate]);\n-\n-  // 날짜 범위 표시 문자열 생성\n-  const getDateRangeDisplay = useCallback(() => {\n-    const range = getDateRange();\n-    const formatDate = (date: Date) => {\n-      return date.toLocaleDateString('ko-KR', {\n-        year: 'numeric',\n-        month: 'short',\n-        day: 'numeric'\n-      });\n-    };\n-    return `${formatDate(range.start)} ~ ${formatDate(range.end)}`;\n-  }, [getDateRange]);\n-\n-  const loadCourseEnrollments = useCallback(async (period?: PeriodOption, startDate?: string, endDate?: string) => {\n-    try {\n-      setLoading(true);\n-      console.log('수강 데이터 로딩 시작...');\n-      \n-      // 미수 메타정보 로드\n-      await loadUnpaidMetaInfo();\n-      \n-      const allEnrollments = await dbManager.getAllCourseEnrollments();\n-      console.log('전체 수강 이력 수:', allEnrollments.length);\n-      \n-      // 기간별 필터링 (등록일 기준) - 매개변수가 있으면 사용, 없으면 현재 상태 사용\n-      const currentPeriod = period ?? selectedPeriod;\n-      const currentStartDate = startDate ?? customStartDate;\n-      const currentEndDate = endDate ?? customEndDate;\n-      \n-      let dateRange: { start: Date; end: Date };\n-      const today = new Date();\n-      const rangeStartDate = new Date();\n-      \n-      switch (currentPeriod) {\n-        case '1month':\n-          rangeStartDate.setMonth(today.getMonth() - 1);\n-          dateRange = { start: rangeStartDate, end: today };\n-          break;\n-        case '3month':\n-          rangeStartDate.setMonth(today.getMonth() - 3);\n-          dateRange = { start: rangeStartDate, end: today };\n-          break;\n-        case '6month':\n-          rangeStartDate.setMonth(today.getMonth() - 6);\n-          dateRange = { start: rangeStartDate, end: today };\n-          break;\n-        case 'custom':\n-          if (currentStartDate && currentEndDate) {\n-            dateRange = { \n-              start: new Date(currentStartDate), \n-              end: new Date(currentEndDate) \n-            };\n-          } else {\n-            // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n-            rangeStartDate.setMonth(today.getMonth() - 1);\n-            dateRange = { start: rangeStartDate, end: today };\n-          }\n-          break;\n-        default:\n-          rangeStartDate.setMonth(today.getMonth() - 1);\n-          dateRange = { start: rangeStartDate, end: today };\n-      }\n-      \n-      const filteredByDate = allEnrollments.filter(enrollment => {\n-        const enrollmentDate = new Date(enrollment.createdAt);\n-        return enrollmentDate >= dateRange.start && enrollmentDate <= dateRange.end;\n-      });\n-      \n-      console.log(`${currentPeriod} 기간 내 수강 이력:`, filteredByDate.length);\n-      \n-      setCourseEnrollments(filteredByDate);\n-      setFilteredEnrollments(filteredByDate);\n-    } catch (error) {\n-      console.error('수강 데이터 로드 실패:', error);\n-    } finally {\n-      setLoading(false);\n-    }\n-  }, [loadUnpaidMetaInfo, selectedPeriod, customStartDate, customEndDate]);\n-\n-  // 컴포넌트 마운트 시 초기 데이터 로드 (1개월 기준)\n-  useEffect(() => {\n-    const initializeData = async () => {\n-      await loadCourseEnrollments();\n-    };\n-    initializeData();\n-  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n-\n-  // 필터 적용 함수 (데이터 로드와 분리)\n-  const applyFilters = useCallback(() => {\n-    let filtered = courseEnrollments;\n-    \n-    // 미수 필터 적용\n-    if (showUnpaidOnly) {\n-      filtered = filtered.filter(enrollment => enrollment.enrollmentStatus === 'unpaid');\n-    }\n-    \n-    // 텍스트 검색\n-    if (searchQuery.trim()) {\n-      const query = searchQuery.toLowerCase().trim();\n-      filtered = filtered.filter(enrollment =>\n-        enrollment.memberName.toLowerCase().includes(query) ||\n-        enrollment.productName.toLowerCase().includes(query) ||\n-        enrollment.programName.toLowerCase().includes(query) ||\n-        enrollment.branchName.toLowerCase().includes(query) ||\n-        enrollment.coachName.toLowerCase().includes(query)\n-      );\n-    }\n-    \n-    setFilteredEnrollments(filtered);\n-  }, [courseEnrollments, showUnpaidOnly, searchQuery]);\n-\n-  // 데이터나 필터 조건이 변경될 때마다 필터 적용\n-  useEffect(() => {\n-    applyFilters();\n-  }, [applyFilters]);\n-\n-  const handleSearch = async () => {\n-    // 현재 선택된 조건으로 데이터를 불러옵니다\n-    await loadCourseEnrollments(selectedPeriod, customStartDate, customEndDate);\n-  };\n-\n-  // 새 수강 등록 모달 열기\n-  const handleOpenRegistrationModal = () => {\n-    setShowRegistrationModal(true);\n-  };\n-\n-  // 새 수강 등록 모달 닫기\n-  const handleCloseRegistrationModal = () => {\n-    setShowRegistrationModal(false);\n-  };\n-\n-  // 새 수강 등록 성공 처리\n-  const handleRegistrationSuccess = async () => {\n-    toast.success('새 수강이 성공적으로 등록되었습니다.');\n-    // 데이터 새로고침\n-    await loadCourseEnrollments();\n-    // 현재 검색 조건으로 다시 필터링\n-    setTimeout(() => {\n-      handleSearch();\n-    }, 100);\n-  };\n-\n-  // 미수 상태 클릭 처리\n-  const handleUnpaidClick = (enrollment: CourseEnrollment) => {\n-    setSelectedEnrollment(enrollment);\n-    setSelectedPaymentMethod('card'); // 기본값을 카드로 설정\n-    setShowCompleteModal(true);\n-  };\n-\n-  // 완료 처리 확인\n-  const handleCompletePayment = async () => {\n-    if (!selectedEnrollment) return;\n-\n-    try {\n-      setIsProcessing(true);\n-\n-      // 1. 수강 이력의 상태를 'completed'로 변경하고 미수금액을 0으로 설정\n-      const updatedEnrollment: CourseEnrollment = {\n-        ...selectedEnrollment,\n-        enrollmentStatus: 'completed',\n-        paidAmount: selectedEnrollment.productPrice, // 상품 전체 금액으로 설정\n-        unpaidAmount: 0\n-      };\n-\n-      await dbManager.updateCourseEnrollment(selectedEnrollment.id, updatedEnrollment);\n-\n-      // 2. 결제 데이터 생성 및 저장\n-      const paymentData = {\n-        memberId: selectedEnrollment.memberId,\n-        memberName: selectedEnrollment.memberName,\n-        branchId: selectedEnrollment.branchId,\n-        branchName: selectedEnrollment.branchName,\n-        coach: selectedEnrollment.coach,\n-        coachName: selectedEnrollment.coachName,\n-        paymentMethod: selectedPaymentMethod, // 사용자가 선택한 결제 방법 사용\n-        paymentStatus: 'completed' as const, // 완료 상태로 설정\n-        totalAmount: selectedEnrollment.unpaidAmount || 0, // 이번에 받는 금액\n-        paidAmount: selectedEnrollment.unpaidAmount || 0, // 이번에 받는 금액\n-        unpaidAmount: 0, // 완료 처리이므로 0\n-        paymentDate: new Date(),\n-        // 수강/자산 구분 및 연결 정보 추가\n-        paymentType: 'course' as const, // 'course' | 'asset' | 'other'\n-        relatedCourseId: selectedEnrollment.id, // 수강 이력 ID로 연결\n-        relatedAssetId: null, // 자산 관련 결제가 아니므로 null\n-        products: [{\n-          id: selectedEnrollment.productId,\n-          name: selectedEnrollment.productName,\n-          price: selectedEnrollment.unpaidAmount || 0, // 이번에 받는 금액\n-          quantity: 1,\n-          programId: selectedEnrollment.programId,\n-          programName: selectedEnrollment.programName,\n-          programType: selectedEnrollment.programType\n-        }],\n-        memo: `미수금 완료 처리 - ${selectedEnrollment.productName} (수강 ID: ${selectedEnrollment.id})`\n-      };\n-\n-      await dbManager.addPayment(paymentData);\n-\n-      // 결제 방법별 메시지 표시\n-      const paymentMethodLabels: { [key: string]: string } = {\n-        'card': '카드',\n-        'cash': '현금',\n-        'transfer': '계좌이체'\n-      };\n-      const paymentMethodLabel = paymentMethodLabels[selectedPaymentMethod] || '카드';\n-      \n-      toast.success(`미수금이 성공적으로 완료 처리되었습니다. (결제방법: ${paymentMethodLabel})`);\n-      \n-      // 3. 데이터 새로고침\n-      await loadCourseEnrollments();\n-      \n-      // 4. 현재 검색 조건으로 다시 필터링\n-      setTimeout(() => {\n-        handleSearch();\n-      }, 100);\n-      \n-      // 5. 모달 닫기\n-      setShowCompleteModal(false);\n-      setSelectedEnrollment(null);\n-      \n-    } catch (error) {\n-      console.error('완료 처리 실패:', error);\n-      toast.error('완료 처리 중 오류가 발생했습니다.');\n-    } finally {\n-      setIsProcessing(false);\n-    }\n-  };\n-\n-  // 모달 닫기\n-  const handleCloseCompleteModal = () => {\n-    setShowCompleteModal(false);\n-    setSelectedEnrollment(null);\n-    setSelectedPaymentMethod('card'); // 기본값으로 리셋\n-  };\n-\n-  const formatDate = (date: Date | null | undefined) => {\n-    return date ? new Date(date).toLocaleDateString() : '-';\n-  };\n-\n-  const getProgressInfo = (enrollment: CourseEnrollment) => {\n-    if (enrollment.programType === '횟수제' && enrollment.sessionCount) {\n-      const remaining = enrollment.sessionCount - (enrollment.completedSessions || 0);\n-      return `${remaining}/${enrollment.sessionCount}회 남음`;\n-    } else if (enrollment.programType === '기간제' && enrollment.endDate) {\n-      const today = new Date();\n-      const endDate = new Date(enrollment.endDate);\n-      const timeDiff = endDate.getTime() - today.getTime();\n-      const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n-      \n-      if (daysDiff > 0) {\n-        return `${daysDiff}일 남음`;\n-      } else if (daysDiff === 0) {\n-        return '오늘 종료';\n-      } else {\n-        return `${Math.abs(daysDiff)}일 경과`;\n-      }\n-    }\n-    return '진행률 미설정';\n-  };\n-\n-  // 결제 방법 옵션\n-  const paymentMethodOptions = [\n-    { value: 'card', label: '카드' },\n-    { value: 'cash', label: '현금' },\n-    { value: 'transfer', label: '계좌이체' }\n-  ];\n-\n-  // 테이블 컬럼 정의\n-  const columns: TableColumn<CourseEnrollment>[] = [\n-    {\n-      key: 'memberName',\n-      title: '회원명',\n-      width: '120px'\n-    },\n-    {\n-      key: 'productName',\n-      title: '상품명',\n-      width: '180px',\n-      render: (value, record) => (\n-        <div>\n-          <div>{record.productName}</div>\n-          <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-            {record.productPrice.toLocaleString()}원\n-          </div>\n-        </div>\n-      )\n-    },\n-    {\n-      key: 'programName',\n-      title: '프로그램',\n-      width: '150px',\n-      render: (value, record) => (\n-        <div>\n-          <div>{record.programName}</div>\n-          <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-            {record.programType}\n-          </div>\n-        </div>\n-      )\n-    },\n-    {\n-      key: 'progress',\n-      title: '진행상황',\n-      width: '120px',\n-      render: (value, record) => (\n-        <ProgressInfo>\n-          {getProgressInfo(record)}\n-        </ProgressInfo>\n-      )\n-    },\n-    {\n-      key: 'branchName',\n-      title: '지점',\n-      width: '100px'\n-    },\n-    {\n-      key: 'coachName',\n-      title: '담당코치',\n-      width: '100px'\n-    },\n-    {\n-      key: 'payment',\n-      title: '결제정보',\n-      width: '140px',\n-      align: 'right' as const,\n-      render: (value, record) => (\n-        <PriceInfo>\n-          <PaidAmount>\n-            {record.paidAmount.toLocaleString()}원\n-          </PaidAmount>\n-          <UnpaidAmount $hasUnpaid={record.unpaidAmount > 0}>\n-            {record.unpaidAmount > 0 ? \n-              `미수: ${record.unpaidAmount.toLocaleString()}원` : \n-              '완납'\n-            }\n-          </UnpaidAmount>\n-        </PriceInfo>\n-      )\n-    },\n-    {\n-      key: 'connection',\n-      title: '연결정보',\n-      width: '140px',\n-      render: (value, record) => (\n-        <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-          <div style={{ color: AppColors.primary, fontWeight: '600' }}>\n-            수강 ID: {record.id.slice(-8)}\n-          </div>\n-          <div style={{ marginTop: '2px', fontSize: '11px' }}>\n-            결제 이력에서 확인 가능\n-          </div>\n-        </div>\n-      )\n-    },\n-    {\n-      key: 'period',\n-      title: '수강기간',\n-      width: '140px',\n-      render: (value, record) => (\n-        <div>\n-          <div>{formatDate(record.startDate)}</div>\n-          {record.endDate && (\n-            <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-              ~ {formatDate(record.endDate)}\n-            </div>\n-          )}\n-        </div>\n-      )\n-    },\n-    {\n-      key: 'enrollmentStatus',\n-      title: '상태',\n-      width: '80px',\n-      align: 'center' as const,\n-      render: (value, record) => (\n-        <StatusBadge \n-          $status={record.enrollmentStatus}\n-          $clickable={record.enrollmentStatus === 'unpaid'}\n-          onClick={record.enrollmentStatus === 'unpaid' ? () => handleUnpaidClick(record) : undefined}\n-          title={record.enrollmentStatus === 'unpaid' ? '클릭하여 완료 처리' : ''}\n-        >\n-          {record.enrollmentStatus === 'completed' ? '완료' : '미수'}\n-        </StatusBadge>\n-      )\n-    }\n-  ];\n-\n-  // 결과 카운트 정보 컴포넌트\n-  const resultCountInfo = (\n-    <>\n-      {showUnpaidOnly ? '미수 수강: ' : ''}{filteredEnrollments.length}건 \n-      (완료: {filteredEnrollments.filter(e => e.enrollmentStatus === 'completed').length}건, \n-      미수: {filteredEnrollments.filter(e => e.enrollmentStatus === 'unpaid').length}건)\n-      <br />\n-      <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-        기간: {getDateRangeDisplay()} | 전체: {courseEnrollments.length}건\n-      </span>\n-    </>\n-  );\n-\n-  if (loading) {\n-    return (\n-      <PageContainer>\n-        <DataTable\n-          title=\"수강 이력\"\n-          columns={columns}\n-          data={[]}\n-          loading={true}\n-        />\n-      </PageContainer>\n-    );\n-  }\n-\n-  return (\n-    <PageContainer>\n-      {/* 새로운 SearchArea 컴포넌트 사용 */}\n-      <SearchArea\n-        metaContent={\n-          <div style={{ display: 'flex', gap: '12px', alignItems: 'center', flexWrap: 'wrap' }}>\n-            <Button onClick={handleOpenRegistrationModal}>\n-              + 새 수강 등록\n-            </Button>\n-            <UnpaidFilter\n-              active={showUnpaidOnly}\n-              unpaidCount={unpaidMetaInfo.unpaidCourseCount}\n-              totalAmount={unpaidMetaInfo.totalUnpaidAmount}\n-              onClick={() => setShowUnpaidOnly(!showUnpaidOnly)}\n-            />\n-          </div>\n-        }\n-        selectedPeriod={selectedPeriod}\n-        onPeriodChange={setSelectedPeriod}\n-        customStartDate={customStartDate}\n-        customEndDate={customEndDate}\n-        onCustomStartDateChange={setCustomStartDate}\n-        onCustomEndDateChange={setCustomEndDate}\n-        dateRangeDisplay={getDateRangeDisplay()}\n-        searchValue={searchQuery}\n-        onSearchChange={setSearchQuery}\n-        onSearch={handleSearch}\n-        searchPlaceholder=\"회원명, 상품명, 프로그램명, 지점명, 코치명으로 검색...\"\n-        autoSearchOnDateChange={false}\n-      />\n-\n-      <DataTable\n-        title=\"수강 이력\"\n-        columns={columns}\n-        data={filteredEnrollments}\n-        loading={loading}\n-        emptyText=\"수강 이력이 없습니다\"\n-        emptyDescription=\"검색 조건을 변경하거나 새로운 수강생을 등록해보세요.\"\n-        resultCount={resultCountInfo}\n-        pagination={{\n-          enabled: true,\n-          pageSize: 5,\n-          pageSizeOptions: [5, 15, 30],\n-          showTotal: true\n-        }}\n-      />\n-\n-      {/* 새 수강 등록 모달 */}\n-      <CourseRegistrationModal\n-        isOpen={showRegistrationModal}\n-        onClose={handleCloseRegistrationModal}\n-        onSuccess={handleRegistrationSuccess}\n-      />\n-\n-      {/* 완료 처리 모달 */}\n-      {showCompleteModal && selectedEnrollment && (\n-        <Modal \n-          isOpen={showCompleteModal}\n-          onClose={handleCloseCompleteModal}\n-          width=\"min(95vw, 500px)\"\n-          header=\"미수금 완료 처리\"\n-          body={\n-            <ModalContent>\n-              <WarningText>\n-                ⚠️ 미수금을 완료 처리하시겠습니까?\n-              </WarningText>\n-\n-              <InfoRow>\n-                <InfoLabel>결제 방법:</InfoLabel>\n-                <div style={{ flex: 1, marginLeft: '12px' }}>\n-                  <CustomDropdown\n-                    value={selectedPaymentMethod}\n-                    onChange={setSelectedPaymentMethod}\n-                    options={paymentMethodOptions}\n-                    inModal={true}\n-                  />\n-                </div>\n-              </InfoRow>\n-              \n-              <InfoRow>\n-                <InfoLabel>회원명:</InfoLabel>\n-                <InfoValue>{selectedEnrollment.memberName}</InfoValue>\n-              </InfoRow>\n-              \n-              <InfoRow>\n-                <InfoLabel>상품명:</InfoLabel>\n-                <InfoValue>{selectedEnrollment.productName}</InfoValue>\n-              </InfoRow>\n-              \n-              <InfoRow>\n-                <InfoLabel>프로그램:</InfoLabel>\n-                <InfoValue>{selectedEnrollment.programName} ({selectedEnrollment.programType})</InfoValue>\n-              </InfoRow>\n-              \n-              <InfoRow>\n-                <InfoLabel>지점:</InfoLabel>\n-                <InfoValue>{selectedEnrollment.branchName}</InfoValue>\n-              </InfoRow>\n-              \n-              <InfoRow>\n-                <InfoLabel>담당코치:</InfoLabel>\n-                <InfoValue>{selectedEnrollment.coachName}</InfoValue>\n-              </InfoRow>\n-              \n-              <InfoRow>\n-                <InfoLabel>미수금액:</InfoLabel>\n-                <ModalUnpaidAmount>{selectedEnrollment.unpaidAmount?.toLocaleString() || 0}원</ModalUnpaidAmount>\n-              </InfoRow>\n-              \n-              <div style={{ \n-                padding: '12px', \n-                backgroundColor: '#f0f9ff', \n-                border: '1px solid #93c5fd', \n-                borderRadius: '8px',\n-                fontSize: '14px',\n-                color: '#1e40af',\n-                marginTop: '16px'\n-              }}>\n-                💡 완료 처리 시 해당 금액이 결제 내역에 자동으로 등록되며, 수강 상태가 '완료'로 변경됩니다.\n-              </div>\n-            </ModalContent>\n-          }\n-          footer={\n-            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '12px', width: '100%' }}>\n-              <Button variant=\"secondary\" onClick={handleCloseCompleteModal} disabled={isProcessing}>\n-                취소\n-              </Button>\n-              <Button onClick={handleCompletePayment} disabled={isProcessing}>\n-                {isProcessing ? '처리 중...' : '완료 처리'}\n-              </Button>\n-            </div>\n-          }\n-        />\n-      )}\n-    </PageContainer>\n-  );\n-};\n-\n-export default CourseHistory;\n"
                },
                {
                    "date": 1761367350416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,10 +296,18 @@\n       });\n       \n       console.log(`${currentPeriod} 기간 내 수강 이력:`, filteredByDate.length);\n       \n+      console.log('=== CourseHistory 최종 데이터 설정 ===');\n+      console.log('filteredByDate 개수:', filteredByDate.length);\n+      if (filteredByDate.length > 0) {\n+        console.log('첫 번째 수강 이력:', filteredByDate[0]);\n+      }\n+      \n       setCourseEnrollments(filteredByDate);\n       setFilteredEnrollments(filteredByDate);\n+      \n+      console.log('수강 이력 상태 업데이트 완료');\n     } catch (error) {\n       console.error('수강 데이터 로드 실패:', error);\n     } finally {\n       setLoading(false);\n"
                },
                {
                    "date": 1761369384242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -676,10 +676,10 @@\n         emptyDescription=\"검색 조건을 변경하거나 새로운 수강생을 등록해보세요.\"\n         resultCount={resultCountInfo}\n         pagination={{\n           enabled: true,\n-          pageSize: 5,\n-          pageSizeOptions: [5, 15, 30],\n+          pageSize: 15,\n+          pageSizeOptions: [15, 30, 100],\n           showTotal: true\n         }}\n       />\n \n"
                },
                {
                    "date": 1761369814921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,16 +296,21 @@\n       });\n       \n       console.log(`${currentPeriod} 기간 내 수강 이력:`, filteredByDate.length);\n       \n+      // 최근 등록순으로 정렬 (createdAt 내림차순)\n+      const sortedEnrollments = filteredByDate.sort((a, b) => \n+        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n+      );\n+      \n       console.log('=== CourseHistory 최종 데이터 설정 ===');\n-      console.log('filteredByDate 개수:', filteredByDate.length);\n-      if (filteredByDate.length > 0) {\n-        console.log('첫 번째 수강 이력:', filteredByDate[0]);\n+      console.log('sortedEnrollments 개수:', sortedEnrollments.length);\n+      if (sortedEnrollments.length > 0) {\n+        console.log('첫 번째 수강 이력:', sortedEnrollments[0]);\n       }\n       \n-      setCourseEnrollments(filteredByDate);\n-      setFilteredEnrollments(filteredByDate);\n+      setCourseEnrollments(sortedEnrollments);\n+      setFilteredEnrollments(sortedEnrollments);\n       \n       console.log('수강 이력 상태 업데이트 완료');\n     } catch (error) {\n       console.error('수강 데이터 로드 실패:', error);\n"
                },
                {
                    "date": 1761458892719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -500,9 +500,9 @@\n       render: (value, record) => (\n         <div>\n           <div>{record.productName}</div>\n           <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-            {record.productPrice.toLocaleString()}원\n+            ID: {record.productId.slice(-8)}\n           </div>\n         </div>\n       )\n     },\n@@ -519,8 +519,24 @@\n         </div>\n       )\n     },\n     {\n+      key: 'productPrice',\n+      title: '상품금액',\n+      width: '100px',\n+      align: 'right' as const,\n+      render: (value, record) => (\n+        <div style={{ \n+          textAlign: 'right',\n+          fontSize: '14px',\n+          fontWeight: '600',\n+          color: AppColors.onBackground\n+        }}>\n+          {record.productPrice.toLocaleString()}원\n+        </div>\n+      )\n+    },\n+    {\n       key: 'progress',\n       title: '진행상황',\n       width: '120px',\n       render: (value, record) => (\n@@ -546,16 +562,27 @@\n       align: 'right' as const,\n       render: (value, record) => (\n         <PriceInfo>\n           <PaidAmount>\n-            {record.paidAmount.toLocaleString()}원\n+            적용: {record.paidAmount.toLocaleString()}원\n           </PaidAmount>\n           <UnpaidAmount $hasUnpaid={record.unpaidAmount > 0}>\n             {record.unpaidAmount > 0 ? \n               `미수: ${record.unpaidAmount.toLocaleString()}원` : \n               '완납'\n             }\n           </UnpaidAmount>\n+          {record.productPrice !== record.paidAmount && record.unpaidAmount === 0 && (\n+            <div style={{ \n+              fontSize: '11px', \n+              color: record.paidAmount > record.productPrice ? '#dc3545' : '#28a745',\n+              marginTop: '2px'\n+            }}>\n+              {record.paidAmount > record.productPrice ? '추가수납' : '할인적용'}\n+              {record.paidAmount > record.productPrice ? '+' : ''}\n+              {(record.paidAmount - record.productPrice).toLocaleString()}원\n+            </div>\n+          )}\n         </PriceInfo>\n       )\n     },\n     {\n"
                },
                {
                    "date": 1761459201960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -562,25 +562,28 @@\n       align: 'right' as const,\n       render: (value, record) => (\n         <PriceInfo>\n           <PaidAmount>\n-            적용: {record.paidAmount.toLocaleString()}원\n+            적용: {record.appliedPrice.toLocaleString()}원\n           </PaidAmount>\n+          <div style={{ fontSize: '12px', color: AppColors.onInput1, marginTop: '2px' }}>\n+            수납: {record.paidAmount.toLocaleString()}원\n+          </div>\n           <UnpaidAmount $hasUnpaid={record.unpaidAmount > 0}>\n             {record.unpaidAmount > 0 ? \n               `미수: ${record.unpaidAmount.toLocaleString()}원` : \n               '완납'\n             }\n           </UnpaidAmount>\n-          {record.productPrice !== record.paidAmount && record.unpaidAmount === 0 && (\n+          {record.productPrice !== record.appliedPrice && (\n             <div style={{ \n               fontSize: '11px', \n-              color: record.paidAmount > record.productPrice ? '#dc3545' : '#28a745',\n+              color: record.appliedPrice > record.productPrice ? '#dc3545' : '#28a745',\n               marginTop: '2px'\n             }}>\n-              {record.paidAmount > record.productPrice ? '추가수납' : '할인적용'}\n-              {record.paidAmount > record.productPrice ? '+' : ''}\n-              {(record.paidAmount - record.productPrice).toLocaleString()}원\n+              {record.appliedPrice > record.productPrice ? '추가' : '할인'}\n+              {record.appliedPrice > record.productPrice ? '+' : ''}\n+              {(record.appliedPrice - record.productPrice).toLocaleString()}원\n             </div>\n           )}\n         </PriceInfo>\n       )\n"
                },
                {
                    "date": 1761459341689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -562,9 +562,9 @@\n       align: 'right' as const,\n       render: (value, record) => (\n         <PriceInfo>\n           <PaidAmount>\n-            적용: {record.appliedPrice.toLocaleString()}원\n+            적용: {(record.appliedPrice || record.paidAmount).toLocaleString()}원\n           </PaidAmount>\n           <div style={{ fontSize: '12px', color: AppColors.onInput1, marginTop: '2px' }}>\n             수납: {record.paidAmount.toLocaleString()}원\n           </div>\n@@ -573,9 +573,9 @@\n               `미수: ${record.unpaidAmount.toLocaleString()}원` : \n               '완납'\n             }\n           </UnpaidAmount>\n-          {record.productPrice !== record.appliedPrice && (\n+          {record.appliedPrice && record.productPrice !== record.appliedPrice && (\n             <div style={{ \n               fontSize: '11px', \n               color: record.appliedPrice > record.productPrice ? '#dc3545' : '#28a745',\n               marginTop: '2px'\n"
                }
            ],
            "date": 1760758580231,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\nimport { dbManager, type CourseEnrollment } from '../../../utils/indexedDB';\n\nconst PageContainer = styled.div`\n  width: 100%;\n`;\n\nconst SearchSection = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  padding: 24px;\n  margin-bottom: 24px;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n`;\n\nconst SearchRow = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: center;\n  margin-bottom: 16px;\n`;\n\nconst SearchInput = styled.input`\n  flex: 1;\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  outline: none;\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n  padding: 12px 18px;\n  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n  border-radius: 8px;\n  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    opacity: 0.9;\n    transform: translateY(-1px);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst FilterRow = styled.div<{ $visible: boolean }>`\n  display: ${props => props.$visible ? 'flex' : 'none'};\n  gap: 8px;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst FilterChip = styled.button<{ $active: boolean }>`\n  padding: 6px 12px;\n  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n  border-radius: 20px;\n  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n  font-size: ${AppTextStyles.label2.fontSize};\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    border-color: ${AppColors.primary};\n    background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n  }\n`;\n\nconst ResultsSection = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n`;\n\nconst ResultsHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px 24px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n`;\n\nconst ResultsTitle = styled.h2`\n  font-size: ${AppTextStyles.title3.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onBackground};\n  margin: 0;\n`;\n\nconst ResultsCount = styled.span`\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onInput1};\n`;\n\nconst TableContainer = styled.div`\n  overflow-x: auto;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nconst TableHeader = styled.thead`\n  background: #f8f9fa;\n`;\n\nconst TableRow = styled.tr`\n  border-bottom: 1px solid ${AppColors.borderLight};\n  \n  &:hover {\n    background: #f8f9fa;\n  }\n`;\n\nconst TableHeaderCell = styled.th`\n  padding: 12px 16px;\n  text-align: left;\n  font-size: ${AppTextStyles.label2.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onInput1};\n  border-bottom: 1px solid ${AppColors.borderLight};\n`;\n\nconst TableCell = styled.td`\n  padding: 12px 16px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onBackground};\n  vertical-align: middle;\n`;\n\nconst StatusBadge = styled.span<{ $status: 'completed' | 'unpaid' }>`\n  padding: 4px 8px;\n  border-radius: 12px;\n  font-size: 12px;\n  font-weight: 500;\n  background: ${props => props.$status === 'completed' ? '#e7f5e7' : '#fff2f2'};\n  color: ${props => props.$status === 'completed' ? '#2d5a2d' : '#8b1538'};\n`;\n\nconst ProgressInfo = styled.div`\n  font-size: 12px;\n  color: ${AppColors.onInput1};\n  margin-top: 4px;\n`;\n\nconst PriceInfo = styled.div`\n  text-align: right;\n`;\n\nconst PaidAmount = styled.div`\n  color: ${AppColors.primary};\n  font-weight: 600;\n`;\n\nconst UnpaidAmount = styled.div<{ $hasUnpaid: boolean }>`\n  color: ${props => props.$hasUnpaid ? '#d32f2f' : AppColors.onInput1};\n  font-size: 12px;\n  margin-top: 2px;\n`;\n\nconst EmptyState = styled.div`\n  padding: 60px 24px;\n  text-align: center;\n  color: ${AppColors.onInput1};\n`;\n\nconst LoadingState = styled.div`\n  padding: 60px 24px;\n  text-align: center;\n  color: ${AppColors.onInput1};\n`;\n\nconst CourseHistory: React.FC = () => {\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [courseEnrollments, setCourseEnrollments] = useState<CourseEnrollment[]>([]);\n  const [filteredEnrollments, setFilteredEnrollments] = useState<CourseEnrollment[]>([]);\n  const [showFilters, setShowFilters] = useState<boolean>(false);\n  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    loadCourseEnrollments();\n  }, []);\n\n  const loadCourseEnrollments = async () => {\n    try {\n      setLoading(true);\n      const enrollments = await dbManager.getAllCourseEnrollments();\n      setCourseEnrollments(enrollments);\n      setFilteredEnrollments(enrollments);\n    } catch (error) {\n      console.error('수강 데이터 로드 실패:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSearch = async () => {\n    await loadCourseEnrollments();\n    \n    let filtered = courseEnrollments;\n    \n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase().trim();\n      filtered = filtered.filter(enrollment =>\n        enrollment.memberName.toLowerCase().includes(query) ||\n        enrollment.productName.toLowerCase().includes(query) ||\n        enrollment.programName.toLowerCase().includes(query) ||\n        enrollment.branchName.toLowerCase().includes(query) ||\n        enrollment.coachName.toLowerCase().includes(query)\n      );\n    }\n    \n    if (activeFilters.length > 0) {\n      filtered = filtered.filter(enrollment => {\n        return activeFilters.some(filter => {\n          switch (filter) {\n            case '완료':\n              return enrollment.enrollmentStatus === 'completed';\n            case '미수':\n              return enrollment.enrollmentStatus === 'unpaid';\n            case '횟수제':\n              return enrollment.programType === '횟수제';\n            case '기간제':\n              return enrollment.programType === '기간제';\n            default:\n              return enrollment.branchName === filter;\n          }\n        });\n      });\n    }\n    \n    setFilteredEnrollments(filtered);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const toggleFilter = (filter: string) => {\n    setActiveFilters(prev => \n      prev.includes(filter) \n        ? prev.filter(f => f !== filter)\n        : [...prev, filter]\n    );\n  };\n\n  const clearFilters = () => {\n    setActiveFilters([]);\n    setSearchQuery('');\n    setFilteredEnrollments(courseEnrollments);\n  };\n\n  const formatDate = (date: Date | null | undefined) => {\n    return date ? new Date(date).toLocaleDateString() : '-';\n  };\n\n  const getProgressInfo = (enrollment: CourseEnrollment) => {\n    if (enrollment.programType === '횟수제' && enrollment.sessionCount) {\n      const remaining = enrollment.sessionCount - (enrollment.completedSessions || 0);\n      return `${remaining}/${enrollment.sessionCount}회 남음`;\n    } else if (enrollment.programType === '기간제' && enrollment.endDate) {\n      const today = new Date();\n      const endDate = new Date(enrollment.endDate);\n      const timeDiff = endDate.getTime() - today.getTime();\n      const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n      \n      if (daysDiff > 0) {\n        return `${daysDiff}일 남음`;\n      } else if (daysDiff === 0) {\n        return '오늘 종료';\n      } else {\n        return `${Math.abs(daysDiff)}일 경과`;\n      }\n    }\n    return '진행률 미설정';\n  };\n\n  const branchNames = Array.from(new Set(courseEnrollments.map(e => e.branchName))).filter(Boolean);\n  const filterOptions = ['완료', '미수', '횟수제', '기간제', ...branchNames];\n\n  if (loading) {\n    return (\n      <PageContainer>\n        <LoadingState>\n          <h3>수강 데이터를 불러오는 중...</h3>\n        </LoadingState>\n      </PageContainer>\n    );\n  }\n\n  return (\n    <PageContainer>\n      <SearchSection>\n        <SearchRow>\n          <SearchInput\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"회원명, 상품명, 프로그램명, 지점명, 코치명으로 검색...\"\n          />\n          <Button onClick={handleSearch}>검색</Button>\n          <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n            필터\n          </Button>\n          <Button variant=\"secondary\" onClick={loadCourseEnrollments}>\n            새로고침\n          </Button>\n          {(activeFilters.length > 0 || searchQuery) && (\n            <Button variant=\"secondary\" onClick={clearFilters}>\n              초기화\n            </Button>\n          )}\n        </SearchRow>\n        \n        <FilterRow $visible={showFilters}>\n          {filterOptions.map(filter => (\n            <FilterChip\n              key={filter}\n              $active={activeFilters.includes(filter)}\n              onClick={() => toggleFilter(filter)}\n            >\n              {filter}\n            </FilterChip>\n          ))}\n        </FilterRow>\n      </SearchSection>\n\n      <ResultsSection>\n        <ResultsHeader>\n          <ResultsTitle>수강 이력</ResultsTitle>\n          <ResultsCount>총 {filteredEnrollments.length}건</ResultsCount>\n        </ResultsHeader>\n\n        {filteredEnrollments.length > 0 ? (\n          <TableContainer>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHeaderCell>회원명</TableHeaderCell>\n                  <TableHeaderCell>상품명</TableHeaderCell>\n                  <TableHeaderCell>프로그램</TableHeaderCell>\n                  <TableHeaderCell>진행상황</TableHeaderCell>\n                  <TableHeaderCell>지점</TableHeaderCell>\n                  <TableHeaderCell>담당코치</TableHeaderCell>\n                  <TableHeaderCell>결제정보</TableHeaderCell>\n                  <TableHeaderCell>수강기간</TableHeaderCell>\n                  <TableHeaderCell>상태</TableHeaderCell>\n                </TableRow>\n              </TableHeader>\n              <tbody>\n                {filteredEnrollments.map(enrollment => (\n                  <TableRow key={enrollment.id}>\n                    <TableCell>{enrollment.memberName}</TableCell>\n                    <TableCell>\n                      <div>{enrollment.productName}</div>\n                      <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n                        {enrollment.productPrice.toLocaleString()}원\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>{enrollment.programName}</div>\n                      <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n                        {enrollment.programType}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <ProgressInfo>\n                        {getProgressInfo(enrollment)}\n                      </ProgressInfo>\n                    </TableCell>\n                    <TableCell>{enrollment.branchName}</TableCell>\n                    <TableCell>{enrollment.coachName}</TableCell>\n                    <TableCell>\n                      <PriceInfo>\n                        <PaidAmount>\n                          {enrollment.paidAmount.toLocaleString()}원\n                        </PaidAmount>\n                        <UnpaidAmount $hasUnpaid={enrollment.unpaidAmount > 0}>\n                          {enrollment.unpaidAmount > 0 ? \n                            `미수: ${enrollment.unpaidAmount.toLocaleString()}원` : \n                            '완납'\n                          }\n                        </UnpaidAmount>\n                      </PriceInfo>\n                    </TableCell>\n                    <TableCell>\n                      <div>{formatDate(enrollment.startDate)}</div>\n                      {enrollment.endDate && (\n                        <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n                          ~ {formatDate(enrollment.endDate)}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <StatusBadge $status={enrollment.enrollmentStatus}>\n                        {enrollment.enrollmentStatus === 'completed' ? '완료' : '미수'}\n                      </StatusBadge>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </tbody>\n            </Table>\n          </TableContainer>\n        ) : (\n          <EmptyState>\n            <h3>수강 이력이 없습니다</h3>\n            <p>검색 조건을 변경하거나 새로운 수강생을 등록해보세요.</p>\n          </EmptyState>\n        )}\n      </ResultsSection>\n    </PageContainer>\n  );\n};\n\nexport default CourseHistory;\n"
        }
    ]
}