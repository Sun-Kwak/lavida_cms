{
    "sourceFile": "src/pages/CMS/Member/MemberPointHistory.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1760757227935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761129777926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,123 +3,21 @@\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, Point } from '../../../utils/indexedDB';\n+import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n+import CustomDropdown from '../../../components/CustomDropdown';\n \n // 스타일 컴포넌트들\n-const Container = styled.div`\n-  padding: 20px;\n-  background-color: #f8f9fa;\n-  min-height: 100vh;\n+const PageContainer = styled.div`\n+  width: 100%;\n `;\n \n-const PageHeader = styled.div`\n-  background: white;\n-  padding: 24px;\n-  border-radius: 8px;\n-  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n-  margin-bottom: 20px;\n-`;\n-\n-const PageTitle = styled.h1`\n-  ${AppTextStyles.headline1}\n-  color: ${AppColors.onSurface};\n-  margin: 0 0 8px 0;\n-`;\n-\n-const PageDescription = styled.p`\n-  ${AppTextStyles.body1}\n-  color: ${AppColors.secondary};\n-  margin: 0;\n-`;\n-\n-const SearchSection = styled.div`\n-  background: white;\n-  padding: 20px;\n-  border-radius: 8px;\n-  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n-  margin-bottom: 20px;\n-`;\n-\n-const SearchForm = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  align-items: end;\n-  flex-wrap: wrap;\n-`;\n-\n-const FormField = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  min-width: 200px;\n-`;\n-\n-const Label = styled.label`\n-  ${AppTextStyles.body2}\n-  color: ${AppColors.onSurface};\n-  margin-bottom: 6px;\n-  font-weight: 500;\n-`;\n-\n-const Input = styled.input`\n-  padding: 8px 12px;\n-  border: 1px solid #ddd;\n-  border-radius: 4px;\n-  font-size: 14px;\n-  \n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-  }\n-`;\n-\n-const Select = styled.select`\n-  padding: 8px 12px;\n-  border: 1px solid #ddd;\n-  border-radius: 4px;\n-  font-size: 14px;\n-  background: white;\n-  \n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-  }\n-`;\n-\n-const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n-  padding: 8px 16px;\n-  border: none;\n-  border-radius: 4px;\n-  font-size: 14px;\n-  font-weight: 500;\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  ${props => props.variant === 'secondary' ? `\n-    background: #6c757d;\n-    color: white;\n-    &:hover {\n-      background: #5a6268;\n-    }\n-  ` : `\n-    background: ${AppColors.primary};\n-    color: white;\n-    &:hover {\n-      background: ${AppColors.secondary};\n-    }\n-  `}\n-  \n-  &:disabled {\n-    background: #ccc;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n const StatsSection = styled.div`\n   display: grid;\n   grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n   gap: 16px;\n-  margin-bottom: 20px;\n+  margin-bottom: 24px;\n `;\n \n const StatCard = styled.div`\n   background: white;\n@@ -140,24 +38,33 @@\n   margin: 0;\n `;\n \n const ResultsSection = styled.div`\n-  background: white;\n-  border-radius: 8px;\n-  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n+  background: ${AppColors.surface};\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 16px;\n+  overflow: hidden;\n+  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n `;\n \n const ResultsHeader = styled.div`\n-  padding: 16px 20px;\n-  border-bottom: 1px solid #eee;\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n+  padding: 20px 24px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n `;\n \n+const ResultsTitle = styled.h2`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onBackground};\n+  margin: 0;\n+`;\n+\n const ResultsCount = styled.span`\n-  ${AppTextStyles.body2}\n-  color: ${AppColors.secondary};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onInput1};\n `;\n \n const TableContainer = styled.div`\n   overflow-x: auto;\n@@ -168,39 +75,42 @@\n   border-collapse: collapse;\n `;\n \n const TableHeader = styled.thead`\n-  background-color: #f8f9fa;\n+  background: #f8f9fa;\n `;\n \n const TableRow = styled.tr`\n-  &:nth-child(even) {\n-    background-color: #f8f9fa;\n-  }\n+  border-bottom: 1px solid ${AppColors.borderLight};\n   \n   &:hover {\n-    background-color: #e9ecef;\n+    background: #f8f9fa;\n   }\n `;\n \n const TableHeaderCell = styled.th`\n-  padding: 12px;\n+  padding: 12px 16px;\n   text-align: left;\n-  ${AppTextStyles.body2}\n+  font-size: ${AppTextStyles.label2.fontSize};\n   font-weight: 600;\n-  color: ${AppColors.onSurface};\n-  border-bottom: 2px solid #dee2e6;\n+  color: ${AppColors.onInput1};\n+  border-bottom: 1px solid ${AppColors.borderLight};\n   white-space: nowrap;\n `;\n \n const TableCell = styled.td`\n-  padding: 12px;\n-  ${AppTextStyles.body2}\n-  color: ${AppColors.secondary};\n-  border-bottom: 1px solid #dee2e6;\n+  padding: 12px 16px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onBackground};\n+  border-bottom: 1px solid ${AppColors.borderLight};\n   white-space: nowrap;\n `;\n \n+const AmountCell = styled(TableCell)<{ isPositive?: boolean }>`\n+  font-weight: 600;\n+  color: ${props => props.isPositive ? '#28a745' : '#dc3545'};\n+`;\n+\n const Badge = styled.span<{ type: 'earned' | 'used' | 'expired' | 'adjusted' }>`\n   padding: 4px 8px;\n   border-radius: 12px;\n   font-size: 12px;\n@@ -236,17 +146,18 @@\n     }\n   }}\n `;\n \n-const AmountCell = styled(TableCell)<{ isPositive?: boolean }>`\n-  font-weight: 600;\n-  color: ${props => props.isPositive ? '#28a745' : '#dc3545'};\n+const EmptyState = styled.div`\n+  padding: 60px 24px;\n+  text-align: center;\n+  color: ${AppColors.onInput1};\n `;\n \n-const EmptyMessage = styled.div`\n-  padding: 40px;\n+const LoadingState = styled.div`\n+  padding: 60px 24px;\n   text-align: center;\n-  color: ${AppColors.secondary};\n+  color: ${AppColors.onInput1};\n `;\n \n // 포인트 타입 한글 매핑\n const pointTypeLabels: Record<Point['type'], string> = {\n@@ -255,17 +166,8 @@\n   expired: '만료',\n   adjusted: '조정'\n };\n \n-interface SearchFilters {\n-  memberName: string;\n-  memberId: string;\n-  pointType: Point['type'] | 'all';\n-  startDate: string;\n-  endDate: string;\n-  source: string;\n-}\n-\n interface MemberStats {\n   totalEarned: number;\n   totalUsed: number;\n   totalExpired: number;\n@@ -276,25 +178,70 @@\n const MemberPointHistory: React.FC = () => {\n   const [points, setPoints] = useState<Point[]>([]);\n   const [filteredPoints, setFilteredPoints] = useState<Point[]>([]);\n   const [loading, setLoading] = useState(false);\n+  const [searchQuery, setSearchQuery] = useState<string>('');\n+  \n+  // 기간 선택 관련 상태\n+  const [selectedPeriod, setSelectedPeriod] = useState<PeriodOption>('1month');\n+  const [customStartDate, setCustomStartDate] = useState<string>('');\n+  const [customEndDate, setCustomEndDate] = useState<string>('');\n+  \n+  // 추가 필터 상태\n+  const [pointTypeFilter, setPointTypeFilter] = useState<Point['type'] | 'all'>('all');\n+  \n   const [stats, setStats] = useState<MemberStats>({\n     totalEarned: 0,\n     totalUsed: 0,\n     totalExpired: 0,\n     currentBalance: 0,\n     transactionCount: 0\n   });\n \n-  const [filters, setFilters] = useState<SearchFilters>({\n-    memberName: '',\n-    memberId: '',\n-    pointType: 'all',\n-    startDate: '',\n-    endDate: '',\n-    source: ''\n-  });\n+  // 기간별 검색 범위 계산\n+  const getDateRange = useCallback(() => {\n+    const today = new Date();\n+    const startDate = new Date();\n+    \n+    switch (selectedPeriod) {\n+      case '1month':\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+      case '3month':\n+        startDate.setMonth(today.getMonth() - 3);\n+        return { start: startDate, end: today };\n+      case '6month':\n+        startDate.setMonth(today.getMonth() - 6);\n+        return { start: startDate, end: today };\n+      case 'custom':\n+        if (customStartDate && customEndDate) {\n+          return { \n+            start: new Date(customStartDate), \n+            end: new Date(customEndDate) \n+          };\n+        }\n+        // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+      default:\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+    }\n+  }, [selectedPeriod, customStartDate, customEndDate]);\n \n+  // 날짜 범위 표시 문자열 생성\n+  const getDateRangeDisplay = useCallback(() => {\n+    const range = getDateRange();\n+    const formatDate = (date: Date) => {\n+      return date.toLocaleDateString('ko-KR', {\n+        year: 'numeric',\n+        month: 'short',\n+        day: 'numeric'\n+      });\n+    };\n+    return `${formatDate(range.start)} ~ ${formatDate(range.end)}`;\n+  }, [getDateRange]);\n+\n   const calculateStats = useCallback((pointsList: Point[]) => {\n     const totalEarned = pointsList\n       .filter(p => p.type === 'earned')\n       .reduce((sum, p) => sum + p.amount, 0);\n@@ -321,111 +268,117 @@\n       transactionCount: pointsList.length\n     });\n   }, []);\n \n-  const loadPointHistory = useCallback(async () => {\n+  const loadPointHistory = useCallback(async (period?: PeriodOption, startDate?: string, endDate?: string) => {\n     try {\n       setLoading(true);\n+      console.log('포인트 이력 데이터 로딩 시작...');\n+      \n       const allPoints = await dbManager.getAllPoints();\n+      console.log('전체 포인트 이력 수:', allPoints.length);\n       \n+      // 기간별 필터링 (생성일 기준) - 매개변수가 있으면 사용, 없으면 현재 상태 사용\n+      const currentPeriod = period ?? selectedPeriod;\n+      const currentStartDate = startDate ?? customStartDate;\n+      const currentEndDate = endDate ?? customEndDate;\n+      \n+      let dateRange: { start: Date; end: Date };\n+      const today = new Date();\n+      const rangeStartDate = new Date();\n+      \n+      switch (currentPeriod) {\n+        case '1month':\n+          rangeStartDate.setMonth(today.getMonth() - 1);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case '3month':\n+          rangeStartDate.setMonth(today.getMonth() - 3);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case '6month':\n+          rangeStartDate.setMonth(today.getMonth() - 6);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case 'custom':\n+          if (currentStartDate && currentEndDate) {\n+            dateRange = { \n+              start: new Date(currentStartDate), \n+              end: new Date(currentEndDate) \n+            };\n+          } else {\n+            // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+            rangeStartDate.setMonth(today.getMonth() - 1);\n+            dateRange = { start: rangeStartDate, end: today };\n+          }\n+          break;\n+        default:\n+          rangeStartDate.setMonth(today.getMonth() - 1);\n+          dateRange = { start: rangeStartDate, end: today };\n+      }\n+      \n+      const filteredByDate = allPoints.filter(point => {\n+        const pointDate = new Date(point.createdAt);\n+        return pointDate >= dateRange.start && pointDate <= dateRange.end;\n+      });\n+      \n       // 최신 순으로 정렬\n-      const sortedPoints = allPoints.sort((a, b) => \n+      const sortedPoints = filteredByDate.sort((a, b) => \n         new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n       );\n       \n+      console.log(`${currentPeriod} 기간 내 포인트 이력:`, sortedPoints.length);\n+      \n       setPoints(sortedPoints);\n       calculateStats(sortedPoints);\n     } catch (error) {\n       console.error('포인트 이력 로드 실패:', error);\n       toast.error('포인트 이력을 불러오는데 실패했습니다.');\n     } finally {\n       setLoading(false);\n     }\n-  }, [calculateStats]);\n+  }, [selectedPeriod, customStartDate, customEndDate, calculateStats]);\n \n   const applyFilters = useCallback(() => {\n     let filtered = [...points];\n \n-    // 회원명 필터\n-    if (filters.memberName.trim()) {\n-      const searchTerm = filters.memberName.toLowerCase().trim();\n+    // 회원명, 회원ID, 출처 검색 (통합 검색)\n+    if (searchQuery.trim()) {\n+      const searchTerm = searchQuery.toLowerCase().trim();\n       filtered = filtered.filter(point => \n-        point.memberName.toLowerCase().includes(searchTerm)\n+        point.memberName.toLowerCase().includes(searchTerm) ||\n+        point.memberId.includes(searchTerm) ||\n+        point.source.toLowerCase().includes(searchTerm)\n       );\n     }\n \n-    // 회원ID 필터\n-    if (filters.memberId.trim()) {\n-      filtered = filtered.filter(point => \n-        point.memberId.includes(filters.memberId.trim())\n-      );\n-    }\n-\n     // 포인트 타입 필터\n-    if (filters.pointType !== 'all') {\n-      filtered = filtered.filter(point => point.type === filters.pointType);\n+    if (pointTypeFilter !== 'all') {\n+      filtered = filtered.filter(point => point.type === pointTypeFilter);\n     }\n \n-    // 날짜 범위 필터\n-    if (filters.startDate) {\n-      const startDate = new Date(filters.startDate);\n-      filtered = filtered.filter(point => \n-        new Date(point.createdAt) >= startDate\n-      );\n-    }\n-\n-    if (filters.endDate) {\n-      const endDate = new Date(filters.endDate);\n-      endDate.setHours(23, 59, 59, 999); // 하루 끝까지 포함\n-      filtered = filtered.filter(point => \n-        new Date(point.createdAt) <= endDate\n-      );\n-    }\n-\n-    // 출처 필터\n-    if (filters.source.trim()) {\n-      const searchTerm = filters.source.toLowerCase().trim();\n-      filtered = filtered.filter(point => \n-        point.source.toLowerCase().includes(searchTerm)\n-      );\n-    }\n-\n     setFilteredPoints(filtered);\n     calculateStats(filtered);\n-  }, [points, filters, calculateStats]);\n+  }, [points, searchQuery, pointTypeFilter, calculateStats]);\n \n-  // 컴포넌트 마운트 시 데이터 로드\n+  // 컴포넌트 마운트 시 초기 데이터 로드 (1개월 기준)\n   useEffect(() => {\n-    loadPointHistory();\n-  }, [loadPointHistory]);\n+    const initializeData = async () => {\n+      await loadPointHistory();\n+    };\n+    initializeData();\n+  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n \n   // 필터 변경 시 필터링 적용\n   useEffect(() => {\n     applyFilters();\n   }, [applyFilters]);\n \n-  const handleFilterChange = (field: keyof SearchFilters, value: string) => {\n-    setFilters(prev => ({\n-      ...prev,\n-      [field]: value\n-    }));\n+  const handleSearch = async () => {\n+    // 현재 선택된 조건으로 데이터를 불러옵니다\n+    await loadPointHistory(selectedPeriod, customStartDate, customEndDate);\n   };\n \n-  const handleSearch = () => {\n-    applyFilters();\n-  };\n-\n-  const handleReset = () => {\n-    setFilters({\n-      memberName: '',\n-      memberId: '',\n-      pointType: 'all',\n-      startDate: '',\n-      endDate: '',\n-      source: ''\n-    });\n-  };\n-\n   const formatAmount = (amount: number) => {\n     return amount.toLocaleString();\n   };\n \n@@ -438,87 +391,54 @@\n       minute: '2-digit'\n     });\n   };\n \n+  if (loading) {\n+    return (\n+      <PageContainer>\n+        <LoadingState>\n+          <h3>포인트 데이터를 불러오는 중...</h3>\n+        </LoadingState>\n+      </PageContainer>\n+    );\n+  }\n+\n   return (\n-    <Container>\n-      <PageHeader>\n-        <PageTitle>포인트 이력</PageTitle>\n-        <PageDescription>\n-          회원들의 포인트 적립, 사용, 만료 내역을 조회하고 관리합니다.\n-        </PageDescription>\n-      </PageHeader>\n-\n-      <SearchSection>\n-        <SearchForm>\n-          <FormField>\n-            <Label>회원명</Label>\n-            <Input\n-              type=\"text\"\n-              value={filters.memberName}\n-              onChange={(e) => handleFilterChange('memberName', e.target.value)}\n-              placeholder=\"회원명을 입력하세요\"\n-            />\n-          </FormField>\n-\n-          <FormField>\n-            <Label>회원ID</Label>\n-            <Input\n-              type=\"text\"\n-              value={filters.memberId}\n-              onChange={(e) => handleFilterChange('memberId', e.target.value)}\n-              placeholder=\"회원ID를 입력하세요\"\n-            />\n-          </FormField>\n-\n-          <FormField>\n-            <Label>포인트 타입</Label>\n-            <Select\n-              value={filters.pointType}\n-              onChange={(e) => handleFilterChange('pointType', e.target.value)}\n-            >\n-              <option value=\"all\">전체</option>\n-              <option value=\"earned\">적립</option>\n-              <option value=\"used\">사용</option>\n-              <option value=\"expired\">만료</option>\n-              <option value=\"adjusted\">조정</option>\n-            </Select>\n-          </FormField>\n-\n-          <FormField>\n-            <Label>시작일</Label>\n-            <Input\n-              type=\"date\"\n-              value={filters.startDate}\n-              onChange={(e) => handleFilterChange('startDate', e.target.value)}\n-            />\n-          </FormField>\n-\n-          <FormField>\n-            <Label>종료일</Label>\n-            <Input\n-              type=\"date\"\n-              value={filters.endDate}\n-              onChange={(e) => handleFilterChange('endDate', e.target.value)}\n-            />\n-          </FormField>\n-\n-          <FormField>\n-            <Label>출처</Label>\n-            <Input\n-              type=\"text\"\n-              value={filters.source}\n-              onChange={(e) => handleFilterChange('source', e.target.value)}\n-              placeholder=\"포인트 발생 출처\"\n-            />\n-          </FormField>\n-\n-          <div style={{ display: 'flex', gap: '8px' }}>\n-            <Button onClick={handleSearch}>검색</Button>\n-            <Button variant=\"secondary\" onClick={handleReset}>초기화</Button>\n+    <PageContainer>\n+      {/* 새로운 SearchArea 컴포넌트 사용 */}\n+      <SearchArea\n+        metaContent={\n+          <div style={{ display: 'flex', gap: '12px', alignItems: 'center', flexWrap: 'wrap' }}>\n+            <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\n+              <label style={{ fontSize: '14px', fontWeight: '500' }}>포인트 타입:</label>\n+              <CustomDropdown\n+                value={pointTypeFilter}\n+                onChange={(value) => setPointTypeFilter(value as Point['type'] | 'all')}\n+                options={[\n+                  { value: 'all', label: '전체' },\n+                  { value: 'earned', label: '적립' },\n+                  { value: 'used', label: '사용' },\n+                  { value: 'expired', label: '만료' },\n+                  { value: 'adjusted', label: '조정' }\n+                ]}\n+                inModal={false}\n+              />\n+            </div>\n           </div>\n-        </SearchForm>\n-      </SearchSection>\n+        }\n+        selectedPeriod={selectedPeriod}\n+        onPeriodChange={setSelectedPeriod}\n+        customStartDate={customStartDate}\n+        customEndDate={customEndDate}\n+        onCustomStartDateChange={setCustomStartDate}\n+        onCustomEndDateChange={setCustomEndDate}\n+        dateRangeDisplay={getDateRangeDisplay()}\n+        searchValue={searchQuery}\n+        onSearchChange={setSearchQuery}\n+        onSearch={handleSearch}\n+        searchPlaceholder=\"회원명, 회원ID, 출처로 검색...\"\n+        autoSearchOnDateChange={false}\n+      />\n \n       <StatsSection>\n         <StatCard>\n           <StatLabel>총 적립</StatLabel>\n@@ -543,17 +463,19 @@\n       </StatsSection>\n \n       <ResultsSection>\n         <ResultsHeader>\n-          <h3 style={{ margin: 0 }}>포인트 이력</h3>\n+          <ResultsTitle>포인트 이력</ResultsTitle>\n           <ResultsCount>\n             총 {filteredPoints.length.toLocaleString()}건 (전체: {points.length.toLocaleString()}건)\n+            <br />\n+            <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+              기간: {getDateRangeDisplay()}\n+            </span>\n           </ResultsCount>\n         </ResultsHeader>\n \n-        {loading ? (\n-          <EmptyMessage>데이터를 불러오는 중...</EmptyMessage>\n-        ) : filteredPoints.length > 0 ? (\n+        {filteredPoints.length > 0 ? (\n           <TableContainer>\n             <Table>\n               <TableHeader>\n                 <TableRow>\n@@ -591,14 +513,15 @@\n               </tbody>\n             </Table>\n           </TableContainer>\n         ) : (\n-          <EmptyMessage>\n-            조건에 맞는 포인트 이력이 없습니다.\n-          </EmptyMessage>\n+          <EmptyState>\n+            <h3>검색 결과가 없습니다</h3>\n+            <p>다른 검색어를 입력하거나 필터를 조정해보세요.</p>\n+          </EmptyState>\n         )}\n       </ResultsSection>\n-    </Container>\n+    </PageContainer>\n   );\n };\n \n export default MemberPointHistory;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761129922596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, Point } from '../../../utils/indexedDB';\n import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n-import CustomDropdown from '../../../components/CustomDropdown';\n \n // 스타일 컴포넌트들\n const PageContainer = styled.div`\n   width: 100%;\n@@ -18,13 +17,24 @@\n   gap: 16px;\n   margin-bottom: 24px;\n `;\n \n-const StatCard = styled.div`\n-  background: white;\n+const StatCard = styled.div<{ $isActive?: boolean; $isClickable?: boolean }>`\n+  background: ${props => props.$isActive ? '#f0f7ff' : 'white'};\n+  border: ${props => props.$isActive ? `2px solid ${AppColors.primary}` : '1px solid #e1e5e9'};\n   padding: 20px;\n   border-radius: 8px;\n   box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n+  cursor: ${props => props.$isClickable ? 'pointer' : 'default'};\n+  transition: all 0.2s ease;\n+  \n+  ${props => props.$isClickable && `\n+    &:hover {\n+      transform: translateY(-2px);\n+      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n+      border-color: ${AppColors.primary};\n+    }\n+  `}\n `;\n \n const StatLabel = styled.div`\n   ${AppTextStyles.body2}\n@@ -186,9 +196,9 @@\n   const [customStartDate, setCustomStartDate] = useState<string>('');\n   const [customEndDate, setCustomEndDate] = useState<string>('');\n   \n   // 추가 필터 상태\n-  const [pointTypeFilter, setPointTypeFilter] = useState<Point['type'] | 'all'>('all');\n+  const [selectedStatCard, setSelectedStatCard] = useState<'all' | 'earned' | 'used' | 'expired' | 'balance'>('all');\n   \n   const [stats, setStats] = useState<MemberStats>({\n     totalEarned: 0,\n     totalUsed: 0,\n@@ -350,16 +360,33 @@\n         point.source.toLowerCase().includes(searchTerm)\n       );\n     }\n \n-    // 포인트 타입 필터\n-    if (pointTypeFilter !== 'all') {\n-      filtered = filtered.filter(point => point.type === pointTypeFilter);\n+    // 선택된 카드에 따른 필터링\n+    if (selectedStatCard !== 'all') {\n+      switch (selectedStatCard) {\n+        case 'earned':\n+          filtered = filtered.filter(point => point.type === 'earned');\n+          break;\n+        case 'used':\n+          filtered = filtered.filter(point => point.type === 'used');\n+          break;\n+        case 'expired':\n+          filtered = filtered.filter(point => point.type === 'expired');\n+          break;\n+        case 'balance':\n+          // 현재 잔액에 영향을 주는 포인트들 (만료되지 않은 것들)\n+          const now = new Date();\n+          filtered = filtered.filter(point => \n+            !point.expiryDate || new Date(point.expiryDate) > now\n+          );\n+          break;\n+      }\n     }\n \n     setFilteredPoints(filtered);\n     calculateStats(filtered);\n-  }, [points, searchQuery, pointTypeFilter, calculateStats]);\n+  }, [points, searchQuery, selectedStatCard, calculateStats]);\n \n   // 컴포넌트 마운트 시 초기 데이터 로드 (1개월 기준)\n   useEffect(() => {\n     const initializeData = async () => {\n@@ -377,8 +404,18 @@\n     // 현재 선택된 조건으로 데이터를 불러옵니다\n     await loadPointHistory(selectedPeriod, customStartDate, customEndDate);\n   };\n \n+  // StatCard 클릭 핸들러\n+  const handleStatCardClick = (cardType: 'all' | 'earned' | 'used' | 'expired' | 'balance') => {\n+    if (selectedStatCard === cardType) {\n+      // 이미 선택된 카드를 다시 클릭하면 전체로 돌아감\n+      setSelectedStatCard('all');\n+    } else {\n+      setSelectedStatCard(cardType);\n+    }\n+  };\n+\n   const formatAmount = (amount: number) => {\n     return amount.toLocaleString();\n   };\n \n@@ -405,27 +442,8 @@\n   return (\n     <PageContainer>\n       {/* 새로운 SearchArea 컴포넌트 사용 */}\n       <SearchArea\n-        metaContent={\n-          <div style={{ display: 'flex', gap: '12px', alignItems: 'center', flexWrap: 'wrap' }}>\n-            <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\n-              <label style={{ fontSize: '14px', fontWeight: '500' }}>포인트 타입:</label>\n-              <CustomDropdown\n-                value={pointTypeFilter}\n-                onChange={(value) => setPointTypeFilter(value as Point['type'] | 'all')}\n-                options={[\n-                  { value: 'all', label: '전체' },\n-                  { value: 'earned', label: '적립' },\n-                  { value: 'used', label: '사용' },\n-                  { value: 'expired', label: '만료' },\n-                  { value: 'adjusted', label: '조정' }\n-                ]}\n-                inModal={false}\n-              />\n-            </div>\n-          </div>\n-        }\n         selectedPeriod={selectedPeriod}\n         onPeriodChange={setSelectedPeriod}\n         customStartDate={customStartDate}\n         customEndDate={customEndDate}\n@@ -439,38 +457,74 @@\n         autoSearchOnDateChange={false}\n       />\n \n       <StatsSection>\n-        <StatCard>\n+        <StatCard \n+          $isActive={selectedStatCard === 'earned'} \n+          $isClickable={true}\n+          onClick={() => handleStatCardClick('earned')}\n+        >\n           <StatLabel>총 적립</StatLabel>\n           <StatValue color=\"#28a745\">+{formatAmount(stats.totalEarned)}원</StatValue>\n         </StatCard>\n-        <StatCard>\n+        <StatCard \n+          $isActive={selectedStatCard === 'used'} \n+          $isClickable={true}\n+          onClick={() => handleStatCardClick('used')}\n+        >\n           <StatLabel>총 사용</StatLabel>\n           <StatValue color=\"#dc3545\">-{formatAmount(stats.totalUsed)}원</StatValue>\n         </StatCard>\n-        <StatCard>\n+        <StatCard \n+          $isActive={selectedStatCard === 'expired'} \n+          $isClickable={true}\n+          onClick={() => handleStatCardClick('expired')}\n+        >\n           <StatLabel>총 만료</StatLabel>\n           <StatValue color=\"#ffc107\">-{formatAmount(stats.totalExpired)}원</StatValue>\n         </StatCard>\n-        <StatCard>\n+        <StatCard \n+          $isActive={selectedStatCard === 'balance'} \n+          $isClickable={true}\n+          onClick={() => handleStatCardClick('balance')}\n+        >\n           <StatLabel>현재 잔액</StatLabel>\n           <StatValue color=\"#007bff\">{formatAmount(stats.currentBalance)}원</StatValue>\n         </StatCard>\n-        <StatCard>\n+        <StatCard $isActive={false} $isClickable={false}>\n           <StatLabel>총 거래</StatLabel>\n           <StatValue>{stats.transactionCount.toLocaleString()}건</StatValue>\n         </StatCard>\n       </StatsSection>\n \n       <ResultsSection>\n         <ResultsHeader>\n-          <ResultsTitle>포인트 이력</ResultsTitle>\n+          <ResultsTitle>\n+            포인트 이력\n+            {selectedStatCard !== 'all' && (\n+              <span style={{ \n+                fontSize: '14px', \n+                fontWeight: 'normal', \n+                color: AppColors.primary,\n+                marginLeft: '8px'\n+              }}>\n+                ({selectedStatCard === 'earned' ? '적립만' : \n+                  selectedStatCard === 'used' ? '사용만' : \n+                  selectedStatCard === 'expired' ? '만료만' : \n+                  selectedStatCard === 'balance' ? '유효 포인트만' : ''} 표시)\n+              </span>\n+            )}\n+          </ResultsTitle>\n           <ResultsCount>\n             총 {filteredPoints.length.toLocaleString()}건 (전체: {points.length.toLocaleString()}건)\n             <br />\n             <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n               기간: {getDateRangeDisplay()}\n+              {selectedStatCard !== 'all' && (\n+                <span style={{ color: AppColors.primary, fontWeight: '500', marginLeft: '8px' }}>\n+                  • 필터 활성\n+                </span>\n+              )}\n             </span>\n           </ResultsCount>\n         </ResultsHeader>\n \n"
                },
                {
                    "date": 1761131222207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, Point } from '../../../utils/indexedDB';\n import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n+import DataTable, { type TableColumn } from '../../../components/DataTable';\n \n // 스타일 컴포넌트들\n const PageContainer = styled.div`\n   width: 100%;\n@@ -47,77 +48,10 @@\n   color: ${props => props.color || AppColors.onSurface};\n   margin: 0;\n `;\n \n-const ResultsSection = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  overflow: hidden;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const ResultsHeader = styled.div`\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-  padding: 20px 24px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const ResultsTitle = styled.h2`\n-  font-size: ${AppTextStyles.title3.fontSize};\n+const AmountCell = styled.span<{ isPositive?: boolean }>`\n   font-weight: 600;\n-  color: ${AppColors.onBackground};\n-  margin: 0;\n-`;\n-\n-const ResultsCount = styled.span`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const TableContainer = styled.div`\n-  overflow-x: auto;\n-`;\n-\n-const Table = styled.table`\n-  width: 100%;\n-  border-collapse: collapse;\n-`;\n-\n-const TableHeader = styled.thead`\n-  background: #f8f9fa;\n-`;\n-\n-const TableRow = styled.tr`\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  \n-  &:hover {\n-    background: #f8f9fa;\n-  }\n-`;\n-\n-const TableHeaderCell = styled.th`\n-  padding: 12px 16px;\n-  text-align: left;\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onInput1};\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  white-space: nowrap;\n-`;\n-\n-const TableCell = styled.td`\n-  padding: 12px 16px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onBackground};\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  white-space: nowrap;\n-`;\n-\n-const AmountCell = styled(TableCell)<{ isPositive?: boolean }>`\n-  font-weight: 600;\n   color: ${props => props.isPositive ? '#28a745' : '#dc3545'};\n `;\n \n const Badge = styled.span<{ type: 'earned' | 'used' | 'expired' | 'adjusted' }>`\n@@ -156,20 +90,8 @@\n     }\n   }}\n `;\n \n-const EmptyState = styled.div`\n-  padding: 60px 24px;\n-  text-align: center;\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const LoadingState = styled.div`\n-  padding: 60px 24px;\n-  text-align: center;\n-  color: ${AppColors.onInput1};\n-`;\n-\n // 포인트 타입 한글 매핑\n const pointTypeLabels: Record<Point['type'], string> = {\n   earned: '적립',\n   used: '사용',\n@@ -404,8 +326,84 @@\n     // 현재 선택된 조건으로 데이터를 불러옵니다\n     await loadPointHistory(selectedPeriod, customStartDate, customEndDate);\n   };\n \n+  // 테이블 컬럼 정의\n+  const columns: TableColumn<Point>[] = [\n+    {\n+      key: 'createdAt',\n+      title: '날짜/시간',\n+      width: '150px',\n+      render: (value, record) => formatDate(record.createdAt)\n+    },\n+    {\n+      key: 'memberName',\n+      title: '회원명',\n+      width: '120px'\n+    },\n+    {\n+      key: 'memberId',\n+      title: '회원ID',\n+      width: '100px'\n+    },\n+    {\n+      key: 'type',\n+      title: '타입',\n+      width: '80px',\n+      align: 'center' as const,\n+      render: (value, record) => (\n+        <Badge type={record.type}>\n+          {pointTypeLabels[record.type]}\n+        </Badge>\n+      )\n+    },\n+    {\n+      key: 'amount',\n+      title: '금액',\n+      width: '120px',\n+      align: 'right' as const,\n+      render: (value, record) => (\n+        <AmountCell isPositive={record.amount > 0}>\n+          {record.amount > 0 ? '+' : ''}{formatAmount(record.amount)}원\n+        </AmountCell>\n+      )\n+    },\n+    {\n+      key: 'source',\n+      title: '출처',\n+      width: '150px'\n+    },\n+    {\n+      key: 'description',\n+      title: '설명',\n+      width: '200px',\n+      render: (value, record) => record.description || '-'\n+    },\n+    {\n+      key: 'expiryDate',\n+      title: '만료일',\n+      width: '150px',\n+      render: (value, record) => \n+        record.expiryDate ? formatDate(record.expiryDate) : '-'\n+    }\n+  ];\n+\n+  // 결과 카운트 정보 컴포넌트\n+  const resultCountInfo = (\n+    <>\n+      총 {filteredPoints.length.toLocaleString()}건 (전체: {points.length.toLocaleString()}건)\n+      <br />\n+      <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+        기간: {getDateRangeDisplay()}\n+        {selectedStatCard !== 'all' && (\n+          <span style={{ color: AppColors.primary, fontWeight: '500', marginLeft: '8px' }}>\n+            • 필터 활성\n+          </span>\n+        )}\n+      </span>\n+    </>\n+  );\n+\n   // StatCard 클릭 핸들러\n   const handleStatCardClick = (cardType: 'all' | 'earned' | 'used' | 'expired' | 'balance') => {\n     if (selectedStatCard === cardType) {\n       // 이미 선택된 카드를 다시 클릭하면 전체로 돌아감\n@@ -431,11 +429,14 @@\n \n   if (loading) {\n     return (\n       <PageContainer>\n-        <LoadingState>\n-          <h3>포인트 데이터를 불러오는 중...</h3>\n-        </LoadingState>\n+        <DataTable\n+          title=\"포인트 이력\"\n+          columns={columns}\n+          data={[]}\n+          loading={true}\n+        />\n       </PageContainer>\n     );\n   }\n \n@@ -495,11 +496,11 @@\n           <StatValue>{stats.transactionCount.toLocaleString()}건</StatValue>\n         </StatCard>\n       </StatsSection>\n \n-      <ResultsSection>\n-        <ResultsHeader>\n-          <ResultsTitle>\n+      <DataTable\n+        title={\n+          <div>\n             포인트 이력\n             {selectedStatCard !== 'all' && (\n               <span style={{ \n                 fontSize: '14px', \n@@ -512,69 +513,17 @@\n                   selectedStatCard === 'expired' ? '만료만' : \n                   selectedStatCard === 'balance' ? '유효 포인트만' : ''} 표시)\n               </span>\n             )}\n-          </ResultsTitle>\n-          <ResultsCount>\n-            총 {filteredPoints.length.toLocaleString()}건 (전체: {points.length.toLocaleString()}건)\n-            <br />\n-            <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-              기간: {getDateRangeDisplay()}\n-              {selectedStatCard !== 'all' && (\n-                <span style={{ color: AppColors.primary, fontWeight: '500', marginLeft: '8px' }}>\n-                  • 필터 활성\n-                </span>\n-              )}\n-            </span>\n-          </ResultsCount>\n-        </ResultsHeader>\n-\n-        {filteredPoints.length > 0 ? (\n-          <TableContainer>\n-            <Table>\n-              <TableHeader>\n-                <TableRow>\n-                  <TableHeaderCell>날짜/시간</TableHeaderCell>\n-                  <TableHeaderCell>회원명</TableHeaderCell>\n-                  <TableHeaderCell>회원ID</TableHeaderCell>\n-                  <TableHeaderCell>타입</TableHeaderCell>\n-                  <TableHeaderCell>금액</TableHeaderCell>\n-                  <TableHeaderCell>출처</TableHeaderCell>\n-                  <TableHeaderCell>설명</TableHeaderCell>\n-                  <TableHeaderCell>만료일</TableHeaderCell>\n-                </TableRow>\n-              </TableHeader>\n-              <tbody>\n-                {filteredPoints.map(point => (\n-                  <TableRow key={point.id}>\n-                    <TableCell>{formatDate(point.createdAt)}</TableCell>\n-                    <TableCell>{point.memberName}</TableCell>\n-                    <TableCell>{point.memberId}</TableCell>\n-                    <TableCell>\n-                      <Badge type={point.type}>\n-                        {pointTypeLabels[point.type]}\n-                      </Badge>\n-                    </TableCell>\n-                    <AmountCell isPositive={point.amount > 0}>\n-                      {point.amount > 0 ? '+' : ''}{formatAmount(point.amount)}원\n-                    </AmountCell>\n-                    <TableCell>{point.source}</TableCell>\n-                    <TableCell>{point.description || '-'}</TableCell>\n-                    <TableCell>\n-                      {point.expiryDate ? formatDate(point.expiryDate) : '-'}\n-                    </TableCell>\n-                  </TableRow>\n-                ))}\n-              </tbody>\n-            </Table>\n-          </TableContainer>\n-        ) : (\n-          <EmptyState>\n-            <h3>검색 결과가 없습니다</h3>\n-            <p>다른 검색어를 입력하거나 필터를 조정해보세요.</p>\n-          </EmptyState>\n-        )}\n-      </ResultsSection>\n+          </div>\n+        }\n+        columns={columns}\n+        data={filteredPoints}\n+        loading={loading}\n+        emptyText=\"검색 결과가 없습니다\"\n+        emptyDescription=\"다른 검색어를 입력하거나 필터를 조정해보세요.\"\n+        resultCount={resultCountInfo}\n+      />\n     </PageContainer>\n   );\n };\n \n"
                },
                {
                    "date": 1761131475220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,536 @@\n+import React, { useState, useEffect, useCallback } from 'react';\n+import { toast } from 'react-toastify';\n+import styled from 'styled-components';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, Point } from '../../../utils/indexedDB';\n+import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n+import DataTable, { type TableColumn } from '../../../components/DataTable';\n+\n+// 스타일 컴포넌트들\n+const PageContainer = styled.div`\n+  width: 100%;\n+`;\n+\n+const StatsSection = styled.div`\n+  display: grid;\n+  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n+  gap: 16px;\n+  margin-bottom: 24px;\n+`;\n+\n+const StatCard = styled.div<{ $isActive?: boolean; $isClickable?: boolean }>`\n+  background: ${props => props.$isActive ? '#f0f7ff' : 'white'};\n+  border: ${props => props.$isActive ? `2px solid ${AppColors.primary}` : '1px solid #e1e5e9'};\n+  padding: 20px;\n+  border-radius: 8px;\n+  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n+  cursor: ${props => props.$isClickable ? 'pointer' : 'default'};\n+  transition: all 0.2s ease;\n+  \n+  ${props => props.$isClickable && `\n+    &:hover {\n+      transform: translateY(-2px);\n+      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n+      border-color: ${AppColors.primary};\n+    }\n+  `}\n+`;\n+\n+const StatLabel = styled.div`\n+  ${AppTextStyles.body2}\n+  color: ${AppColors.secondary};\n+  margin-bottom: 8px;\n+`;\n+\n+const StatValue = styled.div<{ color?: string }>`\n+  ${AppTextStyles.headline2}\n+  color: ${props => props.color || AppColors.onSurface};\n+  margin: 0;\n+`;\n+\n+const AmountCell = styled.span<{ isPositive?: boolean }>`\n+  font-weight: 600;\n+  color: ${props => props.isPositive ? '#28a745' : '#dc3545'};\n+`;\n+\n+const Badge = styled.span<{ type: 'earned' | 'used' | 'expired' | 'adjusted' }>`\n+  padding: 4px 8px;\n+  border-radius: 12px;\n+  font-size: 12px;\n+  font-weight: 500;\n+  \n+  ${props => {\n+    switch (props.type) {\n+      case 'earned':\n+        return `\n+          background: #d4edda;\n+          color: #155724;\n+        `;\n+      case 'used':\n+        return `\n+          background: #f8d7da;\n+          color: #721c24;\n+        `;\n+      case 'expired':\n+        return `\n+          background: #fff3cd;\n+          color: #856404;\n+        `;\n+      case 'adjusted':\n+        return `\n+          background: #d1ecf1;\n+          color: #0c5460;\n+        `;\n+      default:\n+        return `\n+          background: #e2e3e5;\n+          color: #383d41;\n+        `;\n+    }\n+  }}\n+`;\n+\n+// 포인트 타입 한글 매핑\n+const pointTypeLabels: Record<Point['type'], string> = {\n+  earned: '적립',\n+  used: '사용',\n+  expired: '만료',\n+  adjusted: '조정'\n+};\n+\n+interface MemberStats {\n+  totalEarned: number;\n+  totalUsed: number;\n+  totalExpired: number;\n+  currentBalance: number;\n+  transactionCount: number;\n+}\n+\n+const MemberPointHistory: React.FC = () => {\n+  const [points, setPoints] = useState<Point[]>([]);\n+  const [filteredPoints, setFilteredPoints] = useState<Point[]>([]);\n+  const [loading, setLoading] = useState(false);\n+  const [searchQuery, setSearchQuery] = useState<string>('');\n+  \n+  // 기간 선택 관련 상태\n+  const [selectedPeriod, setSelectedPeriod] = useState<PeriodOption>('1month');\n+  const [customStartDate, setCustomStartDate] = useState<string>('');\n+  const [customEndDate, setCustomEndDate] = useState<string>('');\n+  \n+  // 추가 필터 상태\n+  const [selectedStatCard, setSelectedStatCard] = useState<'all' | 'earned' | 'used' | 'expired' | 'balance'>('all');\n+  \n+  const [stats, setStats] = useState<MemberStats>({\n+    totalEarned: 0,\n+    totalUsed: 0,\n+    totalExpired: 0,\n+    currentBalance: 0,\n+    transactionCount: 0\n+  });\n+\n+  // 기간별 검색 범위 계산\n+  const getDateRange = useCallback(() => {\n+    const today = new Date();\n+    const startDate = new Date();\n+    \n+    switch (selectedPeriod) {\n+      case '1month':\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+      case '3month':\n+        startDate.setMonth(today.getMonth() - 3);\n+        return { start: startDate, end: today };\n+      case '6month':\n+        startDate.setMonth(today.getMonth() - 6);\n+        return { start: startDate, end: today };\n+      case 'custom':\n+        if (customStartDate && customEndDate) {\n+          return { \n+            start: new Date(customStartDate), \n+            end: new Date(customEndDate) \n+          };\n+        }\n+        // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+      default:\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+    }\n+  }, [selectedPeriod, customStartDate, customEndDate]);\n+\n+  // 날짜 범위 표시 문자열 생성\n+  const getDateRangeDisplay = useCallback(() => {\n+    const range = getDateRange();\n+    const formatDate = (date: Date) => {\n+      return date.toLocaleDateString('ko-KR', {\n+        year: 'numeric',\n+        month: 'short',\n+        day: 'numeric'\n+      });\n+    };\n+    return `${formatDate(range.start)} ~ ${formatDate(range.end)}`;\n+  }, [getDateRange]);\n+\n+  const calculateStats = useCallback((pointsList: Point[]) => {\n+    const totalEarned = pointsList\n+      .filter(p => p.type === 'earned')\n+      .reduce((sum, p) => sum + p.amount, 0);\n+      \n+    const totalUsed = Math.abs(pointsList\n+      .filter(p => p.type === 'used')\n+      .reduce((sum, p) => sum + p.amount, 0));\n+      \n+    const totalExpired = Math.abs(pointsList\n+      .filter(p => p.type === 'expired')\n+      .reduce((sum, p) => sum + p.amount, 0));\n+    \n+    // 만료되지 않은 포인트로 현재 잔액 계산\n+    const now = new Date();\n+    const currentBalance = pointsList\n+      .filter(p => !p.expiryDate || new Date(p.expiryDate) > now)\n+      .reduce((sum, p) => sum + p.amount, 0);\n+\n+    setStats({\n+      totalEarned,\n+      totalUsed,\n+      totalExpired,\n+      currentBalance,\n+      transactionCount: pointsList.length\n+    });\n+  }, []);\n+\n+  const loadPointHistory = useCallback(async (period?: PeriodOption, startDate?: string, endDate?: string) => {\n+    try {\n+      setLoading(true);\n+      console.log('포인트 이력 데이터 로딩 시작...');\n+      \n+      const allPoints = await dbManager.getAllPoints();\n+      console.log('전체 포인트 이력 수:', allPoints.length);\n+      \n+      // 기간별 필터링 (생성일 기준) - 매개변수가 있으면 사용, 없으면 현재 상태 사용\n+      const currentPeriod = period ?? selectedPeriod;\n+      const currentStartDate = startDate ?? customStartDate;\n+      const currentEndDate = endDate ?? customEndDate;\n+      \n+      let dateRange: { start: Date; end: Date };\n+      const today = new Date();\n+      const rangeStartDate = new Date();\n+      \n+      switch (currentPeriod) {\n+        case '1month':\n+          rangeStartDate.setMonth(today.getMonth() - 1);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case '3month':\n+          rangeStartDate.setMonth(today.getMonth() - 3);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case '6month':\n+          rangeStartDate.setMonth(today.getMonth() - 6);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case 'custom':\n+          if (currentStartDate && currentEndDate) {\n+            dateRange = { \n+              start: new Date(currentStartDate), \n+              end: new Date(currentEndDate) \n+            };\n+          } else {\n+            // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+            rangeStartDate.setMonth(today.getMonth() - 1);\n+            dateRange = { start: rangeStartDate, end: today };\n+          }\n+          break;\n+        default:\n+          rangeStartDate.setMonth(today.getMonth() - 1);\n+          dateRange = { start: rangeStartDate, end: today };\n+      }\n+      \n+      const filteredByDate = allPoints.filter(point => {\n+        const pointDate = new Date(point.createdAt);\n+        return pointDate >= dateRange.start && pointDate <= dateRange.end;\n+      });\n+      \n+      // 최신 순으로 정렬\n+      const sortedPoints = filteredByDate.sort((a, b) => \n+        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n+      );\n+      \n+      console.log(`${currentPeriod} 기간 내 포인트 이력:`, sortedPoints.length);\n+      \n+      setPoints(sortedPoints);\n+      calculateStats(sortedPoints);\n+    } catch (error) {\n+      console.error('포인트 이력 로드 실패:', error);\n+      toast.error('포인트 이력을 불러오는데 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  }, [selectedPeriod, customStartDate, customEndDate, calculateStats]);\n+\n+  const applyFilters = useCallback(() => {\n+    let filtered = [...points];\n+\n+    // 회원명, 회원ID, 출처 검색 (통합 검색)\n+    if (searchQuery.trim()) {\n+      const searchTerm = searchQuery.toLowerCase().trim();\n+      filtered = filtered.filter(point => \n+        point.memberName.toLowerCase().includes(searchTerm) ||\n+        point.memberId.includes(searchTerm) ||\n+        point.source.toLowerCase().includes(searchTerm)\n+      );\n+    }\n+\n+    // 선택된 카드에 따른 필터링\n+    if (selectedStatCard !== 'all') {\n+      switch (selectedStatCard) {\n+        case 'earned':\n+          filtered = filtered.filter(point => point.type === 'earned');\n+          break;\n+        case 'used':\n+          filtered = filtered.filter(point => point.type === 'used');\n+          break;\n+        case 'expired':\n+          filtered = filtered.filter(point => point.type === 'expired');\n+          break;\n+        case 'balance':\n+          // 현재 잔액에 영향을 주는 포인트들 (만료되지 않은 것들)\n+          const now = new Date();\n+          filtered = filtered.filter(point => \n+            !point.expiryDate || new Date(point.expiryDate) > now\n+          );\n+          break;\n+      }\n+    }\n+\n+    setFilteredPoints(filtered);\n+    calculateStats(filtered);\n+  }, [points, searchQuery, selectedStatCard, calculateStats]);\n+\n+  // 컴포넌트 마운트 시 초기 데이터 로드 (1개월 기준)\n+  useEffect(() => {\n+    const initializeData = async () => {\n+      await loadPointHistory();\n+    };\n+    initializeData();\n+  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n+\n+  // 필터 변경 시 필터링 적용\n+  useEffect(() => {\n+    applyFilters();\n+  }, [applyFilters]);\n+\n+  const handleSearch = async () => {\n+    // 현재 선택된 조건으로 데이터를 불러옵니다\n+    await loadPointHistory(selectedPeriod, customStartDate, customEndDate);\n+  };\n+\n+  // 테이블 컬럼 정의\n+  const columns: TableColumn<Point>[] = [\n+    {\n+      key: 'createdAt',\n+      title: '날짜/시간',\n+      width: '150px',\n+      render: (value, record) => formatDate(record.createdAt)\n+    },\n+    {\n+      key: 'memberName',\n+      title: '회원명',\n+      width: '120px'\n+    },\n+    {\n+      key: 'memberId',\n+      title: '회원ID',\n+      width: '100px'\n+    },\n+    {\n+      key: 'type',\n+      title: '타입',\n+      width: '80px',\n+      align: 'center' as const,\n+      render: (value, record) => (\n+        <Badge type={record.type}>\n+          {pointTypeLabels[record.type]}\n+        </Badge>\n+      )\n+    },\n+    {\n+      key: 'amount',\n+      title: '금액',\n+      width: '120px',\n+      align: 'right' as const,\n+      render: (value, record) => (\n+        <AmountCell isPositive={record.amount > 0}>\n+          {record.amount > 0 ? '+' : ''}{formatAmount(record.amount)}원\n+        </AmountCell>\n+      )\n+    },\n+    {\n+      key: 'source',\n+      title: '출처',\n+      width: '150px'\n+    },\n+    {\n+      key: 'description',\n+      title: '설명',\n+      width: '200px',\n+      render: (value, record) => record.description || '-'\n+    },\n+    {\n+      key: 'expiryDate',\n+      title: '만료일',\n+      width: '150px',\n+      render: (value, record) => \n+        record.expiryDate ? formatDate(record.expiryDate) : '-'\n+    }\n+  ];\n+\n+  // 결과 카운트 정보 컴포넌트\n+  const resultCountInfo = (\n+    <>\n+      총 {filteredPoints.length.toLocaleString()}건 (전체: {points.length.toLocaleString()}건)\n+      <br />\n+      <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+        기간: {getDateRangeDisplay()}\n+        {selectedStatCard !== 'all' && (\n+          <span style={{ color: AppColors.primary, fontWeight: '500', marginLeft: '8px' }}>\n+            • 필터 활성\n+          </span>\n+        )}\n+      </span>\n+    </>\n+  );\n+\n+  // StatCard 클릭 핸들러\n+  const handleStatCardClick = (cardType: 'all' | 'earned' | 'used' | 'expired' | 'balance') => {\n+    if (selectedStatCard === cardType) {\n+      // 이미 선택된 카드를 다시 클릭하면 전체로 돌아감\n+      setSelectedStatCard('all');\n+    } else {\n+      setSelectedStatCard(cardType);\n+    }\n+  };\n+\n+  const formatAmount = (amount: number) => {\n+    return amount.toLocaleString();\n+  };\n+\n+  const formatDate = (date: string | Date) => {\n+    return new Date(date).toLocaleString('ko-KR', {\n+      year: 'numeric',\n+      month: '2-digit',\n+      day: '2-digit',\n+      hour: '2-digit',\n+      minute: '2-digit'\n+    });\n+  };\n+\n+  if (loading) {\n+    return (\n+      <PageContainer>\n+        <DataTable\n+          title=\"포인트 이력\"\n+          columns={columns}\n+          data={[]}\n+          loading={true}\n+        />\n+      </PageContainer>\n+    );\n+  }\n+\n+  return (\n+    <PageContainer>\n+      {/* 새로운 SearchArea 컴포넌트 사용 */}\n+      <SearchArea\n+        selectedPeriod={selectedPeriod}\n+        onPeriodChange={setSelectedPeriod}\n+        customStartDate={customStartDate}\n+        customEndDate={customEndDate}\n+        onCustomStartDateChange={setCustomStartDate}\n+        onCustomEndDateChange={setCustomEndDate}\n+        dateRangeDisplay={getDateRangeDisplay()}\n+        searchValue={searchQuery}\n+        onSearchChange={setSearchQuery}\n+        onSearch={handleSearch}\n+        searchPlaceholder=\"회원명, 회원ID, 출처로 검색...\"\n+        autoSearchOnDateChange={false}\n+      />\n+\n+      <StatsSection>\n+        <StatCard \n+          $isActive={selectedStatCard === 'earned'} \n+          $isClickable={true}\n+          onClick={() => handleStatCardClick('earned')}\n+        >\n+          <StatLabel>총 적립</StatLabel>\n+          <StatValue color=\"#28a745\">+{formatAmount(stats.totalEarned)}원</StatValue>\n+        </StatCard>\n+        <StatCard \n+          $isActive={selectedStatCard === 'used'} \n+          $isClickable={true}\n+          onClick={() => handleStatCardClick('used')}\n+        >\n+          <StatLabel>총 사용</StatLabel>\n+          <StatValue color=\"#dc3545\">-{formatAmount(stats.totalUsed)}원</StatValue>\n+        </StatCard>\n+        <StatCard \n+          $isActive={selectedStatCard === 'expired'} \n+          $isClickable={true}\n+          onClick={() => handleStatCardClick('expired')}\n+        >\n+          <StatLabel>총 만료</StatLabel>\n+          <StatValue color=\"#ffc107\">-{formatAmount(stats.totalExpired)}원</StatValue>\n+        </StatCard>\n+        <StatCard \n+          $isActive={selectedStatCard === 'balance'} \n+          $isClickable={true}\n+          onClick={() => handleStatCardClick('balance')}\n+        >\n+          <StatLabel>현재 잔액</StatLabel>\n+          <StatValue color=\"#007bff\">{formatAmount(stats.currentBalance)}원</StatValue>\n+        </StatCard>\n+        <StatCard $isActive={false} $isClickable={false}>\n+          <StatLabel>총 거래</StatLabel>\n+          <StatValue>{stats.transactionCount.toLocaleString()}건</StatValue>\n+        </StatCard>\n+      </StatsSection>\n+\n+      <DataTable\n+        title={\n+          <div>\n+            포인트 이력\n+            {selectedStatCard !== 'all' && (\n+              <span style={{ \n+                fontSize: '14px', \n+                fontWeight: 'normal', \n+                color: AppColors.primary,\n+                marginLeft: '8px'\n+              }}>\n+                ({selectedStatCard === 'earned' ? '적립만' : \n+                  selectedStatCard === 'used' ? '사용만' : \n+                  selectedStatCard === 'expired' ? '만료만' : \n+                  selectedStatCard === 'balance' ? '유효 포인트만' : ''} 표시)\n+              </span>\n+            )}\n+          </div>\n+        }\n+        columns={columns}\n+        data={filteredPoints}\n+        loading={loading}\n+        emptyText=\"검색 결과가 없습니다\"\n+        emptyDescription=\"다른 검색어를 입력하거나 필터를 조정해보세요.\"\n+        resultCount={resultCountInfo}\n+        pagination={{\n+          enabled: true,\n+          pageSize: 15,\n+          pageSizeOptions: [15, 30, 100],\n+          showTotal: true\n+        }}\n+      />\n+    </PageContainer>\n+  );\n+};\n+\n+export default MemberPointHistory;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761371100716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,10 +205,11 @@\n     try {\n       setLoading(true);\n       console.log('포인트 이력 데이터 로딩 시작...');\n       \n-      const allPoints = await dbManager.getAllPoints();\n-      console.log('전체 포인트 이력 수:', allPoints.length);\n+      // 통합 포인트 내역 조회 (기존 + 새로운 시스템)\n+      const allPoints = await dbManager.getAllPointsUnified();\n+      console.log('통합 포인트 이력 수:', allPoints.length);\n       \n       // 기간별 필터링 (생성일 기준) - 매개변수가 있으면 사용, 없으면 현재 상태 사용\n       const currentPeriod = period ?? selectedPeriod;\n       const currentStartDate = startDate ?? customStartDate;\n@@ -532,535 +533,5 @@\n     </PageContainer>\n   );\n };\n \n-export default MemberPointHistory;\n-import React, { useState, useEffect, useCallback } from 'react';\n-import { toast } from 'react-toastify';\n-import styled from 'styled-components';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager, Point } from '../../../utils/indexedDB';\n-import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n-import DataTable, { type TableColumn } from '../../../components/DataTable';\n-\n-// 스타일 컴포넌트들\n-const PageContainer = styled.div`\n-  width: 100%;\n-`;\n-\n-const StatsSection = styled.div`\n-  display: grid;\n-  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n-  gap: 16px;\n-  margin-bottom: 24px;\n-`;\n-\n-const StatCard = styled.div<{ $isActive?: boolean; $isClickable?: boolean }>`\n-  background: ${props => props.$isActive ? '#f0f7ff' : 'white'};\n-  border: ${props => props.$isActive ? `2px solid ${AppColors.primary}` : '1px solid #e1e5e9'};\n-  padding: 20px;\n-  border-radius: 8px;\n-  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n-  cursor: ${props => props.$isClickable ? 'pointer' : 'default'};\n-  transition: all 0.2s ease;\n-  \n-  ${props => props.$isClickable && `\n-    &:hover {\n-      transform: translateY(-2px);\n-      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n-      border-color: ${AppColors.primary};\n-    }\n-  `}\n-`;\n-\n-const StatLabel = styled.div`\n-  ${AppTextStyles.body2}\n-  color: ${AppColors.secondary};\n-  margin-bottom: 8px;\n-`;\n-\n-const StatValue = styled.div<{ color?: string }>`\n-  ${AppTextStyles.headline2}\n-  color: ${props => props.color || AppColors.onSurface};\n-  margin: 0;\n-`;\n-\n-const AmountCell = styled.span<{ isPositive?: boolean }>`\n-  font-weight: 600;\n-  color: ${props => props.isPositive ? '#28a745' : '#dc3545'};\n-`;\n-\n-const Badge = styled.span<{ type: 'earned' | 'used' | 'expired' | 'adjusted' }>`\n-  padding: 4px 8px;\n-  border-radius: 12px;\n-  font-size: 12px;\n-  font-weight: 500;\n-  \n-  ${props => {\n-    switch (props.type) {\n-      case 'earned':\n-        return `\n-          background: #d4edda;\n-          color: #155724;\n-        `;\n-      case 'used':\n-        return `\n-          background: #f8d7da;\n-          color: #721c24;\n-        `;\n-      case 'expired':\n-        return `\n-          background: #fff3cd;\n-          color: #856404;\n-        `;\n-      case 'adjusted':\n-        return `\n-          background: #d1ecf1;\n-          color: #0c5460;\n-        `;\n-      default:\n-        return `\n-          background: #e2e3e5;\n-          color: #383d41;\n-        `;\n-    }\n-  }}\n-`;\n-\n-// 포인트 타입 한글 매핑\n-const pointTypeLabels: Record<Point['type'], string> = {\n-  earned: '적립',\n-  used: '사용',\n-  expired: '만료',\n-  adjusted: '조정'\n-};\n-\n-interface MemberStats {\n-  totalEarned: number;\n-  totalUsed: number;\n-  totalExpired: number;\n-  currentBalance: number;\n-  transactionCount: number;\n-}\n-\n-const MemberPointHistory: React.FC = () => {\n-  const [points, setPoints] = useState<Point[]>([]);\n-  const [filteredPoints, setFilteredPoints] = useState<Point[]>([]);\n-  const [loading, setLoading] = useState(false);\n-  const [searchQuery, setSearchQuery] = useState<string>('');\n-  \n-  // 기간 선택 관련 상태\n-  const [selectedPeriod, setSelectedPeriod] = useState<PeriodOption>('1month');\n-  const [customStartDate, setCustomStartDate] = useState<string>('');\n-  const [customEndDate, setCustomEndDate] = useState<string>('');\n-  \n-  // 추가 필터 상태\n-  const [selectedStatCard, setSelectedStatCard] = useState<'all' | 'earned' | 'used' | 'expired' | 'balance'>('all');\n-  \n-  const [stats, setStats] = useState<MemberStats>({\n-    totalEarned: 0,\n-    totalUsed: 0,\n-    totalExpired: 0,\n-    currentBalance: 0,\n-    transactionCount: 0\n-  });\n-\n-  // 기간별 검색 범위 계산\n-  const getDateRange = useCallback(() => {\n-    const today = new Date();\n-    const startDate = new Date();\n-    \n-    switch (selectedPeriod) {\n-      case '1month':\n-        startDate.setMonth(today.getMonth() - 1);\n-        return { start: startDate, end: today };\n-      case '3month':\n-        startDate.setMonth(today.getMonth() - 3);\n-        return { start: startDate, end: today };\n-      case '6month':\n-        startDate.setMonth(today.getMonth() - 6);\n-        return { start: startDate, end: today };\n-      case 'custom':\n-        if (customStartDate && customEndDate) {\n-          return { \n-            start: new Date(customStartDate), \n-            end: new Date(customEndDate) \n-          };\n-        }\n-        // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n-        startDate.setMonth(today.getMonth() - 1);\n-        return { start: startDate, end: today };\n-      default:\n-        startDate.setMonth(today.getMonth() - 1);\n-        return { start: startDate, end: today };\n-    }\n-  }, [selectedPeriod, customStartDate, customEndDate]);\n-\n-  // 날짜 범위 표시 문자열 생성\n-  const getDateRangeDisplay = useCallback(() => {\n-    const range = getDateRange();\n-    const formatDate = (date: Date) => {\n-      return date.toLocaleDateString('ko-KR', {\n-        year: 'numeric',\n-        month: 'short',\n-        day: 'numeric'\n-      });\n-    };\n-    return `${formatDate(range.start)} ~ ${formatDate(range.end)}`;\n-  }, [getDateRange]);\n-\n-  const calculateStats = useCallback((pointsList: Point[]) => {\n-    const totalEarned = pointsList\n-      .filter(p => p.type === 'earned')\n-      .reduce((sum, p) => sum + p.amount, 0);\n-      \n-    const totalUsed = Math.abs(pointsList\n-      .filter(p => p.type === 'used')\n-      .reduce((sum, p) => sum + p.amount, 0));\n-      \n-    const totalExpired = Math.abs(pointsList\n-      .filter(p => p.type === 'expired')\n-      .reduce((sum, p) => sum + p.amount, 0));\n-    \n-    // 만료되지 않은 포인트로 현재 잔액 계산\n-    const now = new Date();\n-    const currentBalance = pointsList\n-      .filter(p => !p.expiryDate || new Date(p.expiryDate) > now)\n-      .reduce((sum, p) => sum + p.amount, 0);\n-\n-    setStats({\n-      totalEarned,\n-      totalUsed,\n-      totalExpired,\n-      currentBalance,\n-      transactionCount: pointsList.length\n-    });\n-  }, []);\n-\n-  const loadPointHistory = useCallback(async (period?: PeriodOption, startDate?: string, endDate?: string) => {\n-    try {\n-      setLoading(true);\n-      console.log('포인트 이력 데이터 로딩 시작...');\n-      \n-      const allPoints = await dbManager.getAllPoints();\n-      console.log('전체 포인트 이력 수:', allPoints.length);\n-      \n-      // 기간별 필터링 (생성일 기준) - 매개변수가 있으면 사용, 없으면 현재 상태 사용\n-      const currentPeriod = period ?? selectedPeriod;\n-      const currentStartDate = startDate ?? customStartDate;\n-      const currentEndDate = endDate ?? customEndDate;\n-      \n-      let dateRange: { start: Date; end: Date };\n-      const today = new Date();\n-      const rangeStartDate = new Date();\n-      \n-      switch (currentPeriod) {\n-        case '1month':\n-          rangeStartDate.setMonth(today.getMonth() - 1);\n-          dateRange = { start: rangeStartDate, end: today };\n-          break;\n-        case '3month':\n-          rangeStartDate.setMonth(today.getMonth() - 3);\n-          dateRange = { start: rangeStartDate, end: today };\n-          break;\n-        case '6month':\n-          rangeStartDate.setMonth(today.getMonth() - 6);\n-          dateRange = { start: rangeStartDate, end: today };\n-          break;\n-        case 'custom':\n-          if (currentStartDate && currentEndDate) {\n-            dateRange = { \n-              start: new Date(currentStartDate), \n-              end: new Date(currentEndDate) \n-            };\n-          } else {\n-            // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n-            rangeStartDate.setMonth(today.getMonth() - 1);\n-            dateRange = { start: rangeStartDate, end: today };\n-          }\n-          break;\n-        default:\n-          rangeStartDate.setMonth(today.getMonth() - 1);\n-          dateRange = { start: rangeStartDate, end: today };\n-      }\n-      \n-      const filteredByDate = allPoints.filter(point => {\n-        const pointDate = new Date(point.createdAt);\n-        return pointDate >= dateRange.start && pointDate <= dateRange.end;\n-      });\n-      \n-      // 최신 순으로 정렬\n-      const sortedPoints = filteredByDate.sort((a, b) => \n-        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n-      );\n-      \n-      console.log(`${currentPeriod} 기간 내 포인트 이력:`, sortedPoints.length);\n-      \n-      setPoints(sortedPoints);\n-      calculateStats(sortedPoints);\n-    } catch (error) {\n-      console.error('포인트 이력 로드 실패:', error);\n-      toast.error('포인트 이력을 불러오는데 실패했습니다.');\n-    } finally {\n-      setLoading(false);\n-    }\n-  }, [selectedPeriod, customStartDate, customEndDate, calculateStats]);\n-\n-  const applyFilters = useCallback(() => {\n-    let filtered = [...points];\n-\n-    // 회원명, 회원ID, 출처 검색 (통합 검색)\n-    if (searchQuery.trim()) {\n-      const searchTerm = searchQuery.toLowerCase().trim();\n-      filtered = filtered.filter(point => \n-        point.memberName.toLowerCase().includes(searchTerm) ||\n-        point.memberId.includes(searchTerm) ||\n-        point.source.toLowerCase().includes(searchTerm)\n-      );\n-    }\n-\n-    // 선택된 카드에 따른 필터링\n-    if (selectedStatCard !== 'all') {\n-      switch (selectedStatCard) {\n-        case 'earned':\n-          filtered = filtered.filter(point => point.type === 'earned');\n-          break;\n-        case 'used':\n-          filtered = filtered.filter(point => point.type === 'used');\n-          break;\n-        case 'expired':\n-          filtered = filtered.filter(point => point.type === 'expired');\n-          break;\n-        case 'balance':\n-          // 현재 잔액에 영향을 주는 포인트들 (만료되지 않은 것들)\n-          const now = new Date();\n-          filtered = filtered.filter(point => \n-            !point.expiryDate || new Date(point.expiryDate) > now\n-          );\n-          break;\n-      }\n-    }\n-\n-    setFilteredPoints(filtered);\n-    calculateStats(filtered);\n-  }, [points, searchQuery, selectedStatCard, calculateStats]);\n-\n-  // 컴포넌트 마운트 시 초기 데이터 로드 (1개월 기준)\n-  useEffect(() => {\n-    const initializeData = async () => {\n-      await loadPointHistory();\n-    };\n-    initializeData();\n-  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n-\n-  // 필터 변경 시 필터링 적용\n-  useEffect(() => {\n-    applyFilters();\n-  }, [applyFilters]);\n-\n-  const handleSearch = async () => {\n-    // 현재 선택된 조건으로 데이터를 불러옵니다\n-    await loadPointHistory(selectedPeriod, customStartDate, customEndDate);\n-  };\n-\n-  // 테이블 컬럼 정의\n-  const columns: TableColumn<Point>[] = [\n-    {\n-      key: 'createdAt',\n-      title: '날짜/시간',\n-      width: '150px',\n-      render: (value, record) => formatDate(record.createdAt)\n-    },\n-    {\n-      key: 'memberName',\n-      title: '회원명',\n-      width: '120px'\n-    },\n-    {\n-      key: 'memberId',\n-      title: '회원ID',\n-      width: '100px'\n-    },\n-    {\n-      key: 'type',\n-      title: '타입',\n-      width: '80px',\n-      align: 'center' as const,\n-      render: (value, record) => (\n-        <Badge type={record.type}>\n-          {pointTypeLabels[record.type]}\n-        </Badge>\n-      )\n-    },\n-    {\n-      key: 'amount',\n-      title: '금액',\n-      width: '120px',\n-      align: 'right' as const,\n-      render: (value, record) => (\n-        <AmountCell isPositive={record.amount > 0}>\n-          {record.amount > 0 ? '+' : ''}{formatAmount(record.amount)}원\n-        </AmountCell>\n-      )\n-    },\n-    {\n-      key: 'source',\n-      title: '출처',\n-      width: '150px'\n-    },\n-    {\n-      key: 'description',\n-      title: '설명',\n-      width: '200px',\n-      render: (value, record) => record.description || '-'\n-    },\n-    {\n-      key: 'expiryDate',\n-      title: '만료일',\n-      width: '150px',\n-      render: (value, record) => \n-        record.expiryDate ? formatDate(record.expiryDate) : '-'\n-    }\n-  ];\n-\n-  // 결과 카운트 정보 컴포넌트\n-  const resultCountInfo = (\n-    <>\n-      총 {filteredPoints.length.toLocaleString()}건 (전체: {points.length.toLocaleString()}건)\n-      <br />\n-      <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-        기간: {getDateRangeDisplay()}\n-        {selectedStatCard !== 'all' && (\n-          <span style={{ color: AppColors.primary, fontWeight: '500', marginLeft: '8px' }}>\n-            • 필터 활성\n-          </span>\n-        )}\n-      </span>\n-    </>\n-  );\n-\n-  // StatCard 클릭 핸들러\n-  const handleStatCardClick = (cardType: 'all' | 'earned' | 'used' | 'expired' | 'balance') => {\n-    if (selectedStatCard === cardType) {\n-      // 이미 선택된 카드를 다시 클릭하면 전체로 돌아감\n-      setSelectedStatCard('all');\n-    } else {\n-      setSelectedStatCard(cardType);\n-    }\n-  };\n-\n-  const formatAmount = (amount: number) => {\n-    return amount.toLocaleString();\n-  };\n-\n-  const formatDate = (date: string | Date) => {\n-    return new Date(date).toLocaleString('ko-KR', {\n-      year: 'numeric',\n-      month: '2-digit',\n-      day: '2-digit',\n-      hour: '2-digit',\n-      minute: '2-digit'\n-    });\n-  };\n-\n-  if (loading) {\n-    return (\n-      <PageContainer>\n-        <DataTable\n-          title=\"포인트 이력\"\n-          columns={columns}\n-          data={[]}\n-          loading={true}\n-        />\n-      </PageContainer>\n-    );\n-  }\n-\n-  return (\n-    <PageContainer>\n-      {/* 새로운 SearchArea 컴포넌트 사용 */}\n-      <SearchArea\n-        selectedPeriod={selectedPeriod}\n-        onPeriodChange={setSelectedPeriod}\n-        customStartDate={customStartDate}\n-        customEndDate={customEndDate}\n-        onCustomStartDateChange={setCustomStartDate}\n-        onCustomEndDateChange={setCustomEndDate}\n-        dateRangeDisplay={getDateRangeDisplay()}\n-        searchValue={searchQuery}\n-        onSearchChange={setSearchQuery}\n-        onSearch={handleSearch}\n-        searchPlaceholder=\"회원명, 회원ID, 출처로 검색...\"\n-        autoSearchOnDateChange={false}\n-      />\n-\n-      <StatsSection>\n-        <StatCard \n-          $isActive={selectedStatCard === 'earned'} \n-          $isClickable={true}\n-          onClick={() => handleStatCardClick('earned')}\n-        >\n-          <StatLabel>총 적립</StatLabel>\n-          <StatValue color=\"#28a745\">+{formatAmount(stats.totalEarned)}원</StatValue>\n-        </StatCard>\n-        <StatCard \n-          $isActive={selectedStatCard === 'used'} \n-          $isClickable={true}\n-          onClick={() => handleStatCardClick('used')}\n-        >\n-          <StatLabel>총 사용</StatLabel>\n-          <StatValue color=\"#dc3545\">-{formatAmount(stats.totalUsed)}원</StatValue>\n-        </StatCard>\n-        <StatCard \n-          $isActive={selectedStatCard === 'expired'} \n-          $isClickable={true}\n-          onClick={() => handleStatCardClick('expired')}\n-        >\n-          <StatLabel>총 만료</StatLabel>\n-          <StatValue color=\"#ffc107\">-{formatAmount(stats.totalExpired)}원</StatValue>\n-        </StatCard>\n-        <StatCard \n-          $isActive={selectedStatCard === 'balance'} \n-          $isClickable={true}\n-          onClick={() => handleStatCardClick('balance')}\n-        >\n-          <StatLabel>현재 잔액</StatLabel>\n-          <StatValue color=\"#007bff\">{formatAmount(stats.currentBalance)}원</StatValue>\n-        </StatCard>\n-        <StatCard $isActive={false} $isClickable={false}>\n-          <StatLabel>총 거래</StatLabel>\n-          <StatValue>{stats.transactionCount.toLocaleString()}건</StatValue>\n-        </StatCard>\n-      </StatsSection>\n-\n-      <DataTable\n-        title={\n-          <div>\n-            포인트 이력\n-            {selectedStatCard !== 'all' && (\n-              <span style={{ \n-                fontSize: '14px', \n-                fontWeight: 'normal', \n-                color: AppColors.primary,\n-                marginLeft: '8px'\n-              }}>\n-                ({selectedStatCard === 'earned' ? '적립만' : \n-                  selectedStatCard === 'used' ? '사용만' : \n-                  selectedStatCard === 'expired' ? '만료만' : \n-                  selectedStatCard === 'balance' ? '유효 포인트만' : ''} 표시)\n-              </span>\n-            )}\n-          </div>\n-        }\n-        columns={columns}\n-        data={filteredPoints}\n-        loading={loading}\n-        emptyText=\"검색 결과가 없습니다\"\n-        emptyDescription=\"다른 검색어를 입력하거나 필터를 조정해보세요.\"\n-        resultCount={resultCountInfo}\n-      />\n-    </PageContainer>\n-  );\n-};\n-\n export default MemberPointHistory;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761371973445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,8 +373,47 @@\n       title: '출처',\n       width: '150px'\n     },\n     {\n+      key: 'products',\n+      title: '관련 상품/수강',\n+      width: '250px',\n+      render: (value, record) => {\n+        // 새로운 포인트 시스템의 PointTransaction에서 products 정보 표시\n+        const extendedRecord = record as any; // 타입 확장을 위한 캐스팅\n+        if (extendedRecord.products && Array.isArray(extendedRecord.products) && extendedRecord.products.length > 0) {\n+          return (\n+            <div style={{ fontSize: '12px' }}>\n+              {extendedRecord.products.map((product: any, index: number) => (\n+                <div key={index} style={{ marginBottom: '4px' }}>\n+                  <div style={{ fontWeight: '600', color: AppColors.primary }}>\n+                    {product.productName} ({product.productPrice?.toLocaleString()}원)\n+                  </div>\n+                  {product.courseId && (\n+                    <div style={{ color: AppColors.secondary, fontSize: '11px' }}>\n+                      수강ID: {product.courseId}\n+                      {product.courseName && ` | ${product.courseName}`}\n+                    </div>\n+                  )}\n+                </div>\n+              ))}\n+            </div>\n+          );\n+        }\n+        \n+        // 기존 시스템의 relatedPaymentId 표시\n+        if (record.relatedPaymentId) {\n+          return (\n+            <div style={{ fontSize: '12px', color: AppColors.secondary }}>\n+              결제ID: {record.relatedPaymentId}\n+            </div>\n+          );\n+        }\n+        \n+        return '-';\n+      }\n+    },\n+    {\n       key: 'description',\n       title: '설명',\n       width: '200px',\n       render: (value, record) => record.description || '-'\n"
                }
            ],
            "date": 1760757227935,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useCallback } from 'react';\nimport { toast } from 'react-toastify';\nimport styled from 'styled-components';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\nimport { dbManager, Point } from '../../../utils/indexedDB';\n\n// 스타일 컴포넌트들\nconst Container = styled.div`\n  padding: 20px;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n`;\n\nconst PageHeader = styled.div`\n  background: white;\n  padding: 24px;\n  border-radius: 8px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  margin-bottom: 20px;\n`;\n\nconst PageTitle = styled.h1`\n  ${AppTextStyles.headline1}\n  color: ${AppColors.onSurface};\n  margin: 0 0 8px 0;\n`;\n\nconst PageDescription = styled.p`\n  ${AppTextStyles.body1}\n  color: ${AppColors.secondary};\n  margin: 0;\n`;\n\nconst SearchSection = styled.div`\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  margin-bottom: 20px;\n`;\n\nconst SearchForm = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: end;\n  flex-wrap: wrap;\n`;\n\nconst FormField = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-width: 200px;\n`;\n\nconst Label = styled.label`\n  ${AppTextStyles.body2}\n  color: ${AppColors.onSurface};\n  margin-bottom: 6px;\n  font-weight: 500;\n`;\n\nconst Input = styled.input`\n  padding: 8px 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n  \n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n  }\n`;\n\nconst Select = styled.select`\n  padding: 8px 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n  background: white;\n  \n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n  }\n`;\n\nconst Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  ${props => props.variant === 'secondary' ? `\n    background: #6c757d;\n    color: white;\n    &:hover {\n      background: #5a6268;\n    }\n  ` : `\n    background: ${AppColors.primary};\n    color: white;\n    &:hover {\n      background: ${AppColors.secondary};\n    }\n  `}\n  \n  &:disabled {\n    background: #ccc;\n    cursor: not-allowed;\n  }\n`;\n\nconst StatsSection = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 16px;\n  margin-bottom: 20px;\n`;\n\nconst StatCard = styled.div`\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n`;\n\nconst StatLabel = styled.div`\n  ${AppTextStyles.body2}\n  color: ${AppColors.secondary};\n  margin-bottom: 8px;\n`;\n\nconst StatValue = styled.div<{ color?: string }>`\n  ${AppTextStyles.headline2}\n  color: ${props => props.color || AppColors.onSurface};\n  margin: 0;\n`;\n\nconst ResultsSection = styled.div`\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n`;\n\nconst ResultsHeader = styled.div`\n  padding: 16px 20px;\n  border-bottom: 1px solid #eee;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst ResultsCount = styled.span`\n  ${AppTextStyles.body2}\n  color: ${AppColors.secondary};\n`;\n\nconst TableContainer = styled.div`\n  overflow-x: auto;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nconst TableHeader = styled.thead`\n  background-color: #f8f9fa;\n`;\n\nconst TableRow = styled.tr`\n  &:nth-child(even) {\n    background-color: #f8f9fa;\n  }\n  \n  &:hover {\n    background-color: #e9ecef;\n  }\n`;\n\nconst TableHeaderCell = styled.th`\n  padding: 12px;\n  text-align: left;\n  ${AppTextStyles.body2}\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  border-bottom: 2px solid #dee2e6;\n  white-space: nowrap;\n`;\n\nconst TableCell = styled.td`\n  padding: 12px;\n  ${AppTextStyles.body2}\n  color: ${AppColors.secondary};\n  border-bottom: 1px solid #dee2e6;\n  white-space: nowrap;\n`;\n\nconst Badge = styled.span<{ type: 'earned' | 'used' | 'expired' | 'adjusted' }>`\n  padding: 4px 8px;\n  border-radius: 12px;\n  font-size: 12px;\n  font-weight: 500;\n  \n  ${props => {\n    switch (props.type) {\n      case 'earned':\n        return `\n          background: #d4edda;\n          color: #155724;\n        `;\n      case 'used':\n        return `\n          background: #f8d7da;\n          color: #721c24;\n        `;\n      case 'expired':\n        return `\n          background: #fff3cd;\n          color: #856404;\n        `;\n      case 'adjusted':\n        return `\n          background: #d1ecf1;\n          color: #0c5460;\n        `;\n      default:\n        return `\n          background: #e2e3e5;\n          color: #383d41;\n        `;\n    }\n  }}\n`;\n\nconst AmountCell = styled(TableCell)<{ isPositive?: boolean }>`\n  font-weight: 600;\n  color: ${props => props.isPositive ? '#28a745' : '#dc3545'};\n`;\n\nconst EmptyMessage = styled.div`\n  padding: 40px;\n  text-align: center;\n  color: ${AppColors.secondary};\n`;\n\n// 포인트 타입 한글 매핑\nconst pointTypeLabels: Record<Point['type'], string> = {\n  earned: '적립',\n  used: '사용',\n  expired: '만료',\n  adjusted: '조정'\n};\n\ninterface SearchFilters {\n  memberName: string;\n  memberId: string;\n  pointType: Point['type'] | 'all';\n  startDate: string;\n  endDate: string;\n  source: string;\n}\n\ninterface MemberStats {\n  totalEarned: number;\n  totalUsed: number;\n  totalExpired: number;\n  currentBalance: number;\n  transactionCount: number;\n}\n\nconst MemberPointHistory: React.FC = () => {\n  const [points, setPoints] = useState<Point[]>([]);\n  const [filteredPoints, setFilteredPoints] = useState<Point[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [stats, setStats] = useState<MemberStats>({\n    totalEarned: 0,\n    totalUsed: 0,\n    totalExpired: 0,\n    currentBalance: 0,\n    transactionCount: 0\n  });\n\n  const [filters, setFilters] = useState<SearchFilters>({\n    memberName: '',\n    memberId: '',\n    pointType: 'all',\n    startDate: '',\n    endDate: '',\n    source: ''\n  });\n\n  const calculateStats = useCallback((pointsList: Point[]) => {\n    const totalEarned = pointsList\n      .filter(p => p.type === 'earned')\n      .reduce((sum, p) => sum + p.amount, 0);\n      \n    const totalUsed = Math.abs(pointsList\n      .filter(p => p.type === 'used')\n      .reduce((sum, p) => sum + p.amount, 0));\n      \n    const totalExpired = Math.abs(pointsList\n      .filter(p => p.type === 'expired')\n      .reduce((sum, p) => sum + p.amount, 0));\n    \n    // 만료되지 않은 포인트로 현재 잔액 계산\n    const now = new Date();\n    const currentBalance = pointsList\n      .filter(p => !p.expiryDate || new Date(p.expiryDate) > now)\n      .reduce((sum, p) => sum + p.amount, 0);\n\n    setStats({\n      totalEarned,\n      totalUsed,\n      totalExpired,\n      currentBalance,\n      transactionCount: pointsList.length\n    });\n  }, []);\n\n  const loadPointHistory = useCallback(async () => {\n    try {\n      setLoading(true);\n      const allPoints = await dbManager.getAllPoints();\n      \n      // 최신 순으로 정렬\n      const sortedPoints = allPoints.sort((a, b) => \n        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n      );\n      \n      setPoints(sortedPoints);\n      calculateStats(sortedPoints);\n    } catch (error) {\n      console.error('포인트 이력 로드 실패:', error);\n      toast.error('포인트 이력을 불러오는데 실패했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  }, [calculateStats]);\n\n  const applyFilters = useCallback(() => {\n    let filtered = [...points];\n\n    // 회원명 필터\n    if (filters.memberName.trim()) {\n      const searchTerm = filters.memberName.toLowerCase().trim();\n      filtered = filtered.filter(point => \n        point.memberName.toLowerCase().includes(searchTerm)\n      );\n    }\n\n    // 회원ID 필터\n    if (filters.memberId.trim()) {\n      filtered = filtered.filter(point => \n        point.memberId.includes(filters.memberId.trim())\n      );\n    }\n\n    // 포인트 타입 필터\n    if (filters.pointType !== 'all') {\n      filtered = filtered.filter(point => point.type === filters.pointType);\n    }\n\n    // 날짜 범위 필터\n    if (filters.startDate) {\n      const startDate = new Date(filters.startDate);\n      filtered = filtered.filter(point => \n        new Date(point.createdAt) >= startDate\n      );\n    }\n\n    if (filters.endDate) {\n      const endDate = new Date(filters.endDate);\n      endDate.setHours(23, 59, 59, 999); // 하루 끝까지 포함\n      filtered = filtered.filter(point => \n        new Date(point.createdAt) <= endDate\n      );\n    }\n\n    // 출처 필터\n    if (filters.source.trim()) {\n      const searchTerm = filters.source.toLowerCase().trim();\n      filtered = filtered.filter(point => \n        point.source.toLowerCase().includes(searchTerm)\n      );\n    }\n\n    setFilteredPoints(filtered);\n    calculateStats(filtered);\n  }, [points, filters, calculateStats]);\n\n  // 컴포넌트 마운트 시 데이터 로드\n  useEffect(() => {\n    loadPointHistory();\n  }, [loadPointHistory]);\n\n  // 필터 변경 시 필터링 적용\n  useEffect(() => {\n    applyFilters();\n  }, [applyFilters]);\n\n  const handleFilterChange = (field: keyof SearchFilters, value: string) => {\n    setFilters(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleSearch = () => {\n    applyFilters();\n  };\n\n  const handleReset = () => {\n    setFilters({\n      memberName: '',\n      memberId: '',\n      pointType: 'all',\n      startDate: '',\n      endDate: '',\n      source: ''\n    });\n  };\n\n  const formatAmount = (amount: number) => {\n    return amount.toLocaleString();\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleString('ko-KR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <Container>\n      <PageHeader>\n        <PageTitle>포인트 이력</PageTitle>\n        <PageDescription>\n          회원들의 포인트 적립, 사용, 만료 내역을 조회하고 관리합니다.\n        </PageDescription>\n      </PageHeader>\n\n      <SearchSection>\n        <SearchForm>\n          <FormField>\n            <Label>회원명</Label>\n            <Input\n              type=\"text\"\n              value={filters.memberName}\n              onChange={(e) => handleFilterChange('memberName', e.target.value)}\n              placeholder=\"회원명을 입력하세요\"\n            />\n          </FormField>\n\n          <FormField>\n            <Label>회원ID</Label>\n            <Input\n              type=\"text\"\n              value={filters.memberId}\n              onChange={(e) => handleFilterChange('memberId', e.target.value)}\n              placeholder=\"회원ID를 입력하세요\"\n            />\n          </FormField>\n\n          <FormField>\n            <Label>포인트 타입</Label>\n            <Select\n              value={filters.pointType}\n              onChange={(e) => handleFilterChange('pointType', e.target.value)}\n            >\n              <option value=\"all\">전체</option>\n              <option value=\"earned\">적립</option>\n              <option value=\"used\">사용</option>\n              <option value=\"expired\">만료</option>\n              <option value=\"adjusted\">조정</option>\n            </Select>\n          </FormField>\n\n          <FormField>\n            <Label>시작일</Label>\n            <Input\n              type=\"date\"\n              value={filters.startDate}\n              onChange={(e) => handleFilterChange('startDate', e.target.value)}\n            />\n          </FormField>\n\n          <FormField>\n            <Label>종료일</Label>\n            <Input\n              type=\"date\"\n              value={filters.endDate}\n              onChange={(e) => handleFilterChange('endDate', e.target.value)}\n            />\n          </FormField>\n\n          <FormField>\n            <Label>출처</Label>\n            <Input\n              type=\"text\"\n              value={filters.source}\n              onChange={(e) => handleFilterChange('source', e.target.value)}\n              placeholder=\"포인트 발생 출처\"\n            />\n          </FormField>\n\n          <div style={{ display: 'flex', gap: '8px' }}>\n            <Button onClick={handleSearch}>검색</Button>\n            <Button variant=\"secondary\" onClick={handleReset}>초기화</Button>\n          </div>\n        </SearchForm>\n      </SearchSection>\n\n      <StatsSection>\n        <StatCard>\n          <StatLabel>총 적립</StatLabel>\n          <StatValue color=\"#28a745\">+{formatAmount(stats.totalEarned)}원</StatValue>\n        </StatCard>\n        <StatCard>\n          <StatLabel>총 사용</StatLabel>\n          <StatValue color=\"#dc3545\">-{formatAmount(stats.totalUsed)}원</StatValue>\n        </StatCard>\n        <StatCard>\n          <StatLabel>총 만료</StatLabel>\n          <StatValue color=\"#ffc107\">-{formatAmount(stats.totalExpired)}원</StatValue>\n        </StatCard>\n        <StatCard>\n          <StatLabel>현재 잔액</StatLabel>\n          <StatValue color=\"#007bff\">{formatAmount(stats.currentBalance)}원</StatValue>\n        </StatCard>\n        <StatCard>\n          <StatLabel>총 거래</StatLabel>\n          <StatValue>{stats.transactionCount.toLocaleString()}건</StatValue>\n        </StatCard>\n      </StatsSection>\n\n      <ResultsSection>\n        <ResultsHeader>\n          <h3 style={{ margin: 0 }}>포인트 이력</h3>\n          <ResultsCount>\n            총 {filteredPoints.length.toLocaleString()}건 (전체: {points.length.toLocaleString()}건)\n          </ResultsCount>\n        </ResultsHeader>\n\n        {loading ? (\n          <EmptyMessage>데이터를 불러오는 중...</EmptyMessage>\n        ) : filteredPoints.length > 0 ? (\n          <TableContainer>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHeaderCell>날짜/시간</TableHeaderCell>\n                  <TableHeaderCell>회원명</TableHeaderCell>\n                  <TableHeaderCell>회원ID</TableHeaderCell>\n                  <TableHeaderCell>타입</TableHeaderCell>\n                  <TableHeaderCell>금액</TableHeaderCell>\n                  <TableHeaderCell>출처</TableHeaderCell>\n                  <TableHeaderCell>설명</TableHeaderCell>\n                  <TableHeaderCell>만료일</TableHeaderCell>\n                </TableRow>\n              </TableHeader>\n              <tbody>\n                {filteredPoints.map(point => (\n                  <TableRow key={point.id}>\n                    <TableCell>{formatDate(point.createdAt)}</TableCell>\n                    <TableCell>{point.memberName}</TableCell>\n                    <TableCell>{point.memberId}</TableCell>\n                    <TableCell>\n                      <Badge type={point.type}>\n                        {pointTypeLabels[point.type]}\n                      </Badge>\n                    </TableCell>\n                    <AmountCell isPositive={point.amount > 0}>\n                      {point.amount > 0 ? '+' : ''}{formatAmount(point.amount)}원\n                    </AmountCell>\n                    <TableCell>{point.source}</TableCell>\n                    <TableCell>{point.description || '-'}</TableCell>\n                    <TableCell>\n                      {point.expiryDate ? formatDate(point.expiryDate) : '-'}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </tbody>\n            </Table>\n          </TableContainer>\n        ) : (\n          <EmptyMessage>\n            조건에 맞는 포인트 이력이 없습니다.\n          </EmptyMessage>\n        )}\n      </ResultsSection>\n    </Container>\n  );\n};\n\nexport default MemberPointHistory;"
        }
    ]
}