{
    "sourceFile": "src/pages/CMS/Member/JoinInfoStep.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1760248001088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760249930543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,21 @@\n import React from 'react';\n-import { StepContent, StepTitle, FormGrid, FormField, Label, Input, Select, CheckboxLabel, Checkbox } from './StyledComponents';\n+import { StepContent, StepTitle, FormGrid, FormField, Label, Input, CheckboxLabel, Checkbox } from './StyledComponents';\n import { JoinInfo, StepProps } from './types';\n+import CustomDropdown from '../../../components/CustomDropdown';\n \n const JoinInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n   const coaches = ['한수민', '임정현', '민웅희', '김코치', '이코치'];\n   const joinPaths = ['인터넷 검색', '지인 추천', '광고', '직접 방문', '기타'];\n \n+  // 코치 옵션 생성\n+  const getCoachOptions = () => \n+    coaches.map(coach => ({ value: coach, label: coach }));\n+\n+  // 가입경로 옵션 생성\n+  const getJoinPathOptions = () => \n+    joinPaths.map(path => ({ value: path, label: path }));\n+\n   const handleInputChange = (field: keyof JoinInfo, value: string | boolean) => {\n     onUpdate({\n       joinInfo: { ...formData.joinInfo, [field]: value }\n     });\n@@ -17,30 +26,26 @@\n       <StepTitle>가입정보</StepTitle>\n       <FormGrid>\n         <FormField>\n           <Label>담당 코치 *</Label>\n-          <Select\n+          <CustomDropdown\n             value={formData.joinInfo.coach}\n-            onChange={(e) => handleInputChange('coach', e.target.value)}\n-          >\n-            <option value=\"\">선택하세요</option>\n-            {coaches.map(coach => (\n-              <option key={coach} value={coach}>{coach}</option>\n-            ))}\n-          </Select>\n+            onChange={(value: string) => handleInputChange('coach', value)}\n+            options={getCoachOptions()}\n+            placeholder=\"코치를 선택하세요\"\n+            required\n+          />\n         </FormField>\n \n         <FormField>\n           <Label>가입경로 *</Label>\n-          <Select\n+          <CustomDropdown\n             value={formData.joinInfo.joinPath}\n-            onChange={(e) => handleInputChange('joinPath', e.target.value)}\n-          >\n-            <option value=\"\">선택하세요</option>\n-            {joinPaths.map(path => (\n-              <option key={path} value={path}>{path}</option>\n-            ))}\n-          </Select>\n+            onChange={(value: string) => handleInputChange('joinPath', value)}\n+            options={getJoinPathOptions()}\n+            placeholder=\"가입경로를 선택하세요\"\n+            required\n+          />\n         </FormField>\n \n         <FormField $fullWidth>\n           <CheckboxLabel>\n"
                },
                {
                    "date": 1760250046375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,53 @@\n-import React from 'react';\n+import React, { useState, useEffect } from 'react';\n import { StepContent, StepTitle, FormGrid, FormField, Label, Input, CheckboxLabel, Checkbox } from './StyledComponents';\n import { JoinInfo, StepProps } from './types';\n import CustomDropdown from '../../../components/CustomDropdown';\n+import { dbManager, type Branch, type Staff } from '../../../utils/indexedDB';\n \n const JoinInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n-  const coaches = ['한수민', '임정현', '민웅희', '김코치', '이코치'];\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [staff, setStaff] = useState<Staff[]>([]);\n   const joinPaths = ['인터넷 검색', '지인 추천', '광고', '직접 방문', '기타'];\n \n-  // 코치 옵션 생성\n-  const getCoachOptions = () => \n-    coaches.map(coach => ({ value: coach, label: coach }));\n+  // 컴포넌트 마운트 시 데이터 로드\n+  useEffect(() => {\n+    loadBranches();\n+    loadStaff();\n+  }, []);\n \n+  // 지점 데이터 로드\n+  const loadBranches = async () => {\n+    try {\n+      const branchData = await dbManager.getAllBranches();\n+      // 활성 지점만 필터링\n+      const activeBranches = branchData.filter(branch => branch.isActive);\n+      setBranches(activeBranches);\n+    } catch (error) {\n+      console.error('지점 데이터 로드 실패:', error);\n+    }\n+  };\n+\n+  // 직원 데이터 로드\n+  const loadStaff = async () => {\n+    try {\n+      const staffData = await dbManager.getAllStaff();\n+      // 활성 직원만 필터링\n+      const activeStaff = staffData.filter(employee => employee.isActive);\n+      setStaff(activeStaff);\n+    } catch (error) {\n+      console.error('직원 데이터 로드 실패:', error);\n+    }\n+  };\n+\n+  // 지점 옵션 생성\n+  const getBranchOptions = () => \n+    branches.map(branch => ({ value: branch.id, label: branch.name }));\n+\n+  // 직원 옵션 생성\n+  const getStaffOptions = () => \n+    staff.map(employee => ({ value: employee.id, label: employee.name }));\n+\n   // 가입경로 옵션 생성\n   const getJoinPathOptions = () => \n     joinPaths.map(path => ({ value: path, label: path }));\n \n@@ -25,14 +61,25 @@\n     <StepContent>\n       <StepTitle>가입정보</StepTitle>\n       <FormGrid>\n         <FormField>\n-          <Label>담당 코치 *</Label>\n+          <Label>지점 *</Label>\n           <CustomDropdown\n+            value={formData.joinInfo.branchId}\n+            onChange={(value: string) => handleInputChange('branchId', value)}\n+            options={getBranchOptions()}\n+            placeholder=\"지점을 선택하세요\"\n+            required\n+          />\n+        </FormField>\n+\n+        <FormField>\n+          <Label>담당 직원 *</Label>\n+          <CustomDropdown\n             value={formData.joinInfo.coach}\n             onChange={(value: string) => handleInputChange('coach', value)}\n-            options={getCoachOptions()}\n-            placeholder=\"코치를 선택하세요\"\n+            options={getStaffOptions()}\n+            placeholder=\"담당 직원을 선택하세요\"\n             required\n           />\n         </FormField>\n \n"
                },
                {
                    "date": 1760250263496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n const JoinInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [staff, setStaff] = useState<Staff[]>([]);\n-  const joinPaths = ['인터넷 검색', '지인 추천', '광고', '직접 방문', '기타'];\n+  const joinPaths = ['지인소개', '당근마켓', '네이버 플레이스', '전화', '워크인', '현수막', '인스타', '광고지', '기타'];\n \n   // 컴포넌트 마운트 시 데이터 로드\n   useEffect(() => {\n     loadBranches();\n"
                },
                {
                    "date": 1760250433864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,16 @@\n import React, { useState, useEffect } from 'react';\n import { StepContent, StepTitle, FormGrid, FormField, Label, Input, CheckboxLabel, Checkbox } from './StyledComponents';\n import { JoinInfo, StepProps } from './types';\n import CustomDropdown from '../../../components/CustomDropdown';\n+import { AppSearchDropdown, SearchResultItem } from '../../../customComponents/AppSearchDropdown';\n import { dbManager, type Branch, type Staff } from '../../../utils/indexedDB';\n \n const JoinInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [staff, setStaff] = useState<Staff[]>([]);\n+  const [staffSearchTerm, setStaffSearchTerm] = useState('');\n+  const [staffSearchResults, setStaffSearchResults] = useState<SearchResultItem[]>([]);\n   const joinPaths = ['지인소개', '당근마켓', '네이버 플레이스', '전화', '워크인', '현수막', '인스타', '광고지', '기타'];\n \n   // 컴포넌트 마운트 시 데이터 로드\n   useEffect(() => {\n@@ -42,16 +45,60 @@\n   // 지점 옵션 생성\n   const getBranchOptions = () => \n     branches.map(branch => ({ value: branch.id, label: branch.name }));\n \n-  // 직원 옵션 생성\n-  const getStaffOptions = () => \n-    staff.map(employee => ({ value: employee.id, label: employee.name }));\n-\n   // 가입경로 옵션 생성\n   const getJoinPathOptions = () => \n     joinPaths.map(path => ({ value: path, label: path }));\n \n+  // 직원 검색 함수\n+  const handleStaffSearch = (searchTerm: string) => {\n+    if (!searchTerm.trim()) {\n+      setStaffSearchResults([]);\n+      return;\n+    }\n+\n+    const filteredStaff = staff.filter(employee => \n+      employee.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+      employee.role.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+      employee.position.toLowerCase().includes(searchTerm.toLowerCase())\n+    );\n+\n+    const searchResults: SearchResultItem[] = filteredStaff.map(employee => ({\n+      id: employee.id,\n+      title: employee.name,\n+      subtitle: `${employee.position} | ${employee.role}`,\n+      description: `연락처: ${employee.phone}`,\n+      data: employee\n+    }));\n+\n+    setStaffSearchResults(searchResults);\n+  };\n+\n+  // 직원 선택 함수\n+  const handleStaffSelect = (item: SearchResultItem) => {\n+    if (typeof item === 'object' && 'data' in item) {\n+      const selectedEmployee = item.data as Staff;\n+      handleInputChange('coach', selectedEmployee.id);\n+    }\n+  };\n+\n+  // 직원 선택 해제 함수\n+  const handleStaffClear = () => {\n+    setStaffSearchTerm('');\n+    setStaffSearchResults([]);\n+    handleInputChange('coach', '');\n+  };\n+\n+  // 선택된 직원 정보 가져오기\n+  const getSelectedStaffName = () => {\n+    if (formData.joinInfo.coach) {\n+      const selectedEmployee = staff.find(emp => emp.id === formData.joinInfo.coach);\n+      return selectedEmployee ? selectedEmployee.name : '';\n+    }\n+    return '';\n+  };\n+\n   const handleInputChange = (field: keyof JoinInfo, value: string | boolean) => {\n     onUpdate({\n       joinInfo: { ...formData.joinInfo, [field]: value }\n     });\n@@ -73,14 +120,18 @@\n         </FormField>\n \n         <FormField>\n           <Label>담당 직원 *</Label>\n-          <CustomDropdown\n-            value={formData.joinInfo.coach}\n-            onChange={(value: string) => handleInputChange('coach', value)}\n-            options={getStaffOptions()}\n-            placeholder=\"담당 직원을 선택하세요\"\n-            required\n+          <AppSearchDropdown\n+            selectedValue={getSelectedStaffName()}\n+            searchTerm={staffSearchTerm}\n+            onSearchTermChange={setStaffSearchTerm}\n+            onSearch={handleStaffSearch}\n+            onSelectItem={handleStaffSelect}\n+            onClear={handleStaffClear}\n+            results={staffSearchResults}\n+            label=\"담당 직원\"\n+            placeholder=\"직원 이름, 직급, 직책으로 검색하세요\"\n           />\n         </FormField>\n \n         <FormField>\n"
                },
                {
                    "date": 1760250620491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,19 @@\n import React, { useState, useEffect } from 'react';\n-import { StepContent, StepTitle, FormGrid, FormField, Label, Input, CheckboxLabel, Checkbox } from './StyledComponents';\n+import { StepContent, StepTitle, FormGrid, FormField, Label, CheckboxLabel, Checkbox } from './StyledComponents';\n import { JoinInfo, StepProps } from './types';\n import CustomDropdown from '../../../components/CustomDropdown';\n import { AppSearchDropdown, SearchResultItem } from '../../../customComponents/AppSearchDropdown';\n+import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n+import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n import { dbManager, type Branch, type Staff } from '../../../utils/indexedDB';\n \n const JoinInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [staff, setStaff] = useState<Staff[]>([]);\n   const [staffSearchTerm, setStaffSearchTerm] = useState('');\n   const [staffSearchResults, setStaffSearchResults] = useState<SearchResultItem[]>([]);\n+  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n   const joinPaths = ['지인소개', '당근마켓', '네이버 플레이스', '전화', '워크인', '현수막', '인스타', '광고지', '기타'];\n \n   // 컴포넌트 마운트 시 데이터 로드\n   useEffect(() => {\n@@ -101,10 +104,46 @@\n   const handleInputChange = (field: keyof JoinInfo, value: string | boolean) => {\n     onUpdate({\n       joinInfo: { ...formData.joinInfo, [field]: value }\n     });\n+\n+    // 로그인 아이디 중복 검사 (실시간)\n+    if (field === 'loginId' && typeof value === 'string') {\n+      checkLoginIdDuplicate(value);\n+    }\n   };\n \n+  // 로그인 아이디 중복 검사 함수\n+  const checkLoginIdDuplicate = async (loginId: string) => {\n+    if (!loginId.trim()) {\n+      setErrors(prev => {\n+        const newErrors = { ...prev };\n+        delete newErrors.loginId;\n+        return newErrors;\n+      });\n+      return;\n+    }\n+\n+    try {\n+      // 직원 테이블에서 중복 검사\n+      const existingStaff = await dbManager.getStaffByLoginId(loginId);\n+      if (existingStaff) {\n+        setErrors(prev => ({ \n+          ...prev, \n+          loginId: '이미 사용중인 아이디입니다.' \n+        }));\n+      } else {\n+        setErrors(prev => {\n+          const newErrors = { ...prev };\n+          delete newErrors.loginId;\n+          return newErrors;\n+        });\n+      }\n+    } catch (error) {\n+      console.error('로그인 아이디 중복 검사 실패:', error);\n+    }\n+  };\n+\n   return (\n     <StepContent>\n       <StepTitle>가입정보</StepTitle>\n       <FormGrid>\n@@ -157,23 +196,23 @@\n \n         {formData.joinInfo.enableLogin && (\n           <>\n             <FormField>\n-              <Label>로그인 아이디</Label>\n-              <Input\n+              <AppIdTextField\n                 value={formData.joinInfo.loginId}\n                 onChange={(e) => handleInputChange('loginId', e.target.value)}\n-                placeholder=\"아이디 입력\"\n+                label=\"로그인 아이디\"\n+                errorMessage={errors.loginId}\n               />\n             </FormField>\n \n             <FormField>\n-              <Label>로그인 비밀번호</Label>\n-              <Input\n-                type=\"password\"\n+              <AppPwdTextField\n                 value={formData.joinInfo.loginPassword}\n                 onChange={(e) => handleInputChange('loginPassword', e.target.value)}\n-                placeholder=\"비밀번호 입력\"\n+                fieldType={PwdFieldType.PASSWORD}\n+                label=\"로그인 비밀번호\"\n+                errorMessage={errors.loginPassword}\n               />\n             </FormField>\n           </>\n         )}\n"
                },
                {
                    "date": 1760250754057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,12 @@\n   // 지점 데이터 로드\n   const loadBranches = async () => {\n     try {\n       const branchData = await dbManager.getAllBranches();\n-      // 활성 지점만 필터링\n-      const activeBranches = branchData.filter(branch => branch.isActive);\n+      // 활성 지점만 필터링하고 '전체' 지점 제외 (마스터 권한용이므로)\n+      const activeBranches = branchData.filter(branch => \n+        branch.isActive && branch.name !== '전체'\n+      );\n       setBranches(activeBranches);\n     } catch (error) {\n       console.error('지점 데이터 로드 실패:', error);\n     }\n"
                },
                {
                    "date": 1760256268342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [staff, setStaff] = useState<Staff[]>([]);\n   const [staffSearchTerm, setStaffSearchTerm] = useState('');\n   const [staffSearchResults, setStaffSearchResults] = useState<SearchResultItem[]>([]);\n-  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n   const joinPaths = ['지인소개', '당근마켓', '네이버 플레이스', '전화', '워크인', '현수막', '인스타', '광고지', '기타'];\n \n   // 컴포넌트 마운트 시 데이터 로드\n   useEffect(() => {\n@@ -106,46 +105,10 @@\n   const handleInputChange = (field: keyof JoinInfo, value: string | boolean) => {\n     onUpdate({\n       joinInfo: { ...formData.joinInfo, [field]: value }\n     });\n-\n-    // 로그인 아이디 중복 검사 (실시간)\n-    if (field === 'loginId' && typeof value === 'string') {\n-      checkLoginIdDuplicate(value);\n-    }\n   };\n \n-  // 로그인 아이디 중복 검사 함수\n-  const checkLoginIdDuplicate = async (loginId: string) => {\n-    if (!loginId.trim()) {\n-      setErrors(prev => {\n-        const newErrors = { ...prev };\n-        delete newErrors.loginId;\n-        return newErrors;\n-      });\n-      return;\n-    }\n-\n-    try {\n-      // 직원 테이블에서 중복 검사\n-      const existingStaff = await dbManager.getStaffByLoginId(loginId);\n-      if (existingStaff) {\n-        setErrors(prev => ({ \n-          ...prev, \n-          loginId: '이미 사용중인 아이디입니다.' \n-        }));\n-      } else {\n-        setErrors(prev => {\n-          const newErrors = { ...prev };\n-          delete newErrors.loginId;\n-          return newErrors;\n-        });\n-      }\n-    } catch (error) {\n-      console.error('로그인 아이디 중복 검사 실패:', error);\n-    }\n-  };\n-\n   return (\n     <StepContent>\n       <StepTitle>가입정보</StepTitle>\n       <FormGrid>\n@@ -202,9 +165,8 @@\n               <AppIdTextField\n                 value={formData.joinInfo.loginId}\n                 onChange={(e) => handleInputChange('loginId', e.target.value)}\n                 label=\"로그인 아이디\"\n-                errorMessage={errors.loginId}\n               />\n             </FormField>\n \n             <FormField>\n@@ -212,9 +174,8 @@\n                 value={formData.joinInfo.loginPassword}\n                 onChange={(e) => handleInputChange('loginPassword', e.target.value)}\n                 fieldType={PwdFieldType.PASSWORD}\n                 label=\"로그인 비밀번호\"\n-                errorMessage={errors.loginPassword}\n               />\n             </FormField>\n           </>\n         )}\n"
                },
                {
                    "date": 1760257923532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import React, { useState, useEffect } from 'react';\n+import { StepContent, StepTitle, FormGrid, FormField, Label, CheckboxLabel, Checkbox } from './StyledComponents';\n+import { JoinInfo, StepProps } from './types';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import { AppSearchDropdown, SearchResultItem } from '../../../customComponents/AppSearchDropdown';\n+import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n+import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n+import { dbManager, type Branch, type Staff } from '../../../utils/indexedDB';\n+\n+const JoinInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [staff, setStaff] = useState<Staff[]>([]);\n+  const [staffSearchTerm, setStaffSearchTerm] = useState('');\n+  const [staffSearchResults, setStaffSearchResults] = useState<SearchResultItem[]>([]);\n+  const joinPaths = ['지인소개', '당근마켓', '네이버 플레이스', '전화', '워크인', '현수막', '인스타', '광고지', '기타'];\n+\n+  // 컴포넌트 마운트 시 데이터 로드\n+  useEffect(() => {\n+    loadBranches();\n+    loadStaff();\n+  }, []);\n+\n+  // 지점 데이터 로드\n+  const loadBranches = async () => {\n+    try {\n+      const branchData = await dbManager.getAllBranches();\n+      // 활성 지점만 필터링하고 '전체' 지점 제외 (마스터 권한용이므로)\n+      const activeBranches = branchData.filter(branch => \n+        branch.isActive && branch.name !== '전체'\n+      );\n+      setBranches(activeBranches);\n+    } catch (error) {\n+      console.error('지점 데이터 로드 실패:', error);\n+    }\n+  };\n+\n+  // 직원 데이터 로드\n+  const loadStaff = async () => {\n+    try {\n+      const staffData = await dbManager.getAllStaff();\n+      // 활성 직원만 필터링\n+      const activeStaff = staffData.filter(employee => employee.isActive);\n+      setStaff(activeStaff);\n+    } catch (error) {\n+      console.error('직원 데이터 로드 실패:', error);\n+    }\n+  };\n+\n+  // 지점 옵션 생성\n+  const getBranchOptions = () => \n+    branches.map(branch => ({ value: branch.id, label: branch.name }));\n+\n+  // 가입경로 옵션 생성\n+  const getJoinPathOptions = () => \n+    joinPaths.map(path => ({ value: path, label: path }));\n+\n+  // 직원 검색 함수\n+  const handleStaffSearch = (searchTerm: string) => {\n+    if (!searchTerm.trim()) {\n+      setStaffSearchResults([]);\n+      return;\n+    }\n+\n+    const filteredStaff = staff.filter(employee => \n+      employee.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+      employee.role.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+      employee.position.toLowerCase().includes(searchTerm.toLowerCase())\n+    );\n+\n+    const searchResults: SearchResultItem[] = filteredStaff.map(employee => ({\n+      id: employee.id,\n+      title: employee.name,\n+      subtitle: `${employee.position} | ${employee.role}`,\n+      description: `연락처: ${employee.phone}`,\n+      data: employee\n+    }));\n+\n+    setStaffSearchResults(searchResults);\n+  };\n+\n+  // 직원 선택 함수\n+  const handleStaffSelect = (item: SearchResultItem) => {\n+    if (typeof item === 'object' && 'data' in item) {\n+      const selectedEmployee = item.data as Staff;\n+      handleInputChange('coach', selectedEmployee.id);\n+    }\n+  };\n+\n+  // 직원 선택 해제 함수\n+  const handleStaffClear = () => {\n+    setStaffSearchTerm('');\n+    setStaffSearchResults([]);\n+    handleInputChange('coach', '');\n+  };\n+\n+  // 선택된 직원 정보 가져오기\n+  const getSelectedStaffName = () => {\n+    if (formData.joinInfo.coach) {\n+      const selectedEmployee = staff.find(emp => emp.id === formData.joinInfo.coach);\n+      return selectedEmployee ? selectedEmployee.name : '';\n+    }\n+    return '';\n+  };\n+\n+  const handleInputChange = (field: keyof JoinInfo, value: string | boolean) => {\n+    onUpdate({\n+      joinInfo: { ...formData.joinInfo, [field]: value }\n+    });\n+  };\n+\n+  return (\n+    <StepContent>\n+      <StepTitle>가입정보</StepTitle>\n+      <FormGrid>\n+        <FormField>\n+          <Label>지점 *</Label>\n+          <CustomDropdown\n+            value={formData.joinInfo.branchId}\n+            onChange={(value: string) => handleInputChange('branchId', value)}\n+            options={getBranchOptions()}\n+            placeholder=\"지점을 선택하세요\"\n+            required\n+          />\n+        </FormField>\n+\n+        <FormField>\n+          <Label>담당 직원 *</Label>\n+          <AppSearchDropdown\n+            selectedValue={getSelectedStaffName()}\n+            searchTerm={staffSearchTerm}\n+            onSearchTermChange={setStaffSearchTerm}\n+            onSearch={handleStaffSearch}\n+            onSelectItem={handleStaffSelect}\n+            onClear={handleStaffClear}\n+            results={staffSearchResults}\n+            label=\"담당 직원\"\n+            placeholder=\"직원 이름, 직급, 직책으로 검색하세요\"\n+          />\n+        </FormField>\n+\n+        <FormField>\n+          <Label>가입경로 *</Label>\n+          <CustomDropdown\n+            value={formData.joinInfo.joinPath}\n+            onChange={(value: string) => handleInputChange('joinPath', value)}\n+            options={getJoinPathOptions()}\n+            placeholder=\"가입경로를 선택하세요\"\n+            required\n+          />\n+        </FormField>\n+\n+        <FormField $fullWidth>\n+          <CheckboxLabel>\n+            <Checkbox\n+              checked={formData.joinInfo.enableLogin}\n+              onChange={(e) => handleInputChange('enableLogin', e.target.checked)}\n+            />\n+            로그인 기능 사용 (선택사항)\n+          </CheckboxLabel>\n+        </FormField>\n+\n+        {formData.joinInfo.enableLogin && (\n+          <>\n+            <FormField>\n+              <AppIdTextField\n+                value={formData.joinInfo.loginId}\n+                onChange={(e) => handleInputChange('loginId', e.target.value)}\n+                label=\"로그인 아이디\"\n+              />\n+            </FormField>\n+\n+            <FormField>\n+              <AppPwdTextField\n+                value={formData.joinInfo.loginPassword || ''} // null인 경우 빈 문자열로 변환\n+                onChange={(e) => handleInputChange('loginPassword', e.target.value)}\n+                fieldType={PwdFieldType.PASSWORD}\n+                label=\"로그인 비밀번호\"\n+              />\n+            </FormField>\n+          </>\n+        )}\n+      </FormGrid>\n+    </StepContent>\n+  );\n+};\n+\n+export default JoinInfoStep;\n"
                },
                {
                    "date": 1761371583238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,16 @@\n   // 직원 데이터 로드\n   const loadStaff = async () => {\n     try {\n       const staffData = await dbManager.getAllStaff();\n-      // 활성 직원만 필터링\n-      const activeStaff = staffData.filter(employee => employee.isActive);\n+      console.log('전체 직원 목록:', staffData);\n+      \n+      // 활성 직원만 필터링 (isActive가 undefined인 경우 true로 간주)\n+      const activeStaff = staffData.filter(employee => \n+        employee.isActive === true || employee.isActive === undefined\n+      );\n+      console.log('활성 직원 목록:', activeStaff);\n+      \n       setStaff(activeStaff);\n     } catch (error) {\n       console.error('직원 데이터 로드 실패:', error);\n     }\n@@ -60,19 +66,25 @@\n       setStaffSearchResults([]);\n       return;\n     }\n \n+    console.log('직원 검색 실행:', searchTerm);\n+    console.log('검색 대상 직원 수:', staff.length);\n+\n     const filteredStaff = staff.filter(employee => \n       employee.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n       employee.role.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-      employee.position.toLowerCase().includes(searchTerm.toLowerCase())\n+      employee.position.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+      employee.loginId.toLowerCase().includes(searchTerm.toLowerCase())\n     );\n \n+    console.log('검색 결과:', filteredStaff);\n+\n     const searchResults: SearchResultItem[] = filteredStaff.map(employee => ({\n       id: employee.id,\n       title: employee.name,\n       subtitle: `${employee.position} | ${employee.role}`,\n-      description: `연락처: ${employee.phone}`,\n+      description: `연락처: ${employee.phone} | 권한: ${employee.permission}`,\n       data: employee\n     }));\n \n     setStaffSearchResults(searchResults);\n@@ -133,9 +145,9 @@\n             onSelectItem={handleStaffSelect}\n             onClear={handleStaffClear}\n             results={staffSearchResults}\n             label=\"담당 직원\"\n-            placeholder=\"직원 이름, 직급, 직책으로 검색하세요\"\n+            placeholder=\"직원 이름, 로그인ID, 직급, 직책으로 검색하세요\"\n           />\n         </FormField>\n \n         <FormField>\n@@ -184,191 +196,4 @@\n   );\n };\n \n export default JoinInfoStep;\n-import React, { useState, useEffect } from 'react';\n-import { StepContent, StepTitle, FormGrid, FormField, Label, CheckboxLabel, Checkbox } from './StyledComponents';\n-import { JoinInfo, StepProps } from './types';\n-import CustomDropdown from '../../../components/CustomDropdown';\n-import { AppSearchDropdown, SearchResultItem } from '../../../customComponents/AppSearchDropdown';\n-import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n-import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n-import { dbManager, type Branch, type Staff } from '../../../utils/indexedDB';\n-\n-const JoinInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n-  const [branches, setBranches] = useState<Branch[]>([]);\n-  const [staff, setStaff] = useState<Staff[]>([]);\n-  const [staffSearchTerm, setStaffSearchTerm] = useState('');\n-  const [staffSearchResults, setStaffSearchResults] = useState<SearchResultItem[]>([]);\n-  const joinPaths = ['지인소개', '당근마켓', '네이버 플레이스', '전화', '워크인', '현수막', '인스타', '광고지', '기타'];\n-\n-  // 컴포넌트 마운트 시 데이터 로드\n-  useEffect(() => {\n-    loadBranches();\n-    loadStaff();\n-  }, []);\n-\n-  // 지점 데이터 로드\n-  const loadBranches = async () => {\n-    try {\n-      const branchData = await dbManager.getAllBranches();\n-      // 활성 지점만 필터링하고 '전체' 지점 제외 (마스터 권한용이므로)\n-      const activeBranches = branchData.filter(branch => \n-        branch.isActive && branch.name !== '전체'\n-      );\n-      setBranches(activeBranches);\n-    } catch (error) {\n-      console.error('지점 데이터 로드 실패:', error);\n-    }\n-  };\n-\n-  // 직원 데이터 로드\n-  const loadStaff = async () => {\n-    try {\n-      const staffData = await dbManager.getAllStaff();\n-      // 활성 직원만 필터링\n-      const activeStaff = staffData.filter(employee => employee.isActive);\n-      setStaff(activeStaff);\n-    } catch (error) {\n-      console.error('직원 데이터 로드 실패:', error);\n-    }\n-  };\n-\n-  // 지점 옵션 생성\n-  const getBranchOptions = () => \n-    branches.map(branch => ({ value: branch.id, label: branch.name }));\n-\n-  // 가입경로 옵션 생성\n-  const getJoinPathOptions = () => \n-    joinPaths.map(path => ({ value: path, label: path }));\n-\n-  // 직원 검색 함수\n-  const handleStaffSearch = (searchTerm: string) => {\n-    if (!searchTerm.trim()) {\n-      setStaffSearchResults([]);\n-      return;\n-    }\n-\n-    const filteredStaff = staff.filter(employee => \n-      employee.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-      employee.role.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-      employee.position.toLowerCase().includes(searchTerm.toLowerCase())\n-    );\n-\n-    const searchResults: SearchResultItem[] = filteredStaff.map(employee => ({\n-      id: employee.id,\n-      title: employee.name,\n-      subtitle: `${employee.position} | ${employee.role}`,\n-      description: `연락처: ${employee.phone}`,\n-      data: employee\n-    }));\n-\n-    setStaffSearchResults(searchResults);\n-  };\n-\n-  // 직원 선택 함수\n-  const handleStaffSelect = (item: SearchResultItem) => {\n-    if (typeof item === 'object' && 'data' in item) {\n-      const selectedEmployee = item.data as Staff;\n-      handleInputChange('coach', selectedEmployee.id);\n-    }\n-  };\n-\n-  // 직원 선택 해제 함수\n-  const handleStaffClear = () => {\n-    setStaffSearchTerm('');\n-    setStaffSearchResults([]);\n-    handleInputChange('coach', '');\n-  };\n-\n-  // 선택된 직원 정보 가져오기\n-  const getSelectedStaffName = () => {\n-    if (formData.joinInfo.coach) {\n-      const selectedEmployee = staff.find(emp => emp.id === formData.joinInfo.coach);\n-      return selectedEmployee ? selectedEmployee.name : '';\n-    }\n-    return '';\n-  };\n-\n-  const handleInputChange = (field: keyof JoinInfo, value: string | boolean) => {\n-    onUpdate({\n-      joinInfo: { ...formData.joinInfo, [field]: value }\n-    });\n-  };\n-\n-  return (\n-    <StepContent>\n-      <StepTitle>가입정보</StepTitle>\n-      <FormGrid>\n-        <FormField>\n-          <Label>지점 *</Label>\n-          <CustomDropdown\n-            value={formData.joinInfo.branchId}\n-            onChange={(value: string) => handleInputChange('branchId', value)}\n-            options={getBranchOptions()}\n-            placeholder=\"지점을 선택하세요\"\n-            required\n-          />\n-        </FormField>\n-\n-        <FormField>\n-          <Label>담당 직원 *</Label>\n-          <AppSearchDropdown\n-            selectedValue={getSelectedStaffName()}\n-            searchTerm={staffSearchTerm}\n-            onSearchTermChange={setStaffSearchTerm}\n-            onSearch={handleStaffSearch}\n-            onSelectItem={handleStaffSelect}\n-            onClear={handleStaffClear}\n-            results={staffSearchResults}\n-            label=\"담당 직원\"\n-            placeholder=\"직원 이름, 직급, 직책으로 검색하세요\"\n-          />\n-        </FormField>\n-\n-        <FormField>\n-          <Label>가입경로 *</Label>\n-          <CustomDropdown\n-            value={formData.joinInfo.joinPath}\n-            onChange={(value: string) => handleInputChange('joinPath', value)}\n-            options={getJoinPathOptions()}\n-            placeholder=\"가입경로를 선택하세요\"\n-            required\n-          />\n-        </FormField>\n-\n-        <FormField $fullWidth>\n-          <CheckboxLabel>\n-            <Checkbox\n-              checked={formData.joinInfo.enableLogin}\n-              onChange={(e) => handleInputChange('enableLogin', e.target.checked)}\n-            />\n-            로그인 기능 사용 (선택사항)\n-          </CheckboxLabel>\n-        </FormField>\n-\n-        {formData.joinInfo.enableLogin && (\n-          <>\n-            <FormField>\n-              <AppIdTextField\n-                value={formData.joinInfo.loginId}\n-                onChange={(e) => handleInputChange('loginId', e.target.value)}\n-                label=\"로그인 아이디\"\n-              />\n-            </FormField>\n-\n-            <FormField>\n-              <AppPwdTextField\n-                value={formData.joinInfo.loginPassword}\n-                onChange={(e) => handleInputChange('loginPassword', e.target.value)}\n-                fieldType={PwdFieldType.PASSWORD}\n-                label=\"로그인 비밀번호\"\n-              />\n-            </FormField>\n-          </>\n-        )}\n-      </FormGrid>\n-    </StepContent>\n-  );\n-};\n-\n-export default JoinInfoStep;\n"
                },
                {
                    "date": 1761372724951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,11 @@\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [staff, setStaff] = useState<Staff[]>([]);\n   const [staffSearchTerm, setStaffSearchTerm] = useState('');\n   const [staffSearchResults, setStaffSearchResults] = useState<SearchResultItem[]>([]);\n-  const joinPaths = ['지인소개', '당근마켓', '네이버 플레이스', '전화', '워크인', '현수막', '인스타', '광고지', '기타'];\n+  const [referrerSearchTerm, setReferrerSearchTerm] = useState('');\n+  const [referrerSearchResults, setReferrerSearchResults] = useState<SearchResultItem[]>([]);\n+  const joinPaths = ['지인추천', '당근마켓', '네이버 플레이스', '전화', '워크인', '현수막', '인스타', '광고지', '기타'];\n \n   // 컴포넌트 마운트 시 데이터 로드\n   useEffect(() => {\n     loadBranches();\n@@ -104,8 +106,64 @@\n     setStaffSearchResults([]);\n     handleInputChange('coach', '');\n   };\n \n+  // 지인추천인 검색 함수\n+  const handleReferrerSearch = (searchTerm: string) => {\n+    if (!searchTerm.trim()) {\n+      setReferrerSearchResults([]);\n+      return;\n+    }\n+\n+    console.log('지인추천인 검색 실행:', searchTerm);\n+    console.log('검색 대상 직원 수:', staff.length);\n+\n+    const filteredStaff = staff.filter(employee => \n+      employee.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+      employee.role.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+      employee.position.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+      employee.loginId.toLowerCase().includes(searchTerm.toLowerCase())\n+    );\n+\n+    console.log('지인추천인 검색 결과:', filteredStaff);\n+\n+    const searchResults: SearchResultItem[] = filteredStaff.map(employee => ({\n+      id: employee.id,\n+      title: employee.name,\n+      subtitle: `${employee.position} | ${employee.role}`,\n+      description: `연락처: ${employee.phone} | 권한: ${employee.permission}`,\n+      data: employee\n+    }));\n+\n+    setReferrerSearchResults(searchResults);\n+  };\n+\n+  // 지인추천인 선택 함수\n+  const handleReferrerSelect = (item: SearchResultItem) => {\n+    if (typeof item === 'object' && 'data' in item) {\n+      const selectedEmployee = item.data as Staff;\n+      handleInputChange('referrerId', selectedEmployee.id);\n+      handleInputChange('referrerName', selectedEmployee.name);\n+    }\n+  };\n+\n+  // 지인추천인 선택 해제 함수\n+  const handleReferrerClear = () => {\n+    setReferrerSearchTerm('');\n+    setReferrerSearchResults([]);\n+    handleInputChange('referrerId', '');\n+    handleInputChange('referrerName', '');\n+  };\n+\n+  // 선택된 지인추천인 정보 가져오기\n+  const getSelectedReferrerName = () => {\n+    if (formData.joinInfo.referrerId) {\n+      const selectedEmployee = staff.find(emp => emp.id === formData.joinInfo.referrerId);\n+      return selectedEmployee ? selectedEmployee.name : '';\n+    }\n+    return '';\n+  };\n+\n   // 선택된 직원 정보 가져오기\n   const getSelectedStaffName = () => {\n     if (formData.joinInfo.coach) {\n       const selectedEmployee = staff.find(emp => emp.id === formData.joinInfo.coach);\n@@ -153,15 +211,40 @@\n         <FormField>\n           <Label>가입경로 *</Label>\n           <CustomDropdown\n             value={formData.joinInfo.joinPath}\n-            onChange={(value: string) => handleInputChange('joinPath', value)}\n+            onChange={(value: string) => {\n+              handleInputChange('joinPath', value);\n+              // 가입경로가 지인추천이 아닐 때는 지인추천인 정보 초기화\n+              if (value !== '지인추천') {\n+                handleInputChange('referrerId', '');\n+                handleInputChange('referrerName', '');\n+              }\n+            }}\n             options={getJoinPathOptions()}\n             placeholder=\"가입경로를 선택하세요\"\n             required\n           />\n         </FormField>\n \n+        {/* 지인추천일 때만 지인추천인 검색 필드 표시 */}\n+        {formData.joinInfo.joinPath === '지인추천' && (\n+          <FormField>\n+            <Label>지인추천인 *</Label>\n+            <AppSearchDropdown\n+              selectedValue={getSelectedReferrerName()}\n+              searchTerm={referrerSearchTerm}\n+              onSearchTermChange={setReferrerSearchTerm}\n+              onSearch={handleReferrerSearch}\n+              onSelectItem={handleReferrerSelect}\n+              onClear={handleReferrerClear}\n+              results={referrerSearchResults}\n+              label=\"지인추천인\"\n+              placeholder=\"추천인 이름, 로그인ID, 직급, 직책으로 검색하세요\"\n+            />\n+          </FormField>\n+        )}\n+\n         <FormField $fullWidth>\n           <CheckboxLabel>\n             <Checkbox\n               checked={formData.joinInfo.enableLogin}\n"
                },
                {
                    "date": 1761373128116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,14 @@\n import CustomDropdown from '../../../components/CustomDropdown';\n import { AppSearchDropdown, SearchResultItem } from '../../../customComponents/AppSearchDropdown';\n import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n-import { dbManager, type Branch, type Staff } from '../../../utils/indexedDB';\n+import { dbManager, type Branch, type Staff, type Member } from '../../../utils/indexedDB';\n \n const JoinInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [staff, setStaff] = useState<Staff[]>([]);\n+  const [members, setMembers] = useState<Member[]>([]);\n   const [staffSearchTerm, setStaffSearchTerm] = useState('');\n   const [staffSearchResults, setStaffSearchResults] = useState<SearchResultItem[]>([]);\n   const [referrerSearchTerm, setReferrerSearchTerm] = useState('');\n   const [referrerSearchResults, setReferrerSearchResults] = useState<SearchResultItem[]>([]);\n@@ -19,8 +20,9 @@\n   // 컴포넌트 마운트 시 데이터 로드\n   useEffect(() => {\n     loadBranches();\n     loadStaff();\n+    loadMembers();\n   }, []);\n \n   // 지점 데이터 로드\n   const loadBranches = async () => {\n@@ -53,8 +55,26 @@\n       console.error('직원 데이터 로드 실패:', error);\n     }\n   };\n \n+  // 회원 데이터 로드\n+  const loadMembers = async () => {\n+    try {\n+      const memberData = await dbManager.getAllMembers();\n+      console.log('전체 회원 목록:', memberData);\n+      \n+      // 활성 회원만 필터링\n+      const activeMembers = memberData.filter(member => \n+        member.isActive === true || member.isActive === undefined\n+      );\n+      console.log('활성 회원 목록:', activeMembers);\n+      \n+      setMembers(activeMembers);\n+    } catch (error) {\n+      console.error('회원 데이터 로드 실패:', error);\n+    }\n+  };\n+\n   // 지점 옵션 생성\n   const getBranchOptions = () => \n     branches.map(branch => ({ value: branch.id, label: branch.name }));\n \n@@ -114,36 +134,43 @@\n       return;\n     }\n \n     console.log('지인추천인 검색 실행:', searchTerm);\n-    console.log('검색 대상 직원 수:', staff.length);\n+    console.log('검색 대상 회원 수:', members.length);\n \n-    const filteredStaff = staff.filter(employee => \n-      employee.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-      employee.role.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-      employee.position.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-      employee.loginId.toLowerCase().includes(searchTerm.toLowerCase())\n+    const filteredMembers = members.filter(member => \n+      member.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+      member.phone.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+      (member.email && member.email.toLowerCase().includes(searchTerm.toLowerCase())) ||\n+      (member.loginId && member.loginId.toLowerCase().includes(searchTerm.toLowerCase()))\n     );\n \n-    console.log('지인추천인 검색 결과:', filteredStaff);\n+    console.log('지인추천인 검색 결과:', filteredMembers);\n \n-    const searchResults: SearchResultItem[] = filteredStaff.map(employee => ({\n-      id: employee.id,\n-      title: employee.name,\n-      subtitle: `${employee.position} | ${employee.role}`,\n-      description: `연락처: ${employee.phone} | 권한: ${employee.permission}`,\n-      data: employee\n+    const searchResults: SearchResultItem[] = filteredMembers.map(member => ({\n+      id: member.id,\n+      title: member.name,\n+      subtitle: `${member.phone} | ${member.branchName || '지점정보없음'}`,\n+      description: `이메일: ${member.email || '없음'} | 등록일: ${new Date(member.registrationDate).toLocaleDateString()}`,\n+      data: member\n     }));\n \n     setReferrerSearchResults(searchResults);\n   };\n \n   // 지인추천인 선택 함수\n   const handleReferrerSelect = (item: SearchResultItem) => {\n     if (typeof item === 'object' && 'data' in item) {\n-      const selectedEmployee = item.data as Staff;\n-      handleInputChange('referrerId', selectedEmployee.id);\n-      handleInputChange('referrerName', selectedEmployee.name);\n+      const selectedMember = item.data as Member;\n+      console.log('지인추천인 선택됨:', selectedMember);\n+      console.log('선택된 회원 ID:', selectedMember.id);\n+      console.log('선택된 회원 이름:', selectedMember.name);\n+      \n+      handleInputChange('referrerId', selectedMember.id);\n+      handleInputChange('referrerName', selectedMember.name);\n+      \n+      console.log('업데이트된 formData.joinInfo.referrerId:', selectedMember.id);\n+      console.log('업데이트된 formData.joinInfo.referrerName:', selectedMember.name);\n     }\n   };\n \n   // 지인추천인 선택 해제 함수\n@@ -155,12 +182,17 @@\n   };\n \n   // 선택된 지인추천인 정보 가져오기\n   const getSelectedReferrerName = () => {\n-    if (formData.joinInfo.referrerId) {\n-      const selectedEmployee = staff.find(emp => emp.id === formData.joinInfo.referrerId);\n-      return selectedEmployee ? selectedEmployee.name : '';\n+    console.log('getSelectedReferrerName 호출됨');\n+    console.log('formData.joinInfo.referrerId:', formData.joinInfo.referrerId);\n+    console.log('formData.joinInfo.referrerName:', formData.joinInfo.referrerName);\n+    \n+    if (formData.joinInfo.referrerId && formData.joinInfo.referrerName) {\n+      console.log('선택된 추천인 이름 반환:', formData.joinInfo.referrerName);\n+      return formData.joinInfo.referrerName;\n     }\n+    console.log('선택된 추천인 없음, 빈 문자열 반환');\n     return '';\n   };\n \n   // 선택된 직원 정보 가져오기\n@@ -172,10 +204,14 @@\n     return '';\n   };\n \n   const handleInputChange = (field: keyof JoinInfo, value: string | boolean) => {\n+    console.log(`handleInputChange 호출됨: ${field} = ${value}`);\n+    const updatedJoinInfo = { ...formData.joinInfo, [field]: value };\n+    console.log('업데이트된 joinInfo:', updatedJoinInfo);\n+    \n     onUpdate({\n-      joinInfo: { ...formData.joinInfo, [field]: value }\n+      joinInfo: updatedJoinInfo\n     });\n   };\n \n   return (\n@@ -229,19 +265,46 @@\n         {/* 지인추천일 때만 지인추천인 검색 필드 표시 */}\n         {formData.joinInfo.joinPath === '지인추천' && (\n           <FormField>\n             <Label>지인추천인 *</Label>\n-            <AppSearchDropdown\n-              selectedValue={getSelectedReferrerName()}\n-              searchTerm={referrerSearchTerm}\n-              onSearchTermChange={setReferrerSearchTerm}\n-              onSearch={handleReferrerSearch}\n-              onSelectItem={handleReferrerSelect}\n-              onClear={handleReferrerClear}\n-              results={referrerSearchResults}\n-              label=\"지인추천인\"\n-              placeholder=\"추천인 이름, 로그인ID, 직급, 직책으로 검색하세요\"\n-            />\n+            {formData.joinInfo.referrerName ? (\n+              <div style={{\n+                padding: '12px',\n+                border: '1px solid #ddd',\n+                borderRadius: '8px',\n+                backgroundColor: '#f8f9fa',\n+                display: 'flex',\n+                justifyContent: 'space-between',\n+                alignItems: 'center'\n+              }}>\n+                <span>{formData.joinInfo.referrerName}</span>\n+                <button\n+                  type=\"button\"\n+                  onClick={handleReferrerClear}\n+                  style={{\n+                    background: 'none',\n+                    border: 'none',\n+                    cursor: 'pointer',\n+                    color: '#dc3545',\n+                    fontSize: '16px'\n+                  }}\n+                >\n+                  ✕\n+                </button>\n+              </div>\n+            ) : (\n+              <AppSearchDropdown\n+                selectedValue={getSelectedReferrerName()}\n+                searchTerm={referrerSearchTerm}\n+                onSearchTermChange={setReferrerSearchTerm}\n+                onSearch={handleReferrerSearch}\n+                onSelectItem={handleReferrerSelect}\n+                onClear={handleReferrerClear}\n+                results={referrerSearchResults}\n+                label=\"지인추천인\"\n+                placeholder=\"추천인 이름, 연락처, 이메일, 로그인ID로 검색하세요\"\n+              />\n+            )}\n           </FormField>\n         )}\n \n         <FormField $fullWidth>\n"
                },
                {
                    "date": 1761373509067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,22 +164,38 @@\n       console.log('지인추천인 선택됨:', selectedMember);\n       console.log('선택된 회원 ID:', selectedMember.id);\n       console.log('선택된 회원 이름:', selectedMember.name);\n       \n-      handleInputChange('referrerId', selectedMember.id);\n-      handleInputChange('referrerName', selectedMember.name);\n+      // 한 번에 두 필드를 모두 업데이트\n+      const updatedJoinInfo = {\n+        ...formData.joinInfo,\n+        referrerId: selectedMember.id,\n+        referrerName: selectedMember.name\n+      };\n       \n-      console.log('업데이트된 formData.joinInfo.referrerId:', selectedMember.id);\n-      console.log('업데이트된 formData.joinInfo.referrerName:', selectedMember.name);\n+      console.log('한번에 업데이트할 joinInfo:', updatedJoinInfo);\n+      \n+      onUpdate({\n+        joinInfo: updatedJoinInfo\n+      });\n     }\n   };\n \n   // 지인추천인 선택 해제 함수\n   const handleReferrerClear = () => {\n     setReferrerSearchTerm('');\n     setReferrerSearchResults([]);\n-    handleInputChange('referrerId', '');\n-    handleInputChange('referrerName', '');\n+    \n+    // 한 번에 두 필드를 모두 해제\n+    const updatedJoinInfo = {\n+      ...formData.joinInfo,\n+      referrerId: '',\n+      referrerName: ''\n+    };\n+    \n+    onUpdate({\n+      joinInfo: updatedJoinInfo\n+    });\n   };\n \n   // 선택된 지인추천인 정보 가져오기\n   const getSelectedReferrerName = () => {\n@@ -248,13 +264,21 @@\n           <Label>가입경로 *</Label>\n           <CustomDropdown\n             value={formData.joinInfo.joinPath}\n             onChange={(value: string) => {\n-              handleInputChange('joinPath', value);\n-              // 가입경로가 지인추천이 아닐 때는 지인추천인 정보 초기화\n               if (value !== '지인추천') {\n-                handleInputChange('referrerId', '');\n-                handleInputChange('referrerName', '');\n+                // 가입경로가 지인추천이 아닐 때는 지인추천인 정보 초기화\n+                const updatedJoinInfo = {\n+                  ...formData.joinInfo,\n+                  joinPath: value,\n+                  referrerId: '',\n+                  referrerName: ''\n+                };\n+                onUpdate({\n+                  joinInfo: updatedJoinInfo\n+                });\n+              } else {\n+                handleInputChange('joinPath', value);\n               }\n             }}\n             options={getJoinPathOptions()}\n             placeholder=\"가입경로를 선택하세요\"\n"
                }
            ],
            "date": 1760248001088,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport { StepContent, StepTitle, FormGrid, FormField, Label, Input, Select, CheckboxLabel, Checkbox } from './StyledComponents';\nimport { JoinInfo, StepProps } from './types';\n\nconst JoinInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n  const coaches = ['한수민', '임정현', '민웅희', '김코치', '이코치'];\n  const joinPaths = ['인터넷 검색', '지인 추천', '광고', '직접 방문', '기타'];\n\n  const handleInputChange = (field: keyof JoinInfo, value: string | boolean) => {\n    onUpdate({\n      joinInfo: { ...formData.joinInfo, [field]: value }\n    });\n  };\n\n  return (\n    <StepContent>\n      <StepTitle>가입정보</StepTitle>\n      <FormGrid>\n        <FormField>\n          <Label>담당 코치 *</Label>\n          <Select\n            value={formData.joinInfo.coach}\n            onChange={(e) => handleInputChange('coach', e.target.value)}\n          >\n            <option value=\"\">선택하세요</option>\n            {coaches.map(coach => (\n              <option key={coach} value={coach}>{coach}</option>\n            ))}\n          </Select>\n        </FormField>\n\n        <FormField>\n          <Label>가입경로 *</Label>\n          <Select\n            value={formData.joinInfo.joinPath}\n            onChange={(e) => handleInputChange('joinPath', e.target.value)}\n          >\n            <option value=\"\">선택하세요</option>\n            {joinPaths.map(path => (\n              <option key={path} value={path}>{path}</option>\n            ))}\n          </Select>\n        </FormField>\n\n        <FormField $fullWidth>\n          <CheckboxLabel>\n            <Checkbox\n              checked={formData.joinInfo.enableLogin}\n              onChange={(e) => handleInputChange('enableLogin', e.target.checked)}\n            />\n            로그인 기능 사용 (선택사항)\n          </CheckboxLabel>\n        </FormField>\n\n        {formData.joinInfo.enableLogin && (\n          <>\n            <FormField>\n              <Label>로그인 아이디</Label>\n              <Input\n                value={formData.joinInfo.loginId}\n                onChange={(e) => handleInputChange('loginId', e.target.value)}\n                placeholder=\"아이디 입력\"\n              />\n            </FormField>\n\n            <FormField>\n              <Label>로그인 비밀번호</Label>\n              <Input\n                type=\"password\"\n                value={formData.joinInfo.loginPassword}\n                onChange={(e) => handleInputChange('loginPassword', e.target.value)}\n                placeholder=\"비밀번호 입력\"\n              />\n            </FormField>\n          </>\n        )}\n      </FormGrid>\n    </StepContent>\n  );\n};\n\nexport default JoinInfoStep;\n"
        }
    ]
}