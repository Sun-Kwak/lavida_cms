{
    "sourceFile": "src/pages/CMS/Member/QRCheckin.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759105835943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759105835943,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport CMSLayout from '../../../components/CMSLayout';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\n\nconst PageContainer = styled.div`\n  width: 100%;\n  max-width: 800px;\n  margin: 0 auto;\n`;\n\nconst PageHeader = styled.div`\n  margin-bottom: 24px;\n`;\n\nconst PageTitle = styled.h1`\n  font-size: ${AppTextStyles.title1.fontSize};\n  font-weight: 700;\n  color: ${AppColors.onBackground};\n  margin: 0 0 8px 0;\n`;\n\nconst PageDescription = styled.p`\n  font-size: ${AppTextStyles.body1.fontSize};\n  color: ${AppColors.onInput1};\n  margin: 0;\n`;\n\nconst Card = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  padding: 24px;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n  margin-bottom: 24px;\n`;\n\nconst QRContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n  text-align: center;\n`;\n\nconst QRPlaceholder = styled.div`\n  width: 200px;\n  height: 200px;\n  border: 2px dashed ${AppColors.borderLight};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: ${AppColors.background};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onInput1};\n`;\n\nconst InfoGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 16px;\n  margin-top: 20px;\n  \n  @media (max-width: 600px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nconst InfoCard = styled.div`\n  background: ${AppColors.background};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 12px;\n  padding: 16px;\n`;\n\nconst InfoLabel = styled.div`\n  font-size: ${AppTextStyles.label2.fontSize};\n  color: ${AppColors.onInput1};\n  margin-bottom: 4px;\n`;\n\nconst InfoValue = styled.div`\n  font-size: ${AppTextStyles.title3.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n`;\n\nconst Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n  padding: 12px 24px;\n  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n  border-radius: 8px;\n  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    opacity: 0.9;\n  }\n`;\n\nconst CheckinLog = styled.div`\n  max-height: 300px;\n  overflow-y: auto;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  padding: 16px;\n`;\n\nconst LogItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  \n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst LogInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nconst LogName = styled.span`\n  font-weight: 600;\n  font-size: ${AppTextStyles.body1.fontSize};\n`;\n\nconst LogDetails = styled.span`\n  font-size: ${AppTextStyles.label2.fontSize};\n  color: ${AppColors.onInput1};\n`;\n\nconst LogTime = styled.span`\n  font-size: ${AppTextStyles.label2.fontSize};\n  color: ${AppColors.onInput1};\n`;\n\ninterface CheckinRecord {\n  id: string;\n  memberName: string;\n  memberId: string;\n  checkInTime: string;\n  program: string;\n}\n\nconst DUMMY_CHECKINS: CheckinRecord[] = [\n  {\n    id: '1',\n    memberName: '김라비',\n    memberId: 'LV0001',\n    checkInTime: '2025-09-27 09:30',\n    program: 'WBM'\n  },\n  {\n    id: '2',\n    memberName: '박봄',\n    memberId: 'LV0002',\n    checkInTime: '2025-09-27 10:15',\n    program: '릴렉싱'\n  },\n  {\n    id: '3',\n    memberName: '이지유',\n    memberId: 'LV0004',\n    checkInTime: '2025-09-27 11:00',\n    program: 'WBM'\n  },\n];\n\nconst QRCheckin: React.FC = () => {\n  const [todayCheckins] = useState<CheckinRecord[]>(DUMMY_CHECKINS);\n  const [isQRActive, setIsQRActive] = useState<boolean>(false);\n\n  const handleStartQR = () => {\n    setIsQRActive(true);\n    alert('QR 체크인이 활성화되었습니다. 회원들이 QR 코드를 스캔하여 체크인할 수 있습니다.');\n  };\n\n  const handleStopQR = () => {\n    setIsQRActive(false);\n    alert('QR 체크인이 비활성화되었습니다.');\n  };\n\n  const handleGenerateQR = () => {\n    alert('새로운 QR 코드를 생성합니다. 이전 QR 코드는 무효화됩니다.');\n  };\n\n  const todayStats = {\n    totalCheckins: todayCheckins.length,\n    wbmCheckins: todayCheckins.filter(c => c.program === 'WBM').length,\n    relaxingCheckins: todayCheckins.filter(c => c.program === '릴렉싱').length,\n    lastCheckinTime: todayCheckins.length > 0 ? todayCheckins[0].checkInTime.split(' ')[1] : '-'\n  };\n\n  return (\n    <CMSLayout currentPath=\"/cms/member/qr-checkin\">\n      <PageContainer>\n        <PageHeader>\n          <PageTitle>QR 체크인</PageTitle>\n          <PageDescription>QR 코드를 이용한 간편한 회원 체크인 시스템입니다.</PageDescription>\n        </PageHeader>\n\n        <Card>\n          <QRContainer>\n            <QRPlaceholder>\n              {isQRActive ? 'QR 코드 활성화됨' : 'QR 코드가 비활성화되어 있습니다'}\n            </QRPlaceholder>\n            \n            <div style={{ display: 'flex', gap: '12px', flexWrap: 'wrap', justifyContent: 'center' }}>\n              {!isQRActive ? (\n                <Button onClick={handleStartQR}>QR 체크인 시작</Button>\n              ) : (\n                <Button variant=\"secondary\" onClick={handleStopQR}>QR 체크인 중지</Button>\n              )}\n              <Button variant=\"secondary\" onClick={handleGenerateQR}>\n                새 QR 코드 생성\n              </Button>\n            </div>\n\n            <InfoGrid>\n              <InfoCard>\n                <InfoLabel>오늘 총 체크인</InfoLabel>\n                <InfoValue>{todayStats.totalCheckins}명</InfoValue>\n              </InfoCard>\n              <InfoCard>\n                <InfoLabel>마지막 체크인</InfoLabel>\n                <InfoValue>{todayStats.lastCheckinTime}</InfoValue>\n              </InfoCard>\n              <InfoCard>\n                <InfoLabel>WBM 체크인</InfoLabel>\n                <InfoValue>{todayStats.wbmCheckins}명</InfoValue>\n              </InfoCard>\n              <InfoCard>\n                <InfoLabel>릴렉싱 체크인</InfoLabel>\n                <InfoValue>{todayStats.relaxingCheckins}명</InfoValue>\n              </InfoCard>\n            </InfoGrid>\n          </QRContainer>\n        </Card>\n\n        <Card>\n          <h3 style={{ \n            fontSize: AppTextStyles.title3.fontSize, \n            fontWeight: 600, \n            marginBottom: '16px' \n          }}>\n            오늘의 체크인 기록\n          </h3>\n          \n          <CheckinLog>\n            {todayCheckins.length > 0 ? (\n              todayCheckins.map(record => (\n                <LogItem key={record.id}>\n                  <LogInfo>\n                    <LogName>{record.memberName}</LogName>\n                    <LogDetails>{record.memberId} • {record.program}</LogDetails>\n                  </LogInfo>\n                  <LogTime>{record.checkInTime}</LogTime>\n                </LogItem>\n              ))\n            ) : (\n              <div style={{ \n                textAlign: 'center', \n                padding: '40px 20px', \n                color: AppColors.onInput1 \n              }}>\n                오늘 체크인 기록이 없습니다.\n              </div>\n            )}\n          </CheckinLog>\n        </Card>\n      </PageContainer>\n    </CMSLayout>\n  );\n};\n\nexport default QRCheckin;\n"
        }
    ]
}