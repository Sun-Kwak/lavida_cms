{
    "sourceFile": "src/pages/CMS/Member/MemberSearch.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1759105836006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760253496959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n-import React, { useState } from 'react';\n+import React, { useState, useEffect } from 'react';\n import styled from 'styled-components';\n-import CMSLayout from '../../../components/CMSLayout';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, type Member as DBMember } from '../../../utils/indexedDB';\n+import { openPreviewWindow } from './PreviewDocument';\n+import { MemberFormData } from './types';\n \n const PageContainer = styled.div`\n   width: 100%;\n `;\n@@ -53,57 +55,67 @@\n   transition: all 0.2s;\n   \n   &:hover {\n     opacity: 0.9;\n+    transform: translateY(-1px);\n   }\n+  \n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+    transform: none;\n+  }\n `;\n \n const FilterRow = styled.div<{ $visible: boolean }>`\n   display: ${props => props.$visible ? 'flex' : 'none'};\n   gap: 8px;\n+  align-items: center;\n   flex-wrap: wrap;\n-  align-items: center;\n `;\n \n const FilterLabel = styled.span`\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  color: ${AppColors.onSurface};\n-  margin-right: 8px;\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  color: ${AppColors.onInput1};\n+  font-weight: 500;\n `;\n \n-const FilterChip = styled.button<{ $active?: boolean }>`\n+const FilterChip = styled.button<{ $active: boolean }>`\n   padding: 6px 12px;\n-  border-radius: 16px;\n   border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n+  border-radius: 20px;\n   background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n   color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n   font-size: ${AppTextStyles.label2.fontSize};\n   cursor: pointer;\n   transition: all 0.2s;\n   \n   &:hover {\n-    background: ${props => props.$active ? AppColors.primary : AppColors.primary}10;\n+    border-color: ${AppColors.primary};\n+    background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n   }\n `;\n \n const ResultsSection = styled.div`\n   background: ${AppColors.surface};\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 16px;\n+  overflow: hidden;\n   box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n `;\n \n const ResultsHeader = styled.div`\n-  padding: 16px 20px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n+  padding: 20px 24px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n `;\n \n-const ResultsTitle = styled.h3`\n+const ResultsTitle = styled.h2`\n   font-size: ${AppTextStyles.title3.fontSize};\n   font-weight: 600;\n+  color: ${AppColors.onBackground};\n   margin: 0;\n `;\n \n const ResultsCount = styled.span`\n@@ -120,161 +132,141 @@\n   border-collapse: collapse;\n `;\n \n const TableHeader = styled.thead`\n-  background: ${AppColors.background};\n+  background: #f8f9fa;\n `;\n \n const TableRow = styled.tr`\n-  &:hover td {\n-    background: ${AppColors.primary}05;\n-  }\n+  border-bottom: 1px solid ${AppColors.borderLight};\n   \n-  &:not(:last-child) td {\n-    border-bottom: 1px solid ${AppColors.borderLight};\n+  &:hover {\n+    background: #f8f9fa;\n   }\n `;\n \n const TableHeaderCell = styled.th`\n   padding: 12px 16px;\n   text-align: left;\n+  font-size: ${AppTextStyles.label2.fontSize};\n   font-weight: 600;\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  color: ${AppColors.onSurface};\n+  color: ${AppColors.onInput1};\n+  border-bottom: 1px solid ${AppColors.borderLight};\n `;\n \n const TableCell = styled.td`\n   padding: 12px 16px;\n   font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onBackground};\n+  vertical-align: middle;\n `;\n \n-const Tag = styled.span`\n-  display: inline-block;\n+const StatusBadge = styled.span<{ $status: 'active' | 'inactive' }>`\n   padding: 4px 8px;\n-  background: ${AppColors.primary}10;\n-  color: ${AppColors.primary};\n   border-radius: 12px;\n   font-size: 12px;\n-  margin-right: 4px;\n+  font-weight: 500;\n+  background: ${props => props.$status === 'active' ? '#e7f5e7' : '#fff2f2'};\n+  color: ${props => props.$status === 'active' ? '#2d5a2d' : '#8b1538'};\n `;\n \n+const ActionButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n const ActionButton = styled.button`\n   padding: 6px 12px;\n   border: 1px solid ${AppColors.borderLight};\n-  border-radius: 6px;\n+  border-radius: 4px;\n   background: ${AppColors.surface};\n   color: ${AppColors.primary};\n-  font-size: ${AppTextStyles.label2.fontSize};\n+  font-size: 12px;\n   cursor: pointer;\n   transition: all 0.2s;\n   \n   &:hover {\n-    background: ${AppColors.primary}10;\n+    background: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n   }\n `;\n \n const EmptyState = styled.div`\n-  padding: 60px 20px;\n+  padding: 60px 24px;\n   text-align: center;\n   color: ${AppColors.onInput1};\n `;\n \n-interface Member {\n-  id: string;\n-  name: string;\n-  phone: string;\n-  tags: string[];\n-  coach: string;\n-  points: number;\n-  remainingSessions: number;\n-  lastVisit: string;\n-  status: 'active' | 'inactive' | 'dormant';\n-}\n+const EmptyStateTitle = styled.h3`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  margin: 0 0 8px 0;\n+`;\n \n-const DUMMY_MEMBERS: Member[] = [\n-  {\n-    id: \"LV0001\",\n-    name: \"김라비\",\n-    phone: \"010-1234-5678\",\n-    tags: [\"WBM\", \"릴렉싱\"],\n-    coach: \"한수민\",\n-    points: 120000,\n-    remainingSessions: 8,\n-    lastVisit: \"2025-09-07\",\n-    status: \"active\"\n-  },\n-  {\n-    id: \"LV0002\",\n-    name: \"박봄\",\n-    phone: \"010-2345-6789\",\n-    tags: [\"릴렉싱\"],\n-    coach: \"임정현\",\n-    points: 40000,\n-    remainingSessions: 2,\n-    lastVisit: \"2025-09-09\",\n-    status: \"active\"\n-  },\n-  {\n-    id: \"LV0003\",\n-    name: \"최다움\",\n-    phone: \"010-3456-7890\",\n-    tags: [\"WBM\"],\n-    coach: \"민웅희\",\n-    points: 0,\n-    remainingSessions: 0,\n-    lastVisit: \"2025-08-28\",\n-    status: \"dormant\"\n-  },\n-  {\n-    id: \"LV0004\",\n-    name: \"이지유\",\n-    phone: \"010-4567-8901\",\n-    tags: [\"WBM\", \"VIP\"],\n-    coach: \"한수민\",\n-    points: 320000,\n-    remainingSessions: 14,\n-    lastVisit: \"2025-09-10\",\n-    status: \"active\"\n-  },\n-];\n+const EmptyStateDescription = styled.p`\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  margin: 0;\n+`;\n \n+const LoadingState = styled.div`\n+  padding: 60px 24px;\n+  text-align: center;\n+  color: ${AppColors.onInput1};\n+`;\n+\n const MemberSearch: React.FC = () => {\n   const [searchQuery, setSearchQuery] = useState<string>('');\n-  const [filteredMembers, setFilteredMembers] = useState<Member[]>(DUMMY_MEMBERS);\n+  const [members, setMembers] = useState<DBMember[]>([]);\n+  const [filteredMembers, setFilteredMembers] = useState<DBMember[]>([]);\n   const [showFilters, setShowFilters] = useState<boolean>(false);\n   const [activeFilters, setActiveFilters] = useState<string[]>([]);\n+  const [loading, setLoading] = useState<boolean>(true);\n \n+  // 컴포넌트 마운트 시 회원 데이터 로드\n+  useEffect(() => {\n+    loadMembers();\n+  }, []);\n+\n+  const loadMembers = async () => {\n+    try {\n+      setLoading(true);\n+      const allMembers = await dbManager.getAllMembers();\n+      const activeMembers = allMembers.filter(member => member.isActive);\n+      setMembers(activeMembers);\n+      setFilteredMembers(activeMembers);\n+    } catch (error) {\n+      console.error('회원 데이터 로드 실패:', error);\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n   const handleSearch = () => {\n-    let filtered = DUMMY_MEMBERS;\n+    let filtered = members;\n     \n     // 텍스트 검색\n     if (searchQuery.trim()) {\n       const query = searchQuery.toLowerCase().trim();\n       filtered = filtered.filter(member =>\n-        member.id.toLowerCase().includes(query) ||\n         member.name.toLowerCase().includes(query) ||\n         member.phone.includes(query) ||\n-        member.coach.toLowerCase().includes(query)\n+        member.email.toLowerCase().includes(query) ||\n+        member.coachName.toLowerCase().includes(query)\n       );\n     }\n     \n     // 필터 적용\n     if (activeFilters.length > 0) {\n       filtered = filtered.filter(member => {\n         return activeFilters.some(filter => {\n           switch (filter) {\n-            case 'WBM':\n-              return member.tags.includes('WBM');\n-            case '릴렉싱':\n-              return member.tags.includes('릴렉싱');\n-            case 'VIP':\n-              return member.tags.includes('VIP');\n-            case '휴면':\n-              return member.status === 'dormant';\n-            case '활성':\n-              return member.status === 'active';\n+            case '남성':\n+              return member.gender === 'male';\n+            case '여성':\n+              return member.gender === 'female';\n+            case '로그인사용':\n+              return member.enableLogin;\n             default:\n-              return true;\n+              return member.branchName === filter; // 지점명으로 필터링\n           }\n         });\n       });\n     }\n@@ -295,121 +287,162 @@\n         : [...prev, filter]\n     );\n   };\n \n-  const handleMemberAction = (memberId: string, action: string) => {\n-    alert(`회원 ${memberId}에 대한 ${action} 작업을 수행합니다.`);\n+  const handlePreviewDocument = async (member: DBMember) => {\n+    try {\n+      // 회원 데이터를 MemberFormData 형식으로 변환\n+      const payments = await dbManager.getPaymentsByMember(member.id);\n+      const products = payments.flatMap(payment => payment.products);\n+      \n+      const formData: MemberFormData = {\n+        basicInfo: {\n+          name: member.name,\n+          phone: member.phone,\n+          email: member.email,\n+          birth: member.birth,\n+          gender: member.gender,\n+          addressInfo: {\n+            address: member.address,\n+            sigunguCode: member.sigunguCode,\n+            dong: member.dong,\n+            roadAddress: member.roadAddress,\n+            jibunAddress: member.jibunAddress,\n+          },\n+        },\n+        joinInfo: {\n+          branchId: member.branchId,\n+          coach: member.coach,\n+          joinPath: member.joinPath,\n+          loginId: member.loginId,\n+          loginPassword: member.loginPassword,\n+          enableLogin: member.enableLogin,\n+        },\n+        paymentInfo: {\n+          selectedProducts: products,\n+        },\n+        agreementInfo: member.agreementInfo,\n+      };\n+      \n+      await openPreviewWindow(formData);\n+    } catch (error) {\n+      console.error('문서 미리보기 실패:', error);\n+      alert('문서 미리보기 중 오류가 발생했습니다.');\n+    }\n   };\n \n   const clearFilters = () => {\n     setActiveFilters([]);\n     setSearchQuery('');\n-    setFilteredMembers(DUMMY_MEMBERS);\n+    setFilteredMembers(members);\n   };\n \n-  const filterOptions = ['WBM', '릴렉싱', 'VIP', '활성', '휴면'];\n+  // 고유한 지점명들을 필터 옵션으로 생성\n+  const branchNames = Array.from(new Set(members.map(member => member.branchName))).filter(Boolean);\n+  const filterOptions = ['남성', '여성', '로그인사용', ...branchNames];\n \n+  if (loading) {\n+    return (\n+      <PageContainer>\n+        <LoadingState>\n+          <h3>회원 데이터를 불러오는 중...</h3>\n+        </LoadingState>\n+      </PageContainer>\n+    );\n+  }\n+\n   return (\n-    <CMSLayout currentPath=\"/cms/member/search\">\n-      <PageContainer>\n-        <SearchSection>\n-          <SearchRow>\n-            <SearchInput\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-              onKeyPress={handleKeyPress}\n-              placeholder=\"회원명, ID, 전화번호, 코치명으로 검색...\"\n-            />\n-            <Button onClick={handleSearch}>검색</Button>\n-            <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n-              필터\n+    <PageContainer>\n+      <SearchSection>\n+        <SearchRow>\n+          <SearchInput\n+            value={searchQuery}\n+            onChange={(e) => setSearchQuery(e.target.value)}\n+            onKeyPress={handleKeyPress}\n+            placeholder=\"회원명, 전화번호, 이메일, 코치명으로 검색...\"\n+          />\n+          <Button onClick={handleSearch}>검색</Button>\n+          <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n+            필터\n+          </Button>\n+          {(activeFilters.length > 0 || searchQuery) && (\n+            <Button variant=\"secondary\" onClick={clearFilters}>\n+              초기화\n             </Button>\n-            {(activeFilters.length > 0 || searchQuery) && (\n-              <Button variant=\"secondary\" onClick={clearFilters}>\n-                초기화\n-              </Button>\n-            )}\n-          </SearchRow>\n-          \n-          <FilterRow $visible={showFilters}>\n-            <FilterLabel>필터:</FilterLabel>\n-            {filterOptions.map(filter => (\n-              <FilterChip\n-                key={filter}\n-                $active={activeFilters.includes(filter)}\n-                onClick={() => toggleFilter(filter)}\n-              >\n-                {filter}\n-              </FilterChip>\n-            ))}\n-          </FilterRow>\n-        </SearchSection>\n+          )}\n+        </SearchRow>\n+        \n+        <FilterRow $visible={showFilters}>\n+          <FilterLabel>필터:</FilterLabel>\n+          {filterOptions.map(filter => (\n+            <FilterChip\n+              key={filter}\n+              $active={activeFilters.includes(filter)}\n+              onClick={() => toggleFilter(filter)}\n+            >\n+              {filter}\n+            </FilterChip>\n+          ))}\n+        </FilterRow>\n+      </SearchSection>\n \n-        <ResultsSection>\n-          <ResultsHeader>\n-            <ResultsTitle>검색 결과</ResultsTitle>\n-            <ResultsCount>총 {filteredMembers.length}명</ResultsCount>\n-          </ResultsHeader>\n+      <ResultsSection>\n+        <ResultsHeader>\n+          <ResultsTitle>검색 결과</ResultsTitle>\n+          <ResultsCount>총 {filteredMembers.length}명</ResultsCount>\n+        </ResultsHeader>\n \n-          {filteredMembers.length > 0 ? (\n-            <TableContainer>\n-              <Table>\n-                <TableHeader>\n-                  <TableRow>\n-                    <TableHeaderCell>회원ID</TableHeaderCell>\n-                    <TableHeaderCell>이름</TableHeaderCell>\n-                    <TableHeaderCell>연락처</TableHeaderCell>\n-                    <TableHeaderCell>태그</TableHeaderCell>\n-                    <TableHeaderCell>담당코치</TableHeaderCell>\n-                    <TableHeaderCell>포인트</TableHeaderCell>\n-                    <TableHeaderCell>잔여세션</TableHeaderCell>\n-                    <TableHeaderCell>최근내원</TableHeaderCell>\n-                    <TableHeaderCell>상태</TableHeaderCell>\n-                    <TableHeaderCell>액션</TableHeaderCell>\n+        {filteredMembers.length > 0 ? (\n+          <TableContainer>\n+            <Table>\n+              <TableHeader>\n+                <TableRow>\n+                  <TableHeaderCell>이름</TableHeaderCell>\n+                  <TableHeaderCell>연락처</TableHeaderCell>\n+                  <TableHeaderCell>이메일</TableHeaderCell>\n+                  <TableHeaderCell>지점</TableHeaderCell>\n+                  <TableHeaderCell>담당코치</TableHeaderCell>\n+                  <TableHeaderCell>가입경로</TableHeaderCell>\n+                  <TableHeaderCell>상태</TableHeaderCell>\n+                  <TableHeaderCell>액션</TableHeaderCell>\n+                </TableRow>\n+              </TableHeader>\n+              <tbody>\n+                {filteredMembers.map(member => (\n+                  <TableRow key={member.id}>\n+                    <TableCell>{member.name}</TableCell>\n+                    <TableCell>{member.phone}</TableCell>\n+                    <TableCell>{member.email || '-'}</TableCell>\n+                    <TableCell>{member.branchName || '-'}</TableCell>\n+                    <TableCell>{member.coachName || '-'}</TableCell>\n+                    <TableCell>{member.joinPath || '-'}</TableCell>\n+                    <TableCell>\n+                      <StatusBadge $status={member.isActive ? 'active' : 'inactive'}>\n+                        {member.isActive ? '활성' : '비활성'}\n+                      </StatusBadge>\n+                    </TableCell>\n+                    <TableCell>\n+                      <ActionButtons>\n+                        <ActionButton onClick={() => handlePreviewDocument(member)}>\n+                          문서보기\n+                        </ActionButton>\n+                      </ActionButtons>\n+                    </TableCell>\n                   </TableRow>\n-                </TableHeader>\n-                <tbody>\n-                  {filteredMembers.map(member => (\n-                    <TableRow key={member.id}>\n-                      <TableCell>{member.id}</TableCell>\n-                      <TableCell>{member.name}</TableCell>\n-                      <TableCell>{member.phone}</TableCell>\n-                      <TableCell>\n-                        {member.tags.map(tag => (\n-                          <Tag key={tag}>{tag}</Tag>\n-                        ))}\n-                      </TableCell>\n-                      <TableCell>{member.coach}</TableCell>\n-                      <TableCell>{member.points.toLocaleString()}p</TableCell>\n-                      <TableCell>{member.remainingSessions}회</TableCell>\n-                      <TableCell>{member.lastVisit}</TableCell>\n-                      <TableCell>\n-                        <Tag style={{ \n-                          backgroundColor: member.status === 'active' ? '#e8f5e8' : '#ffebee',\n-                          color: member.status === 'active' ? '#2e7d32' : '#c62828'\n-                        }}>\n-                          {member.status === 'active' ? '활성' : '휴면'}\n-                        </Tag>\n-                      </TableCell>\n-                      <TableCell>\n-                        <ActionButton onClick={() => handleMemberAction(member.id, '상세보기')}>\n-                          상세보기\n-                        </ActionButton>\n-                      </TableCell>\n-                    </TableRow>\n-                  ))}\n-                </tbody>\n-              </Table>\n-            </TableContainer>\n-          ) : (\n-            <EmptyState>\n-              <p>검색 결과가 없습니다.</p>\n-              <p>다른 검색어를 시도해보세요.</p>\n-            </EmptyState>\n-          )}\n-        </ResultsSection>\n-      </PageContainer>\n-    </CMSLayout>\n+                ))}\n+              </tbody>\n+            </Table>\n+          </TableContainer>\n+        ) : (\n+          <EmptyState>\n+            <EmptyStateTitle>검색 결과가 없습니다</EmptyStateTitle>\n+            <EmptyStateDescription>\n+              다른 검색어를 입력하거나 필터를 조정해보세요.\n+            </EmptyStateDescription>\n+          </EmptyState>\n+        )}\n+      </ResultsSection>\n+    </PageContainer>\n   );\n };\n \n export default MemberSearch;\n"
                },
                {
                    "date": 1760253605923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,10 +227,17 @@\n \n   const loadMembers = async () => {\n     try {\n       setLoading(true);\n+      console.log('회원 데이터 로딩 시작...');\n       const allMembers = await dbManager.getAllMembers();\n+      console.log('전체 회원 수:', allMembers.length);\n+      console.log('전체 회원 데이터:', allMembers);\n+      \n       const activeMembers = allMembers.filter(member => member.isActive);\n+      console.log('활성 회원 수:', activeMembers.length);\n+      console.log('활성 회원 데이터:', activeMembers);\n+      \n       setMembers(activeMembers);\n       setFilteredMembers(activeMembers);\n     } catch (error) {\n       console.error('회원 데이터 로드 실패:', error);\n@@ -363,8 +370,11 @@\n           <Button onClick={handleSearch}>검색</Button>\n           <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n             필터\n           </Button>\n+          <Button variant=\"secondary\" onClick={loadMembers}>\n+            새로고침\n+          </Button>\n           {(activeFilters.length > 0 || searchQuery) && (\n             <Button variant=\"secondary\" onClick={clearFilters}>\n               초기화\n             </Button>\n@@ -387,9 +397,9 @@\n \n       <ResultsSection>\n         <ResultsHeader>\n           <ResultsTitle>검색 결과</ResultsTitle>\n-          <ResultsCount>총 {filteredMembers.length}명</ResultsCount>\n+          <ResultsCount>총 {filteredMembers.length}명 (전체: {members.length}명)</ResultsCount>\n         </ResultsHeader>\n \n         {filteredMembers.length > 0 ? (\n           <TableContainer>\n"
                },
                {
                    "date": 1760254633082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,9 +245,12 @@\n       setLoading(false);\n     }\n   };\n \n-  const handleSearch = () => {\n+  const handleSearch = async () => {\n+    // 검색할 때마다 최신 데이터를 불러옵니다\n+    await loadMembers();\n+    \n     let filtered = members;\n     \n     // 텍스트 검색\n     if (searchQuery.trim()) {\n"
                },
                {
                    "date": 1760256502961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,9 +258,11 @@\n       filtered = filtered.filter(member =>\n         member.name.toLowerCase().includes(query) ||\n         member.phone.includes(query) ||\n         member.email.toLowerCase().includes(query) ||\n-        member.coachName.toLowerCase().includes(query)\n+        member.coachName.toLowerCase().includes(query) ||\n+        member.loginId.toLowerCase().includes(query) ||\n+        member.dong.toLowerCase().includes(query)\n       );\n     }\n     \n     // 필터 적용\n@@ -367,9 +369,9 @@\n           <SearchInput\n             value={searchQuery}\n             onChange={(e) => setSearchQuery(e.target.value)}\n             onKeyPress={handleKeyPress}\n-            placeholder=\"회원명, 전화번호, 이메일, 코치명으로 검색...\"\n+            placeholder=\"회원명, 전화번호, 이메일, 코치명, 로그인ID, 주소(동)로 검색...\"\n           />\n           <Button onClick={handleSearch}>검색</Button>\n           <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n             필터\n@@ -411,8 +413,10 @@\n                 <TableRow>\n                   <TableHeaderCell>이름</TableHeaderCell>\n                   <TableHeaderCell>연락처</TableHeaderCell>\n                   <TableHeaderCell>이메일</TableHeaderCell>\n+                  <TableHeaderCell>주소(동)</TableHeaderCell>\n+                  <TableHeaderCell>로그인ID</TableHeaderCell>\n                   <TableHeaderCell>지점</TableHeaderCell>\n                   <TableHeaderCell>담당코치</TableHeaderCell>\n                   <TableHeaderCell>가입경로</TableHeaderCell>\n                   <TableHeaderCell>상태</TableHeaderCell>\n@@ -424,8 +428,10 @@\n                   <TableRow key={member.id}>\n                     <TableCell>{member.name}</TableCell>\n                     <TableCell>{member.phone}</TableCell>\n                     <TableCell>{member.email || '-'}</TableCell>\n+                    <TableCell>{member.dong || '-'}</TableCell>\n+                    <TableCell>{member.loginId || '-'}</TableCell>\n                     <TableCell>{member.branchName || '-'}</TableCell>\n                     <TableCell>{member.coachName || '-'}</TableCell>\n                     <TableCell>{member.joinPath || '-'}</TableCell>\n                     <TableCell>\n"
                },
                {
                    "date": 1760256816582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,468 @@\n+import React, { useState, useEffect } from 'react';\n+import styled from 'styled-components';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, type Member as DBMember } from '../../../utils/indexedDB';\n+import { openPreviewWindow } from './PreviewDocument';\n+import { MemberFormData } from './types';\n+\n+const PageContainer = styled.div`\n+  width: 100%;\n+`;\n+\n+const SearchSection = styled.div`\n+  background: ${AppColors.surface};\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 16px;\n+  padding: 24px;\n+  margin-bottom: 24px;\n+  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n+`;\n+\n+const SearchRow = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  align-items: center;\n+  margin-bottom: 16px;\n+`;\n+\n+const SearchInput = styled.input`\n+  flex: 1;\n+  padding: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  outline: none;\n+  \n+  &:focus {\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &::placeholder {\n+    color: ${AppColors.onInput1};\n+  }\n+`;\n+\n+const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n+  padding: 12px 18px;\n+  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n+  border-radius: 8px;\n+  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n+  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  font-weight: 600;\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    opacity: 0.9;\n+    transform: translateY(-1px);\n+  }\n+  \n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+    transform: none;\n+  }\n+`;\n+\n+const FilterRow = styled.div<{ $visible: boolean }>`\n+  display: ${props => props.$visible ? 'flex' : 'none'};\n+  gap: 8px;\n+  align-items: center;\n+  flex-wrap: wrap;\n+`;\n+\n+const FilterLabel = styled.span`\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  color: ${AppColors.onInput1};\n+  font-weight: 500;\n+`;\n+\n+const FilterChip = styled.button<{ $active: boolean }>`\n+  padding: 6px 12px;\n+  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n+  border-radius: 20px;\n+  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n+  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    border-color: ${AppColors.primary};\n+    background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n+  }\n+`;\n+\n+const ResultsSection = styled.div`\n+  background: ${AppColors.surface};\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 16px;\n+  overflow: hidden;\n+  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n+`;\n+\n+const ResultsHeader = styled.div`\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  padding: 20px 24px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+`;\n+\n+const ResultsTitle = styled.h2`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onBackground};\n+  margin: 0;\n+`;\n+\n+const ResultsCount = styled.span`\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onInput1};\n+`;\n+\n+const TableContainer = styled.div`\n+  overflow-x: auto;\n+`;\n+\n+const Table = styled.table`\n+  width: 100%;\n+  border-collapse: collapse;\n+`;\n+\n+const TableHeader = styled.thead`\n+  background: #f8f9fa;\n+`;\n+\n+const TableRow = styled.tr`\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  \n+  &:hover {\n+    background: #f8f9fa;\n+  }\n+`;\n+\n+const TableHeaderCell = styled.th`\n+  padding: 12px 16px;\n+  text-align: left;\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onInput1};\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+`;\n+\n+const TableCell = styled.td`\n+  padding: 12px 16px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onBackground};\n+  vertical-align: middle;\n+`;\n+\n+const StatusBadge = styled.span<{ $status: 'active' | 'inactive' }>`\n+  padding: 4px 8px;\n+  border-radius: 12px;\n+  font-size: 12px;\n+  font-weight: 500;\n+  background: ${props => props.$status === 'active' ? '#e7f5e7' : '#fff2f2'};\n+  color: ${props => props.$status === 'active' ? '#2d5a2d' : '#8b1538'};\n+`;\n+\n+const ActionButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const ActionButton = styled.button`\n+  padding: 6px 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 4px;\n+  background: ${AppColors.surface};\n+  color: ${AppColors.primary};\n+  font-size: 12px;\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    background: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n+  }\n+`;\n+\n+const EmptyState = styled.div`\n+  padding: 60px 24px;\n+  text-align: center;\n+  color: ${AppColors.onInput1};\n+`;\n+\n+const EmptyStateTitle = styled.h3`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  margin: 0 0 8px 0;\n+`;\n+\n+const EmptyStateDescription = styled.p`\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  margin: 0;\n+`;\n+\n+const LoadingState = styled.div`\n+  padding: 60px 24px;\n+  text-align: center;\n+  color: ${AppColors.onInput1};\n+`;\n+\n+const MemberSearch: React.FC = () => {\n+  const [searchQuery, setSearchQuery] = useState<string>('');\n+  const [members, setMembers] = useState<DBMember[]>([]);\n+  const [filteredMembers, setFilteredMembers] = useState<DBMember[]>([]);\n+  const [showFilters, setShowFilters] = useState<boolean>(false);\n+  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n+  const [loading, setLoading] = useState<boolean>(true);\n+\n+  // 컴포넌트 마운트 시 회원 데이터 로드\n+  useEffect(() => {\n+    loadMembers();\n+  }, []);\n+\n+  const loadMembers = async () => {\n+    try {\n+      setLoading(true);\n+      console.log('회원 데이터 로딩 시작...');\n+      const allMembers = await dbManager.getAllMembers();\n+      console.log('전체 회원 수:', allMembers.length);\n+      console.log('전체 회원 데이터:', allMembers);\n+      \n+      const activeMembers = allMembers.filter(member => member.isActive);\n+      console.log('활성 회원 수:', activeMembers.length);\n+      console.log('활성 회원 데이터:', activeMembers);\n+      \n+      setMembers(activeMembers);\n+      setFilteredMembers(activeMembers);\n+    } catch (error) {\n+      console.error('회원 데이터 로드 실패:', error);\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const handleSearch = async () => {\n+    // 검색할 때마다 최신 데이터를 불러옵니다\n+    await loadMembers();\n+    \n+    let filtered = members;\n+    \n+    // 텍스트 검색\n+    if (searchQuery.trim()) {\n+      const query = searchQuery.toLowerCase().trim();\n+      filtered = filtered.filter(member =>\n+        member.name.toLowerCase().includes(query) ||\n+        member.phone.includes(query) ||\n+        member.email.toLowerCase().includes(query) ||\n+        member.coachName.toLowerCase().includes(query) ||\n+        member.loginId.toLowerCase().includes(query) ||\n+        member.dong.toLowerCase().includes(query)\n+      );\n+    }\n+    \n+    // 필터 적용\n+    if (activeFilters.length > 0) {\n+      filtered = filtered.filter(member => {\n+        return activeFilters.some(filter => {\n+          switch (filter) {\n+            case '남성':\n+              return member.gender === 'male';\n+            case '여성':\n+              return member.gender === 'female';\n+            case '로그인사용':\n+              return member.enableLogin;\n+            default:\n+              return member.branchName === filter; // 지점명으로 필터링\n+          }\n+        });\n+      });\n+    }\n+    \n+    setFilteredMembers(filtered);\n+  };\n+\n+  const handleKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter') {\n+      handleSearch();\n+    }\n+  };\n+\n+  const toggleFilter = (filter: string) => {\n+    setActiveFilters(prev => \n+      prev.includes(filter) \n+        ? prev.filter(f => f !== filter)\n+        : [...prev, filter]\n+    );\n+  };\n+\n+  const handlePreviewDocument = async (member: DBMember) => {\n+    try {\n+      // 회원 데이터를 MemberFormData 형식으로 변환\n+      const payments = await dbManager.getPaymentsByMember(member.id);\n+      const products = payments.flatMap(payment => payment.products);\n+      \n+      const formData: MemberFormData = {\n+        basicInfo: {\n+          name: member.name,\n+          phone: member.phone,\n+          email: member.email,\n+          birth: member.birth,\n+          gender: member.gender,\n+          addressInfo: {\n+            address: member.address,\n+            sigunguCode: member.sigunguCode,\n+            dong: member.dong,\n+            roadAddress: member.roadAddress,\n+            jibunAddress: member.jibunAddress,\n+          },\n+        },\n+        joinInfo: {\n+          branchId: member.branchId,\n+          coach: member.coach,\n+          joinPath: member.joinPath,\n+          loginId: member.loginId,\n+          loginPassword: member.loginPassword,\n+          enableLogin: member.enableLogin,\n+        },\n+        paymentInfo: {\n+          selectedProducts: products,\n+          paymentMethod: 'card', // 기본값으로 카드 설정\n+        },\n+        agreementInfo: member.agreementInfo,\n+      };\n+      \n+      await openPreviewWindow(formData);\n+    } catch (error) {\n+      console.error('문서 미리보기 실패:', error);\n+      alert('문서 미리보기 중 오류가 발생했습니다.');\n+    }\n+  };\n+\n+  const clearFilters = () => {\n+    setActiveFilters([]);\n+    setSearchQuery('');\n+    setFilteredMembers(members);\n+  };\n+\n+  // 고유한 지점명들을 필터 옵션으로 생성\n+  const branchNames = Array.from(new Set(members.map(member => member.branchName))).filter(Boolean);\n+  const filterOptions = ['남성', '여성', '로그인사용', ...branchNames];\n+\n+  if (loading) {\n+    return (\n+      <PageContainer>\n+        <LoadingState>\n+          <h3>회원 데이터를 불러오는 중...</h3>\n+        </LoadingState>\n+      </PageContainer>\n+    );\n+  }\n+\n+  return (\n+    <PageContainer>\n+      <SearchSection>\n+        <SearchRow>\n+          <SearchInput\n+            value={searchQuery}\n+            onChange={(e) => setSearchQuery(e.target.value)}\n+            onKeyPress={handleKeyPress}\n+            placeholder=\"회원명, 전화번호, 이메일, 코치명, 로그인ID, 주소(동)로 검색...\"\n+          />\n+          <Button onClick={handleSearch}>검색</Button>\n+          <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n+            필터\n+          </Button>\n+          <Button variant=\"secondary\" onClick={loadMembers}>\n+            새로고침\n+          </Button>\n+          {(activeFilters.length > 0 || searchQuery) && (\n+            <Button variant=\"secondary\" onClick={clearFilters}>\n+              초기화\n+            </Button>\n+          )}\n+        </SearchRow>\n+        \n+        <FilterRow $visible={showFilters}>\n+          <FilterLabel>필터:</FilterLabel>\n+          {filterOptions.map(filter => (\n+            <FilterChip\n+              key={filter}\n+              $active={activeFilters.includes(filter)}\n+              onClick={() => toggleFilter(filter)}\n+            >\n+              {filter}\n+            </FilterChip>\n+          ))}\n+        </FilterRow>\n+      </SearchSection>\n+\n+      <ResultsSection>\n+        <ResultsHeader>\n+          <ResultsTitle>검색 결과</ResultsTitle>\n+          <ResultsCount>총 {filteredMembers.length}명 (전체: {members.length}명)</ResultsCount>\n+        </ResultsHeader>\n+\n+        {filteredMembers.length > 0 ? (\n+          <TableContainer>\n+            <Table>\n+              <TableHeader>\n+                <TableRow>\n+                  <TableHeaderCell>이름</TableHeaderCell>\n+                  <TableHeaderCell>연락처</TableHeaderCell>\n+                  <TableHeaderCell>이메일</TableHeaderCell>\n+                  <TableHeaderCell>주소(동)</TableHeaderCell>\n+                  <TableHeaderCell>로그인ID</TableHeaderCell>\n+                  <TableHeaderCell>지점</TableHeaderCell>\n+                  <TableHeaderCell>담당코치</TableHeaderCell>\n+                  <TableHeaderCell>가입경로</TableHeaderCell>\n+                  <TableHeaderCell>상태</TableHeaderCell>\n+                  <TableHeaderCell>액션</TableHeaderCell>\n+                </TableRow>\n+              </TableHeader>\n+              <tbody>\n+                {filteredMembers.map(member => (\n+                  <TableRow key={member.id}>\n+                    <TableCell>{member.name}</TableCell>\n+                    <TableCell>{member.phone}</TableCell>\n+                    <TableCell>{member.email || '-'}</TableCell>\n+                    <TableCell>{member.dong || '-'}</TableCell>\n+                    <TableCell>{member.loginId || '-'}</TableCell>\n+                    <TableCell>{member.branchName || '-'}</TableCell>\n+                    <TableCell>{member.coachName || '-'}</TableCell>\n+                    <TableCell>{member.joinPath || '-'}</TableCell>\n+                    <TableCell>\n+                      <StatusBadge $status={member.isActive ? 'active' : 'inactive'}>\n+                        {member.isActive ? '활성' : '비활성'}\n+                      </StatusBadge>\n+                    </TableCell>\n+                    <TableCell>\n+                      <ActionButtons>\n+                        <ActionButton onClick={() => handlePreviewDocument(member)}>\n+                          문서보기\n+                        </ActionButton>\n+                      </ActionButtons>\n+                    </TableCell>\n+                  </TableRow>\n+                ))}\n+              </tbody>\n+            </Table>\n+          </TableContainer>\n+        ) : (\n+          <EmptyState>\n+            <EmptyStateTitle>검색 결과가 없습니다</EmptyStateTitle>\n+            <EmptyStateDescription>\n+              다른 검색어를 입력하거나 필터를 조정해보세요.\n+            </EmptyStateDescription>\n+          </EmptyState>\n+        )}\n+      </ResultsSection>\n+    </PageContainer>\n+  );\n+};\n+\n+export default MemberSearch;\n"
                },
                {
                    "date": 1760257923528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,468 @@\n+import React, { useState, useEffect } from 'react';\n+import styled from 'styled-components';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, type Member as DBMember } from '../../../utils/indexedDB';\n+import { openPreviewWindow } from './PreviewDocument';\n+import { MemberFormData } from './types';\n+\n+const PageContainer = styled.div`\n+  width: 100%;\n+`;\n+\n+const SearchSection = styled.div`\n+  background: ${AppColors.surface};\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 16px;\n+  padding: 24px;\n+  margin-bottom: 24px;\n+  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n+`;\n+\n+const SearchRow = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  align-items: center;\n+  margin-bottom: 16px;\n+`;\n+\n+const SearchInput = styled.input`\n+  flex: 1;\n+  padding: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  outline: none;\n+  \n+  &:focus {\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &::placeholder {\n+    color: ${AppColors.onInput1};\n+  }\n+`;\n+\n+const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n+  padding: 12px 18px;\n+  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n+  border-radius: 8px;\n+  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n+  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  font-weight: 600;\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    opacity: 0.9;\n+    transform: translateY(-1px);\n+  }\n+  \n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+    transform: none;\n+  }\n+`;\n+\n+const FilterRow = styled.div<{ $visible: boolean }>`\n+  display: ${props => props.$visible ? 'flex' : 'none'};\n+  gap: 8px;\n+  align-items: center;\n+  flex-wrap: wrap;\n+`;\n+\n+const FilterLabel = styled.span`\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  color: ${AppColors.onInput1};\n+  font-weight: 500;\n+`;\n+\n+const FilterChip = styled.button<{ $active: boolean }>`\n+  padding: 6px 12px;\n+  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n+  border-radius: 20px;\n+  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n+  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    border-color: ${AppColors.primary};\n+    background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n+  }\n+`;\n+\n+const ResultsSection = styled.div`\n+  background: ${AppColors.surface};\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 16px;\n+  overflow: hidden;\n+  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n+`;\n+\n+const ResultsHeader = styled.div`\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  padding: 20px 24px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+`;\n+\n+const ResultsTitle = styled.h2`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onBackground};\n+  margin: 0;\n+`;\n+\n+const ResultsCount = styled.span`\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onInput1};\n+`;\n+\n+const TableContainer = styled.div`\n+  overflow-x: auto;\n+`;\n+\n+const Table = styled.table`\n+  width: 100%;\n+  border-collapse: collapse;\n+`;\n+\n+const TableHeader = styled.thead`\n+  background: #f8f9fa;\n+`;\n+\n+const TableRow = styled.tr`\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  \n+  &:hover {\n+    background: #f8f9fa;\n+  }\n+`;\n+\n+const TableHeaderCell = styled.th`\n+  padding: 12px 16px;\n+  text-align: left;\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onInput1};\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+`;\n+\n+const TableCell = styled.td`\n+  padding: 12px 16px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onBackground};\n+  vertical-align: middle;\n+`;\n+\n+const StatusBadge = styled.span<{ $status: 'active' | 'inactive' }>`\n+  padding: 4px 8px;\n+  border-radius: 12px;\n+  font-size: 12px;\n+  font-weight: 500;\n+  background: ${props => props.$status === 'active' ? '#e7f5e7' : '#fff2f2'};\n+  color: ${props => props.$status === 'active' ? '#2d5a2d' : '#8b1538'};\n+`;\n+\n+const ActionButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const ActionButton = styled.button`\n+  padding: 6px 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 4px;\n+  background: ${AppColors.surface};\n+  color: ${AppColors.primary};\n+  font-size: 12px;\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    background: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n+  }\n+`;\n+\n+const EmptyState = styled.div`\n+  padding: 60px 24px;\n+  text-align: center;\n+  color: ${AppColors.onInput1};\n+`;\n+\n+const EmptyStateTitle = styled.h3`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  margin: 0 0 8px 0;\n+`;\n+\n+const EmptyStateDescription = styled.p`\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  margin: 0;\n+`;\n+\n+const LoadingState = styled.div`\n+  padding: 60px 24px;\n+  text-align: center;\n+  color: ${AppColors.onInput1};\n+`;\n+\n+const MemberSearch: React.FC = () => {\n+  const [searchQuery, setSearchQuery] = useState<string>('');\n+  const [members, setMembers] = useState<DBMember[]>([]);\n+  const [filteredMembers, setFilteredMembers] = useState<DBMember[]>([]);\n+  const [showFilters, setShowFilters] = useState<boolean>(false);\n+  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n+  const [loading, setLoading] = useState<boolean>(true);\n+\n+  // 컴포넌트 마운트 시 회원 데이터 로드\n+  useEffect(() => {\n+    loadMembers();\n+  }, []);\n+\n+  const loadMembers = async () => {\n+    try {\n+      setLoading(true);\n+      console.log('회원 데이터 로딩 시작...');\n+      const allMembers = await dbManager.getAllMembers();\n+      console.log('전체 회원 수:', allMembers.length);\n+      console.log('전체 회원 데이터:', allMembers);\n+      \n+      const activeMembers = allMembers.filter(member => member.isActive);\n+      console.log('활성 회원 수:', activeMembers.length);\n+      console.log('활성 회원 데이터:', activeMembers);\n+      \n+      setMembers(activeMembers);\n+      setFilteredMembers(activeMembers);\n+    } catch (error) {\n+      console.error('회원 데이터 로드 실패:', error);\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const handleSearch = async () => {\n+    // 검색할 때마다 최신 데이터를 불러옵니다\n+    await loadMembers();\n+    \n+    let filtered = members;\n+    \n+    // 텍스트 검색\n+    if (searchQuery.trim()) {\n+      const query = searchQuery.toLowerCase().trim();\n+      filtered = filtered.filter(member =>\n+        member.name.toLowerCase().includes(query) ||\n+        member.phone.includes(query) ||\n+        member.email.toLowerCase().includes(query) ||\n+        member.coachName.toLowerCase().includes(query) ||\n+        member.loginId.toLowerCase().includes(query) ||\n+        member.dong.toLowerCase().includes(query)\n+      );\n+    }\n+    \n+    // 필터 적용\n+    if (activeFilters.length > 0) {\n+      filtered = filtered.filter(member => {\n+        return activeFilters.some(filter => {\n+          switch (filter) {\n+            case '남성':\n+              return member.gender === 'male';\n+            case '여성':\n+              return member.gender === 'female';\n+            case '로그인사용':\n+              return member.enableLogin;\n+            default:\n+              return member.branchName === filter; // 지점명으로 필터링\n+          }\n+        });\n+      });\n+    }\n+    \n+    setFilteredMembers(filtered);\n+  };\n+\n+  const handleKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter') {\n+      handleSearch();\n+    }\n+  };\n+\n+  const toggleFilter = (filter: string) => {\n+    setActiveFilters(prev => \n+      prev.includes(filter) \n+        ? prev.filter(f => f !== filter)\n+        : [...prev, filter]\n+    );\n+  };\n+\n+  const handlePreviewDocument = async (member: DBMember) => {\n+    try {\n+      // 회원 데이터를 MemberFormData 형식으로 변환\n+      const payments = await dbManager.getPaymentsByMember(member.id);\n+      const products = payments.flatMap(payment => payment.products);\n+      \n+      const formData: MemberFormData = {\n+        basicInfo: {\n+          name: member.name,\n+          phone: member.phone,\n+          email: member.email,\n+          birth: member.birth,\n+          gender: member.gender,\n+          addressInfo: {\n+            address: member.address,\n+            sigunguCode: member.sigunguCode,\n+            dong: member.dong,\n+            roadAddress: member.roadAddress,\n+            jibunAddress: member.jibunAddress,\n+          },\n+        },\n+        joinInfo: {\n+          branchId: member.branchId,\n+          coach: member.coach,\n+          joinPath: member.joinPath,\n+          loginId: member.loginId,\n+          loginPassword: member.loginPassword || '', // null인 경우 빈 문자열로 변환\n+          enableLogin: member.enableLogin,\n+        },\n+        paymentInfo: {\n+          selectedProducts: products,\n+          paymentMethod: 'card', // 기본값으로 카드 설정\n+        },\n+        agreementInfo: member.agreementInfo,\n+      };\n+      \n+      await openPreviewWindow(formData);\n+    } catch (error) {\n+      console.error('문서 미리보기 실패:', error);\n+      alert('문서 미리보기 중 오류가 발생했습니다.');\n+    }\n+  };\n+\n+  const clearFilters = () => {\n+    setActiveFilters([]);\n+    setSearchQuery('');\n+    setFilteredMembers(members);\n+  };\n+\n+  // 고유한 지점명들을 필터 옵션으로 생성\n+  const branchNames = Array.from(new Set(members.map(member => member.branchName))).filter(Boolean);\n+  const filterOptions = ['남성', '여성', '로그인사용', ...branchNames];\n+\n+  if (loading) {\n+    return (\n+      <PageContainer>\n+        <LoadingState>\n+          <h3>회원 데이터를 불러오는 중...</h3>\n+        </LoadingState>\n+      </PageContainer>\n+    );\n+  }\n+\n+  return (\n+    <PageContainer>\n+      <SearchSection>\n+        <SearchRow>\n+          <SearchInput\n+            value={searchQuery}\n+            onChange={(e) => setSearchQuery(e.target.value)}\n+            onKeyPress={handleKeyPress}\n+            placeholder=\"회원명, 전화번호, 이메일, 코치명, 로그인ID, 주소(동)로 검색...\"\n+          />\n+          <Button onClick={handleSearch}>검색</Button>\n+          <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n+            필터\n+          </Button>\n+          <Button variant=\"secondary\" onClick={loadMembers}>\n+            새로고침\n+          </Button>\n+          {(activeFilters.length > 0 || searchQuery) && (\n+            <Button variant=\"secondary\" onClick={clearFilters}>\n+              초기화\n+            </Button>\n+          )}\n+        </SearchRow>\n+        \n+        <FilterRow $visible={showFilters}>\n+          <FilterLabel>필터:</FilterLabel>\n+          {filterOptions.map(filter => (\n+            <FilterChip\n+              key={filter}\n+              $active={activeFilters.includes(filter)}\n+              onClick={() => toggleFilter(filter)}\n+            >\n+              {filter}\n+            </FilterChip>\n+          ))}\n+        </FilterRow>\n+      </SearchSection>\n+\n+      <ResultsSection>\n+        <ResultsHeader>\n+          <ResultsTitle>검색 결과</ResultsTitle>\n+          <ResultsCount>총 {filteredMembers.length}명 (전체: {members.length}명)</ResultsCount>\n+        </ResultsHeader>\n+\n+        {filteredMembers.length > 0 ? (\n+          <TableContainer>\n+            <Table>\n+              <TableHeader>\n+                <TableRow>\n+                  <TableHeaderCell>이름</TableHeaderCell>\n+                  <TableHeaderCell>연락처</TableHeaderCell>\n+                  <TableHeaderCell>이메일</TableHeaderCell>\n+                  <TableHeaderCell>주소(동)</TableHeaderCell>\n+                  <TableHeaderCell>로그인ID</TableHeaderCell>\n+                  <TableHeaderCell>지점</TableHeaderCell>\n+                  <TableHeaderCell>담당코치</TableHeaderCell>\n+                  <TableHeaderCell>가입경로</TableHeaderCell>\n+                  <TableHeaderCell>상태</TableHeaderCell>\n+                  <TableHeaderCell>액션</TableHeaderCell>\n+                </TableRow>\n+              </TableHeader>\n+              <tbody>\n+                {filteredMembers.map(member => (\n+                  <TableRow key={member.id}>\n+                    <TableCell>{member.name}</TableCell>\n+                    <TableCell>{member.phone}</TableCell>\n+                    <TableCell>{member.email || '-'}</TableCell>\n+                    <TableCell>{member.dong || '-'}</TableCell>\n+                    <TableCell>{member.loginId || '-'}</TableCell>\n+                    <TableCell>{member.branchName || '-'}</TableCell>\n+                    <TableCell>{member.coachName || '-'}</TableCell>\n+                    <TableCell>{member.joinPath || '-'}</TableCell>\n+                    <TableCell>\n+                      <StatusBadge $status={member.isActive ? 'active' : 'inactive'}>\n+                        {member.isActive ? '활성' : '비활성'}\n+                      </StatusBadge>\n+                    </TableCell>\n+                    <TableCell>\n+                      <ActionButtons>\n+                        <ActionButton onClick={() => handlePreviewDocument(member)}>\n+                          문서보기\n+                        </ActionButton>\n+                      </ActionButtons>\n+                    </TableCell>\n+                  </TableRow>\n+                ))}\n+              </tbody>\n+            </Table>\n+          </TableContainer>\n+        ) : (\n+          <EmptyState>\n+            <EmptyStateTitle>검색 결과가 없습니다</EmptyStateTitle>\n+            <EmptyStateDescription>\n+              다른 검색어를 입력하거나 필터를 조정해보세요.\n+            </EmptyStateDescription>\n+          </EmptyState>\n+        )}\n+      </ResultsSection>\n+    </PageContainer>\n+  );\n+};\n+\n+export default MemberSearch;\n"
                },
                {
                    "date": 1760758580300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,23 @@\n-import React, { useState, useEffect } from 'react';\n+import React, { useState, useEffect, useCallback } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Member as DBMember } from '../../../utils/indexedDB';\n import { openPreviewWindow } from './PreviewDocument';\n import { MemberFormData } from './types';\n \n+// 회원 검색 결과에서 사용할 확장된 회원 정보 타입\n+interface MemberWithStats extends DBMember {\n+  pointBalance: number;\n+  unpaidTotal: number;\n+  currentCourses: Array<{\n+    productName: string;\n+    programType: string;\n+    progressInfo: string;\n+  }>;\n+}\n+\n const PageContainer = styled.div`\n   width: 100%;\n `;\n \n@@ -211,510 +222,130 @@\n   text-align: center;\n   color: ${AppColors.onInput1};\n `;\n \n-const MemberSearch: React.FC = () => {\n-  const [searchQuery, setSearchQuery] = useState<string>('');\n-  const [members, setMembers] = useState<DBMember[]>([]);\n-  const [filteredMembers, setFilteredMembers] = useState<DBMember[]>([]);\n-  const [showFilters, setShowFilters] = useState<boolean>(false);\n-  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n-  const [loading, setLoading] = useState<boolean>(true);\n-\n-  // 컴포넌트 마운트 시 회원 데이터 로드\n-  useEffect(() => {\n-    loadMembers();\n-  }, []);\n-\n-  const loadMembers = async () => {\n-    try {\n-      setLoading(true);\n-      console.log('회원 데이터 로딩 시작...');\n-      const allMembers = await dbManager.getAllMembers();\n-      console.log('전체 회원 수:', allMembers.length);\n-      console.log('전체 회원 데이터:', allMembers);\n-      \n-      const activeMembers = allMembers.filter(member => member.isActive);\n-      console.log('활성 회원 수:', activeMembers.length);\n-      console.log('활성 회원 데이터:', activeMembers);\n-      \n-      setMembers(activeMembers);\n-      setFilteredMembers(activeMembers);\n-    } catch (error) {\n-      console.error('회원 데이터 로드 실패:', error);\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const handleSearch = async () => {\n-    // 검색할 때마다 최신 데이터를 불러옵니다\n-    await loadMembers();\n-    \n-    let filtered = members;\n-    \n-    // 텍스트 검색\n-    if (searchQuery.trim()) {\n-      const query = searchQuery.toLowerCase().trim();\n-      filtered = filtered.filter(member =>\n-        member.name.toLowerCase().includes(query) ||\n-        member.phone.includes(query) ||\n-        member.email.toLowerCase().includes(query) ||\n-        member.coachName.toLowerCase().includes(query) ||\n-        member.loginId.toLowerCase().includes(query) ||\n-        member.dong.toLowerCase().includes(query)\n-      );\n-    }\n-    \n-    // 필터 적용\n-    if (activeFilters.length > 0) {\n-      filtered = filtered.filter(member => {\n-        return activeFilters.some(filter => {\n-          switch (filter) {\n-            case '남성':\n-              return member.gender === 'male';\n-            case '여성':\n-              return member.gender === 'female';\n-            case '로그인사용':\n-              return member.enableLogin;\n-            default:\n-              return member.branchName === filter; // 지점명으로 필터링\n-          }\n-        });\n-      });\n-    }\n-    \n-    setFilteredMembers(filtered);\n-  };\n-\n-  const handleKeyPress = (e: React.KeyboardEvent) => {\n-    if (e.key === 'Enter') {\n-      handleSearch();\n-    }\n-  };\n-\n-  const toggleFilter = (filter: string) => {\n-    setActiveFilters(prev => \n-      prev.includes(filter) \n-        ? prev.filter(f => f !== filter)\n-        : [...prev, filter]\n-    );\n-  };\n-\n-  const handlePreviewDocument = async (member: DBMember) => {\n-    try {\n-      // 회원 데이터를 MemberFormData 형식으로 변환\n-      const payments = await dbManager.getPaymentsByMember(member.id);\n-      const products = payments.flatMap(payment => payment.products);\n-      \n-      const formData: MemberFormData = {\n-        basicInfo: {\n-          name: member.name,\n-          phone: member.phone,\n-          email: member.email,\n-          birth: member.birth,\n-          gender: member.gender,\n-          addressInfo: {\n-            address: member.address,\n-            sigunguCode: member.sigunguCode,\n-            dong: member.dong,\n-            roadAddress: member.roadAddress,\n-            jibunAddress: member.jibunAddress,\n-          },\n-        },\n-        joinInfo: {\n-          branchId: member.branchId,\n-          coach: member.coach,\n-          joinPath: member.joinPath,\n-          loginId: member.loginId,\n-          loginPassword: member.loginPassword || '', // null인 경우 빈 문자열로 변환\n-          enableLogin: member.enableLogin,\n-        },\n-        paymentInfo: {\n-          selectedProducts: products,\n-          paymentMethod: 'card', // 기본값으로 카드 설정\n-        },\n-        agreementInfo: member.agreementInfo,\n-      };\n-      \n-      await openPreviewWindow(formData);\n-    } catch (error) {\n-      console.error('문서 미리보기 실패:', error);\n-      alert('문서 미리보기 중 오류가 발생했습니다.');\n-    }\n-  };\n-\n-  const clearFilters = () => {\n-    setActiveFilters([]);\n-    setSearchQuery('');\n-    setFilteredMembers(members);\n-  };\n-\n-  // 고유한 지점명들을 필터 옵션으로 생성\n-  const branchNames = Array.from(new Set(members.map(member => member.branchName))).filter(Boolean);\n-  const filterOptions = ['남성', '여성', '로그인사용', ...branchNames];\n-\n-  if (loading) {\n-    return (\n-      <PageContainer>\n-        <LoadingState>\n-          <h3>회원 데이터를 불러오는 중...</h3>\n-        </LoadingState>\n-      </PageContainer>\n-    );\n-  }\n-\n-  return (\n-    <PageContainer>\n-      <SearchSection>\n-        <SearchRow>\n-          <SearchInput\n-            value={searchQuery}\n-            onChange={(e) => setSearchQuery(e.target.value)}\n-            onKeyPress={handleKeyPress}\n-            placeholder=\"회원명, 전화번호, 이메일, 코치명, 로그인ID, 주소(동)로 검색...\"\n-          />\n-          <Button onClick={handleSearch}>검색</Button>\n-          <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n-            필터\n-          </Button>\n-          <Button variant=\"secondary\" onClick={loadMembers}>\n-            새로고침\n-          </Button>\n-          {(activeFilters.length > 0 || searchQuery) && (\n-            <Button variant=\"secondary\" onClick={clearFilters}>\n-              초기화\n-            </Button>\n-          )}\n-        </SearchRow>\n-        \n-        <FilterRow $visible={showFilters}>\n-          <FilterLabel>필터:</FilterLabel>\n-          {filterOptions.map(filter => (\n-            <FilterChip\n-              key={filter}\n-              $active={activeFilters.includes(filter)}\n-              onClick={() => toggleFilter(filter)}\n-            >\n-              {filter}\n-            </FilterChip>\n-          ))}\n-        </FilterRow>\n-      </SearchSection>\n-\n-      <ResultsSection>\n-        <ResultsHeader>\n-          <ResultsTitle>검색 결과</ResultsTitle>\n-          <ResultsCount>총 {filteredMembers.length}명 (전체: {members.length}명)</ResultsCount>\n-        </ResultsHeader>\n-\n-        {filteredMembers.length > 0 ? (\n-          <TableContainer>\n-            <Table>\n-              <TableHeader>\n-                <TableRow>\n-                  <TableHeaderCell>이름</TableHeaderCell>\n-                  <TableHeaderCell>연락처</TableHeaderCell>\n-                  <TableHeaderCell>이메일</TableHeaderCell>\n-                  <TableHeaderCell>주소(동)</TableHeaderCell>\n-                  <TableHeaderCell>로그인ID</TableHeaderCell>\n-                  <TableHeaderCell>지점</TableHeaderCell>\n-                  <TableHeaderCell>담당코치</TableHeaderCell>\n-                  <TableHeaderCell>가입경로</TableHeaderCell>\n-                  <TableHeaderCell>상태</TableHeaderCell>\n-                  <TableHeaderCell>액션</TableHeaderCell>\n-                </TableRow>\n-              </TableHeader>\n-              <tbody>\n-                {filteredMembers.map(member => (\n-                  <TableRow key={member.id}>\n-                    <TableCell>{member.name}</TableCell>\n-                    <TableCell>{member.phone}</TableCell>\n-                    <TableCell>{member.email || '-'}</TableCell>\n-                    <TableCell>{member.dong || '-'}</TableCell>\n-                    <TableCell>{member.loginId || '-'}</TableCell>\n-                    <TableCell>{member.branchName || '-'}</TableCell>\n-                    <TableCell>{member.coachName || '-'}</TableCell>\n-                    <TableCell>{member.joinPath || '-'}</TableCell>\n-                    <TableCell>\n-                      <StatusBadge $status={member.isActive ? 'active' : 'inactive'}>\n-                        {member.isActive ? '활성' : '비활성'}\n-                      </StatusBadge>\n-                    </TableCell>\n-                    <TableCell>\n-                      <ActionButtons>\n-                        <ActionButton onClick={() => handlePreviewDocument(member)}>\n-                          문서보기\n-                        </ActionButton>\n-                      </ActionButtons>\n-                    </TableCell>\n-                  </TableRow>\n-                ))}\n-              </tbody>\n-            </Table>\n-          </TableContainer>\n-        ) : (\n-          <EmptyState>\n-            <EmptyStateTitle>검색 결과가 없습니다</EmptyStateTitle>\n-            <EmptyStateDescription>\n-              다른 검색어를 입력하거나 필터를 조정해보세요.\n-            </EmptyStateDescription>\n-          </EmptyState>\n-        )}\n-      </ResultsSection>\n-    </PageContainer>\n-  );\n-};\n-\n-export default MemberSearch;\n-import React, { useState, useEffect } from 'react';\n-import styled from 'styled-components';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager, type Member as DBMember } from '../../../utils/indexedDB';\n-import { openPreviewWindow } from './PreviewDocument';\n-import { MemberFormData } from './types';\n-\n-const PageContainer = styled.div`\n-  width: 100%;\n-`;\n-\n-const SearchSection = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  padding: 24px;\n-  margin-bottom: 24px;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const SearchRow = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  align-items: center;\n-  margin-bottom: 16px;\n-`;\n-\n-const SearchInput = styled.input`\n-  flex: 1;\n-  padding: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  outline: none;\n-  \n-  &:focus {\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n-`;\n-\n-const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n-  padding: 12px 18px;\n-  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n-  border-radius: 8px;\n-  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n-  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n-  font-size: ${AppTextStyles.body1.fontSize};\n+const PointInfo = styled.div`\n+  color: ${AppColors.primary};\n   font-weight: 600;\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    opacity: 0.9;\n-    transform: translateY(-1px);\n-  }\n-  \n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-    transform: none;\n-  }\n `;\n \n-const FilterRow = styled.div<{ $visible: boolean }>`\n-  display: ${props => props.$visible ? 'flex' : 'none'};\n-  gap: 8px;\n-  align-items: center;\n-  flex-wrap: wrap;\n+const UnpaidInfo = styled.div<{ $hasUnpaid: boolean }>`\n+  color: ${props => props.$hasUnpaid ? '#d32f2f' : AppColors.onInput1};\n+  font-size: 12px;\n+  margin-top: 2px;\n `;\n \n-const FilterLabel = styled.span`\n-  font-size: ${AppTextStyles.label2.fontSize};\n+const CourseItem = styled.div`\n+  font-size: 12px;\n   color: ${AppColors.onInput1};\n-  font-weight: 500;\n-`;\n-\n-const FilterChip = styled.button<{ $active: boolean }>`\n-  padding: 6px 12px;\n-  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n-  border-radius: 20px;\n-  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n-  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s;\n+  margin-bottom: 4px;\n   \n-  &:hover {\n-    border-color: ${AppColors.primary};\n-    background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n+  &:last-child {\n+    margin-bottom: 0;\n   }\n `;\n \n-const ResultsSection = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  overflow: hidden;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const ResultsHeader = styled.div`\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-  padding: 20px 24px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const ResultsTitle = styled.h2`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 600;\n+const CourseName = styled.span`\n   color: ${AppColors.onBackground};\n-  margin: 0;\n-`;\n-\n-const ResultsCount = styled.span`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const TableContainer = styled.div`\n-  overflow-x: auto;\n-`;\n-\n-const Table = styled.table`\n-  width: 100%;\n-  border-collapse: collapse;\n-`;\n-\n-const TableHeader = styled.thead`\n-  background: #f8f9fa;\n-`;\n-\n-const TableRow = styled.tr`\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  \n-  &:hover {\n-    background: #f8f9fa;\n-  }\n-`;\n-\n-const TableHeaderCell = styled.th`\n-  padding: 12px 16px;\n-  text-align: left;\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onInput1};\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const TableCell = styled.td`\n-  padding: 12px 16px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onBackground};\n-  vertical-align: middle;\n-`;\n-\n-const StatusBadge = styled.span<{ $status: 'active' | 'inactive' }>`\n-  padding: 4px 8px;\n-  border-radius: 12px;\n-  font-size: 12px;\n   font-weight: 500;\n-  background: ${props => props.$status === 'active' ? '#e7f5e7' : '#fff2f2'};\n-  color: ${props => props.$status === 'active' ? '#2d5a2d' : '#8b1538'};\n `;\n \n-const ActionButtons = styled.div`\n-  display: flex;\n-  gap: 8px;\n-`;\n-\n-const ActionButton = styled.button`\n-  padding: 6px 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 4px;\n-  background: ${AppColors.surface};\n+const ProgressText = styled.span`\n   color: ${AppColors.primary};\n-  font-size: 12px;\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    background: ${AppColors.primary};\n-    color: ${AppColors.onPrimary};\n-  }\n+  margin-left: 4px;\n `;\n \n-const EmptyState = styled.div`\n-  padding: 60px 24px;\n-  text-align: center;\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const EmptyStateTitle = styled.h3`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  margin: 0 0 8px 0;\n-`;\n-\n-const EmptyStateDescription = styled.p`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  margin: 0;\n-`;\n-\n-const LoadingState = styled.div`\n-  padding: 60px 24px;\n-  text-align: center;\n-  color: ${AppColors.onInput1};\n-`;\n-\n const MemberSearch: React.FC = () => {\n   const [searchQuery, setSearchQuery] = useState<string>('');\n-  const [members, setMembers] = useState<DBMember[]>([]);\n-  const [filteredMembers, setFilteredMembers] = useState<DBMember[]>([]);\n+  const [members, setMembers] = useState<MemberWithStats[]>([]);\n+  const [filteredMembers, setFilteredMembers] = useState<MemberWithStats[]>([]);\n   const [showFilters, setShowFilters] = useState<boolean>(false);\n   const [activeFilters, setActiveFilters] = useState<string[]>([]);\n   const [loading, setLoading] = useState<boolean>(true);\n \n-  // 컴포넌트 마운트 시 회원 데이터 로드\n-  useEffect(() => {\n-    loadMembers();\n-  }, []);\n+  const getProgressInfo = (enrollment: any) => {\n+    if (enrollment.programType === '횟수제' && enrollment.sessionCount) {\n+      const remaining = enrollment.sessionCount - (enrollment.completedSessions || 0);\n+      return `${remaining}/${enrollment.sessionCount}회 남음`;\n+    } else if (enrollment.programType === '기간제' && enrollment.endDate) {\n+      const today = new Date();\n+      const endDate = new Date(enrollment.endDate);\n+      const timeDiff = endDate.getTime() - today.getTime();\n+      const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n+      \n+      if (daysDiff > 0) {\n+        return `${daysDiff}일 남음`;\n+      } else if (daysDiff === 0) {\n+        return '오늘 종료';\n+      } else {\n+        return `${Math.abs(daysDiff)}일 경과`;\n+      }\n+    }\n+    return '진행률 미설정';\n+  };\n \n-  const loadMembers = async () => {\n+  const loadMembers = useCallback(async () => {\n     try {\n       setLoading(true);\n       console.log('회원 데이터 로딩 시작...');\n       const allMembers = await dbManager.getAllMembers();\n       console.log('전체 회원 수:', allMembers.length);\n-      console.log('전체 회원 데이터:', allMembers);\n       \n       const activeMembers = allMembers.filter(member => member.isActive);\n       console.log('활성 회원 수:', activeMembers.length);\n-      console.log('활성 회원 데이터:', activeMembers);\n       \n-      setMembers(activeMembers);\n-      setFilteredMembers(activeMembers);\n+      // 각 회원의 포인트와 수강정보를 조회하여 확장된 데이터 생성\n+      const membersWithStats: MemberWithStats[] = await Promise.all(\n+        activeMembers.map(async (member) => {\n+          try {\n+            // 포인트 잔액 조회\n+            const pointBalance = await dbManager.getMemberPointBalance(member.id);\n+            \n+            // 미수 총액 조회\n+            const unpaidTotal = await dbManager.getMemberUnpaidTotal(member.id);\n+            \n+            // 현재 수강중인 과정 조회 (완료 상태가 아닌 것들)\n+            const allEnrollments = await dbManager.getCourseEnrollmentsByMember(member.id);\n+            const activeEnrollments = allEnrollments.filter(e => e.enrollmentStatus === 'completed' || e.enrollmentStatus === 'unpaid');\n+            \n+            const currentCourses = activeEnrollments.map(enrollment => ({\n+              productName: enrollment.productName,\n+              programType: enrollment.programType,\n+              progressInfo: getProgressInfo(enrollment)\n+            }));\n+            \n+            return {\n+              ...member,\n+              pointBalance,\n+              unpaidTotal,\n+              currentCourses\n+            };\n+          } catch (error) {\n+            console.error(`회원 ${member.name}의 추가 정보 로드 실패:`, error);\n+            return {\n+              ...member,\n+              pointBalance: 0,\n+              unpaidTotal: 0,\n+              currentCourses: []\n+            };\n+          }\n+        })\n+      );\n+      \n+      setMembers(membersWithStats);\n+      setFilteredMembers(membersWithStats);\n     } catch (error) {\n       console.error('회원 데이터 로드 실패:', error);\n     } finally {\n       setLoading(false);\n     }\n-  };\n+  }, []);\n \n+  // 컴포넌트 마운트 시 회원 데이터 로드\n+  useEffect(() => {\n+    loadMembers();\n+  }, [loadMembers]);\n+\n   const handleSearch = async () => {\n     // 검색할 때마다 최신 데이터를 불러옵니다\n     await loadMembers();\n     \n@@ -793,9 +424,9 @@\n           branchId: member.branchId,\n           coach: member.coach,\n           joinPath: member.joinPath,\n           loginId: member.loginId,\n-          loginPassword: member.loginPassword,\n+          loginPassword: member.loginPassword || '', // null인 경우 빈 문자열로 변환\n           enableLogin: member.enableLogin,\n         },\n         paymentInfo: {\n           selectedProducts: products,\n@@ -881,497 +512,60 @@\n               <TableHeader>\n                 <TableRow>\n                   <TableHeaderCell>이름</TableHeaderCell>\n                   <TableHeaderCell>연락처</TableHeaderCell>\n-                  <TableHeaderCell>이메일</TableHeaderCell>\n-                  <TableHeaderCell>주소(동)</TableHeaderCell>\n-                  <TableHeaderCell>로그인ID</TableHeaderCell>\n                   <TableHeaderCell>지점</TableHeaderCell>\n                   <TableHeaderCell>담당코치</TableHeaderCell>\n-                  <TableHeaderCell>가입경로</TableHeaderCell>\n+                  <TableHeaderCell>포인트</TableHeaderCell>\n+                  <TableHeaderCell>미수금</TableHeaderCell>\n+                  <TableHeaderCell>현재 수강</TableHeaderCell>\n                   <TableHeaderCell>상태</TableHeaderCell>\n                   <TableHeaderCell>액션</TableHeaderCell>\n                 </TableRow>\n               </TableHeader>\n               <tbody>\n                 {filteredMembers.map(member => (\n                   <TableRow key={member.id}>\n-                    <TableCell>{member.name}</TableCell>\n+                    <TableCell>\n+                      <div>{member.name}</div>\n+                      <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+                        {member.email || '-'}\n+                      </div>\n+                    </TableCell>\n                     <TableCell>{member.phone}</TableCell>\n-                    <TableCell>{member.email || '-'}</TableCell>\n-                    <TableCell>{member.dong || '-'}</TableCell>\n-                    <TableCell>{member.loginId || '-'}</TableCell>\n                     <TableCell>{member.branchName || '-'}</TableCell>\n                     <TableCell>{member.coachName || '-'}</TableCell>\n-                    <TableCell>{member.joinPath || '-'}</TableCell>\n                     <TableCell>\n-                      <StatusBadge $status={member.isActive ? 'active' : 'inactive'}>\n-                        {member.isActive ? '활성' : '비활성'}\n-                      </StatusBadge>\n+                      <PointInfo>\n+                        {member.pointBalance > 0 \n+                          ? `${member.pointBalance.toLocaleString()}P` \n+                          : '-'\n+                        }\n+                      </PointInfo>\n                     </TableCell>\n                     <TableCell>\n-                      <ActionButtons>\n-                        <ActionButton onClick={() => handlePreviewDocument(member)}>\n-                          문서보기\n-                        </ActionButton>\n-                      </ActionButtons>\n+                      <UnpaidInfo $hasUnpaid={member.unpaidTotal > 0}>\n+                        {member.unpaidTotal > 0 \n+                          ? `${member.unpaidTotal.toLocaleString()}원` \n+                          : '-'\n+                        }\n+                      </UnpaidInfo>\n                     </TableCell>\n-                  </TableRow>\n-                ))}\n-              </tbody>\n-            </Table>\n-          </TableContainer>\n-        ) : (\n-          <EmptyState>\n-            <EmptyStateTitle>검색 결과가 없습니다</EmptyStateTitle>\n-            <EmptyStateDescription>\n-              다른 검색어를 입력하거나 필터를 조정해보세요.\n-            </EmptyStateDescription>\n-          </EmptyState>\n-        )}\n-      </ResultsSection>\n-    </PageContainer>\n-  );\n-};\n-\n-export default MemberSearch;\n-import React, { useState, useEffect } from 'react';\n-import styled from 'styled-components';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager, type Member as DBMember } from '../../../utils/indexedDB';\n-import { openPreviewWindow } from './PreviewDocument';\n-import { MemberFormData } from './types';\n-\n-const PageContainer = styled.div`\n-  width: 100%;\n-`;\n-\n-const SearchSection = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  padding: 24px;\n-  margin-bottom: 24px;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const SearchRow = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  align-items: center;\n-  margin-bottom: 16px;\n-`;\n-\n-const SearchInput = styled.input`\n-  flex: 1;\n-  padding: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  outline: none;\n-  \n-  &:focus {\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n-`;\n-\n-const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n-  padding: 12px 18px;\n-  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n-  border-radius: 8px;\n-  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n-  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  font-weight: 600;\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    opacity: 0.9;\n-    transform: translateY(-1px);\n-  }\n-  \n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-    transform: none;\n-  }\n-`;\n-\n-const FilterRow = styled.div<{ $visible: boolean }>`\n-  display: ${props => props.$visible ? 'flex' : 'none'};\n-  gap: 8px;\n-  align-items: center;\n-  flex-wrap: wrap;\n-`;\n-\n-const FilterLabel = styled.span`\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  color: ${AppColors.onInput1};\n-  font-weight: 500;\n-`;\n-\n-const FilterChip = styled.button<{ $active: boolean }>`\n-  padding: 6px 12px;\n-  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n-  border-radius: 20px;\n-  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n-  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    border-color: ${AppColors.primary};\n-    background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n-  }\n-`;\n-\n-const ResultsSection = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  overflow: hidden;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const ResultsHeader = styled.div`\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-  padding: 20px 24px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const ResultsTitle = styled.h2`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onBackground};\n-  margin: 0;\n-`;\n-\n-const ResultsCount = styled.span`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const TableContainer = styled.div`\n-  overflow-x: auto;\n-`;\n-\n-const Table = styled.table`\n-  width: 100%;\n-  border-collapse: collapse;\n-`;\n-\n-const TableHeader = styled.thead`\n-  background: #f8f9fa;\n-`;\n-\n-const TableRow = styled.tr`\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  \n-  &:hover {\n-    background: #f8f9fa;\n-  }\n-`;\n-\n-const TableHeaderCell = styled.th`\n-  padding: 12px 16px;\n-  text-align: left;\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onInput1};\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const TableCell = styled.td`\n-  padding: 12px 16px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onBackground};\n-  vertical-align: middle;\n-`;\n-\n-const StatusBadge = styled.span<{ $status: 'active' | 'inactive' }>`\n-  padding: 4px 8px;\n-  border-radius: 12px;\n-  font-size: 12px;\n-  font-weight: 500;\n-  background: ${props => props.$status === 'active' ? '#e7f5e7' : '#fff2f2'};\n-  color: ${props => props.$status === 'active' ? '#2d5a2d' : '#8b1538'};\n-`;\n-\n-const ActionButtons = styled.div`\n-  display: flex;\n-  gap: 8px;\n-`;\n-\n-const ActionButton = styled.button`\n-  padding: 6px 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 4px;\n-  background: ${AppColors.surface};\n-  color: ${AppColors.primary};\n-  font-size: 12px;\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    background: ${AppColors.primary};\n-    color: ${AppColors.onPrimary};\n-  }\n-`;\n-\n-const EmptyState = styled.div`\n-  padding: 60px 24px;\n-  text-align: center;\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const EmptyStateTitle = styled.h3`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  margin: 0 0 8px 0;\n-`;\n-\n-const EmptyStateDescription = styled.p`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  margin: 0;\n-`;\n-\n-const LoadingState = styled.div`\n-  padding: 60px 24px;\n-  text-align: center;\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const MemberSearch: React.FC = () => {\n-  const [searchQuery, setSearchQuery] = useState<string>('');\n-  const [members, setMembers] = useState<DBMember[]>([]);\n-  const [filteredMembers, setFilteredMembers] = useState<DBMember[]>([]);\n-  const [showFilters, setShowFilters] = useState<boolean>(false);\n-  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n-  const [loading, setLoading] = useState<boolean>(true);\n-\n-  // 컴포넌트 마운트 시 회원 데이터 로드\n-  useEffect(() => {\n-    loadMembers();\n-  }, []);\n-\n-  const loadMembers = async () => {\n-    try {\n-      setLoading(true);\n-      console.log('회원 데이터 로딩 시작...');\n-      const allMembers = await dbManager.getAllMembers();\n-      console.log('전체 회원 수:', allMembers.length);\n-      console.log('전체 회원 데이터:', allMembers);\n-      \n-      const activeMembers = allMembers.filter(member => member.isActive);\n-      console.log('활성 회원 수:', activeMembers.length);\n-      console.log('활성 회원 데이터:', activeMembers);\n-      \n-      setMembers(activeMembers);\n-      setFilteredMembers(activeMembers);\n-    } catch (error) {\n-      console.error('회원 데이터 로드 실패:', error);\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const handleSearch = async () => {\n-    // 검색할 때마다 최신 데이터를 불러옵니다\n-    await loadMembers();\n-    \n-    let filtered = members;\n-    \n-    // 텍스트 검색\n-    if (searchQuery.trim()) {\n-      const query = searchQuery.toLowerCase().trim();\n-      filtered = filtered.filter(member =>\n-        member.name.toLowerCase().includes(query) ||\n-        member.phone.includes(query) ||\n-        member.email.toLowerCase().includes(query) ||\n-        member.coachName.toLowerCase().includes(query) ||\n-        member.loginId.toLowerCase().includes(query) ||\n-        member.dong.toLowerCase().includes(query)\n-      );\n-    }\n-    \n-    // 필터 적용\n-    if (activeFilters.length > 0) {\n-      filtered = filtered.filter(member => {\n-        return activeFilters.some(filter => {\n-          switch (filter) {\n-            case '남성':\n-              return member.gender === 'male';\n-            case '여성':\n-              return member.gender === 'female';\n-            case '로그인사용':\n-              return member.enableLogin;\n-            default:\n-              return member.branchName === filter; // 지점명으로 필터링\n-          }\n-        });\n-      });\n-    }\n-    \n-    setFilteredMembers(filtered);\n-  };\n-\n-  const handleKeyPress = (e: React.KeyboardEvent) => {\n-    if (e.key === 'Enter') {\n-      handleSearch();\n-    }\n-  };\n-\n-  const toggleFilter = (filter: string) => {\n-    setActiveFilters(prev => \n-      prev.includes(filter) \n-        ? prev.filter(f => f !== filter)\n-        : [...prev, filter]\n-    );\n-  };\n-\n-  const handlePreviewDocument = async (member: DBMember) => {\n-    try {\n-      // 회원 데이터를 MemberFormData 형식으로 변환\n-      const payments = await dbManager.getPaymentsByMember(member.id);\n-      const products = payments.flatMap(payment => payment.products);\n-      \n-      const formData: MemberFormData = {\n-        basicInfo: {\n-          name: member.name,\n-          phone: member.phone,\n-          email: member.email,\n-          birth: member.birth,\n-          gender: member.gender,\n-          addressInfo: {\n-            address: member.address,\n-            sigunguCode: member.sigunguCode,\n-            dong: member.dong,\n-            roadAddress: member.roadAddress,\n-            jibunAddress: member.jibunAddress,\n-          },\n-        },\n-        joinInfo: {\n-          branchId: member.branchId,\n-          coach: member.coach,\n-          joinPath: member.joinPath,\n-          loginId: member.loginId,\n-          loginPassword: member.loginPassword,\n-          enableLogin: member.enableLogin,\n-        },\n-        paymentInfo: {\n-          selectedProducts: products,\n-        },\n-        agreementInfo: member.agreementInfo,\n-      };\n-      \n-      await openPreviewWindow(formData);\n-    } catch (error) {\n-      console.error('문서 미리보기 실패:', error);\n-      alert('문서 미리보기 중 오류가 발생했습니다.');\n-    }\n-  };\n-\n-  const clearFilters = () => {\n-    setActiveFilters([]);\n-    setSearchQuery('');\n-    setFilteredMembers(members);\n-  };\n-\n-  // 고유한 지점명들을 필터 옵션으로 생성\n-  const branchNames = Array.from(new Set(members.map(member => member.branchName))).filter(Boolean);\n-  const filterOptions = ['남성', '여성', '로그인사용', ...branchNames];\n-\n-  if (loading) {\n-    return (\n-      <PageContainer>\n-        <LoadingState>\n-          <h3>회원 데이터를 불러오는 중...</h3>\n-        </LoadingState>\n-      </PageContainer>\n-    );\n-  }\n-\n-  return (\n-    <PageContainer>\n-      <SearchSection>\n-        <SearchRow>\n-          <SearchInput\n-            value={searchQuery}\n-            onChange={(e) => setSearchQuery(e.target.value)}\n-            onKeyPress={handleKeyPress}\n-            placeholder=\"회원명, 전화번호, 이메일, 코치명, 로그인ID, 주소(동)로 검색...\"\n-          />\n-          <Button onClick={handleSearch}>검색</Button>\n-          <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n-            필터\n-          </Button>\n-          <Button variant=\"secondary\" onClick={loadMembers}>\n-            새로고침\n-          </Button>\n-          {(activeFilters.length > 0 || searchQuery) && (\n-            <Button variant=\"secondary\" onClick={clearFilters}>\n-              초기화\n-            </Button>\n-          )}\n-        </SearchRow>\n-        \n-        <FilterRow $visible={showFilters}>\n-          <FilterLabel>필터:</FilterLabel>\n-          {filterOptions.map(filter => (\n-            <FilterChip\n-              key={filter}\n-              $active={activeFilters.includes(filter)}\n-              onClick={() => toggleFilter(filter)}\n-            >\n-              {filter}\n-            </FilterChip>\n-          ))}\n-        </FilterRow>\n-      </SearchSection>\n-\n-      <ResultsSection>\n-        <ResultsHeader>\n-          <ResultsTitle>검색 결과</ResultsTitle>\n-          <ResultsCount>총 {filteredMembers.length}명 (전체: {members.length}명)</ResultsCount>\n-        </ResultsHeader>\n-\n-        {filteredMembers.length > 0 ? (\n-          <TableContainer>\n-            <Table>\n-              <TableHeader>\n-                <TableRow>\n-                  <TableHeaderCell>이름</TableHeaderCell>\n-                  <TableHeaderCell>연락처</TableHeaderCell>\n-                  <TableHeaderCell>이메일</TableHeaderCell>\n-                  <TableHeaderCell>주소(동)</TableHeaderCell>\n-                  <TableHeaderCell>로그인ID</TableHeaderCell>\n-                  <TableHeaderCell>지점</TableHeaderCell>\n-                  <TableHeaderCell>담당코치</TableHeaderCell>\n-                  <TableHeaderCell>가입경로</TableHeaderCell>\n-                  <TableHeaderCell>상태</TableHeaderCell>\n-                  <TableHeaderCell>액션</TableHeaderCell>\n-                </TableRow>\n-              </TableHeader>\n-              <tbody>\n-                {filteredMembers.map(member => (\n-                  <TableRow key={member.id}>\n-                    <TableCell>{member.name}</TableCell>\n-                    <TableCell>{member.phone}</TableCell>\n-                    <TableCell>{member.email || '-'}</TableCell>\n-                    <TableCell>{member.dong || '-'}</TableCell>\n-                    <TableCell>{member.loginId || '-'}</TableCell>\n-                    <TableCell>{member.branchName || '-'}</TableCell>\n-                    <TableCell>{member.coachName || '-'}</TableCell>\n-                    <TableCell>{member.joinPath || '-'}</TableCell>\n                     <TableCell>\n+                      {member.currentCourses.length > 0 ? (\n+                        member.currentCourses.map((course, index) => (\n+                          <CourseItem key={index}>\n+                            <CourseName>{course.productName}</CourseName>\n+                            <ProgressText>({course.progressInfo})</ProgressText>\n+                          </CourseItem>\n+                        ))\n+                      ) : (\n+                        <div style={{ color: AppColors.onInput1, fontSize: '12px' }}>\n+                          수강중인 과정 없음\n+                        </div>\n+                      )}\n+                    </TableCell>\n+                    <TableCell>\n                       <StatusBadge $status={member.isActive ? 'active' : 'inactive'}>\n                         {member.isActive ? '활성' : '비활성'}\n                       </StatusBadge>\n                     </TableCell>\n"
                },
                {
                    "date": 1760759291381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,13 @@\n import React, { useState, useEffect, useCallback } from 'react';\n import styled from 'styled-components';\n+import { toast } from 'react-toastify';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Member as DBMember } from '../../../utils/indexedDB';\n import { openPreviewWindow } from './PreviewDocument';\n import { MemberFormData } from './types';\n+import Modal from '../../../components/Modal';\n \n // 회원 검색 결과에서 사용할 확장된 회원 정보 타입\n interface MemberWithStats extends DBMember {\n   pointBalance: number;\n@@ -253,15 +255,135 @@\n   color: ${AppColors.primary};\n   margin-left: 4px;\n `;\n \n+// 폼 관련 스타일\n+const FormSection = styled.div`\n+  margin-bottom: 24px;\n+`;\n+\n+const SectionTitle = styled.h3`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onBackground};\n+  margin: 0 0 16px 0;\n+  padding-bottom: 8px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+`;\n+\n+const FormRow = styled.div`\n+  display: flex;\n+  gap: 16px;\n+  margin-bottom: 16px;\n+  \n+  &:last-child {\n+    margin-bottom: 0;\n+  }\n+  \n+  @media (max-width: 768px) {\n+    flex-direction: column;\n+    gap: 12px;\n+  }\n+`;\n+\n+const FormRowVertical = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 16px;\n+  margin-bottom: 16px;\n+  \n+  &:last-child {\n+    margin-bottom: 0;\n+  }\n+`;\n+\n+const FormGroup = styled.div`\n+  flex: 1;\n+`;\n+\n+const FormLabel = styled.label`\n+  display: block;\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  font-weight: 500;\n+  color: ${AppColors.onBackground};\n+  margin-bottom: 6px;\n+`;\n+\n+const FormInput = styled.input`\n+  width: 100%;\n+  max-width: 100%;\n+  padding: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  outline: none;\n+  box-sizing: border-box;\n+  \n+  &:focus {\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &:disabled {\n+    background: #f5f5f5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const FormSelect = styled.select`\n+  width: 100%;\n+  max-width: 100%;\n+  padding: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  outline: none;\n+  background: white;\n+  box-sizing: border-box;\n+  \n+  &:focus {\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &:disabled {\n+    background: #f5f5f5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const FormCheckbox = styled.input`\n+  margin-right: 8px;\n+`;\n+\n+const CheckboxLabel = styled.label`\n+  display: flex;\n+  align-items: center;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onBackground};\n+  cursor: pointer;\n+`;\n+\n+const ClickableRow = styled(TableRow)`\n+  cursor: pointer;\n+  \n+  &:hover {\n+    background: #f0f7ff !important;\n+  }\n+`;\n+\n const MemberSearch: React.FC = () => {\n   const [searchQuery, setSearchQuery] = useState<string>('');\n   const [members, setMembers] = useState<MemberWithStats[]>([]);\n   const [filteredMembers, setFilteredMembers] = useState<MemberWithStats[]>([]);\n   const [showFilters, setShowFilters] = useState<boolean>(false);\n   const [activeFilters, setActiveFilters] = useState<string[]>([]);\n   const [loading, setLoading] = useState<boolean>(true);\n+  \n+  // 모달 관련 상태\n+  const [showEditModal, setShowEditModal] = useState<boolean>(false);\n+  const [editingMember, setEditingMember] = useState<DBMember | null>(null);\n+  const [editFormData, setEditFormData] = useState<Partial<DBMember>>({});\n+  const [branches, setBranches] = useState<any[]>([]);\n+  const [staffList, setStaffList] = useState<any[]>([]);\n \n   const getProgressInfo = (enrollment: any) => {\n     if (enrollment.programType === '횟수제' && enrollment.sessionCount) {\n       const remaining = enrollment.sessionCount - (enrollment.completedSessions || 0);\n@@ -339,12 +461,27 @@\n       setLoading(false);\n     }\n   }, []);\n \n+  // 지점과 직원 데이터 로드\n+  const loadBranchesAndStaff = useCallback(async () => {\n+    try {\n+      const [branchData, staffData] = await Promise.all([\n+        dbManager.getAllBranches(),\n+        dbManager.getAllStaff()\n+      ]);\n+      setBranches(branchData);\n+      setStaffList(staffData);\n+    } catch (error) {\n+      console.error('지점/직원 데이터 로드 실패:', error);\n+    }\n+  }, []);\n+\n   // 컴포넌트 마운트 시 회원 데이터 로드\n   useEffect(() => {\n     loadMembers();\n-  }, [loadMembers]);\n+    loadBranchesAndStaff();\n+  }, [loadMembers, loadBranchesAndStaff]);\n \n   const handleSearch = async () => {\n     // 검색할 때마다 최신 데이터를 불러옵니다\n     await loadMembers();\n@@ -441,8 +578,120 @@\n       alert('문서 미리보기 중 오류가 발생했습니다.');\n     }\n   };\n \n+  // 회원 수정 모달 열기\n+  const handleEditMember = (member: DBMember) => {\n+    setEditingMember(member);\n+    setEditFormData({\n+      name: member.name,\n+      phone: member.phone,\n+      email: member.email,\n+      birth: member.birth,\n+      gender: member.gender,\n+      address: member.address,\n+      branchId: member.branchId,\n+      coach: member.coach,\n+      joinPath: member.joinPath,\n+      loginId: member.loginId,\n+      loginPassword: member.loginPassword || '',\n+      enableLogin: member.enableLogin,\n+      remarks: member.remarks || ''\n+    });\n+    setShowEditModal(true);\n+  };\n+\n+  // 회원 정보 수정 저장\n+  const handleSaveMember = async () => {\n+    if (!editingMember || !editFormData) return;\n+\n+    try {\n+      // 입력 검증\n+      if (!editFormData.name?.trim()) {\n+        toast.error('이름을 입력해주세요.');\n+        return;\n+      }\n+      if (!editFormData.phone?.trim()) {\n+        toast.error('연락처를 입력해주세요.');\n+        return;\n+      }\n+\n+      // 현재 회원을 제외한 다른 회원들의 연락처와 이메일 중복 체크\n+      const allMembers = await dbManager.getAllMembers();\n+      const otherMembers = allMembers.filter(m => m.id !== editingMember.id);\n+      \n+      // 연락처 중복 체크\n+      const phoneExists = otherMembers.some(m => m.phone === editFormData.phone);\n+      if (phoneExists) {\n+        toast.error(`연락처 ${editFormData.phone}는(은) 이미 등록된 회원입니다.`);\n+        return;\n+      }\n+\n+      // 이메일 중복 체크 (이메일이 있는 경우만)\n+      if (editFormData.email && editFormData.email.trim() !== '') {\n+        const emailExists = otherMembers.some(m => m.email === editFormData.email);\n+        if (emailExists) {\n+          toast.error(`이메일 ${editFormData.email}는(은) 이미 등록된 회원입니다.`);\n+          return;\n+        }\n+      }\n+\n+      // 로그인 ID 중복 체크 (로그인 기능 사용 시에만)\n+      if (editFormData.enableLogin && editFormData.loginId) {\n+        // 직원과 다른 회원들의 로그인 ID 중복 체크\n+        const [allStaff, loginIdExists] = await Promise.all([\n+          dbManager.getAllStaff(),\n+          Promise.resolve(otherMembers.some(m => m.loginId === editFormData.loginId))\n+        ]);\n+\n+        const staffLoginIdExists = allStaff.some(s => s.loginId === editFormData.loginId);\n+        \n+        if (staffLoginIdExists) {\n+          toast.error(`로그인 ID ${editFormData.loginId}는(은) 이미 직원으로 등록되어 있습니다.`);\n+          return;\n+        }\n+        \n+        if (loginIdExists) {\n+          toast.error(`로그인 ID ${editFormData.loginId}는(은) 이미 다른 회원이 사용하고 있습니다.`);\n+          return;\n+        }\n+      }\n+\n+      // 지점명과 코치명 가져오기\n+      const selectedBranch = branches.find(b => b.id === editFormData.branchId);\n+      const selectedCoach = staffList.find(s => s.id === editFormData.coach);\n+\n+      // 회원 정보 업데이트\n+      const updatedMember: DBMember = {\n+        ...editingMember,\n+        ...editFormData,\n+        branchName: selectedBranch?.name || editingMember.branchName,\n+        coachName: selectedCoach?.name || editingMember.coachName,\n+        loginPassword: editFormData.loginPassword || null,\n+      };\n+\n+      await dbManager.updateMember(editingMember.id, updatedMember);\n+\n+      toast.success('회원 정보가 성공적으로 수정되었습니다.');\n+      setShowEditModal(false);\n+      setEditingMember(null);\n+      setEditFormData({});\n+      \n+      // 회원 목록 새로고침\n+      await loadMembers();\n+    } catch (error) {\n+      console.error('회원 정보 수정 실패:', error);\n+      toast.error('회원 정보 수정 중 오류가 발생했습니다.');\n+    }\n+  };\n+\n+  // 모달 닫기\n+  const handleCloseModal = () => {\n+    setShowEditModal(false);\n+    setEditingMember(null);\n+    setEditFormData({});\n+  };\n+\n   const clearFilters = () => {\n     setActiveFilters([]);\n     setSearchQuery('');\n     setFilteredMembers(members);\n@@ -523,9 +772,9 @@\n                 </TableRow>\n               </TableHeader>\n               <tbody>\n                 {filteredMembers.map(member => (\n-                  <TableRow key={member.id}>\n+                  <ClickableRow key={member.id} onClick={() => handleEditMember(member)}>\n                     <TableCell>\n                       <div>{member.name}</div>\n                       <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n                         {member.email || '-'}\n@@ -570,14 +819,19 @@\n                       </StatusBadge>\n                     </TableCell>\n                     <TableCell>\n                       <ActionButtons>\n-                        <ActionButton onClick={() => handlePreviewDocument(member)}>\n+                        <ActionButton \n+                          onClick={(e) => {\n+                            e.stopPropagation();\n+                            handlePreviewDocument(member);\n+                          }}\n+                        >\n                           문서보기\n                         </ActionButton>\n                       </ActionButtons>\n                     </TableCell>\n-                  </TableRow>\n+                  </ClickableRow>\n                 ))}\n               </tbody>\n             </Table>\n           </TableContainer>\n@@ -589,8 +843,200 @@\n             </EmptyStateDescription>\n           </EmptyState>\n         )}\n       </ResultsSection>\n+\n+      {/* 회원 수정 모달 */}\n+      {showEditModal && editingMember && (\n+        <Modal \n+          isOpen={showEditModal}\n+          onClose={handleCloseModal}\n+          width=\"min(95vw, 1000px)\"\n+          header=\"회원 정보 수정\"\n+          body={\n+            <div style={{ textAlign: 'left' }}>\n+              <FormSection>\n+                <SectionTitle>기본 정보</SectionTitle>\n+                <FormRow>\n+                  <FormGroup>\n+                    <FormLabel>이름 *</FormLabel>\n+                    <FormInput\n+                      value={editFormData.name || ''}\n+                      onChange={(e) => setEditFormData(prev => ({ ...prev, name: e.target.value }))}\n+                      placeholder=\"이름을 입력하세요\"\n+                    />\n+                  </FormGroup>\n+                  <FormGroup>\n+                    <FormLabel>성별</FormLabel>\n+                    <FormSelect\n+                      value={editFormData.gender || ''}\n+                      onChange={(e) => setEditFormData(prev => ({ ...prev, gender: e.target.value as 'male' | 'female' | '' }))}\n+                    >\n+                      <option value=\"\">선택하세요</option>\n+                      <option value=\"male\">남성</option>\n+                      <option value=\"female\">여성</option>\n+                    </FormSelect>\n+                  </FormGroup>\n+                </FormRow>\n+                \n+                <FormRow>\n+                  <FormGroup>\n+                    <FormLabel>연락처 *</FormLabel>\n+                    <FormInput\n+                      value={editFormData.phone || ''}\n+                      onChange={(e) => setEditFormData(prev => ({ ...prev, phone: e.target.value }))}\n+                      placeholder=\"연락처를 입력하세요\"\n+                    />\n+                  </FormGroup>\n+                  <FormGroup>\n+                    <FormLabel>생년월일</FormLabel>\n+                    <FormInput\n+                      type=\"date\"\n+                      value={editFormData.birth || ''}\n+                      onChange={(e) => setEditFormData(prev => ({ ...prev, birth: e.target.value }))}\n+                    />\n+                  </FormGroup>\n+                </FormRow>\n+                \n+                <FormRowVertical>\n+                  <FormGroup>\n+                    <FormLabel>이메일</FormLabel>\n+                    <FormInput\n+                      type=\"email\"\n+                      value={editFormData.email || ''}\n+                      onChange={(e) => setEditFormData(prev => ({ ...prev, email: e.target.value }))}\n+                      placeholder=\"이메일을 입력하세요\"\n+                    />\n+                  </FormGroup>\n+                  <FormGroup>\n+                    <FormLabel>주소</FormLabel>\n+                    <FormInput\n+                      value={editFormData.address || ''}\n+                      onChange={(e) => setEditFormData(prev => ({ ...prev, address: e.target.value }))}\n+                      placeholder=\"주소를 입력하세요\"\n+                    />\n+                  </FormGroup>\n+                </FormRowVertical>\n+              </FormSection>\n+\n+              <FormSection>\n+                <SectionTitle>가입 정보</SectionTitle>\n+                <FormRow>\n+                  <FormGroup>\n+                    <FormLabel>지점</FormLabel>\n+                    <FormSelect\n+                      value={editFormData.branchId || ''}\n+                      onChange={(e) => setEditFormData(prev => ({ ...prev, branchId: e.target.value }))}\n+                    >\n+                      <option value=\"\">지점을 선택하세요</option>\n+                      {branches.map(branch => (\n+                        <option key={branch.id} value={branch.id}>\n+                          {branch.name}\n+                        </option>\n+                      ))}\n+                    </FormSelect>\n+                  </FormGroup>\n+                  <FormGroup>\n+                    <FormLabel>담당 코치</FormLabel>\n+                    <FormSelect\n+                      value={editFormData.coach || ''}\n+                      onChange={(e) => setEditFormData(prev => ({ ...prev, coach: e.target.value }))}\n+                    >\n+                      <option value=\"\">코치를 선택하세요</option>\n+                      {staffList\n+                        .filter(staff => !editFormData.branchId || staff.branchId === editFormData.branchId)\n+                        .map(staff => (\n+                          <option key={staff.id} value={staff.id}>\n+                            {staff.name} ({staff.position})\n+                          </option>\n+                        ))}\n+                    </FormSelect>\n+                  </FormGroup>\n+                </FormRow>\n+                \n+                <FormRowVertical>\n+                  <FormGroup>\n+                    <FormLabel>가입 경로</FormLabel>\n+                    <FormSelect\n+                      value={editFormData.joinPath || ''}\n+                      onChange={(e) => setEditFormData(prev => ({ ...prev, joinPath: e.target.value }))}\n+                    >\n+                      <option value=\"\">가입 경로를 선택하세요</option>\n+                      <option value=\"온라인\">온라인</option>\n+                      <option value=\"지인추천\">지인추천</option>\n+                      <option value=\"직접방문\">직접방문</option>\n+                      <option value=\"전화상담\">전화상담</option>\n+                      <option value=\"기타\">기타</option>\n+                    </FormSelect>\n+                  </FormGroup>\n+                </FormRowVertical>\n+              </FormSection>\n+\n+              <FormSection>\n+                <SectionTitle>로그인 정보</SectionTitle>\n+                <FormRowVertical>\n+                  <FormGroup>\n+                    <CheckboxLabel>\n+                      <FormCheckbox\n+                        type=\"checkbox\"\n+                        checked={editFormData.enableLogin || false}\n+                        onChange={(e) => setEditFormData(prev => ({ ...prev, enableLogin: e.target.checked }))}\n+                      />\n+                      로그인 기능 사용\n+                    </CheckboxLabel>\n+                  </FormGroup>\n+                </FormRowVertical>\n+                \n+                {editFormData.enableLogin && (\n+                  <FormRow>\n+                    <FormGroup>\n+                      <FormLabel>로그인 ID</FormLabel>\n+                      <FormInput\n+                        value={editFormData.loginId || ''}\n+                        onChange={(e) => setEditFormData(prev => ({ ...prev, loginId: e.target.value }))}\n+                        placeholder=\"로그인 ID를 입력하세요\"\n+                      />\n+                    </FormGroup>\n+                    <FormGroup>\n+                      <FormLabel>비밀번호</FormLabel>\n+                      <FormInput\n+                        type=\"password\"\n+                        value={editFormData.loginPassword || ''}\n+                        onChange={(e) => setEditFormData(prev => ({ ...prev, loginPassword: e.target.value }))}\n+                        placeholder=\"비밀번호를 입력하세요\"\n+                      />\n+                    </FormGroup>\n+                  </FormRow>\n+                )}\n+              </FormSection>\n+\n+              <FormSection>\n+                <SectionTitle>기타</SectionTitle>\n+                <FormRowVertical>\n+                  <FormGroup>\n+                    <FormLabel>비고</FormLabel>\n+                    <FormInput\n+                      value={editFormData.remarks || ''}\n+                      onChange={(e) => setEditFormData(prev => ({ ...prev, remarks: e.target.value }))}\n+                      placeholder=\"기타 메모사항을 입력하세요\"\n+                    />\n+                  </FormGroup>\n+                </FormRowVertical>\n+              </FormSection>\n+            </div>\n+          }\n+          footer={\n+            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '12px', width: '100%' }}>\n+              <Button variant=\"secondary\" onClick={handleCloseModal}>\n+                취소\n+              </Button>\n+              <Button onClick={handleSaveMember}>\n+                저장\n+              </Button>\n+            </div>\n+          }\n+        />\n+      )}\n     </PageContainer>\n   );\n };\n \n"
                },
                {
                    "date": 1760759504521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,15 @@\n import { dbManager, type Member as DBMember } from '../../../utils/indexedDB';\n import { openPreviewWindow } from './PreviewDocument';\n import { MemberFormData } from './types';\n import Modal from '../../../components/Modal';\n+import CustomDateInput from '../../../components/CustomDateInput';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import DaumAddressSearch from '../../../components/DaumAddressSearch';\n+import { AppPhoneTextField } from '../../../customComponents/AppPhoneTextField';\n+import { AppEmailTextField } from '../../../customComponents/AppEmailTextField';\n+import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n+import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n \n // 회원 검색 결과에서 사용할 확장된 회원 정보 타입\n interface MemberWithStats extends DBMember {\n   pointBalance: number;\n@@ -327,29 +334,8 @@\n     cursor: not-allowed;\n   }\n `;\n \n-const FormSelect = styled.select`\n-  width: 100%;\n-  max-width: 100%;\n-  padding: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  outline: none;\n-  background: white;\n-  box-sizing: border-box;\n-  \n-  &:focus {\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &:disabled {\n-    background: #f5f5f5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n const FormCheckbox = styled.input`\n   margin-right: 8px;\n `;\n \n@@ -866,54 +852,58 @@\n                     />\n                   </FormGroup>\n                   <FormGroup>\n                     <FormLabel>성별</FormLabel>\n-                    <FormSelect\n+                    <CustomDropdown\n                       value={editFormData.gender || ''}\n-                      onChange={(e) => setEditFormData(prev => ({ ...prev, gender: e.target.value as 'male' | 'female' | '' }))}\n-                    >\n-                      <option value=\"\">선택하세요</option>\n-                      <option value=\"male\">남성</option>\n-                      <option value=\"female\">여성</option>\n-                    </FormSelect>\n+                      onChange={(value) => setEditFormData(prev => ({ ...prev, gender: value as 'male' | 'female' | '' }))}\n+                      options={[\n+                        { value: 'female', label: '여성' },\n+                        { value: 'male', label: '남성' }\n+                      ]}\n+                      placeholder=\"성별을 선택하세요\"\n+                    />\n                   </FormGroup>\n                 </FormRow>\n                 \n                 <FormRow>\n                   <FormGroup>\n                     <FormLabel>연락처 *</FormLabel>\n-                    <FormInput\n+                    <AppPhoneTextField\n                       value={editFormData.phone || ''}\n-                      onChange={(e) => setEditFormData(prev => ({ ...prev, phone: e.target.value }))}\n+                      onChange={(value, isValid) => setEditFormData(prev => ({ ...prev, phone: value }))}\n                       placeholder=\"연락처를 입력하세요\"\n                     />\n                   </FormGroup>\n                   <FormGroup>\n                     <FormLabel>생년월일</FormLabel>\n-                    <FormInput\n-                      type=\"date\"\n+                    <CustomDateInput\n                       value={editFormData.birth || ''}\n-                      onChange={(e) => setEditFormData(prev => ({ ...prev, birth: e.target.value }))}\n+                      onChange={(value) => setEditFormData(prev => ({ ...prev, birth: value }))}\n+                      placeholder=\"생년월일을 선택하세요\"\n                     />\n                   </FormGroup>\n                 </FormRow>\n                 \n                 <FormRowVertical>\n                   <FormGroup>\n                     <FormLabel>이메일</FormLabel>\n-                    <FormInput\n-                      type=\"email\"\n+                    <AppEmailTextField\n                       value={editFormData.email || ''}\n                       onChange={(e) => setEditFormData(prev => ({ ...prev, email: e.target.value }))}\n                       placeholder=\"이메일을 입력하세요\"\n                     />\n                   </FormGroup>\n                   <FormGroup>\n                     <FormLabel>주소</FormLabel>\n-                    <FormInput\n+                    <DaumAddressSearch\n                       value={editFormData.address || ''}\n-                      onChange={(e) => setEditFormData(prev => ({ ...prev, address: e.target.value }))}\n-                      placeholder=\"주소를 입력하세요\"\n+                      onAddressSelect={(addressInfo) => setEditFormData(prev => ({ \n+                        ...prev, \n+                        address: addressInfo.address,\n+                        // 추가 주소 정보들도 저장 (필요시)\n+                      }))}\n+                      placeholder=\"주소를 검색하세요\"\n                     />\n                   </FormGroup>\n                 </FormRowVertical>\n               </FormSection>\n@@ -922,52 +912,53 @@\n                 <SectionTitle>가입 정보</SectionTitle>\n                 <FormRow>\n                   <FormGroup>\n                     <FormLabel>지점</FormLabel>\n-                    <FormSelect\n+                    <CustomDropdown\n                       value={editFormData.branchId || ''}\n-                      onChange={(e) => setEditFormData(prev => ({ ...prev, branchId: e.target.value }))}\n-                    >\n-                      <option value=\"\">지점을 선택하세요</option>\n-                      {branches.map(branch => (\n-                        <option key={branch.id} value={branch.id}>\n-                          {branch.name}\n-                        </option>\n-                      ))}\n-                    </FormSelect>\n+                      onChange={(value) => setEditFormData(prev => ({ ...prev, branchId: value }))}\n+                      options={branches.map(branch => ({ \n+                        value: branch.id, \n+                        label: branch.name \n+                      }))}\n+                      placeholder=\"지점을 선택하세요\"\n+                    />\n                   </FormGroup>\n                   <FormGroup>\n                     <FormLabel>담당 코치</FormLabel>\n-                    <FormSelect\n+                    <CustomDropdown\n                       value={editFormData.coach || ''}\n-                      onChange={(e) => setEditFormData(prev => ({ ...prev, coach: e.target.value }))}\n-                    >\n-                      <option value=\"\">코치를 선택하세요</option>\n-                      {staffList\n+                      onChange={(value) => setEditFormData(prev => ({ ...prev, coach: value }))}\n+                      options={staffList\n                         .filter(staff => !editFormData.branchId || staff.branchId === editFormData.branchId)\n-                        .map(staff => (\n-                          <option key={staff.id} value={staff.id}>\n-                            {staff.name} ({staff.position})\n-                          </option>\n-                        ))}\n-                    </FormSelect>\n+                        .map(staff => ({ \n+                          value: staff.id, \n+                          label: `${staff.name} (${staff.position})` \n+                        }))}\n+                      placeholder=\"코치를 선택하세요\"\n+                    />\n                   </FormGroup>\n                 </FormRow>\n                 \n                 <FormRowVertical>\n                   <FormGroup>\n                     <FormLabel>가입 경로</FormLabel>\n-                    <FormSelect\n+                    <CustomDropdown\n                       value={editFormData.joinPath || ''}\n-                      onChange={(e) => setEditFormData(prev => ({ ...prev, joinPath: e.target.value }))}\n-                    >\n-                      <option value=\"\">가입 경로를 선택하세요</option>\n-                      <option value=\"온라인\">온라인</option>\n-                      <option value=\"지인추천\">지인추천</option>\n-                      <option value=\"직접방문\">직접방문</option>\n-                      <option value=\"전화상담\">전화상담</option>\n-                      <option value=\"기타\">기타</option>\n-                    </FormSelect>\n+                      onChange={(value) => setEditFormData(prev => ({ ...prev, joinPath: value }))}\n+                      options={[\n+                        { value: '지인소개', label: '지인소개' },\n+                        { value: '당근마켓', label: '당근마켓' },\n+                        { value: '네이버 플레이스', label: '네이버 플레이스' },\n+                        { value: '전화', label: '전화' },\n+                        { value: '워크인', label: '워크인' },\n+                        { value: '현수막', label: '현수막' },\n+                        { value: '인스타', label: '인스타' },\n+                        { value: '광고지', label: '광고지' },\n+                        { value: '기타', label: '기타' }\n+                      ]}\n+                      placeholder=\"가입 경로를 선택하세요\"\n+                    />\n                   </FormGroup>\n                 </FormRowVertical>\n               </FormSection>\n \n@@ -989,21 +980,21 @@\n                 {editFormData.enableLogin && (\n                   <FormRow>\n                     <FormGroup>\n                       <FormLabel>로그인 ID</FormLabel>\n-                      <FormInput\n+                      <AppIdTextField\n                         value={editFormData.loginId || ''}\n                         onChange={(e) => setEditFormData(prev => ({ ...prev, loginId: e.target.value }))}\n                         placeholder=\"로그인 ID를 입력하세요\"\n                       />\n                     </FormGroup>\n                     <FormGroup>\n                       <FormLabel>비밀번호</FormLabel>\n-                      <FormInput\n-                        type=\"password\"\n+                      <AppPwdTextField\n                         value={editFormData.loginPassword || ''}\n                         onChange={(e) => setEditFormData(prev => ({ ...prev, loginPassword: e.target.value }))}\n                         placeholder=\"비밀번호를 입력하세요\"\n+                        fieldType={PwdFieldType.PASSWORD}\n                       />\n                     </FormGroup>\n                   </FormRow>\n                 )}\n"
                },
                {
                    "date": 1760759636758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -567,8 +567,14 @@\n \n   // 회원 수정 모달 열기\n   const handleEditMember = (member: DBMember) => {\n     setEditingMember(member);\n+    \n+    // 기존 로그인 정보가 있는지 확인\n+    const hasExistingLogin = member.enableLogin && \n+                            member.loginId && \n+                            !member.loginId.startsWith('temp_');\n+    \n     setEditFormData({\n       name: member.name,\n       phone: member.phone,\n       email: member.email,\n@@ -577,10 +583,11 @@\n       address: member.address,\n       branchId: member.branchId,\n       coach: member.coach,\n       joinPath: member.joinPath,\n-      loginId: member.loginId,\n-      loginPassword: member.loginPassword || '',\n+      // 기존 로그인 정보가 있는 경우 수정 불가하므로 폼에서 제외\n+      loginId: hasExistingLogin ? '' : (member.loginId || ''),\n+      loginPassword: hasExistingLogin ? '' : (member.loginPassword || ''),\n       enableLogin: member.enableLogin,\n       remarks: member.remarks || ''\n     });\n     setShowEditModal(true);\n@@ -620,40 +627,55 @@\n           return;\n         }\n       }\n \n-      // 로그인 ID 중복 체크 (로그인 기능 사용 시에만)\n+      // 로그인 ID 중복 체크 (로그인 기능 사용 시에만, 그리고 기존 로그인 정보가 없는 경우에만)\n       if (editFormData.enableLogin && editFormData.loginId) {\n-        // 직원과 다른 회원들의 로그인 ID 중복 체크\n-        const [allStaff, loginIdExists] = await Promise.all([\n-          dbManager.getAllStaff(),\n-          Promise.resolve(otherMembers.some(m => m.loginId === editFormData.loginId))\n-        ]);\n+        // 기존에 로그인 정보가 있는 경우 중복 체크 스킵\n+        const hasExistingLogin = editingMember.enableLogin && \n+                                editingMember.loginId && \n+                                !editingMember.loginId.startsWith('temp_');\n+        \n+        if (!hasExistingLogin) {\n+          // 직원과 다른 회원들의 로그인 ID 중복 체크\n+          const [allStaff, loginIdExists] = await Promise.all([\n+            dbManager.getAllStaff(),\n+            Promise.resolve(otherMembers.some(m => m.loginId === editFormData.loginId))\n+          ]);\n \n-        const staffLoginIdExists = allStaff.some(s => s.loginId === editFormData.loginId);\n-        \n-        if (staffLoginIdExists) {\n-          toast.error(`로그인 ID ${editFormData.loginId}는(은) 이미 직원으로 등록되어 있습니다.`);\n-          return;\n+          const staffLoginIdExists = allStaff.some(s => s.loginId === editFormData.loginId);\n+          \n+          if (staffLoginIdExists) {\n+            toast.error(`로그인 ID ${editFormData.loginId}는(은) 이미 직원으로 등록되어 있습니다.`);\n+            return;\n+          }\n+          \n+          if (loginIdExists) {\n+            toast.error(`로그인 ID ${editFormData.loginId}는(은) 이미 다른 회원이 사용하고 있습니다.`);\n+            return;\n+          }\n         }\n-        \n-        if (loginIdExists) {\n-          toast.error(`로그인 ID ${editFormData.loginId}는(은) 이미 다른 회원이 사용하고 있습니다.`);\n-          return;\n-        }\n       }\n \n       // 지점명과 코치명 가져오기\n       const selectedBranch = branches.find(b => b.id === editFormData.branchId);\n       const selectedCoach = staffList.find(s => s.id === editFormData.coach);\n \n+      // 기존 로그인 정보가 있는지 확인\n+      const hasExistingLogin = editingMember.enableLogin && \n+                              editingMember.loginId && \n+                              !editingMember.loginId.startsWith('temp_');\n+\n       // 회원 정보 업데이트\n       const updatedMember: DBMember = {\n         ...editingMember,\n         ...editFormData,\n         branchName: selectedBranch?.name || editingMember.branchName,\n         coachName: selectedCoach?.name || editingMember.coachName,\n-        loginPassword: editFormData.loginPassword || null,\n+        // 기존 로그인 정보가 있는 경우 보존, 없는 경우만 새로 설정\n+        loginId: hasExistingLogin ? editingMember.loginId : (editFormData.loginId || editingMember.loginId),\n+        loginPassword: hasExistingLogin ? editingMember.loginPassword : (editFormData.loginPassword || null),\n+        enableLogin: editFormData.enableLogin || false,\n       };\n \n       await dbManager.updateMember(editingMember.id, updatedMember);\n \n@@ -970,35 +992,76 @@\n                       <FormCheckbox\n                         type=\"checkbox\"\n                         checked={editFormData.enableLogin || false}\n                         onChange={(e) => setEditFormData(prev => ({ ...prev, enableLogin: e.target.checked }))}\n+                        disabled={!!(editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_'))}\n                       />\n                       로그인 기능 사용\n+                      {editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_') && (\n+                        <span style={{ marginLeft: '8px', fontSize: '12px', color: AppColors.onInput1 }}>\n+                          (기존 로그인 정보가 있어 수정 불가)\n+                        </span>\n+                      )}\n                     </CheckboxLabel>\n                   </FormGroup>\n                 </FormRowVertical>\n                 \n                 {editFormData.enableLogin && (\n                   <FormRow>\n                     <FormGroup>\n                       <FormLabel>로그인 ID</FormLabel>\n-                      <AppIdTextField\n-                        value={editFormData.loginId || ''}\n-                        onChange={(e) => setEditFormData(prev => ({ ...prev, loginId: e.target.value }))}\n-                        placeholder=\"로그인 ID를 입력하세요\"\n-                      />\n+                      {editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_') ? (\n+                        // 기존 로그인 ID가 있는 경우 - 읽기 전용으로 표시\n+                        <FormInput\n+                          value={editingMember.loginId}\n+                          disabled\n+                          style={{ backgroundColor: '#f5f5f5', cursor: 'not-allowed' }}\n+                        />\n+                      ) : (\n+                        // 로그인 기능이 없었거나 임시 ID인 경우 - 새로 입력 가능\n+                        <AppIdTextField\n+                          value={editFormData.loginId || ''}\n+                          onChange={(e) => setEditFormData(prev => ({ ...prev, loginId: e.target.value }))}\n+                          placeholder=\"로그인 ID를 입력하세요\"\n+                        />\n+                      )}\n                     </FormGroup>\n                     <FormGroup>\n                       <FormLabel>비밀번호</FormLabel>\n-                      <AppPwdTextField\n-                        value={editFormData.loginPassword || ''}\n-                        onChange={(e) => setEditFormData(prev => ({ ...prev, loginPassword: e.target.value }))}\n-                        placeholder=\"비밀번호를 입력하세요\"\n-                        fieldType={PwdFieldType.PASSWORD}\n-                      />\n+                      {editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_') ? (\n+                        // 기존 로그인 정보가 있는 경우 - 비밀번호 확인 불가\n+                        <FormInput\n+                          value=\"••••••••\"\n+                          disabled\n+                          style={{ backgroundColor: '#f5f5f5', cursor: 'not-allowed' }}\n+                          placeholder=\"보안상 확인 불가\"\n+                        />\n+                      ) : (\n+                        // 로그인 기능이 없었거나 임시 ID인 경우 - 새로 입력 가능\n+                        <AppPwdTextField\n+                          value={editFormData.loginPassword || ''}\n+                          onChange={(e) => setEditFormData(prev => ({ ...prev, loginPassword: e.target.value }))}\n+                          placeholder=\"비밀번호를 입력하세요\"\n+                          fieldType={PwdFieldType.PASSWORD}\n+                        />\n+                      )}\n                     </FormGroup>\n                   </FormRow>\n                 )}\n+                \n+                {editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_') && (\n+                  <div style={{ \n+                    padding: '12px', \n+                    backgroundColor: '#fff3cd', \n+                    border: '1px solid #ffeaa7', \n+                    borderRadius: '8px',\n+                    fontSize: '14px',\n+                    color: '#856404',\n+                    marginTop: '8px'\n+                  }}>\n+                    ⚠️ 보안상 기존 로그인 ID와 비밀번호는 수정할 수 없습니다.\n+                  </div>\n+                )}\n               </FormSection>\n \n               <FormSection>\n                 <SectionTitle>기타</SectionTitle>\n"
                },
                {
                    "date": 1760760103194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,13 +346,15 @@\n   color: ${AppColors.onBackground};\n   cursor: pointer;\n `;\n \n-const ClickableRow = styled(TableRow)`\n+const ClickableRow = styled(TableRow)<{ $isActive?: boolean }>`\n   cursor: pointer;\n+  opacity: ${props => props.$isActive === false ? 0.6 : 1};\n+  background-color: ${props => props.$isActive === false ? '#f8f9fa' : 'transparent'};\n   \n   &:hover {\n-    background: #f0f7ff !important;\n+    background: ${props => props.$isActive === false ? '#e9ecef !important' : '#f0f7ff !important'};\n   }\n `;\n \n const MemberSearch: React.FC = () => {\n@@ -368,8 +370,9 @@\n   const [editingMember, setEditingMember] = useState<DBMember | null>(null);\n   const [editFormData, setEditFormData] = useState<Partial<DBMember>>({});\n   const [branches, setBranches] = useState<any[]>([]);\n   const [staffList, setStaffList] = useState<any[]>([]);\n+  const [hasActiveCourses, setHasActiveCourses] = useState<boolean>(false);\n \n   const getProgressInfo = (enrollment: any) => {\n     if (enrollment.programType === '횟수제' && enrollment.sessionCount) {\n       const remaining = enrollment.sessionCount - (enrollment.completedSessions || 0);\n@@ -397,14 +400,14 @@\n       console.log('회원 데이터 로딩 시작...');\n       const allMembers = await dbManager.getAllMembers();\n       console.log('전체 회원 수:', allMembers.length);\n       \n-      const activeMembers = allMembers.filter(member => member.isActive);\n-      console.log('활성 회원 수:', activeMembers.length);\n+      // 모든 회원을 표시 (활성/비활성 모두 포함)\n+      console.log('전체 회원 수 (활성+비활성):', allMembers.length);\n       \n       // 각 회원의 포인트와 수강정보를 조회하여 확장된 데이터 생성\n       const membersWithStats: MemberWithStats[] = await Promise.all(\n-        activeMembers.map(async (member) => {\n+        allMembers.map(async (member) => {\n           try {\n             // 포인트 잔액 조회\n             const pointBalance = await dbManager.getMemberPointBalance(member.id);\n             \n@@ -497,8 +500,12 @@\n             case '여성':\n               return member.gender === 'female';\n             case '로그인사용':\n               return member.enableLogin;\n+            case '활성':\n+              return member.isActive;\n+            case '비활성':\n+              return !member.isActive;\n             default:\n               return member.branchName === filter; // 지점명으로 필터링\n           }\n         });\n@@ -564,12 +571,86 @@\n       alert('문서 미리보기 중 오류가 발생했습니다.');\n     }\n   };\n \n+  // 활성 수강 정보 확인\n+  const checkActiveCourses = async (memberId: string): Promise<boolean> => {\n+    try {\n+      console.log('=== 활성 수강 확인 시작 ===');\n+      console.log('회원 ID:', memberId);\n+      \n+      const enrollments = await dbManager.getCourseEnrollmentsByMember(memberId);\n+      console.log('전체 수강 정보:', enrollments);\n+      \n+      // 결제 상태와 관계없이 수강 등록된 모든 과정 확인\n+      const activeCourses = enrollments.filter(enrollment => {\n+        console.log('수강 정보 확인:', {\n+          productName: enrollment.productName,\n+          enrollmentStatus: enrollment.enrollmentStatus,\n+          startDate: enrollment.startDate,\n+          endDate: enrollment.endDate,\n+          sessionCount: enrollment.sessionCount,\n+          completedSessions: enrollment.completedSessions || 0,\n+          unpaidAmount: enrollment.unpaidAmount || 0\n+        });\n+        \n+        // 수강 등록 상태가 'completed' 또는 'unpaid'인 경우 (결제 완료 또는 미수)\n+        if (enrollment.enrollmentStatus !== 'completed' && enrollment.enrollmentStatus !== 'unpaid') {\n+          console.log('- 수강 등록 상태가 아님으로 제외');\n+          return false;\n+        }\n+        \n+        // 시작일이 없는 경우 (아직 시작 안함 - 수강 예정)\n+        if (!enrollment.startDate) {\n+          console.log('- 시작일 없음 → 수강 예정으로 활성 수강 판정');\n+          return true;\n+        }\n+        \n+        // 기간제: 종료일이 없거나 종료일이 미래인 경우 (진행 중)\n+        if (!enrollment.endDate || new Date(enrollment.endDate) > new Date()) {\n+          console.log('- 종료일 없거나 미래 → 기간제 진행 중으로 활성 수강 판정');\n+          return true;\n+        }\n+        \n+        // 횟수제: 남은 횟수가 있는 경우\n+        if (enrollment.sessionCount && (enrollment.completedSessions || 0) < enrollment.sessionCount) {\n+          const remainingSessions = enrollment.sessionCount - (enrollment.completedSessions || 0);\n+          console.log(`- 횟수제 남은 횟수: ${remainingSessions}회 → 활성 수강 판정`);\n+          return true;\n+        }\n+        \n+        console.log('- 수강 완료로 비활성 수강 판정');\n+        return false;\n+      });\n+      \n+      console.log('활성 수강 목록:', activeCourses);\n+      console.log('활성 수강 개수:', activeCourses.length);\n+      console.log('=== 활성 수강 확인 종료 ===');\n+      \n+      return activeCourses.length > 0;\n+    } catch (error) {\n+      console.error('활성 수강 정보 확인 실패:', error);\n+      return false;\n+    }\n+  };\n+\n   // 회원 수정 모달 열기\n-  const handleEditMember = (member: DBMember) => {\n+  const handleEditMember = async (member: DBMember) => {\n+    console.log('=== 회원 수정 모달 열기 ===');\n+    console.log('회원 정보:', {\n+      id: member.id,\n+      name: member.name,\n+      phone: member.phone,\n+      isActive: member.isActive\n+    });\n+    \n     setEditingMember(member);\n     \n+    // 활성 수강 정보 확인\n+    const hasActive = await checkActiveCourses(member.id);\n+    console.log('활성 수강 있음:', hasActive);\n+    setHasActiveCourses(hasActive);\n+    \n     // 기존 로그인 정보가 있는지 확인\n     const hasExistingLogin = member.enableLogin && \n                             member.loginId && \n                             !member.loginId.startsWith('temp_');\n@@ -691,13 +772,66 @@\n       toast.error('회원 정보 수정 중 오류가 발생했습니다.');\n     }\n   };\n \n+  // 회원 상태 변경 (활성/비활성)\n+  const handleToggleMemberStatus = async () => {\n+    if (!editingMember) return;\n+\n+    try {\n+      const newStatus = !editingMember.isActive;\n+      const statusText = newStatus ? '활성' : '비활성';\n+      \n+      // 비활성화하려는데 활성 수강이 있는 경우 차단\n+      if (!newStatus && hasActiveCourses) {\n+        toast.error('수강 중인 과정이 있는 회원은 비활성화할 수 없습니다.');\n+        return;\n+      }\n+      \n+      // 상태 변경 확인\n+      const confirmed = window.confirm(\n+        `정말로 이 회원을 '${statusText}' 상태로 변경하시겠습니까?\\n\\n` +\n+        `회원명: ${editingMember.name}\\n` +\n+        `연락처: ${editingMember.phone}`\n+      );\n+\n+      if (!confirmed) return;\n+\n+      // 회원 상태 업데이트\n+      const updatedMember: DBMember = {\n+        ...editingMember,\n+        isActive: newStatus\n+      };\n+\n+      await dbManager.updateMember(editingMember.id, updatedMember);\n+\n+      // 로컬 상태 업데이트\n+      setEditingMember(updatedMember);\n+      \n+      toast.success(`회원이 '${statusText}' 상태로 변경되었습니다.`);\n+      \n+      // 회원 목록 새로고침\n+      await loadMembers();\n+      \n+      // 현재 검색 조건으로 다시 필터링\n+      if (searchQuery.trim() || activeFilters.length > 0) {\n+        // 기존 검색 조건 유지하면서 새로고침\n+        setTimeout(() => {\n+          handleSearch();\n+        }, 100);\n+      }\n+    } catch (error) {\n+      console.error('회원 상태 변경 실패:', error);\n+      toast.error('회원 상태 변경 중 오류가 발생했습니다.');\n+    }\n+  };\n+\n   // 모달 닫기\n   const handleCloseModal = () => {\n     setShowEditModal(false);\n     setEditingMember(null);\n     setEditFormData({});\n+    setHasActiveCourses(false);\n   };\n \n   const clearFilters = () => {\n     setActiveFilters([]);\n@@ -706,9 +840,9 @@\n   };\n \n   // 고유한 지점명들을 필터 옵션으로 생성\n   const branchNames = Array.from(new Set(members.map(member => member.branchName))).filter(Boolean);\n-  const filterOptions = ['남성', '여성', '로그인사용', ...branchNames];\n+  const filterOptions = ['활성', '비활성', '남성', '여성', '로그인사용', ...branchNames];\n \n   if (loading) {\n     return (\n       <PageContainer>\n@@ -759,9 +893,14 @@\n \n       <ResultsSection>\n         <ResultsHeader>\n           <ResultsTitle>검색 결과</ResultsTitle>\n-          <ResultsCount>총 {filteredMembers.length}명 (전체: {members.length}명)</ResultsCount>\n+          <ResultsCount>\n+            총 {filteredMembers.length}명 \n+            (활성: {filteredMembers.filter(m => m.isActive).length}명, \n+            비활성: {filteredMembers.filter(m => !m.isActive).length}명 / \n+            전체: {members.length}명)\n+          </ResultsCount>\n         </ResultsHeader>\n \n         {filteredMembers.length > 0 ? (\n           <TableContainer>\n@@ -780,9 +919,13 @@\n                 </TableRow>\n               </TableHeader>\n               <tbody>\n                 {filteredMembers.map(member => (\n-                  <ClickableRow key={member.id} onClick={() => handleEditMember(member)}>\n+                  <ClickableRow \n+                    key={member.id} \n+                    onClick={() => handleEditMember(member)}\n+                    $isActive={member.isActive}\n+                  >\n                     <TableCell>\n                       <div>{member.name}</div>\n                       <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n                         {member.email || '-'}\n@@ -1078,15 +1221,48 @@\n               </FormSection>\n             </div>\n           }\n           footer={\n-            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '12px', width: '100%' }}>\n-              <Button variant=\"secondary\" onClick={handleCloseModal}>\n-                취소\n-              </Button>\n-              <Button onClick={handleSaveMember}>\n-                저장\n-              </Button>\n+            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\n+              <div>\n+                <Button \n+                  variant=\"secondary\" \n+                  onClick={handleToggleMemberStatus}\n+                  disabled={editingMember?.isActive && hasActiveCourses}\n+                  style={{\n+                    backgroundColor: editingMember?.isActive ? '#fef2f2' : '#f0f9ff',\n+                    borderColor: editingMember?.isActive ? '#fca5a5' : '#93c5fd',\n+                    color: editingMember?.isActive ? '#dc2626' : '#2563eb',\n+                    opacity: (editingMember?.isActive && hasActiveCourses) ? 0.5 : 1,\n+                    cursor: (editingMember?.isActive && hasActiveCourses) ? 'not-allowed' : 'pointer'\n+                  }}\n+                  title={\n+                    editingMember?.isActive && hasActiveCourses \n+                      ? '수강 중인 과정이 있어 비활성화할 수 없습니다' \n+                      : ''\n+                  }\n+                >\n+                  {editingMember?.isActive ? '비활성화' : '활성화'}\n+                </Button>\n+                {editingMember?.isActive && hasActiveCourses && (\n+                  <div style={{ \n+                    fontSize: '12px', \n+                    color: '#dc2626', \n+                    marginTop: '4px',\n+                    maxWidth: '120px' \n+                  }}>\n+                    ⚠️ 수강 중인 과정이 있어 비활성화 불가\n+                  </div>\n+                )}\n+              </div>\n+              <div style={{ display: 'flex', gap: '12px' }}>\n+                <Button variant=\"secondary\" onClick={handleCloseModal}>\n+                  취소\n+                </Button>\n+                <Button onClick={handleSaveMember}>\n+                  저장\n+                </Button>\n+              </div>\n             </div>\n           }\n         />\n       )}\n"
                },
                {
                    "date": 1760760624129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,11 @@\n import { AppEmailTextField } from '../../../customComponents/AppEmailTextField';\n import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n \n+// 기간 옵션 타입\n+type PeriodOption = '1month' | '3month' | '6month' | 'custom';\n+\n // 회원 검색 결과에서 사용할 확장된 회원 정보 타입\n interface MemberWithStats extends DBMember {\n   pointBalance: number;\n   unpaidTotal: number;\n@@ -92,8 +95,92 @@\n   align-items: center;\n   flex-wrap: wrap;\n `;\n \n+const PeriodRow = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  align-items: center;\n+  margin-bottom: 16px;\n+  flex-wrap: wrap;\n+`;\n+\n+const PeriodLabel = styled.span`\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  color: ${AppColors.onSurface};\n+  font-weight: 500;\n+  min-width: 40px;\n+`;\n+\n+const PeriodButton = styled.button<{ $active: boolean }>`\n+  padding: 8px 16px;\n+  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n+  border-radius: 8px;\n+  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n+  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  font-weight: 500;\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    border-color: ${AppColors.primary};\n+    background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n+  }\n+`;\n+\n+const PeriodDisplay = styled.div`\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onInput1};\n+  background: #f8f9fa;\n+  padding: 8px 12px;\n+  border-radius: 6px;\n+  border: 1px solid ${AppColors.borderLight};\n+`;\n+\n+const UnpaidFilterButton = styled.button<{ $active: boolean; $hasUnpaid: boolean }>`\n+  padding: 10px 16px;\n+  border: 1px solid ${props => props.$active ? '#dc2626' : (props.$hasUnpaid ? '#fca5a5' : AppColors.borderLight)};\n+  border-radius: 8px;\n+  background: ${props => props.$active ? '#dc2626' : (props.$hasUnpaid ? '#fef2f2' : AppColors.surface)};\n+  color: ${props => props.$active ? '#ffffff' : (props.$hasUnpaid ? '#dc2626' : AppColors.onInput1)};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  font-weight: 600;\n+  cursor: ${props => props.$hasUnpaid ? 'pointer' : 'not-allowed'};\n+  opacity: ${props => props.$hasUnpaid ? 1 : 0.5};\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    ${props => props.$hasUnpaid && `\n+      border-color: #dc2626;\n+      background: ${props.$active ? '#b91c1c' : '#fca5a5'};\n+    `}\n+  }\n+`;\n+\n+const DateRangeInputs = styled.div`\n+  display: flex;\n+  gap: 8px;\n+  align-items: center;\n+`;\n+\n+const DateInput = styled.input`\n+  padding: 8px 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 6px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  outline: none;\n+  \n+  &:focus {\n+    border-color: ${AppColors.primary};\n+  }\n+`;\n+\n+const DateSeparator = styled.span`\n+  color: ${AppColors.onInput1};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n const FilterLabel = styled.span`\n   font-size: ${AppTextStyles.label2.fontSize};\n   color: ${AppColors.onInput1};\n   font-weight: 500;\n@@ -364,8 +451,20 @@\n   const [showFilters, setShowFilters] = useState<boolean>(false);\n   const [activeFilters, setActiveFilters] = useState<string[]>([]);\n   const [loading, setLoading] = useState<boolean>(true);\n   \n+  // 기간 선택 관련 상태\n+  const [selectedPeriod, setSelectedPeriod] = useState<PeriodOption>('1month');\n+  const [customStartDate, setCustomStartDate] = useState<string>('');\n+  const [customEndDate, setCustomEndDate] = useState<string>('');\n+  \n+  // 미수 필터 관련 상태\n+  const [showUnpaidOnly, setShowUnpaidOnly] = useState<boolean>(false);\n+  const [unpaidMetaInfo, setUnpaidMetaInfo] = useState<{ unpaidMemberCount: number; totalUnpaidAmount: number }>({\n+    unpaidMemberCount: 0,\n+    totalUnpaidAmount: 0\n+  });\n+  \n   // 모달 관련 상태\n   const [showEditModal, setShowEditModal] = useState<boolean>(false);\n   const [editingMember, setEditingMember] = useState<DBMember | null>(null);\n   const [editFormData, setEditFormData] = useState<Partial<DBMember>>({});\n@@ -393,21 +492,85 @@\n     }\n     return '진행률 미설정';\n   };\n \n+  // 미수 메타정보 로드\n+  const loadUnpaidMetaInfo = useCallback(async () => {\n+    try {\n+      const metaInfo = await dbManager.getUnpaidMetaInfo();\n+      setUnpaidMetaInfo(metaInfo);\n+    } catch (error) {\n+      console.error('미수 메타정보 로드 실패:', error);\n+    }\n+  }, []);\n+\n+  // 기간별 검색 범위 계산\n+  const getDateRange = useCallback(() => {\n+    const today = new Date();\n+    const startDate = new Date();\n+    \n+    switch (selectedPeriod) {\n+      case '1month':\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+      case '3month':\n+        startDate.setMonth(today.getMonth() - 3);\n+        return { start: startDate, end: today };\n+      case '6month':\n+        startDate.setMonth(today.getMonth() - 6);\n+        return { start: startDate, end: today };\n+      case 'custom':\n+        if (customStartDate && customEndDate) {\n+          return { \n+            start: new Date(customStartDate), \n+            end: new Date(customEndDate) \n+          };\n+        }\n+        // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+      default:\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+    }\n+  }, [selectedPeriod, customStartDate, customEndDate]);\n+\n+  // 날짜 범위 표시 문자열 생성\n+  const getDateRangeDisplay = useCallback(() => {\n+    const range = getDateRange();\n+    const formatDate = (date: Date) => {\n+      return date.toLocaleDateString('ko-KR', {\n+        year: 'numeric',\n+        month: 'short',\n+        day: 'numeric'\n+      });\n+    };\n+    return `${formatDate(range.start)} ~ ${formatDate(range.end)}`;\n+  }, [getDateRange]);\n+\n   const loadMembers = useCallback(async () => {\n     try {\n       setLoading(true);\n       console.log('회원 데이터 로딩 시작...');\n+      \n+      // 미수 메타정보 로드\n+      await loadUnpaidMetaInfo();\n+      \n       const allMembers = await dbManager.getAllMembers();\n       console.log('전체 회원 수:', allMembers.length);\n       \n-      // 모든 회원을 표시 (활성/비활성 모두 포함)\n-      console.log('전체 회원 수 (활성+비활성):', allMembers.length);\n+      // 기간별 필터링 (가입일 기준)\n+      const dateRange = getDateRange();\n+      const filteredByDate = allMembers.filter(member => {\n+        const joinDate = new Date(member.createdAt);\n+        return joinDate >= dateRange.start && joinDate <= dateRange.end;\n+      });\n       \n+      console.log(`${selectedPeriod} 기간 내 가입 회원 수:`, filteredByDate.length);\n+      \n       // 각 회원의 포인트와 수강정보를 조회하여 확장된 데이터 생성\n       const membersWithStats: MemberWithStats[] = await Promise.all(\n-        allMembers.map(async (member) => {\n+        filteredByDate.map(async (member) => {\n           try {\n             // 포인트 잔액 조회\n             const pointBalance = await dbManager.getMemberPointBalance(member.id);\n             \n@@ -448,9 +611,9 @@\n       console.error('회원 데이터 로드 실패:', error);\n     } finally {\n       setLoading(false);\n     }\n-  }, []);\n+  }, [selectedPeriod, getDateRange, loadUnpaidMetaInfo]);\n \n   // 지점과 직원 데이터 로드\n   const loadBranchesAndStaff = useCallback(async () => {\n     try {\n@@ -470,14 +633,26 @@\n     loadMembers();\n     loadBranchesAndStaff();\n   }, [loadMembers, loadBranchesAndStaff]);\n \n+  // 기간 변경 시 데이터 새로고침\n+  useEffect(() => {\n+    if (selectedPeriod !== 'custom' || (customStartDate && customEndDate)) {\n+      loadMembers();\n+    }\n+  }, [selectedPeriod, customStartDate, customEndDate, loadMembers]);\n+\n   const handleSearch = async () => {\n     // 검색할 때마다 최신 데이터를 불러옵니다\n     await loadMembers();\n     \n     let filtered = members;\n     \n+    // 미수 필터 적용\n+    if (showUnpaidOnly) {\n+      filtered = filtered.filter(member => member.unpaidTotal > 0);\n+    }\n+    \n     // 텍스트 검색\n     if (searchQuery.trim()) {\n       const query = searchQuery.toLowerCase().trim();\n       filtered = filtered.filter(member =>\n@@ -489,9 +664,9 @@\n         member.dong.toLowerCase().includes(query)\n       );\n     }\n     \n-    // 필터 적용\n+    // 기타 필터 적용\n     if (activeFilters.length > 0) {\n       filtered = filtered.filter(member => {\n         return activeFilters.some(filter => {\n           switch (filter) {\n@@ -835,8 +1010,9 @@\n \n   const clearFilters = () => {\n     setActiveFilters([]);\n     setSearchQuery('');\n+    setShowUnpaidOnly(false);\n     setFilteredMembers(members);\n   };\n \n   // 고유한 지점명들을 필터 옵션으로 생성\n@@ -855,23 +1031,94 @@\n \n   return (\n     <PageContainer>\n       <SearchSection>\n+        {/* 기간 선택 영역 */}\n+        <PeriodRow>\n+          <PeriodLabel>범위:</PeriodLabel>\n+          <PeriodDisplay>{getDateRangeDisplay()}</PeriodDisplay>\n+          \n+          <PeriodButton \n+            $active={selectedPeriod === '1month'}\n+            onClick={() => setSelectedPeriod('1month')}\n+          >\n+            1개월\n+          </PeriodButton>\n+          \n+          <PeriodButton \n+            $active={selectedPeriod === '3month'}\n+            onClick={() => setSelectedPeriod('3month')}\n+          >\n+            3개월\n+          </PeriodButton>\n+          \n+          <PeriodButton \n+            $active={selectedPeriod === '6month'}\n+            onClick={() => setSelectedPeriod('6month')}\n+          >\n+            6개월\n+          </PeriodButton>\n+          \n+          <PeriodButton \n+            $active={selectedPeriod === 'custom'}\n+            onClick={() => setSelectedPeriod('custom')}\n+          >\n+            지정\n+          </PeriodButton>\n+          \n+          {selectedPeriod === 'custom' && (\n+            <DateRangeInputs>\n+              <DateInput\n+                type=\"date\"\n+                value={customStartDate}\n+                onChange={(e) => setCustomStartDate(e.target.value)}\n+              />\n+              <DateSeparator>~</DateSeparator>\n+              <DateInput\n+                type=\"date\"\n+                value={customEndDate}\n+                onChange={(e) => setCustomEndDate(e.target.value)}\n+              />\n+            </DateRangeInputs>\n+          )}\n+        </PeriodRow>\n+\n+        {/* 검색 영역 */}\n         <SearchRow>\n           <SearchInput\n             value={searchQuery}\n             onChange={(e) => setSearchQuery(e.target.value)}\n             onKeyPress={handleKeyPress}\n             placeholder=\"회원명, 전화번호, 이메일, 코치명, 로그인ID, 주소(동)로 검색...\"\n           />\n+          \n+          {/* 미수 필터 버튼 */}\n+          <UnpaidFilterButton\n+            $active={showUnpaidOnly}\n+            $hasUnpaid={unpaidMetaInfo.unpaidMemberCount > 0}\n+            onClick={() => {\n+              if (unpaidMetaInfo.unpaidMemberCount > 0) {\n+                setShowUnpaidOnly(!showUnpaidOnly);\n+              }\n+            }}\n+            title={unpaidMetaInfo.unpaidMemberCount === 0 ? '미수 고객이 없습니다' : ''}\n+          >\n+            미수 {unpaidMetaInfo.unpaidMemberCount}건\n+            {unpaidMetaInfo.totalUnpaidAmount > 0 && (\n+              <div style={{ fontSize: '11px', marginTop: '2px' }}>\n+                (총 {unpaidMetaInfo.totalUnpaidAmount.toLocaleString()}원)\n+              </div>\n+            )}\n+          </UnpaidFilterButton>\n+          \n           <Button onClick={handleSearch}>검색</Button>\n           <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n             필터\n           </Button>\n           <Button variant=\"secondary\" onClick={loadMembers}>\n             새로고침\n           </Button>\n-          {(activeFilters.length > 0 || searchQuery) && (\n+          {(activeFilters.length > 0 || searchQuery || showUnpaidOnly) && (\n             <Button variant=\"secondary\" onClick={clearFilters}>\n               초기화\n             </Button>\n           )}\n@@ -894,12 +1141,15 @@\n       <ResultsSection>\n         <ResultsHeader>\n           <ResultsTitle>검색 결과</ResultsTitle>\n           <ResultsCount>\n-            총 {filteredMembers.length}명 \n+            {showUnpaidOnly ? '미수 고객: ' : ''}{filteredMembers.length}명 \n             (활성: {filteredMembers.filter(m => m.isActive).length}명, \n-            비활성: {filteredMembers.filter(m => !m.isActive).length}명 / \n-            전체: {members.length}명)\n+            비활성: {filteredMembers.filter(m => !m.isActive).length}명)\n+            <br />\n+            <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+              기간: {getDateRangeDisplay()} | 전체: {members.length}명\n+            </span>\n           </ResultsCount>\n         </ResultsHeader>\n \n         {filteredMembers.length > 0 ? (\n"
                },
                {
                    "date": 1760760936043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,12 +13,11 @@\n import { AppPhoneTextField } from '../../../customComponents/AppPhoneTextField';\n import { AppEmailTextField } from '../../../customComponents/AppEmailTextField';\n import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n+import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n+import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n \n-// 기간 옵션 타입\n-type PeriodOption = '1month' | '3month' | '6month' | 'custom';\n-\n // 회원 검색 결과에서 사용할 확장된 회원 정보 타입\n interface MemberWithStats extends DBMember {\n   pointBalance: number;\n   unpaidTotal: number;\n@@ -32,41 +31,8 @@\n const PageContainer = styled.div`\n   width: 100%;\n `;\n \n-const SearchSection = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  padding: 24px;\n-  margin-bottom: 24px;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const SearchRow = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  align-items: center;\n-  margin-bottom: 16px;\n-`;\n-\n-const SearchInput = styled.input`\n-  flex: 1;\n-  padding: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  outline: none;\n-  \n-  &:focus {\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n-`;\n-\n const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n   padding: 12px 18px;\n   border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n   border-radius: 8px;\n@@ -93,94 +59,15 @@\n   display: ${props => props.$visible ? 'flex' : 'none'};\n   gap: 8px;\n   align-items: center;\n   flex-wrap: wrap;\n-`;\n-\n-const PeriodRow = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  align-items: center;\n-  margin-bottom: 16px;\n-  flex-wrap: wrap;\n-`;\n-\n-const PeriodLabel = styled.span`\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  color: ${AppColors.onSurface};\n-  font-weight: 500;\n-  min-width: 40px;\n-`;\n-\n-const PeriodButton = styled.button<{ $active: boolean }>`\n-  padding: 8px 16px;\n-  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n-  border-radius: 8px;\n-  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n-  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  font-weight: 500;\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    border-color: ${AppColors.primary};\n-    background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n-  }\n-`;\n-\n-const PeriodDisplay = styled.div`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onInput1};\n-  background: #f8f9fa;\n-  padding: 8px 12px;\n-  border-radius: 6px;\n+  margin-top: 16px;\n+  padding: 16px 24px;\n+  background: ${AppColors.surface};\n   border: 1px solid ${AppColors.borderLight};\n+  border-radius: 16px;\n `;\n \n-const UnpaidFilterButton = styled.button<{ $active: boolean; $hasUnpaid: boolean }>`\n-  padding: 10px 16px;\n-  border: 1px solid ${props => props.$active ? '#dc2626' : (props.$hasUnpaid ? '#fca5a5' : AppColors.borderLight)};\n-  border-radius: 8px;\n-  background: ${props => props.$active ? '#dc2626' : (props.$hasUnpaid ? '#fef2f2' : AppColors.surface)};\n-  color: ${props => props.$active ? '#ffffff' : (props.$hasUnpaid ? '#dc2626' : AppColors.onInput1)};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  font-weight: 600;\n-  cursor: ${props => props.$hasUnpaid ? 'pointer' : 'not-allowed'};\n-  opacity: ${props => props.$hasUnpaid ? 1 : 0.5};\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    ${props => props.$hasUnpaid && `\n-      border-color: #dc2626;\n-      background: ${props.$active ? '#b91c1c' : '#fca5a5'};\n-    `}\n-  }\n-`;\n-\n-const DateRangeInputs = styled.div`\n-  display: flex;\n-  gap: 8px;\n-  align-items: center;\n-`;\n-\n-const DateInput = styled.input`\n-  padding: 8px 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 6px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  outline: none;\n-  \n-  &:focus {\n-    border-color: ${AppColors.primary};\n-  }\n-`;\n-\n-const DateSeparator = styled.span`\n-  color: ${AppColors.onInput1};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-`;\n-\n const FilterLabel = styled.span`\n   font-size: ${AppTextStyles.label2.fontSize};\n   color: ${AppColors.onInput1};\n   font-weight: 500;\n@@ -689,14 +576,8 @@\n     \n     setFilteredMembers(filtered);\n   };\n \n-  const handleKeyPress = (e: React.KeyboardEvent) => {\n-    if (e.key === 'Enter') {\n-      handleSearch();\n-    }\n-  };\n-\n   const toggleFilter = (filter: string) => {\n     setActiveFilters(prev => \n       prev.includes(filter) \n         ? prev.filter(f => f !== filter)\n@@ -1007,15 +888,8 @@\n     setEditFormData({});\n     setHasActiveCourses(false);\n   };\n \n-  const clearFilters = () => {\n-    setActiveFilters([]);\n-    setSearchQuery('');\n-    setShowUnpaidOnly(false);\n-    setFilteredMembers(members);\n-  };\n-\n   // 고유한 지점명들을 필터 옵션으로 생성\n   const branchNames = Array.from(new Set(members.map(member => member.branchName))).filter(Boolean);\n   const filterOptions = ['활성', '비활성', '남성', '여성', '로그인사용', ...branchNames];\n \n@@ -1030,114 +904,55 @@\n   }\n \n   return (\n     <PageContainer>\n-      <SearchSection>\n-        {/* 기간 선택 영역 */}\n-        <PeriodRow>\n-          <PeriodLabel>범위:</PeriodLabel>\n-          <PeriodDisplay>{getDateRangeDisplay()}</PeriodDisplay>\n-          \n-          <PeriodButton \n-            $active={selectedPeriod === '1month'}\n-            onClick={() => setSelectedPeriod('1month')}\n-          >\n-            1개월\n-          </PeriodButton>\n-          \n-          <PeriodButton \n-            $active={selectedPeriod === '3month'}\n-            onClick={() => setSelectedPeriod('3month')}\n-          >\n-            3개월\n-          </PeriodButton>\n-          \n-          <PeriodButton \n-            $active={selectedPeriod === '6month'}\n-            onClick={() => setSelectedPeriod('6month')}\n-          >\n-            6개월\n-          </PeriodButton>\n-          \n-          <PeriodButton \n-            $active={selectedPeriod === 'custom'}\n-            onClick={() => setSelectedPeriod('custom')}\n-          >\n-            지정\n-          </PeriodButton>\n-          \n-          {selectedPeriod === 'custom' && (\n-            <DateRangeInputs>\n-              <DateInput\n-                type=\"date\"\n-                value={customStartDate}\n-                onChange={(e) => setCustomStartDate(e.target.value)}\n-              />\n-              <DateSeparator>~</DateSeparator>\n-              <DateInput\n-                type=\"date\"\n-                value={customEndDate}\n-                onChange={(e) => setCustomEndDate(e.target.value)}\n-              />\n-            </DateRangeInputs>\n-          )}\n-        </PeriodRow>\n+      {/* 새로운 SearchArea 컴포넌트 사용 */}\n+      <SearchArea\n+        metaContent={\n+          <div style={{ display: 'flex', gap: '12px', alignItems: 'center', flexWrap: 'wrap' }}>\n+            <UnpaidFilter\n+              active={showUnpaidOnly}\n+              unpaidCount={unpaidMetaInfo.unpaidMemberCount}\n+              totalAmount={unpaidMetaInfo.totalUnpaidAmount}\n+              onClick={() => setShowUnpaidOnly(!showUnpaidOnly)}\n+            />\n+            <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n+              {showFilters ? '필터 숨기기' : '필터 표시'}\n+            </Button>\n+            <Button variant=\"secondary\" onClick={loadMembers}>\n+              새로고침\n+            </Button>\n+          </div>\n+        }\n+        selectedPeriod={selectedPeriod}\n+        onPeriodChange={setSelectedPeriod}\n+        customStartDate={customStartDate}\n+        customEndDate={customEndDate}\n+        onCustomStartDateChange={setCustomStartDate}\n+        onCustomEndDateChange={setCustomEndDate}\n+        dateRangeDisplay={getDateRangeDisplay()}\n+        searchValue={searchQuery}\n+        onSearchChange={setSearchQuery}\n+        onSearch={handleSearch}\n+        searchPlaceholder=\"회원명, 전화번호, 이메일, 코치명, 로그인ID, 주소(동)로 검색...\"\n+      />\n \n-        {/* 검색 영역 */}\n-        <SearchRow>\n-          <SearchInput\n-            value={searchQuery}\n-            onChange={(e) => setSearchQuery(e.target.value)}\n-            onKeyPress={handleKeyPress}\n-            placeholder=\"회원명, 전화번호, 이메일, 코치명, 로그인ID, 주소(동)로 검색...\"\n-          />\n-          \n-          {/* 미수 필터 버튼 */}\n-          <UnpaidFilterButton\n-            $active={showUnpaidOnly}\n-            $hasUnpaid={unpaidMetaInfo.unpaidMemberCount > 0}\n-            onClick={() => {\n-              if (unpaidMetaInfo.unpaidMemberCount > 0) {\n-                setShowUnpaidOnly(!showUnpaidOnly);\n-              }\n-            }}\n-            title={unpaidMetaInfo.unpaidMemberCount === 0 ? '미수 고객이 없습니다' : ''}\n+      {/* 필터 영역 (필요시 표시) */}\n+      <FilterRow $visible={showFilters}>\n+        <FilterLabel>필터:</FilterLabel>\n+        {filterOptions.map(filter => (\n+          <FilterChip\n+            key={filter}\n+            $active={activeFilters.includes(filter)}\n+            onClick={() => toggleFilter(filter)}\n           >\n-            미수 {unpaidMetaInfo.unpaidMemberCount}건\n-            {unpaidMetaInfo.totalUnpaidAmount > 0 && (\n-              <div style={{ fontSize: '11px', marginTop: '2px' }}>\n-                (총 {unpaidMetaInfo.totalUnpaidAmount.toLocaleString()}원)\n-              </div>\n-            )}\n-          </UnpaidFilterButton>\n-          \n-          <Button onClick={handleSearch}>검색</Button>\n-          <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n-            필터\n-          </Button>\n-          <Button variant=\"secondary\" onClick={loadMembers}>\n-            새로고침\n-          </Button>\n-          {(activeFilters.length > 0 || searchQuery || showUnpaidOnly) && (\n-            <Button variant=\"secondary\" onClick={clearFilters}>\n-              초기화\n-            </Button>\n-          )}\n-        </SearchRow>\n-        \n-        <FilterRow $visible={showFilters}>\n-          <FilterLabel>필터:</FilterLabel>\n-          {filterOptions.map(filter => (\n-            <FilterChip\n-              key={filter}\n-              $active={activeFilters.includes(filter)}\n-              onClick={() => toggleFilter(filter)}\n-            >\n-              {filter}\n-            </FilterChip>\n-          ))}\n-        </FilterRow>\n-      </SearchSection>\n+            {filter}\n+          </FilterChip>\n+        ))}\n+        <Button variant=\"secondary\" onClick={() => setShowFilters(false)} style={{ marginLeft: 'auto' }}>\n+          닫기\n+        </Button>\n+      </FilterRow>\n \n       <ResultsSection>\n         <ResultsHeader>\n           <ResultsTitle>검색 결과</ResultsTitle>\n"
                },
                {
                    "date": 1760761178342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,42 +54,8 @@\n     transform: none;\n   }\n `;\n \n-const FilterRow = styled.div<{ $visible: boolean }>`\n-  display: ${props => props.$visible ? 'flex' : 'none'};\n-  gap: 8px;\n-  align-items: center;\n-  flex-wrap: wrap;\n-  margin-top: 16px;\n-  padding: 16px 24px;\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-`;\n-\n-const FilterLabel = styled.span`\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  color: ${AppColors.onInput1};\n-  font-weight: 500;\n-`;\n-\n-const FilterChip = styled.button<{ $active: boolean }>`\n-  padding: 6px 12px;\n-  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n-  border-radius: 20px;\n-  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n-  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    border-color: ${AppColors.primary};\n-    background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n-  }\n-`;\n-\n const ResultsSection = styled.div`\n   background: ${AppColors.surface};\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 16px;\n@@ -334,10 +300,8 @@\n const MemberSearch: React.FC = () => {\n   const [searchQuery, setSearchQuery] = useState<string>('');\n   const [members, setMembers] = useState<MemberWithStats[]>([]);\n   const [filteredMembers, setFilteredMembers] = useState<MemberWithStats[]>([]);\n-  const [showFilters, setShowFilters] = useState<boolean>(false);\n-  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n   const [loading, setLoading] = useState<boolean>(true);\n   \n   // 기간 선택 관련 상태\n   const [selectedPeriod, setSelectedPeriod] = useState<PeriodOption>('1month');\n@@ -551,41 +515,11 @@\n         member.dong.toLowerCase().includes(query)\n       );\n     }\n     \n-    // 기타 필터 적용\n-    if (activeFilters.length > 0) {\n-      filtered = filtered.filter(member => {\n-        return activeFilters.some(filter => {\n-          switch (filter) {\n-            case '남성':\n-              return member.gender === 'male';\n-            case '여성':\n-              return member.gender === 'female';\n-            case '로그인사용':\n-              return member.enableLogin;\n-            case '활성':\n-              return member.isActive;\n-            case '비활성':\n-              return !member.isActive;\n-            default:\n-              return member.branchName === filter; // 지점명으로 필터링\n-          }\n-        });\n-      });\n-    }\n-    \n     setFilteredMembers(filtered);\n   };\n \n-  const toggleFilter = (filter: string) => {\n-    setActiveFilters(prev => \n-      prev.includes(filter) \n-        ? prev.filter(f => f !== filter)\n-        : [...prev, filter]\n-    );\n-  };\n-\n   const handlePreviewDocument = async (member: DBMember) => {\n     try {\n       // 회원 데이터를 MemberFormData 형식으로 변환\n       const payments = await dbManager.getPaymentsByMember(member.id);\n@@ -868,9 +802,9 @@\n       // 회원 목록 새로고침\n       await loadMembers();\n       \n       // 현재 검색 조건으로 다시 필터링\n-      if (searchQuery.trim() || activeFilters.length > 0) {\n+      if (searchQuery.trim() || showUnpaidOnly) {\n         // 기존 검색 조건 유지하면서 새로고침\n         setTimeout(() => {\n           handleSearch();\n         }, 100);\n@@ -888,12 +822,8 @@\n     setEditFormData({});\n     setHasActiveCourses(false);\n   };\n \n-  // 고유한 지점명들을 필터 옵션으로 생성\n-  const branchNames = Array.from(new Set(members.map(member => member.branchName))).filter(Boolean);\n-  const filterOptions = ['활성', '비활성', '남성', '여성', '로그인사용', ...branchNames];\n-\n   if (loading) {\n     return (\n       <PageContainer>\n         <LoadingState>\n@@ -914,14 +844,8 @@\n               unpaidCount={unpaidMetaInfo.unpaidMemberCount}\n               totalAmount={unpaidMetaInfo.totalUnpaidAmount}\n               onClick={() => setShowUnpaidOnly(!showUnpaidOnly)}\n             />\n-            <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n-              {showFilters ? '필터 숨기기' : '필터 표시'}\n-            </Button>\n-            <Button variant=\"secondary\" onClick={loadMembers}>\n-              새로고침\n-            </Button>\n           </div>\n         }\n         selectedPeriod={selectedPeriod}\n         onPeriodChange={setSelectedPeriod}\n@@ -935,25 +859,8 @@\n         onSearch={handleSearch}\n         searchPlaceholder=\"회원명, 전화번호, 이메일, 코치명, 로그인ID, 주소(동)로 검색...\"\n       />\n \n-      {/* 필터 영역 (필요시 표시) */}\n-      <FilterRow $visible={showFilters}>\n-        <FilterLabel>필터:</FilterLabel>\n-        {filterOptions.map(filter => (\n-          <FilterChip\n-            key={filter}\n-            $active={activeFilters.includes(filter)}\n-            onClick={() => toggleFilter(filter)}\n-          >\n-            {filter}\n-          </FilterChip>\n-        ))}\n-        <Button variant=\"secondary\" onClick={() => setShowFilters(false)} style={{ marginLeft: 'auto' }}>\n-          닫기\n-        </Button>\n-      </FilterRow>\n-\n       <ResultsSection>\n         <ResultsHeader>\n           <ResultsTitle>검색 결과</ResultsTitle>\n           <ResultsCount>\n"
                },
                {
                    "date": 1760761813200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -397,9 +397,9 @@\n     };\n     return `${formatDate(range.start)} ~ ${formatDate(range.end)}`;\n   }, [getDateRange]);\n \n-  const loadMembers = useCallback(async () => {\n+  const loadMembers = useCallback(async (period?: PeriodOption, startDate?: string, endDate?: string) => {\n     try {\n       setLoading(true);\n       console.log('회원 데이터 로딩 시작...');\n       \n@@ -408,16 +408,53 @@\n       \n       const allMembers = await dbManager.getAllMembers();\n       console.log('전체 회원 수:', allMembers.length);\n       \n-      // 기간별 필터링 (가입일 기준)\n-      const dateRange = getDateRange();\n+      // 기간별 필터링 (가입일 기준) - 매개변수가 있으면 사용, 없으면 현재 상태 사용\n+      const currentPeriod = period ?? selectedPeriod;\n+      const currentStartDate = startDate ?? customStartDate;\n+      const currentEndDate = endDate ?? customEndDate;\n+      \n+      let dateRange;\n+      const today = new Date();\n+      const rangeStartDate = new Date();\n+      \n+      switch (currentPeriod) {\n+        case '1month':\n+          rangeStartDate.setMonth(today.getMonth() - 1);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case '3month':\n+          rangeStartDate.setMonth(today.getMonth() - 3);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case '6month':\n+          rangeStartDate.setMonth(today.getMonth() - 6);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case 'custom':\n+          if (currentStartDate && currentEndDate) {\n+            dateRange = { \n+              start: new Date(currentStartDate), \n+              end: new Date(currentEndDate) \n+            };\n+          } else {\n+            // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+            rangeStartDate.setMonth(today.getMonth() - 1);\n+            dateRange = { start: rangeStartDate, end: today };\n+          }\n+          break;\n+        default:\n+          rangeStartDate.setMonth(today.getMonth() - 1);\n+          dateRange = { start: rangeStartDate, end: today };\n+      }\n+      \n       const filteredByDate = allMembers.filter(member => {\n         const joinDate = new Date(member.createdAt);\n         return joinDate >= dateRange.start && joinDate <= dateRange.end;\n       });\n       \n-      console.log(`${selectedPeriod} 기간 내 가입 회원 수:`, filteredByDate.length);\n+      console.log(`${currentPeriod} 기간 내 가입 회원 수:`, filteredByDate.length);\n       \n       // 각 회원의 포인트와 수강정보를 조회하여 확장된 데이터 생성\n       const membersWithStats: MemberWithStats[] = await Promise.all(\n         filteredByDate.map(async (member) => {\n@@ -462,9 +499,9 @@\n       console.error('회원 데이터 로드 실패:', error);\n     } finally {\n       setLoading(false);\n     }\n-  }, [selectedPeriod, getDateRange, loadUnpaidMetaInfo]);\n+  }, [loadUnpaidMetaInfo, selectedPeriod, customStartDate, customEndDate]);\n \n   // 지점과 직원 데이터 로드\n   const loadBranchesAndStaff = useCallback(async () => {\n     try {\n@@ -478,24 +515,20 @@\n       console.error('지점/직원 데이터 로드 실패:', error);\n     }\n   }, []);\n \n-  // 컴포넌트 마운트 시 회원 데이터 로드\n+  // 컴포넌트 마운트 시 초기 데이터 로드 (1개월 기준)\n   useEffect(() => {\n-    loadMembers();\n-    loadBranchesAndStaff();\n-  }, [loadMembers, loadBranchesAndStaff]);\n+    const initializeData = async () => {\n+      await loadMembers();\n+      await loadBranchesAndStaff();\n+    };\n+    initializeData();\n+  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n \n-  // 기간 변경 시 데이터 새로고침\n-  useEffect(() => {\n-    if (selectedPeriod !== 'custom' || (customStartDate && customEndDate)) {\n-      loadMembers();\n-    }\n-  }, [selectedPeriod, customStartDate, customEndDate, loadMembers]);\n-\n   const handleSearch = async () => {\n-    // 검색할 때마다 최신 데이터를 불러옵니다\n-    await loadMembers();\n+    // 현재 선택된 조건으로 데이터를 불러옵니다\n+    await loadMembers(selectedPeriod, customStartDate, customEndDate);\n     \n     let filtered = members;\n     \n     // 미수 필터 적용\n@@ -857,8 +890,9 @@\n         searchValue={searchQuery}\n         onSearchChange={setSearchQuery}\n         onSearch={handleSearch}\n         searchPlaceholder=\"회원명, 전화번호, 이메일, 코치명, 로그인ID, 주소(동)로 검색...\"\n+        autoSearchOnDateChange={false}\n       />\n \n       <ResultsSection>\n         <ResultsHeader>\n"
                },
                {
                    "date": 1760761857806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -413,9 +413,9 @@\n       const currentPeriod = period ?? selectedPeriod;\n       const currentStartDate = startDate ?? customStartDate;\n       const currentEndDate = endDate ?? customEndDate;\n       \n-      let dateRange;\n+      let dateRange: { start: Date; end: Date };\n       const today = new Date();\n       const rangeStartDate = new Date();\n       \n       switch (currentPeriod) {\n"
                },
                {
                    "date": 1761131222188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n+import DataTable, { type TableColumn } from '../../../components/DataTable';\n \n // 회원 검색 결과에서 사용할 확장된 회원 정보 타입\n interface MemberWithStats extends DBMember {\n   pointBalance: number;\n@@ -54,73 +55,8 @@\n     transform: none;\n   }\n `;\n \n-const ResultsSection = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  overflow: hidden;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const ResultsHeader = styled.div`\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-  padding: 20px 24px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const ResultsTitle = styled.h2`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onBackground};\n-  margin: 0;\n-`;\n-\n-const ResultsCount = styled.span`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const TableContainer = styled.div`\n-  overflow-x: auto;\n-`;\n-\n-const Table = styled.table`\n-  width: 100%;\n-  border-collapse: collapse;\n-`;\n-\n-const TableHeader = styled.thead`\n-  background: #f8f9fa;\n-`;\n-\n-const TableRow = styled.tr`\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  \n-  &:hover {\n-    background: #f8f9fa;\n-  }\n-`;\n-\n-const TableHeaderCell = styled.th`\n-  padding: 12px 16px;\n-  text-align: left;\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onInput1};\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const TableCell = styled.td`\n-  padding: 12px 16px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onBackground};\n-  vertical-align: middle;\n-`;\n-\n const StatusBadge = styled.span<{ $status: 'active' | 'inactive' }>`\n   padding: 4px 8px;\n   border-radius: 12px;\n   font-size: 12px;\n@@ -149,30 +85,8 @@\n     color: ${AppColors.onPrimary};\n   }\n `;\n \n-const EmptyState = styled.div`\n-  padding: 60px 24px;\n-  text-align: center;\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const EmptyStateTitle = styled.h3`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  margin: 0 0 8px 0;\n-`;\n-\n-const EmptyStateDescription = styled.p`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  margin: 0;\n-`;\n-\n-const LoadingState = styled.div`\n-  padding: 60px 24px;\n-  text-align: center;\n-  color: ${AppColors.onInput1};\n-`;\n-\n const PointInfo = styled.div`\n   color: ${AppColors.primary};\n   font-weight: 600;\n `;\n@@ -286,18 +200,8 @@\n   color: ${AppColors.onBackground};\n   cursor: pointer;\n `;\n \n-const ClickableRow = styled(TableRow)<{ $isActive?: boolean }>`\n-  cursor: pointer;\n-  opacity: ${props => props.$isActive === false ? 0.6 : 1};\n-  background-color: ${props => props.$isActive === false ? '#f8f9fa' : 'transparent'};\n-  \n-  &:hover {\n-    background: ${props => props.$isActive === false ? '#e9ecef !important' : '#f0f7ff !important'};\n-  }\n-`;\n-\n const MemberSearch: React.FC = () => {\n   const [searchQuery, setSearchQuery] = useState<string>('');\n   const [members, setMembers] = useState<MemberWithStats[]>([]);\n   const [filteredMembers, setFilteredMembers] = useState<MemberWithStats[]>([]);\n@@ -655,8 +559,131 @@\n       return false;\n     }\n   };\n \n+  // 테이블 컬럼 정의\n+  const columns: TableColumn<MemberWithStats>[] = [\n+    {\n+      key: 'name',\n+      title: '이름',\n+      width: '140px',\n+      render: (value, record) => (\n+        <div>\n+          <div>{record.name}</div>\n+          <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+            {record.email || '-'}\n+          </div>\n+        </div>\n+      )\n+    },\n+    {\n+      key: 'phone',\n+      title: '연락처',\n+      width: '130px'\n+    },\n+    {\n+      key: 'branchName',\n+      title: '지점',\n+      width: '100px',\n+      render: (value, record) => record.branchName || '-'\n+    },\n+    {\n+      key: 'coachName',\n+      title: '담당코치',\n+      width: '100px',\n+      render: (value, record) => record.coachName || '-'\n+    },\n+    {\n+      key: 'pointBalance',\n+      title: '포인트',\n+      width: '100px',\n+      align: 'right' as const,\n+      render: (value, record) => (\n+        <PointInfo>\n+          {record.pointBalance > 0 \n+            ? `${record.pointBalance.toLocaleString()}P` \n+            : '-'\n+          }\n+        </PointInfo>\n+      )\n+    },\n+    {\n+      key: 'unpaidTotal',\n+      title: '미수금',\n+      width: '100px',\n+      align: 'right' as const,\n+      render: (value, record) => (\n+        <UnpaidInfo $hasUnpaid={record.unpaidTotal > 0}>\n+          {record.unpaidTotal > 0 \n+            ? `${record.unpaidTotal.toLocaleString()}원` \n+            : '-'\n+          }\n+        </UnpaidInfo>\n+      )\n+    },\n+    {\n+      key: 'currentCourses',\n+      title: '현재 수강',\n+      width: '200px',\n+      render: (value, record) => (\n+        record.currentCourses.length > 0 ? (\n+          record.currentCourses.map((course, index) => (\n+            <CourseItem key={index}>\n+              <CourseName>{course.productName}</CourseName>\n+              <ProgressText>({course.progressInfo})</ProgressText>\n+            </CourseItem>\n+          ))\n+        ) : (\n+          <div style={{ color: AppColors.onInput1, fontSize: '12px' }}>\n+            수강중인 과정 없음\n+          </div>\n+        )\n+      )\n+    },\n+    {\n+      key: 'isActive',\n+      title: '상태',\n+      width: '80px',\n+      align: 'center' as const,\n+      render: (value, record) => (\n+        <StatusBadge $status={record.isActive ? 'active' : 'inactive'}>\n+          {record.isActive ? '활성' : '비활성'}\n+        </StatusBadge>\n+      )\n+    },\n+    {\n+      key: 'actions',\n+      title: '액션',\n+      width: '100px',\n+      align: 'center' as const,\n+      render: (value, record) => (\n+        <ActionButtons>\n+          <ActionButton \n+            onClick={(e) => {\n+              e.stopPropagation();\n+              handlePreviewDocument(record);\n+            }}\n+          >\n+            문서보기\n+          </ActionButton>\n+        </ActionButtons>\n+      )\n+    }\n+  ];\n+\n+  // 결과 카운트 정보 컴포넌트\n+  const resultCountInfo = (\n+    <>\n+      {showUnpaidOnly ? '미수 고객: ' : ''}{filteredMembers.length}명 \n+      (활성: {filteredMembers.filter(m => m.isActive).length}명, \n+      비활성: {filteredMembers.filter(m => !m.isActive).length}명)\n+      <br />\n+      <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+        기간: {getDateRangeDisplay()} | 전체: {members.length}명\n+      </span>\n+    </>\n+  );\n+\n   // 회원 수정 모달 열기\n   const handleEditMember = async (member: DBMember) => {\n     console.log('=== 회원 수정 모달 열기 ===');\n     console.log('회원 정보:', {\n@@ -858,11 +885,14 @@\n \n   if (loading) {\n     return (\n       <PageContainer>\n-        <LoadingState>\n-          <h3>회원 데이터를 불러오는 중...</h3>\n-        </LoadingState>\n+        <DataTable\n+          title=\"검색 결과\"\n+          columns={columns}\n+          data={[]}\n+          loading={true}\n+        />\n       </PageContainer>\n     );\n   }\n \n@@ -893,116 +923,24 @@\n         searchPlaceholder=\"회원명, 전화번호, 이메일, 코치명, 로그인ID, 주소(동)로 검색...\"\n         autoSearchOnDateChange={false}\n       />\n \n-      <ResultsSection>\n-        <ResultsHeader>\n-          <ResultsTitle>검색 결과</ResultsTitle>\n-          <ResultsCount>\n-            {showUnpaidOnly ? '미수 고객: ' : ''}{filteredMembers.length}명 \n-            (활성: {filteredMembers.filter(m => m.isActive).length}명, \n-            비활성: {filteredMembers.filter(m => !m.isActive).length}명)\n-            <br />\n-            <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-              기간: {getDateRangeDisplay()} | 전체: {members.length}명\n-            </span>\n-          </ResultsCount>\n-        </ResultsHeader>\n+      <DataTable\n+        title=\"검색 결과\"\n+        columns={columns}\n+        data={filteredMembers}\n+        loading={loading}\n+        emptyText=\"검색 결과가 없습니다\"\n+        emptyDescription=\"다른 검색어를 입력하거나 필터를 조정해보세요.\"\n+        resultCount={resultCountInfo}\n+        onRowClick={handleEditMember}\n+        customRowStyle={(member) => ({\n+          cursor: 'pointer',\n+          opacity: member.isActive === false ? 0.6 : 1,\n+          backgroundColor: member.isActive === false ? '#f8f9fa' : 'transparent'\n+        })}\n+      />\n \n-        {filteredMembers.length > 0 ? (\n-          <TableContainer>\n-            <Table>\n-              <TableHeader>\n-                <TableRow>\n-                  <TableHeaderCell>이름</TableHeaderCell>\n-                  <TableHeaderCell>연락처</TableHeaderCell>\n-                  <TableHeaderCell>지점</TableHeaderCell>\n-                  <TableHeaderCell>담당코치</TableHeaderCell>\n-                  <TableHeaderCell>포인트</TableHeaderCell>\n-                  <TableHeaderCell>미수금</TableHeaderCell>\n-                  <TableHeaderCell>현재 수강</TableHeaderCell>\n-                  <TableHeaderCell>상태</TableHeaderCell>\n-                  <TableHeaderCell>액션</TableHeaderCell>\n-                </TableRow>\n-              </TableHeader>\n-              <tbody>\n-                {filteredMembers.map(member => (\n-                  <ClickableRow \n-                    key={member.id} \n-                    onClick={() => handleEditMember(member)}\n-                    $isActive={member.isActive}\n-                  >\n-                    <TableCell>\n-                      <div>{member.name}</div>\n-                      <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-                        {member.email || '-'}\n-                      </div>\n-                    </TableCell>\n-                    <TableCell>{member.phone}</TableCell>\n-                    <TableCell>{member.branchName || '-'}</TableCell>\n-                    <TableCell>{member.coachName || '-'}</TableCell>\n-                    <TableCell>\n-                      <PointInfo>\n-                        {member.pointBalance > 0 \n-                          ? `${member.pointBalance.toLocaleString()}P` \n-                          : '-'\n-                        }\n-                      </PointInfo>\n-                    </TableCell>\n-                    <TableCell>\n-                      <UnpaidInfo $hasUnpaid={member.unpaidTotal > 0}>\n-                        {member.unpaidTotal > 0 \n-                          ? `${member.unpaidTotal.toLocaleString()}원` \n-                          : '-'\n-                        }\n-                      </UnpaidInfo>\n-                    </TableCell>\n-                    <TableCell>\n-                      {member.currentCourses.length > 0 ? (\n-                        member.currentCourses.map((course, index) => (\n-                          <CourseItem key={index}>\n-                            <CourseName>{course.productName}</CourseName>\n-                            <ProgressText>({course.progressInfo})</ProgressText>\n-                          </CourseItem>\n-                        ))\n-                      ) : (\n-                        <div style={{ color: AppColors.onInput1, fontSize: '12px' }}>\n-                          수강중인 과정 없음\n-                        </div>\n-                      )}\n-                    </TableCell>\n-                    <TableCell>\n-                      <StatusBadge $status={member.isActive ? 'active' : 'inactive'}>\n-                        {member.isActive ? '활성' : '비활성'}\n-                      </StatusBadge>\n-                    </TableCell>\n-                    <TableCell>\n-                      <ActionButtons>\n-                        <ActionButton \n-                          onClick={(e) => {\n-                            e.stopPropagation();\n-                            handlePreviewDocument(member);\n-                          }}\n-                        >\n-                          문서보기\n-                        </ActionButton>\n-                      </ActionButtons>\n-                    </TableCell>\n-                  </ClickableRow>\n-                ))}\n-              </tbody>\n-            </Table>\n-          </TableContainer>\n-        ) : (\n-          <EmptyState>\n-            <EmptyStateTitle>검색 결과가 없습니다</EmptyStateTitle>\n-            <EmptyStateDescription>\n-              다른 검색어를 입력하거나 필터를 조정해보세요.\n-            </EmptyStateDescription>\n-          </EmptyState>\n-        )}\n-      </ResultsSection>\n-\n       {/* 회원 수정 모달 */}\n       {showEditModal && editingMember && (\n         <Modal \n           isOpen={showEditModal}\n"
                },
                {
                    "date": 1761131475193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -937,8 +937,14 @@\n           cursor: 'pointer',\n           opacity: member.isActive === false ? 0.6 : 1,\n           backgroundColor: member.isActive === false ? '#f8f9fa' : 'transparent'\n         })}\n+        pagination={{\n+          enabled: true,\n+          pageSize: 15,\n+          pageSizeOptions: [15, 30, 100],\n+          showTotal: true\n+        }}\n       />\n \n       {/* 회원 수정 모달 */}\n       {showEditModal && editingMember && (\n"
                },
                {
                    "date": 1761131758261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -939,10 +939,10 @@\n           backgroundColor: member.isActive === false ? '#f8f9fa' : 'transparent'\n         })}\n         pagination={{\n           enabled: true,\n-          pageSize: 15,\n-          pageSizeOptions: [15, 30, 100],\n+          pageSize: 5,\n+          pageSizeOptions: [5, 15, 30],\n           showTotal: true\n         }}\n       />\n \n"
                },
                {
                    "date": 1761366606901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1227 @@\n+import React, { useState, useEffect, useCallback } from 'react';\n+import styled from 'styled-components';\n+import { toast } from 'react-toastify';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, type Member as DBMember } from '../../../utils/indexedDB';\n+import { openPreviewWindow } from './PreviewDocument';\n+import { MemberFormData } from './types';\n+import Modal from '../../../components/Modal';\n+import CustomDateInput from '../../../components/CustomDateInput';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import DaumAddressSearch from '../../../components/DaumAddressSearch';\n+import { AppPhoneTextField } from '../../../customComponents/AppPhoneTextField';\n+import { AppEmailTextField } from '../../../customComponents/AppEmailTextField';\n+import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n+import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n+import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n+import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n+import DataTable, { type TableColumn } from '../../../components/DataTable';\n+\n+// 회원 검색 결과에서 사용할 확장된 회원 정보 타입\n+interface MemberWithStats extends DBMember {\n+  pointBalance: number;\n+  unpaidTotal: number;\n+  currentCourses: Array<{\n+    productName: string;\n+    programType: string;\n+    progressInfo: string;\n+  }>;\n+}\n+\n+const PageContainer = styled.div`\n+  width: 100%;\n+`;\n+\n+const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n+  padding: 12px 18px;\n+  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n+  border-radius: 8px;\n+  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n+  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  font-weight: 600;\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    opacity: 0.9;\n+    transform: translateY(-1px);\n+  }\n+  \n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+    transform: none;\n+  }\n+`;\n+\n+const StatusBadge = styled.span<{ $status: 'active' | 'inactive' }>`\n+  padding: 4px 8px;\n+  border-radius: 12px;\n+  font-size: 12px;\n+  font-weight: 500;\n+  background: ${props => props.$status === 'active' ? '#e7f5e7' : '#fff2f2'};\n+  color: ${props => props.$status === 'active' ? '#2d5a2d' : '#8b1538'};\n+`;\n+\n+const ActionButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const ActionButton = styled.button`\n+  padding: 6px 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 4px;\n+  background: ${AppColors.surface};\n+  color: ${AppColors.primary};\n+  font-size: 12px;\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    background: ${AppColors.primary};\n+    color: ${AppColors.onPrimary};\n+  }\n+`;\n+\n+const PointInfo = styled.div`\n+  color: ${AppColors.primary};\n+  font-weight: 600;\n+`;\n+\n+const UnpaidInfo = styled.div<{ $hasUnpaid: boolean }>`\n+  color: ${props => props.$hasUnpaid ? '#d32f2f' : AppColors.onInput1};\n+  font-size: 12px;\n+  margin-top: 2px;\n+`;\n+\n+const CourseItem = styled.div`\n+  font-size: 12px;\n+  color: ${AppColors.onInput1};\n+  margin-bottom: 4px;\n+  \n+  &:last-child {\n+    margin-bottom: 0;\n+  }\n+`;\n+\n+const CourseName = styled.span`\n+  color: ${AppColors.onBackground};\n+  font-weight: 500;\n+`;\n+\n+const ProgressText = styled.span`\n+  color: ${AppColors.primary};\n+  margin-left: 4px;\n+`;\n+\n+// 폼 관련 스타일\n+const FormSection = styled.div`\n+  margin-bottom: 24px;\n+`;\n+\n+const SectionTitle = styled.h3`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onBackground};\n+  margin: 0 0 16px 0;\n+  padding-bottom: 8px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+`;\n+\n+const FormRow = styled.div`\n+  display: flex;\n+  gap: 16px;\n+  margin-bottom: 16px;\n+  \n+  &:last-child {\n+    margin-bottom: 0;\n+  }\n+  \n+  @media (max-width: 768px) {\n+    flex-direction: column;\n+    gap: 12px;\n+  }\n+`;\n+\n+const FormRowVertical = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 16px;\n+  margin-bottom: 16px;\n+  \n+  &:last-child {\n+    margin-bottom: 0;\n+  }\n+`;\n+\n+const FormGroup = styled.div`\n+  flex: 1;\n+`;\n+\n+const FormLabel = styled.label`\n+  display: block;\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  font-weight: 500;\n+  color: ${AppColors.onBackground};\n+  margin-bottom: 6px;\n+`;\n+\n+const FormInput = styled.input`\n+  width: 100%;\n+  max-width: 100%;\n+  padding: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  outline: none;\n+  box-sizing: border-box;\n+  \n+  &:focus {\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &:disabled {\n+    background: #f5f5f5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const FormCheckbox = styled.input`\n+  margin-right: 8px;\n+`;\n+\n+const CheckboxLabel = styled.label`\n+  display: flex;\n+  align-items: center;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onBackground};\n+  cursor: pointer;\n+`;\n+\n+const MemberSearch: React.FC = () => {\n+  const [searchQuery, setSearchQuery] = useState<string>('');\n+  const [members, setMembers] = useState<MemberWithStats[]>([]);\n+  const [filteredMembers, setFilteredMembers] = useState<MemberWithStats[]>([]);\n+  const [loading, setLoading] = useState<boolean>(true);\n+  \n+  // 기간 선택 관련 상태\n+  const [selectedPeriod, setSelectedPeriod] = useState<PeriodOption>('1month');\n+  const [customStartDate, setCustomStartDate] = useState<string>('');\n+  const [customEndDate, setCustomEndDate] = useState<string>('');\n+  \n+  // 미수 필터 관련 상태\n+  const [showUnpaidOnly, setShowUnpaidOnly] = useState<boolean>(false);\n+  const [unpaidMetaInfo, setUnpaidMetaInfo] = useState<{ unpaidMemberCount: number; totalUnpaidAmount: number }>({\n+    unpaidMemberCount: 0,\n+    totalUnpaidAmount: 0\n+  });\n+  \n+  // 모달 관련 상태\n+  const [showEditModal, setShowEditModal] = useState<boolean>(false);\n+  const [editingMember, setEditingMember] = useState<DBMember | null>(null);\n+  const [editFormData, setEditFormData] = useState<Partial<DBMember>>({});\n+  const [branches, setBranches] = useState<any[]>([]);\n+  const [staffList, setStaffList] = useState<any[]>([]);\n+  const [hasActiveCourses, setHasActiveCourses] = useState<boolean>(false);\n+\n+  const getProgressInfo = (enrollment: any) => {\n+    if (enrollment.programType === '횟수제' && enrollment.sessionCount) {\n+      const remaining = enrollment.sessionCount - (enrollment.completedSessions || 0);\n+      return `${remaining}/${enrollment.sessionCount}회 남음`;\n+    } else if (enrollment.programType === '기간제' && enrollment.endDate) {\n+      const today = new Date();\n+      const endDate = new Date(enrollment.endDate);\n+      const timeDiff = endDate.getTime() - today.getTime();\n+      const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n+      \n+      if (daysDiff > 0) {\n+        return `${daysDiff}일 남음`;\n+      } else if (daysDiff === 0) {\n+        return '오늘 종료';\n+      } else {\n+        return `${Math.abs(daysDiff)}일 경과`;\n+      }\n+    }\n+    return '진행률 미설정';\n+  };\n+\n+  // 미수 메타정보 로드\n+  const loadUnpaidMetaInfo = useCallback(async () => {\n+    try {\n+      const metaInfo = await dbManager.getUnpaidMetaInfo();\n+      setUnpaidMetaInfo(metaInfo);\n+    } catch (error) {\n+      console.error('미수 메타정보 로드 실패:', error);\n+    }\n+  }, []);\n+\n+  // 기간별 검색 범위 계산\n+  const getDateRange = useCallback(() => {\n+    const today = new Date();\n+    const startDate = new Date();\n+    \n+    switch (selectedPeriod) {\n+      case '1month':\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+      case '3month':\n+        startDate.setMonth(today.getMonth() - 3);\n+        return { start: startDate, end: today };\n+      case '6month':\n+        startDate.setMonth(today.getMonth() - 6);\n+        return { start: startDate, end: today };\n+      case 'custom':\n+        if (customStartDate && customEndDate) {\n+          return { \n+            start: new Date(customStartDate), \n+            end: new Date(customEndDate) \n+          };\n+        }\n+        // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+      default:\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+    }\n+  }, [selectedPeriod, customStartDate, customEndDate]);\n+\n+  // 날짜 범위 표시 문자열 생성\n+  const getDateRangeDisplay = useCallback(() => {\n+    const range = getDateRange();\n+    const formatDate = (date: Date) => {\n+      return date.toLocaleDateString('ko-KR', {\n+        year: 'numeric',\n+        month: 'short',\n+        day: 'numeric'\n+      });\n+    };\n+    return `${formatDate(range.start)} ~ ${formatDate(range.end)}`;\n+  }, [getDateRange]);\n+\n+  const loadMembers = useCallback(async (period?: PeriodOption, startDate?: string, endDate?: string) => {\n+    try {\n+      setLoading(true);\n+      console.log('회원 데이터 로딩 시작...');\n+      \n+      // 미수 메타정보 로드\n+      await loadUnpaidMetaInfo();\n+      \n+      const allMembers = await dbManager.getAllMembers();\n+      console.log('전체 회원 수:', allMembers.length);\n+      \n+      // 기간별 필터링 (가입일 기준) - 매개변수가 있으면 사용, 없으면 현재 상태 사용\n+      const currentPeriod = period ?? selectedPeriod;\n+      const currentStartDate = startDate ?? customStartDate;\n+      const currentEndDate = endDate ?? customEndDate;\n+      \n+      let dateRange: { start: Date; end: Date };\n+      const today = new Date();\n+      const rangeStartDate = new Date();\n+      \n+      switch (currentPeriod) {\n+        case '1month':\n+          rangeStartDate.setMonth(today.getMonth() - 1);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case '3month':\n+          rangeStartDate.setMonth(today.getMonth() - 3);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case '6month':\n+          rangeStartDate.setMonth(today.getMonth() - 6);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case 'custom':\n+          if (currentStartDate && currentEndDate) {\n+            dateRange = { \n+              start: new Date(currentStartDate), \n+              end: new Date(currentEndDate) \n+            };\n+          } else {\n+            // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+            rangeStartDate.setMonth(today.getMonth() - 1);\n+            dateRange = { start: rangeStartDate, end: today };\n+          }\n+          break;\n+        default:\n+          rangeStartDate.setMonth(today.getMonth() - 1);\n+          dateRange = { start: rangeStartDate, end: today };\n+      }\n+      \n+      const filteredByDate = allMembers.filter(member => {\n+        const joinDate = new Date(member.createdAt);\n+        return joinDate >= dateRange.start && joinDate <= dateRange.end;\n+      });\n+      \n+      console.log(`${currentPeriod} 기간 내 가입 회원 수:`, filteredByDate.length);\n+      \n+      // 각 회원의 포인트와 수강정보를 조회하여 확장된 데이터 생성\n+      const membersWithStats: MemberWithStats[] = await Promise.all(\n+        filteredByDate.map(async (member) => {\n+          try {\n+            // 포인트 잔액 조회\n+            const pointBalance = await dbManager.getMemberPointBalance(member.id);\n+            \n+            // 미수 총액 조회\n+            const unpaidTotal = await dbManager.getMemberUnpaidTotal(member.id);\n+            \n+            // 현재 수강중인 과정 조회 (활성 상태인 것들)\n+            const allEnrollments = await dbManager.getCourseEnrollmentsByMember(member.id);\n+            const activeEnrollments = allEnrollments.filter(e => \n+              e.enrollmentStatus === 'active' || \n+              e.enrollmentStatus === 'completed' || \n+              e.enrollmentStatus === 'unpaid'\n+            );\n+            \n+            const currentCourses = activeEnrollments.map(enrollment => ({\n+              productName: enrollment.productName,\n+              programType: enrollment.programType,\n+              progressInfo: getProgressInfo(enrollment)\n+            }));\n+            \n+            return {\n+              ...member,\n+              pointBalance,\n+              unpaidTotal,\n+              currentCourses\n+            };\n+          } catch (error) {\n+            console.error(`회원 ${member.name}의 추가 정보 로드 실패:`, error);\n+            return {\n+              ...member,\n+              pointBalance: 0,\n+              unpaidTotal: 0,\n+              currentCourses: []\n+            };\n+          }\n+        })\n+      );\n+      \n+      setMembers(membersWithStats);\n+      setFilteredMembers(membersWithStats);\n+    } catch (error) {\n+      console.error('회원 데이터 로드 실패:', error);\n+    } finally {\n+      setLoading(false);\n+    }\n+  }, [loadUnpaidMetaInfo, selectedPeriod, customStartDate, customEndDate]);\n+\n+  // 지점과 직원 데이터 로드\n+  const loadBranchesAndStaff = useCallback(async () => {\n+    try {\n+      const [branchData, staffData] = await Promise.all([\n+        dbManager.getAllBranches(),\n+        dbManager.getAllStaff()\n+      ]);\n+      setBranches(branchData);\n+      setStaffList(staffData);\n+    } catch (error) {\n+      console.error('지점/직원 데이터 로드 실패:', error);\n+    }\n+  }, []);\n+\n+  // 컴포넌트 마운트 시 초기 데이터 로드 (1개월 기준)\n+  useEffect(() => {\n+    const initializeData = async () => {\n+      await loadMembers();\n+      await loadBranchesAndStaff();\n+    };\n+    initializeData();\n+  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n+\n+  const handleSearch = async () => {\n+    // 현재 선택된 조건으로 데이터를 불러옵니다\n+    await loadMembers(selectedPeriod, customStartDate, customEndDate);\n+    \n+    let filtered = members;\n+    \n+    // 미수 필터 적용\n+    if (showUnpaidOnly) {\n+      filtered = filtered.filter(member => member.unpaidTotal > 0);\n+    }\n+    \n+    // 텍스트 검색\n+    if (searchQuery.trim()) {\n+      const query = searchQuery.toLowerCase().trim();\n+      filtered = filtered.filter(member =>\n+        member.name.toLowerCase().includes(query) ||\n+        member.phone.includes(query) ||\n+        member.email.toLowerCase().includes(query) ||\n+        member.coachName.toLowerCase().includes(query) ||\n+        member.loginId.toLowerCase().includes(query) ||\n+        member.dong.toLowerCase().includes(query)\n+      );\n+    }\n+    \n+    setFilteredMembers(filtered);\n+  };\n+\n+  const handlePreviewDocument = async (member: DBMember) => {\n+    try {\n+      // 회원 데이터를 MemberFormData 형식으로 변환\n+      const payments = await dbManager.getPaymentsByMember(member.id);\n+      const products = payments.flatMap(payment => payment.products);\n+      \n+      const formData: MemberFormData = {\n+        basicInfo: {\n+          name: member.name,\n+          phone: member.phone,\n+          email: member.email,\n+          birth: member.birth,\n+          gender: member.gender,\n+          addressInfo: {\n+            address: member.address,\n+            sigunguCode: member.sigunguCode,\n+            dong: member.dong,\n+            roadAddress: member.roadAddress,\n+            jibunAddress: member.jibunAddress,\n+          },\n+        },\n+        joinInfo: {\n+          branchId: member.branchId,\n+          coach: member.coach,\n+          joinPath: member.joinPath,\n+          loginId: member.loginId,\n+          loginPassword: member.loginPassword || '', // null인 경우 빈 문자열로 변환\n+          enableLogin: member.enableLogin,\n+        },\n+        paymentInfo: {\n+          selectedProducts: products,\n+          paymentMethod: 'card', // 기본값으로 카드 설정\n+        },\n+        agreementInfo: member.agreementInfo,\n+      };\n+      \n+      await openPreviewWindow(formData);\n+    } catch (error) {\n+      console.error('문서 미리보기 실패:', error);\n+      alert('문서 미리보기 중 오류가 발생했습니다.');\n+    }\n+  };\n+\n+  // 활성 수강 정보 확인\n+  const checkActiveCourses = async (memberId: string): Promise<boolean> => {\n+    try {\n+      console.log('=== 활성 수강 확인 시작 ===');\n+      console.log('회원 ID:', memberId);\n+      \n+      const enrollments = await dbManager.getCourseEnrollmentsByMember(memberId);\n+      console.log('전체 수강 정보:', enrollments);\n+      \n+      // 결제 상태와 관계없이 수강 등록된 모든 과정 확인\n+      const activeCourses = enrollments.filter(enrollment => {\n+        console.log('수강 정보 확인:', {\n+          productName: enrollment.productName,\n+          enrollmentStatus: enrollment.enrollmentStatus,\n+          startDate: enrollment.startDate,\n+          endDate: enrollment.endDate,\n+          sessionCount: enrollment.sessionCount,\n+          completedSessions: enrollment.completedSessions || 0,\n+          unpaidAmount: enrollment.unpaidAmount || 0\n+        });\n+        \n+        // 수강 등록 상태가 활성, 완료 또는 미수인 경우\n+        if (!['active', 'completed', 'unpaid'].includes(enrollment.enrollmentStatus)) {\n+          console.log('- 비활성 수강 등록 상태로 제외');\n+          return false;\n+        }\n+        \n+        // 시작일이 없는 경우 (아직 시작 안함 - 수강 예정)\n+        if (!enrollment.startDate) {\n+          console.log('- 시작일 없음 → 수강 예정으로 활성 수강 판정');\n+          return true;\n+        }\n+        \n+        // 기간제: 종료일이 없거나 종료일이 미래인 경우 (진행 중)\n+        if (!enrollment.endDate || new Date(enrollment.endDate) > new Date()) {\n+          console.log('- 종료일 없거나 미래 → 기간제 진행 중으로 활성 수강 판정');\n+          return true;\n+        }\n+        \n+        // 횟수제: 남은 횟수가 있는 경우\n+        if (enrollment.sessionCount && (enrollment.completedSessions || 0) < enrollment.sessionCount) {\n+          const remainingSessions = enrollment.sessionCount - (enrollment.completedSessions || 0);\n+          console.log(`- 횟수제 남은 횟수: ${remainingSessions}회 → 활성 수강 판정`);\n+          return true;\n+        }\n+        \n+        console.log('- 수강 완료로 비활성 수강 판정');\n+        return false;\n+      });\n+      \n+      console.log('활성 수강 목록:', activeCourses);\n+      console.log('활성 수강 개수:', activeCourses.length);\n+      console.log('=== 활성 수강 확인 종료 ===');\n+      \n+      return activeCourses.length > 0;\n+    } catch (error) {\n+      console.error('활성 수강 정보 확인 실패:', error);\n+      return false;\n+    }\n+  };\n+\n+  // 테이블 컬럼 정의\n+  const columns: TableColumn<MemberWithStats>[] = [\n+    {\n+      key: 'name',\n+      title: '이름',\n+      width: '140px',\n+      render: (value, record) => (\n+        <div>\n+          <div>{record.name}</div>\n+          <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+            {record.email || '-'}\n+          </div>\n+        </div>\n+      )\n+    },\n+    {\n+      key: 'phone',\n+      title: '연락처',\n+      width: '130px'\n+    },\n+    {\n+      key: 'branchName',\n+      title: '지점',\n+      width: '100px',\n+      render: (value, record) => record.branchName || '-'\n+    },\n+    {\n+      key: 'coachName',\n+      title: '담당코치',\n+      width: '100px',\n+      render: (value, record) => record.coachName || '-'\n+    },\n+    {\n+      key: 'pointBalance',\n+      title: '포인트',\n+      width: '100px',\n+      align: 'right' as const,\n+      render: (value, record) => (\n+        <PointInfo>\n+          {record.pointBalance > 0 \n+            ? `${record.pointBalance.toLocaleString()}P` \n+            : '-'\n+          }\n+        </PointInfo>\n+      )\n+    },\n+    {\n+      key: 'unpaidTotal',\n+      title: '미수금',\n+      width: '100px',\n+      align: 'right' as const,\n+      render: (value, record) => (\n+        <UnpaidInfo $hasUnpaid={record.unpaidTotal > 0}>\n+          {record.unpaidTotal > 0 \n+            ? `${record.unpaidTotal.toLocaleString()}원` \n+            : '-'\n+          }\n+        </UnpaidInfo>\n+      )\n+    },\n+    {\n+      key: 'currentCourses',\n+      title: '현재 수강',\n+      width: '200px',\n+      render: (value, record) => (\n+        record.currentCourses.length > 0 ? (\n+          record.currentCourses.map((course, index) => (\n+            <CourseItem key={index}>\n+              <CourseName>{course.productName}</CourseName>\n+              <ProgressText>({course.progressInfo})</ProgressText>\n+            </CourseItem>\n+          ))\n+        ) : (\n+          <div style={{ color: AppColors.onInput1, fontSize: '12px' }}>\n+            수강중인 과정 없음\n+          </div>\n+        )\n+      )\n+    },\n+    {\n+      key: 'isActive',\n+      title: '상태',\n+      width: '80px',\n+      align: 'center' as const,\n+      render: (value, record) => (\n+        <StatusBadge $status={record.isActive ? 'active' : 'inactive'}>\n+          {record.isActive ? '활성' : '비활성'}\n+        </StatusBadge>\n+      )\n+    },\n+    {\n+      key: 'actions',\n+      title: '액션',\n+      width: '100px',\n+      align: 'center' as const,\n+      render: (value, record) => (\n+        <ActionButtons>\n+          <ActionButton \n+            onClick={(e) => {\n+              e.stopPropagation();\n+              handlePreviewDocument(record);\n+            }}\n+          >\n+            문서보기\n+          </ActionButton>\n+        </ActionButtons>\n+      )\n+    }\n+  ];\n+\n+  // 결과 카운트 정보 컴포넌트\n+  const resultCountInfo = (\n+    <>\n+      {showUnpaidOnly ? '미수 고객: ' : ''}{filteredMembers.length}명 \n+      (활성: {filteredMembers.filter(m => m.isActive).length}명, \n+      비활성: {filteredMembers.filter(m => !m.isActive).length}명)\n+      <br />\n+      <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+        기간: {getDateRangeDisplay()} | 전체: {members.length}명\n+      </span>\n+    </>\n+  );\n+\n+  // 회원 수정 모달 열기\n+  const handleEditMember = async (member: DBMember) => {\n+    console.log('=== 회원 수정 모달 열기 ===');\n+    console.log('회원 정보:', {\n+      id: member.id,\n+      name: member.name,\n+      phone: member.phone,\n+      isActive: member.isActive\n+    });\n+    \n+    setEditingMember(member);\n+    \n+    // 활성 수강 정보 확인\n+    const hasActive = await checkActiveCourses(member.id);\n+    console.log('활성 수강 있음:', hasActive);\n+    setHasActiveCourses(hasActive);\n+    \n+    // 기존 로그인 정보가 있는지 확인\n+    const hasExistingLogin = member.enableLogin && \n+                            member.loginId && \n+                            !member.loginId.startsWith('temp_');\n+    \n+    setEditFormData({\n+      name: member.name,\n+      phone: member.phone,\n+      email: member.email,\n+      birth: member.birth,\n+      gender: member.gender,\n+      address: member.address,\n+      branchId: member.branchId,\n+      coach: member.coach,\n+      joinPath: member.joinPath,\n+      // 기존 로그인 정보가 있는 경우 수정 불가하므로 폼에서 제외\n+      loginId: hasExistingLogin ? '' : (member.loginId || ''),\n+      loginPassword: hasExistingLogin ? '' : (member.loginPassword || ''),\n+      enableLogin: member.enableLogin,\n+      remarks: member.remarks || ''\n+    });\n+    setShowEditModal(true);\n+  };\n+\n+  // 회원 정보 수정 저장\n+  const handleSaveMember = async () => {\n+    if (!editingMember || !editFormData) return;\n+\n+    try {\n+      // 입력 검증\n+      if (!editFormData.name?.trim()) {\n+        toast.error('이름을 입력해주세요.');\n+        return;\n+      }\n+      if (!editFormData.phone?.trim()) {\n+        toast.error('연락처를 입력해주세요.');\n+        return;\n+      }\n+\n+      // 현재 회원을 제외한 다른 회원들의 연락처와 이메일 중복 체크\n+      const allMembers = await dbManager.getAllMembers();\n+      const otherMembers = allMembers.filter(m => m.id !== editingMember.id);\n+      \n+      // 연락처 중복 체크\n+      const phoneExists = otherMembers.some(m => m.phone === editFormData.phone);\n+      if (phoneExists) {\n+        toast.error(`연락처 ${editFormData.phone}는(은) 이미 등록된 회원입니다.`);\n+        return;\n+      }\n+\n+      // 이메일 중복 체크 (이메일이 있는 경우만)\n+      if (editFormData.email && editFormData.email.trim() !== '') {\n+        const emailExists = otherMembers.some(m => m.email === editFormData.email);\n+        if (emailExists) {\n+          toast.error(`이메일 ${editFormData.email}는(은) 이미 등록된 회원입니다.`);\n+          return;\n+        }\n+      }\n+\n+      // 로그인 ID 중복 체크 (로그인 기능 사용 시에만, 그리고 기존 로그인 정보가 없는 경우에만)\n+      if (editFormData.enableLogin && editFormData.loginId) {\n+        // 기존에 로그인 정보가 있는 경우 중복 체크 스킵\n+        const hasExistingLogin = editingMember.enableLogin && \n+                                editingMember.loginId && \n+                                !editingMember.loginId.startsWith('temp_');\n+        \n+        if (!hasExistingLogin) {\n+          // 직원과 다른 회원들의 로그인 ID 중복 체크\n+          const [allStaff, loginIdExists] = await Promise.all([\n+            dbManager.getAllStaff(),\n+            Promise.resolve(otherMembers.some(m => m.loginId === editFormData.loginId))\n+          ]);\n+\n+          const staffLoginIdExists = allStaff.some(s => s.loginId === editFormData.loginId);\n+          \n+          if (staffLoginIdExists) {\n+            toast.error(`로그인 ID ${editFormData.loginId}는(은) 이미 직원으로 등록되어 있습니다.`);\n+            return;\n+          }\n+          \n+          if (loginIdExists) {\n+            toast.error(`로그인 ID ${editFormData.loginId}는(은) 이미 다른 회원이 사용하고 있습니다.`);\n+            return;\n+          }\n+        }\n+      }\n+\n+      // 지점명과 코치명 가져오기\n+      const selectedBranch = branches.find(b => b.id === editFormData.branchId);\n+      const selectedCoach = staffList.find(s => s.id === editFormData.coach);\n+\n+      // 기존 로그인 정보가 있는지 확인\n+      const hasExistingLogin = editingMember.enableLogin && \n+                              editingMember.loginId && \n+                              !editingMember.loginId.startsWith('temp_');\n+\n+      // 회원 정보 업데이트\n+      const updatedMember: DBMember = {\n+        ...editingMember,\n+        ...editFormData,\n+        branchName: selectedBranch?.name || editingMember.branchName,\n+        coachName: selectedCoach?.name || editingMember.coachName,\n+        // 기존 로그인 정보가 있는 경우 보존, 없는 경우만 새로 설정\n+        loginId: hasExistingLogin ? editingMember.loginId : (editFormData.loginId || editingMember.loginId),\n+        loginPassword: hasExistingLogin ? editingMember.loginPassword : (editFormData.loginPassword || null),\n+        enableLogin: editFormData.enableLogin || false,\n+      };\n+\n+      await dbManager.updateMember(editingMember.id, updatedMember);\n+\n+      toast.success('회원 정보가 성공적으로 수정되었습니다.');\n+      setShowEditModal(false);\n+      setEditingMember(null);\n+      setEditFormData({});\n+      \n+      // 회원 목록 새로고침\n+      await loadMembers();\n+    } catch (error) {\n+      console.error('회원 정보 수정 실패:', error);\n+      toast.error('회원 정보 수정 중 오류가 발생했습니다.');\n+    }\n+  };\n+\n+  // 회원 상태 변경 (활성/비활성)\n+  const handleToggleMemberStatus = async () => {\n+    if (!editingMember) return;\n+\n+    try {\n+      const newStatus = !editingMember.isActive;\n+      const statusText = newStatus ? '활성' : '비활성';\n+      \n+      // 비활성화하려는데 활성 수강이 있는 경우 차단\n+      if (!newStatus && hasActiveCourses) {\n+        toast.error('수강 중인 과정이 있는 회원은 비활성화할 수 없습니다.');\n+        return;\n+      }\n+      \n+      // 상태 변경 확인\n+      const confirmed = window.confirm(\n+        `정말로 이 회원을 '${statusText}' 상태로 변경하시겠습니까?\\n\\n` +\n+        `회원명: ${editingMember.name}\\n` +\n+        `연락처: ${editingMember.phone}`\n+      );\n+\n+      if (!confirmed) return;\n+\n+      // 회원 상태 업데이트\n+      const updatedMember: DBMember = {\n+        ...editingMember,\n+        isActive: newStatus\n+      };\n+\n+      await dbManager.updateMember(editingMember.id, updatedMember);\n+\n+      // 로컬 상태 업데이트\n+      setEditingMember(updatedMember);\n+      \n+      toast.success(`회원이 '${statusText}' 상태로 변경되었습니다.`);\n+      \n+      // 회원 목록 새로고침\n+      await loadMembers();\n+      \n+      // 현재 검색 조건으로 다시 필터링\n+      if (searchQuery.trim() || showUnpaidOnly) {\n+        // 기존 검색 조건 유지하면서 새로고침\n+        setTimeout(() => {\n+          handleSearch();\n+        }, 100);\n+      }\n+    } catch (error) {\n+      console.error('회원 상태 변경 실패:', error);\n+      toast.error('회원 상태 변경 중 오류가 발생했습니다.');\n+    }\n+  };\n+\n+  // 모달 닫기\n+  const handleCloseModal = () => {\n+    setShowEditModal(false);\n+    setEditingMember(null);\n+    setEditFormData({});\n+    setHasActiveCourses(false);\n+  };\n+\n+  if (loading) {\n+    return (\n+      <PageContainer>\n+        <DataTable\n+          title=\"검색 결과\"\n+          columns={columns}\n+          data={[]}\n+          loading={true}\n+        />\n+      </PageContainer>\n+    );\n+  }\n+\n+  return (\n+    <PageContainer>\n+      {/* 새로운 SearchArea 컴포넌트 사용 */}\n+      <SearchArea\n+        metaContent={\n+          <div style={{ display: 'flex', gap: '12px', alignItems: 'center', flexWrap: 'wrap' }}>\n+            <UnpaidFilter\n+              active={showUnpaidOnly}\n+              unpaidCount={unpaidMetaInfo.unpaidMemberCount}\n+              totalAmount={unpaidMetaInfo.totalUnpaidAmount}\n+              onClick={() => setShowUnpaidOnly(!showUnpaidOnly)}\n+            />\n+          </div>\n+        }\n+        selectedPeriod={selectedPeriod}\n+        onPeriodChange={setSelectedPeriod}\n+        customStartDate={customStartDate}\n+        customEndDate={customEndDate}\n+        onCustomStartDateChange={setCustomStartDate}\n+        onCustomEndDateChange={setCustomEndDate}\n+        dateRangeDisplay={getDateRangeDisplay()}\n+        searchValue={searchQuery}\n+        onSearchChange={setSearchQuery}\n+        onSearch={handleSearch}\n+        searchPlaceholder=\"회원명, 전화번호, 이메일, 코치명, 로그인ID, 주소(동)로 검색...\"\n+        autoSearchOnDateChange={false}\n+      />\n+\n+      <DataTable\n+        title=\"검색 결과\"\n+        columns={columns}\n+        data={filteredMembers}\n+        loading={loading}\n+        emptyText=\"검색 결과가 없습니다\"\n+        emptyDescription=\"다른 검색어를 입력하거나 필터를 조정해보세요.\"\n+        resultCount={resultCountInfo}\n+        onRowClick={handleEditMember}\n+        customRowStyle={(member) => ({\n+          cursor: 'pointer',\n+          opacity: member.isActive === false ? 0.6 : 1,\n+          backgroundColor: member.isActive === false ? '#f8f9fa' : 'transparent'\n+        })}\n+        pagination={{\n+          enabled: true,\n+          pageSize: 5,\n+          pageSizeOptions: [5, 15, 30],\n+          showTotal: true\n+        }}\n+      />\n+\n+      {/* 회원 수정 모달 */}\n+      {showEditModal && editingMember && (\n+        <Modal \n+          isOpen={showEditModal}\n+          onClose={handleCloseModal}\n+          width=\"min(95vw, 1000px)\"\n+          header=\"회원 정보 수정\"\n+          body={\n+            <div style={{ textAlign: 'left' }}>\n+              <FormSection>\n+                <SectionTitle>기본 정보</SectionTitle>\n+                <FormRow>\n+                  <FormGroup>\n+                    <FormLabel>이름 *</FormLabel>\n+                    <FormInput\n+                      value={editFormData.name || ''}\n+                      onChange={(e) => setEditFormData(prev => ({ ...prev, name: e.target.value }))}\n+                      placeholder=\"이름을 입력하세요\"\n+                    />\n+                  </FormGroup>\n+                  <FormGroup>\n+                    <FormLabel>성별</FormLabel>\n+                    <CustomDropdown\n+                      value={editFormData.gender || ''}\n+                      onChange={(value) => setEditFormData(prev => ({ ...prev, gender: value as 'male' | 'female' | '' }))}\n+                      options={[\n+                        { value: 'female', label: '여성' },\n+                        { value: 'male', label: '남성' }\n+                      ]}\n+                      placeholder=\"성별을 선택하세요\"\n+                    />\n+                  </FormGroup>\n+                </FormRow>\n+                \n+                <FormRow>\n+                  <FormGroup>\n+                    <FormLabel>연락처 *</FormLabel>\n+                    <AppPhoneTextField\n+                      value={editFormData.phone || ''}\n+                      onChange={(value, isValid) => setEditFormData(prev => ({ ...prev, phone: value }))}\n+                      placeholder=\"연락처를 입력하세요\"\n+                    />\n+                  </FormGroup>\n+                  <FormGroup>\n+                    <FormLabel>생년월일</FormLabel>\n+                    <CustomDateInput\n+                      value={editFormData.birth || ''}\n+                      onChange={(value) => setEditFormData(prev => ({ ...prev, birth: value }))}\n+                      placeholder=\"생년월일을 선택하세요\"\n+                    />\n+                  </FormGroup>\n+                </FormRow>\n+                \n+                <FormRowVertical>\n+                  <FormGroup>\n+                    <FormLabel>이메일</FormLabel>\n+                    <AppEmailTextField\n+                      value={editFormData.email || ''}\n+                      onChange={(e) => setEditFormData(prev => ({ ...prev, email: e.target.value }))}\n+                      placeholder=\"이메일을 입력하세요\"\n+                    />\n+                  </FormGroup>\n+                  <FormGroup>\n+                    <FormLabel>주소</FormLabel>\n+                    <DaumAddressSearch\n+                      value={editFormData.address || ''}\n+                      onAddressSelect={(addressInfo) => setEditFormData(prev => ({ \n+                        ...prev, \n+                        address: addressInfo.address,\n+                        // 추가 주소 정보들도 저장 (필요시)\n+                      }))}\n+                      placeholder=\"주소를 검색하세요\"\n+                    />\n+                  </FormGroup>\n+                </FormRowVertical>\n+              </FormSection>\n+\n+              <FormSection>\n+                <SectionTitle>가입 정보</SectionTitle>\n+                <FormRow>\n+                  <FormGroup>\n+                    <FormLabel>지점</FormLabel>\n+                    <CustomDropdown\n+                      value={editFormData.branchId || ''}\n+                      onChange={(value) => setEditFormData(prev => ({ ...prev, branchId: value }))}\n+                      options={branches.map(branch => ({ \n+                        value: branch.id, \n+                        label: branch.name \n+                      }))}\n+                      placeholder=\"지점을 선택하세요\"\n+                    />\n+                  </FormGroup>\n+                  <FormGroup>\n+                    <FormLabel>담당 코치</FormLabel>\n+                    <CustomDropdown\n+                      value={editFormData.coach || ''}\n+                      onChange={(value) => setEditFormData(prev => ({ ...prev, coach: value }))}\n+                      options={staffList\n+                        .filter(staff => !editFormData.branchId || staff.branchId === editFormData.branchId)\n+                        .map(staff => ({ \n+                          value: staff.id, \n+                          label: `${staff.name} (${staff.position})` \n+                        }))}\n+                      placeholder=\"코치를 선택하세요\"\n+                    />\n+                  </FormGroup>\n+                </FormRow>\n+                \n+                <FormRowVertical>\n+                  <FormGroup>\n+                    <FormLabel>가입 경로</FormLabel>\n+                    <CustomDropdown\n+                      value={editFormData.joinPath || ''}\n+                      onChange={(value) => setEditFormData(prev => ({ ...prev, joinPath: value }))}\n+                      options={[\n+                        { value: '지인소개', label: '지인소개' },\n+                        { value: '당근마켓', label: '당근마켓' },\n+                        { value: '네이버 플레이스', label: '네이버 플레이스' },\n+                        { value: '전화', label: '전화' },\n+                        { value: '워크인', label: '워크인' },\n+                        { value: '현수막', label: '현수막' },\n+                        { value: '인스타', label: '인스타' },\n+                        { value: '광고지', label: '광고지' },\n+                        { value: '기타', label: '기타' }\n+                      ]}\n+                      placeholder=\"가입 경로를 선택하세요\"\n+                    />\n+                  </FormGroup>\n+                </FormRowVertical>\n+              </FormSection>\n+\n+              <FormSection>\n+                <SectionTitle>로그인 정보</SectionTitle>\n+                <FormRowVertical>\n+                  <FormGroup>\n+                    <CheckboxLabel>\n+                      <FormCheckbox\n+                        type=\"checkbox\"\n+                        checked={editFormData.enableLogin || false}\n+                        onChange={(e) => setEditFormData(prev => ({ ...prev, enableLogin: e.target.checked }))}\n+                        disabled={!!(editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_'))}\n+                      />\n+                      로그인 기능 사용\n+                      {editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_') && (\n+                        <span style={{ marginLeft: '8px', fontSize: '12px', color: AppColors.onInput1 }}>\n+                          (기존 로그인 정보가 있어 수정 불가)\n+                        </span>\n+                      )}\n+                    </CheckboxLabel>\n+                  </FormGroup>\n+                </FormRowVertical>\n+                \n+                {editFormData.enableLogin && (\n+                  <FormRow>\n+                    <FormGroup>\n+                      <FormLabel>로그인 ID</FormLabel>\n+                      {editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_') ? (\n+                        // 기존 로그인 ID가 있는 경우 - 읽기 전용으로 표시\n+                        <FormInput\n+                          value={editingMember.loginId}\n+                          disabled\n+                          style={{ backgroundColor: '#f5f5f5', cursor: 'not-allowed' }}\n+                        />\n+                      ) : (\n+                        // 로그인 기능이 없었거나 임시 ID인 경우 - 새로 입력 가능\n+                        <AppIdTextField\n+                          value={editFormData.loginId || ''}\n+                          onChange={(e) => setEditFormData(prev => ({ ...prev, loginId: e.target.value }))}\n+                          placeholder=\"로그인 ID를 입력하세요\"\n+                        />\n+                      )}\n+                    </FormGroup>\n+                    <FormGroup>\n+                      <FormLabel>비밀번호</FormLabel>\n+                      {editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_') ? (\n+                        // 기존 로그인 정보가 있는 경우 - 비밀번호 확인 불가\n+                        <FormInput\n+                          value=\"••••••••\"\n+                          disabled\n+                          style={{ backgroundColor: '#f5f5f5', cursor: 'not-allowed' }}\n+                          placeholder=\"보안상 확인 불가\"\n+                        />\n+                      ) : (\n+                        // 로그인 기능이 없었거나 임시 ID인 경우 - 새로 입력 가능\n+                        <AppPwdTextField\n+                          value={editFormData.loginPassword || ''}\n+                          onChange={(e) => setEditFormData(prev => ({ ...prev, loginPassword: e.target.value }))}\n+                          placeholder=\"비밀번호를 입력하세요\"\n+                          fieldType={PwdFieldType.PASSWORD}\n+                        />\n+                      )}\n+                    </FormGroup>\n+                  </FormRow>\n+                )}\n+                \n+                {editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_') && (\n+                  <div style={{ \n+                    padding: '12px', \n+                    backgroundColor: '#fff3cd', \n+                    border: '1px solid #ffeaa7', \n+                    borderRadius: '8px',\n+                    fontSize: '14px',\n+                    color: '#856404',\n+                    marginTop: '8px'\n+                  }}>\n+                    ⚠️ 보안상 기존 로그인 ID와 비밀번호는 수정할 수 없습니다.\n+                  </div>\n+                )}\n+              </FormSection>\n+\n+              <FormSection>\n+                <SectionTitle>기타</SectionTitle>\n+                <FormRowVertical>\n+                  <FormGroup>\n+                    <FormLabel>비고</FormLabel>\n+                    <FormInput\n+                      value={editFormData.remarks || ''}\n+                      onChange={(e) => setEditFormData(prev => ({ ...prev, remarks: e.target.value }))}\n+                      placeholder=\"기타 메모사항을 입력하세요\"\n+                    />\n+                  </FormGroup>\n+                </FormRowVertical>\n+              </FormSection>\n+            </div>\n+          }\n+          footer={\n+            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\n+              <div>\n+                <Button \n+                  variant=\"secondary\" \n+                  onClick={handleToggleMemberStatus}\n+                  disabled={editingMember?.isActive && hasActiveCourses}\n+                  style={{\n+                    backgroundColor: editingMember?.isActive ? '#fef2f2' : '#f0f9ff',\n+                    borderColor: editingMember?.isActive ? '#fca5a5' : '#93c5fd',\n+                    color: editingMember?.isActive ? '#dc2626' : '#2563eb',\n+                    opacity: (editingMember?.isActive && hasActiveCourses) ? 0.5 : 1,\n+                    cursor: (editingMember?.isActive && hasActiveCourses) ? 'not-allowed' : 'pointer'\n+                  }}\n+                  title={\n+                    editingMember?.isActive && hasActiveCourses \n+                      ? '수강 중인 과정이 있어 비활성화할 수 없습니다' \n+                      : ''\n+                  }\n+                >\n+                  {editingMember?.isActive ? '비활성화' : '활성화'}\n+                </Button>\n+                {editingMember?.isActive && hasActiveCourses && (\n+                  <div style={{ \n+                    fontSize: '12px', \n+                    color: '#dc2626', \n+                    marginTop: '4px',\n+                    maxWidth: '120px' \n+                  }}>\n+                    ⚠️ 수강 중인 과정이 있어 비활성화 불가\n+                  </div>\n+                )}\n+              </div>\n+              <div style={{ display: 'flex', gap: '12px' }}>\n+                <Button variant=\"secondary\" onClick={handleCloseModal}>\n+                  취소\n+                </Button>\n+                <Button onClick={handleSaveMember}>\n+                  저장\n+                </Button>\n+              </div>\n+            </div>\n+          }\n+        />\n+      )}\n+    </PageContainer>\n+  );\n+};\n+\n+export default MemberSearch;\n"
                },
                {
                    "date": 1761367350497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -400,10 +400,16 @@\n           }\n         })\n       );\n       \n+      console.log('=== MemberSearch 최종 데이터 설정 ===');\n+      console.log('membersWithStats 개수:', membersWithStats.length);\n+      console.log('첫 번째 회원 데이터:', membersWithStats[0]);\n+      \n       setMembers(membersWithStats);\n       setFilteredMembers(membersWithStats);\n+      \n+      console.log('상태 업데이트 완료 - members와 filteredMembers 설정됨');\n     } catch (error) {\n       console.error('회원 데이터 로드 실패:', error);\n     } finally {\n       setLoading(false);\n@@ -1224,1227 +1230,4 @@\n   );\n };\n \n export default MemberSearch;\n-import React, { useState, useEffect, useCallback } from 'react';\n-import styled from 'styled-components';\n-import { toast } from 'react-toastify';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager, type Member as DBMember } from '../../../utils/indexedDB';\n-import { openPreviewWindow } from './PreviewDocument';\n-import { MemberFormData } from './types';\n-import Modal from '../../../components/Modal';\n-import CustomDateInput from '../../../components/CustomDateInput';\n-import CustomDropdown from '../../../components/CustomDropdown';\n-import DaumAddressSearch from '../../../components/DaumAddressSearch';\n-import { AppPhoneTextField } from '../../../customComponents/AppPhoneTextField';\n-import { AppEmailTextField } from '../../../customComponents/AppEmailTextField';\n-import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n-import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n-import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n-import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n-import DataTable, { type TableColumn } from '../../../components/DataTable';\n-\n-// 회원 검색 결과에서 사용할 확장된 회원 정보 타입\n-interface MemberWithStats extends DBMember {\n-  pointBalance: number;\n-  unpaidTotal: number;\n-  currentCourses: Array<{\n-    productName: string;\n-    programType: string;\n-    progressInfo: string;\n-  }>;\n-}\n-\n-const PageContainer = styled.div`\n-  width: 100%;\n-`;\n-\n-const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n-  padding: 12px 18px;\n-  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n-  border-radius: 8px;\n-  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n-  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  font-weight: 600;\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    opacity: 0.9;\n-    transform: translateY(-1px);\n-  }\n-  \n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-    transform: none;\n-  }\n-`;\n-\n-const StatusBadge = styled.span<{ $status: 'active' | 'inactive' }>`\n-  padding: 4px 8px;\n-  border-radius: 12px;\n-  font-size: 12px;\n-  font-weight: 500;\n-  background: ${props => props.$status === 'active' ? '#e7f5e7' : '#fff2f2'};\n-  color: ${props => props.$status === 'active' ? '#2d5a2d' : '#8b1538'};\n-`;\n-\n-const ActionButtons = styled.div`\n-  display: flex;\n-  gap: 8px;\n-`;\n-\n-const ActionButton = styled.button`\n-  padding: 6px 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 4px;\n-  background: ${AppColors.surface};\n-  color: ${AppColors.primary};\n-  font-size: 12px;\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    background: ${AppColors.primary};\n-    color: ${AppColors.onPrimary};\n-  }\n-`;\n-\n-const PointInfo = styled.div`\n-  color: ${AppColors.primary};\n-  font-weight: 600;\n-`;\n-\n-const UnpaidInfo = styled.div<{ $hasUnpaid: boolean }>`\n-  color: ${props => props.$hasUnpaid ? '#d32f2f' : AppColors.onInput1};\n-  font-size: 12px;\n-  margin-top: 2px;\n-`;\n-\n-const CourseItem = styled.div`\n-  font-size: 12px;\n-  color: ${AppColors.onInput1};\n-  margin-bottom: 4px;\n-  \n-  &:last-child {\n-    margin-bottom: 0;\n-  }\n-`;\n-\n-const CourseName = styled.span`\n-  color: ${AppColors.onBackground};\n-  font-weight: 500;\n-`;\n-\n-const ProgressText = styled.span`\n-  color: ${AppColors.primary};\n-  margin-left: 4px;\n-`;\n-\n-// 폼 관련 스타일\n-const FormSection = styled.div`\n-  margin-bottom: 24px;\n-`;\n-\n-const SectionTitle = styled.h3`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onBackground};\n-  margin: 0 0 16px 0;\n-  padding-bottom: 8px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const FormRow = styled.div`\n-  display: flex;\n-  gap: 16px;\n-  margin-bottom: 16px;\n-  \n-  &:last-child {\n-    margin-bottom: 0;\n-  }\n-  \n-  @media (max-width: 768px) {\n-    flex-direction: column;\n-    gap: 12px;\n-  }\n-`;\n-\n-const FormRowVertical = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  gap: 16px;\n-  margin-bottom: 16px;\n-  \n-  &:last-child {\n-    margin-bottom: 0;\n-  }\n-`;\n-\n-const FormGroup = styled.div`\n-  flex: 1;\n-`;\n-\n-const FormLabel = styled.label`\n-  display: block;\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  font-weight: 500;\n-  color: ${AppColors.onBackground};\n-  margin-bottom: 6px;\n-`;\n-\n-const FormInput = styled.input`\n-  width: 100%;\n-  max-width: 100%;\n-  padding: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  outline: none;\n-  box-sizing: border-box;\n-  \n-  &:focus {\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &:disabled {\n-    background: #f5f5f5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-const FormCheckbox = styled.input`\n-  margin-right: 8px;\n-`;\n-\n-const CheckboxLabel = styled.label`\n-  display: flex;\n-  align-items: center;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onBackground};\n-  cursor: pointer;\n-`;\n-\n-const MemberSearch: React.FC = () => {\n-  const [searchQuery, setSearchQuery] = useState<string>('');\n-  const [members, setMembers] = useState<MemberWithStats[]>([]);\n-  const [filteredMembers, setFilteredMembers] = useState<MemberWithStats[]>([]);\n-  const [loading, setLoading] = useState<boolean>(true);\n-  \n-  // 기간 선택 관련 상태\n-  const [selectedPeriod, setSelectedPeriod] = useState<PeriodOption>('1month');\n-  const [customStartDate, setCustomStartDate] = useState<string>('');\n-  const [customEndDate, setCustomEndDate] = useState<string>('');\n-  \n-  // 미수 필터 관련 상태\n-  const [showUnpaidOnly, setShowUnpaidOnly] = useState<boolean>(false);\n-  const [unpaidMetaInfo, setUnpaidMetaInfo] = useState<{ unpaidMemberCount: number; totalUnpaidAmount: number }>({\n-    unpaidMemberCount: 0,\n-    totalUnpaidAmount: 0\n-  });\n-  \n-  // 모달 관련 상태\n-  const [showEditModal, setShowEditModal] = useState<boolean>(false);\n-  const [editingMember, setEditingMember] = useState<DBMember | null>(null);\n-  const [editFormData, setEditFormData] = useState<Partial<DBMember>>({});\n-  const [branches, setBranches] = useState<any[]>([]);\n-  const [staffList, setStaffList] = useState<any[]>([]);\n-  const [hasActiveCourses, setHasActiveCourses] = useState<boolean>(false);\n-\n-  const getProgressInfo = (enrollment: any) => {\n-    if (enrollment.programType === '횟수제' && enrollment.sessionCount) {\n-      const remaining = enrollment.sessionCount - (enrollment.completedSessions || 0);\n-      return `${remaining}/${enrollment.sessionCount}회 남음`;\n-    } else if (enrollment.programType === '기간제' && enrollment.endDate) {\n-      const today = new Date();\n-      const endDate = new Date(enrollment.endDate);\n-      const timeDiff = endDate.getTime() - today.getTime();\n-      const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n-      \n-      if (daysDiff > 0) {\n-        return `${daysDiff}일 남음`;\n-      } else if (daysDiff === 0) {\n-        return '오늘 종료';\n-      } else {\n-        return `${Math.abs(daysDiff)}일 경과`;\n-      }\n-    }\n-    return '진행률 미설정';\n-  };\n-\n-  // 미수 메타정보 로드\n-  const loadUnpaidMetaInfo = useCallback(async () => {\n-    try {\n-      const metaInfo = await dbManager.getUnpaidMetaInfo();\n-      setUnpaidMetaInfo(metaInfo);\n-    } catch (error) {\n-      console.error('미수 메타정보 로드 실패:', error);\n-    }\n-  }, []);\n-\n-  // 기간별 검색 범위 계산\n-  const getDateRange = useCallback(() => {\n-    const today = new Date();\n-    const startDate = new Date();\n-    \n-    switch (selectedPeriod) {\n-      case '1month':\n-        startDate.setMonth(today.getMonth() - 1);\n-        return { start: startDate, end: today };\n-      case '3month':\n-        startDate.setMonth(today.getMonth() - 3);\n-        return { start: startDate, end: today };\n-      case '6month':\n-        startDate.setMonth(today.getMonth() - 6);\n-        return { start: startDate, end: today };\n-      case 'custom':\n-        if (customStartDate && customEndDate) {\n-          return { \n-            start: new Date(customStartDate), \n-            end: new Date(customEndDate) \n-          };\n-        }\n-        // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n-        startDate.setMonth(today.getMonth() - 1);\n-        return { start: startDate, end: today };\n-      default:\n-        startDate.setMonth(today.getMonth() - 1);\n-        return { start: startDate, end: today };\n-    }\n-  }, [selectedPeriod, customStartDate, customEndDate]);\n-\n-  // 날짜 범위 표시 문자열 생성\n-  const getDateRangeDisplay = useCallback(() => {\n-    const range = getDateRange();\n-    const formatDate = (date: Date) => {\n-      return date.toLocaleDateString('ko-KR', {\n-        year: 'numeric',\n-        month: 'short',\n-        day: 'numeric'\n-      });\n-    };\n-    return `${formatDate(range.start)} ~ ${formatDate(range.end)}`;\n-  }, [getDateRange]);\n-\n-  const loadMembers = useCallback(async (period?: PeriodOption, startDate?: string, endDate?: string) => {\n-    try {\n-      setLoading(true);\n-      console.log('회원 데이터 로딩 시작...');\n-      \n-      // 미수 메타정보 로드\n-      await loadUnpaidMetaInfo();\n-      \n-      const allMembers = await dbManager.getAllMembers();\n-      console.log('전체 회원 수:', allMembers.length);\n-      \n-      // 기간별 필터링 (가입일 기준) - 매개변수가 있으면 사용, 없으면 현재 상태 사용\n-      const currentPeriod = period ?? selectedPeriod;\n-      const currentStartDate = startDate ?? customStartDate;\n-      const currentEndDate = endDate ?? customEndDate;\n-      \n-      let dateRange: { start: Date; end: Date };\n-      const today = new Date();\n-      const rangeStartDate = new Date();\n-      \n-      switch (currentPeriod) {\n-        case '1month':\n-          rangeStartDate.setMonth(today.getMonth() - 1);\n-          dateRange = { start: rangeStartDate, end: today };\n-          break;\n-        case '3month':\n-          rangeStartDate.setMonth(today.getMonth() - 3);\n-          dateRange = { start: rangeStartDate, end: today };\n-          break;\n-        case '6month':\n-          rangeStartDate.setMonth(today.getMonth() - 6);\n-          dateRange = { start: rangeStartDate, end: today };\n-          break;\n-        case 'custom':\n-          if (currentStartDate && currentEndDate) {\n-            dateRange = { \n-              start: new Date(currentStartDate), \n-              end: new Date(currentEndDate) \n-            };\n-          } else {\n-            // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n-            rangeStartDate.setMonth(today.getMonth() - 1);\n-            dateRange = { start: rangeStartDate, end: today };\n-          }\n-          break;\n-        default:\n-          rangeStartDate.setMonth(today.getMonth() - 1);\n-          dateRange = { start: rangeStartDate, end: today };\n-      }\n-      \n-      const filteredByDate = allMembers.filter(member => {\n-        const joinDate = new Date(member.createdAt);\n-        return joinDate >= dateRange.start && joinDate <= dateRange.end;\n-      });\n-      \n-      console.log(`${currentPeriod} 기간 내 가입 회원 수:`, filteredByDate.length);\n-      \n-      // 각 회원의 포인트와 수강정보를 조회하여 확장된 데이터 생성\n-      const membersWithStats: MemberWithStats[] = await Promise.all(\n-        filteredByDate.map(async (member) => {\n-          try {\n-            // 포인트 잔액 조회\n-            const pointBalance = await dbManager.getMemberPointBalance(member.id);\n-            \n-            // 미수 총액 조회\n-            const unpaidTotal = await dbManager.getMemberUnpaidTotal(member.id);\n-            \n-            // 현재 수강중인 과정 조회 (완료 상태가 아닌 것들)\n-            const allEnrollments = await dbManager.getCourseEnrollmentsByMember(member.id);\n-            const activeEnrollments = allEnrollments.filter(e => e.enrollmentStatus === 'completed' || e.enrollmentStatus === 'unpaid');\n-            \n-            const currentCourses = activeEnrollments.map(enrollment => ({\n-              productName: enrollment.productName,\n-              programType: enrollment.programType,\n-              progressInfo: getProgressInfo(enrollment)\n-            }));\n-            \n-            return {\n-              ...member,\n-              pointBalance,\n-              unpaidTotal,\n-              currentCourses\n-            };\n-          } catch (error) {\n-            console.error(`회원 ${member.name}의 추가 정보 로드 실패:`, error);\n-            return {\n-              ...member,\n-              pointBalance: 0,\n-              unpaidTotal: 0,\n-              currentCourses: []\n-            };\n-          }\n-        })\n-      );\n-      \n-      setMembers(membersWithStats);\n-      setFilteredMembers(membersWithStats);\n-    } catch (error) {\n-      console.error('회원 데이터 로드 실패:', error);\n-    } finally {\n-      setLoading(false);\n-    }\n-  }, [loadUnpaidMetaInfo, selectedPeriod, customStartDate, customEndDate]);\n-\n-  // 지점과 직원 데이터 로드\n-  const loadBranchesAndStaff = useCallback(async () => {\n-    try {\n-      const [branchData, staffData] = await Promise.all([\n-        dbManager.getAllBranches(),\n-        dbManager.getAllStaff()\n-      ]);\n-      setBranches(branchData);\n-      setStaffList(staffData);\n-    } catch (error) {\n-      console.error('지점/직원 데이터 로드 실패:', error);\n-    }\n-  }, []);\n-\n-  // 컴포넌트 마운트 시 초기 데이터 로드 (1개월 기준)\n-  useEffect(() => {\n-    const initializeData = async () => {\n-      await loadMembers();\n-      await loadBranchesAndStaff();\n-    };\n-    initializeData();\n-  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n-\n-  const handleSearch = async () => {\n-    // 현재 선택된 조건으로 데이터를 불러옵니다\n-    await loadMembers(selectedPeriod, customStartDate, customEndDate);\n-    \n-    let filtered = members;\n-    \n-    // 미수 필터 적용\n-    if (showUnpaidOnly) {\n-      filtered = filtered.filter(member => member.unpaidTotal > 0);\n-    }\n-    \n-    // 텍스트 검색\n-    if (searchQuery.trim()) {\n-      const query = searchQuery.toLowerCase().trim();\n-      filtered = filtered.filter(member =>\n-        member.name.toLowerCase().includes(query) ||\n-        member.phone.includes(query) ||\n-        member.email.toLowerCase().includes(query) ||\n-        member.coachName.toLowerCase().includes(query) ||\n-        member.loginId.toLowerCase().includes(query) ||\n-        member.dong.toLowerCase().includes(query)\n-      );\n-    }\n-    \n-    setFilteredMembers(filtered);\n-  };\n-\n-  const handlePreviewDocument = async (member: DBMember) => {\n-    try {\n-      // 회원 데이터를 MemberFormData 형식으로 변환\n-      const payments = await dbManager.getPaymentsByMember(member.id);\n-      const products = payments.flatMap(payment => payment.products);\n-      \n-      const formData: MemberFormData = {\n-        basicInfo: {\n-          name: member.name,\n-          phone: member.phone,\n-          email: member.email,\n-          birth: member.birth,\n-          gender: member.gender,\n-          addressInfo: {\n-            address: member.address,\n-            sigunguCode: member.sigunguCode,\n-            dong: member.dong,\n-            roadAddress: member.roadAddress,\n-            jibunAddress: member.jibunAddress,\n-          },\n-        },\n-        joinInfo: {\n-          branchId: member.branchId,\n-          coach: member.coach,\n-          joinPath: member.joinPath,\n-          loginId: member.loginId,\n-          loginPassword: member.loginPassword || '', // null인 경우 빈 문자열로 변환\n-          enableLogin: member.enableLogin,\n-        },\n-        paymentInfo: {\n-          selectedProducts: products,\n-          paymentMethod: 'card', // 기본값으로 카드 설정\n-        },\n-        agreementInfo: member.agreementInfo,\n-      };\n-      \n-      await openPreviewWindow(formData);\n-    } catch (error) {\n-      console.error('문서 미리보기 실패:', error);\n-      alert('문서 미리보기 중 오류가 발생했습니다.');\n-    }\n-  };\n-\n-  // 활성 수강 정보 확인\n-  const checkActiveCourses = async (memberId: string): Promise<boolean> => {\n-    try {\n-      console.log('=== 활성 수강 확인 시작 ===');\n-      console.log('회원 ID:', memberId);\n-      \n-      const enrollments = await dbManager.getCourseEnrollmentsByMember(memberId);\n-      console.log('전체 수강 정보:', enrollments);\n-      \n-      // 결제 상태와 관계없이 수강 등록된 모든 과정 확인\n-      const activeCourses = enrollments.filter(enrollment => {\n-        console.log('수강 정보 확인:', {\n-          productName: enrollment.productName,\n-          enrollmentStatus: enrollment.enrollmentStatus,\n-          startDate: enrollment.startDate,\n-          endDate: enrollment.endDate,\n-          sessionCount: enrollment.sessionCount,\n-          completedSessions: enrollment.completedSessions || 0,\n-          unpaidAmount: enrollment.unpaidAmount || 0\n-        });\n-        \n-        // 수강 등록 상태가 'completed' 또는 'unpaid'인 경우 (결제 완료 또는 미수)\n-        if (enrollment.enrollmentStatus !== 'completed' && enrollment.enrollmentStatus !== 'unpaid') {\n-          console.log('- 수강 등록 상태가 아님으로 제외');\n-          return false;\n-        }\n-        \n-        // 시작일이 없는 경우 (아직 시작 안함 - 수강 예정)\n-        if (!enrollment.startDate) {\n-          console.log('- 시작일 없음 → 수강 예정으로 활성 수강 판정');\n-          return true;\n-        }\n-        \n-        // 기간제: 종료일이 없거나 종료일이 미래인 경우 (진행 중)\n-        if (!enrollment.endDate || new Date(enrollment.endDate) > new Date()) {\n-          console.log('- 종료일 없거나 미래 → 기간제 진행 중으로 활성 수강 판정');\n-          return true;\n-        }\n-        \n-        // 횟수제: 남은 횟수가 있는 경우\n-        if (enrollment.sessionCount && (enrollment.completedSessions || 0) < enrollment.sessionCount) {\n-          const remainingSessions = enrollment.sessionCount - (enrollment.completedSessions || 0);\n-          console.log(`- 횟수제 남은 횟수: ${remainingSessions}회 → 활성 수강 판정`);\n-          return true;\n-        }\n-        \n-        console.log('- 수강 완료로 비활성 수강 판정');\n-        return false;\n-      });\n-      \n-      console.log('활성 수강 목록:', activeCourses);\n-      console.log('활성 수강 개수:', activeCourses.length);\n-      console.log('=== 활성 수강 확인 종료 ===');\n-      \n-      return activeCourses.length > 0;\n-    } catch (error) {\n-      console.error('활성 수강 정보 확인 실패:', error);\n-      return false;\n-    }\n-  };\n-\n-  // 테이블 컬럼 정의\n-  const columns: TableColumn<MemberWithStats>[] = [\n-    {\n-      key: 'name',\n-      title: '이름',\n-      width: '140px',\n-      render: (value, record) => (\n-        <div>\n-          <div>{record.name}</div>\n-          <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-            {record.email || '-'}\n-          </div>\n-        </div>\n-      )\n-    },\n-    {\n-      key: 'phone',\n-      title: '연락처',\n-      width: '130px'\n-    },\n-    {\n-      key: 'branchName',\n-      title: '지점',\n-      width: '100px',\n-      render: (value, record) => record.branchName || '-'\n-    },\n-    {\n-      key: 'coachName',\n-      title: '담당코치',\n-      width: '100px',\n-      render: (value, record) => record.coachName || '-'\n-    },\n-    {\n-      key: 'pointBalance',\n-      title: '포인트',\n-      width: '100px',\n-      align: 'right' as const,\n-      render: (value, record) => (\n-        <PointInfo>\n-          {record.pointBalance > 0 \n-            ? `${record.pointBalance.toLocaleString()}P` \n-            : '-'\n-          }\n-        </PointInfo>\n-      )\n-    },\n-    {\n-      key: 'unpaidTotal',\n-      title: '미수금',\n-      width: '100px',\n-      align: 'right' as const,\n-      render: (value, record) => (\n-        <UnpaidInfo $hasUnpaid={record.unpaidTotal > 0}>\n-          {record.unpaidTotal > 0 \n-            ? `${record.unpaidTotal.toLocaleString()}원` \n-            : '-'\n-          }\n-        </UnpaidInfo>\n-      )\n-    },\n-    {\n-      key: 'currentCourses',\n-      title: '현재 수강',\n-      width: '200px',\n-      render: (value, record) => (\n-        record.currentCourses.length > 0 ? (\n-          record.currentCourses.map((course, index) => (\n-            <CourseItem key={index}>\n-              <CourseName>{course.productName}</CourseName>\n-              <ProgressText>({course.progressInfo})</ProgressText>\n-            </CourseItem>\n-          ))\n-        ) : (\n-          <div style={{ color: AppColors.onInput1, fontSize: '12px' }}>\n-            수강중인 과정 없음\n-          </div>\n-        )\n-      )\n-    },\n-    {\n-      key: 'isActive',\n-      title: '상태',\n-      width: '80px',\n-      align: 'center' as const,\n-      render: (value, record) => (\n-        <StatusBadge $status={record.isActive ? 'active' : 'inactive'}>\n-          {record.isActive ? '활성' : '비활성'}\n-        </StatusBadge>\n-      )\n-    },\n-    {\n-      key: 'actions',\n-      title: '액션',\n-      width: '100px',\n-      align: 'center' as const,\n-      render: (value, record) => (\n-        <ActionButtons>\n-          <ActionButton \n-            onClick={(e) => {\n-              e.stopPropagation();\n-              handlePreviewDocument(record);\n-            }}\n-          >\n-            문서보기\n-          </ActionButton>\n-        </ActionButtons>\n-      )\n-    }\n-  ];\n-\n-  // 결과 카운트 정보 컴포넌트\n-  const resultCountInfo = (\n-    <>\n-      {showUnpaidOnly ? '미수 고객: ' : ''}{filteredMembers.length}명 \n-      (활성: {filteredMembers.filter(m => m.isActive).length}명, \n-      비활성: {filteredMembers.filter(m => !m.isActive).length}명)\n-      <br />\n-      <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-        기간: {getDateRangeDisplay()} | 전체: {members.length}명\n-      </span>\n-    </>\n-  );\n-\n-  // 회원 수정 모달 열기\n-  const handleEditMember = async (member: DBMember) => {\n-    console.log('=== 회원 수정 모달 열기 ===');\n-    console.log('회원 정보:', {\n-      id: member.id,\n-      name: member.name,\n-      phone: member.phone,\n-      isActive: member.isActive\n-    });\n-    \n-    setEditingMember(member);\n-    \n-    // 활성 수강 정보 확인\n-    const hasActive = await checkActiveCourses(member.id);\n-    console.log('활성 수강 있음:', hasActive);\n-    setHasActiveCourses(hasActive);\n-    \n-    // 기존 로그인 정보가 있는지 확인\n-    const hasExistingLogin = member.enableLogin && \n-                            member.loginId && \n-                            !member.loginId.startsWith('temp_');\n-    \n-    setEditFormData({\n-      name: member.name,\n-      phone: member.phone,\n-      email: member.email,\n-      birth: member.birth,\n-      gender: member.gender,\n-      address: member.address,\n-      branchId: member.branchId,\n-      coach: member.coach,\n-      joinPath: member.joinPath,\n-      // 기존 로그인 정보가 있는 경우 수정 불가하므로 폼에서 제외\n-      loginId: hasExistingLogin ? '' : (member.loginId || ''),\n-      loginPassword: hasExistingLogin ? '' : (member.loginPassword || ''),\n-      enableLogin: member.enableLogin,\n-      remarks: member.remarks || ''\n-    });\n-    setShowEditModal(true);\n-  };\n-\n-  // 회원 정보 수정 저장\n-  const handleSaveMember = async () => {\n-    if (!editingMember || !editFormData) return;\n-\n-    try {\n-      // 입력 검증\n-      if (!editFormData.name?.trim()) {\n-        toast.error('이름을 입력해주세요.');\n-        return;\n-      }\n-      if (!editFormData.phone?.trim()) {\n-        toast.error('연락처를 입력해주세요.');\n-        return;\n-      }\n-\n-      // 현재 회원을 제외한 다른 회원들의 연락처와 이메일 중복 체크\n-      const allMembers = await dbManager.getAllMembers();\n-      const otherMembers = allMembers.filter(m => m.id !== editingMember.id);\n-      \n-      // 연락처 중복 체크\n-      const phoneExists = otherMembers.some(m => m.phone === editFormData.phone);\n-      if (phoneExists) {\n-        toast.error(`연락처 ${editFormData.phone}는(은) 이미 등록된 회원입니다.`);\n-        return;\n-      }\n-\n-      // 이메일 중복 체크 (이메일이 있는 경우만)\n-      if (editFormData.email && editFormData.email.trim() !== '') {\n-        const emailExists = otherMembers.some(m => m.email === editFormData.email);\n-        if (emailExists) {\n-          toast.error(`이메일 ${editFormData.email}는(은) 이미 등록된 회원입니다.`);\n-          return;\n-        }\n-      }\n-\n-      // 로그인 ID 중복 체크 (로그인 기능 사용 시에만, 그리고 기존 로그인 정보가 없는 경우에만)\n-      if (editFormData.enableLogin && editFormData.loginId) {\n-        // 기존에 로그인 정보가 있는 경우 중복 체크 스킵\n-        const hasExistingLogin = editingMember.enableLogin && \n-                                editingMember.loginId && \n-                                !editingMember.loginId.startsWith('temp_');\n-        \n-        if (!hasExistingLogin) {\n-          // 직원과 다른 회원들의 로그인 ID 중복 체크\n-          const [allStaff, loginIdExists] = await Promise.all([\n-            dbManager.getAllStaff(),\n-            Promise.resolve(otherMembers.some(m => m.loginId === editFormData.loginId))\n-          ]);\n-\n-          const staffLoginIdExists = allStaff.some(s => s.loginId === editFormData.loginId);\n-          \n-          if (staffLoginIdExists) {\n-            toast.error(`로그인 ID ${editFormData.loginId}는(은) 이미 직원으로 등록되어 있습니다.`);\n-            return;\n-          }\n-          \n-          if (loginIdExists) {\n-            toast.error(`로그인 ID ${editFormData.loginId}는(은) 이미 다른 회원이 사용하고 있습니다.`);\n-            return;\n-          }\n-        }\n-      }\n-\n-      // 지점명과 코치명 가져오기\n-      const selectedBranch = branches.find(b => b.id === editFormData.branchId);\n-      const selectedCoach = staffList.find(s => s.id === editFormData.coach);\n-\n-      // 기존 로그인 정보가 있는지 확인\n-      const hasExistingLogin = editingMember.enableLogin && \n-                              editingMember.loginId && \n-                              !editingMember.loginId.startsWith('temp_');\n-\n-      // 회원 정보 업데이트\n-      const updatedMember: DBMember = {\n-        ...editingMember,\n-        ...editFormData,\n-        branchName: selectedBranch?.name || editingMember.branchName,\n-        coachName: selectedCoach?.name || editingMember.coachName,\n-        // 기존 로그인 정보가 있는 경우 보존, 없는 경우만 새로 설정\n-        loginId: hasExistingLogin ? editingMember.loginId : (editFormData.loginId || editingMember.loginId),\n-        loginPassword: hasExistingLogin ? editingMember.loginPassword : (editFormData.loginPassword || null),\n-        enableLogin: editFormData.enableLogin || false,\n-      };\n-\n-      await dbManager.updateMember(editingMember.id, updatedMember);\n-\n-      toast.success('회원 정보가 성공적으로 수정되었습니다.');\n-      setShowEditModal(false);\n-      setEditingMember(null);\n-      setEditFormData({});\n-      \n-      // 회원 목록 새로고침\n-      await loadMembers();\n-    } catch (error) {\n-      console.error('회원 정보 수정 실패:', error);\n-      toast.error('회원 정보 수정 중 오류가 발생했습니다.');\n-    }\n-  };\n-\n-  // 회원 상태 변경 (활성/비활성)\n-  const handleToggleMemberStatus = async () => {\n-    if (!editingMember) return;\n-\n-    try {\n-      const newStatus = !editingMember.isActive;\n-      const statusText = newStatus ? '활성' : '비활성';\n-      \n-      // 비활성화하려는데 활성 수강이 있는 경우 차단\n-      if (!newStatus && hasActiveCourses) {\n-        toast.error('수강 중인 과정이 있는 회원은 비활성화할 수 없습니다.');\n-        return;\n-      }\n-      \n-      // 상태 변경 확인\n-      const confirmed = window.confirm(\n-        `정말로 이 회원을 '${statusText}' 상태로 변경하시겠습니까?\\n\\n` +\n-        `회원명: ${editingMember.name}\\n` +\n-        `연락처: ${editingMember.phone}`\n-      );\n-\n-      if (!confirmed) return;\n-\n-      // 회원 상태 업데이트\n-      const updatedMember: DBMember = {\n-        ...editingMember,\n-        isActive: newStatus\n-      };\n-\n-      await dbManager.updateMember(editingMember.id, updatedMember);\n-\n-      // 로컬 상태 업데이트\n-      setEditingMember(updatedMember);\n-      \n-      toast.success(`회원이 '${statusText}' 상태로 변경되었습니다.`);\n-      \n-      // 회원 목록 새로고침\n-      await loadMembers();\n-      \n-      // 현재 검색 조건으로 다시 필터링\n-      if (searchQuery.trim() || showUnpaidOnly) {\n-        // 기존 검색 조건 유지하면서 새로고침\n-        setTimeout(() => {\n-          handleSearch();\n-        }, 100);\n-      }\n-    } catch (error) {\n-      console.error('회원 상태 변경 실패:', error);\n-      toast.error('회원 상태 변경 중 오류가 발생했습니다.');\n-    }\n-  };\n-\n-  // 모달 닫기\n-  const handleCloseModal = () => {\n-    setShowEditModal(false);\n-    setEditingMember(null);\n-    setEditFormData({});\n-    setHasActiveCourses(false);\n-  };\n-\n-  if (loading) {\n-    return (\n-      <PageContainer>\n-        <DataTable\n-          title=\"검색 결과\"\n-          columns={columns}\n-          data={[]}\n-          loading={true}\n-        />\n-      </PageContainer>\n-    );\n-  }\n-\n-  return (\n-    <PageContainer>\n-      {/* 새로운 SearchArea 컴포넌트 사용 */}\n-      <SearchArea\n-        metaContent={\n-          <div style={{ display: 'flex', gap: '12px', alignItems: 'center', flexWrap: 'wrap' }}>\n-            <UnpaidFilter\n-              active={showUnpaidOnly}\n-              unpaidCount={unpaidMetaInfo.unpaidMemberCount}\n-              totalAmount={unpaidMetaInfo.totalUnpaidAmount}\n-              onClick={() => setShowUnpaidOnly(!showUnpaidOnly)}\n-            />\n-          </div>\n-        }\n-        selectedPeriod={selectedPeriod}\n-        onPeriodChange={setSelectedPeriod}\n-        customStartDate={customStartDate}\n-        customEndDate={customEndDate}\n-        onCustomStartDateChange={setCustomStartDate}\n-        onCustomEndDateChange={setCustomEndDate}\n-        dateRangeDisplay={getDateRangeDisplay()}\n-        searchValue={searchQuery}\n-        onSearchChange={setSearchQuery}\n-        onSearch={handleSearch}\n-        searchPlaceholder=\"회원명, 전화번호, 이메일, 코치명, 로그인ID, 주소(동)로 검색...\"\n-        autoSearchOnDateChange={false}\n-      />\n-\n-      <DataTable\n-        title=\"검색 결과\"\n-        columns={columns}\n-        data={filteredMembers}\n-        loading={loading}\n-        emptyText=\"검색 결과가 없습니다\"\n-        emptyDescription=\"다른 검색어를 입력하거나 필터를 조정해보세요.\"\n-        resultCount={resultCountInfo}\n-        onRowClick={handleEditMember}\n-        customRowStyle={(member) => ({\n-          cursor: 'pointer',\n-          opacity: member.isActive === false ? 0.6 : 1,\n-          backgroundColor: member.isActive === false ? '#f8f9fa' : 'transparent'\n-        })}\n-        pagination={{\n-          enabled: true,\n-          pageSize: 5,\n-          pageSizeOptions: [5, 15, 30],\n-          showTotal: true\n-        }}\n-      />\n-\n-      {/* 회원 수정 모달 */}\n-      {showEditModal && editingMember && (\n-        <Modal \n-          isOpen={showEditModal}\n-          onClose={handleCloseModal}\n-          width=\"min(95vw, 1000px)\"\n-          header=\"회원 정보 수정\"\n-          body={\n-            <div style={{ textAlign: 'left' }}>\n-              <FormSection>\n-                <SectionTitle>기본 정보</SectionTitle>\n-                <FormRow>\n-                  <FormGroup>\n-                    <FormLabel>이름 *</FormLabel>\n-                    <FormInput\n-                      value={editFormData.name || ''}\n-                      onChange={(e) => setEditFormData(prev => ({ ...prev, name: e.target.value }))}\n-                      placeholder=\"이름을 입력하세요\"\n-                    />\n-                  </FormGroup>\n-                  <FormGroup>\n-                    <FormLabel>성별</FormLabel>\n-                    <CustomDropdown\n-                      value={editFormData.gender || ''}\n-                      onChange={(value) => setEditFormData(prev => ({ ...prev, gender: value as 'male' | 'female' | '' }))}\n-                      options={[\n-                        { value: 'female', label: '여성' },\n-                        { value: 'male', label: '남성' }\n-                      ]}\n-                      placeholder=\"성별을 선택하세요\"\n-                    />\n-                  </FormGroup>\n-                </FormRow>\n-                \n-                <FormRow>\n-                  <FormGroup>\n-                    <FormLabel>연락처 *</FormLabel>\n-                    <AppPhoneTextField\n-                      value={editFormData.phone || ''}\n-                      onChange={(value, isValid) => setEditFormData(prev => ({ ...prev, phone: value }))}\n-                      placeholder=\"연락처를 입력하세요\"\n-                    />\n-                  </FormGroup>\n-                  <FormGroup>\n-                    <FormLabel>생년월일</FormLabel>\n-                    <CustomDateInput\n-                      value={editFormData.birth || ''}\n-                      onChange={(value) => setEditFormData(prev => ({ ...prev, birth: value }))}\n-                      placeholder=\"생년월일을 선택하세요\"\n-                    />\n-                  </FormGroup>\n-                </FormRow>\n-                \n-                <FormRowVertical>\n-                  <FormGroup>\n-                    <FormLabel>이메일</FormLabel>\n-                    <AppEmailTextField\n-                      value={editFormData.email || ''}\n-                      onChange={(e) => setEditFormData(prev => ({ ...prev, email: e.target.value }))}\n-                      placeholder=\"이메일을 입력하세요\"\n-                    />\n-                  </FormGroup>\n-                  <FormGroup>\n-                    <FormLabel>주소</FormLabel>\n-                    <DaumAddressSearch\n-                      value={editFormData.address || ''}\n-                      onAddressSelect={(addressInfo) => setEditFormData(prev => ({ \n-                        ...prev, \n-                        address: addressInfo.address,\n-                        // 추가 주소 정보들도 저장 (필요시)\n-                      }))}\n-                      placeholder=\"주소를 검색하세요\"\n-                    />\n-                  </FormGroup>\n-                </FormRowVertical>\n-              </FormSection>\n-\n-              <FormSection>\n-                <SectionTitle>가입 정보</SectionTitle>\n-                <FormRow>\n-                  <FormGroup>\n-                    <FormLabel>지점</FormLabel>\n-                    <CustomDropdown\n-                      value={editFormData.branchId || ''}\n-                      onChange={(value) => setEditFormData(prev => ({ ...prev, branchId: value }))}\n-                      options={branches.map(branch => ({ \n-                        value: branch.id, \n-                        label: branch.name \n-                      }))}\n-                      placeholder=\"지점을 선택하세요\"\n-                    />\n-                  </FormGroup>\n-                  <FormGroup>\n-                    <FormLabel>담당 코치</FormLabel>\n-                    <CustomDropdown\n-                      value={editFormData.coach || ''}\n-                      onChange={(value) => setEditFormData(prev => ({ ...prev, coach: value }))}\n-                      options={staffList\n-                        .filter(staff => !editFormData.branchId || staff.branchId === editFormData.branchId)\n-                        .map(staff => ({ \n-                          value: staff.id, \n-                          label: `${staff.name} (${staff.position})` \n-                        }))}\n-                      placeholder=\"코치를 선택하세요\"\n-                    />\n-                  </FormGroup>\n-                </FormRow>\n-                \n-                <FormRowVertical>\n-                  <FormGroup>\n-                    <FormLabel>가입 경로</FormLabel>\n-                    <CustomDropdown\n-                      value={editFormData.joinPath || ''}\n-                      onChange={(value) => setEditFormData(prev => ({ ...prev, joinPath: value }))}\n-                      options={[\n-                        { value: '지인소개', label: '지인소개' },\n-                        { value: '당근마켓', label: '당근마켓' },\n-                        { value: '네이버 플레이스', label: '네이버 플레이스' },\n-                        { value: '전화', label: '전화' },\n-                        { value: '워크인', label: '워크인' },\n-                        { value: '현수막', label: '현수막' },\n-                        { value: '인스타', label: '인스타' },\n-                        { value: '광고지', label: '광고지' },\n-                        { value: '기타', label: '기타' }\n-                      ]}\n-                      placeholder=\"가입 경로를 선택하세요\"\n-                    />\n-                  </FormGroup>\n-                </FormRowVertical>\n-              </FormSection>\n-\n-              <FormSection>\n-                <SectionTitle>로그인 정보</SectionTitle>\n-                <FormRowVertical>\n-                  <FormGroup>\n-                    <CheckboxLabel>\n-                      <FormCheckbox\n-                        type=\"checkbox\"\n-                        checked={editFormData.enableLogin || false}\n-                        onChange={(e) => setEditFormData(prev => ({ ...prev, enableLogin: e.target.checked }))}\n-                        disabled={!!(editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_'))}\n-                      />\n-                      로그인 기능 사용\n-                      {editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_') && (\n-                        <span style={{ marginLeft: '8px', fontSize: '12px', color: AppColors.onInput1 }}>\n-                          (기존 로그인 정보가 있어 수정 불가)\n-                        </span>\n-                      )}\n-                    </CheckboxLabel>\n-                  </FormGroup>\n-                </FormRowVertical>\n-                \n-                {editFormData.enableLogin && (\n-                  <FormRow>\n-                    <FormGroup>\n-                      <FormLabel>로그인 ID</FormLabel>\n-                      {editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_') ? (\n-                        // 기존 로그인 ID가 있는 경우 - 읽기 전용으로 표시\n-                        <FormInput\n-                          value={editingMember.loginId}\n-                          disabled\n-                          style={{ backgroundColor: '#f5f5f5', cursor: 'not-allowed' }}\n-                        />\n-                      ) : (\n-                        // 로그인 기능이 없었거나 임시 ID인 경우 - 새로 입력 가능\n-                        <AppIdTextField\n-                          value={editFormData.loginId || ''}\n-                          onChange={(e) => setEditFormData(prev => ({ ...prev, loginId: e.target.value }))}\n-                          placeholder=\"로그인 ID를 입력하세요\"\n-                        />\n-                      )}\n-                    </FormGroup>\n-                    <FormGroup>\n-                      <FormLabel>비밀번호</FormLabel>\n-                      {editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_') ? (\n-                        // 기존 로그인 정보가 있는 경우 - 비밀번호 확인 불가\n-                        <FormInput\n-                          value=\"••••••••\"\n-                          disabled\n-                          style={{ backgroundColor: '#f5f5f5', cursor: 'not-allowed' }}\n-                          placeholder=\"보안상 확인 불가\"\n-                        />\n-                      ) : (\n-                        // 로그인 기능이 없었거나 임시 ID인 경우 - 새로 입력 가능\n-                        <AppPwdTextField\n-                          value={editFormData.loginPassword || ''}\n-                          onChange={(e) => setEditFormData(prev => ({ ...prev, loginPassword: e.target.value }))}\n-                          placeholder=\"비밀번호를 입력하세요\"\n-                          fieldType={PwdFieldType.PASSWORD}\n-                        />\n-                      )}\n-                    </FormGroup>\n-                  </FormRow>\n-                )}\n-                \n-                {editingMember?.enableLogin && editingMember?.loginId && !editingMember?.loginId.startsWith('temp_') && (\n-                  <div style={{ \n-                    padding: '12px', \n-                    backgroundColor: '#fff3cd', \n-                    border: '1px solid #ffeaa7', \n-                    borderRadius: '8px',\n-                    fontSize: '14px',\n-                    color: '#856404',\n-                    marginTop: '8px'\n-                  }}>\n-                    ⚠️ 보안상 기존 로그인 ID와 비밀번호는 수정할 수 없습니다.\n-                  </div>\n-                )}\n-              </FormSection>\n-\n-              <FormSection>\n-                <SectionTitle>기타</SectionTitle>\n-                <FormRowVertical>\n-                  <FormGroup>\n-                    <FormLabel>비고</FormLabel>\n-                    <FormInput\n-                      value={editFormData.remarks || ''}\n-                      onChange={(e) => setEditFormData(prev => ({ ...prev, remarks: e.target.value }))}\n-                      placeholder=\"기타 메모사항을 입력하세요\"\n-                    />\n-                  </FormGroup>\n-                </FormRowVertical>\n-              </FormSection>\n-            </div>\n-          }\n-          footer={\n-            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\n-              <div>\n-                <Button \n-                  variant=\"secondary\" \n-                  onClick={handleToggleMemberStatus}\n-                  disabled={editingMember?.isActive && hasActiveCourses}\n-                  style={{\n-                    backgroundColor: editingMember?.isActive ? '#fef2f2' : '#f0f9ff',\n-                    borderColor: editingMember?.isActive ? '#fca5a5' : '#93c5fd',\n-                    color: editingMember?.isActive ? '#dc2626' : '#2563eb',\n-                    opacity: (editingMember?.isActive && hasActiveCourses) ? 0.5 : 1,\n-                    cursor: (editingMember?.isActive && hasActiveCourses) ? 'not-allowed' : 'pointer'\n-                  }}\n-                  title={\n-                    editingMember?.isActive && hasActiveCourses \n-                      ? '수강 중인 과정이 있어 비활성화할 수 없습니다' \n-                      : ''\n-                  }\n-                >\n-                  {editingMember?.isActive ? '비활성화' : '활성화'}\n-                </Button>\n-                {editingMember?.isActive && hasActiveCourses && (\n-                  <div style={{ \n-                    fontSize: '12px', \n-                    color: '#dc2626', \n-                    marginTop: '4px',\n-                    maxWidth: '120px' \n-                  }}>\n-                    ⚠️ 수강 중인 과정이 있어 비활성화 불가\n-                  </div>\n-                )}\n-              </div>\n-              <div style={{ display: 'flex', gap: '12px' }}>\n-                <Button variant=\"secondary\" onClick={handleCloseModal}>\n-                  취소\n-                </Button>\n-                <Button onClick={handleSaveMember}>\n-                  저장\n-                </Button>\n-              </div>\n-            </div>\n-          }\n-        />\n-      )}\n-    </PageContainer>\n-  );\n-};\n-\n-export default MemberSearch;\n"
                },
                {
                    "date": 1761369384184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -949,10 +949,10 @@\n           backgroundColor: member.isActive === false ? '#f8f9fa' : 'transparent'\n         })}\n         pagination={{\n           enabled: true,\n-          pageSize: 5,\n-          pageSizeOptions: [5, 15, 30],\n+          pageSize: 15,\n+          pageSizeOptions: [15, 30, 100],\n           showTotal: true\n         }}\n       />\n \n"
                },
                {
                    "date": 1761369747688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -399,15 +399,20 @@\n             };\n           }\n         })\n       );\n+\n+      // 최근 등록순으로 정렬 (createdAt 내림차순)\n+      const sortedMembersWithStats = membersWithStats.sort((a, b) => \n+        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n+      );\n       \n       console.log('=== MemberSearch 최종 데이터 설정 ===');\n-      console.log('membersWithStats 개수:', membersWithStats.length);\n-      console.log('첫 번째 회원 데이터:', membersWithStats[0]);\n+      console.log('sortedMembersWithStats 개수:', sortedMembersWithStats.length);\n+      console.log('첫 번째 회원 데이터:', sortedMembersWithStats[0]);\n       \n-      setMembers(membersWithStats);\n-      setFilteredMembers(membersWithStats);\n+      setMembers(sortedMembersWithStats);\n+      setFilteredMembers(sortedMembersWithStats);\n       \n       console.log('상태 업데이트 완료 - members와 filteredMembers 설정됨');\n     } catch (error) {\n       console.error('회원 데이터 로드 실패:', error);\n"
                },
                {
                    "date": 1761373901437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -509,9 +509,9 @@\n       \n       await openPreviewWindow(formData);\n     } catch (error) {\n       console.error('문서 미리보기 실패:', error);\n-      alert('문서 미리보기 중 오류가 발생했습니다.');\n+      toast.error('문서 미리보기 중 오류가 발생했습니다.');\n     }\n   };\n \n   // 활성 수강 정보 확인\n"
                },
                {
                    "date": 1761375753746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,10 @@\n import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n import DataTable, { type TableColumn } from '../../../components/DataTable';\n+import CourseRegistrationModal from './CourseRegistrationModal';\n+import PaymentRegistrationModal from './PaymentRegistrationModal';\n \n // 회원 검색 결과에서 사용할 확장된 회원 정보 타입\n interface MemberWithStats extends DBMember {\n   pointBalance: number;\n@@ -66,20 +68,23 @@\n `;\n \n const ActionButtons = styled.div`\n   display: flex;\n-  gap: 8px;\n+  gap: 4px;\n+  flex-wrap: wrap;\n+  justify-content: center;\n `;\n \n const ActionButton = styled.button`\n-  padding: 6px 12px;\n+  padding: 4px 8px;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 4px;\n   background: ${AppColors.surface};\n   color: ${AppColors.primary};\n-  font-size: 12px;\n+  font-size: 11px;\n   cursor: pointer;\n   transition: all 0.2s;\n+  white-space: nowrap;\n   \n   &:hover {\n     background: ${AppColors.primary};\n     color: ${AppColors.onPrimary};\n@@ -226,8 +231,13 @@\n   const [branches, setBranches] = useState<any[]>([]);\n   const [staffList, setStaffList] = useState<any[]>([]);\n   const [hasActiveCourses, setHasActiveCourses] = useState<boolean>(false);\n \n+  // 새로운 모달 상태\n+  const [showCourseRegistrationModal, setShowCourseRegistrationModal] = useState<boolean>(false);\n+  const [showPaymentRegistrationModal, setShowPaymentRegistrationModal] = useState<boolean>(false);\n+  const [selectedMemberForModal, setSelectedMemberForModal] = useState<DBMember | null>(null);\n+\n   const getProgressInfo = (enrollment: any) => {\n     if (enrollment.programType === '횟수제' && enrollment.sessionCount) {\n       const remaining = enrollment.sessionCount - (enrollment.completedSessions || 0);\n       return `${remaining}/${enrollment.sessionCount}회 남음`;\n@@ -667,15 +677,33 @@\n     },\n     {\n       key: 'actions',\n       title: '액션',\n-      width: '100px',\n+      width: '200px',\n       align: 'center' as const,\n       render: (value, record) => (\n         <ActionButtons>\n           <ActionButton \n             onClick={(e) => {\n               e.stopPropagation();\n+              handleOpenCourseRegistration(record);\n+            }}\n+            style={{ backgroundColor: '#e8f5e8', color: '#2e7d32', borderColor: '#4caf50' }}\n+          >\n+            수강등록\n+          </ActionButton>\n+          <ActionButton \n+            onClick={(e) => {\n+              e.stopPropagation();\n+              handleOpenPaymentRegistration(record);\n+            }}\n+            style={{ backgroundColor: '#e3f2fd', color: '#1976d2', borderColor: '#2196f3' }}\n+          >\n+            결제등록\n+          </ActionButton>\n+          <ActionButton \n+            onClick={(e) => {\n+              e.stopPropagation();\n               handlePreviewDocument(record);\n             }}\n           >\n             문서보기\n@@ -897,8 +925,30 @@\n     setEditFormData({});\n     setHasActiveCourses(false);\n   };\n \n+  // 수강 등록 모달 열기\n+  const handleOpenCourseRegistration = (member: DBMember) => {\n+    setSelectedMemberForModal(member);\n+    setShowCourseRegistrationModal(true);\n+  };\n+\n+  // 결제 등록 모달 열기\n+  const handleOpenPaymentRegistration = (member: DBMember) => {\n+    setSelectedMemberForModal(member);\n+    setShowPaymentRegistrationModal(true);\n+  };\n+\n+  // 수강 등록 성공 처리\n+  const handleCourseRegistrationSuccess = () => {\n+    loadMembers(); // 회원 목록 새로고침\n+  };\n+\n+  // 결제 등록 성공 처리\n+  const handlePaymentRegistrationSuccess = () => {\n+    loadMembers(); // 회원 목록 새로고침\n+  };\n+\n   if (loading) {\n     return (\n       <PageContainer>\n         <DataTable\n@@ -1230,8 +1280,34 @@\n             </div>\n           }\n         />\n       )}\n+\n+      {/* 수강 등록 모달 */}\n+      {showCourseRegistrationModal && (\n+        <CourseRegistrationModal\n+          isOpen={showCourseRegistrationModal}\n+          onClose={() => {\n+            setShowCourseRegistrationModal(false);\n+            setSelectedMemberForModal(null);\n+          }}\n+          onSuccess={handleCourseRegistrationSuccess}\n+          preselectedMember={selectedMemberForModal}\n+        />\n+      )}\n+\n+      {/* 결제 등록 모달 */}\n+      {showPaymentRegistrationModal && (\n+        <PaymentRegistrationModal\n+          isOpen={showPaymentRegistrationModal}\n+          onClose={() => {\n+            setShowPaymentRegistrationModal(false);\n+            setSelectedMemberForModal(null);\n+          }}\n+          onSuccess={handlePaymentRegistrationSuccess}\n+          preselectedMember={selectedMemberForModal}\n+        />\n+      )}\n     </PageContainer>\n   );\n };\n \n"
                },
                {
                    "date": 1761378612856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -617,8 +617,28 @@\n       width: '100px',\n       render: (value, record) => record.coachName || '-'\n     },\n     {\n+      key: 'lockerInfo',\n+      title: '라커',\n+      width: '100px',\n+      render: (value, record) => record.lockerInfo ? (\n+        <div>\n+          <div style={{ fontWeight: '600', color: AppColors.primary, fontSize: '14px' }}>\n+            {record.lockerInfo.lockerNumber}번\n+          </div>\n+          <div style={{ fontSize: '11px', color: AppColors.onInput1 }}>\n+            ~{new Date(record.lockerInfo.endDate).toLocaleDateString('ko-KR', { \n+              month: 'short', \n+              day: 'numeric' \n+            })}\n+          </div>\n+        </div>\n+      ) : (\n+        <span style={{ color: AppColors.onInput1, fontSize: '12px' }}>미사용</span>\n+      )\n+    },\n+    {\n       key: 'pointBalance',\n       title: '포인트',\n       width: '100px',\n       align: 'right' as const,\n"
                },
                {
                    "date": 1761379597533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n import DataTable, { type TableColumn } from '../../../components/DataTable';\n import CourseRegistrationModal from './CourseRegistrationModal';\n import PaymentRegistrationModal from './PaymentRegistrationModal';\n+import QRCodeModal from '../../../components/QRCodeModal';\n \n // 회원 검색 결과에서 사용할 확장된 회원 정보 타입\n interface MemberWithStats extends DBMember {\n   pointBalance: number;\n@@ -236,8 +237,12 @@\n   const [showCourseRegistrationModal, setShowCourseRegistrationModal] = useState<boolean>(false);\n   const [showPaymentRegistrationModal, setShowPaymentRegistrationModal] = useState<boolean>(false);\n   const [selectedMemberForModal, setSelectedMemberForModal] = useState<DBMember | null>(null);\n \n+  // QR 모달 관련 상태\n+  const [qrModalOpen, setQrModalOpen] = useState<boolean>(false);\n+  const [selectedMemberForQR, setSelectedMemberForQR] = useState<DBMember | null>(null);\n+\n   const getProgressInfo = (enrollment: any) => {\n     if (enrollment.programType === '횟수제' && enrollment.sessionCount) {\n       const remaining = enrollment.sessionCount - (enrollment.completedSessions || 0);\n       return `${remaining}/${enrollment.sessionCount}회 남음`;\n@@ -695,8 +700,25 @@\n         </StatusBadge>\n       )\n     },\n     {\n+      key: 'qr',\n+      title: 'QR',\n+      width: '60px',\n+      align: 'center' as const,\n+      render: (value, record) => (\n+        <ActionButton \n+          onClick={(e) => {\n+            e.stopPropagation();\n+            handleQRCode(record);\n+          }}\n+          style={{ backgroundColor: '#f3e5f5', color: '#7b1fa2', borderColor: '#9c27b0', fontSize: '12px', padding: '4px 8px' }}\n+        >\n+          QR\n+        </ActionButton>\n+      )\n+    },\n+    {\n       key: 'actions',\n       title: '액션',\n       width: '200px',\n       align: 'center' as const,\n@@ -967,8 +989,19 @@\n   const handlePaymentRegistrationSuccess = () => {\n     loadMembers(); // 회원 목록 새로고침\n   };\n \n+  // QR 코드 관련 핸들러\n+  const handleQRCode = (member: DBMember) => {\n+    setSelectedMemberForQR(member);\n+    setQrModalOpen(true);\n+  };\n+\n+  const handleQRModalClose = () => {\n+    setQrModalOpen(false);\n+    setSelectedMemberForQR(null);\n+  };\n+\n   if (loading) {\n     return (\n       <PageContainer>\n         <DataTable\n@@ -1326,8 +1359,18 @@\n           onSuccess={handlePaymentRegistrationSuccess}\n           preselectedMember={selectedMemberForModal}\n         />\n       )}\n+\n+      {/* QR 코드 모달 */}\n+      {selectedMemberForQR && (\n+        <QRCodeModal\n+          isOpen={qrModalOpen}\n+          onClose={handleQRModalClose}\n+          memberName={selectedMemberForQR.name}\n+          memberId={selectedMemberForQR.id}\n+        />\n+      )}\n     </PageContainer>\n   );\n };\n \n"
                }
            ],
            "date": 1759105836006,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport CMSLayout from '../../../components/CMSLayout';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\n\nconst PageContainer = styled.div`\n  width: 100%;\n`;\n\nconst SearchSection = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  padding: 24px;\n  margin-bottom: 24px;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n`;\n\nconst SearchRow = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: center;\n  margin-bottom: 16px;\n`;\n\nconst SearchInput = styled.input`\n  flex: 1;\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  outline: none;\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n  padding: 12px 18px;\n  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n  border-radius: 8px;\n  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    opacity: 0.9;\n  }\n`;\n\nconst FilterRow = styled.div<{ $visible: boolean }>`\n  display: ${props => props.$visible ? 'flex' : 'none'};\n  gap: 8px;\n  flex-wrap: wrap;\n  align-items: center;\n`;\n\nconst FilterLabel = styled.span`\n  font-size: ${AppTextStyles.label1.fontSize};\n  color: ${AppColors.onSurface};\n  margin-right: 8px;\n`;\n\nconst FilterChip = styled.button<{ $active?: boolean }>`\n  padding: 6px 12px;\n  border-radius: 16px;\n  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n  font-size: ${AppTextStyles.label2.fontSize};\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    background: ${props => props.$active ? AppColors.primary : AppColors.primary}10;\n  }\n`;\n\nconst ResultsSection = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n`;\n\nconst ResultsHeader = styled.div`\n  padding: 16px 20px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst ResultsTitle = styled.h3`\n  font-size: ${AppTextStyles.title3.fontSize};\n  font-weight: 600;\n  margin: 0;\n`;\n\nconst ResultsCount = styled.span`\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onInput1};\n`;\n\nconst TableContainer = styled.div`\n  overflow-x: auto;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nconst TableHeader = styled.thead`\n  background: ${AppColors.background};\n`;\n\nconst TableRow = styled.tr`\n  &:hover td {\n    background: ${AppColors.primary}05;\n  }\n  \n  &:not(:last-child) td {\n    border-bottom: 1px solid ${AppColors.borderLight};\n  }\n`;\n\nconst TableHeaderCell = styled.th`\n  padding: 12px 16px;\n  text-align: left;\n  font-weight: 600;\n  font-size: ${AppTextStyles.label1.fontSize};\n  color: ${AppColors.onSurface};\n`;\n\nconst TableCell = styled.td`\n  padding: 12px 16px;\n  font-size: ${AppTextStyles.body2.fontSize};\n`;\n\nconst Tag = styled.span`\n  display: inline-block;\n  padding: 4px 8px;\n  background: ${AppColors.primary}10;\n  color: ${AppColors.primary};\n  border-radius: 12px;\n  font-size: 12px;\n  margin-right: 4px;\n`;\n\nconst ActionButton = styled.button`\n  padding: 6px 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 6px;\n  background: ${AppColors.surface};\n  color: ${AppColors.primary};\n  font-size: ${AppTextStyles.label2.fontSize};\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    background: ${AppColors.primary}10;\n  }\n`;\n\nconst EmptyState = styled.div`\n  padding: 60px 20px;\n  text-align: center;\n  color: ${AppColors.onInput1};\n`;\n\ninterface Member {\n  id: string;\n  name: string;\n  phone: string;\n  tags: string[];\n  coach: string;\n  points: number;\n  remainingSessions: number;\n  lastVisit: string;\n  status: 'active' | 'inactive' | 'dormant';\n}\n\nconst DUMMY_MEMBERS: Member[] = [\n  {\n    id: \"LV0001\",\n    name: \"김라비\",\n    phone: \"010-1234-5678\",\n    tags: [\"WBM\", \"릴렉싱\"],\n    coach: \"한수민\",\n    points: 120000,\n    remainingSessions: 8,\n    lastVisit: \"2025-09-07\",\n    status: \"active\"\n  },\n  {\n    id: \"LV0002\",\n    name: \"박봄\",\n    phone: \"010-2345-6789\",\n    tags: [\"릴렉싱\"],\n    coach: \"임정현\",\n    points: 40000,\n    remainingSessions: 2,\n    lastVisit: \"2025-09-09\",\n    status: \"active\"\n  },\n  {\n    id: \"LV0003\",\n    name: \"최다움\",\n    phone: \"010-3456-7890\",\n    tags: [\"WBM\"],\n    coach: \"민웅희\",\n    points: 0,\n    remainingSessions: 0,\n    lastVisit: \"2025-08-28\",\n    status: \"dormant\"\n  },\n  {\n    id: \"LV0004\",\n    name: \"이지유\",\n    phone: \"010-4567-8901\",\n    tags: [\"WBM\", \"VIP\"],\n    coach: \"한수민\",\n    points: 320000,\n    remainingSessions: 14,\n    lastVisit: \"2025-09-10\",\n    status: \"active\"\n  },\n];\n\nconst MemberSearch: React.FC = () => {\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [filteredMembers, setFilteredMembers] = useState<Member[]>(DUMMY_MEMBERS);\n  const [showFilters, setShowFilters] = useState<boolean>(false);\n  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n\n  const handleSearch = () => {\n    let filtered = DUMMY_MEMBERS;\n    \n    // 텍스트 검색\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase().trim();\n      filtered = filtered.filter(member =>\n        member.id.toLowerCase().includes(query) ||\n        member.name.toLowerCase().includes(query) ||\n        member.phone.includes(query) ||\n        member.coach.toLowerCase().includes(query)\n      );\n    }\n    \n    // 필터 적용\n    if (activeFilters.length > 0) {\n      filtered = filtered.filter(member => {\n        return activeFilters.some(filter => {\n          switch (filter) {\n            case 'WBM':\n              return member.tags.includes('WBM');\n            case '릴렉싱':\n              return member.tags.includes('릴렉싱');\n            case 'VIP':\n              return member.tags.includes('VIP');\n            case '휴면':\n              return member.status === 'dormant';\n            case '활성':\n              return member.status === 'active';\n            default:\n              return true;\n          }\n        });\n      });\n    }\n    \n    setFilteredMembers(filtered);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const toggleFilter = (filter: string) => {\n    setActiveFilters(prev => \n      prev.includes(filter) \n        ? prev.filter(f => f !== filter)\n        : [...prev, filter]\n    );\n  };\n\n  const handleMemberAction = (memberId: string, action: string) => {\n    alert(`회원 ${memberId}에 대한 ${action} 작업을 수행합니다.`);\n  };\n\n  const clearFilters = () => {\n    setActiveFilters([]);\n    setSearchQuery('');\n    setFilteredMembers(DUMMY_MEMBERS);\n  };\n\n  const filterOptions = ['WBM', '릴렉싱', 'VIP', '활성', '휴면'];\n\n  return (\n    <CMSLayout currentPath=\"/cms/member/search\">\n      <PageContainer>\n        <SearchSection>\n          <SearchRow>\n            <SearchInput\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"회원명, ID, 전화번호, 코치명으로 검색...\"\n            />\n            <Button onClick={handleSearch}>검색</Button>\n            <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n              필터\n            </Button>\n            {(activeFilters.length > 0 || searchQuery) && (\n              <Button variant=\"secondary\" onClick={clearFilters}>\n                초기화\n              </Button>\n            )}\n          </SearchRow>\n          \n          <FilterRow $visible={showFilters}>\n            <FilterLabel>필터:</FilterLabel>\n            {filterOptions.map(filter => (\n              <FilterChip\n                key={filter}\n                $active={activeFilters.includes(filter)}\n                onClick={() => toggleFilter(filter)}\n              >\n                {filter}\n              </FilterChip>\n            ))}\n          </FilterRow>\n        </SearchSection>\n\n        <ResultsSection>\n          <ResultsHeader>\n            <ResultsTitle>검색 결과</ResultsTitle>\n            <ResultsCount>총 {filteredMembers.length}명</ResultsCount>\n          </ResultsHeader>\n\n          {filteredMembers.length > 0 ? (\n            <TableContainer>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHeaderCell>회원ID</TableHeaderCell>\n                    <TableHeaderCell>이름</TableHeaderCell>\n                    <TableHeaderCell>연락처</TableHeaderCell>\n                    <TableHeaderCell>태그</TableHeaderCell>\n                    <TableHeaderCell>담당코치</TableHeaderCell>\n                    <TableHeaderCell>포인트</TableHeaderCell>\n                    <TableHeaderCell>잔여세션</TableHeaderCell>\n                    <TableHeaderCell>최근내원</TableHeaderCell>\n                    <TableHeaderCell>상태</TableHeaderCell>\n                    <TableHeaderCell>액션</TableHeaderCell>\n                  </TableRow>\n                </TableHeader>\n                <tbody>\n                  {filteredMembers.map(member => (\n                    <TableRow key={member.id}>\n                      <TableCell>{member.id}</TableCell>\n                      <TableCell>{member.name}</TableCell>\n                      <TableCell>{member.phone}</TableCell>\n                      <TableCell>\n                        {member.tags.map(tag => (\n                          <Tag key={tag}>{tag}</Tag>\n                        ))}\n                      </TableCell>\n                      <TableCell>{member.coach}</TableCell>\n                      <TableCell>{member.points.toLocaleString()}p</TableCell>\n                      <TableCell>{member.remainingSessions}회</TableCell>\n                      <TableCell>{member.lastVisit}</TableCell>\n                      <TableCell>\n                        <Tag style={{ \n                          backgroundColor: member.status === 'active' ? '#e8f5e8' : '#ffebee',\n                          color: member.status === 'active' ? '#2e7d32' : '#c62828'\n                        }}>\n                          {member.status === 'active' ? '활성' : '휴면'}\n                        </Tag>\n                      </TableCell>\n                      <TableCell>\n                        <ActionButton onClick={() => handleMemberAction(member.id, '상세보기')}>\n                          상세보기\n                        </ActionButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </tbody>\n              </Table>\n            </TableContainer>\n          ) : (\n            <EmptyState>\n              <p>검색 결과가 없습니다.</p>\n              <p>다른 검색어를 시도해보세요.</p>\n            </EmptyState>\n          )}\n        </ResultsSection>\n      </PageContainer>\n    </CMSLayout>\n  );\n};\n\nexport default MemberSearch;\n"
        }
    ]
}