{
    "sourceFile": "src/pages/CMS/Member/BasicInfoStep.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1760248001088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760248357553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,22 @@\n import React from 'react';\n import { StepContent, StepTitle, FormGrid, FormField, Label, Input, Select } from './StyledComponents';\n-import { BasicInfo, StepProps } from './types';\n+import { BasicInfo, StepProps, AddressInfo } from './types';\n+import DaumAddressSearch from '../../../components/DaumAddressSearch';\n \n const BasicInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n   const handleInputChange = (field: keyof BasicInfo, value: string) => {\n     onUpdate({\n       basicInfo: { ...formData.basicInfo, [field]: value }\n     });\n   };\n \n+  const handleAddressSelect = (addressInfo: AddressInfo) => {\n+    onUpdate({\n+      basicInfo: { ...formData.basicInfo, addressInfo }\n+    });\n+  };\n+\n   return (\n     <StepContent>\n       <StepTitle>기본정보</StepTitle>\n       <FormGrid>\n@@ -66,12 +73,12 @@\n         </FormField>\n \n         <FormField $fullWidth>\n           <Label>주소</Label>\n-          <Input\n-            value={formData.basicInfo.address}\n-            onChange={(e) => handleInputChange('address', e.target.value)}\n-            placeholder=\"서울시 강남구...\"\n+          <DaumAddressSearch\n+            onAddressSelect={handleAddressSelect}\n+            placeholder=\"주소를 검색하세요\"\n+            value={formData.basicInfo.addressInfo.address}\n           />\n         </FormField>\n       </FormGrid>\n     </StepContent>\n"
                },
                {
                    "date": 1760248513902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n         <FormField $fullWidth>\n           <Label>주소</Label>\n           <DaumAddressSearch\n             onAddressSelect={handleAddressSelect}\n-            placeholder=\"주소를 검색하세요\"\n+            placeholder=\"클릭하여 주소를 검색하세요\"\n             value={formData.basicInfo.addressInfo.address}\n           />\n         </FormField>\n       </FormGrid>\n"
                },
                {
                    "date": 1760248690811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,54 @@\n-import React from 'react';\n+import React, { useState } from 'react';\n import { StepContent, StepTitle, FormGrid, FormField, Label, Input, Select } from './StyledComponents';\n import { BasicInfo, StepProps, AddressInfo } from './types';\n import DaumAddressSearch from '../../../components/DaumAddressSearch';\n \n const BasicInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n+  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n+\n+  // 전화번호 자동 포맷팅 함수\n+  const formatPhoneNumber = (inputValue: string): string => {\n+    // 숫자만 추출\n+    const numbers = inputValue.replace(/[^\\d]/g, '');\n+    \n+    // 11자리를 초과하면 잘라내기\n+    const truncated = numbers.slice(0, 11);\n+    \n+    // 자동 하이픈 추가\n+    if (truncated.length <= 3) {\n+      return truncated;\n+    } else if (truncated.length <= 7) {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3)}`;\n+    } else {\n+      return `${truncated.slice(0, 3)}-${truncated.slice(3, 7)}-${truncated.slice(7)}`;\n+    }\n+  };\n+\n   const handleInputChange = (field: keyof BasicInfo, value: string) => {\n+    let processedValue = value;\n+\n+    // 전화번호 필드인 경우 자동 포맷팅 적용\n+    if (field === 'phone') {\n+      processedValue = formatPhoneNumber(value);\n+      \n+      // 전화번호 validation\n+      if (processedValue && !/^010-\\d{4}-\\d{4}$/.test(processedValue)) {\n+        setErrors(prev => ({ \n+          ...prev, \n+          phone: '올바른 전화번호 형식이 아닙니다. (010-1234-5678)' \n+        }));\n+      } else {\n+        setErrors(prev => {\n+          const newErrors = { ...prev };\n+          delete newErrors.phone;\n+          return newErrors;\n+        });\n+      }\n+    }\n+\n     onUpdate({\n-      basicInfo: { ...formData.basicInfo, [field]: value }\n+      basicInfo: { ...formData.basicInfo, [field]: processedValue }\n     });\n   };\n \n   const handleAddressSelect = (addressInfo: AddressInfo) => {\n@@ -33,13 +74,17 @@\n         <FormField>\n           <Label>연락처 *</Label>\n           <Input\n             type=\"tel\"\n+            inputMode=\"numeric\"\n             value={formData.basicInfo.phone}\n             onChange={(e) => handleInputChange('phone', e.target.value)}\n-            placeholder=\"010-0000-0000\"\n+            placeholder=\"010-1234-5678\"\n+            maxLength={13}\n+            autoComplete=\"tel\"\n             required\n           />\n+          {errors.phone && <div style={{ color: '#d32f2f', fontSize: '12px', marginTop: '4px' }}>{errors.phone}</div>}\n         </FormField>\n \n         <FormField>\n           <Label>이메일</Label>\n"
                },
                {
                    "date": 1760248889213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import React, { useState } from 'react';\n import { StepContent, StepTitle, FormGrid, FormField, Label, Input, Select } from './StyledComponents';\n import { BasicInfo, StepProps, AddressInfo } from './types';\n import DaumAddressSearch from '../../../components/DaumAddressSearch';\n+import CustomDateInput from '../../../components/CustomDateInput';\n \n const BasicInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n   const [errors, setErrors] = useState<{ [key: string]: string }>({});\n \n@@ -45,8 +46,24 @@\n         });\n       }\n     }\n \n+    // 이메일 필드인 경우 validation\n+    if (field === 'email') {\n+      if (processedValue && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(processedValue)) {\n+        setErrors(prev => ({ \n+          ...prev, \n+          email: '올바른 이메일 형식이 아닙니다.' \n+        }));\n+      } else {\n+        setErrors(prev => {\n+          const newErrors = { ...prev };\n+          delete newErrors.email;\n+          return newErrors;\n+        });\n+      }\n+    }\n+\n     onUpdate({\n       basicInfo: { ...formData.basicInfo, [field]: processedValue }\n     });\n   };\n@@ -93,17 +110,20 @@\n             value={formData.basicInfo.email}\n             onChange={(e) => handleInputChange('email', e.target.value)}\n             placeholder=\"example@email.com\"\n           />\n+          {errors.email && <div style={{ color: '#d32f2f', fontSize: '12px', marginTop: '4px' }}>{errors.email}</div>}\n         </FormField>\n \n         <FormField>\n           <Label>생년월일</Label>\n-          <Input\n-            type=\"date\"\n+          <CustomDateInput\n             value={formData.basicInfo.birth}\n-            onChange={(e) => handleInputChange('birth', e.target.value)}\n+            onChange={(value: string) => handleInputChange('birth', value)}\n+            placeholder=\"생년월일을 선택하세요\"\n+            error={!!errors.birth}\n           />\n+          {errors.birth && <div style={{ color: '#d32f2f', fontSize: '12px', marginTop: '4px' }}>{errors.birth}</div>}\n         </FormField>\n \n         <FormField>\n           <Label>성별</Label>\n"
                },
                {
                    "date": 1760249092104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,21 @@\n import React, { useState } from 'react';\n-import { StepContent, StepTitle, FormGrid, FormField, Label, Input, Select } from './StyledComponents';\n+import { StepContent, StepTitle, FormGrid, FormField, Label, Input } from './StyledComponents';\n import { BasicInfo, StepProps, AddressInfo } from './types';\n import DaumAddressSearch from '../../../components/DaumAddressSearch';\n import CustomDateInput from '../../../components/CustomDateInput';\n+import CustomDropdown from '../../../components/CustomDropdown';\n \n const BasicInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n   const [errors, setErrors] = useState<{ [key: string]: string }>({});\n \n+  // 성별 옵션\n+  const getGenderOptions = () => [\n+    { value: '', label: '선택하세요' },\n+    { value: 'male', label: '남성' },\n+    { value: 'female', label: '여성' }\n+  ];\n+\n   // 전화번호 자동 포맷팅 함수\n   const formatPhoneNumber = (inputValue: string): string => {\n     // 숫자만 추출\n     const numbers = inputValue.replace(/[^\\d]/g, '');\n@@ -126,16 +134,16 @@\n         </FormField>\n \n         <FormField>\n           <Label>성별</Label>\n-          <Select\n+          <CustomDropdown\n             value={formData.basicInfo.gender}\n-            onChange={(e) => handleInputChange('gender', e.target.value)}\n-          >\n-            <option value=\"\">선택하세요</option>\n-            <option value=\"male\">남성</option>\n-            <option value=\"female\">여성</option>\n-          </Select>\n+            onChange={(value: string) => handleInputChange('gender', value)}\n+            options={getGenderOptions()}\n+            placeholder=\"성별을 선택하세요\"\n+            error={!!errors.gender}\n+          />\n+          {errors.gender && <div style={{ color: '#d32f2f', fontSize: '12px', marginTop: '4px' }}>{errors.gender}</div>}\n         </FormField>\n \n         <FormField $fullWidth>\n           <Label>주소</Label>\n"
                },
                {
                    "date": 1760249184167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,32 +122,34 @@\n           {errors.email && <div style={{ color: '#d32f2f', fontSize: '12px', marginTop: '4px' }}>{errors.email}</div>}\n         </FormField>\n \n         <FormField>\n-          <Label>생년월일</Label>\n+          <Label>생년월일 *</Label>\n           <CustomDateInput\n             value={formData.basicInfo.birth}\n             onChange={(value: string) => handleInputChange('birth', value)}\n             placeholder=\"생년월일을 선택하세요\"\n             error={!!errors.birth}\n+            required\n           />\n           {errors.birth && <div style={{ color: '#d32f2f', fontSize: '12px', marginTop: '4px' }}>{errors.birth}</div>}\n         </FormField>\n \n         <FormField>\n-          <Label>성별</Label>\n+          <Label>성별 *</Label>\n           <CustomDropdown\n             value={formData.basicInfo.gender}\n             onChange={(value: string) => handleInputChange('gender', value)}\n             options={getGenderOptions()}\n             placeholder=\"성별을 선택하세요\"\n             error={!!errors.gender}\n+            required\n           />\n           {errors.gender && <div style={{ color: '#d32f2f', fontSize: '12px', marginTop: '4px' }}>{errors.gender}</div>}\n         </FormField>\n \n         <FormField $fullWidth>\n-          <Label>주소</Label>\n+          <Label>주소 *</Label>\n           <DaumAddressSearch\n             onAddressSelect={handleAddressSelect}\n             placeholder=\"클릭하여 주소를 검색하세요\"\n             value={formData.basicInfo.addressInfo.address}\n"
                },
                {
                    "date": 1760249277323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState } from 'react';\n+import React, { useState, useEffect } from 'react';\n import { StepContent, StepTitle, FormGrid, FormField, Label, Input } from './StyledComponents';\n import { BasicInfo, StepProps, AddressInfo } from './types';\n import DaumAddressSearch from '../../../components/DaumAddressSearch';\n import CustomDateInput from '../../../components/CustomDateInput';\n@@ -7,13 +7,21 @@\n \n const BasicInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n   const [errors, setErrors] = useState<{ [key: string]: string }>({});\n \n+  // 컴포넌트 마운트 시 성별 기본값 설정\n+  useEffect(() => {\n+    if (!formData.basicInfo.gender) {\n+      onUpdate({\n+        basicInfo: { ...formData.basicInfo, gender: 'female' }\n+      });\n+    }\n+  }, [formData.basicInfo, onUpdate]);\n+\n   // 성별 옵션\n   const getGenderOptions = () => [\n-    { value: '', label: '선택하세요' },\n-    { value: 'male', label: '남성' },\n-    { value: 'female', label: '여성' }\n+    { value: 'female', label: '여성' },\n+    { value: 'male', label: '남성' }\n   ];\n \n   // 전화번호 자동 포맷팅 함수\n   const formatPhoneNumber = (inputValue: string): string => {\n@@ -56,8 +64,19 @@\n     }\n \n     // 이메일 필드인 경우 validation\n     if (field === 'email') {\n+      // 한글 입력 방지\n+      const koreanPattern = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;\n+      if (processedValue && koreanPattern.test(processedValue)) {\n+        setErrors(prev => ({ \n+          ...prev, \n+          email: '이메일에는 한글을 입력할 수 없습니다.' \n+        }));\n+        return; // 한글이 포함된 경우 업데이트하지 않음\n+      }\n+      \n+      // 이메일 형식 validation\n       if (processedValue && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(processedValue)) {\n         setErrors(prev => ({ \n           ...prev, \n           email: '올바른 이메일 형식이 아닙니다.' \n@@ -136,12 +155,11 @@\n \n         <FormField>\n           <Label>성별 *</Label>\n           <CustomDropdown\n-            value={formData.basicInfo.gender}\n+            value={formData.basicInfo.gender || 'female'}\n             onChange={(value: string) => handleInputChange('gender', value)}\n             options={getGenderOptions()}\n-            placeholder=\"성별을 선택하세요\"\n             error={!!errors.gender}\n             required\n           />\n           {errors.gender && <div style={{ color: '#d32f2f', fontSize: '12px', marginTop: '4px' }}>{errors.gender}</div>}\n"
                },
                {
                    "date": 1760249521832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,8 +148,10 @@\n             onChange={(value: string) => handleInputChange('birth', value)}\n             placeholder=\"생년월일을 선택하세요\"\n             error={!!errors.birth}\n             required\n+            max={new Date().toISOString().split('T')[0]}\n+            defaultViewDate=\"1970-01-01\"\n           />\n           {errors.birth && <div style={{ color: '#d32f2f', fontSize: '12px', marginTop: '4px' }}>{errors.birth}</div>}\n         </FormField>\n \n"
                },
                {
                    "date": 1760257390389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,36 @@\n-import React, { useState, useEffect } from 'react';\n+import React, { useState, useEffect, useRef } from 'react';\n import { StepContent, StepTitle, FormGrid, FormField, Label, Input } from './StyledComponents';\n import { BasicInfo, StepProps, AddressInfo } from './types';\n import DaumAddressSearch from '../../../components/DaumAddressSearch';\n import CustomDateInput from '../../../components/CustomDateInput';\n import CustomDropdown from '../../../components/CustomDropdown';\n \n-const BasicInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n+const BasicInfoStep: React.FC<StepProps> = ({ formData, onUpdate, onErrorsChange }) => {\n   const [errors, setErrors] = useState<{ [key: string]: string }>({});\n+  const prevErrorsRef = useRef<{ [key: string]: string }>({});\n \n+  // 에러 상태가 변경될 때마다 상위 컴포넌트에 전달 (이전 값과 비교해서 변경된 경우에만)\n+  useEffect(() => {\n+    const errorsString = JSON.stringify(errors);\n+    const prevErrorsString = JSON.stringify(prevErrorsRef.current);\n+    \n+    if (errorsString !== prevErrorsString) {\n+      onErrorsChange?.(errors);\n+      prevErrorsRef.current = errors;\n+    }\n+  }, [errors, onErrorsChange]);\n+\n+  // 초기 필수 필드 체크\n+  useEffect(() => {\n+    const newErrors: { [key: string]: string } = {};\n+    \n+    // 페이지 로드 시 빈 필드들에 대해 에러 표시하지 않음 (사용자가 입력을 시작한 후에만 검증)\n+    // 대신 validateCurrentStep에서 필수 필드 체크를 수행\n+    \n+    setErrors(newErrors);\n+  }, []); // 초기 마운트시에만 실행\n+\n   // 컴포넌트 마운트 시 성별 기본값 설정\n   useEffect(() => {\n     if (!formData.basicInfo.gender) {\n       onUpdate({\n@@ -42,61 +64,81 @@\n   };\n \n   const handleInputChange = (field: keyof BasicInfo, value: string) => {\n     let processedValue = value;\n+    const newErrors = { ...errors };\n \n     // 전화번호 필드인 경우 자동 포맷팅 적용\n     if (field === 'phone') {\n       processedValue = formatPhoneNumber(value);\n       \n       // 전화번호 validation\n       if (processedValue && !/^010-\\d{4}-\\d{4}$/.test(processedValue)) {\n-        setErrors(prev => ({ \n-          ...prev, \n-          phone: '올바른 전화번호 형식이 아닙니다. (010-1234-5678)' \n-        }));\n+        newErrors.phone = '올바른 전화번호 형식이 아닙니다. (010-1234-5678)';\n       } else {\n-        setErrors(prev => {\n-          const newErrors = { ...prev };\n-          delete newErrors.phone;\n-          return newErrors;\n-        });\n+        delete newErrors.phone;\n       }\n     }\n \n     // 이메일 필드인 경우 validation\n     if (field === 'email') {\n       // 한글 입력 방지\n       const koreanPattern = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;\n       if (processedValue && koreanPattern.test(processedValue)) {\n-        setErrors(prev => ({ \n-          ...prev, \n-          email: '이메일에는 한글을 입력할 수 없습니다.' \n-        }));\n+        newErrors.email = '이메일에는 한글을 입력할 수 없습니다.';\n         return; // 한글이 포함된 경우 업데이트하지 않음\n       }\n       \n       // 이메일 형식 validation\n       if (processedValue && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(processedValue)) {\n-        setErrors(prev => ({ \n-          ...prev, \n-          email: '올바른 이메일 형식이 아닙니다.' \n-        }));\n+        newErrors.email = '올바른 이메일 형식이 아닙니다.';\n       } else {\n-        setErrors(prev => {\n-          const newErrors = { ...prev };\n-          delete newErrors.email;\n-          return newErrors;\n-        });\n+        delete newErrors.email;\n       }\n     }\n \n+    // 이름 필드 validation\n+    if (field === 'name') {\n+      if (!processedValue.trim()) {\n+        newErrors.name = '이름을 입력해주세요.';\n+      } else {\n+        delete newErrors.name;\n+      }\n+    }\n+\n+    // 생년월일 필드 validation\n+    if (field === 'birth') {\n+      if (!processedValue.trim()) {\n+        newErrors.birth = '생년월일을 선택해주세요.';\n+      } else {\n+        delete newErrors.birth;\n+      }\n+    }\n+\n+    // 성별 필드 validation\n+    if (field === 'gender') {\n+      if (!processedValue.trim()) {\n+        newErrors.gender = '성별을 선택해주세요.';\n+      } else {\n+        delete newErrors.gender;\n+      }\n+    }\n+\n+    setErrors(newErrors);\n+\n     onUpdate({\n       basicInfo: { ...formData.basicInfo, [field]: processedValue }\n     });\n   };\n \n   const handleAddressSelect = (addressInfo: AddressInfo) => {\n+    // 주소가 선택되면 주소 관련 에러 제거\n+    setErrors(prev => {\n+      const newErrors = { ...prev };\n+      delete newErrors.address;\n+      return newErrors;\n+    });\n+    \n     onUpdate({\n       basicInfo: { ...formData.basicInfo, addressInfo }\n     });\n   };\n@@ -112,8 +154,9 @@\n             onChange={(e) => handleInputChange('name', e.target.value)}\n             placeholder=\"홍길동\"\n             required\n           />\n+          {errors.name && <div style={{ color: '#d32f2f', fontSize: '12px', marginTop: '4px' }}>{errors.name}</div>}\n         </FormField>\n \n         <FormField>\n           <Label>연락처 *</Label>\n@@ -173,8 +216,9 @@\n             onAddressSelect={handleAddressSelect}\n             placeholder=\"클릭하여 주소를 검색하세요\"\n             value={formData.basicInfo.addressInfo.address}\n           />\n+          {errors.address && <div style={{ color: '#d32f2f', fontSize: '12px', marginTop: '4px' }}>{errors.address}</div>}\n         </FormField>\n       </FormGrid>\n     </StepContent>\n   );\n"
                }
            ],
            "date": 1760248001088,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport { StepContent, StepTitle, FormGrid, FormField, Label, Input, Select } from './StyledComponents';\nimport { BasicInfo, StepProps } from './types';\n\nconst BasicInfoStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n  const handleInputChange = (field: keyof BasicInfo, value: string) => {\n    onUpdate({\n      basicInfo: { ...formData.basicInfo, [field]: value }\n    });\n  };\n\n  return (\n    <StepContent>\n      <StepTitle>기본정보</StepTitle>\n      <FormGrid>\n        <FormField>\n          <Label>이름 *</Label>\n          <Input\n            value={formData.basicInfo.name}\n            onChange={(e) => handleInputChange('name', e.target.value)}\n            placeholder=\"홍길동\"\n            required\n          />\n        </FormField>\n\n        <FormField>\n          <Label>연락처 *</Label>\n          <Input\n            type=\"tel\"\n            value={formData.basicInfo.phone}\n            onChange={(e) => handleInputChange('phone', e.target.value)}\n            placeholder=\"010-0000-0000\"\n            required\n          />\n        </FormField>\n\n        <FormField>\n          <Label>이메일</Label>\n          <Input\n            type=\"email\"\n            value={formData.basicInfo.email}\n            onChange={(e) => handleInputChange('email', e.target.value)}\n            placeholder=\"example@email.com\"\n          />\n        </FormField>\n\n        <FormField>\n          <Label>생년월일</Label>\n          <Input\n            type=\"date\"\n            value={formData.basicInfo.birth}\n            onChange={(e) => handleInputChange('birth', e.target.value)}\n          />\n        </FormField>\n\n        <FormField>\n          <Label>성별</Label>\n          <Select\n            value={formData.basicInfo.gender}\n            onChange={(e) => handleInputChange('gender', e.target.value)}\n          >\n            <option value=\"\">선택하세요</option>\n            <option value=\"male\">남성</option>\n            <option value=\"female\">여성</option>\n          </Select>\n        </FormField>\n\n        <FormField $fullWidth>\n          <Label>주소</Label>\n          <Input\n            value={formData.basicInfo.address}\n            onChange={(e) => handleInputChange('address', e.target.value)}\n            placeholder=\"서울시 강남구...\"\n          />\n        </FormField>\n      </FormGrid>\n    </StepContent>\n  );\n};\n\nexport default BasicInfoStep;\n"
        }
    ]
}