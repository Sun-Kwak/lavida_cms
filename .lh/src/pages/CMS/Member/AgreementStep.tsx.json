{
    "sourceFile": "src/pages/CMS/Member/AgreementStep.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1760248001088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760251550316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React from 'react';\n+import React, { useState, useEffect, useMemo } from 'react';\n import { \n   StepContent, \n   StepTitle, \n   AgreementSection,\n@@ -14,10 +14,90 @@\n   SignatureBox,\n   SignatureArea\n } from './StyledComponents';\n import { StepProps } from './types';\n+import { dbManager } from '../../../utils/indexedDB';\n+import CustomTiptapEditor from '../../../components/Editor/CustomTiptapEditor';\n \n const AgreementStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n+  const [loading, setLoading] = useState(true);\n+  const [isInitialized, setIsInitialized] = useState(false);\n+\n+  // 약관 타입별 매핑\n+  const agreementTypeMap = useMemo(() => ({\n+    'terms': 'member_terms',\n+    'privacy': 'privacy_policy', \n+    'service': 'terms_of_service',\n+    'marketing': 'marketing_consent'\n+  } as { [key: string]: string }), []);\n+\n+  // 약관 문서 로드 및 초기화\n+  useEffect(() => {\n+    const loadTermsDocuments = async () => {\n+      if (isInitialized) return; // 이미 초기화되었으면 중복 실행 방지\n+      \n+      setLoading(true);\n+      try {\n+        const documents = await dbManager.getAllTermsDocuments();\n+        // 활성 문서만 필터링\n+        const activeDocuments = documents.filter(doc => doc.isActive);\n+        \n+        // DB 약관으로 agreements 생성\n+        const dbAgreements = activeDocuments.map(doc => {\n+          return {\n+            id: Object.keys(agreementTypeMap).find(key => agreementTypeMap[key] === doc.type) || doc.type,\n+            title: doc.title,\n+            content: doc.content,\n+            required: ['privacy_policy', 'terms_of_service', 'member_terms'].includes(doc.type),\n+            agreed: false // 초기값은 항상 false\n+          };\n+        });\n+\n+        // 필수 약관이 없는 경우 기본 약관 추가\n+        const requiredTypes = ['privacy_policy', 'terms_of_service', 'member_terms'];\n+        requiredTypes.forEach(type => {\n+          if (!activeDocuments.find(doc => doc.type === type)) {\n+            const defaultTitle = {\n+              'privacy_policy': '개인정보 처리방침',\n+              'terms_of_service': '서비스 이용약관', \n+              'member_terms': '회원약관'\n+            }[type] || '';\n+            \n+            const agreementId = Object.keys(agreementTypeMap).find(key => agreementTypeMap[key] === type);\n+            if (agreementId) {\n+              dbAgreements.push({\n+                id: agreementId,\n+                title: defaultTitle,\n+                content: '<p>약관 내용이 등록되지 않았습니다. 관리자에게 문의하세요.</p>',\n+                required: true,\n+                agreed: false\n+              });\n+            }\n+          }\n+        });\n+\n+        // 약관이 비어있을 때만 업데이트\n+        if (formData.agreementInfo.agreements.length === 0) {\n+          onUpdate({\n+            agreementInfo: {\n+              ...formData.agreementInfo,\n+              agreements: dbAgreements\n+            }\n+          });\n+        }\n+        \n+        setIsInitialized(true);\n+      } catch (error) {\n+        console.error('약관 문서 로드 실패:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    loadTermsDocuments();\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\n+  }, []); // 컴포넌트 마운트 시에만 실행\n+\n   const handleAgreementChange = (agreementId: string, agreed: boolean) => {\n     const updatedAgreements = formData.agreementInfo.agreements.map(agreement =>\n       agreement.id === agreementId ? { ...agreement, agreed } : agreement\n     );\n@@ -42,98 +122,55 @@\n   return (\n     <StepContent>\n       <StepTitle>동의 및 서명</StepTitle>\n       \n-      <AgreementSection>\n-        {formData.agreementInfo.agreements.map(agreement => (\n-          <AgreementItem key={agreement.id}>\n-            <AgreementHeader>\n-              <AgreementTitle>\n-                {agreement.title} {agreement.required && '*'}\n-              </AgreementTitle>\n-              <CheckboxLabel>\n-                <Checkbox\n-                  checked={agreement.agreed}\n-                  onChange={(e) => handleAgreementChange(agreement.id, e.target.checked)}\n-                />\n-                동의합니다\n-              </CheckboxLabel>\n-            </AgreementHeader>\n-            <AgreementContent>\n-              {agreement.content}\n-              <br /><br />\n-              {/* 실제 약관 내용 예시 */}\n-              {agreement.id === 'terms' && (\n-                <>\n-                  제1조 (목적)<br />\n-                  본 약관은 라비다 피트니스 센터(이하 \"센터\")가 제공하는 서비스의 이용조건 및 절차, 회원과 센터의 권리, 의무, 책임사항을 규정함을 목적으로 합니다.<br /><br />\n-                  \n-                  제2조 (정의)<br />\n-                  1. \"회원\"이라 함은 센터와 서비스 이용계약을 체결한 자를 말합니다.<br />\n-                  2. \"서비스\"라 함은 센터가 제공하는 모든 운동시설 및 부대시설 이용 서비스를 말합니다.<br /><br />\n-                  \n-                  제3조 (약관의 게시와 개정)<br />\n-                  센터는 본 약관의 내용을 회원이 쉽게 알 수 있도록 센터 내에 게시합니다.\n-                </>\n-              )}\n-              {agreement.id === 'privacy' && (\n-                <>\n-                  라비다 피트니스 센터는 개인정보보호법에 따라 이용자의 개인정보 보호 및 권익을 보호하고자 합니다.<br /><br />\n-                  \n-                  1. 개인정보의 수집 및 이용목적<br />\n-                  - 회원 가입 및 관리<br />\n-                  - 서비스 제공에 관한 계약 이행<br />\n-                  - 요금 결제 및 정산<br /><br />\n-                  \n-                  2. 수집하는 개인정보 항목<br />\n-                  - 필수항목: 이름, 연락처, 생년월일<br />\n-                  - 선택항목: 이메일, 주소<br /><br />\n-                  \n-                  3. 개인정보의 보유 및 이용기간<br />\n-                  회원 탈퇴 시까지 보유하며, 관계법령에 따라 일정기간 보관할 수 있습니다.\n-                </>\n-              )}\n-              {agreement.id === 'service' && (\n-                <>\n-                  서비스 이용약관<br /><br />\n-                  \n-                  1. 시설 이용시간<br />\n-                  - 평일: 06:00 ~ 23:00<br />\n-                  - 주말: 08:00 ~ 22:00<br />\n-                  - 공휴일: 09:00 ~ 21:00<br /><br />\n-                  \n-                  2. 이용 수칙<br />\n-                  - 운동복, 운동화 착용 필수<br />\n-                  - 타월 지참 또는 대여 이용<br />\n-                  - 기구 사용 후 정리정돈<br /><br />\n-                  \n-                  3. 금지사항<br />\n-                  - 음주 후 시설 이용<br />\n-                  - 소음 발생 행위<br />\n-                  - 다른 회원에게 피해를 주는 행위\n-                </>\n-              )}\n-              {agreement.id === 'marketing' && (\n-                <>\n-                  마케팅 활용 동의<br /><br />\n-                  \n-                  1. 동의 목적<br />\n-                  - 신규 서비스 및 이벤트 정보 제공<br />\n-                  - 맞춤형 운동 프로그램 추천<br />\n-                  - 센터 소식 및 공지사항 전달<br /><br />\n-                  \n-                  2. 정보 전달 방법<br />\n-                  - SMS, 이메일, 앱 푸시 알림<br />\n-                  - 전화 상담<br /><br />\n-                  \n-                  본 동의는 선택사항이며, 동의하지 않으셔도 서비스 이용에는 제한이 없습니다.<br />\n-                  언제든지 동의 철회가 가능합니다.\n-                </>\n-              )}\n-            </AgreementContent>\n-          </AgreementItem>\n-        ))}\n-      </AgreementSection>\n+      {loading ? (\n+        <div style={{ \n+          padding: '20px', \n+          textAlign: 'center',\n+          color: '#666'\n+        }}>\n+          약관을 불러오는 중...\n+        </div>\n+      ) : (\n+        <AgreementSection>\n+          {formData.agreementInfo.agreements.map(agreement => (\n+            <AgreementItem key={agreement.id}>\n+              <AgreementHeader>\n+                <AgreementTitle>\n+                  {agreement.title} {agreement.required && '*'}\n+                </AgreementTitle>\n+                <CheckboxLabel>\n+                  <Checkbox\n+                    checked={agreement.agreed}\n+                    onChange={(e) => handleAgreementChange(agreement.id, e.target.checked)}\n+                  />\n+                  동의합니다\n+                </CheckboxLabel>\n+              </AgreementHeader>\n+              <AgreementContent>\n+                <div style={{ \n+                  maxHeight: '300px', \n+                  overflow: 'auto',\n+                  border: '1px solid #e0e0e0',\n+                  borderRadius: '4px',\n+                  padding: '12px'\n+                }}>\n+                  <CustomTiptapEditor\n+                    content={agreement.content}\n+                    readOnly={true}\n+                    showMenuBar={false}\n+                    placeholder=\"\"\n+                    onChange={() => {}} // 읽기 전용이므로 빈 함수\n+                    height=\"auto\"\n+                    hideBorder={true}\n+                  />\n+                </div>\n+              </AgreementContent>\n+            </AgreementItem>\n+          ))}\n+        </AgreementSection>\n+      )}\n \n       <SignatureSection>\n         <h3>서명</h3>\n         <p>아래 서명란에 고객과 직원이 각각 서명해주세요.</p>\n"
                },
                {
                    "date": 1760251662893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,31 +41,33 @@\n         // 활성 문서만 필터링\n         const activeDocuments = documents.filter(doc => doc.isActive);\n         \n         // DB 약관으로 agreements 생성\n-        const dbAgreements = activeDocuments.map(doc => {\n-          return {\n-            id: Object.keys(agreementTypeMap).find(key => agreementTypeMap[key] === doc.type) || doc.type,\n-            title: doc.title,\n-            content: doc.content,\n-            required: ['privacy_policy', 'terms_of_service', 'member_terms'].includes(doc.type),\n-            agreed: false // 초기값은 항상 false\n-          };\n-        });\n+        const dbAgreements = activeDocuments\n+          .filter(doc => doc.type !== 'business_info') // 사업자정보 제외\n+          .map(doc => {\n+            return {\n+              id: Object.keys(agreementTypeMap).find(key => agreementTypeMap[key] === doc.type) || doc.type,\n+              title: doc.title,\n+              content: doc.content,\n+              required: ['privacy_policy', 'terms_of_service', 'member_terms'].includes(doc.type),\n+              agreed: false // 초기값은 항상 false\n+            };\n+          });\n \n         // 필수 약관이 없는 경우 기본 약관 추가\n-        const requiredTypes = ['privacy_policy', 'terms_of_service', 'member_terms'];\n+        const requiredTypes = ['member_terms', 'privacy_policy', 'terms_of_service']; // 회원약관을 맨 앞으로\n         requiredTypes.forEach(type => {\n           if (!activeDocuments.find(doc => doc.type === type)) {\n             const defaultTitle = {\n+              'member_terms': '회원 이용약관',\n               'privacy_policy': '개인정보 처리방침',\n-              'terms_of_service': '서비스 이용약관', \n-              'member_terms': '회원약관'\n+              'terms_of_service': '서비스 이용약관'\n             }[type] || '';\n             \n             const agreementId = Object.keys(agreementTypeMap).find(key => agreementTypeMap[key] === type);\n             if (agreementId) {\n-              dbAgreements.push({\n+              dbAgreements.unshift({ // unshift로 앞에 추가\n                 id: agreementId,\n                 title: defaultTitle,\n                 content: '<p>약관 내용이 등록되지 않았습니다. 관리자에게 문의하세요.</p>',\n                 required: true,\n@@ -74,8 +76,16 @@\n             }\n           }\n         });\n \n+        // 회원약관을 맨 앞으로 정렬\n+        dbAgreements.sort((a, b) => {\n+          const order = ['terms', 'privacy', 'service', 'marketing'];\n+          const aIndex = order.indexOf(a.id);\n+          const bIndex = order.indexOf(b.id);\n+          return (aIndex === -1 ? 999 : aIndex) - (bIndex === -1 ? 999 : bIndex);\n+        });\n+\n         // 약관이 비어있을 때만 업데이트\n         if (formData.agreementInfo.agreements.length === 0) {\n           onUpdate({\n             agreementInfo: {\n@@ -147,25 +157,17 @@\n                   동의합니다\n                 </CheckboxLabel>\n               </AgreementHeader>\n               <AgreementContent>\n-                <div style={{ \n-                  maxHeight: '300px', \n-                  overflow: 'auto',\n-                  border: '1px solid #e0e0e0',\n-                  borderRadius: '4px',\n-                  padding: '12px'\n-                }}>\n-                  <CustomTiptapEditor\n-                    content={agreement.content}\n-                    readOnly={true}\n-                    showMenuBar={false}\n-                    placeholder=\"\"\n-                    onChange={() => {}} // 읽기 전용이므로 빈 함수\n-                    height=\"auto\"\n-                    hideBorder={true}\n-                  />\n-                </div>\n+                <CustomTiptapEditor\n+                  content={agreement.content}\n+                  readOnly={true}\n+                  showMenuBar={false}\n+                  placeholder=\"\"\n+                  onChange={() => {}} // 읽기 전용이므로 빈 함수\n+                  height=\"auto\"\n+                  hideBorder={true}\n+                />\n               </AgreementContent>\n             </AgreementItem>\n           ))}\n         </AgreementSection>\n"
                },
                {
                    "date": 1760251740348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,17 +157,39 @@\n                   동의합니다\n                 </CheckboxLabel>\n               </AgreementHeader>\n               <AgreementContent>\n-                <CustomTiptapEditor\n-                  content={agreement.content}\n-                  readOnly={true}\n-                  showMenuBar={false}\n-                  placeholder=\"\"\n-                  onChange={() => {}} // 읽기 전용이므로 빈 함수\n-                  height=\"auto\"\n-                  hideBorder={true}\n-                />\n+                <div \n+                  className=\"agreement-editor-wrapper\"\n+                  style={{ \n+                    minHeight: 'auto',\n+                    height: 'auto'\n+                  }}\n+                >\n+                  <style>{`\n+                    .agreement-editor-wrapper .editor-container {\n+                      min-height: auto !important;\n+                      height: auto !important;\n+                    }\n+                    .agreement-editor-wrapper .tiptap-editor-content {\n+                      min-height: auto !important;\n+                      height: auto !important;\n+                    }\n+                    .agreement-editor-wrapper .ProseMirror {\n+                      min-height: auto !important;\n+                      height: auto !important;\n+                    }\n+                  `}</style>\n+                  <CustomTiptapEditor\n+                    content={agreement.content}\n+                    readOnly={true}\n+                    showMenuBar={false}\n+                    placeholder=\"\"\n+                    onChange={() => {}} // 읽기 전용이므로 빈 함수\n+                    height=\"auto\"\n+                    hideBorder={true}\n+                  />\n+                </div>\n               </AgreementContent>\n             </AgreementItem>\n           ))}\n         </AgreementSection>\n"
                },
                {
                    "date": 1760252033472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,10 @@\n   const agreementTypeMap = useMemo(() => ({\n     'terms': 'member_terms',\n     'privacy': 'privacy_policy', \n     'service': 'terms_of_service',\n-    'marketing': 'marketing_consent'\n+    'marketing': 'marketing_consent',\n+    'contract': 'contract' // 계약서 추가\n   } as { [key: string]: string }), []);\n \n   // 약관 문서 로드 및 초기화\n   useEffect(() => {\n@@ -36,38 +37,65 @@\n       if (isInitialized) return; // 이미 초기화되었으면 중복 실행 방지\n       \n       setLoading(true);\n       try {\n+        console.log('약관 로딩 시작...');\n         const documents = await dbManager.getAllTermsDocuments();\n+        console.log('DB에서 가져온 약관 수:', documents.length);\n+        console.log('모든 약관:', documents);\n+        \n         // 활성 문서만 필터링\n         const activeDocuments = documents.filter(doc => doc.isActive);\n+        console.log('활성 약관 수:', activeDocuments.length);\n         \n+        if (activeDocuments.length === 0) {\n+          console.log('활성 약관이 없음 - 기본 약관으로 처리');\n+        }\n+        \n         // DB 약관으로 agreements 생성\n-        const dbAgreements = activeDocuments\n-          .filter(doc => doc.type !== 'business_info') // 사업자정보 제외\n-          .map(doc => {\n-            return {\n-              id: Object.keys(agreementTypeMap).find(key => agreementTypeMap[key] === doc.type) || doc.type,\n-              title: doc.title,\n-              content: doc.content,\n-              required: ['privacy_policy', 'terms_of_service', 'member_terms'].includes(doc.type),\n-              agreed: false // 초기값은 항상 false\n-            };\n+        const dbAgreements: Array<{\n+          id: string;\n+          title: string;\n+          content: string;\n+          required: boolean;\n+          agreed: boolean;\n+        }> = [];\n+        \n+        // 먼저 DB에서 가져온 활성 약관들을 처리\n+        activeDocuments\n+          .filter(doc => doc.type !== 'business_info' && doc.type !== 'contract') // 사업자정보, 계약서 제외\n+          .forEach(doc => {\n+            const agreementId = Object.keys(agreementTypeMap).find(key => agreementTypeMap[key] === doc.type);\n+            console.log(`약관 처리: ${doc.type} (${doc.title}) -> ID: ${agreementId || doc.type}`);\n+            \n+            if (agreementId) { // 매핑된 ID가 있는 경우만 추가\n+              dbAgreements.push({\n+                id: agreementId,\n+                title: doc.title,\n+                content: doc.content,\n+                required: ['privacy_policy', 'terms_of_service', 'member_terms'].includes(doc.type),\n+                agreed: false\n+              });\n+            }\n           });\n \n-        // 필수 약관이 없는 경우 기본 약관 추가\n-        const requiredTypes = ['member_terms', 'privacy_policy', 'terms_of_service']; // 회원약관을 맨 앞으로\n+        // 필수 약관 중 누락된 것들을 기본값으로 추가\n+        const requiredTypes = ['member_terms', 'privacy_policy', 'terms_of_service'];\n         requiredTypes.forEach(type => {\n-          if (!activeDocuments.find(doc => doc.type === type)) {\n+          const hasType = activeDocuments.some(doc => doc.type === type);\n+          \n+          if (!hasType) {\n             const defaultTitle = {\n               'member_terms': '회원 이용약관',\n               'privacy_policy': '개인정보 처리방침',\n               'terms_of_service': '서비스 이용약관'\n             }[type] || '';\n             \n             const agreementId = Object.keys(agreementTypeMap).find(key => agreementTypeMap[key] === type);\n+            console.log(`기본 약관 추가: ${type} -> ${agreementId} (${defaultTitle})`);\n+            \n             if (agreementId) {\n-              dbAgreements.unshift({ // unshift로 앞에 추가\n+              dbAgreements.push({\n                 id: agreementId,\n                 title: defaultTitle,\n                 content: '<p>약관 내용이 등록되지 않았습니다. 관리자에게 문의하세요.</p>',\n                 required: true,\n@@ -84,16 +112,21 @@\n           const bIndex = order.indexOf(b.id);\n           return (aIndex === -1 ? 999 : aIndex) - (bIndex === -1 ? 999 : bIndex);\n         });\n \n-        // 약관이 비어있을 때만 업데이트\n-        if (formData.agreementInfo.agreements.length === 0) {\n+        console.log('최종 약관 목록:', dbAgreements);\n+\n+        // 처음 로딩이거나 약관이 비어있을 때만 업데이트\n+        if (!isInitialized || formData.agreementInfo.agreements.length === 0) {\n+          console.log('약관 정보 업데이트 실행');\n           onUpdate({\n             agreementInfo: {\n               ...formData.agreementInfo,\n               agreements: dbAgreements\n             }\n           });\n+        } else {\n+          console.log('이미 초기화됨 - 업데이트 스킵');\n         }\n         \n         setIsInitialized(true);\n       } catch (error) {\n"
                },
                {
                    "date": 1760252111483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,14 +10,14 @@\n   CheckboxLabel,\n   Checkbox,\n   SignatureSection,\n   SignatureRow,\n-  SignatureBox,\n-  SignatureArea\n+  SignatureBox\n } from './StyledComponents';\n import { StepProps } from './types';\n import { dbManager } from '../../../utils/indexedDB';\n import CustomTiptapEditor from '../../../components/Editor/CustomTiptapEditor';\n+import SignatureCanvas from '../../../components/SignatureCanvas';\n \n const AgreementStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n   const [loading, setLoading] = useState(true);\n   const [isInitialized, setIsInitialized] = useState(false);\n@@ -233,33 +233,25 @@\n         <p>아래 서명란에 고객과 직원이 각각 서명해주세요.</p>\n         <SignatureRow>\n           <SignatureBox>\n             <h4>고객 서명</h4>\n-            <SignatureArea\n-              onClick={() => {\n-                const signature = prompt('고객 서명을 입력하세요:');\n-                if (signature) {\n-                  handleSignatureChange('customer', signature);\n-                }\n-              }}\n-            >\n-              {formData.agreementInfo.customerSignature || '서명하려면 클릭하세요'}\n-            </SignatureArea>\n+            <SignatureCanvas\n+              width={300}\n+              height={150}\n+              onSignatureChange={(signature) => handleSignatureChange('customer', signature)}\n+              initialSignature={formData.agreementInfo.customerSignature}\n+            />\n             <small>위 약관에 동의하며 서명합니다.</small>\n           </SignatureBox>\n \n           <SignatureBox>\n             <h4>직원 서명</h4>\n-            <SignatureArea\n-              onClick={() => {\n-                const signature = prompt('직원 서명을 입력하세요:');\n-                if (signature) {\n-                  handleSignatureChange('staff', signature);\n-                }\n-              }}\n-            >\n-              {formData.agreementInfo.staffSignature || '서명하려면 클릭하세요'}\n-            </SignatureArea>\n+            <SignatureCanvas\n+              width={300}\n+              height={150}\n+              onSignatureChange={(signature) => handleSignatureChange('staff', signature)}\n+              initialSignature={formData.agreementInfo.staffSignature}\n+            />\n             <small>약관 설명 및 확인 완료</small>\n           </SignatureBox>\n         </SignatureRow>\n       </SignatureSection>\n"
                },
                {
                    "date": 1760252813084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,14 +10,16 @@\n   CheckboxLabel,\n   Checkbox,\n   SignatureSection,\n   SignatureRow,\n-  SignatureBox\n+  SignatureBox,\n+  Button\n } from './StyledComponents';\n import { StepProps } from './types';\n import { dbManager } from '../../../utils/indexedDB';\n import CustomTiptapEditor from '../../../components/Editor/CustomTiptapEditor';\n import SignatureCanvas from '../../../components/SignatureCanvas';\n+import { openPreviewWindow } from './PreviewDocument';\n \n const AgreementStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n   const [loading, setLoading] = useState(true);\n   const [isInitialized, setIsInitialized] = useState(false);\n@@ -163,9 +165,18 @@\n   };\n \n   return (\n     <StepContent>\n-      <StepTitle>동의 및 서명</StepTitle>\n+      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>\n+        <StepTitle>동의 및 서명</StepTitle>\n+        <Button \n+          variant=\"outline\" \n+          onClick={() => openPreviewWindow(formData)}\n+          style={{ padding: '8px 16px', fontSize: '14px' }}\n+        >\n+          전체 미리보기\n+        </Button>\n+      </div>\n       \n       {loading ? (\n         <div style={{ \n           padding: '20px', \n"
                },
                {
                    "date": 1760252977305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n       <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>\n         <StepTitle>동의 및 서명</StepTitle>\n         <Button \n           variant=\"outline\" \n-          onClick={() => openPreviewWindow(formData)}\n+          onClick={async () => await openPreviewWindow(formData)}\n           style={{ padding: '8px 16px', fontSize: '14px' }}\n         >\n           전체 미리보기\n         </Button>\n"
                },
                {
                    "date": 1761912999992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n       \n       setLoading(true);\n       try {\n         console.log('약관 로딩 시작...');\n-        const documents = await dbManager.getAllTermsDocuments();\n+        const documents = await dbManager.terms.getAllTermsDocuments();\n         console.log('DB에서 가져온 약관 수:', documents.length);\n         console.log('모든 약관:', documents);\n         \n         // 활성 문서만 필터링\n"
                }
            ],
            "date": 1760248001088,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport { \n  StepContent, \n  StepTitle, \n  AgreementSection,\n  AgreementItem,\n  AgreementHeader,\n  AgreementTitle,\n  AgreementContent,\n  CheckboxLabel,\n  Checkbox,\n  SignatureSection,\n  SignatureRow,\n  SignatureBox,\n  SignatureArea\n} from './StyledComponents';\nimport { StepProps } from './types';\n\nconst AgreementStep: React.FC<StepProps> = ({ formData, onUpdate }) => {\n  const handleAgreementChange = (agreementId: string, agreed: boolean) => {\n    const updatedAgreements = formData.agreementInfo.agreements.map(agreement =>\n      agreement.id === agreementId ? { ...agreement, agreed } : agreement\n    );\n    \n    onUpdate({\n      agreementInfo: {\n        ...formData.agreementInfo,\n        agreements: updatedAgreements\n      }\n    });\n  };\n\n  const handleSignatureChange = (type: 'customer' | 'staff', signature: string) => {\n    onUpdate({\n      agreementInfo: {\n        ...formData.agreementInfo,\n        [type === 'customer' ? 'customerSignature' : 'staffSignature']: signature\n      }\n    });\n  };\n\n  return (\n    <StepContent>\n      <StepTitle>동의 및 서명</StepTitle>\n      \n      <AgreementSection>\n        {formData.agreementInfo.agreements.map(agreement => (\n          <AgreementItem key={agreement.id}>\n            <AgreementHeader>\n              <AgreementTitle>\n                {agreement.title} {agreement.required && '*'}\n              </AgreementTitle>\n              <CheckboxLabel>\n                <Checkbox\n                  checked={agreement.agreed}\n                  onChange={(e) => handleAgreementChange(agreement.id, e.target.checked)}\n                />\n                동의합니다\n              </CheckboxLabel>\n            </AgreementHeader>\n            <AgreementContent>\n              {agreement.content}\n              <br /><br />\n              {/* 실제 약관 내용 예시 */}\n              {agreement.id === 'terms' && (\n                <>\n                  제1조 (목적)<br />\n                  본 약관은 라비다 피트니스 센터(이하 \"센터\")가 제공하는 서비스의 이용조건 및 절차, 회원과 센터의 권리, 의무, 책임사항을 규정함을 목적으로 합니다.<br /><br />\n                  \n                  제2조 (정의)<br />\n                  1. \"회원\"이라 함은 센터와 서비스 이용계약을 체결한 자를 말합니다.<br />\n                  2. \"서비스\"라 함은 센터가 제공하는 모든 운동시설 및 부대시설 이용 서비스를 말합니다.<br /><br />\n                  \n                  제3조 (약관의 게시와 개정)<br />\n                  센터는 본 약관의 내용을 회원이 쉽게 알 수 있도록 센터 내에 게시합니다.\n                </>\n              )}\n              {agreement.id === 'privacy' && (\n                <>\n                  라비다 피트니스 센터는 개인정보보호법에 따라 이용자의 개인정보 보호 및 권익을 보호하고자 합니다.<br /><br />\n                  \n                  1. 개인정보의 수집 및 이용목적<br />\n                  - 회원 가입 및 관리<br />\n                  - 서비스 제공에 관한 계약 이행<br />\n                  - 요금 결제 및 정산<br /><br />\n                  \n                  2. 수집하는 개인정보 항목<br />\n                  - 필수항목: 이름, 연락처, 생년월일<br />\n                  - 선택항목: 이메일, 주소<br /><br />\n                  \n                  3. 개인정보의 보유 및 이용기간<br />\n                  회원 탈퇴 시까지 보유하며, 관계법령에 따라 일정기간 보관할 수 있습니다.\n                </>\n              )}\n              {agreement.id === 'service' && (\n                <>\n                  서비스 이용약관<br /><br />\n                  \n                  1. 시설 이용시간<br />\n                  - 평일: 06:00 ~ 23:00<br />\n                  - 주말: 08:00 ~ 22:00<br />\n                  - 공휴일: 09:00 ~ 21:00<br /><br />\n                  \n                  2. 이용 수칙<br />\n                  - 운동복, 운동화 착용 필수<br />\n                  - 타월 지참 또는 대여 이용<br />\n                  - 기구 사용 후 정리정돈<br /><br />\n                  \n                  3. 금지사항<br />\n                  - 음주 후 시설 이용<br />\n                  - 소음 발생 행위<br />\n                  - 다른 회원에게 피해를 주는 행위\n                </>\n              )}\n              {agreement.id === 'marketing' && (\n                <>\n                  마케팅 활용 동의<br /><br />\n                  \n                  1. 동의 목적<br />\n                  - 신규 서비스 및 이벤트 정보 제공<br />\n                  - 맞춤형 운동 프로그램 추천<br />\n                  - 센터 소식 및 공지사항 전달<br /><br />\n                  \n                  2. 정보 전달 방법<br />\n                  - SMS, 이메일, 앱 푸시 알림<br />\n                  - 전화 상담<br /><br />\n                  \n                  본 동의는 선택사항이며, 동의하지 않으셔도 서비스 이용에는 제한이 없습니다.<br />\n                  언제든지 동의 철회가 가능합니다.\n                </>\n              )}\n            </AgreementContent>\n          </AgreementItem>\n        ))}\n      </AgreementSection>\n\n      <SignatureSection>\n        <h3>서명</h3>\n        <p>아래 서명란에 고객과 직원이 각각 서명해주세요.</p>\n        <SignatureRow>\n          <SignatureBox>\n            <h4>고객 서명</h4>\n            <SignatureArea\n              onClick={() => {\n                const signature = prompt('고객 서명을 입력하세요:');\n                if (signature) {\n                  handleSignatureChange('customer', signature);\n                }\n              }}\n            >\n              {formData.agreementInfo.customerSignature || '서명하려면 클릭하세요'}\n            </SignatureArea>\n            <small>위 약관에 동의하며 서명합니다.</small>\n          </SignatureBox>\n\n          <SignatureBox>\n            <h4>직원 서명</h4>\n            <SignatureArea\n              onClick={() => {\n                const signature = prompt('직원 서명을 입력하세요:');\n                if (signature) {\n                  handleSignatureChange('staff', signature);\n                }\n              }}\n            >\n              {formData.agreementInfo.staffSignature || '서명하려면 클릭하세요'}\n            </SignatureArea>\n            <small>약관 설명 및 확인 완료</small>\n          </SignatureBox>\n        </SignatureRow>\n      </SignatureSection>\n    </StepContent>\n  );\n};\n\nexport default AgreementStep;\n"
        }
    ]
}