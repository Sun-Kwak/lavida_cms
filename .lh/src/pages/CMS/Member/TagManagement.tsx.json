{
    "sourceFile": "src/pages/CMS/Member/TagManagement.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759105835943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759105835943,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport CMSLayout from '../../../components/CMSLayout';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\n\nconst PageContainer = styled.div`\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst PageHeader = styled.div`\n  margin-bottom: 24px;\n`;\n\nconst PageTitle = styled.h1`\n  font-size: ${AppTextStyles.title1.fontSize};\n  font-weight: 700;\n  color: ${AppColors.onBackground};\n  margin: 0 0 8px 0;\n`;\n\nconst PageDescription = styled.p`\n  font-size: ${AppTextStyles.body1.fontSize};\n  color: ${AppColors.onInput1};\n  margin: 0;\n`;\n\nconst GridLayout = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 24px;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nconst Card = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n`;\n\nconst CardHeader = styled.div`\n  padding: 20px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n`;\n\nconst CardTitle = styled.h2`\n  font-size: ${AppTextStyles.title3.fontSize};\n  font-weight: 600;\n  margin: 0;\n`;\n\nconst CardBody = styled.div`\n  padding: 20px;\n`;\n\nconst InputGroup = styled.div`\n  display: flex;\n  gap: 12px;\n  margin-bottom: 16px;\n`;\n\nconst Input = styled.input`\n  flex: 1;\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  outline: none;\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst ColorPicker = styled.input.attrs({ type: 'color' })`\n  width: 50px;\n  height: 46px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  cursor: pointer;\n  padding: 0;\n  \n  &::-webkit-color-swatch-wrapper {\n    padding: 0;\n  }\n  \n  &::-webkit-color-swatch {\n    border: none;\n    border-radius: 6px;\n  }\n`;\n\nconst Button = styled.button<{ variant?: 'primary' | 'secondary' | 'danger' }>`\n  padding: 12px 18px;\n  border: ${props => \n    props.variant === 'danger' ? `1px solid ${AppColors.error}` :\n    props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'\n  };\n  border-radius: 8px;\n  background: ${props => \n    props.variant === 'danger' ? AppColors.error :\n    props.variant === 'secondary' ? AppColors.surface : AppColors.primary\n  };\n  color: ${props => \n    props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary\n  };\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n  white-space: nowrap;\n  \n  &:hover {\n    opacity: 0.9;\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst TagList = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  max-height: 400px;\n  overflow-y: auto;\n`;\n\nconst TagItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  background: ${AppColors.background};\n`;\n\nconst TagInfo = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n`;\n\nconst TagPreview = styled.div<{ $color: string }>`\n  display: inline-block;\n  padding: 6px 12px;\n  background: ${props => props.$color}20;\n  color: ${props => props.$color};\n  border: 1px solid ${props => props.$color}40;\n  border-radius: 12px;\n  font-size: ${AppTextStyles.label2.fontSize};\n  font-weight: 500;\n`;\n\nconst TagDetails = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n`;\n\nconst TagName = styled.span`\n  font-weight: 600;\n  font-size: ${AppTextStyles.body1.fontSize};\n`;\n\nconst TagStats = styled.span`\n  font-size: ${AppTextStyles.label2.fontSize};\n  color: ${AppColors.onInput1};\n`;\n\nconst TagActions = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst SmallButton = styled(Button)`\n  padding: 6px 12px;\n  font-size: ${AppTextStyles.label2.fontSize};\n`;\n\nconst EmptyState = styled.div`\n  text-align: center;\n  padding: 40px 20px;\n  color: ${AppColors.onInput1};\n`;\n\ninterface Tag {\n  id: string;\n  name: string;\n  color: string;\n  memberCount: number;\n  description?: string;\n}\n\nconst TagManagement: React.FC = () => {\n  const [tags, setTags] = useState<Tag[]>([\n    { id: '1', name: 'WBM', color: '#37bbd6', memberCount: 24, description: '웰빙 바디 매니지먼트' },\n    { id: '2', name: '릴렉싱', color: '#4CAF50', memberCount: 18, description: '릴렉싱 프로그램' },\n    { id: '3', name: 'VIP', color: '#FF9800', memberCount: 7, description: 'VIP 회원' },\n    { id: '4', name: '신규', color: '#9C27B0', memberCount: 12, description: '신규 회원' },\n    { id: '5', name: '재등록', color: '#607D8B', memberCount: 5, description: '재등록 회원' },\n  ]);\n\n  const [newTag, setNewTag] = useState({\n    name: '',\n    color: '#37bbd6',\n    description: ''\n  });\n\n  const [editingTag, setEditingTag] = useState<Tag | null>(null);\n\n  const handleAddTag = () => {\n    if (!newTag.name.trim()) {\n      alert('태그 이름을 입력하세요.');\n      return;\n    }\n\n    if (tags.some(tag => tag.name.toLowerCase() === newTag.name.toLowerCase())) {\n      alert('이미 존재하는 태그 이름입니다.');\n      return;\n    }\n\n    const tag: Tag = {\n      id: Date.now().toString(),\n      name: newTag.name.trim(),\n      color: newTag.color,\n      memberCount: 0,\n      description: newTag.description.trim()\n    };\n\n    setTags(prev => [...prev, tag]);\n    setNewTag({ name: '', color: '#37bbd6', description: '' });\n    alert('태그가 성공적으로 추가되었습니다.');\n  };\n\n  const handleEditTag = (tag: Tag) => {\n    setEditingTag(tag);\n  };\n\n  const handleUpdateTag = () => {\n    if (!editingTag) return;\n\n    setTags(prev => prev.map(tag => \n      tag.id === editingTag.id ? editingTag : tag\n    ));\n    setEditingTag(null);\n    alert('태그가 성공적으로 수정되었습니다.');\n  };\n\n  const handleDeleteTag = (tagId: string) => {\n    const tag = tags.find(t => t.id === tagId);\n    if (!tag) return;\n\n    if (tag.memberCount > 0) {\n      if (!window.confirm(`이 태그는 ${tag.memberCount}명의 회원이 사용 중입니다. 정말 삭제하시겠습니까?`)) {\n        return;\n      }\n    }\n\n    setTags(prev => prev.filter(t => t.id !== tagId));\n    alert('태그가 삭제되었습니다.');\n  };\n\n  const handleBulkAction = (action: string) => {\n    switch (action) {\n      case 'export':\n        alert('태그 목록을 엑셀로 내보냅니다.');\n        break;\n      case 'import':\n        alert('엑셀에서 태그를 가져옵니다.');\n        break;\n      case 'cleanup':\n        if (window.confirm('사용하지 않는 태그를 모두 삭제하시겠습니까?')) {\n          setTags(prev => prev.filter(tag => tag.memberCount > 0));\n          alert('미사용 태그가 정리되었습니다.');\n        }\n        break;\n    }\n  };\n\n  return (\n    <CMSLayout currentPath=\"/cms/member/tags\">\n      <PageContainer>\n        <PageHeader>\n          <PageTitle>태그 관리</PageTitle>\n          <PageDescription>회원을 분류하기 위한 태그를 관리합니다.</PageDescription>\n        </PageHeader>\n\n        <GridLayout>\n          {/* 태그 추가 섹션 */}\n          <Card>\n            <CardHeader>\n              <CardTitle>새 태그 추가</CardTitle>\n            </CardHeader>\n            <CardBody>\n              <InputGroup>\n                <Input\n                  value={newTag.name}\n                  onChange={(e) => setNewTag(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"태그 이름\"\n                />\n                <ColorPicker\n                  value={newTag.color}\n                  onChange={(e) => setNewTag(prev => ({ ...prev, color: e.target.value }))}\n                />\n                <Button onClick={handleAddTag}>추가</Button>\n              </InputGroup>\n              \n              <Input\n                value={newTag.description}\n                onChange={(e) => setNewTag(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"태그 설명 (선택사항)\"\n                style={{ marginBottom: '16px' }}\n              />\n\n              <TagPreview $color={newTag.color}>\n                {newTag.name || '미리보기'}\n              </TagPreview>\n\n              <div style={{ marginTop: '16px', display: 'flex', gap: '8px', flexWrap: 'wrap' }}>\n                <SmallButton variant=\"secondary\" onClick={() => handleBulkAction('export')}>\n                  태그 내보내기\n                </SmallButton>\n                <SmallButton variant=\"secondary\" onClick={() => handleBulkAction('import')}>\n                  태그 가져오기\n                </SmallButton>\n                <SmallButton variant=\"secondary\" onClick={() => handleBulkAction('cleanup')}>\n                  미사용 태그 정리\n                </SmallButton>\n              </div>\n            </CardBody>\n          </Card>\n\n          {/* 태그 목록 섹션 */}\n          <Card>\n            <CardHeader>\n              <CardTitle>태그 목록 ({tags.length}개)</CardTitle>\n            </CardHeader>\n            <CardBody>\n              {tags.length > 0 ? (\n                <TagList>\n                  {tags.map(tag => (\n                    <TagItem key={tag.id}>\n                      <TagInfo>\n                        <TagPreview $color={tag.color}>\n                          {tag.name}\n                        </TagPreview>\n                        <TagDetails>\n                          <TagName>{tag.name}</TagName>\n                          <TagStats>\n                            {tag.memberCount}명 사용\n                            {tag.description && ` • ${tag.description}`}\n                          </TagStats>\n                        </TagDetails>\n                      </TagInfo>\n                      <TagActions>\n                        <SmallButton \n                          variant=\"secondary\" \n                          onClick={() => handleEditTag(tag)}\n                        >\n                          편집\n                        </SmallButton>\n                        <SmallButton \n                          variant=\"danger\" \n                          onClick={() => handleDeleteTag(tag.id)}\n                        >\n                          삭제\n                        </SmallButton>\n                      </TagActions>\n                    </TagItem>\n                  ))}\n                </TagList>\n              ) : (\n                <EmptyState>\n                  <p>등록된 태그가 없습니다.</p>\n                  <p>새 태그를 추가해보세요.</p>\n                </EmptyState>\n              )}\n            </CardBody>\n          </Card>\n        </GridLayout>\n\n        {/* 편집 모달 (간단하게 alert로 대체) */}\n        {editingTag && (\n          <div style={{\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: 'rgba(0,0,0,0.5)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            zIndex: 1000\n          }}>\n            <Card style={{ width: '400px', maxWidth: '90vw' }}>\n              <CardHeader>\n                <CardTitle>태그 편집</CardTitle>\n              </CardHeader>\n              <CardBody>\n                <InputGroup>\n                  <Input\n                    value={editingTag.name}\n                    onChange={(e) => setEditingTag(prev => prev ? { ...prev, name: e.target.value } : null)}\n                    placeholder=\"태그 이름\"\n                  />\n                  <ColorPicker\n                    value={editingTag.color}\n                    onChange={(e) => setEditingTag(prev => prev ? { ...prev, color: e.target.value } : null)}\n                  />\n                </InputGroup>\n                \n                <Input\n                  value={editingTag.description || ''}\n                  onChange={(e) => setEditingTag(prev => prev ? { ...prev, description: e.target.value } : null)}\n                  placeholder=\"태그 설명 (선택사항)\"\n                  style={{ marginBottom: '16px' }}\n                />\n\n                <TagPreview $color={editingTag.color}>\n                  {editingTag.name}\n                </TagPreview>\n\n                <div style={{ marginTop: '16px', display: 'flex', gap: '12px', justifyContent: 'flex-end' }}>\n                  <Button variant=\"secondary\" onClick={() => setEditingTag(null)}>\n                    취소\n                  </Button>\n                  <Button onClick={handleUpdateTag}>\n                    저장\n                  </Button>\n                </div>\n              </CardBody>\n            </Card>\n          </div>\n        )}\n      </PageContainer>\n    </CMSLayout>\n  );\n};\n\nexport default TagManagement;\n"
        }
    ]
}