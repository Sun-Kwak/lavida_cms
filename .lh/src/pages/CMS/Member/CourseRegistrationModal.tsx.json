{
    "sourceFile": "src/pages/CMS/Member/CourseRegistrationModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1761132526034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761132724778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,24 +12,31 @@\n   display: flex;\n   gap: 24px;\n   height: 600px;\n   min-width: 900px;\n+  width: 100%;\n+  overflow: hidden;\n `;\n \n const LeftPanel = styled.div`\n   flex: 1;\n   border-right: 1px solid ${AppColors.borderLight};\n   padding-right: 24px;\n+  min-width: 0; /* 플렉스 아이템이 축소될 수 있도록 */\n+  display: flex;\n+  flex-direction: column;\n `;\n \n const RightPanel = styled.div`\n   flex: 1;\n   padding-left: 24px;\n+  min-width: 0; /* 플렉스 아이템이 축소될 수 있도록 */\n+  display: flex;\n+  flex-direction: column;\n `;\n \n const PanelTitle = styled.h3`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 700;\n+  ${AppTextStyles.title3}\n   margin-bottom: 16px;\n   color: ${AppColors.onBackground};\n   border-bottom: 2px solid ${AppColors.primary};\n   padding-bottom: 8px;\n"
                },
                {
                    "date": 1761132784677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,8 @@\n   display: flex;\n   justify-content: flex-end;\n   gap: 12px;\n   margin-top: 24px;\n-  padding-top: 24px;\n-  border-top: 1px solid ${AppColors.borderLight};\n `;\n \n const WarningText = styled.div`\n   background: #fff3cd;\n"
                },
                {
                    "date": 1761133874406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,17 +151,28 @@\n \n     try {\n       const totalAmount = paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n       const pointPayment = paymentInfo.pointPayment || 0;\n-      const cashPayment = (paymentInfo.receivedAmount || 0) - pointPayment;\n-      const unpaidAmount = Math.max(0, totalAmount - pointPayment - cashPayment);\n+      const cashPayment = paymentInfo.receivedAmount || 0; // 현금/카드로 받은 금액\n+      const totalReceived = pointPayment + cashPayment; // 총 받은 금액\n+      const unpaidAmount = Math.max(0, totalAmount - totalReceived);\n \n       // 포인트 결제가 잔액을 초과하는지 확인\n       if (pointPayment > memberPointBalance) {\n         toast.error(`포인트 잔액이 부족합니다. (잔액: ${memberPointBalance.toLocaleString()}원)`);\n         return;\n       }\n \n+      // 총 받은 금액이 총 결제 금액을 초과하는지 확인\n+      if (totalReceived > totalAmount) {\n+        const excessAmount = totalReceived - totalAmount;\n+        const confirmed = window.confirm(\n+          `총 받은 금액이 결제 금액보다 ${excessAmount.toLocaleString()}원 많습니다.\\n` +\n+          `초과 금액은 포인트로 적립됩니다. 계속 진행하시겠습니까?`\n+        );\n+        if (!confirmed) return;\n+      }\n+\n       // 각 상품별로 수강 등록 및 결제 처리\n       for (const product of paymentInfo.selectedProducts) {\n         // 1. 상품 정보 조회 (프로그램 정보 포함)\n         const dbProduct = await dbManager.getProductById(product.id);\n@@ -183,10 +194,10 @@\n           branchName: selectedMember.branchName,\n           coach: selectedMember.coach,\n           coachName: selectedMember.coachName,\n           enrollmentStatus: unpaidAmount > 0 ? 'unpaid' as const : 'completed' as const,\n-          paidAmount: Math.min(product.price, pointPayment + cashPayment),\n-          unpaidAmount: Math.max(0, product.price - pointPayment - cashPayment),\n+          paidAmount: Math.min(product.price, totalReceived),\n+          unpaidAmount: Math.max(0, product.price - totalReceived),\n           startDate: new Date(),\n           endDate: dbProduct.programType === '기간제' ? (() => {\n             const endDate = new Date();\n             endDate.setMonth(endDate.getMonth() + 3); // 기본 3개월\n@@ -199,42 +210,78 @@\n \n         // 3. 수강 등록 저장\n         const courseId = await dbManager.addCourseEnrollment(courseData);\n \n-        // 4. 결제 데이터 생성\n-        const paymentData = {\n-          memberId: selectedMember.id,\n-          memberName: selectedMember.name,\n-          branchId: selectedMember.branchId,\n-          branchName: selectedMember.branchName,\n-          coach: selectedMember.coach,\n-          coachName: selectedMember.coachName,\n-          paymentMethod: paymentInfo.paymentMethod,\n-          paymentStatus: unpaidAmount > 0 ? 'unpaid' as const : 'completed' as const,\n-          totalAmount: product.price,\n-          paidAmount: Math.min(product.price, pointPayment + cashPayment),\n-          unpaidAmount: Math.max(0, product.price - pointPayment - cashPayment),\n-          paymentDate: new Date(),\n-          paymentType: 'course' as const,\n-          relatedCourseId: courseId,\n-          relatedAssetId: null,\n-          products: [{\n-            id: product.id,\n-            name: product.name,\n-            price: product.price,\n-            quantity: 1,\n-            programId: dbProduct.programId,\n-            programName: dbProduct.programName,\n-            programType: dbProduct.programType\n-          }],\n-          memo: `새 수강 등록 - ${product.name} (수강 ID: ${courseId})`\n-        };\n+        // 4. 결제 데이터 생성 - 현금/카드 결제가 있는 경우만\n+        if (cashPayment > 0) {\n+          const paymentData = {\n+            memberId: selectedMember.id,\n+            memberName: selectedMember.name,\n+            branchId: selectedMember.branchId,\n+            branchName: selectedMember.branchName,\n+            coach: selectedMember.coach,\n+            coachName: selectedMember.coachName,\n+            paymentMethod: paymentInfo.paymentMethod, // 현금/카드 결제 방법\n+            paymentStatus: unpaidAmount > 0 ? 'unpaid' as const : 'completed' as const,\n+            totalAmount: cashPayment, // 현금/카드로 받은 금액\n+            paidAmount: cashPayment,\n+            unpaidAmount: 0, // 현금/카드 결제는 받은 만큼 완납\n+            paymentDate: new Date(),\n+            paymentType: 'course' as const,\n+            relatedCourseId: courseId,\n+            relatedAssetId: null,\n+            products: [{\n+              id: product.id,\n+              name: product.name,\n+              price: cashPayment, // 현금/카드로 결제된 부분\n+              quantity: 1,\n+              programId: dbProduct.programId,\n+              programName: dbProduct.programName,\n+              programType: dbProduct.programType\n+            }],\n+            memo: `새 수강 등록 - ${product.name} (현금/카드 결제: ${cashPayment.toLocaleString()}원)`\n+          };\n \n-        // 5. 결제 정보 저장\n-        await dbManager.addPayment(paymentData);\n+          // 5. 현금/카드 결제 정보 저장\n+          await dbManager.addPayment(paymentData);\n+        }\n+\n+        // 6. 포인트 결제 데이터 생성 - 포인트 결제가 있는 경우만\n+        if (pointPayment > 0) {\n+          const pointPaymentData = {\n+            memberId: selectedMember.id,\n+            memberName: selectedMember.name,\n+            branchId: selectedMember.branchId,\n+            branchName: selectedMember.branchName,\n+            coach: selectedMember.coach,\n+            coachName: selectedMember.coachName,\n+            paymentMethod: 'point', // 포인트 결제\n+            paymentStatus: 'completed' as const, // 포인트는 즉시 완료\n+            totalAmount: pointPayment, // 포인트로 결제된 금액\n+            paidAmount: pointPayment,\n+            unpaidAmount: 0, // 포인트 결제는 즉시 완납\n+            paymentDate: new Date(),\n+            paymentType: 'course' as const,\n+            relatedCourseId: courseId,\n+            relatedAssetId: null,\n+            products: [{\n+              id: product.id,\n+              name: product.name,\n+              price: pointPayment, // 포인트로 결제된 부분\n+              quantity: 1,\n+              programId: dbProduct.programId,\n+              programName: dbProduct.programName,\n+              programType: dbProduct.programType\n+            }],\n+            memo: `새 수강 등록 - ${product.name} (포인트 결제: ${pointPayment.toLocaleString()}원)`\n+          };\n+\n+          // 7. 포인트 결제 정보 저장\n+          await dbManager.addPayment(pointPaymentData);\n+        }\n       }\n \n-      // 6. 포인트 사용 처리\n+      // 8. 포인트 사용 처리\n       if (pointPayment > 0) {\n         await dbManager.addPoint({\n           memberId: selectedMember.id,\n           memberName: selectedMember.name,\n@@ -244,11 +291,11 @@\n           description: `수강등록 포인트 결제 (${paymentInfo.selectedProducts.map(p => p.name).join(', ')})`\n         });\n       }\n \n-      // 7. 초과 금액 포인트 적립 처리\n-      if (cashPayment > totalAmount - pointPayment) {\n-        const excessAmount = cashPayment - (totalAmount - pointPayment);\n+      // 9. 초과 금액 포인트 적립 처리 (현금/카드 초과분만)\n+      if (totalReceived > totalAmount) {\n+        const excessAmount = totalReceived - totalAmount;\n         await dbManager.addPoint({\n           memberId: selectedMember.id,\n           memberName: selectedMember.name,\n           amount: excessAmount,\n"
                },
                {
                    "date": 1761366312724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n   const handlePaymentUpdate = (updates: Partial<PaymentInfo>) => {\n     setPaymentInfo(prev => ({ ...prev, ...updates }));\n   };\n \n-  // 수강 등록 처리\n+  // 수강 등록 처리 - 개선된 통합 주문 방식\n   const handleRegisterCourse = async () => {\n     if (!selectedMember) {\n       toast.error('회원을 선택해주세요.');\n       return;\n@@ -153,9 +153,8 @@\n       const totalAmount = paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n       const pointPayment = paymentInfo.pointPayment || 0;\n       const cashPayment = paymentInfo.receivedAmount || 0; // 현금/카드로 받은 금액\n       const totalReceived = pointPayment + cashPayment; // 총 받은 금액\n-      const unpaidAmount = Math.max(0, totalAmount - totalReceived);\n \n       // 포인트 결제가 잔액을 초과하는지 확인\n       if (pointPayment > memberPointBalance) {\n         toast.error(`포인트 잔액이 부족합니다. (잔액: ${memberPointBalance.toLocaleString()}원)`);\n@@ -171,144 +170,51 @@\n         );\n         if (!confirmed) return;\n       }\n \n-      // 각 상품별로 수강 등록 및 결제 처리\n+      // 상품 정보 조회 및 준비\n+      const orderProducts = [];\n       for (const product of paymentInfo.selectedProducts) {\n-        // 1. 상품 정보 조회 (프로그램 정보 포함)\n         const dbProduct = await dbManager.getProductById(product.id);\n         if (!dbProduct) {\n           throw new Error(`상품 정보를 찾을 수 없습니다: ${product.name}`);\n         }\n-\n-        // 2. 수강 등록 데이터 생성\n-        const courseData = {\n-          memberId: selectedMember.id,\n-          memberName: selectedMember.name,\n-          productId: product.id,\n-          productName: product.name,\n-          productPrice: product.price,\n+        \n+        orderProducts.push({\n+          id: product.id,\n+          name: product.name,\n+          price: product.price,\n           programId: dbProduct.programId,\n           programName: dbProduct.programName,\n-          programType: dbProduct.programType,\n+          programType: dbProduct.programType\n+        });\n+      }\n+\n+      // 통합 주문 처리 실행\n+      const orderId = await dbManager.processOrderWithPayments({\n+        memberInfo: {\n+          id: selectedMember.id,\n+          name: selectedMember.name,\n           branchId: selectedMember.branchId,\n           branchName: selectedMember.branchName,\n           coach: selectedMember.coach,\n-          coachName: selectedMember.coachName,\n-          enrollmentStatus: unpaidAmount > 0 ? 'unpaid' as const : 'completed' as const,\n-          paidAmount: Math.min(product.price, totalReceived),\n-          unpaidAmount: Math.max(0, product.price - totalReceived),\n-          startDate: new Date(),\n-          endDate: dbProduct.programType === '기간제' ? (() => {\n-            const endDate = new Date();\n-            endDate.setMonth(endDate.getMonth() + 3); // 기본 3개월\n-            return endDate;\n-          })() : undefined,\n-          sessionCount: dbProduct.sessions || undefined,\n-          completedSessions: 0,\n-          notes: '새 수강 등록을 통해 등록됨'\n-        };\n+          coachName: selectedMember.coachName\n+        },\n+        products: orderProducts,\n+        payments: {\n+          cash: paymentInfo.paymentMethod === 'cash' ? cashPayment : 0,\n+          card: paymentInfo.paymentMethod === 'card' ? cashPayment : 0,\n+          transfer: paymentInfo.paymentMethod === 'transfer' ? cashPayment : 0,\n+          points: pointPayment\n+        },\n+        orderType: 'course_enrollment'\n+      });\n \n-        // 3. 수강 등록 저장\n-        const courseId = await dbManager.addCourseEnrollment(courseData);\n-\n-        // 4. 결제 데이터 생성 - 현금/카드 결제가 있는 경우만\n-        if (cashPayment > 0) {\n-          const paymentData = {\n-            memberId: selectedMember.id,\n-            memberName: selectedMember.name,\n-            branchId: selectedMember.branchId,\n-            branchName: selectedMember.branchName,\n-            coach: selectedMember.coach,\n-            coachName: selectedMember.coachName,\n-            paymentMethod: paymentInfo.paymentMethod, // 현금/카드 결제 방법\n-            paymentStatus: unpaidAmount > 0 ? 'unpaid' as const : 'completed' as const,\n-            totalAmount: cashPayment, // 현금/카드로 받은 금액\n-            paidAmount: cashPayment,\n-            unpaidAmount: 0, // 현금/카드 결제는 받은 만큼 완납\n-            paymentDate: new Date(),\n-            paymentType: 'course' as const,\n-            relatedCourseId: courseId,\n-            relatedAssetId: null,\n-            products: [{\n-              id: product.id,\n-              name: product.name,\n-              price: cashPayment, // 현금/카드로 결제된 부분\n-              quantity: 1,\n-              programId: dbProduct.programId,\n-              programName: dbProduct.programName,\n-              programType: dbProduct.programType\n-            }],\n-            memo: `새 수강 등록 - ${product.name} (현금/카드 결제: ${cashPayment.toLocaleString()}원)`\n-          };\n-\n-          // 5. 현금/카드 결제 정보 저장\n-          await dbManager.addPayment(paymentData);\n-        }\n-\n-        // 6. 포인트 결제 데이터 생성 - 포인트 결제가 있는 경우만\n-        if (pointPayment > 0) {\n-          const pointPaymentData = {\n-            memberId: selectedMember.id,\n-            memberName: selectedMember.name,\n-            branchId: selectedMember.branchId,\n-            branchName: selectedMember.branchName,\n-            coach: selectedMember.coach,\n-            coachName: selectedMember.coachName,\n-            paymentMethod: 'point', // 포인트 결제\n-            paymentStatus: 'completed' as const, // 포인트는 즉시 완료\n-            totalAmount: pointPayment, // 포인트로 결제된 금액\n-            paidAmount: pointPayment,\n-            unpaidAmount: 0, // 포인트 결제는 즉시 완납\n-            paymentDate: new Date(),\n-            paymentType: 'course' as const,\n-            relatedCourseId: courseId,\n-            relatedAssetId: null,\n-            products: [{\n-              id: product.id,\n-              name: product.name,\n-              price: pointPayment, // 포인트로 결제된 부분\n-              quantity: 1,\n-              programId: dbProduct.programId,\n-              programName: dbProduct.programName,\n-              programType: dbProduct.programType\n-            }],\n-            memo: `새 수강 등록 - ${product.name} (포인트 결제: ${pointPayment.toLocaleString()}원)`\n-          };\n-\n-          // 7. 포인트 결제 정보 저장\n-          await dbManager.addPayment(pointPaymentData);\n-        }\n-      }\n-\n-      // 8. 포인트 사용 처리\n-      if (pointPayment > 0) {\n-        await dbManager.addPoint({\n-          memberId: selectedMember.id,\n-          memberName: selectedMember.name,\n-          amount: -pointPayment, // 음수로 저장 (사용)\n-          type: 'used',\n-          source: '수강등록 포인트결제',\n-          description: `수강등록 포인트 결제 (${paymentInfo.selectedProducts.map(p => p.name).join(', ')})`\n-        });\n-      }\n-\n-      // 9. 초과 금액 포인트 적립 처리 (현금/카드 초과분만)\n-      if (totalReceived > totalAmount) {\n-        const excessAmount = totalReceived - totalAmount;\n-        await dbManager.addPoint({\n-          memberId: selectedMember.id,\n-          memberName: selectedMember.name,\n-          amount: excessAmount,\n-          type: 'earned',\n-          source: '수강등록 초과금액',\n-          description: `수강등록 초과금액 포인트 적립 (${excessAmount.toLocaleString()}원)`\n-        });\n-      }\n-\n-      toast.success('수강 등록이 완료되었습니다.');\n+      console.log(`수강 등록 통합 주문 처리 완료 - 주문 ID: ${orderId}`);\n+      toast.success(`수강 등록이 완료되었습니다. (주문 ID: ${orderId.slice(-8)})`);\n       onSuccess();\n       onClose();\n+\n     } catch (error) {\n       console.error('수강 등록 실패:', error);\n       toast.error('수강 등록 중 오류가 발생했습니다.');\n     } finally {\n"
                },
                {
                    "date": 1761373763923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,12 +163,22 @@\n \n       // 총 받은 금액이 총 결제 금액을 초과하는지 확인\n       if (totalReceived > totalAmount) {\n         const excessAmount = totalReceived - totalAmount;\n-        const confirmed = window.confirm(\n-          `총 받은 금액이 결제 금액보다 ${excessAmount.toLocaleString()}원 많습니다.\\n` +\n-          `초과 금액은 포인트로 적립됩니다. 계속 진행하시겠습니까?`\n-        );\n+        \n+        // 보너스 포인트 계산\n+        let confirmMessage = `총 받은 금액이 결제 금액보다 ${excessAmount.toLocaleString()}원 많습니다.\\n초과 금액은 포인트로 적립됩니다.`;\n+        \n+        if (excessAmount >= 1000000) {\n+          const millionUnits = Math.floor(excessAmount / 1000000);\n+          const bonusPoints = millionUnits * 100000;\n+          confirmMessage += `\\n\\n🎁 보너스 혜택: 추가 ${bonusPoints.toLocaleString()}원 더 적립됩니다!`;\n+          confirmMessage += `\\n(${millionUnits}개 100만원 단위 × 10만원 보너스)`;\n+        }\n+        \n+        confirmMessage += `\\n\\n계속 진행하시겠습니까?`;\n+        \n+        const confirmed = window.confirm(confirmMessage);\n         if (!confirmed) return;\n       }\n \n       // 상품 정보 조회 및 준비\n"
                },
                {
                    "date": 1761375753678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState } from 'react';\n+import React, { useState, useEffect } from 'react';\n import styled from 'styled-components';\n import { toast } from 'react-toastify';\n import Modal from '../../../components/Modal';\n import { dbManager, type Member } from '../../../utils/indexedDB';\n@@ -100,14 +100,16 @@\n interface CourseRegistrationModalProps {\n   isOpen: boolean;\n   onClose: () => void;\n   onSuccess: () => void;\n+  preselectedMember?: Member | null; // 미리 선택된 회원\n }\n \n const CourseRegistrationModal: React.FC<CourseRegistrationModalProps> = ({\n   isOpen,\n   onClose,\n-  onSuccess\n+  onSuccess,\n+  preselectedMember = null\n }) => {\n   const [selectedMember, setSelectedMember] = useState<Member | null>(null);\n   const [memberPointBalance, setMemberPointBalance] = useState<number>(0);\n   const [paymentInfo, setPaymentInfo] = useState<PaymentInfo>({\n@@ -117,8 +119,15 @@\n     pointPayment: 0\n   });\n   const [isProcessing, setIsProcessing] = useState(false);\n \n+  // 미리 선택된 회원이 있으면 설정하고 포인트 잔액 로드\n+  useEffect(() => {\n+    if (preselectedMember && isOpen) {\n+      handleMemberSelect(preselectedMember);\n+    }\n+  }, [preselectedMember, isOpen]);\n+\n   // 회원 선택 시 포인트 잔액 로드\n   const handleMemberSelect = async (member: Member) => {\n     setSelectedMember(member);\n     try {\n@@ -235,10 +244,13 @@\n   // 모달 닫기 처리\n   const handleClose = () => {\n     if (isProcessing) return;\n     \n-    setSelectedMember(null);\n-    setMemberPointBalance(0);\n+    // 미리 선택된 회원이 없는 경우에만 초기화\n+    if (!preselectedMember) {\n+      setSelectedMember(null);\n+      setMemberPointBalance(0);\n+    }\n     setPaymentInfo({\n       selectedProducts: [],\n       paymentMethod: 'card',\n       receivedAmount: 0,\n@@ -260,8 +272,10 @@\n             <MemberSearchPanel\n               selectedMember={selectedMember}\n               onMemberSelect={handleMemberSelect}\n               memberPointBalance={memberPointBalance}\n+              preselectedMember={preselectedMember}\n+              readonly={!!preselectedMember}\n             />\n           </LeftPanel>\n           \n           <RightPanel>\n"
                },
                {
                    "date": 1761459688972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,10 +85,22 @@\n \n interface Product {\n   id: string;\n   name: string;\n-  price: number;\n+  originalPrice?: number; // DB에서 가져온 기본 가격\n+  basePrice?: number; // 기준 가격\n+  price: number; // 상품금액 (계산될 정확한 금액)\n+  appliedPrice?: number; // 적용금액 (사용자가 조정할 수 있는 최종 금액)\n   description?: string;\n+  programType?: string; // '기간제' | '횟수제'\n+  // 기간제 관련\n+  duration?: number; // 기간(일)\n+  baseDuration?: number; // 기준 기간\n+  startDate?: Date;\n+  endDate?: Date;\n+  // 횟수제 관련\n+  sessions?: number; // 수업 횟수\n+  baseSessions?: number; // 기준 횟수\n }\n \n interface PaymentInfo {\n   selectedProducts: Product[];\n@@ -158,9 +170,10 @@\n \n     setIsProcessing(true);\n \n     try {\n-      const totalAmount = paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n+      const totalAmount = paymentInfo.selectedProducts.reduce((sum, product) => \n+        sum + (product.appliedPrice || product.price), 0);\n       const pointPayment = paymentInfo.pointPayment || 0;\n       const cashPayment = paymentInfo.receivedAmount || 0; // 현금/카드로 받은 금액\n       const totalReceived = pointPayment + cashPayment; // 총 받은 금액\n \n@@ -200,9 +213,9 @@\n         \n         orderProducts.push({\n           id: product.id,\n           name: product.name,\n-          price: product.price,\n+          price: product.appliedPrice || product.price, // 적용금액 사용\n           programId: dbProduct.programId,\n           programName: dbProduct.programName,\n           programType: dbProduct.programType\n         });\n"
                },
                {
                    "date": 1761910063251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,10 @@\n   programType?: string; // '기간제' | '횟수제'\n   // 기간제 관련\n   duration?: number; // 기간(일)\n   baseDuration?: number; // 기준 기간\n+  months?: number; // 개월수\n+  baseMonths?: number; // 기준 개월수\n   startDate?: Date;\n   endDate?: Date;\n   // 횟수제 관련\n   sessions?: number; // 수업 횟수\n"
                }
            ],
            "date": 1761132526034,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { toast } from 'react-toastify';\nimport Modal from '../../../components/Modal';\nimport { dbManager, type Member } from '../../../utils/indexedDB';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\nimport MemberSearchPanel from './MemberSearchPanel';\nimport CoursePaymentPanel from './CoursePaymentPanel';\n\nconst ModalContainer = styled.div`\n  display: flex;\n  gap: 24px;\n  height: 600px;\n  min-width: 900px;\n`;\n\nconst LeftPanel = styled.div`\n  flex: 1;\n  border-right: 1px solid ${AppColors.borderLight};\n  padding-right: 24px;\n`;\n\nconst RightPanel = styled.div`\n  flex: 1;\n  padding-left: 24px;\n`;\n\nconst PanelTitle = styled.h3`\n  font-size: ${AppTextStyles.title3.fontSize};\n  font-weight: 700;\n  margin-bottom: 16px;\n  color: ${AppColors.onBackground};\n  border-bottom: 2px solid ${AppColors.primary};\n  padding-bottom: 8px;\n`;\n\nconst Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n  padding: 12px 24px;\n  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n  border-radius: 8px;\n  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    opacity: 0.9;\n    transform: translateY(-1px);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  gap: 12px;\n  margin-top: 24px;\n  padding-top: 24px;\n  border-top: 1px solid ${AppColors.borderLight};\n`;\n\nconst WarningText = styled.div`\n  background: #fff3cd;\n  border: 1px solid #ffeaa7;\n  border-radius: 8px;\n  padding: 12px;\n  margin: 16px 0;\n  color: #856404;\n  font-size: 14px;\n  text-align: center;\n`;\n\ninterface Product {\n  id: string;\n  name: string;\n  price: number;\n  description?: string;\n}\n\ninterface PaymentInfo {\n  selectedProducts: Product[];\n  paymentMethod: string;\n  receivedAmount?: number;\n  pointPayment?: number; // 포인트로 결제할 금액\n}\n\ninterface CourseRegistrationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nconst CourseRegistrationModal: React.FC<CourseRegistrationModalProps> = ({\n  isOpen,\n  onClose,\n  onSuccess\n}) => {\n  const [selectedMember, setSelectedMember] = useState<Member | null>(null);\n  const [memberPointBalance, setMemberPointBalance] = useState<number>(0);\n  const [paymentInfo, setPaymentInfo] = useState<PaymentInfo>({\n    selectedProducts: [],\n    paymentMethod: 'card',\n    receivedAmount: 0,\n    pointPayment: 0\n  });\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // 회원 선택 시 포인트 잔액 로드\n  const handleMemberSelect = async (member: Member) => {\n    setSelectedMember(member);\n    try {\n      const pointBalance = await dbManager.getMemberPointBalance(member.id);\n      setMemberPointBalance(pointBalance);\n    } catch (error) {\n      console.error('포인트 잔액 조회 실패:', error);\n      setMemberPointBalance(0);\n    }\n  };\n\n  // 결제 정보 업데이트\n  const handlePaymentUpdate = (updates: Partial<PaymentInfo>) => {\n    setPaymentInfo(prev => ({ ...prev, ...updates }));\n  };\n\n  // 수강 등록 처리\n  const handleRegisterCourse = async () => {\n    if (!selectedMember) {\n      toast.error('회원을 선택해주세요.');\n      return;\n    }\n\n    if (paymentInfo.selectedProducts.length === 0) {\n      toast.error('등록할 상품을 선택해주세요.');\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const totalAmount = paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n      const pointPayment = paymentInfo.pointPayment || 0;\n      const cashPayment = (paymentInfo.receivedAmount || 0) - pointPayment;\n      const unpaidAmount = Math.max(0, totalAmount - pointPayment - cashPayment);\n\n      // 포인트 결제가 잔액을 초과하는지 확인\n      if (pointPayment > memberPointBalance) {\n        toast.error(`포인트 잔액이 부족합니다. (잔액: ${memberPointBalance.toLocaleString()}원)`);\n        return;\n      }\n\n      // 각 상품별로 수강 등록 및 결제 처리\n      for (const product of paymentInfo.selectedProducts) {\n        // 1. 상품 정보 조회 (프로그램 정보 포함)\n        const dbProduct = await dbManager.getProductById(product.id);\n        if (!dbProduct) {\n          throw new Error(`상품 정보를 찾을 수 없습니다: ${product.name}`);\n        }\n\n        // 2. 수강 등록 데이터 생성\n        const courseData = {\n          memberId: selectedMember.id,\n          memberName: selectedMember.name,\n          productId: product.id,\n          productName: product.name,\n          productPrice: product.price,\n          programId: dbProduct.programId,\n          programName: dbProduct.programName,\n          programType: dbProduct.programType,\n          branchId: selectedMember.branchId,\n          branchName: selectedMember.branchName,\n          coach: selectedMember.coach,\n          coachName: selectedMember.coachName,\n          enrollmentStatus: unpaidAmount > 0 ? 'unpaid' as const : 'completed' as const,\n          paidAmount: Math.min(product.price, pointPayment + cashPayment),\n          unpaidAmount: Math.max(0, product.price - pointPayment - cashPayment),\n          startDate: new Date(),\n          endDate: dbProduct.programType === '기간제' ? (() => {\n            const endDate = new Date();\n            endDate.setMonth(endDate.getMonth() + 3); // 기본 3개월\n            return endDate;\n          })() : undefined,\n          sessionCount: dbProduct.sessions || undefined,\n          completedSessions: 0,\n          notes: '새 수강 등록을 통해 등록됨'\n        };\n\n        // 3. 수강 등록 저장\n        const courseId = await dbManager.addCourseEnrollment(courseData);\n\n        // 4. 결제 데이터 생성\n        const paymentData = {\n          memberId: selectedMember.id,\n          memberName: selectedMember.name,\n          branchId: selectedMember.branchId,\n          branchName: selectedMember.branchName,\n          coach: selectedMember.coach,\n          coachName: selectedMember.coachName,\n          paymentMethod: paymentInfo.paymentMethod,\n          paymentStatus: unpaidAmount > 0 ? 'unpaid' as const : 'completed' as const,\n          totalAmount: product.price,\n          paidAmount: Math.min(product.price, pointPayment + cashPayment),\n          unpaidAmount: Math.max(0, product.price - pointPayment - cashPayment),\n          paymentDate: new Date(),\n          paymentType: 'course' as const,\n          relatedCourseId: courseId,\n          relatedAssetId: null,\n          products: [{\n            id: product.id,\n            name: product.name,\n            price: product.price,\n            quantity: 1,\n            programId: dbProduct.programId,\n            programName: dbProduct.programName,\n            programType: dbProduct.programType\n          }],\n          memo: `새 수강 등록 - ${product.name} (수강 ID: ${courseId})`\n        };\n\n        // 5. 결제 정보 저장\n        await dbManager.addPayment(paymentData);\n      }\n\n      // 6. 포인트 사용 처리\n      if (pointPayment > 0) {\n        await dbManager.addPoint({\n          memberId: selectedMember.id,\n          memberName: selectedMember.name,\n          amount: -pointPayment, // 음수로 저장 (사용)\n          type: 'used',\n          source: '수강등록 포인트결제',\n          description: `수강등록 포인트 결제 (${paymentInfo.selectedProducts.map(p => p.name).join(', ')})`\n        });\n      }\n\n      // 7. 초과 금액 포인트 적립 처리\n      if (cashPayment > totalAmount - pointPayment) {\n        const excessAmount = cashPayment - (totalAmount - pointPayment);\n        await dbManager.addPoint({\n          memberId: selectedMember.id,\n          memberName: selectedMember.name,\n          amount: excessAmount,\n          type: 'earned',\n          source: '수강등록 초과금액',\n          description: `수강등록 초과금액 포인트 적립 (${excessAmount.toLocaleString()}원)`\n        });\n      }\n\n      toast.success('수강 등록이 완료되었습니다.');\n      onSuccess();\n      onClose();\n    } catch (error) {\n      console.error('수강 등록 실패:', error);\n      toast.error('수강 등록 중 오류가 발생했습니다.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // 모달 닫기 처리\n  const handleClose = () => {\n    if (isProcessing) return;\n    \n    setSelectedMember(null);\n    setMemberPointBalance(0);\n    setPaymentInfo({\n      selectedProducts: [],\n      paymentMethod: 'card',\n      receivedAmount: 0,\n      pointPayment: 0\n    });\n    onClose();\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      width=\"min(95vw, 1000px)\"\n      header=\"새 수강 등록\"\n      body={\n        <ModalContainer>\n          <LeftPanel>\n            <PanelTitle>회원 검색 및 선택</PanelTitle>\n            <MemberSearchPanel\n              selectedMember={selectedMember}\n              onMemberSelect={handleMemberSelect}\n              memberPointBalance={memberPointBalance}\n            />\n          </LeftPanel>\n          \n          <RightPanel>\n            <PanelTitle>결제 정보</PanelTitle>\n            {!selectedMember ? (\n              <WarningText>\n                먼저 왼쪽에서 회원을 선택해주세요.\n              </WarningText>\n            ) : (\n              <CoursePaymentPanel\n                selectedMember={selectedMember}\n                memberPointBalance={memberPointBalance}\n                paymentInfo={paymentInfo}\n                onPaymentUpdate={handlePaymentUpdate}\n              />\n            )}\n          </RightPanel>\n        </ModalContainer>\n      }\n      footer={\n        <ButtonGroup>\n          <Button variant=\"secondary\" onClick={handleClose} disabled={isProcessing}>\n            취소\n          </Button>\n          <Button \n            onClick={handleRegisterCourse} \n            disabled={isProcessing || !selectedMember || paymentInfo.selectedProducts.length === 0}\n          >\n            {isProcessing ? '등록 중...' : '수강 등록'}\n          </Button>\n        </ButtonGroup>\n      }\n    />\n  );\n};\n\nexport default CourseRegistrationModal;"
        }
    ]
}