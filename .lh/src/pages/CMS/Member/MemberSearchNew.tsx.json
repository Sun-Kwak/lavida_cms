{
    "sourceFile": "src/pages/CMS/Member/MemberSearchNew.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1760256816564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760257923505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n           branchId: member.branchId,\n           coach: member.coach,\n           joinPath: member.joinPath,\n           loginId: member.loginId,\n-          loginPassword: member.loginPassword,\n+          loginPassword: member.loginPassword || '', // null인 경우 빈 문자열로 변환\n           enableLogin: member.enableLogin,\n         },\n         paymentInfo: {\n           selectedProducts: products,\n"
                },
                {
                    "date": 1761373901450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useState, useEffect } from 'react';\n import styled from 'styled-components';\n+import { toast } from 'react-toastify';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Member as DBMember } from '../../../utils/indexedDB';\n import { openPreviewWindow } from './PreviewDocument';\n@@ -326,9 +327,9 @@\n       \n       await openPreviewWindow(formData);\n     } catch (error) {\n       console.error('문서 미리보기 실패:', error);\n-      alert('문서 미리보기 중 오류가 발생했습니다.');\n+      toast.error('문서 미리보기 중 오류가 발생했습니다.');\n     }\n   };\n \n   const clearFilters = () => {\n"
                },
                {
                    "date": 1761378612818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -403,8 +403,9 @@\n                   <TableHeaderCell>이메일</TableHeaderCell>\n                   <TableHeaderCell>지점</TableHeaderCell>\n                   <TableHeaderCell>담당코치</TableHeaderCell>\n                   <TableHeaderCell>가입경로</TableHeaderCell>\n+                  <TableHeaderCell>라커</TableHeaderCell>\n                   <TableHeaderCell>상태</TableHeaderCell>\n                   <TableHeaderCell>액션</TableHeaderCell>\n                 </TableRow>\n               </TableHeader>\n@@ -417,8 +418,22 @@\n                     <TableCell>{member.branchName || '-'}</TableCell>\n                     <TableCell>{member.coachName || '-'}</TableCell>\n                     <TableCell>{member.joinPath || '-'}</TableCell>\n                     <TableCell>\n+                      {member.lockerInfo ? (\n+                        <div>\n+                          <div style={{ fontWeight: '600', color: AppColors.primary }}>\n+                            {member.lockerInfo.lockerNumber}번\n+                          </div>\n+                          <div style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+                            ~{new Date(member.lockerInfo.endDate).toLocaleDateString()}\n+                          </div>\n+                        </div>\n+                      ) : (\n+                        <span style={{ color: AppColors.onInput1 }}>미사용</span>\n+                      )}\n+                    </TableCell>\n+                    <TableCell>\n                       <StatusBadge $status={member.isActive ? 'active' : 'inactive'}>\n                         {member.isActive ? '활성' : '비활성'}\n                       </StatusBadge>\n                     </TableCell>\n"
                },
                {
                    "date": 1761379597471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Member as DBMember } from '../../../utils/indexedDB';\n import { openPreviewWindow } from './PreviewDocument';\n import { MemberFormData } from './types';\n+import QRCodeModal from '../../../components/QRCodeModal';\n \n const PageContainer = styled.div`\n   width: 100%;\n `;\n@@ -219,8 +220,12 @@\n   const [filteredMembers, setFilteredMembers] = useState<DBMember[]>([]);\n   const [showFilters, setShowFilters] = useState<boolean>(false);\n   const [activeFilters, setActiveFilters] = useState<string[]>([]);\n   const [loading, setLoading] = useState<boolean>(true);\n+  \n+  // QR 모달 관련 상태\n+  const [qrModalOpen, setQrModalOpen] = useState<boolean>(false);\n+  const [selectedMemberForQR, setSelectedMemberForQR] = useState<DBMember | null>(null);\n \n   // 컴포넌트 마운트 시 회원 데이터 로드\n   useEffect(() => {\n     loadMembers();\n@@ -331,8 +336,18 @@\n       toast.error('문서 미리보기 중 오류가 발생했습니다.');\n     }\n   };\n \n+  const handleQRCode = (member: DBMember) => {\n+    setSelectedMemberForQR(member);\n+    setQrModalOpen(true);\n+  };\n+\n+  const handleQRModalClose = () => {\n+    setQrModalOpen(false);\n+    setSelectedMemberForQR(null);\n+  };\n+\n   const clearFilters = () => {\n     setActiveFilters([]);\n     setSearchQuery('');\n     setFilteredMembers(members);\n@@ -405,8 +420,9 @@\n                   <TableHeaderCell>담당코치</TableHeaderCell>\n                   <TableHeaderCell>가입경로</TableHeaderCell>\n                   <TableHeaderCell>라커</TableHeaderCell>\n                   <TableHeaderCell>상태</TableHeaderCell>\n+                  <TableHeaderCell>QR</TableHeaderCell>\n                   <TableHeaderCell>액션</TableHeaderCell>\n                 </TableRow>\n               </TableHeader>\n               <tbody>\n@@ -437,8 +453,13 @@\n                         {member.isActive ? '활성' : '비활성'}\n                       </StatusBadge>\n                     </TableCell>\n                     <TableCell>\n+                      <ActionButton onClick={() => handleQRCode(member)}>\n+                        QR\n+                      </ActionButton>\n+                    </TableCell>\n+                    <TableCell>\n                       <ActionButtons>\n                         <ActionButton onClick={() => handlePreviewDocument(member)}>\n                           문서보기\n                         </ActionButton>\n@@ -457,8 +478,18 @@\n             </EmptyStateDescription>\n           </EmptyState>\n         )}\n       </ResultsSection>\n+      \n+      {/* QR 코드 모달 */}\n+      {selectedMemberForQR && (\n+        <QRCodeModal\n+          isOpen={qrModalOpen}\n+          onClose={handleQRModalClose}\n+          memberName={selectedMemberForQR.name}\n+          memberId={selectedMemberForQR.id}\n+        />\n+      )}\n     </PageContainer>\n   );\n };\n \n"
                }
            ],
            "date": 1760256816564,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\nimport { dbManager, type Member as DBMember } from '../../../utils/indexedDB';\nimport { openPreviewWindow } from './PreviewDocument';\nimport { MemberFormData } from './types';\n\nconst PageContainer = styled.div`\n  width: 100%;\n`;\n\nconst SearchSection = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  padding: 24px;\n  margin-bottom: 24px;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n`;\n\nconst SearchRow = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: center;\n  margin-bottom: 16px;\n`;\n\nconst SearchInput = styled.input`\n  flex: 1;\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  outline: none;\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n  padding: 12px 18px;\n  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n  border-radius: 8px;\n  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    opacity: 0.9;\n    transform: translateY(-1px);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst FilterRow = styled.div<{ $visible: boolean }>`\n  display: ${props => props.$visible ? 'flex' : 'none'};\n  gap: 8px;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst FilterLabel = styled.span`\n  font-size: ${AppTextStyles.label2.fontSize};\n  color: ${AppColors.onInput1};\n  font-weight: 500;\n`;\n\nconst FilterChip = styled.button<{ $active: boolean }>`\n  padding: 6px 12px;\n  border: 1px solid ${props => props.$active ? AppColors.primary : AppColors.borderLight};\n  border-radius: 20px;\n  background: ${props => props.$active ? AppColors.primary : AppColors.surface};\n  color: ${props => props.$active ? AppColors.onPrimary : AppColors.onSurface};\n  font-size: ${AppTextStyles.label2.fontSize};\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    border-color: ${AppColors.primary};\n    background: ${props => props.$active ? AppColors.primary : 'rgba(0, 123, 255, 0.1)'};\n  }\n`;\n\nconst ResultsSection = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n`;\n\nconst ResultsHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px 24px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n`;\n\nconst ResultsTitle = styled.h2`\n  font-size: ${AppTextStyles.title3.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onBackground};\n  margin: 0;\n`;\n\nconst ResultsCount = styled.span`\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onInput1};\n`;\n\nconst TableContainer = styled.div`\n  overflow-x: auto;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nconst TableHeader = styled.thead`\n  background: #f8f9fa;\n`;\n\nconst TableRow = styled.tr`\n  border-bottom: 1px solid ${AppColors.borderLight};\n  \n  &:hover {\n    background: #f8f9fa;\n  }\n`;\n\nconst TableHeaderCell = styled.th`\n  padding: 12px 16px;\n  text-align: left;\n  font-size: ${AppTextStyles.label2.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onInput1};\n  border-bottom: 1px solid ${AppColors.borderLight};\n`;\n\nconst TableCell = styled.td`\n  padding: 12px 16px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onBackground};\n  vertical-align: middle;\n`;\n\nconst StatusBadge = styled.span<{ $status: 'active' | 'inactive' }>`\n  padding: 4px 8px;\n  border-radius: 12px;\n  font-size: 12px;\n  font-weight: 500;\n  background: ${props => props.$status === 'active' ? '#e7f5e7' : '#fff2f2'};\n  color: ${props => props.$status === 'active' ? '#2d5a2d' : '#8b1538'};\n`;\n\nconst ActionButtons = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst ActionButton = styled.button`\n  padding: 6px 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 4px;\n  background: ${AppColors.surface};\n  color: ${AppColors.primary};\n  font-size: 12px;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    background: ${AppColors.primary};\n    color: ${AppColors.onPrimary};\n  }\n`;\n\nconst EmptyState = styled.div`\n  padding: 60px 24px;\n  text-align: center;\n  color: ${AppColors.onInput1};\n`;\n\nconst EmptyStateTitle = styled.h3`\n  font-size: ${AppTextStyles.title3.fontSize};\n  margin: 0 0 8px 0;\n`;\n\nconst EmptyStateDescription = styled.p`\n  font-size: ${AppTextStyles.body2.fontSize};\n  margin: 0;\n`;\n\nconst LoadingState = styled.div`\n  padding: 60px 24px;\n  text-align: center;\n  color: ${AppColors.onInput1};\n`;\n\nconst MemberSearch: React.FC = () => {\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [members, setMembers] = useState<DBMember[]>([]);\n  const [filteredMembers, setFilteredMembers] = useState<DBMember[]>([]);\n  const [showFilters, setShowFilters] = useState<boolean>(false);\n  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  // 컴포넌트 마운트 시 회원 데이터 로드\n  useEffect(() => {\n    loadMembers();\n  }, []);\n\n  const loadMembers = async () => {\n    try {\n      setLoading(true);\n      const allMembers = await dbManager.getAllMembers();\n      const activeMembers = allMembers.filter(member => member.isActive);\n      setMembers(activeMembers);\n      setFilteredMembers(activeMembers);\n    } catch (error) {\n      console.error('회원 데이터 로드 실패:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSearch = () => {\n    let filtered = members;\n    \n    // 텍스트 검색\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase().trim();\n      filtered = filtered.filter(member =>\n        member.name.toLowerCase().includes(query) ||\n        member.phone.includes(query) ||\n        member.email.toLowerCase().includes(query) ||\n        member.coachName.toLowerCase().includes(query)\n      );\n    }\n    \n    // 필터 적용\n    if (activeFilters.length > 0) {\n      filtered = filtered.filter(member => {\n        return activeFilters.some(filter => {\n          switch (filter) {\n            case '남성':\n              return member.gender === 'male';\n            case '여성':\n              return member.gender === 'female';\n            case '로그인사용':\n              return member.enableLogin;\n            default:\n              return member.branchName === filter; // 지점명으로 필터링\n          }\n        });\n      });\n    }\n    \n    setFilteredMembers(filtered);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const toggleFilter = (filter: string) => {\n    setActiveFilters(prev => \n      prev.includes(filter) \n        ? prev.filter(f => f !== filter)\n        : [...prev, filter]\n    );\n  };\n\n  const handlePreviewDocument = async (member: DBMember) => {\n    try {\n      // 회원 데이터를 MemberFormData 형식으로 변환\n      const payments = await dbManager.getPaymentsByMember(member.id);\n      const products = payments.flatMap(payment => payment.products);\n      \n      const formData: MemberFormData = {\n        basicInfo: {\n          name: member.name,\n          phone: member.phone,\n          email: member.email,\n          birth: member.birth,\n          gender: member.gender,\n          addressInfo: {\n            address: member.address,\n            sigunguCode: member.sigunguCode,\n            dong: member.dong,\n            roadAddress: member.roadAddress,\n            jibunAddress: member.jibunAddress,\n          },\n        },\n        joinInfo: {\n          branchId: member.branchId,\n          coach: member.coach,\n          joinPath: member.joinPath,\n          loginId: member.loginId,\n          loginPassword: member.loginPassword,\n          enableLogin: member.enableLogin,\n        },\n        paymentInfo: {\n          selectedProducts: products,\n          paymentMethod: 'card', // 기본값으로 카드 설정\n        },\n        agreementInfo: member.agreementInfo,\n      };\n      \n      await openPreviewWindow(formData);\n    } catch (error) {\n      console.error('문서 미리보기 실패:', error);\n      alert('문서 미리보기 중 오류가 발생했습니다.');\n    }\n  };\n\n  const clearFilters = () => {\n    setActiveFilters([]);\n    setSearchQuery('');\n    setFilteredMembers(members);\n  };\n\n  // 고유한 지점명들을 필터 옵션으로 생성\n  const branchNames = Array.from(new Set(members.map(member => member.branchName))).filter(Boolean);\n  const filterOptions = ['남성', '여성', '로그인사용', ...branchNames];\n\n  if (loading) {\n    return (\n      <PageContainer>\n        <LoadingState>\n          <h3>회원 데이터를 불러오는 중...</h3>\n        </LoadingState>\n      </PageContainer>\n    );\n  }\n\n  return (\n    <PageContainer>\n      <SearchSection>\n        <SearchRow>\n          <SearchInput\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"회원명, 전화번호, 이메일, 코치명으로 검색...\"\n          />\n          <Button onClick={handleSearch}>검색</Button>\n          <Button variant=\"secondary\" onClick={() => setShowFilters(!showFilters)}>\n            필터\n          </Button>\n          {(activeFilters.length > 0 || searchQuery) && (\n            <Button variant=\"secondary\" onClick={clearFilters}>\n              초기화\n            </Button>\n          )}\n        </SearchRow>\n        \n        <FilterRow $visible={showFilters}>\n          <FilterLabel>필터:</FilterLabel>\n          {filterOptions.map(filter => (\n            <FilterChip\n              key={filter}\n              $active={activeFilters.includes(filter)}\n              onClick={() => toggleFilter(filter)}\n            >\n              {filter}\n            </FilterChip>\n          ))}\n        </FilterRow>\n      </SearchSection>\n\n      <ResultsSection>\n        <ResultsHeader>\n          <ResultsTitle>검색 결과</ResultsTitle>\n          <ResultsCount>총 {filteredMembers.length}명</ResultsCount>\n        </ResultsHeader>\n\n        {filteredMembers.length > 0 ? (\n          <TableContainer>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHeaderCell>이름</TableHeaderCell>\n                  <TableHeaderCell>연락처</TableHeaderCell>\n                  <TableHeaderCell>이메일</TableHeaderCell>\n                  <TableHeaderCell>지점</TableHeaderCell>\n                  <TableHeaderCell>담당코치</TableHeaderCell>\n                  <TableHeaderCell>가입경로</TableHeaderCell>\n                  <TableHeaderCell>상태</TableHeaderCell>\n                  <TableHeaderCell>액션</TableHeaderCell>\n                </TableRow>\n              </TableHeader>\n              <tbody>\n                {filteredMembers.map(member => (\n                  <TableRow key={member.id}>\n                    <TableCell>{member.name}</TableCell>\n                    <TableCell>{member.phone}</TableCell>\n                    <TableCell>{member.email || '-'}</TableCell>\n                    <TableCell>{member.branchName || '-'}</TableCell>\n                    <TableCell>{member.coachName || '-'}</TableCell>\n                    <TableCell>{member.joinPath || '-'}</TableCell>\n                    <TableCell>\n                      <StatusBadge $status={member.isActive ? 'active' : 'inactive'}>\n                        {member.isActive ? '활성' : '비활성'}\n                      </StatusBadge>\n                    </TableCell>\n                    <TableCell>\n                      <ActionButtons>\n                        <ActionButton onClick={() => handlePreviewDocument(member)}>\n                          문서보기\n                        </ActionButton>\n                      </ActionButtons>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </tbody>\n            </Table>\n          </TableContainer>\n        ) : (\n          <EmptyState>\n            <EmptyStateTitle>검색 결과가 없습니다</EmptyStateTitle>\n            <EmptyStateDescription>\n              다른 검색어를 입력하거나 필터를 조정해보세요.\n            </EmptyStateDescription>\n          </EmptyState>\n        )}\n      </ResultsSection>\n    </PageContainer>\n  );\n};\n\nexport default MemberSearch;\n"
        }
    ]
}