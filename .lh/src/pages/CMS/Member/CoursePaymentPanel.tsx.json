{
    "sourceFile": "src/pages/CMS/Member/CoursePaymentPanel.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1761132526106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761132724829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,10 @@\n   height: 100%;\n   display: flex;\n   flex-direction: column;\n   overflow-y: auto;\n+  width: 100%;\n+  box-sizing: border-box;\n `;\n \n const FormField = styled.div`\n   margin-bottom: 16px;\n@@ -69,12 +71,14 @@\n `;\n \n const Input = styled.input`\n   width: 100%;\n+  max-width: 100%;\n   padding: 8px 12px;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 4px;\n   font-size: ${AppTextStyles.body2.fontSize};\n+  box-sizing: border-box;\n   \n   &:focus {\n     outline: none;\n     border-color: ${AppColors.primary};\n"
                },
                {
                    "date": 1761132743415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,16 @@\n   flex-direction: column;\n   overflow-y: auto;\n   width: 100%;\n   box-sizing: border-box;\n+  \n+  /* 스크롤바 숨기기 */\n+  scrollbar-width: none; /* Firefox */\n+  -ms-overflow-style: none; /* Internet Explorer 10+ */\n+  \n+  &::-webkit-scrollbar {\n+    display: none; /* Chrome, Safari, Opera */\n+  }\n `;\n \n const FormField = styled.div`\n   margin-bottom: 16px;\n"
                },
                {
                    "date": 1761132973772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,8 +321,9 @@\n         <CustomDropdown\n           value={paymentInfo.paymentMethod || 'card'}\n           onChange={handlePaymentMethodChange}\n           options={paymentMethodOptions}\n+          inModal={true}\n         />\n       </FormField>\n \n       <FormField>\n@@ -331,8 +332,9 @@\n           value=\"\"\n           onChange={handleProductSelect}\n           options={getProductOptions()}\n           disabled={loading || availableProducts.length === 0}\n+          inModal={true}\n         />\n         {availableProducts.length === 0 && !loading && (\n           <InfoText>\n             선택한 지점에 등록된 상품이 없습니다.\n"
                },
                {
                    "date": 1761133103794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,18 +287,28 @@\n   // 포인트 결제 금액 변경\n   const handlePointPaymentChange = (value: number) => {\n     const maxPoint = Math.min(memberPointBalance, totalAmount);\n     const pointPayment = Math.max(0, Math.min(value, maxPoint));\n+    \n+    // 포인트 변경 시 받은 금액도 함께 업데이트\n+    const newReceivedAmount = pointPayment + Math.max(0, totalAmount - pointPayment);\n+    \n     onPaymentUpdate({\n-      pointPayment: pointPayment\n+      pointPayment: pointPayment,\n+      receivedAmount: newReceivedAmount\n     });\n   };\n \n   // 전체 포인트 사용\n   const handleUseAllPoints = () => {\n     const maxUsablePoint = Math.min(memberPointBalance, totalAmount);\n+    \n+    // 전체 포인트 사용 시 받은 금액도 함께 업데이트\n+    const newReceivedAmount = maxUsablePoint + Math.max(0, totalAmount - maxUsablePoint);\n+    \n     onPaymentUpdate({\n-      pointPayment: maxUsablePoint\n+      pointPayment: maxUsablePoint,\n+      receivedAmount: newReceivedAmount\n     });\n   };\n \n   const totalAmount = paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n"
                },
                {
                    "date": 1761133463101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,10 +251,15 @@\n   };\n \n   // 상품 추가\n   const handleProductAdd = (product: Product) => {\n+    const newProducts = [...paymentInfo.selectedProducts, product];\n+    const newTotalAmount = newProducts.reduce((sum, p) => sum + p.price, 0);\n+    const currentPointPayment = paymentInfo.pointPayment || 0;\n+    \n     onPaymentUpdate({\n-      selectedProducts: [...paymentInfo.selectedProducts, product]\n+      selectedProducts: newProducts,\n+      receivedAmount: Math.max(0, newTotalAmount - currentPointPayment) // 기본 받은금액 설정\n     });\n   };\n \n   // 상품 제거\n@@ -264,10 +269,14 @@\n       const firstMatchIndex = paymentInfo.selectedProducts.findIndex(product => product.id === productId);\n       return index !== firstMatchIndex;\n     });\n     \n+    const newTotalAmount = updatedProducts.reduce((sum, p) => sum + p.price, 0);\n+    const currentPointPayment = paymentInfo.pointPayment || 0;\n+    \n     onPaymentUpdate({\n-      selectedProducts: updatedProducts\n+      selectedProducts: updatedProducts,\n+      receivedAmount: Math.max(0, newTotalAmount - currentPointPayment) // 받은금액 재계산\n     });\n   };\n \n   // 결제 방법 변경\n@@ -288,34 +297,35 @@\n   const handlePointPaymentChange = (value: number) => {\n     const maxPoint = Math.min(memberPointBalance, totalAmount);\n     const pointPayment = Math.max(0, Math.min(value, maxPoint));\n     \n-    // 포인트 변경 시 받은 금액도 함께 업데이트\n-    const newReceivedAmount = pointPayment + Math.max(0, totalAmount - pointPayment);\n+    // 포인트 변경 시 받은 금액(현금/카드)은 총액에서 포인트를 뺀 금액으로 설정\n+    const cashAmount = Math.max(0, totalAmount - pointPayment);\n     \n     onPaymentUpdate({\n       pointPayment: pointPayment,\n-      receivedAmount: newReceivedAmount\n+      receivedAmount: cashAmount\n     });\n   };\n \n   // 전체 포인트 사용\n   const handleUseAllPoints = () => {\n     const maxUsablePoint = Math.min(memberPointBalance, totalAmount);\n     \n-    // 전체 포인트 사용 시 받은 금액도 함께 업데이트\n-    const newReceivedAmount = maxUsablePoint + Math.max(0, totalAmount - maxUsablePoint);\n+    // 전체 포인트 사용 시 받은 금액(현금/카드)은 총액에서 포인트를 뺀 금액으로 설정\n+    const cashAmount = Math.max(0, totalAmount - maxUsablePoint);\n     \n     onPaymentUpdate({\n       pointPayment: maxUsablePoint,\n-      receivedAmount: newReceivedAmount\n+      receivedAmount: cashAmount\n     });\n   };\n \n   const totalAmount = paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n   const pointPayment = paymentInfo.pointPayment || 0;\n-  const cashPayment = (paymentInfo.receivedAmount || 0) - pointPayment;\n-  const unpaidAmount = Math.max(0, totalAmount - pointPayment - cashPayment);\n+  const cashPayment = paymentInfo.receivedAmount || 0; // 현금/카드 결제 금액\n+  const totalReceived = pointPayment + cashPayment; // 총 받은 금액 (포인트 + 현금/카드)\n+  const unpaidAmount = Math.max(0, totalAmount - totalReceived);\n \n   // 결제 방법 옵션\n   const paymentMethodOptions = [\n     { value: 'card', label: '카드' },\n@@ -403,12 +413,12 @@\n           <FormField>\n             <Label>받은금액 (현금/카드)</Label>\n             <Input\n               type=\"number\"\n-              value={paymentInfo.receivedAmount || totalAmount - pointPayment}\n+              value={paymentInfo.receivedAmount !== undefined ? paymentInfo.receivedAmount : Math.max(0, totalAmount - pointPayment)}\n               onChange={(e) => {\n                 const value = e.target.value ? parseFloat(e.target.value) : 0;\n-                handleReceivedAmountChange(value + pointPayment);\n+                handleReceivedAmountChange(value);\n               }}\n               placeholder=\"받은 금액을 입력하세요\"\n             />\n             {cashPayment !== totalAmount - pointPayment && (\n@@ -431,10 +441,14 @@\n               <span>{pointPayment.toLocaleString()}원</span>\n             </SummaryRow>\n             <SummaryRow>\n               <span>현금/카드 결제:</span>\n-              <span>{Math.max(0, cashPayment).toLocaleString()}원</span>\n+              <span>{cashPayment.toLocaleString()}원</span>\n             </SummaryRow>\n+            <SummaryRow>\n+              <span>총 받은금액:</span>\n+              <span>{totalReceived.toLocaleString()}원</span>\n+            </SummaryRow>\n             {unpaidAmount > 0 && (\n               <SummaryRow style={{ color: '#d32f2f' }}>\n                 <span>미수금:</span>\n                 <span>{unpaidAmount.toLocaleString()}원</span>\n"
                },
                {
                    "date": 1761133654672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,10 +329,9 @@\n   // 결제 방법 옵션\n   const paymentMethodOptions = [\n     { value: 'card', label: '카드' },\n     { value: 'cash', label: '현금' },\n-    { value: 'transfer', label: '계좌이체' },\n-    { value: 'point', label: '포인트' }\n+    { value: 'transfer', label: '계좌이체' }\n   ];\n \n   return (\n     <Container>\n"
                },
                {
                    "date": 1761373763951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -422,9 +422,20 @@\n             />\n             {cashPayment !== totalAmount - pointPayment && (\n               <InfoText>\n                 {cashPayment > totalAmount - pointPayment\n-                  ? `초과금액: ${(cashPayment - (totalAmount - pointPayment)).toLocaleString()}원 (포인트로 적립 예정)`\n+                  ? (() => {\n+                      const excessAmount = cashPayment - (totalAmount - pointPayment);\n+                      let message = `초과금액: ${excessAmount.toLocaleString()}원 (포인트로 적립 예정)`;\n+                      \n+                      if (excessAmount >= 1000000) {\n+                        const millionUnits = Math.floor(excessAmount / 1000000);\n+                        const bonusPoints = millionUnits * 100000;\n+                        message += ` + 보너스 ${bonusPoints.toLocaleString()}원`;\n+                      }\n+                      \n+                      return message;\n+                    })()\n                   : `부족금액: ${((totalAmount - pointPayment) - cashPayment).toLocaleString()}원 (미수금으로 처리 예정)`\n                 }\n               </InfoText>\n             )}\n"
                },
                {
                    "date": 1761459688944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,780 @@\n+import React, { useState, useEffect } from 'react';\n+import styled from 'styled-components';\n+import { dbManager, type Member, type Product as DBProduct } from '../../../utils/indexedDB';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+\n+const Container = styled.div`\n+  height: 100%;\n+  display: flex;\n+  flex-direction: column;\n+  overflow-y: auto;\n+  width: 100%;\n+  box-sizing: border-box;\n+  \n+  /* 스크롤바 숨기기 */\n+  scrollbar-width: none; /* Firefox */\n+  -ms-overflow-style: none; /* Internet Explorer 10+ */\n+  \n+  &::-webkit-scrollbar {\n+    display: none; /* Chrome, Safari, Opera */\n+  }\n+`;\n+\n+const FormField = styled.div`\n+  margin-bottom: 16px;\n+`;\n+\n+const Label = styled.label`\n+  display: block;\n+  font-weight: 600;\n+  color: ${AppColors.onBackground};\n+  margin-bottom: 8px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const ProductItem = styled.div`\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  padding: 12px;\n+  background: ${AppColors.surface};\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  margin-bottom: 8px;\n+`;\n+\n+const ProductInfo = styled.div`\n+  flex: 1;\n+`;\n+\n+const ProductName = styled.div`\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  margin-bottom: 4px;\n+`;\n+\n+const RemoveButton = styled.button`\n+  background: #ff4444;\n+  color: white;\n+  border: none;\n+  border-radius: 50%;\n+  width: 24px;\n+  height: 24px;\n+  cursor: pointer;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  font-size: 12px;\n+  \n+  &:hover {\n+    background: #cc3333;\n+  }\n+`;\n+\n+const Input = styled.input`\n+  width: 100%;\n+  max-width: 100%;\n+  padding: 8px 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 4px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  box-sizing: border-box;\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+    box-shadow: 0 0 0 2px ${AppColors.primary}20;\n+  }\n+  \n+  &:disabled {\n+    background: ${AppColors.disabled};\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const PaymentSummary = styled.div`\n+  background: ${AppColors.surface};\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  padding: 16px;\n+  margin-top: 16px;\n+`;\n+\n+const SummaryRow = styled.div`\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  margin-bottom: 8px;\n+  \n+  &:last-child {\n+    margin-bottom: 0;\n+    padding-top: 8px;\n+    border-top: 1px solid ${AppColors.borderLight};\n+    font-weight: 700;\n+  }\n+`;\n+\n+const PointPaymentSection = styled.div`\n+  background: ${AppColors.primary}10;\n+  border: 1px solid ${AppColors.primary}30;\n+  border-radius: 8px;\n+  padding: 16px;\n+  margin: 16px 0;\n+`;\n+\n+const PointInputRow = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 12px;\n+  margin-top: 8px;\n+`;\n+\n+const PointUseButton = styled.button`\n+  background: ${AppColors.primary};\n+  color: ${AppColors.onPrimary};\n+  border: none;\n+  border-radius: 4px;\n+  padding: 6px 12px;\n+  font-size: ${AppTextStyles.body3.fontSize};\n+  cursor: pointer;\n+  white-space: nowrap;\n+  \n+  &:hover {\n+    opacity: 0.9;\n+  }\n+`;\n+\n+const WarningText = styled.div`\n+  background: #fff3cd;\n+  border: 1px solid #ffeaa7;\n+  border-radius: 8px;\n+  padding: 12px;\n+  margin: 16px 0;\n+  color: #856404;\n+  font-size: ${AppTextStyles.body3.fontSize};\n+  text-align: center;\n+`;\n+\n+const InfoText = styled.div`\n+  font-size: ${AppTextStyles.body3.fontSize};\n+  color: ${AppColors.onInput1};\n+  margin-top: 8px;\n+  line-height: 1.4;\n+`;\n+\n+interface Product {\n+  id: string;\n+  name: string;\n+  originalPrice?: number; // DB에서 가져온 기본 가격\n+  basePrice?: number; // 기준 가격\n+  price: number; // 상품금액 (계산될 정확한 금액)\n+  appliedPrice?: number; // 적용금액 (사용자가 조정할 수 있는 최종 금액)\n+  description?: string;\n+  programType?: string; // '기간제' | '횟수제'\n+  // 기간제 관련\n+  duration?: number; // 기간(일)\n+  baseDuration?: number; // 기준 기간\n+  startDate?: Date;\n+  endDate?: Date;\n+  // 횟수제 관련\n+  sessions?: number; // 수업 횟수\n+  baseSessions?: number; // 기준 횟수\n+}\n+\n+interface PaymentInfo {\n+  selectedProducts: Product[];\n+  paymentMethod: string;\n+  receivedAmount?: number;\n+  pointPayment?: number;\n+}\n+\n+interface CoursePaymentPanelProps {\n+  selectedMember: Member;\n+  memberPointBalance: number;\n+  paymentInfo: PaymentInfo;\n+  onPaymentUpdate: (updates: Partial<PaymentInfo>) => void;\n+}\n+\n+const CoursePaymentPanel: React.FC<CoursePaymentPanelProps> = ({\n+  selectedMember,\n+  memberPointBalance,\n+  paymentInfo,\n+  onPaymentUpdate\n+}) => {\n+  const [availableProducts, setAvailableProducts] = useState<DBProduct[]>([]);\n+  const [loading, setLoading] = useState(false);\n+\n+  // 기간제 상품의 금액 계산 (기본 한달 기준으로 일할 계산)\n+  const calculatePeriodPrice = (basePrice: number, days: number): number => {\n+    const baseDays = 30; // 기본 한달 (30일) 기준\n+    return Math.round((basePrice / baseDays) * days);\n+  };\n+\n+  // 횟수제 상품의 금액 계산 (기준 횟수 대비 비례 계산)\n+  const calculateSessionPrice = (basePrice: number, sessions: number, baseSessions: number): number => {\n+    return Math.round((basePrice / baseSessions) * sessions);\n+  };\n+\n+  // 선택된 회원의 지점별 상품 목록 로드\n+  useEffect(() => {\n+    if (selectedMember.branchId) {\n+      loadProductsByBranch(selectedMember.branchId);\n+    } else {\n+      setAvailableProducts([]);\n+    }\n+  }, [selectedMember.branchId]);\n+\n+  // 지점별 상품 로드\n+  const loadProductsByBranch = async (branchId: string) => {\n+    setLoading(true);\n+    try {\n+      const products = await dbManager.getProductsByBranch(branchId);\n+      // 활성 상품만 필터링\n+      const activeProducts = products.filter(product => product.isActive);\n+      setAvailableProducts(activeProducts);\n+    } catch (error) {\n+      console.error('상품 로드 실패:', error);\n+      setAvailableProducts([]);\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  // 상품 선택 옵션 생성\n+  const getProductOptions = () => [\n+    { value: '', label: loading ? '상품 로딩 중...' : '상품을 선택하세요' },\n+    ...availableProducts.map(product => ({\n+      value: product.id,\n+      label: `${product.name} - ${product.price?.toLocaleString() || '가격미정'}원${product.programType === '기간제' ? ' (기간제)' : ''}`\n+    }))\n+  ];\n+\n+  // 상품 선택 처리\n+  const handleProductSelect = (value: string) => {\n+    if (value) {\n+      const product = availableProducts.find(p => p.id === value);\n+      if (product) {\n+        // DBProduct를 Product 타입으로 변환\n+        const convertedProduct: Product = {\n+          id: product.id,\n+          name: product.name,\n+          originalPrice: product.price || 0, // DB에서 가져온 기본 가격\n+          basePrice: product.price || 0, // 기준 가격\n+          price: product.price || 0, // 상품금액 (계산될 정확한 금액)\n+          appliedPrice: product.price || 0, // 적용금액 (사용자가 조정할 수 있는 최종 금액)\n+          description: product.description,\n+          programType: product.programType\n+        };\n+\n+        // 기간제인 경우 기본 30일 설정\n+        if (product.programType === '기간제') {\n+          const tomorrow = new Date();\n+          tomorrow.setDate(tomorrow.getDate() + 1);\n+          const endDate = new Date(tomorrow);\n+          endDate.setDate(endDate.getDate() + 30);\n+          \n+          convertedProduct.duration = 30;\n+          convertedProduct.baseDuration = 30;\n+          convertedProduct.startDate = tomorrow;\n+          convertedProduct.endDate = endDate;\n+          // 계산된 정확한 상품금액\n+          convertedProduct.price = calculatePeriodPrice(product.price || 0, 30);\n+          // 적용금액도 초기에는 계산된 금액과 동일\n+          convertedProduct.appliedPrice = convertedProduct.price;\n+        }\n+        // 횟수제인 경우 기본 횟수 설정\n+        else if (product.programType === '횟수제') {\n+          const defaultSessions = 10; // 기본 10회\n+          convertedProduct.sessions = defaultSessions;\n+          convertedProduct.baseSessions = defaultSessions;\n+          // 계산된 정확한 상품금액\n+          convertedProduct.price = calculateSessionPrice(product.price || 0, defaultSessions, defaultSessions);\n+          // 적용금액도 초기에는 계산된 금액과 동일\n+          convertedProduct.appliedPrice = convertedProduct.price;\n+        }\n+\n+        handleProductAdd(convertedProduct);\n+      }\n+    }\n+  };\n+\n+  // 상품 추가\n+  const handleProductAdd = (product: Product) => {\n+    const newProducts = [...paymentInfo.selectedProducts, product];\n+    const newTotalAmount = newProducts.reduce((sum, p) => sum + (p.appliedPrice || p.price), 0);\n+    const currentPointPayment = paymentInfo.pointPayment || 0;\n+    \n+    onPaymentUpdate({\n+      selectedProducts: newProducts,\n+      receivedAmount: Math.max(0, newTotalAmount - currentPointPayment) // 기본 받은금액 설정\n+    });\n+  };\n+\n+  // 상품 편집 (기간, 횟수, 가격 등)\n+  const handleProductEdit = (index: number, field: string, value: any) => {\n+    const updatedProducts = [...paymentInfo.selectedProducts];\n+    const product = { ...updatedProducts[index] };\n+    \n+    if (field === 'duration') {\n+      product.duration = value;\n+      if (product.programType === '기간제' && product.startDate) {\n+        // 기간제: 종료일 재계산\n+        const endDate = new Date(product.startDate);\n+        endDate.setDate(endDate.getDate() + value);\n+        product.endDate = endDate;\n+        // 상품금액 재계산\n+        const basePrice = product.basePrice || product.originalPrice || 0;\n+        product.price = calculatePeriodPrice(basePrice, value);\n+        product.appliedPrice = product.price; // 적용금액도 함께 업데이트\n+      }\n+    } else if (field === 'sessions') {\n+      product.sessions = value;\n+      if (product.programType === '횟수제') {\n+        // 횟수제: 횟수에 따른 상품금액 재계산\n+        const basePrice = product.basePrice || product.originalPrice || 0;\n+        const baseSessions = product.baseSessions || 10; // 기준 횟수\n+        product.price = calculateSessionPrice(basePrice, value, baseSessions);\n+        product.appliedPrice = product.price; // 적용금액도 함께 업데이트\n+      }\n+    } else if (field === 'startDate') {\n+      product.startDate = value;\n+      if (product.programType === '기간제' && product.duration) {\n+        // 시작일 변경 시 종료일 재계산\n+        const endDate = new Date(value);\n+        endDate.setDate(endDate.getDate() + product.duration);\n+        product.endDate = endDate;\n+      }\n+    } else if (field === 'appliedPrice') {\n+      // 적용금액은 사용자가 직접 수정 가능\n+      product.appliedPrice = value;\n+    }\n+    \n+    updatedProducts[index] = product;\n+    \n+    // 총액 재계산 후 받은금액 업데이트\n+    const newTotalAmount = updatedProducts.reduce((sum, p) => sum + (p.appliedPrice || p.price), 0);\n+    const currentPointPayment = paymentInfo.pointPayment || 0;\n+    \n+    onPaymentUpdate({\n+      selectedProducts: updatedProducts,\n+      receivedAmount: Math.max(0, newTotalAmount - currentPointPayment)\n+    });\n+  };\n+\n+  // 상품 제거\n+  const handleProductRemove = (productId: string) => {\n+    const updatedProducts = paymentInfo.selectedProducts.filter((p, index) => {\n+      // 같은 상품이 여러 개 있을 수 있으므로 첫 번째 것만 제거\n+      const firstMatchIndex = paymentInfo.selectedProducts.findIndex(product => product.id === productId);\n+      return index !== firstMatchIndex;\n+    });\n+    \n+    const newTotalAmount = updatedProducts.reduce((sum, p) => sum + (p.appliedPrice || p.price), 0);\n+    const currentPointPayment = paymentInfo.pointPayment || 0;\n+    \n+    onPaymentUpdate({\n+      selectedProducts: updatedProducts,\n+      receivedAmount: Math.max(0, newTotalAmount - currentPointPayment) // 받은금액 재계산\n+    });\n+  };\n+\n+  // 결제 방법 변경\n+  const handlePaymentMethodChange = (value: string) => {\n+    onPaymentUpdate({\n+      paymentMethod: value\n+    });\n+  };\n+\n+  // 받은 금액 변경\n+  const handleReceivedAmountChange = (value: number) => {\n+    onPaymentUpdate({\n+      receivedAmount: value\n+    });\n+  };\n+\n+  // 포인트 결제 금액 변경\n+  const handlePointPaymentChange = (value: number) => {\n+    const maxPoint = Math.min(memberPointBalance, totalAmount);\n+    const pointPayment = Math.max(0, Math.min(value, maxPoint));\n+    \n+    // 포인트 변경 시 받은 금액(현금/카드)은 총액에서 포인트를 뺀 금액으로 설정\n+    const cashAmount = Math.max(0, totalAmount - pointPayment);\n+    \n+    onPaymentUpdate({\n+      pointPayment: pointPayment,\n+      receivedAmount: cashAmount\n+    });\n+  };\n+\n+  // 전체 포인트 사용\n+  const handleUseAllPoints = () => {\n+    const maxUsablePoint = Math.min(memberPointBalance, totalAmount);\n+    \n+    // 전체 포인트 사용 시 받은 금액(현금/카드)은 총액에서 포인트를 뺀 금액으로 설정\n+    const cashAmount = Math.max(0, totalAmount - maxUsablePoint);\n+    \n+    onPaymentUpdate({\n+      pointPayment: maxUsablePoint,\n+      receivedAmount: cashAmount\n+    });\n+  };\n+\n+  const totalAmount = paymentInfo.selectedProducts.reduce((sum, product) => {\n+    return sum + (product.appliedPrice || product.price);\n+  }, 0);\n+  const pointPayment = paymentInfo.pointPayment || 0;\n+  const cashPayment = paymentInfo.receivedAmount || 0; // 현금/카드 결제 금액\n+  const totalReceived = pointPayment + cashPayment; // 총 받은 금액 (포인트 + 현금/카드)\n+  const unpaidAmount = Math.max(0, totalAmount - totalReceived);\n+\n+  // 결제 방법 옵션\n+  const paymentMethodOptions = [\n+    { value: 'card', label: '카드' },\n+    { value: 'cash', label: '현금' },\n+    { value: 'transfer', label: '계좌이체' }\n+  ];\n+\n+  return (\n+    <Container>\n+      <FormField>\n+        <Label>결제 방법</Label>\n+        <CustomDropdown\n+          value={paymentInfo.paymentMethod || 'card'}\n+          onChange={handlePaymentMethodChange}\n+          options={paymentMethodOptions}\n+          inModal={true}\n+        />\n+      </FormField>\n+\n+      <FormField>\n+        <Label>상품 추가</Label>\n+        <CustomDropdown\n+          value=\"\"\n+          onChange={handleProductSelect}\n+          options={getProductOptions()}\n+          disabled={loading || availableProducts.length === 0}\n+          inModal={true}\n+        />\n+        {availableProducts.length === 0 && !loading && (\n+          <InfoText>\n+            선택한 지점에 등록된 상품이 없습니다.\n+          </InfoText>\n+        )}\n+      </FormField>\n+\n+      {paymentInfo.selectedProducts.length > 0 && (\n+        <FormField>\n+          <Label>선택된 상품</Label>\n+          {paymentInfo.selectedProducts.map((product, index) => (\n+            <ProductItem key={`${product.id}-${index}`} style={{ marginBottom: '16px' }}>\n+              <ProductInfo style={{ flex: 1 }}>\n+                <ProductName>{product.name}</ProductName>\n+                \n+                {/* 기간제 상품 편집 */}\n+                {product.programType === '기간제' && (\n+                  <div style={{ \n+                    marginTop: '8px', \n+                    padding: '12px', \n+                    backgroundColor: '#f8f9fa', \n+                    borderRadius: '6px',\n+                    border: '1px solid #e9ecef'\n+                  }}>\n+                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginBottom: '8px' }}>\n+                      <div>\n+                        <label style={{ \n+                          fontSize: '12px', \n+                          color: '#666', \n+                          display: 'block', \n+                          marginBottom: '6px',\n+                          fontWeight: '500'\n+                        }}>\n+                          시작일\n+                        </label>\n+                        <input\n+                          type=\"date\"\n+                          value={product.startDate ? product.startDate.toISOString().split('T')[0] : ''}\n+                          onChange={(e) => handleProductEdit(index, 'startDate', new Date(e.target.value))}\n+                          style={{\n+                            width: '100%',\n+                            padding: '8px 10px',\n+                            border: '1px solid #ddd',\n+                            borderRadius: '4px',\n+                            fontSize: '13px',\n+                            boxSizing: 'border-box',\n+                            height: '36px'\n+                          }}\n+                        />\n+                      </div>\n+                      <div>\n+                        <label style={{ \n+                          fontSize: '12px', \n+                          color: '#666', \n+                          display: 'block', \n+                          marginBottom: '6px',\n+                          fontWeight: '500'\n+                        }}>\n+                          기간(일)\n+                        </label>\n+                        <input\n+                          type=\"number\"\n+                          min=\"1\"\n+                          max=\"365\"\n+                          value={product.duration || 30}\n+                          onChange={(e) => handleProductEdit(index, 'duration', parseInt(e.target.value) || 1)}\n+                          style={{\n+                            width: '100%',\n+                            padding: '8px 10px',\n+                            border: '1px solid #ddd',\n+                            borderRadius: '4px',\n+                            fontSize: '13px',\n+                            boxSizing: 'border-box',\n+                            height: '36px'\n+                          }}\n+                        />\n+                      </div>\n+                    </div>\n+                    {product.endDate && (\n+                      <div style={{ \n+                        fontSize: '11px', \n+                        color: '#666',\n+                        marginTop: '4px',\n+                        padding: '4px 8px',\n+                        backgroundColor: '#fff',\n+                        borderRadius: '3px',\n+                        border: '1px solid #e9ecef'\n+                      }}>\n+                        종료일: {product.endDate.toLocaleDateString()}\n+                      </div>\n+                    )}\n+                  </div>\n+                )}\n+\n+                {/* 횟수제 상품 편집 */}\n+                {product.programType === '횟수제' && (\n+                  <div style={{ \n+                    marginTop: '8px', \n+                    padding: '12px', \n+                    backgroundColor: '#f8f9fa', \n+                    borderRadius: '6px',\n+                    border: '1px solid #e9ecef'\n+                  }}>\n+                    <div>\n+                      <label style={{ \n+                        fontSize: '12px', \n+                        color: '#666', \n+                        display: 'block', \n+                        marginBottom: '6px',\n+                        fontWeight: '500'\n+                      }}>\n+                        수업 횟수\n+                      </label>\n+                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n+                        <input\n+                          type=\"number\"\n+                          min=\"1\"\n+                          max=\"100\"\n+                          value={product.sessions || 10}\n+                          onChange={(e) => handleProductEdit(index, 'sessions', parseInt(e.target.value) || 1)}\n+                          style={{\n+                            width: '100px',\n+                            padding: '8px 10px',\n+                            border: '1px solid #ddd',\n+                            borderRadius: '4px',\n+                            fontSize: '13px',\n+                            boxSizing: 'border-box',\n+                            height: '36px'\n+                          }}\n+                        />\n+                        <span style={{ fontSize: '13px', color: '#666', fontWeight: '500' }}>회</span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                )}\n+\n+                {/* 가격 정보 */}\n+                <div style={{ \n+                  marginTop: '12px', \n+                  padding: '12px', \n+                  backgroundColor: '#fff', \n+                  borderRadius: '6px',\n+                  border: '1px solid #ddd'\n+                }}>\n+                  <div style={{ marginBottom: '10px' }}>\n+                    <span style={{ fontSize: '12px', color: '#666', fontWeight: '500' }}>상품금액: </span>\n+                    <span style={{ fontSize: '14px', fontWeight: 'bold', color: '#333' }}>\n+                      {product.price.toLocaleString()}원\n+                    </span>\n+                    {product.price !== (product.originalPrice || 0) && (\n+                      <span style={{ \n+                        fontSize: '11px', \n+                        color: '#999', \n+                        textDecoration: 'line-through',\n+                        marginLeft: '8px'\n+                      }}>\n+                        (원가: {(product.originalPrice || 0).toLocaleString()}원)\n+                      </span>\n+                    )}\n+                  </div>\n+                  \n+                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n+                    <label style={{ \n+                      fontSize: '12px', \n+                      color: '#666', \n+                      minWidth: '60px',\n+                      fontWeight: '500'\n+                    }}>\n+                      적용금액:\n+                    </label>\n+                    <input\n+                      type=\"number\"\n+                      min=\"0\"\n+                      step=\"1000\"\n+                      value={product.appliedPrice || product.price}\n+                      onChange={(e) => handleProductEdit(index, 'appliedPrice', parseInt(e.target.value) || 0)}\n+                      style={{\n+                        width: '120px',\n+                        padding: '8px 10px',\n+                        border: '1px solid #ddd',\n+                        borderRadius: '4px',\n+                        fontSize: '14px',\n+                        fontWeight: 'bold',\n+                        color: '#0066cc',\n+                        boxSizing: 'border-box',\n+                        height: '36px'\n+                      }}\n+                    />\n+                    <span style={{ fontSize: '14px', fontWeight: 'bold', color: '#0066cc' }}>원</span>\n+                    \n+                    {/* 상품금액 대비 적용금액 차이 표시 */}\n+                    {(product.appliedPrice || product.price) !== product.price && (\n+                      <span style={{ \n+                        fontSize: '11px', \n+                        color: (product.appliedPrice || product.price) > product.price ? '#dc3545' : '#28a745',\n+                        fontWeight: 'bold',\n+                        marginLeft: '4px'\n+                      }}>\n+                        ({(product.appliedPrice || product.price) > product.price ? '+' : ''}\n+                        {((product.appliedPrice || product.price) - product.price).toLocaleString()}원)\n+                      </span>\n+                    )}\n+                  </div>\n+                </div>\n+              </ProductInfo>\n+              \n+              <RemoveButton\n+                onClick={() => handleProductRemove(product.id)}\n+                style={{ alignSelf: 'flex-start', marginTop: '8px' }}\n+              >\n+                ✕\n+              </RemoveButton>\n+            </ProductItem>\n+          ))}\n+        </FormField>\n+      )}\n+\n+      {totalAmount > 0 && (\n+        <>\n+          <PointPaymentSection>\n+            <Label>포인트 결제</Label>\n+            <InfoText>\n+              사용 가능한 포인트: {memberPointBalance.toLocaleString()}원\n+            </InfoText>\n+            <PointInputRow>\n+              <Input\n+                type=\"number\"\n+                value={pointPayment || ''}\n+                onChange={(e) => {\n+                  const value = e.target.value ? parseFloat(e.target.value) : 0;\n+                  handlePointPaymentChange(value);\n+                }}\n+                placeholder=\"포인트 사용 금액\"\n+                max={Math.min(memberPointBalance, totalAmount)}\n+              />\n+              <PointUseButton onClick={handleUseAllPoints}>\n+                전액 사용\n+              </PointUseButton>\n+            </PointInputRow>\n+            {pointPayment > memberPointBalance && (\n+              <InfoText style={{ color: '#d32f2f' }}>\n+                포인트 잔액을 초과할 수 없습니다.\n+              </InfoText>\n+            )}\n+          </PointPaymentSection>\n+\n+          <FormField>\n+            <Label>받은금액 (현금/카드)</Label>\n+            <Input\n+              type=\"number\"\n+              value={paymentInfo.receivedAmount !== undefined ? paymentInfo.receivedAmount : Math.max(0, totalAmount - pointPayment)}\n+              onChange={(e) => {\n+                const value = e.target.value ? parseFloat(e.target.value) : 0;\n+                handleReceivedAmountChange(value);\n+              }}\n+              placeholder=\"받은 금액을 입력하세요\"\n+            />\n+            {cashPayment !== totalAmount - pointPayment && (\n+              <InfoText>\n+                {cashPayment > totalAmount - pointPayment\n+                  ? (() => {\n+                      const excessAmount = cashPayment - (totalAmount - pointPayment);\n+                      let message = `초과금액: ${excessAmount.toLocaleString()}원 (포인트로 적립 예정)`;\n+                      \n+                      if (excessAmount >= 1000000) {\n+                        const millionUnits = Math.floor(excessAmount / 1000000);\n+                        const bonusPoints = millionUnits * 100000;\n+                        message += ` + 보너스 ${bonusPoints.toLocaleString()}원`;\n+                      }\n+                      \n+                      return message;\n+                    })()\n+                  : `부족금액: ${((totalAmount - pointPayment) - cashPayment).toLocaleString()}원 (미수금으로 처리 예정)`\n+                }\n+              </InfoText>\n+            )}\n+          </FormField>\n+\n+          <PaymentSummary>\n+            <SummaryRow>\n+              <span>총 결제금액:</span>\n+              <span>{totalAmount.toLocaleString()}원</span>\n+            </SummaryRow>\n+            <SummaryRow>\n+              <span>포인트 결제:</span>\n+              <span>{pointPayment.toLocaleString()}원</span>\n+            </SummaryRow>\n+            <SummaryRow>\n+              <span>현금/카드 결제:</span>\n+              <span>{cashPayment.toLocaleString()}원</span>\n+            </SummaryRow>\n+            <SummaryRow>\n+              <span>총 받은금액:</span>\n+              <span>{totalReceived.toLocaleString()}원</span>\n+            </SummaryRow>\n+            {unpaidAmount > 0 && (\n+              <SummaryRow style={{ color: '#d32f2f' }}>\n+                <span>미수금:</span>\n+                <span>{unpaidAmount.toLocaleString()}원</span>\n+              </SummaryRow>\n+            )}\n+            {cashPayment > totalAmount - pointPayment && (\n+              <SummaryRow style={{ color: '#2e7d32' }}>\n+                <span>포인트 적립 예정:</span>\n+                <span>{(cashPayment - (totalAmount - pointPayment)).toLocaleString()}원</span>\n+              </SummaryRow>\n+            )}\n+          </PaymentSummary>\n+        </>\n+      )}\n+\n+      {paymentInfo.selectedProducts.length === 0 && (\n+        <WarningText>\n+          등록할 상품을 선택해주세요.\n+        </WarningText>\n+      )}\n+    </Container>\n+  );\n+};\n+\n+export default CoursePaymentPanel;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761736692327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,16 +283,16 @@\n           convertedProduct.price = calculatePeriodPrice(product.price || 0, 30);\n           // 적용금액도 초기에는 계산된 금액과 동일\n           convertedProduct.appliedPrice = convertedProduct.price;\n         }\n-        // 횟수제인 경우 기본 횟수 설정\n+        // 횟수제인 경우 상품의 실제 횟수 설정\n         else if (product.programType === '횟수제') {\n-          const defaultSessions = 10; // 기본 10회\n-          convertedProduct.sessions = defaultSessions;\n-          convertedProduct.baseSessions = defaultSessions;\n-          // 계산된 정확한 상품금액\n-          convertedProduct.price = calculateSessionPrice(product.price || 0, defaultSessions, defaultSessions);\n-          // 적용금액도 초기에는 계산된 금액과 동일\n+          const productSessions = product.sessions || 10; // 상품에 설정된 횟수 또는 기본 10회\n+          convertedProduct.sessions = productSessions;\n+          convertedProduct.baseSessions = productSessions;\n+          // 횟수제는 상품 가격이 해당 횟수에 대한 가격이므로 그대로 사용\n+          convertedProduct.price = product.price || 0;\n+          // 적용금액도 초기에는 상품 가격과 동일\n           convertedProduct.appliedPrice = convertedProduct.price;\n         }\n \n         handleProductAdd(convertedProduct);\n@@ -331,11 +331,11 @@\n       }\n     } else if (field === 'sessions') {\n       product.sessions = value;\n       if (product.programType === '횟수제') {\n-        // 횟수제: 횟수에 따른 상품금액 재계산\n+        // 횟수제: 상품의 기본 횟수와 가격을 기준으로 비례 계산\n         const basePrice = product.basePrice || product.originalPrice || 0;\n-        const baseSessions = product.baseSessions || 10; // 기준 횟수\n+        const baseSessions = product.baseSessions || 1; // 상품의 기본 횟수\n         product.price = calculateSessionPrice(basePrice, value, baseSessions);\n         product.appliedPrice = product.price; // 적용금액도 함께 업데이트\n       }\n     } else if (field === 'startDate') {\n@@ -574,9 +574,9 @@\n                         <input\n                           type=\"number\"\n                           min=\"1\"\n                           max=\"100\"\n-                          value={product.sessions || 10}\n+                          value={product.sessions || (product.baseSessions || 10)}\n                           onChange={(e) => handleProductEdit(index, 'sessions', parseInt(e.target.value) || 1)}\n                           style={{\n                             width: '100px',\n                             padding: '8px 10px',\n@@ -776,491 +776,5 @@\n     </Container>\n   );\n };\n \n-export default CoursePaymentPanel;\n-import React, { useState, useEffect } from 'react';\n-import styled from 'styled-components';\n-import { dbManager, type Member, type Product as DBProduct } from '../../../utils/indexedDB';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import CustomDropdown from '../../../components/CustomDropdown';\n-\n-const Container = styled.div`\n-  height: 100%;\n-  display: flex;\n-  flex-direction: column;\n-  overflow-y: auto;\n-  width: 100%;\n-  box-sizing: border-box;\n-  \n-  /* 스크롤바 숨기기 */\n-  scrollbar-width: none; /* Firefox */\n-  -ms-overflow-style: none; /* Internet Explorer 10+ */\n-  \n-  &::-webkit-scrollbar {\n-    display: none; /* Chrome, Safari, Opera */\n-  }\n-`;\n-\n-const FormField = styled.div`\n-  margin-bottom: 16px;\n-`;\n-\n-const Label = styled.label`\n-  display: block;\n-  font-weight: 600;\n-  color: ${AppColors.onBackground};\n-  margin-bottom: 8px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-`;\n-\n-const ProductItem = styled.div`\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-  padding: 12px;\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  margin-bottom: 8px;\n-`;\n-\n-const ProductInfo = styled.div`\n-  flex: 1;\n-`;\n-\n-const ProductName = styled.div`\n-  font-weight: 600;\n-  color: ${AppColors.onSurface};\n-  margin-bottom: 4px;\n-`;\n-\n-const ProductPrice = styled.div`\n-  color: ${AppColors.primary};\n-  font-weight: 600;\n-`;\n-\n-const RemoveButton = styled.button`\n-  background: #ff4444;\n-  color: white;\n-  border: none;\n-  border-radius: 50%;\n-  width: 24px;\n-  height: 24px;\n-  cursor: pointer;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  font-size: 12px;\n-  \n-  &:hover {\n-    background: #cc3333;\n-  }\n-`;\n-\n-const Input = styled.input`\n-  width: 100%;\n-  max-width: 100%;\n-  padding: 8px 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 4px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  box-sizing: border-box;\n-  \n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-    box-shadow: 0 0 0 2px ${AppColors.primary}20;\n-  }\n-  \n-  &:disabled {\n-    background: ${AppColors.disabled};\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-const PaymentSummary = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  padding: 16px;\n-  margin-top: 16px;\n-`;\n-\n-const SummaryRow = styled.div`\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-  margin-bottom: 8px;\n-  \n-  &:last-child {\n-    margin-bottom: 0;\n-    padding-top: 8px;\n-    border-top: 1px solid ${AppColors.borderLight};\n-    font-weight: 700;\n-  }\n-`;\n-\n-const PointPaymentSection = styled.div`\n-  background: ${AppColors.primary}10;\n-  border: 1px solid ${AppColors.primary}30;\n-  border-radius: 8px;\n-  padding: 16px;\n-  margin: 16px 0;\n-`;\n-\n-const PointInputRow = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 12px;\n-  margin-top: 8px;\n-`;\n-\n-const PointUseButton = styled.button`\n-  background: ${AppColors.primary};\n-  color: ${AppColors.onPrimary};\n-  border: none;\n-  border-radius: 4px;\n-  padding: 6px 12px;\n-  font-size: ${AppTextStyles.body3.fontSize};\n-  cursor: pointer;\n-  white-space: nowrap;\n-  \n-  &:hover {\n-    opacity: 0.9;\n-  }\n-`;\n-\n-const WarningText = styled.div`\n-  background: #fff3cd;\n-  border: 1px solid #ffeaa7;\n-  border-radius: 8px;\n-  padding: 12px;\n-  margin: 16px 0;\n-  color: #856404;\n-  font-size: ${AppTextStyles.body3.fontSize};\n-  text-align: center;\n-`;\n-\n-const InfoText = styled.div`\n-  font-size: ${AppTextStyles.body3.fontSize};\n-  color: ${AppColors.onInput1};\n-  margin-top: 8px;\n-  line-height: 1.4;\n-`;\n-\n-interface Product {\n-  id: string;\n-  name: string;\n-  price: number;\n-  description?: string;\n-}\n-\n-interface PaymentInfo {\n-  selectedProducts: Product[];\n-  paymentMethod: string;\n-  receivedAmount?: number;\n-  pointPayment?: number;\n-}\n-\n-interface CoursePaymentPanelProps {\n-  selectedMember: Member;\n-  memberPointBalance: number;\n-  paymentInfo: PaymentInfo;\n-  onPaymentUpdate: (updates: Partial<PaymentInfo>) => void;\n-}\n-\n-const CoursePaymentPanel: React.FC<CoursePaymentPanelProps> = ({\n-  selectedMember,\n-  memberPointBalance,\n-  paymentInfo,\n-  onPaymentUpdate\n-}) => {\n-  const [availableProducts, setAvailableProducts] = useState<DBProduct[]>([]);\n-  const [loading, setLoading] = useState(false);\n-\n-  // 선택된 회원의 지점별 상품 목록 로드\n-  useEffect(() => {\n-    if (selectedMember.branchId) {\n-      loadProductsByBranch(selectedMember.branchId);\n-    } else {\n-      setAvailableProducts([]);\n-    }\n-  }, [selectedMember.branchId]);\n-\n-  // 지점별 상품 로드\n-  const loadProductsByBranch = async (branchId: string) => {\n-    setLoading(true);\n-    try {\n-      const products = await dbManager.getProductsByBranch(branchId);\n-      // 활성 상품만 필터링\n-      const activeProducts = products.filter(product => product.isActive);\n-      setAvailableProducts(activeProducts);\n-    } catch (error) {\n-      console.error('상품 로드 실패:', error);\n-      setAvailableProducts([]);\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  // 상품 선택 옵션 생성\n-  const getProductOptions = () => [\n-    { value: '', label: loading ? '상품 로딩 중...' : '상품을 선택하세요' },\n-    ...availableProducts.map(product => ({\n-      value: product.id,\n-      label: `${product.name} - ${product.price?.toLocaleString() || '가격미정'}원`\n-    }))\n-  ];\n-\n-  // 상품 선택 처리\n-  const handleProductSelect = (value: string) => {\n-    if (value) {\n-      const product = availableProducts.find(p => p.id === value);\n-      if (product) {\n-        // DBProduct를 Product 타입으로 변환\n-        const convertedProduct: Product = {\n-          id: product.id,\n-          name: product.name,\n-          price: product.price || 0,\n-          description: product.description\n-        };\n-        handleProductAdd(convertedProduct);\n-      }\n-    }\n-  };\n-\n-  // 상품 추가\n-  const handleProductAdd = (product: Product) => {\n-    const newProducts = [...paymentInfo.selectedProducts, product];\n-    const newTotalAmount = newProducts.reduce((sum, p) => sum + p.price, 0);\n-    const currentPointPayment = paymentInfo.pointPayment || 0;\n-    \n-    onPaymentUpdate({\n-      selectedProducts: newProducts,\n-      receivedAmount: Math.max(0, newTotalAmount - currentPointPayment) // 기본 받은금액 설정\n-    });\n-  };\n-\n-  // 상품 제거\n-  const handleProductRemove = (productId: string) => {\n-    const updatedProducts = paymentInfo.selectedProducts.filter((p, index) => {\n-      // 같은 상품이 여러 개 있을 수 있으므로 첫 번째 것만 제거\n-      const firstMatchIndex = paymentInfo.selectedProducts.findIndex(product => product.id === productId);\n-      return index !== firstMatchIndex;\n-    });\n-    \n-    const newTotalAmount = updatedProducts.reduce((sum, p) => sum + p.price, 0);\n-    const currentPointPayment = paymentInfo.pointPayment || 0;\n-    \n-    onPaymentUpdate({\n-      selectedProducts: updatedProducts,\n-      receivedAmount: Math.max(0, newTotalAmount - currentPointPayment) // 받은금액 재계산\n-    });\n-  };\n-\n-  // 결제 방법 변경\n-  const handlePaymentMethodChange = (value: string) => {\n-    onPaymentUpdate({\n-      paymentMethod: value\n-    });\n-  };\n-\n-  // 받은 금액 변경\n-  const handleReceivedAmountChange = (value: number) => {\n-    onPaymentUpdate({\n-      receivedAmount: value\n-    });\n-  };\n-\n-  // 포인트 결제 금액 변경\n-  const handlePointPaymentChange = (value: number) => {\n-    const maxPoint = Math.min(memberPointBalance, totalAmount);\n-    const pointPayment = Math.max(0, Math.min(value, maxPoint));\n-    \n-    // 포인트 변경 시 받은 금액(현금/카드)은 총액에서 포인트를 뺀 금액으로 설정\n-    const cashAmount = Math.max(0, totalAmount - pointPayment);\n-    \n-    onPaymentUpdate({\n-      pointPayment: pointPayment,\n-      receivedAmount: cashAmount\n-    });\n-  };\n-\n-  // 전체 포인트 사용\n-  const handleUseAllPoints = () => {\n-    const maxUsablePoint = Math.min(memberPointBalance, totalAmount);\n-    \n-    // 전체 포인트 사용 시 받은 금액(현금/카드)은 총액에서 포인트를 뺀 금액으로 설정\n-    const cashAmount = Math.max(0, totalAmount - maxUsablePoint);\n-    \n-    onPaymentUpdate({\n-      pointPayment: maxUsablePoint,\n-      receivedAmount: cashAmount\n-    });\n-  };\n-\n-  const totalAmount = paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n-  const pointPayment = paymentInfo.pointPayment || 0;\n-  const cashPayment = paymentInfo.receivedAmount || 0; // 현금/카드 결제 금액\n-  const totalReceived = pointPayment + cashPayment; // 총 받은 금액 (포인트 + 현금/카드)\n-  const unpaidAmount = Math.max(0, totalAmount - totalReceived);\n-\n-  // 결제 방법 옵션\n-  const paymentMethodOptions = [\n-    { value: 'card', label: '카드' },\n-    { value: 'cash', label: '현금' },\n-    { value: 'transfer', label: '계좌이체' }\n-  ];\n-\n-  return (\n-    <Container>\n-      <FormField>\n-        <Label>결제 방법</Label>\n-        <CustomDropdown\n-          value={paymentInfo.paymentMethod || 'card'}\n-          onChange={handlePaymentMethodChange}\n-          options={paymentMethodOptions}\n-          inModal={true}\n-        />\n-      </FormField>\n-\n-      <FormField>\n-        <Label>상품 추가</Label>\n-        <CustomDropdown\n-          value=\"\"\n-          onChange={handleProductSelect}\n-          options={getProductOptions()}\n-          disabled={loading || availableProducts.length === 0}\n-          inModal={true}\n-        />\n-        {availableProducts.length === 0 && !loading && (\n-          <InfoText>\n-            선택한 지점에 등록된 상품이 없습니다.\n-          </InfoText>\n-        )}\n-      </FormField>\n-\n-      {paymentInfo.selectedProducts.length > 0 && (\n-        <FormField>\n-          <Label>선택된 상품</Label>\n-          {paymentInfo.selectedProducts.map((product, index) => (\n-            <ProductItem key={`${product.id}-${index}`}>\n-              <ProductInfo>\n-                <ProductName>{product.name}</ProductName>\n-                <ProductPrice>{product.price.toLocaleString()}원</ProductPrice>\n-              </ProductInfo>\n-              <RemoveButton\n-                onClick={() => handleProductRemove(product.id)}\n-              >\n-                ✕\n-              </RemoveButton>\n-            </ProductItem>\n-          ))}\n-        </FormField>\n-      )}\n-\n-      {totalAmount > 0 && (\n-        <>\n-          <PointPaymentSection>\n-            <Label>포인트 결제</Label>\n-            <InfoText>\n-              사용 가능한 포인트: {memberPointBalance.toLocaleString()}원\n-            </InfoText>\n-            <PointInputRow>\n-              <Input\n-                type=\"number\"\n-                value={pointPayment || ''}\n-                onChange={(e) => {\n-                  const value = e.target.value ? parseFloat(e.target.value) : 0;\n-                  handlePointPaymentChange(value);\n-                }}\n-                placeholder=\"포인트 사용 금액\"\n-                max={Math.min(memberPointBalance, totalAmount)}\n-              />\n-              <PointUseButton onClick={handleUseAllPoints}>\n-                전액 사용\n-              </PointUseButton>\n-            </PointInputRow>\n-            {pointPayment > memberPointBalance && (\n-              <InfoText style={{ color: '#d32f2f' }}>\n-                포인트 잔액을 초과할 수 없습니다.\n-              </InfoText>\n-            )}\n-          </PointPaymentSection>\n-\n-          <FormField>\n-            <Label>받은금액 (현금/카드)</Label>\n-            <Input\n-              type=\"number\"\n-              value={paymentInfo.receivedAmount !== undefined ? paymentInfo.receivedAmount : Math.max(0, totalAmount - pointPayment)}\n-              onChange={(e) => {\n-                const value = e.target.value ? parseFloat(e.target.value) : 0;\n-                handleReceivedAmountChange(value);\n-              }}\n-              placeholder=\"받은 금액을 입력하세요\"\n-            />\n-            {cashPayment !== totalAmount - pointPayment && (\n-              <InfoText>\n-                {cashPayment > totalAmount - pointPayment\n-                  ? (() => {\n-                      const excessAmount = cashPayment - (totalAmount - pointPayment);\n-                      let message = `초과금액: ${excessAmount.toLocaleString()}원 (포인트로 적립 예정)`;\n-                      \n-                      if (excessAmount >= 1000000) {\n-                        const millionUnits = Math.floor(excessAmount / 1000000);\n-                        const bonusPoints = millionUnits * 100000;\n-                        message += ` + 보너스 ${bonusPoints.toLocaleString()}원`;\n-                      }\n-                      \n-                      return message;\n-                    })()\n-                  : `부족금액: ${((totalAmount - pointPayment) - cashPayment).toLocaleString()}원 (미수금으로 처리 예정)`\n-                }\n-              </InfoText>\n-            )}\n-          </FormField>\n-\n-          <PaymentSummary>\n-            <SummaryRow>\n-              <span>총 결제금액:</span>\n-              <span>{totalAmount.toLocaleString()}원</span>\n-            </SummaryRow>\n-            <SummaryRow>\n-              <span>포인트 결제:</span>\n-              <span>{pointPayment.toLocaleString()}원</span>\n-            </SummaryRow>\n-            <SummaryRow>\n-              <span>현금/카드 결제:</span>\n-              <span>{cashPayment.toLocaleString()}원</span>\n-            </SummaryRow>\n-            <SummaryRow>\n-              <span>총 받은금액:</span>\n-              <span>{totalReceived.toLocaleString()}원</span>\n-            </SummaryRow>\n-            {unpaidAmount > 0 && (\n-              <SummaryRow style={{ color: '#d32f2f' }}>\n-                <span>미수금:</span>\n-                <span>{unpaidAmount.toLocaleString()}원</span>\n-              </SummaryRow>\n-            )}\n-            {cashPayment > totalAmount - pointPayment && (\n-              <SummaryRow style={{ color: '#2e7d32' }}>\n-                <span>포인트 적립 예정:</span>\n-                <span>{(cashPayment - (totalAmount - pointPayment)).toLocaleString()}원</span>\n-              </SummaryRow>\n-            )}\n-          </PaymentSummary>\n-        </>\n-      )}\n-\n-      {paymentInfo.selectedProducts.length === 0 && (\n-        <WarningText>\n-          등록할 상품을 선택해주세요.\n-        </WarningText>\n-      )}\n-    </Container>\n-  );\n-};\n-\n export default CoursePaymentPanel;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761910063161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,8 +175,10 @@\n   programType?: string; // '기간제' | '횟수제'\n   // 기간제 관련\n   duration?: number; // 기간(일)\n   baseDuration?: number; // 기준 기간\n+  months?: number; // 개월수\n+  baseMonths?: number; // 기준 개월수\n   startDate?: Date;\n   endDate?: Date;\n   // 횟수제 관련\n   sessions?: number; // 수업 횟수\n@@ -205,14 +207,8 @@\n }) => {\n   const [availableProducts, setAvailableProducts] = useState<DBProduct[]>([]);\n   const [loading, setLoading] = useState(false);\n \n-  // 기간제 상품의 금액 계산 (기본 한달 기준으로 일할 계산)\n-  const calculatePeriodPrice = (basePrice: number, days: number): number => {\n-    const baseDays = 30; // 기본 한달 (30일) 기준\n-    return Math.round((basePrice / baseDays) * days);\n-  };\n-\n   // 횟수제 상품의 금액 계산 (기준 횟수 대비 비례 계산)\n   const calculateSessionPrice = (basePrice: number, sessions: number, baseSessions: number): number => {\n     return Math.round((basePrice / baseSessions) * sessions);\n   };\n@@ -267,22 +263,28 @@\n           description: product.description,\n           programType: product.programType\n         };\n \n-        // 기간제인 경우 기본 30일 설정\n+        // 기간제인 경우 상품의 개월수를 기준으로 기간 설정 (가격은 고정)\n         if (product.programType === '기간제') {\n           const tomorrow = new Date();\n           tomorrow.setDate(tomorrow.getDate() + 1);\n+          \n+          // 상품에 등록된 개월수를 기준으로 설정 (기본값: 1개월)\n+          const productMonths = product.months || 1;\n+          const days = productMonths * 30; // 개월수를 일수로 변환 (1개월 = 30일)\n+          \n           const endDate = new Date(tomorrow);\n-          endDate.setDate(endDate.getDate() + 30);\n+          endDate.setDate(endDate.getDate() + days);\n           \n-          convertedProduct.duration = 30;\n-          convertedProduct.baseDuration = 30;\n+          convertedProduct.duration = days;\n+          convertedProduct.baseDuration = days;\n+          convertedProduct.months = productMonths; // 개월수 저장\n+          convertedProduct.baseMonths = productMonths; // 기준 개월수 저장\n           convertedProduct.startDate = tomorrow;\n           convertedProduct.endDate = endDate;\n-          // 계산된 정확한 상품금액\n-          convertedProduct.price = calculatePeriodPrice(product.price || 0, 30);\n-          // 적용금액도 초기에는 계산된 금액과 동일\n+          // 기간제는 가격 고정 (기간 변경해도 가격 변동 없음)\n+          convertedProduct.price = product.price || 0;\n           convertedProduct.appliedPrice = convertedProduct.price;\n         }\n         // 횟수제인 경우 상품의 실제 횟수 설정\n         else if (product.programType === '횟수제') {\n@@ -319,17 +321,34 @@\n     \n     if (field === 'duration') {\n       product.duration = value;\n       if (product.programType === '기간제' && product.startDate) {\n-        // 기간제: 종료일 재계산\n+        // 기간제: 일수를 개월수로 변환 (가격은 변경하지 않음)\n+        const months = Math.round(value / 30); // 일수를 개월수로 변환 (30일 = 1개월)\n+        product.months = months;\n+        \n+        // 종료일 재계산\n         const endDate = new Date(product.startDate);\n         endDate.setDate(endDate.getDate() + value);\n         product.endDate = endDate;\n-        // 상품금액 재계산\n-        const basePrice = product.basePrice || product.originalPrice || 0;\n-        product.price = calculatePeriodPrice(basePrice, value);\n-        product.appliedPrice = product.price; // 적용금액도 함께 업데이트\n+        \n+        // 기간제는 가격 고정 (기간 변경해도 가격 변동 없음)\n       }\n+    } else if (field === 'months') {\n+      // 개월수 직접 변경 (기간제)\n+      product.months = value;\n+      if (product.programType === '기간제' && product.startDate) {\n+        // 개월수를 일수로 변환\n+        const days = value * 30; // 1개월 = 30일\n+        product.duration = days;\n+        \n+        // 종료일 재계산\n+        const endDate = new Date(product.startDate);\n+        endDate.setDate(endDate.getDate() + days);\n+        product.endDate = endDate;\n+        \n+        // 기간제는 가격 고정 (기간 변경해도 가격 변동 없음)\n+      }\n     } else if (field === 'sessions') {\n       product.sessions = value;\n       if (product.programType === '횟수제') {\n         // 횟수제: 상품의 기본 횟수와 가격을 기준으로 비례 계산\n@@ -345,8 +364,16 @@\n         const endDate = new Date(value);\n         endDate.setDate(endDate.getDate() + product.duration);\n         product.endDate = endDate;\n       }\n+    } else if (field === 'endDate') {\n+      product.endDate = value;\n+      if (product.programType === '기간제' && product.startDate) {\n+        // 종료일 변경 시 기간 재계산 (가격은 변경하지 않음)\n+        const days = Math.ceil((value.getTime() - product.startDate.getTime()) / (1000 * 3600 * 24));\n+        product.duration = days;\n+        product.months = Math.round(days / 30);\n+      }\n     } else if (field === 'appliedPrice') {\n       // 적용금액은 사용자가 직접 수정 가능\n       product.appliedPrice = value;\n     }\n@@ -514,16 +541,14 @@\n                           display: 'block', \n                           marginBottom: '6px',\n                           fontWeight: '500'\n                         }}>\n-                          기간(일)\n+                          종료일\n                         </label>\n                         <input\n-                          type=\"number\"\n-                          min=\"1\"\n-                          max=\"365\"\n-                          value={product.duration || 30}\n-                          onChange={(e) => handleProductEdit(index, 'duration', parseInt(e.target.value) || 1)}\n+                          type=\"date\"\n+                          value={product.endDate ? product.endDate.toISOString().split('T')[0] : ''}\n+                          onChange={(e) => handleProductEdit(index, 'endDate', new Date(e.target.value))}\n                           style={{\n                             width: '100%',\n                             padding: '8px 10px',\n                             border: '1px solid #ddd',\n@@ -534,21 +559,24 @@\n                           }}\n                         />\n                       </div>\n                     </div>\n-                    {product.endDate && (\n-                      <div style={{ \n-                        fontSize: '11px', \n-                        color: '#666',\n-                        marginTop: '4px',\n-                        padding: '4px 8px',\n-                        backgroundColor: '#fff',\n-                        borderRadius: '3px',\n-                        border: '1px solid #e9ecef'\n-                      }}>\n-                        종료일: {product.endDate.toLocaleDateString()}\n-                      </div>\n-                    )}\n+                    <div style={{ \n+                      fontSize: '11px', \n+                      color: '#666',\n+                      marginTop: '4px',\n+                      padding: '4px 8px',\n+                      backgroundColor: '#fff',\n+                      borderRadius: '3px',\n+                      border: '1px solid #e9ecef'\n+                    }}>\n+                      💡 기간제는 가격이 고정되어 있습니다. 기간을 조정해도 가격은 변경되지 않습니다.\n+                      {product.startDate && product.endDate && (\n+                        <>\n+                          <br />기간: {Math.ceil((product.endDate.getTime() - product.startDate.getTime()) / (1000 * 3600 * 24))}일\n+                        </>\n+                      )}\n+                    </div>\n                   </div>\n                 )}\n \n                 {/* 횟수제 상품 편집 */}\n"
                }
            ],
            "date": 1761132526106,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { dbManager, type Member, type Product as DBProduct } from '../../../utils/indexedDB';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\nimport CustomDropdown from '../../../components/CustomDropdown';\n\nconst Container = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n`;\n\nconst FormField = styled.div`\n  margin-bottom: 16px;\n`;\n\nconst Label = styled.label`\n  display: block;\n  font-weight: 600;\n  color: ${AppColors.onBackground};\n  margin-bottom: 8px;\n  font-size: ${AppTextStyles.body2.fontSize};\n`;\n\nconst ProductItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px;\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  margin-bottom: 8px;\n`;\n\nconst ProductInfo = styled.div`\n  flex: 1;\n`;\n\nconst ProductName = styled.div`\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin-bottom: 4px;\n`;\n\nconst ProductPrice = styled.div`\n  color: ${AppColors.primary};\n  font-weight: 600;\n`;\n\nconst RemoveButton = styled.button`\n  background: #ff4444;\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 12px;\n  \n  &:hover {\n    background: #cc3333;\n  }\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 8px 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 4px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  \n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n    box-shadow: 0 0 0 2px ${AppColors.primary}20;\n  }\n  \n  &:disabled {\n    background: ${AppColors.disabled};\n    cursor: not-allowed;\n  }\n`;\n\nconst PaymentSummary = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  padding: 16px;\n  margin-top: 16px;\n`;\n\nconst SummaryRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n  \n  &:last-child {\n    margin-bottom: 0;\n    padding-top: 8px;\n    border-top: 1px solid ${AppColors.borderLight};\n    font-weight: 700;\n  }\n`;\n\nconst PointPaymentSection = styled.div`\n  background: ${AppColors.primary}10;\n  border: 1px solid ${AppColors.primary}30;\n  border-radius: 8px;\n  padding: 16px;\n  margin: 16px 0;\n`;\n\nconst PointInputRow = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-top: 8px;\n`;\n\nconst PointUseButton = styled.button`\n  background: ${AppColors.primary};\n  color: ${AppColors.onPrimary};\n  border: none;\n  border-radius: 4px;\n  padding: 6px 12px;\n  font-size: ${AppTextStyles.body3.fontSize};\n  cursor: pointer;\n  white-space: nowrap;\n  \n  &:hover {\n    opacity: 0.9;\n  }\n`;\n\nconst WarningText = styled.div`\n  background: #fff3cd;\n  border: 1px solid #ffeaa7;\n  border-radius: 8px;\n  padding: 12px;\n  margin: 16px 0;\n  color: #856404;\n  font-size: ${AppTextStyles.body3.fontSize};\n  text-align: center;\n`;\n\nconst InfoText = styled.div`\n  font-size: ${AppTextStyles.body3.fontSize};\n  color: ${AppColors.onInput1};\n  margin-top: 8px;\n  line-height: 1.4;\n`;\n\ninterface Product {\n  id: string;\n  name: string;\n  price: number;\n  description?: string;\n}\n\ninterface PaymentInfo {\n  selectedProducts: Product[];\n  paymentMethod: string;\n  receivedAmount?: number;\n  pointPayment?: number;\n}\n\ninterface CoursePaymentPanelProps {\n  selectedMember: Member;\n  memberPointBalance: number;\n  paymentInfo: PaymentInfo;\n  onPaymentUpdate: (updates: Partial<PaymentInfo>) => void;\n}\n\nconst CoursePaymentPanel: React.FC<CoursePaymentPanelProps> = ({\n  selectedMember,\n  memberPointBalance,\n  paymentInfo,\n  onPaymentUpdate\n}) => {\n  const [availableProducts, setAvailableProducts] = useState<DBProduct[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  // 선택된 회원의 지점별 상품 목록 로드\n  useEffect(() => {\n    if (selectedMember.branchId) {\n      loadProductsByBranch(selectedMember.branchId);\n    } else {\n      setAvailableProducts([]);\n    }\n  }, [selectedMember.branchId]);\n\n  // 지점별 상품 로드\n  const loadProductsByBranch = async (branchId: string) => {\n    setLoading(true);\n    try {\n      const products = await dbManager.getProductsByBranch(branchId);\n      // 활성 상품만 필터링\n      const activeProducts = products.filter(product => product.isActive);\n      setAvailableProducts(activeProducts);\n    } catch (error) {\n      console.error('상품 로드 실패:', error);\n      setAvailableProducts([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 상품 선택 옵션 생성\n  const getProductOptions = () => [\n    { value: '', label: loading ? '상품 로딩 중...' : '상품을 선택하세요' },\n    ...availableProducts.map(product => ({\n      value: product.id,\n      label: `${product.name} - ${product.price?.toLocaleString() || '가격미정'}원`\n    }))\n  ];\n\n  // 상품 선택 처리\n  const handleProductSelect = (value: string) => {\n    if (value) {\n      const product = availableProducts.find(p => p.id === value);\n      if (product) {\n        // DBProduct를 Product 타입으로 변환\n        const convertedProduct: Product = {\n          id: product.id,\n          name: product.name,\n          price: product.price || 0,\n          description: product.description\n        };\n        handleProductAdd(convertedProduct);\n      }\n    }\n  };\n\n  // 상품 추가\n  const handleProductAdd = (product: Product) => {\n    onPaymentUpdate({\n      selectedProducts: [...paymentInfo.selectedProducts, product]\n    });\n  };\n\n  // 상품 제거\n  const handleProductRemove = (productId: string) => {\n    const updatedProducts = paymentInfo.selectedProducts.filter((p, index) => {\n      // 같은 상품이 여러 개 있을 수 있으므로 첫 번째 것만 제거\n      const firstMatchIndex = paymentInfo.selectedProducts.findIndex(product => product.id === productId);\n      return index !== firstMatchIndex;\n    });\n    \n    onPaymentUpdate({\n      selectedProducts: updatedProducts\n    });\n  };\n\n  // 결제 방법 변경\n  const handlePaymentMethodChange = (value: string) => {\n    onPaymentUpdate({\n      paymentMethod: value\n    });\n  };\n\n  // 받은 금액 변경\n  const handleReceivedAmountChange = (value: number) => {\n    onPaymentUpdate({\n      receivedAmount: value\n    });\n  };\n\n  // 포인트 결제 금액 변경\n  const handlePointPaymentChange = (value: number) => {\n    const maxPoint = Math.min(memberPointBalance, totalAmount);\n    const pointPayment = Math.max(0, Math.min(value, maxPoint));\n    onPaymentUpdate({\n      pointPayment: pointPayment\n    });\n  };\n\n  // 전체 포인트 사용\n  const handleUseAllPoints = () => {\n    const maxUsablePoint = Math.min(memberPointBalance, totalAmount);\n    onPaymentUpdate({\n      pointPayment: maxUsablePoint\n    });\n  };\n\n  const totalAmount = paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n  const pointPayment = paymentInfo.pointPayment || 0;\n  const cashPayment = (paymentInfo.receivedAmount || 0) - pointPayment;\n  const unpaidAmount = Math.max(0, totalAmount - pointPayment - cashPayment);\n\n  // 결제 방법 옵션\n  const paymentMethodOptions = [\n    { value: 'card', label: '카드' },\n    { value: 'cash', label: '현금' },\n    { value: 'transfer', label: '계좌이체' },\n    { value: 'point', label: '포인트' }\n  ];\n\n  return (\n    <Container>\n      <FormField>\n        <Label>결제 방법</Label>\n        <CustomDropdown\n          value={paymentInfo.paymentMethod || 'card'}\n          onChange={handlePaymentMethodChange}\n          options={paymentMethodOptions}\n        />\n      </FormField>\n\n      <FormField>\n        <Label>상품 추가</Label>\n        <CustomDropdown\n          value=\"\"\n          onChange={handleProductSelect}\n          options={getProductOptions()}\n          disabled={loading || availableProducts.length === 0}\n        />\n        {availableProducts.length === 0 && !loading && (\n          <InfoText>\n            선택한 지점에 등록된 상품이 없습니다.\n          </InfoText>\n        )}\n      </FormField>\n\n      {paymentInfo.selectedProducts.length > 0 && (\n        <FormField>\n          <Label>선택된 상품</Label>\n          {paymentInfo.selectedProducts.map((product, index) => (\n            <ProductItem key={`${product.id}-${index}`}>\n              <ProductInfo>\n                <ProductName>{product.name}</ProductName>\n                <ProductPrice>{product.price.toLocaleString()}원</ProductPrice>\n              </ProductInfo>\n              <RemoveButton\n                onClick={() => handleProductRemove(product.id)}\n              >\n                ✕\n              </RemoveButton>\n            </ProductItem>\n          ))}\n        </FormField>\n      )}\n\n      {totalAmount > 0 && (\n        <>\n          <PointPaymentSection>\n            <Label>포인트 결제</Label>\n            <InfoText>\n              사용 가능한 포인트: {memberPointBalance.toLocaleString()}원\n            </InfoText>\n            <PointInputRow>\n              <Input\n                type=\"number\"\n                value={pointPayment || ''}\n                onChange={(e) => {\n                  const value = e.target.value ? parseFloat(e.target.value) : 0;\n                  handlePointPaymentChange(value);\n                }}\n                placeholder=\"포인트 사용 금액\"\n                max={Math.min(memberPointBalance, totalAmount)}\n              />\n              <PointUseButton onClick={handleUseAllPoints}>\n                전액 사용\n              </PointUseButton>\n            </PointInputRow>\n            {pointPayment > memberPointBalance && (\n              <InfoText style={{ color: '#d32f2f' }}>\n                포인트 잔액을 초과할 수 없습니다.\n              </InfoText>\n            )}\n          </PointPaymentSection>\n\n          <FormField>\n            <Label>받은금액 (현금/카드)</Label>\n            <Input\n              type=\"number\"\n              value={paymentInfo.receivedAmount || totalAmount - pointPayment}\n              onChange={(e) => {\n                const value = e.target.value ? parseFloat(e.target.value) : 0;\n                handleReceivedAmountChange(value + pointPayment);\n              }}\n              placeholder=\"받은 금액을 입력하세요\"\n            />\n            {cashPayment !== totalAmount - pointPayment && (\n              <InfoText>\n                {cashPayment > totalAmount - pointPayment\n                  ? `초과금액: ${(cashPayment - (totalAmount - pointPayment)).toLocaleString()}원 (포인트로 적립 예정)`\n                  : `부족금액: ${((totalAmount - pointPayment) - cashPayment).toLocaleString()}원 (미수금으로 처리 예정)`\n                }\n              </InfoText>\n            )}\n          </FormField>\n\n          <PaymentSummary>\n            <SummaryRow>\n              <span>총 결제금액:</span>\n              <span>{totalAmount.toLocaleString()}원</span>\n            </SummaryRow>\n            <SummaryRow>\n              <span>포인트 결제:</span>\n              <span>{pointPayment.toLocaleString()}원</span>\n            </SummaryRow>\n            <SummaryRow>\n              <span>현금/카드 결제:</span>\n              <span>{Math.max(0, cashPayment).toLocaleString()}원</span>\n            </SummaryRow>\n            {unpaidAmount > 0 && (\n              <SummaryRow style={{ color: '#d32f2f' }}>\n                <span>미수금:</span>\n                <span>{unpaidAmount.toLocaleString()}원</span>\n              </SummaryRow>\n            )}\n            {cashPayment > totalAmount - pointPayment && (\n              <SummaryRow style={{ color: '#2e7d32' }}>\n                <span>포인트 적립 예정:</span>\n                <span>{(cashPayment - (totalAmount - pointPayment)).toLocaleString()}원</span>\n              </SummaryRow>\n            )}\n          </PaymentSummary>\n        </>\n      )}\n\n      {paymentInfo.selectedProducts.length === 0 && (\n        <WarningText>\n          등록할 상품을 선택해주세요.\n        </WarningText>\n      )}\n    </Container>\n  );\n};\n\nexport default CoursePaymentPanel;"
        }
    ]
}