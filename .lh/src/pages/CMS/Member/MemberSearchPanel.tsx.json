{
    "sourceFile": "src/pages/CMS/Member/MemberSearchPanel.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1761132526076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761132724804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,17 +7,22 @@\n const Container = styled.div`\n   height: 100%;\n   display: flex;\n   flex-direction: column;\n+  width: 100%;\n+  max-width: 100%;\n+  overflow: hidden;\n `;\n \n const SearchInput = styled.input`\n   width: 100%;\n+  max-width: 100%;\n   padding: 12px 16px;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n   font-size: ${AppTextStyles.body1.fontSize};\n   margin-bottom: 16px;\n+  box-sizing: border-box;\n   \n   &:focus {\n     outline: none;\n     border-color: ${AppColors.primary};\n@@ -30,8 +35,10 @@\n   overflow-y: auto;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n   max-height: 300px;\n+  width: 100%;\n+  box-sizing: border-box;\n `;\n \n const MemberItem = styled.div<{ $selected: boolean }>`\n   padding: 12px 16px;\n@@ -67,8 +74,10 @@\n   border: 2px solid ${AppColors.primary};\n   border-radius: 12px;\n   padding: 16px;\n   margin-top: 16px;\n+  width: 100%;\n+  box-sizing: border-box;\n `;\n \n const SelectedMemberName = styled.div`\n   font-size: ${AppTextStyles.title3.fontSize};\n"
                },
                {
                    "date": 1761132902606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,9 @@\n         value={searchQuery}\n         onChange={(e) => setSearchQuery(e.target.value)}\n       />\n \n-      {selectedMember ? (\n+      {selectedMember && !searchQuery.trim() ? (\n         <SelectedMemberCard>\n           <SelectedMemberName>{selectedMember.name}</SelectedMemberName>\n           <SelectedMemberDetails>\n             <DetailRow>\n@@ -246,9 +246,9 @@\n           ) : (\n             searchResults.map((member) => (\n               <MemberItem\n                 key={member.id}\n-                $selected={false}\n+                $selected={selectedMember?.id === member.id}\n                 onClick={() => handleMemberClick(member)}\n               >\n                 <MemberName>{member.name}</MemberName>\n                 <MemberInfo>\n"
                },
                {
                    "date": 1761365485094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,11 @@\n   flex: 1;\n   overflow-y: auto;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n-  max-height: 300px;\n   width: 100%;\n   box-sizing: border-box;\n+  min-height: 0; /* 플렉스 아이템이 축소될 수 있도록 */\n `;\n \n const MemberItem = styled.div<{ $selected: boolean }>`\n   padding: 12px 16px;\n"
                },
                {
                    "date": 1761375753638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,21 +138,37 @@\n interface MemberSearchPanelProps {\n   selectedMember: Member | null;\n   onMemberSelect: (member: Member) => void;\n   memberPointBalance: number;\n+  preselectedMember?: Member | null; // 미리 선택된 회원 (수정 불가)\n+  readonly?: boolean; // 읽기 전용 모드\n }\n \n const MemberSearchPanel: React.FC<MemberSearchPanelProps> = ({\n   selectedMember,\n   onMemberSelect,\n-  memberPointBalance\n+  memberPointBalance,\n+  preselectedMember = null,\n+  readonly = false\n }) => {\n   const [searchQuery, setSearchQuery] = useState('');\n   const [searchResults, setSearchResults] = useState<Member[]>([]);\n   const [isSearching, setIsSearching] = useState(false);\n \n-  // 검색 수행\n+  // 미리 선택된 회원이 있으면 해당 회원을 자동으로 선택\n   useEffect(() => {\n+    if (preselectedMember && !selectedMember) {\n+      onMemberSelect(preselectedMember);\n+    }\n+  }, [preselectedMember, selectedMember, onMemberSelect]);\n+\n+  // 검색 수행 (읽기 전용 모드가 아닐 때만)\n+  useEffect(() => {\n+    if (readonly || preselectedMember) {\n+      setSearchResults([]);\n+      return;\n+    }\n+\n     const performSearch = async () => {\n       if (!searchQuery.trim()) {\n         setSearchResults([]);\n         return;\n@@ -173,9 +189,9 @@\n     };\n \n     const debounceTimer = setTimeout(performSearch, 300);\n     return () => clearTimeout(debounceTimer);\n-  }, [searchQuery]);\n+  }, [searchQuery, readonly, preselectedMember]);\n \n   const handleMemberClick = (member: Member) => {\n     onMemberSelect(member);\n   };\n@@ -190,18 +206,29 @@\n   };\n \n   return (\n     <Container>\n-      <SearchInput\n-        type=\"text\"\n-        placeholder=\"회원명, 전화번호, 이메일로 검색...\"\n-        value={searchQuery}\n-        onChange={(e) => setSearchQuery(e.target.value)}\n-      />\n+      {/* 읽기 전용 모드가 아니고 미리 선택된 회원이 없을 때만 검색 입력 표시 */}\n+      {!readonly && !preselectedMember && (\n+        <SearchInput\n+          type=\"text\"\n+          placeholder=\"회원명, 전화번호, 이메일로 검색...\"\n+          value={searchQuery}\n+          onChange={(e) => setSearchQuery(e.target.value)}\n+        />\n+      )}\n \n-      {selectedMember && !searchQuery.trim() ? (\n+      {/* 미리 선택된 회원이 있거나 읽기 전용 모드에서 선택된 회원이 있을 때 */}\n+      {((readonly || preselectedMember) && selectedMember) || (selectedMember && !searchQuery.trim()) ? (\n         <SelectedMemberCard>\n-          <SelectedMemberName>{selectedMember.name}</SelectedMemberName>\n+          <SelectedMemberName>\n+            {selectedMember.name}\n+            {readonly || preselectedMember ? (\n+              <span style={{ fontSize: '14px', fontWeight: 'normal', color: AppColors.onInput1, marginLeft: '8px' }}>\n+                (선택된 회원)\n+              </span>\n+            ) : null}\n+          </SelectedMemberName>\n           <SelectedMemberDetails>\n             <DetailRow>\n               <span>전화번호:</span>\n               <span>{selectedMember.phone}</span>\n@@ -228,9 +255,9 @@\n             <PointAmount>{memberPointBalance.toLocaleString()}원</PointAmount>\n             <PointLabel>사용 가능한 포인트</PointLabel>\n           </PointBalance>\n         </SelectedMemberCard>\n-      ) : (\n+      ) : !readonly && !preselectedMember ? (\n         <SearchResults>\n           {!searchQuery.trim() ? (\n             <EmptyState>\n               위에서 회원을 검색해주세요.<br />\n@@ -259,9 +286,9 @@\n               </MemberItem>\n             ))\n           )}\n         </SearchResults>\n-      )}\n+      ) : null}\n     </Container>\n   );\n };\n \n"
                }
            ],
            "date": 1761132526076,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { dbManager, type Member } from '../../../utils/indexedDB';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\n\nconst Container = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst SearchInput = styled.input`\n  width: 100%;\n  padding: 12px 16px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  margin-bottom: 16px;\n  \n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n    box-shadow: 0 0 0 2px ${AppColors.primary}20;\n  }\n`;\n\nconst SearchResults = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  max-height: 300px;\n`;\n\nconst MemberItem = styled.div<{ $selected: boolean }>`\n  padding: 12px 16px;\n  border-bottom: 1px solid ${AppColors.borderLight};\n  cursor: pointer;\n  transition: all 0.2s;\n  background: ${props => props.$selected ? AppColors.primary : 'transparent'};\n  color: ${props => props.$selected ? AppColors.onPrimary : AppColors.onSurface};\n  \n  &:hover {\n    background: ${props => props.$selected ? AppColors.primary : `${AppColors.primary}10`};\n  }\n  \n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst MemberName = styled.div`\n  font-weight: 600;\n  font-size: ${AppTextStyles.body1.fontSize};\n  margin-bottom: 4px;\n`;\n\nconst MemberInfo = styled.div`\n  font-size: ${AppTextStyles.body3.fontSize};\n  opacity: 0.8;\n  line-height: 1.4;\n`;\n\nconst SelectedMemberCard = styled.div`\n  background: ${AppColors.surface};\n  border: 2px solid ${AppColors.primary};\n  border-radius: 12px;\n  padding: 16px;\n  margin-top: 16px;\n`;\n\nconst SelectedMemberName = styled.div`\n  font-size: ${AppTextStyles.title3.fontSize};\n  font-weight: 700;\n  color: ${AppColors.primary};\n  margin-bottom: 8px;\n`;\n\nconst SelectedMemberDetails = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 8px;\n  font-size: ${AppTextStyles.body3.fontSize};\n  color: ${AppColors.onInput1};\n`;\n\nconst DetailRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  grid-column: 1 / -1;\n`;\n\nconst PointBalance = styled.div`\n  background: ${AppColors.primary}15;\n  border: 1px solid ${AppColors.primary}30;\n  border-radius: 8px;\n  padding: 12px;\n  margin-top: 12px;\n  text-align: center;\n`;\n\nconst PointAmount = styled.div`\n  font-size: ${AppTextStyles.title3.fontSize};\n  font-weight: 700;\n  color: ${AppColors.primary};\n`;\n\nconst PointLabel = styled.div`\n  font-size: ${AppTextStyles.body3.fontSize};\n  color: ${AppColors.onInput1};\n  margin-top: 4px;\n`;\n\nconst EmptyState = styled.div`\n  text-align: center;\n  padding: 40px 20px;\n  color: ${AppColors.onInput1};\n  font-size: ${AppTextStyles.body2.fontSize};\n`;\n\nconst NoResults = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: ${AppColors.onInput1};\n  font-size: ${AppTextStyles.body2.fontSize};\n`;\n\ninterface MemberSearchPanelProps {\n  selectedMember: Member | null;\n  onMemberSelect: (member: Member) => void;\n  memberPointBalance: number;\n}\n\nconst MemberSearchPanel: React.FC<MemberSearchPanelProps> = ({\n  selectedMember,\n  onMemberSelect,\n  memberPointBalance\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState<Member[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n\n  // 검색 수행\n  useEffect(() => {\n    const performSearch = async () => {\n      if (!searchQuery.trim()) {\n        setSearchResults([]);\n        return;\n      }\n\n      setIsSearching(true);\n      try {\n        const results = await dbManager.searchMembers(searchQuery.trim());\n        // 활성 회원만 필터링\n        const activeMembers = results.filter(member => member.isActive);\n        setSearchResults(activeMembers);\n      } catch (error) {\n        console.error('회원 검색 실패:', error);\n        setSearchResults([]);\n      } finally {\n        setIsSearching(false);\n      }\n    };\n\n    const debounceTimer = setTimeout(performSearch, 300);\n    return () => clearTimeout(debounceTimer);\n  }, [searchQuery]);\n\n  const handleMemberClick = (member: Member) => {\n    onMemberSelect(member);\n  };\n\n  const formatDate = (dateString: string) => {\n    try {\n      const date = new Date(dateString);\n      return date.toLocaleDateString('ko-KR');\n    } catch {\n      return dateString;\n    }\n  };\n\n  return (\n    <Container>\n      <SearchInput\n        type=\"text\"\n        placeholder=\"회원명, 전화번호, 이메일로 검색...\"\n        value={searchQuery}\n        onChange={(e) => setSearchQuery(e.target.value)}\n      />\n\n      {selectedMember ? (\n        <SelectedMemberCard>\n          <SelectedMemberName>{selectedMember.name}</SelectedMemberName>\n          <SelectedMemberDetails>\n            <DetailRow>\n              <span>전화번호:</span>\n              <span>{selectedMember.phone}</span>\n            </DetailRow>\n            <DetailRow>\n              <span>이메일:</span>\n              <span>{selectedMember.email || '-'}</span>\n            </DetailRow>\n            <DetailRow>\n              <span>지점:</span>\n              <span>{selectedMember.branchName}</span>\n            </DetailRow>\n            <DetailRow>\n              <span>담당코치:</span>\n              <span>{selectedMember.coachName}</span>\n            </DetailRow>\n            <DetailRow>\n              <span>가입일:</span>\n              <span>{formatDate(selectedMember.registrationDate)}</span>\n            </DetailRow>\n          </SelectedMemberDetails>\n          \n          <PointBalance>\n            <PointAmount>{memberPointBalance.toLocaleString()}원</PointAmount>\n            <PointLabel>사용 가능한 포인트</PointLabel>\n          </PointBalance>\n        </SelectedMemberCard>\n      ) : (\n        <SearchResults>\n          {!searchQuery.trim() ? (\n            <EmptyState>\n              위에서 회원을 검색해주세요.<br />\n              이름, 전화번호, 이메일로 검색할 수 있습니다.\n            </EmptyState>\n          ) : isSearching ? (\n            <EmptyState>검색 중...</EmptyState>\n          ) : searchResults.length === 0 ? (\n            <NoResults>\n              검색 결과가 없습니다.<br />\n              다른 검색어를 입력해보세요.\n            </NoResults>\n          ) : (\n            searchResults.map((member) => (\n              <MemberItem\n                key={member.id}\n                $selected={false}\n                onClick={() => handleMemberClick(member)}\n              >\n                <MemberName>{member.name}</MemberName>\n                <MemberInfo>\n                  {member.phone} • {member.email || '이메일 없음'}<br />\n                  {member.branchName} • {member.coachName}<br />\n                  가입일: {formatDate(member.registrationDate)}\n                </MemberInfo>\n              </MemberItem>\n            ))\n          )}\n        </SearchResults>\n      )}\n    </Container>\n  );\n};\n\nexport default MemberSearchPanel;"
        }
    ]
}