{
    "sourceFile": "src/pages/CMS/Member/MemberPaymentHistory.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1760163390238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760255558085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n-import React, { useState, useEffect } from 'react';\n+import React, { useState, useEffect, useCallback } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, Payment } from '../../../utils/indexedDB';\n \n const Container = styled.div`\n   padding: 24px;\n   background-color: ${AppColors.background};\n@@ -167,16 +168,18 @@\n   font-weight: 500;\n   background-color: ${props => {\n     switch (props.$status) {\n       case '완료': return `${AppColors.success}20`;\n+      case '대기': return `${AppColors.warning}20`;\n       case '취소': return `${AppColors.error}20`;\n       case '환불': return `${AppColors.warning}20`;\n       default: return `${AppColors.onSurface}20`;\n     }\n   }};\n   color: ${props => {\n     switch (props.$status) {\n       case '완료': return AppColors.success;\n+      case '대기': return AppColors.warning;\n       case '취소': return AppColors.error;\n       case '환불': return AppColors.warning;\n       default: return AppColors.onSurface;\n     }\n@@ -188,102 +191,118 @@\n   text-align: center;\n   color: ${AppColors.onInput2};\n `;\n \n-// 임시 결제 이력 데이터\n-const mockPaymentHistory = [\n-  {\n-    id: 'P001',\n-    memberName: '김회원',\n-    memberId: 'M001',\n-    amount: 150000,\n-    paymentMethod: '카드',\n-    program: 'WBM 프로그램',\n-    status: '완료',\n-    date: '2024-01-15',\n-    description: '3개월 회원권 결제'\n-  },\n-  {\n-    id: 'P002',\n-    memberName: '이회원',\n-    memberId: 'M002',\n-    amount: 80000,\n-    paymentMethod: '현금',\n-    program: '릴렉싱 프로그램',\n-    status: '완료',\n-    date: '2024-01-14',\n-    description: '1개월 회원권 결제'\n-  },\n-  {\n-    id: 'P003',\n-    memberName: '박회원',\n-    memberId: 'M003',\n-    amount: 200000,\n-    paymentMethod: '카드',\n-    program: 'WBM 프로그램',\n-    status: '환불',\n-    date: '2024-01-13',\n-    description: '6개월 회원권 환불'\n-  },\n-];\n+// 결제 상태 한글 변환 함수\n+const getStatusText = (status: string) => {\n+  switch (status) {\n+    case 'completed': return '완료';\n+    case 'pending': return '대기';\n+    case 'cancelled': return '취소';\n+    case 'refunded': return '환불';\n+    default: return status;\n+  }\n+};\n \n+// 결제 상태 영어 변환 함수\n+const getStatusValue = (statusText: string) => {\n+  switch (statusText) {\n+    case '완료': return 'completed';\n+    case '대기': return 'pending';\n+    case '취소': return 'cancelled';\n+    case '환불': return 'refunded';\n+    default: return statusText;\n+  }\n+};\n+\n const MemberPaymentHistory: React.FC = () => {\n   const [searchTerm, setSearchTerm] = useState('');\n   const [selectedStatus, setSelectedStatus] = useState('전체');\n   const [startDate, setStartDate] = useState('');\n   const [endDate, setEndDate] = useState('');\n-  const [paymentHistory] = useState(mockPaymentHistory);\n-  const [filteredHistory, setFilteredHistory] = useState(mockPaymentHistory);\n+  const [paymentHistory, setPaymentHistory] = useState<Payment[]>([]);\n+  const [filteredHistory, setFilteredHistory] = useState<Payment[]>([]);\n+  const [loading, setLoading] = useState(false);\n \n-  const handleSearch = () => {\n+  // 결제 이력 데이터 로드\n+  const loadPaymentHistory = async () => {\n+    setLoading(true);\n+    try {\n+      console.log('=== 결제 이력 로딩 시작 ===');\n+      const payments = await dbManager.getAllPayments();\n+      console.log('로드된 결제 데이터:', payments);\n+      setPaymentHistory(payments);\n+      setFilteredHistory(payments);\n+    } catch (error) {\n+      console.error('결제 이력 로딩 실패:', error);\n+      setPaymentHistory([]);\n+      setFilteredHistory([]);\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  // 컴포넌트 마운트 시 데이터 로드\n+  useEffect(() => {\n+    loadPaymentHistory();\n+  }, []);\n+\n+  const handleSearch = useCallback(() => {\n     let filtered = paymentHistory;\n \n     // 검색어 필터링\n     if (searchTerm) {\n       filtered = filtered.filter(payment => \n         payment.memberName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n         payment.memberId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        payment.program.toLowerCase().includes(searchTerm.toLowerCase())\n+        payment.products.some(product => \n+          product.name.toLowerCase().includes(searchTerm.toLowerCase())\n+        )\n       );\n     }\n \n     // 상태 필터링\n     if (selectedStatus !== '전체') {\n-      filtered = filtered.filter(payment => payment.status === selectedStatus);\n+      const statusValue = getStatusValue(selectedStatus);\n+      filtered = filtered.filter(payment => payment.paymentStatus === statusValue);\n     }\n \n     // 날짜 필터링\n     if (startDate && endDate) {\n       filtered = filtered.filter(payment => {\n-        const paymentDate = new Date(payment.date);\n+        const paymentDate = payment.paymentDate ? new Date(payment.paymentDate) : new Date(payment.createdAt);\n         const start = new Date(startDate);\n         const end = new Date(endDate);\n         return paymentDate >= start && paymentDate <= end;\n       });\n     }\n \n     setFilteredHistory(filtered);\n-  };\n+  }, [paymentHistory, searchTerm, selectedStatus, startDate, endDate]);\n \n   const formatAmount = (amount: number) => {\n     return new Intl.NumberFormat('ko-KR').format(amount) + '원';\n   };\n \n-  const formatDate = (dateString: string) => {\n-    const date = new Date(dateString);\n-    return date.toLocaleDateString('ko-KR', {\n+  const formatDate = (date: string | Date) => {\n+    let dateObj: Date;\n+    if (typeof date === 'string') {\n+      dateObj = new Date(date);\n+    } else {\n+      dateObj = date;\n+    }\n+    \n+    return dateObj.toLocaleDateString('ko-KR', {\n       year: 'numeric',\n       month: '2-digit',\n       day: '2-digit'\n     });\n   };\n \n+  // 결제 이력이 변경될 때 필터 적용\n   useEffect(() => {\n-    const initialSearch = () => {\n-      setFilteredHistory(paymentHistory);\n-    };\n-    initialSearch();\n-  }, [paymentHistory]);\n+    handleSearch();\n+  }, [paymentHistory, handleSearch]);\n \n   return (\n     <Container>\n       <Header>\n@@ -296,9 +315,9 @@\n           <FormField>\n             <Label>검색어</Label>\n             <Input\n               type=\"text\"\n-              placeholder=\"회원명, 회원ID, 프로그램명\"\n+              placeholder=\"회원명, 회원ID, 상품명\"\n               value={searchTerm}\n               onChange={(e) => setSearchTerm(e.target.value)}\n             />\n           </FormField>\n@@ -309,8 +328,9 @@\n               value={selectedStatus}\n               onChange={(e) => setSelectedStatus(e.target.value)}\n             >\n               <option value=\"전체\">전체</option>\n+              <option value=\"대기\">대기</option>\n               <option value=\"완료\">완료</option>\n               <option value=\"취소\">취소</option>\n               <option value=\"환불\">환불</option>\n             </Select>\n@@ -344,37 +364,45 @@\n           <ResultsTitle>결제 이력 목록</ResultsTitle>\n           <ResultsCount>총 {filteredHistory.length}건</ResultsCount>\n         </ResultsHeader>\n \n-        {filteredHistory.length > 0 ? (\n+        {loading ? (\n+          <EmptyState>\n+            결제 이력을 불러오는 중...\n+          </EmptyState>\n+        ) : filteredHistory.length > 0 ? (\n           <Table>\n             <TableHeader>\n               <tr>\n                 <TableHeaderCell>결제일</TableHeaderCell>\n                 <TableHeaderCell>회원명</TableHeaderCell>\n                 <TableHeaderCell>회원ID</TableHeaderCell>\n-                <TableHeaderCell>프로그램</TableHeaderCell>\n+                <TableHeaderCell>상품</TableHeaderCell>\n                 <TableHeaderCell>결제금액</TableHeaderCell>\n                 <TableHeaderCell>결제방법</TableHeaderCell>\n                 <TableHeaderCell>상태</TableHeaderCell>\n-                <TableHeaderCell>내용</TableHeaderCell>\n+                <TableHeaderCell>메모</TableHeaderCell>\n               </tr>\n             </TableHeader>\n             <TableBody>\n               {filteredHistory.map((payment) => (\n                 <TableRow key={payment.id}>\n-                  <TableCell>{formatDate(payment.date)}</TableCell>\n+                  <TableCell>\n+                    {formatDate(payment.paymentDate || payment.createdAt)}\n+                  </TableCell>\n                   <TableCell>{payment.memberName}</TableCell>\n                   <TableCell>{payment.memberId}</TableCell>\n-                  <TableCell>{payment.program}</TableCell>\n-                  <TableCell>{formatAmount(payment.amount)}</TableCell>\n-                  <TableCell>{payment.paymentMethod}</TableCell>\n                   <TableCell>\n-                    <StatusBadge $status={payment.status}>\n-                      {payment.status}\n+                    {payment.products.map(product => product.name).join(', ')}\n+                  </TableCell>\n+                  <TableCell>{formatAmount(payment.totalAmount)}</TableCell>\n+                  <TableCell>{payment.paymentMethod || '-'}</TableCell>\n+                  <TableCell>\n+                    <StatusBadge $status={getStatusText(payment.paymentStatus)}>\n+                      {getStatusText(payment.paymentStatus)}\n                     </StatusBadge>\n                   </TableCell>\n-                  <TableCell>{payment.description}</TableCell>\n+                  <TableCell>{payment.notes || '-'}</TableCell>\n                 </TableRow>\n               ))}\n             </TableBody>\n           </Table>\n"
                },
                {
                    "date": 1760762961860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,8 +196,9 @@\n const getStatusText = (status: string) => {\n   switch (status) {\n     case 'completed': return '완료';\n     case 'pending': return '대기';\n+    case 'unpaid': return '미수';\n     case 'cancelled': return '취소';\n     case 'refunded': return '환불';\n     default: return status;\n   }\n@@ -207,8 +208,9 @@\n const getStatusValue = (statusText: string) => {\n   switch (statusText) {\n     case '완료': return 'completed';\n     case '대기': return 'pending';\n+    case '미수': return 'unpaid';\n     case '취소': return 'cancelled';\n     case '환불': return 'refunded';\n     default: return statusText;\n   }\n@@ -330,8 +332,9 @@\n             >\n               <option value=\"전체\">전체</option>\n               <option value=\"대기\">대기</option>\n               <option value=\"완료\">완료</option>\n+              <option value=\"미수\">미수</option>\n               <option value=\"취소\">취소</option>\n               <option value=\"환불\">환불</option>\n             </Select>\n           </FormField>\n@@ -374,13 +377,16 @@\n             <TableHeader>\n               <tr>\n                 <TableHeaderCell>결제일</TableHeaderCell>\n                 <TableHeaderCell>회원명</TableHeaderCell>\n-                <TableHeaderCell>회원ID</TableHeaderCell>\n                 <TableHeaderCell>상품</TableHeaderCell>\n+                <TableHeaderCell>결제타입</TableHeaderCell>\n+                <TableHeaderCell>총금액</TableHeaderCell>\n                 <TableHeaderCell>결제금액</TableHeaderCell>\n+                <TableHeaderCell>미수금액</TableHeaderCell>\n                 <TableHeaderCell>결제방법</TableHeaderCell>\n                 <TableHeaderCell>상태</TableHeaderCell>\n+                <TableHeaderCell>연결정보</TableHeaderCell>\n                 <TableHeaderCell>메모</TableHeaderCell>\n               </tr>\n             </TableHeader>\n             <TableBody>\n@@ -389,20 +395,52 @@\n                   <TableCell>\n                     {formatDate(payment.paymentDate || payment.createdAt)}\n                   </TableCell>\n                   <TableCell>{payment.memberName}</TableCell>\n-                  <TableCell>{payment.memberId}</TableCell>\n                   <TableCell>\n                     {payment.products.map(product => product.name).join(', ')}\n                   </TableCell>\n+                  <TableCell>\n+                    <span style={{ \n+                      padding: '4px 8px', \n+                      borderRadius: '12px', \n+                      fontSize: '12px',\n+                      backgroundColor: payment.paymentType === 'course' ? '#e3f2fd' : payment.paymentType === 'asset' ? '#f3e5f5' : '#f5f5f5',\n+                      color: payment.paymentType === 'course' ? '#1565c0' : payment.paymentType === 'asset' ? '#7b1fa2' : '#424242'\n+                    }}>\n+                      {payment.paymentType === 'course' ? '수강' : payment.paymentType === 'asset' ? '자산' : '기타'}\n+                    </span>\n+                  </TableCell>\n                   <TableCell>{formatAmount(payment.totalAmount)}</TableCell>\n+                  <TableCell style={{ color: '#2e7d32', fontWeight: '600' }}>\n+                    {formatAmount(payment.paidAmount)}\n+                  </TableCell>\n+                  <TableCell style={{ \n+                    color: payment.unpaidAmount > 0 ? '#d32f2f' : '#757575', \n+                    fontWeight: payment.unpaidAmount > 0 ? '600' : 'normal' \n+                  }}>\n+                    {payment.unpaidAmount > 0 ? formatAmount(payment.unpaidAmount) : '-'}\n+                  </TableCell>\n                   <TableCell>{payment.paymentMethod || '-'}</TableCell>\n                   <TableCell>\n                     <StatusBadge $status={getStatusText(payment.paymentStatus)}>\n                       {getStatusText(payment.paymentStatus)}\n                     </StatusBadge>\n                   </TableCell>\n-                  <TableCell>{payment.notes || '-'}</TableCell>\n+                  <TableCell>\n+                    {payment.relatedCourseId ? (\n+                      <div style={{ fontSize: '12px' }}>\n+                        <div>수강 ID: {payment.relatedCourseId.slice(-8)}</div>\n+                      </div>\n+                    ) : payment.relatedAssetId ? (\n+                      <div style={{ fontSize: '12px' }}>\n+                        <div>자산 ID: {payment.relatedAssetId.slice(-8)}</div>\n+                      </div>\n+                    ) : '-'}\n+                  </TableCell>\n+                  <TableCell style={{ maxWidth: '150px', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n+                    {payment.memo || '-'}\n+                  </TableCell>\n                 </TableRow>\n               ))}\n             </TableBody>\n           </Table>\n"
                },
                {
                    "date": 1760763299915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -428,18 +428,35 @@\n                   </TableCell>\n                   <TableCell>\n                     {payment.relatedCourseId ? (\n                       <div style={{ fontSize: '12px' }}>\n-                        <div>수강 ID: {payment.relatedCourseId.slice(-8)}</div>\n+                        <div style={{ color: AppColors.primary, fontWeight: '600' }}>\n+                          수강 ID: {payment.relatedCourseId.slice(-8)}\n+                        </div>\n                       </div>\n                     ) : payment.relatedAssetId ? (\n                       <div style={{ fontSize: '12px' }}>\n-                        <div>자산 ID: {payment.relatedAssetId.slice(-8)}</div>\n+                        <div style={{ color: '#7b1fa2', fontWeight: '600' }}>\n+                          자산 ID: {payment.relatedAssetId.slice(-8)}\n+                        </div>\n                       </div>\n+                    ) : payment.memo?.includes('수강') && payment.memo?.includes('ID:') ? (\n+                      <div style={{ fontSize: '12px', color: AppColors.primary }}>\n+                        {/* 메모에서 수강 ID 정보 추출 */}\n+                        <div style={{ fontWeight: '600' }}>\n+                          {payment.memo.match(/수강 \\d+개|ID: [\\w,\\s-]+/g)?.join(' | ') || '다중 수강'}\n+                        </div>\n+                      </div>\n                     ) : '-'}\n                   </TableCell>\n-                  <TableCell style={{ maxWidth: '150px', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n-                    {payment.memo || '-'}\n+                  <TableCell style={{ maxWidth: '200px', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n+                    <div style={{ fontSize: '12px', lineHeight: '1.4' }}>\n+                      {payment.memo ? (\n+                        <span title={payment.memo}>\n+                          {payment.memo.length > 50 ? payment.memo.substring(0, 50) + '...' : payment.memo}\n+                        </span>\n+                      ) : '-'}\n+                    </div>\n                   </TableCell>\n                 </TableRow>\n               ))}\n             </TableBody>\n"
                },
                {
                    "date": 1760763568541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n `;\n \n const SearchForm = styled.div`\n   display: grid;\n-  grid-template-columns: 1fr 1fr 1fr auto;\n+  grid-template-columns: 1fr 1fr auto;\n   gap: 16px;\n   align-items: end;\n `;\n \n@@ -65,23 +65,8 @@\n     box-shadow: 0 0 0 2px ${AppColors.primary}20;\n   }\n `;\n \n-const Select = styled.select`\n-  padding: 12px 16px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  ${AppTextStyles.body1};\n-  background-color: ${AppColors.surface};\n-  color: ${AppColors.onSurface};\n-\n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-    box-shadow: 0 0 0 2px ${AppColors.primary}20;\n-  }\n-`;\n-\n const SearchButton = styled.button`\n   padding: 12px 24px;\n   background-color: ${AppColors.primary};\n   color: ${AppColors.onPrimary};\n@@ -160,66 +145,17 @@\n   color: ${AppColors.onSurface};\n   border-bottom: 1px solid ${AppColors.borderLight};\n `;\n \n-const StatusBadge = styled.span<{ $status: string }>`\n-  padding: 4px 8px;\n-  border-radius: 12px;\n-  ${AppTextStyles.label2};\n-  font-weight: 500;\n-  background-color: ${props => {\n-    switch (props.$status) {\n-      case '완료': return `${AppColors.success}20`;\n-      case '대기': return `${AppColors.warning}20`;\n-      case '취소': return `${AppColors.error}20`;\n-      case '환불': return `${AppColors.warning}20`;\n-      default: return `${AppColors.onSurface}20`;\n-    }\n-  }};\n-  color: ${props => {\n-    switch (props.$status) {\n-      case '완료': return AppColors.success;\n-      case '대기': return AppColors.warning;\n-      case '취소': return AppColors.error;\n-      case '환불': return AppColors.warning;\n-      default: return AppColors.onSurface;\n-    }\n-  }};\n-`;\n-\n const EmptyState = styled.div`\n-  padding: 48px 24px;\n+  padding: 40px;\n   text-align: center;\n   color: ${AppColors.onInput2};\n+  ${AppTextStyles.body1};\n `;\n \n-// 결제 상태 한글 변환 함수\n-const getStatusText = (status: string) => {\n-  switch (status) {\n-    case 'completed': return '완료';\n-    case 'pending': return '대기';\n-    case 'unpaid': return '미수';\n-    case 'cancelled': return '취소';\n-    case 'refunded': return '환불';\n-    default: return status;\n-  }\n-};\n-\n-// 결제 상태 영어 변환 함수\n-const getStatusValue = (statusText: string) => {\n-  switch (statusText) {\n-    case '완료': return 'completed';\n-    case '대기': return 'pending';\n-    case '미수': return 'unpaid';\n-    case '취소': return 'cancelled';\n-    case '환불': return 'refunded';\n-    default: return statusText;\n-  }\n-};\n-\n const MemberPaymentHistory: React.FC = () => {\n   const [searchTerm, setSearchTerm] = useState('');\n-  const [selectedStatus, setSelectedStatus] = useState('전체');\n   const [startDate, setStartDate] = useState('');\n   const [endDate, setEndDate] = useState('');\n   const [paymentHistory, setPaymentHistory] = useState<Payment[]>([]);\n   const [filteredHistory, setFilteredHistory] = useState<Payment[]>([]);\n@@ -261,14 +197,8 @@\n         )\n       );\n     }\n \n-    // 상태 필터링\n-    if (selectedStatus !== '전체') {\n-      const statusValue = getStatusValue(selectedStatus);\n-      filtered = filtered.filter(payment => payment.paymentStatus === statusValue);\n-    }\n-\n     // 날짜 필터링\n     if (startDate && endDate) {\n       filtered = filtered.filter(payment => {\n         const paymentDate = payment.paymentDate ? new Date(payment.paymentDate) : new Date(payment.createdAt);\n@@ -278,9 +208,9 @@\n       });\n     }\n \n     setFilteredHistory(filtered);\n-  }, [paymentHistory, searchTerm, selectedStatus, startDate, endDate]);\n+  }, [paymentHistory, searchTerm, startDate, endDate]);\n \n   const formatAmount = (amount: number) => {\n     return new Intl.NumberFormat('ko-KR').format(amount) + '원';\n   };\n@@ -324,23 +254,8 @@\n             />\n           </FormField>\n           \n           <FormField>\n-            <Label>결제 상태</Label>\n-            <Select\n-              value={selectedStatus}\n-              onChange={(e) => setSelectedStatus(e.target.value)}\n-            >\n-              <option value=\"전체\">전체</option>\n-              <option value=\"대기\">대기</option>\n-              <option value=\"완료\">완료</option>\n-              <option value=\"미수\">미수</option>\n-              <option value=\"취소\">취소</option>\n-              <option value=\"환불\">환불</option>\n-            </Select>\n-          </FormField>\n-\n-          <FormField>\n             <Label>기간 조회</Label>\n             <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\n               <Input\n                 type=\"date\"\n@@ -383,9 +298,8 @@\n                 <TableHeaderCell>총금액</TableHeaderCell>\n                 <TableHeaderCell>결제금액</TableHeaderCell>\n                 <TableHeaderCell>미수금액</TableHeaderCell>\n                 <TableHeaderCell>결제방법</TableHeaderCell>\n-                <TableHeaderCell>상태</TableHeaderCell>\n                 <TableHeaderCell>연결정보</TableHeaderCell>\n                 <TableHeaderCell>메모</TableHeaderCell>\n               </tr>\n             </TableHeader>\n@@ -421,13 +335,8 @@\n                     {payment.unpaidAmount > 0 ? formatAmount(payment.unpaidAmount) : '-'}\n                   </TableCell>\n                   <TableCell>{payment.paymentMethod || '-'}</TableCell>\n                   <TableCell>\n-                    <StatusBadge $status={getStatusText(payment.paymentStatus)}>\n-                      {getStatusText(payment.paymentStatus)}\n-                    </StatusBadge>\n-                  </TableCell>\n-                  <TableCell>\n                     {payment.relatedCourseId ? (\n                       <div style={{ fontSize: '12px' }}>\n                         <div style={{ color: AppColors.primary, fontWeight: '600' }}>\n                           수강 ID: {payment.relatedCourseId.slice(-8)}\n"
                },
                {
                    "date": 1761129542603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,215 +2,275 @@\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, Payment } from '../../../utils/indexedDB';\n+import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n+import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n \n-const Container = styled.div`\n-  padding: 24px;\n-  background-color: ${AppColors.background};\n+const PageContainer = styled.div`\n+  width: 100%;\n `;\n \n-const Header = styled.div`\n-  margin-bottom: 24px;\n-`;\n-\n-const Title = styled.h1`\n-  ${AppTextStyles.title1};\n-  color: ${AppColors.onBackground};\n-  margin-bottom: 8px;\n-`;\n-\n-const Description = styled.p`\n-  ${AppTextStyles.body1};\n-  color: ${AppColors.onInput2};\n-`;\n-\n-const SearchSection = styled.div`\n-  background-color: ${AppColors.surface};\n-  border-radius: 12px;\n-  padding: 24px;\n-  margin-bottom: 24px;\n-  border: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const SearchForm = styled.div`\n-  display: grid;\n-  grid-template-columns: 1fr 1fr auto;\n-  gap: 16px;\n-  align-items: end;\n-`;\n-\n-const FormField = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  gap: 8px;\n-`;\n-\n-const Label = styled.label`\n-  ${AppTextStyles.label1};\n-  color: ${AppColors.onSurface};\n-  font-weight: 500;\n-`;\n-\n-const Input = styled.input`\n-  padding: 12px 16px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  ${AppTextStyles.body1};\n-  background-color: ${AppColors.surface};\n-  color: ${AppColors.onSurface};\n-\n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-    box-shadow: 0 0 0 2px ${AppColors.primary}20;\n-  }\n-`;\n-\n-const SearchButton = styled.button`\n-  padding: 12px 24px;\n-  background-color: ${AppColors.primary};\n-  color: ${AppColors.onPrimary};\n-  border: none;\n-  border-radius: 8px;\n-  ${AppTextStyles.body1};\n-  font-weight: 500;\n-  cursor: pointer;\n-  transition: background-color 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.buttonPrimaryHover};\n-  }\n-\n-  &:disabled {\n-    background-color: ${AppColors.onSurface}40;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n const ResultsSection = styled.div`\n-  background-color: ${AppColors.surface};\n-  border-radius: 12px;\n+  background: ${AppColors.surface};\n   border: 1px solid ${AppColors.borderLight};\n+  border-radius: 16px;\n   overflow: hidden;\n+  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n `;\n \n const ResultsHeader = styled.div`\n-  padding: 16px 24px;\n-  background-color: ${AppColors.btnC};\n-  border-bottom: 1px solid ${AppColors.borderLight};\n   display: flex;\n   justify-content: space-between;\n   align-items: center;\n+  padding: 20px 24px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n `;\n \n-const ResultsTitle = styled.h3`\n-  ${AppTextStyles.title3};\n-  color: ${AppColors.onSurface};\n+const ResultsTitle = styled.h2`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onBackground};\n+  margin: 0;\n `;\n \n const ResultsCount = styled.span`\n-  ${AppTextStyles.body2};\n-  color: ${AppColors.onInput2};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onInput1};\n `;\n \n+const TableContainer = styled.div`\n+  overflow-x: auto;\n+`;\n+\n const Table = styled.table`\n   width: 100%;\n   border-collapse: collapse;\n `;\n \n const TableHeader = styled.thead`\n-  background-color: ${AppColors.btnC};\n+  background: #f8f9fa;\n `;\n \n const TableHeaderCell = styled.th`\n-  padding: 16px;\n+  padding: 12px 16px;\n   text-align: left;\n-  ${AppTextStyles.label1};\n+  font-size: ${AppTextStyles.label2.fontSize};\n   font-weight: 600;\n-  color: ${AppColors.onSurface};\n+  color: ${AppColors.onInput1};\n   border-bottom: 1px solid ${AppColors.borderLight};\n `;\n \n const TableBody = styled.tbody``;\n \n const TableRow = styled.tr`\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  \n   &:hover {\n-    background-color: ${AppColors.btnC}80;\n+    background: #f8f9fa;\n   }\n `;\n \n const TableCell = styled.td`\n-  padding: 16px;\n-  ${AppTextStyles.body2};\n-  color: ${AppColors.onSurface};\n-  border-bottom: 1px solid ${AppColors.borderLight};\n+  padding: 12px 16px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onBackground};\n+  vertical-align: middle;\n `;\n \n const EmptyState = styled.div`\n-  padding: 40px;\n+  padding: 60px 24px;\n   text-align: center;\n-  color: ${AppColors.onInput2};\n-  ${AppTextStyles.body1};\n+  color: ${AppColors.onInput1};\n `;\n \n+const LoadingState = styled.div`\n+  padding: 60px 24px;\n+  text-align: center;\n+  color: ${AppColors.onInput1};\n+`;\n+\n const MemberPaymentHistory: React.FC = () => {\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [startDate, setStartDate] = useState('');\n-  const [endDate, setEndDate] = useState('');\n+  const [searchQuery, setSearchQuery] = useState<string>('');\n   const [paymentHistory, setPaymentHistory] = useState<Payment[]>([]);\n   const [filteredHistory, setFilteredHistory] = useState<Payment[]>([]);\n-  const [loading, setLoading] = useState(false);\n+  const [loading, setLoading] = useState<boolean>(false);\n+  \n+  // 기간 선택 관련 상태\n+  const [selectedPeriod, setSelectedPeriod] = useState<PeriodOption>('1month');\n+  const [customStartDate, setCustomStartDate] = useState<string>('');\n+  const [customEndDate, setCustomEndDate] = useState<string>('');\n+  \n+  // 미수 필터 관련 상태\n+  const [showUnpaidOnly, setShowUnpaidOnly] = useState<boolean>(false);\n+  const [unpaidMetaInfo, setUnpaidMetaInfo] = useState<{ unpaidPaymentCount: number; totalUnpaidAmount: number }>({\n+    unpaidPaymentCount: 0,\n+    totalUnpaidAmount: 0\n+  });\n \n+  // 미수 메타정보 로드\n+  const loadUnpaidMetaInfo = useCallback(async () => {\n+    try {\n+      const allPayments = await dbManager.getAllPayments();\n+      const unpaidPayments = allPayments.filter(p => p.unpaidAmount > 0);\n+      const unpaidPaymentCount = unpaidPayments.length;\n+      const totalUnpaidAmount = unpaidPayments.reduce((sum, p) => sum + p.unpaidAmount, 0);\n+      \n+      setUnpaidMetaInfo({ unpaidPaymentCount, totalUnpaidAmount });\n+    } catch (error) {\n+      console.error('미수 메타정보 로드 실패:', error);\n+    }\n+  }, []);\n+\n+  // 기간별 검색 범위 계산\n+  const getDateRange = useCallback(() => {\n+    const today = new Date();\n+    const startDate = new Date();\n+    \n+    switch (selectedPeriod) {\n+      case '1month':\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+      case '3month':\n+        startDate.setMonth(today.getMonth() - 3);\n+        return { start: startDate, end: today };\n+      case '6month':\n+        startDate.setMonth(today.getMonth() - 6);\n+        return { start: startDate, end: today };\n+      case 'custom':\n+        if (customStartDate && customEndDate) {\n+          return { \n+            start: new Date(customStartDate), \n+            end: new Date(customEndDate) \n+          };\n+        }\n+        // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+      default:\n+        startDate.setMonth(today.getMonth() - 1);\n+        return { start: startDate, end: today };\n+    }\n+  }, [selectedPeriod, customStartDate, customEndDate]);\n+\n+  // 날짜 범위 표시 문자열 생성\n+  const getDateRangeDisplay = useCallback(() => {\n+    const range = getDateRange();\n+    const formatDate = (date: Date) => {\n+      return date.toLocaleDateString('ko-KR', {\n+        year: 'numeric',\n+        month: 'short',\n+        day: 'numeric'\n+      });\n+    };\n+    return `${formatDate(range.start)} ~ ${formatDate(range.end)}`;\n+  }, [getDateRange]);\n+\n   // 결제 이력 데이터 로드\n-  const loadPaymentHistory = async () => {\n-    setLoading(true);\n+  const loadPaymentHistory = useCallback(async (period?: PeriodOption, startDate?: string, endDate?: string) => {\n     try {\n-      console.log('=== 결제 이력 로딩 시작 ===');\n-      const payments = await dbManager.getAllPayments();\n-      console.log('로드된 결제 데이터:', payments);\n-      setPaymentHistory(payments);\n-      setFilteredHistory(payments);\n+      setLoading(true);\n+      console.log('결제 이력 데이터 로딩 시작...');\n+      \n+      // 미수 메타정보 로드\n+      await loadUnpaidMetaInfo();\n+      \n+      const allPayments = await dbManager.getAllPayments();\n+      console.log('전체 결제 이력 수:', allPayments.length);\n+      \n+      // 기간별 필터링 (결제일 기준) - 매개변수가 있으면 사용, 없으면 현재 상태 사용\n+      const currentPeriod = period ?? selectedPeriod;\n+      const currentStartDate = startDate ?? customStartDate;\n+      const currentEndDate = endDate ?? customEndDate;\n+      \n+      let dateRange: { start: Date; end: Date };\n+      const today = new Date();\n+      const rangeStartDate = new Date();\n+      \n+      switch (currentPeriod) {\n+        case '1month':\n+          rangeStartDate.setMonth(today.getMonth() - 1);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case '3month':\n+          rangeStartDate.setMonth(today.getMonth() - 3);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case '6month':\n+          rangeStartDate.setMonth(today.getMonth() - 6);\n+          dateRange = { start: rangeStartDate, end: today };\n+          break;\n+        case 'custom':\n+          if (currentStartDate && currentEndDate) {\n+            dateRange = { \n+              start: new Date(currentStartDate), \n+              end: new Date(currentEndDate) \n+            };\n+          } else {\n+            // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+            rangeStartDate.setMonth(today.getMonth() - 1);\n+            dateRange = { start: rangeStartDate, end: today };\n+          }\n+          break;\n+        default:\n+          rangeStartDate.setMonth(today.getMonth() - 1);\n+          dateRange = { start: rangeStartDate, end: today };\n+      }\n+      \n+      const filteredByDate = allPayments.filter(payment => {\n+        const paymentDate = payment.paymentDate ? new Date(payment.paymentDate) : new Date(payment.createdAt);\n+        return paymentDate >= dateRange.start && paymentDate <= dateRange.end;\n+      });\n+      \n+      console.log(`${currentPeriod} 기간 내 결제 이력:`, filteredByDate.length);\n+      \n+      setPaymentHistory(filteredByDate);\n+      setFilteredHistory(filteredByDate);\n     } catch (error) {\n       console.error('결제 이력 로딩 실패:', error);\n       setPaymentHistory([]);\n       setFilteredHistory([]);\n     } finally {\n       setLoading(false);\n     }\n-  };\n+  }, [loadUnpaidMetaInfo, selectedPeriod, customStartDate, customEndDate]);\n \n-  // 컴포넌트 마운트 시 데이터 로드\n+  // 컴포넌트 마운트 시 초기 데이터 로드 (1개월 기준)\n   useEffect(() => {\n-    loadPaymentHistory();\n-  }, []);\n+    const initializeData = async () => {\n+      await loadPaymentHistory();\n+    };\n+    initializeData();\n+  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n \n-  const handleSearch = useCallback(() => {\n+  const handleSearch = async () => {\n+    // 현재 선택된 조건으로 데이터를 불러옵니다\n+    await loadPaymentHistory(selectedPeriod, customStartDate, customEndDate);\n+  };\n+\n+  // 필터 적용 함수 (데이터 로드와 분리)\n+  const applyFilters = useCallback(() => {\n     let filtered = paymentHistory;\n-\n-    // 검색어 필터링\n-    if (searchTerm) {\n-      filtered = filtered.filter(payment => \n-        payment.memberName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-        payment.memberId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+    \n+    // 미수 필터 적용\n+    if (showUnpaidOnly) {\n+      filtered = filtered.filter(payment => payment.unpaidAmount > 0);\n+    }\n+    \n+    // 텍스트 검색\n+    if (searchQuery.trim()) {\n+      const query = searchQuery.toLowerCase().trim();\n+      filtered = filtered.filter(payment =>\n+        payment.memberName.toLowerCase().includes(query) ||\n+        payment.memberId.toLowerCase().includes(query) ||\n         payment.products.some(product => \n-          product.name.toLowerCase().includes(searchTerm.toLowerCase())\n+          product.name.toLowerCase().includes(query)\n         )\n       );\n     }\n-\n-    // 날짜 필터링\n-    if (startDate && endDate) {\n-      filtered = filtered.filter(payment => {\n-        const paymentDate = payment.paymentDate ? new Date(payment.paymentDate) : new Date(payment.createdAt);\n-        const start = new Date(startDate);\n-        const end = new Date(endDate);\n-        return paymentDate >= start && paymentDate <= end;\n-      });\n-    }\n-\n+    \n     setFilteredHistory(filtered);\n-  }, [paymentHistory, searchTerm, startDate, endDate]);\n+  }, [paymentHistory, showUnpaidOnly, searchQuery]);\n \n   const formatAmount = (amount: number) => {\n     return new Intl.NumberFormat('ko-KR').format(amount) + '원';\n   };\n@@ -229,155 +289,158 @@\n       day: '2-digit'\n     });\n   };\n \n-  // 결제 이력이 변경될 때 필터 적용\n+  // 결제 이력이 변경될 때 또는 필터 조건이 변경될 때 필터 적용\n   useEffect(() => {\n-    handleSearch();\n-  }, [paymentHistory, handleSearch]);\n+    applyFilters();\n+  }, [applyFilters]);\n \n+  if (loading) {\n+    return (\n+      <PageContainer>\n+        <LoadingState>\n+          <h3>결제 데이터를 불러오는 중...</h3>\n+        </LoadingState>\n+      </PageContainer>\n+    );\n+  }\n+\n   return (\n-    <Container>\n-      <Header>\n-        <Title>결제 이력</Title>\n-        <Description>회원들의 결제 이력을 조회하고 관리할 수 있습니다.</Description>\n-      </Header>\n-\n-      <SearchSection>\n-        <SearchForm>\n-          <FormField>\n-            <Label>검색어</Label>\n-            <Input\n-              type=\"text\"\n-              placeholder=\"회원명, 회원ID, 상품명\"\n-              value={searchTerm}\n-              onChange={(e) => setSearchTerm(e.target.value)}\n+    <PageContainer>\n+      {/* 새로운 SearchArea 컴포넌트 사용 */}\n+      <SearchArea\n+        metaContent={\n+          <div style={{ display: 'flex', gap: '12px', alignItems: 'center', flexWrap: 'wrap' }}>\n+            <UnpaidFilter\n+              active={showUnpaidOnly}\n+              unpaidCount={unpaidMetaInfo.unpaidPaymentCount}\n+              totalAmount={unpaidMetaInfo.totalUnpaidAmount}\n+              onClick={() => setShowUnpaidOnly(!showUnpaidOnly)}\n             />\n-          </FormField>\n-          \n-          <FormField>\n-            <Label>기간 조회</Label>\n-            <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\n-              <Input\n-                type=\"date\"\n-                value={startDate}\n-                onChange={(e) => setStartDate(e.target.value)}\n-              />\n-              <span>~</span>\n-              <Input\n-                type=\"date\"\n-                value={endDate}\n-                onChange={(e) => setEndDate(e.target.value)}\n-              />\n-            </div>\n-          </FormField>\n+          </div>\n+        }\n+        selectedPeriod={selectedPeriod}\n+        onPeriodChange={setSelectedPeriod}\n+        customStartDate={customStartDate}\n+        customEndDate={customEndDate}\n+        onCustomStartDateChange={setCustomStartDate}\n+        onCustomEndDateChange={setCustomEndDate}\n+        dateRangeDisplay={getDateRangeDisplay()}\n+        searchValue={searchQuery}\n+        onSearchChange={setSearchQuery}\n+        onSearch={handleSearch}\n+        searchPlaceholder=\"회원명, 회원ID, 상품명으로 검색...\"\n+        autoSearchOnDateChange={false}\n+      />\n \n-          <SearchButton onClick={handleSearch}>\n-            검색\n-          </SearchButton>\n-        </SearchForm>\n-      </SearchSection>\n-\n       <ResultsSection>\n         <ResultsHeader>\n-          <ResultsTitle>결제 이력 목록</ResultsTitle>\n-          <ResultsCount>총 {filteredHistory.length}건</ResultsCount>\n+          <ResultsTitle>결제 이력</ResultsTitle>\n+          <ResultsCount>\n+            {showUnpaidOnly ? '미수 결제: ' : ''}{filteredHistory.length}건 \n+            (완납: {filteredHistory.filter(p => p.unpaidAmount === 0).length}건, \n+            미수: {filteredHistory.filter(p => p.unpaidAmount > 0).length}건)\n+            <br />\n+            <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+              기간: {getDateRangeDisplay()} | 전체: {paymentHistory.length}건\n+            </span>\n+          </ResultsCount>\n         </ResultsHeader>\n \n-        {loading ? (\n-          <EmptyState>\n-            결제 이력을 불러오는 중...\n-          </EmptyState>\n-        ) : filteredHistory.length > 0 ? (\n-          <Table>\n-            <TableHeader>\n-              <tr>\n-                <TableHeaderCell>결제일</TableHeaderCell>\n-                <TableHeaderCell>회원명</TableHeaderCell>\n-                <TableHeaderCell>상품</TableHeaderCell>\n-                <TableHeaderCell>결제타입</TableHeaderCell>\n-                <TableHeaderCell>총금액</TableHeaderCell>\n-                <TableHeaderCell>결제금액</TableHeaderCell>\n-                <TableHeaderCell>미수금액</TableHeaderCell>\n-                <TableHeaderCell>결제방법</TableHeaderCell>\n-                <TableHeaderCell>연결정보</TableHeaderCell>\n-                <TableHeaderCell>메모</TableHeaderCell>\n-              </tr>\n-            </TableHeader>\n-            <TableBody>\n-              {filteredHistory.map((payment) => (\n-                <TableRow key={payment.id}>\n-                  <TableCell>\n-                    {formatDate(payment.paymentDate || payment.createdAt)}\n-                  </TableCell>\n-                  <TableCell>{payment.memberName}</TableCell>\n-                  <TableCell>\n-                    {payment.products.map(product => product.name).join(', ')}\n-                  </TableCell>\n-                  <TableCell>\n-                    <span style={{ \n-                      padding: '4px 8px', \n-                      borderRadius: '12px', \n-                      fontSize: '12px',\n-                      backgroundColor: payment.paymentType === 'course' ? '#e3f2fd' : payment.paymentType === 'asset' ? '#f3e5f5' : '#f5f5f5',\n-                      color: payment.paymentType === 'course' ? '#1565c0' : payment.paymentType === 'asset' ? '#7b1fa2' : '#424242'\n+        {filteredHistory.length > 0 ? (\n+          <TableContainer>\n+            <Table>\n+              <TableHeader>\n+                <tr>\n+                  <TableHeaderCell>결제일</TableHeaderCell>\n+                  <TableHeaderCell>회원명</TableHeaderCell>\n+                  <TableHeaderCell>상품</TableHeaderCell>\n+                  <TableHeaderCell>결제타입</TableHeaderCell>\n+                  <TableHeaderCell>총금액</TableHeaderCell>\n+                  <TableHeaderCell>결제금액</TableHeaderCell>\n+                  <TableHeaderCell>미수금액</TableHeaderCell>\n+                  <TableHeaderCell>결제방법</TableHeaderCell>\n+                  <TableHeaderCell>연결정보</TableHeaderCell>\n+                  <TableHeaderCell>메모</TableHeaderCell>\n+                </tr>\n+              </TableHeader>\n+              <TableBody>\n+                {filteredHistory.map((payment) => (\n+                  <TableRow key={payment.id}>\n+                    <TableCell>\n+                      {formatDate(payment.paymentDate || payment.createdAt)}\n+                    </TableCell>\n+                    <TableCell>{payment.memberName}</TableCell>\n+                    <TableCell>\n+                      {payment.products.map(product => product.name).join(', ')}\n+                    </TableCell>\n+                    <TableCell>\n+                      <span style={{ \n+                        padding: '4px 8px', \n+                        borderRadius: '12px', \n+                        fontSize: '12px',\n+                        backgroundColor: payment.paymentType === 'course' ? '#e3f2fd' : payment.paymentType === 'asset' ? '#f3e5f5' : '#f5f5f5',\n+                        color: payment.paymentType === 'course' ? '#1565c0' : payment.paymentType === 'asset' ? '#7b1fa2' : '#424242'\n+                      }}>\n+                        {payment.paymentType === 'course' ? '수강' : payment.paymentType === 'asset' ? '자산' : '기타'}\n+                      </span>\n+                    </TableCell>\n+                    <TableCell>{formatAmount(payment.totalAmount)}</TableCell>\n+                    <TableCell style={{ color: '#2e7d32', fontWeight: '600' }}>\n+                      {formatAmount(payment.paidAmount)}\n+                    </TableCell>\n+                    <TableCell style={{ \n+                      color: payment.unpaidAmount > 0 ? '#d32f2f' : '#757575', \n+                      fontWeight: payment.unpaidAmount > 0 ? '600' : 'normal' \n                     }}>\n-                      {payment.paymentType === 'course' ? '수강' : payment.paymentType === 'asset' ? '자산' : '기타'}\n-                    </span>\n-                  </TableCell>\n-                  <TableCell>{formatAmount(payment.totalAmount)}</TableCell>\n-                  <TableCell style={{ color: '#2e7d32', fontWeight: '600' }}>\n-                    {formatAmount(payment.paidAmount)}\n-                  </TableCell>\n-                  <TableCell style={{ \n-                    color: payment.unpaidAmount > 0 ? '#d32f2f' : '#757575', \n-                    fontWeight: payment.unpaidAmount > 0 ? '600' : 'normal' \n-                  }}>\n-                    {payment.unpaidAmount > 0 ? formatAmount(payment.unpaidAmount) : '-'}\n-                  </TableCell>\n-                  <TableCell>{payment.paymentMethod || '-'}</TableCell>\n-                  <TableCell>\n-                    {payment.relatedCourseId ? (\n-                      <div style={{ fontSize: '12px' }}>\n-                        <div style={{ color: AppColors.primary, fontWeight: '600' }}>\n-                          수강 ID: {payment.relatedCourseId.slice(-8)}\n+                      {payment.unpaidAmount > 0 ? formatAmount(payment.unpaidAmount) : '-'}\n+                    </TableCell>\n+                    <TableCell>{payment.paymentMethod || '-'}</TableCell>\n+                    <TableCell>\n+                      {payment.relatedCourseId ? (\n+                        <div style={{ fontSize: '12px' }}>\n+                          <div style={{ color: AppColors.primary, fontWeight: '600' }}>\n+                            수강 ID: {payment.relatedCourseId.slice(-8)}\n+                          </div>\n                         </div>\n-                      </div>\n-                    ) : payment.relatedAssetId ? (\n-                      <div style={{ fontSize: '12px' }}>\n-                        <div style={{ color: '#7b1fa2', fontWeight: '600' }}>\n-                          자산 ID: {payment.relatedAssetId.slice(-8)}\n+                      ) : payment.relatedAssetId ? (\n+                        <div style={{ fontSize: '12px' }}>\n+                          <div style={{ color: '#7b1fa2', fontWeight: '600' }}>\n+                            자산 ID: {payment.relatedAssetId.slice(-8)}\n+                          </div>\n                         </div>\n-                      </div>\n-                    ) : payment.memo?.includes('수강') && payment.memo?.includes('ID:') ? (\n-                      <div style={{ fontSize: '12px', color: AppColors.primary }}>\n-                        {/* 메모에서 수강 ID 정보 추출 */}\n-                        <div style={{ fontWeight: '600' }}>\n-                          {payment.memo.match(/수강 \\d+개|ID: [\\w,\\s-]+/g)?.join(' | ') || '다중 수강'}\n+                      ) : payment.memo?.includes('수강') && payment.memo?.includes('ID:') ? (\n+                        <div style={{ fontSize: '12px', color: AppColors.primary }}>\n+                          {/* 메모에서 수강 ID 정보 추출 */}\n+                          <div style={{ fontWeight: '600' }}>\n+                            {payment.memo.match(/수강 \\d+개|ID: [\\w,\\s-]+/g)?.join(' | ') || '다중 수강'}\n+                          </div>\n                         </div>\n+                      ) : '-'}\n+                    </TableCell>\n+                    <TableCell style={{ maxWidth: '200px', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n+                      <div style={{ fontSize: '12px', lineHeight: '1.4' }}>\n+                        {payment.memo ? (\n+                          <span title={payment.memo}>\n+                            {payment.memo.length > 50 ? payment.memo.substring(0, 50) + '...' : payment.memo}\n+                          </span>\n+                        ) : '-'}\n                       </div>\n-                    ) : '-'}\n-                  </TableCell>\n-                  <TableCell style={{ maxWidth: '200px', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n-                    <div style={{ fontSize: '12px', lineHeight: '1.4' }}>\n-                      {payment.memo ? (\n-                        <span title={payment.memo}>\n-                          {payment.memo.length > 50 ? payment.memo.substring(0, 50) + '...' : payment.memo}\n-                        </span>\n-                      ) : '-'}\n-                    </div>\n-                  </TableCell>\n-                </TableRow>\n-              ))}\n-            </TableBody>\n-          </Table>\n+                    </TableCell>\n+                  </TableRow>\n+                ))}\n+              </TableBody>\n+            </Table>\n+          </TableContainer>\n         ) : (\n           <EmptyState>\n-            검색 조건에 맞는 결제 이력이 없습니다.\n+            <h3>검색 결과가 없습니다</h3>\n+            <p>다른 검색어를 입력하거나 필터를 조정해보세요.</p>\n           </EmptyState>\n         )}\n       </ResultsSection>\n-    </Container>\n+    </PageContainer>\n   );\n };\n \n export default MemberPaymentHistory;\n"
                },
                {
                    "date": 1761369384294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,95 +1,16 @@\n import React, { useState, useEffect, useCallback } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, Payment } from '../../../utils/indexedDB';\n import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n+import DataTable, { type TableColumn } from '../../../components/DataTable';\n \n const PageContainer = styled.div`\n   width: 100%;\n `;\n \n-const ResultsSection = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  overflow: hidden;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const ResultsHeader = styled.div`\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-  padding: 20px 24px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const ResultsTitle = styled.h2`\n-  font-size: ${AppTextStyles.title3.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onBackground};\n-  margin: 0;\n-`;\n-\n-const ResultsCount = styled.span`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const TableContainer = styled.div`\n-  overflow-x: auto;\n-`;\n-\n-const Table = styled.table`\n-  width: 100%;\n-  border-collapse: collapse;\n-`;\n-\n-const TableHeader = styled.thead`\n-  background: #f8f9fa;\n-`;\n-\n-const TableHeaderCell = styled.th`\n-  padding: 12px 16px;\n-  text-align: left;\n-  font-size: ${AppTextStyles.label2.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onInput1};\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const TableBody = styled.tbody``;\n-\n-const TableRow = styled.tr`\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  \n-  &:hover {\n-    background: #f8f9fa;\n-  }\n-`;\n-\n-const TableCell = styled.td`\n-  padding: 12px 16px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onBackground};\n-  vertical-align: middle;\n-`;\n-\n-const EmptyState = styled.div`\n-  padding: 60px 24px;\n-  text-align: center;\n-  color: ${AppColors.onInput1};\n-`;\n-\n-const LoadingState = styled.div`\n-  padding: 60px 24px;\n-  text-align: center;\n-  color: ${AppColors.onInput1};\n-`;\n-\n const MemberPaymentHistory: React.FC = () => {\n   const [searchQuery, setSearchQuery] = useState<string>('');\n   const [paymentHistory, setPaymentHistory] = useState<Payment[]>([]);\n   const [filteredHistory, setFilteredHistory] = useState<Payment[]>([]);\n@@ -110,11 +31,11 @@\n   // 미수 메타정보 로드\n   const loadUnpaidMetaInfo = useCallback(async () => {\n     try {\n       const allPayments = await dbManager.getAllPayments();\n-      const unpaidPayments = allPayments.filter(p => p.unpaidAmount > 0);\n+      const unpaidPayments = allPayments.filter(payment => payment.unpaidAmount > 0);\n       const unpaidPaymentCount = unpaidPayments.length;\n-      const totalUnpaidAmount = unpaidPayments.reduce((sum, p) => sum + p.unpaidAmount, 0);\n+      const totalUnpaidAmount = unpaidPayments.reduce((sum, payment) => sum + payment.unpaidAmount, 0);\n       \n       setUnpaidMetaInfo({ unpaidPaymentCount, totalUnpaidAmount });\n     } catch (error) {\n       console.error('미수 메타정보 로드 실패:', error);\n@@ -142,9 +63,9 @@\n             start: new Date(customStartDate), \n             end: new Date(customEndDate) \n           };\n         }\n-        // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+        // 커스텀 날짜가 설정되지 않았다면 기본값 (1개월)\n         startDate.setMonth(today.getMonth() - 1);\n         return { start: startDate, end: today };\n       default:\n         startDate.setMonth(today.getMonth() - 1);\n@@ -164,9 +85,8 @@\n     };\n     return `${formatDate(range.start)} ~ ${formatDate(range.end)}`;\n   }, [getDateRange]);\n \n-  // 결제 이력 데이터 로드\n   const loadPaymentHistory = useCallback(async (period?: PeriodOption, startDate?: string, endDate?: string) => {\n     try {\n       setLoading(true);\n       console.log('결제 이력 데이터 로딩 시작...');\n@@ -205,9 +125,9 @@\n               start: new Date(currentStartDate), \n               end: new Date(currentEndDate) \n             };\n           } else {\n-            // 커스텀 날짜가 설정되지 않은 경우 기본 1개월\n+            // 커스텀 날짜가 설정되지 않았다면 기본값 (1개월)\n             rangeStartDate.setMonth(today.getMonth() - 1);\n             dateRange = { start: rangeStartDate, end: today };\n           }\n           break;\n@@ -215,8 +135,9 @@\n           rangeStartDate.setMonth(today.getMonth() - 1);\n           dateRange = { start: rangeStartDate, end: today };\n       }\n       \n+      // 날짜 범위에 따른 필터링\n       const filteredByDate = allPayments.filter(payment => {\n         const paymentDate = payment.paymentDate ? new Date(payment.paymentDate) : new Date(payment.createdAt);\n         return paymentDate >= dateRange.start && paymentDate <= dateRange.end;\n       });\n@@ -242,33 +163,32 @@\n     initializeData();\n   }, []); // eslint-disable-line react-hooks/exhaustive-deps\n \n   const handleSearch = async () => {\n-    // 현재 선택된 조건으로 데이터를 불러옵니다\n+    console.log('검색 실행:', searchQuery, selectedPeriod);\n     await loadPaymentHistory(selectedPeriod, customStartDate, customEndDate);\n   };\n \n-  // 필터 적용 함수 (데이터 로드와 분리)\n+  // 필터 적용 함수\n   const applyFilters = useCallback(() => {\n-    let filtered = paymentHistory;\n+    let filtered = [...paymentHistory];\n     \n-    // 미수 필터 적용\n-    if (showUnpaidOnly) {\n-      filtered = filtered.filter(payment => payment.unpaidAmount > 0);\n-    }\n-    \n-    // 텍스트 검색\n+    // 검색어 필터링\n     if (searchQuery.trim()) {\n-      const query = searchQuery.toLowerCase().trim();\n-      filtered = filtered.filter(payment =>\n-        payment.memberName.toLowerCase().includes(query) ||\n-        payment.memberId.toLowerCase().includes(query) ||\n+      filtered = filtered.filter(payment => \n+        payment.memberName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+        payment.memberId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n         payment.products.some(product => \n-          product.name.toLowerCase().includes(query)\n+          product.name.toLowerCase().includes(searchQuery.toLowerCase())\n         )\n       );\n     }\n     \n+    // 미수만 보기 필터링\n+    if (showUnpaidOnly) {\n+      filtered = filtered.filter(payment => payment.unpaidAmount > 0);\n+    }\n+    \n     setFilteredHistory(filtered);\n   }, [paymentHistory, showUnpaidOnly, searchQuery]);\n \n   const formatAmount = (amount: number) => {\n@@ -289,19 +209,145 @@\n       day: '2-digit'\n     });\n   };\n \n+  // 테이블 컬럼 정의\n+  const columns: TableColumn<Payment>[] = [\n+    {\n+      key: 'paymentDate',\n+      title: '결제일',\n+      width: '120px',\n+      render: (value, record) => formatDate(record.paymentDate || record.createdAt)\n+    },\n+    {\n+      key: 'memberName',\n+      title: '회원명',\n+      width: '100px'\n+    },\n+    {\n+      key: 'products',\n+      title: '상품',\n+      width: '150px',\n+      render: (value, record) => record.products.map(product => product.name).join(', ')\n+    },\n+    {\n+      key: 'paymentType',\n+      title: '결제타입',\n+      width: '80px',\n+      align: 'center' as const,\n+      render: (value, record) => (\n+        <span style={{ \n+          padding: '4px 8px', \n+          borderRadius: '12px', \n+          fontSize: '12px',\n+          backgroundColor: record.paymentType === 'course' ? '#e3f2fd' : record.paymentType === 'asset' ? '#f3e5f5' : '#f5f5f5',\n+          color: record.paymentType === 'course' ? '#1565c0' : record.paymentType === 'asset' ? '#7b1fa2' : '#424242'\n+        }}>\n+          {record.paymentType === 'course' ? '수강' : record.paymentType === 'asset' ? '자산' : '기타'}\n+        </span>\n+      )\n+    },\n+    {\n+      key: 'totalAmount',\n+      title: '총금액',\n+      width: '100px',\n+      align: 'right' as const,\n+      render: (value, record) => formatAmount(record.totalAmount)\n+    },\n+    {\n+      key: 'paidAmount',\n+      title: '결제금액',\n+      width: '100px',\n+      align: 'right' as const,\n+      render: (value, record) => (\n+        <span style={{ color: '#2e7d32', fontWeight: '600' }}>\n+          {formatAmount(record.paidAmount)}\n+        </span>\n+      )\n+    },\n+    {\n+      key: 'unpaidAmount',\n+      title: '미수금액',\n+      width: '100px',\n+      align: 'right' as const,\n+      render: (value, record) => (\n+        <span style={{ \n+          color: record.unpaidAmount > 0 ? '#d32f2f' : '#2e7d32', \n+          fontWeight: record.unpaidAmount > 0 ? '600' : 'normal'\n+        }}>\n+          {record.unpaidAmount > 0 ? formatAmount(record.unpaidAmount) : '-'}\n+        </span>\n+      )\n+    },\n+    {\n+      key: 'paymentMethod',\n+      title: '결제방법',\n+      width: '100px',\n+      render: (value, record) => record.paymentMethod || '-'\n+    },\n+    {\n+      key: 'connectionInfo',\n+      title: '연결정보',\n+      width: '140px',\n+      render: (value, record) => (\n+        record.paymentType === 'course' && record.memo ? (\n+          record.memo.includes('포인트') ? (\n+            <div style={{ fontSize: '12px', color: AppColors.secondary }}>\n+              <div style={{ fontWeight: '600' }}>포인트 적립</div>\n+            </div>\n+          ) : record.memo?.includes('수강') && record.memo?.includes('ID:') ? (\n+            <div style={{ fontSize: '12px', color: AppColors.primary }}>\n+              <div style={{ fontWeight: '600' }}>\n+                {record.memo.match(/수강 \\d+개|ID: [\\w,\\s-]+/g)?.join(' | ') || '다중 수강'}\n+              </div>\n+            </div>\n+          ) : '-'\n+        ) : '-'\n+      )\n+    },\n+    {\n+      key: 'memo',\n+      title: '메모',\n+      width: '200px',\n+      render: (value, record) => (\n+        <div style={{ fontSize: '12px', lineHeight: '1.4' }}>\n+          {record.memo ? (\n+            <span title={record.memo}>\n+              {record.memo.length > 50 ? record.memo.substring(0, 50) + '...' : record.memo}\n+            </span>\n+          ) : '-'}\n+        </div>\n+      )\n+    }\n+  ];\n+\n+  // 결과 카운트 정보 컴포넌트\n+  const resultCountInfo = (\n+    <>\n+      {showUnpaidOnly ? '미수 결제: ' : ''}{filteredHistory.length}건 \n+      (완납: {filteredHistory.filter(p => p.unpaidAmount === 0).length}건, \n+      미수: {filteredHistory.filter(p => p.unpaidAmount > 0).length}건)\n+      <br />\n+      <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n+        기간: {getDateRangeDisplay()} | 전체: {paymentHistory.length}건\n+      </span>\n+    </>\n+  );\n+\n   // 결제 이력이 변경될 때 또는 필터 조건이 변경될 때 필터 적용\n   useEffect(() => {\n     applyFilters();\n   }, [applyFilters]);\n \n   if (loading) {\n     return (\n       <PageContainer>\n-        <LoadingState>\n-          <h3>결제 데이터를 불러오는 중...</h3>\n-        </LoadingState>\n+        <DataTable\n+          title=\"결제 이력\"\n+          columns={columns}\n+          data={[]}\n+          loading={true}\n+        />\n       </PageContainer>\n     );\n   }\n \n@@ -332,115 +378,24 @@\n         searchPlaceholder=\"회원명, 회원ID, 상품명으로 검색...\"\n         autoSearchOnDateChange={false}\n       />\n \n-      <ResultsSection>\n-        <ResultsHeader>\n-          <ResultsTitle>결제 이력</ResultsTitle>\n-          <ResultsCount>\n-            {showUnpaidOnly ? '미수 결제: ' : ''}{filteredHistory.length}건 \n-            (완납: {filteredHistory.filter(p => p.unpaidAmount === 0).length}건, \n-            미수: {filteredHistory.filter(p => p.unpaidAmount > 0).length}건)\n-            <br />\n-            <span style={{ fontSize: '12px', color: AppColors.onInput1 }}>\n-              기간: {getDateRangeDisplay()} | 전체: {paymentHistory.length}건\n-            </span>\n-          </ResultsCount>\n-        </ResultsHeader>\n-\n-        {filteredHistory.length > 0 ? (\n-          <TableContainer>\n-            <Table>\n-              <TableHeader>\n-                <tr>\n-                  <TableHeaderCell>결제일</TableHeaderCell>\n-                  <TableHeaderCell>회원명</TableHeaderCell>\n-                  <TableHeaderCell>상품</TableHeaderCell>\n-                  <TableHeaderCell>결제타입</TableHeaderCell>\n-                  <TableHeaderCell>총금액</TableHeaderCell>\n-                  <TableHeaderCell>결제금액</TableHeaderCell>\n-                  <TableHeaderCell>미수금액</TableHeaderCell>\n-                  <TableHeaderCell>결제방법</TableHeaderCell>\n-                  <TableHeaderCell>연결정보</TableHeaderCell>\n-                  <TableHeaderCell>메모</TableHeaderCell>\n-                </tr>\n-              </TableHeader>\n-              <TableBody>\n-                {filteredHistory.map((payment) => (\n-                  <TableRow key={payment.id}>\n-                    <TableCell>\n-                      {formatDate(payment.paymentDate || payment.createdAt)}\n-                    </TableCell>\n-                    <TableCell>{payment.memberName}</TableCell>\n-                    <TableCell>\n-                      {payment.products.map(product => product.name).join(', ')}\n-                    </TableCell>\n-                    <TableCell>\n-                      <span style={{ \n-                        padding: '4px 8px', \n-                        borderRadius: '12px', \n-                        fontSize: '12px',\n-                        backgroundColor: payment.paymentType === 'course' ? '#e3f2fd' : payment.paymentType === 'asset' ? '#f3e5f5' : '#f5f5f5',\n-                        color: payment.paymentType === 'course' ? '#1565c0' : payment.paymentType === 'asset' ? '#7b1fa2' : '#424242'\n-                      }}>\n-                        {payment.paymentType === 'course' ? '수강' : payment.paymentType === 'asset' ? '자산' : '기타'}\n-                      </span>\n-                    </TableCell>\n-                    <TableCell>{formatAmount(payment.totalAmount)}</TableCell>\n-                    <TableCell style={{ color: '#2e7d32', fontWeight: '600' }}>\n-                      {formatAmount(payment.paidAmount)}\n-                    </TableCell>\n-                    <TableCell style={{ \n-                      color: payment.unpaidAmount > 0 ? '#d32f2f' : '#757575', \n-                      fontWeight: payment.unpaidAmount > 0 ? '600' : 'normal' \n-                    }}>\n-                      {payment.unpaidAmount > 0 ? formatAmount(payment.unpaidAmount) : '-'}\n-                    </TableCell>\n-                    <TableCell>{payment.paymentMethod || '-'}</TableCell>\n-                    <TableCell>\n-                      {payment.relatedCourseId ? (\n-                        <div style={{ fontSize: '12px' }}>\n-                          <div style={{ color: AppColors.primary, fontWeight: '600' }}>\n-                            수강 ID: {payment.relatedCourseId.slice(-8)}\n-                          </div>\n-                        </div>\n-                      ) : payment.relatedAssetId ? (\n-                        <div style={{ fontSize: '12px' }}>\n-                          <div style={{ color: '#7b1fa2', fontWeight: '600' }}>\n-                            자산 ID: {payment.relatedAssetId.slice(-8)}\n-                          </div>\n-                        </div>\n-                      ) : payment.memo?.includes('수강') && payment.memo?.includes('ID:') ? (\n-                        <div style={{ fontSize: '12px', color: AppColors.primary }}>\n-                          {/* 메모에서 수강 ID 정보 추출 */}\n-                          <div style={{ fontWeight: '600' }}>\n-                            {payment.memo.match(/수강 \\d+개|ID: [\\w,\\s-]+/g)?.join(' | ') || '다중 수강'}\n-                          </div>\n-                        </div>\n-                      ) : '-'}\n-                    </TableCell>\n-                    <TableCell style={{ maxWidth: '200px', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n-                      <div style={{ fontSize: '12px', lineHeight: '1.4' }}>\n-                        {payment.memo ? (\n-                          <span title={payment.memo}>\n-                            {payment.memo.length > 50 ? payment.memo.substring(0, 50) + '...' : payment.memo}\n-                          </span>\n-                        ) : '-'}\n-                      </div>\n-                    </TableCell>\n-                  </TableRow>\n-                ))}\n-              </TableBody>\n-            </Table>\n-          </TableContainer>\n-        ) : (\n-          <EmptyState>\n-            <h3>검색 결과가 없습니다</h3>\n-            <p>다른 검색어를 입력하거나 필터를 조정해보세요.</p>\n-          </EmptyState>\n-        )}\n-      </ResultsSection>\n+      <DataTable\n+        title=\"결제 이력\"\n+        columns={columns}\n+        data={filteredHistory}\n+        loading={loading}\n+        emptyText=\"검색 결과가 없습니다\"\n+        emptyDescription=\"다른 검색어를 입력하거나 필터를 조정해보세요.\"\n+        resultCount={resultCountInfo}\n+        pagination={{\n+          enabled: true,\n+          pageSize: 15,\n+          pageSizeOptions: [15, 30, 100],\n+          showTotal: true\n+        }}\n+      />\n     </PageContainer>\n   );\n };\n \n-export default MemberPaymentHistory;\n+export default MemberPaymentHistory;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761369862244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,10 +143,15 @@\n       });\n       \n       console.log(`${currentPeriod} 기간 내 결제 이력:`, filteredByDate.length);\n       \n-      setPaymentHistory(filteredByDate);\n-      setFilteredHistory(filteredByDate);\n+      // 최근 등록순으로 정렬 (createdAt 내림차순)\n+      const sortedPayments = filteredByDate.sort((a, b) => \n+        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n+      );\n+      \n+      setPaymentHistory(sortedPayments);\n+      setFilteredHistory(sortedPayments);\n     } catch (error) {\n       console.error('결제 이력 로딩 실패:', error);\n       setPaymentHistory([]);\n       setFilteredHistory([]);\n"
                },
                {
                    "date": 1761374511623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,36 @@\n import { dbManager, Payment } from '../../../utils/indexedDB';\n import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n import DataTable, { type TableColumn } from '../../../components/DataTable';\n+import PointRegistrationModal from './PointRegistrationModal';\n \n const PageContainer = styled.div`\n   width: 100%;\n `;\n \n+const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n+  padding: 12px 18px;\n+  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n+  border-radius: 8px;\n+  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n+  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n+  font-size: 14px;\n+  font-weight: 600;\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  \n+  &:hover {\n+    opacity: 0.9;\n+    transform: translateY(-1px);\n+  }\n+  \n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n const MemberPaymentHistory: React.FC = () => {\n   const [searchQuery, setSearchQuery] = useState<string>('');\n   const [paymentHistory, setPaymentHistory] = useState<Payment[]>([]);\n   const [filteredHistory, setFilteredHistory] = useState<Payment[]>([]);\n@@ -27,8 +50,27 @@\n     unpaidPaymentCount: 0,\n     totalUnpaidAmount: 0\n   });\n \n+  // 적립금 등록 모달 관련 상태\n+  const [isPointRegistrationModalOpen, setIsPointRegistrationModalOpen] = useState(false);\n+\n+  // 적립금 등록 모달 열기\n+  const handleOpenPointRegistrationModal = () => {\n+    setIsPointRegistrationModalOpen(true);\n+  };\n+\n+  // 적립금 등록 모달 닫기\n+  const handleClosePointRegistrationModal = () => {\n+    setIsPointRegistrationModalOpen(false);\n+  };\n+\n+  // 적립금 등록 성공 처리\n+  const handlePointRegistrationSuccess = () => {\n+    // 결제 이력 새로고침\n+    loadPaymentHistory();\n+  };\n+\n   // 미수 메타정보 로드\n   const loadUnpaidMetaInfo = useCallback(async () => {\n     try {\n       const allPayments = await dbManager.getAllPayments();\n@@ -361,8 +403,11 @@\n       {/* 새로운 SearchArea 컴포넌트 사용 */}\n       <SearchArea\n         metaContent={\n           <div style={{ display: 'flex', gap: '12px', alignItems: 'center', flexWrap: 'wrap' }}>\n+            <Button onClick={handleOpenPointRegistrationModal}>\n+              + 적립금 등록\n+            </Button>\n             <UnpaidFilter\n               active={showUnpaidOnly}\n               unpaidCount={unpaidMetaInfo.unpaidPaymentCount}\n               totalAmount={unpaidMetaInfo.totalUnpaidAmount}\n@@ -398,8 +443,15 @@\n           pageSizeOptions: [15, 30, 100],\n           showTotal: true\n         }}\n       />\n+\n+      {/* 적립금 등록 모달 */}\n+      <PointRegistrationModal\n+        isOpen={isPointRegistrationModalOpen}\n+        onClose={handleClosePointRegistrationModal}\n+        onSuccess={handlePointRegistrationSuccess}\n+      />\n     </PageContainer>\n   );\n };\n \n"
                },
                {
                    "date": 1761374852684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { dbManager, Payment } from '../../../utils/indexedDB';\n import { SearchArea, type PeriodOption } from '../../../components/SearchArea';\n import UnpaidFilter from '../../../components/SearchArea/UnpaidFilterButton';\n import DataTable, { type TableColumn } from '../../../components/DataTable';\n-import PointRegistrationModal from './PointRegistrationModal';\n+import PaymentRegistrationModal from './PaymentRegistrationModal';\n \n const PageContainer = styled.div`\n   width: 100%;\n `;\n@@ -50,23 +50,23 @@\n     unpaidPaymentCount: 0,\n     totalUnpaidAmount: 0\n   });\n \n-  // 적립금 등록 모달 관련 상태\n-  const [isPointRegistrationModalOpen, setIsPointRegistrationModalOpen] = useState(false);\n+  // 현장 결제 등록 모달 상태\n+  const [isPaymentRegistrationModalOpen, setIsPaymentRegistrationModalOpen] = useState(false);\n \n-  // 적립금 등록 모달 열기\n-  const handleOpenPointRegistrationModal = () => {\n-    setIsPointRegistrationModalOpen(true);\n+  // 현장 결제 등록 모달 열기\n+  const handleOpenPaymentRegistrationModal = () => {\n+    setIsPaymentRegistrationModalOpen(true);\n   };\n \n-  // 적립금 등록 모달 닫기\n-  const handleClosePointRegistrationModal = () => {\n-    setIsPointRegistrationModalOpen(false);\n+  // 현장 결제 등록 모달 닫기\n+  const handleClosePaymentRegistrationModal = () => {\n+    setIsPaymentRegistrationModalOpen(false);\n   };\n \n-  // 적립금 등록 성공 처리\n-  const handlePointRegistrationSuccess = () => {\n+  // 현장 결제 등록 성공 처리\n+  const handlePaymentRegistrationSuccess = () => {\n     // 결제 이력 새로고침\n     loadPaymentHistory();\n   };\n \n@@ -403,10 +403,10 @@\n       {/* 새로운 SearchArea 컴포넌트 사용 */}\n       <SearchArea\n         metaContent={\n           <div style={{ display: 'flex', gap: '12px', alignItems: 'center', flexWrap: 'wrap' }}>\n-            <Button onClick={handleOpenPointRegistrationModal}>\n-              + 적립금 등록\n+            <Button onClick={handleOpenPaymentRegistrationModal}>\n+              + 현장 결제 등록\n             </Button>\n             <UnpaidFilter\n               active={showUnpaidOnly}\n               unpaidCount={unpaidMetaInfo.unpaidPaymentCount}\n@@ -445,12 +445,12 @@\n         }}\n       />\n \n       {/* 적립금 등록 모달 */}\n-      <PointRegistrationModal\n-        isOpen={isPointRegistrationModalOpen}\n-        onClose={handleClosePointRegistrationModal}\n-        onSuccess={handlePointRegistrationSuccess}\n+      <PaymentRegistrationModal\n+        isOpen={isPaymentRegistrationModalOpen}\n+        onClose={handleClosePaymentRegistrationModal}\n+        onSuccess={handlePaymentRegistrationSuccess}\n       />\n     </PageContainer>\n   );\n };\n"
                }
            ],
            "date": 1760163390238,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\n\nconst Container = styled.div`\n  padding: 24px;\n  background-color: ${AppColors.background};\n`;\n\nconst Header = styled.div`\n  margin-bottom: 24px;\n`;\n\nconst Title = styled.h1`\n  ${AppTextStyles.title1};\n  color: ${AppColors.onBackground};\n  margin-bottom: 8px;\n`;\n\nconst Description = styled.p`\n  ${AppTextStyles.body1};\n  color: ${AppColors.onInput2};\n`;\n\nconst SearchSection = styled.div`\n  background-color: ${AppColors.surface};\n  border-radius: 12px;\n  padding: 24px;\n  margin-bottom: 24px;\n  border: 1px solid ${AppColors.borderLight};\n`;\n\nconst SearchForm = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr auto;\n  gap: 16px;\n  align-items: end;\n`;\n\nconst FormField = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nconst Label = styled.label`\n  ${AppTextStyles.label1};\n  color: ${AppColors.onSurface};\n  font-weight: 500;\n`;\n\nconst Input = styled.input`\n  padding: 12px 16px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  ${AppTextStyles.body1};\n  background-color: ${AppColors.surface};\n  color: ${AppColors.onSurface};\n\n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n    box-shadow: 0 0 0 2px ${AppColors.primary}20;\n  }\n`;\n\nconst Select = styled.select`\n  padding: 12px 16px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  ${AppTextStyles.body1};\n  background-color: ${AppColors.surface};\n  color: ${AppColors.onSurface};\n\n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n    box-shadow: 0 0 0 2px ${AppColors.primary}20;\n  }\n`;\n\nconst SearchButton = styled.button`\n  padding: 12px 24px;\n  background-color: ${AppColors.primary};\n  color: ${AppColors.onPrimary};\n  border: none;\n  border-radius: 8px;\n  ${AppTextStyles.body1};\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n\n  &:hover {\n    background-color: ${AppColors.buttonPrimaryHover};\n  }\n\n  &:disabled {\n    background-color: ${AppColors.onSurface}40;\n    cursor: not-allowed;\n  }\n`;\n\nconst ResultsSection = styled.div`\n  background-color: ${AppColors.surface};\n  border-radius: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  overflow: hidden;\n`;\n\nconst ResultsHeader = styled.div`\n  padding: 16px 24px;\n  background-color: ${AppColors.btnC};\n  border-bottom: 1px solid ${AppColors.borderLight};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst ResultsTitle = styled.h3`\n  ${AppTextStyles.title3};\n  color: ${AppColors.onSurface};\n`;\n\nconst ResultsCount = styled.span`\n  ${AppTextStyles.body2};\n  color: ${AppColors.onInput2};\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nconst TableHeader = styled.thead`\n  background-color: ${AppColors.btnC};\n`;\n\nconst TableHeaderCell = styled.th`\n  padding: 16px;\n  text-align: left;\n  ${AppTextStyles.label1};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  border-bottom: 1px solid ${AppColors.borderLight};\n`;\n\nconst TableBody = styled.tbody``;\n\nconst TableRow = styled.tr`\n  &:hover {\n    background-color: ${AppColors.btnC}80;\n  }\n`;\n\nconst TableCell = styled.td`\n  padding: 16px;\n  ${AppTextStyles.body2};\n  color: ${AppColors.onSurface};\n  border-bottom: 1px solid ${AppColors.borderLight};\n`;\n\nconst StatusBadge = styled.span<{ $status: string }>`\n  padding: 4px 8px;\n  border-radius: 12px;\n  ${AppTextStyles.label2};\n  font-weight: 500;\n  background-color: ${props => {\n    switch (props.$status) {\n      case '완료': return `${AppColors.success}20`;\n      case '취소': return `${AppColors.error}20`;\n      case '환불': return `${AppColors.warning}20`;\n      default: return `${AppColors.onSurface}20`;\n    }\n  }};\n  color: ${props => {\n    switch (props.$status) {\n      case '완료': return AppColors.success;\n      case '취소': return AppColors.error;\n      case '환불': return AppColors.warning;\n      default: return AppColors.onSurface;\n    }\n  }};\n`;\n\nconst EmptyState = styled.div`\n  padding: 48px 24px;\n  text-align: center;\n  color: ${AppColors.onInput2};\n`;\n\n// 임시 결제 이력 데이터\nconst mockPaymentHistory = [\n  {\n    id: 'P001',\n    memberName: '김회원',\n    memberId: 'M001',\n    amount: 150000,\n    paymentMethod: '카드',\n    program: 'WBM 프로그램',\n    status: '완료',\n    date: '2024-01-15',\n    description: '3개월 회원권 결제'\n  },\n  {\n    id: 'P002',\n    memberName: '이회원',\n    memberId: 'M002',\n    amount: 80000,\n    paymentMethod: '현금',\n    program: '릴렉싱 프로그램',\n    status: '완료',\n    date: '2024-01-14',\n    description: '1개월 회원권 결제'\n  },\n  {\n    id: 'P003',\n    memberName: '박회원',\n    memberId: 'M003',\n    amount: 200000,\n    paymentMethod: '카드',\n    program: 'WBM 프로그램',\n    status: '환불',\n    date: '2024-01-13',\n    description: '6개월 회원권 환불'\n  },\n];\n\nconst MemberPaymentHistory: React.FC = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState('전체');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [paymentHistory] = useState(mockPaymentHistory);\n  const [filteredHistory, setFilteredHistory] = useState(mockPaymentHistory);\n\n  const handleSearch = () => {\n    let filtered = paymentHistory;\n\n    // 검색어 필터링\n    if (searchTerm) {\n      filtered = filtered.filter(payment => \n        payment.memberName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        payment.memberId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        payment.program.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    // 상태 필터링\n    if (selectedStatus !== '전체') {\n      filtered = filtered.filter(payment => payment.status === selectedStatus);\n    }\n\n    // 날짜 필터링\n    if (startDate && endDate) {\n      filtered = filtered.filter(payment => {\n        const paymentDate = new Date(payment.date);\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        return paymentDate >= start && paymentDate <= end;\n      });\n    }\n\n    setFilteredHistory(filtered);\n  };\n\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat('ko-KR').format(amount) + '원';\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('ko-KR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit'\n    });\n  };\n\n  useEffect(() => {\n    const initialSearch = () => {\n      setFilteredHistory(paymentHistory);\n    };\n    initialSearch();\n  }, [paymentHistory]);\n\n  return (\n    <Container>\n      <Header>\n        <Title>결제 이력</Title>\n        <Description>회원들의 결제 이력을 조회하고 관리할 수 있습니다.</Description>\n      </Header>\n\n      <SearchSection>\n        <SearchForm>\n          <FormField>\n            <Label>검색어</Label>\n            <Input\n              type=\"text\"\n              placeholder=\"회원명, 회원ID, 프로그램명\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </FormField>\n          \n          <FormField>\n            <Label>결제 상태</Label>\n            <Select\n              value={selectedStatus}\n              onChange={(e) => setSelectedStatus(e.target.value)}\n            >\n              <option value=\"전체\">전체</option>\n              <option value=\"완료\">완료</option>\n              <option value=\"취소\">취소</option>\n              <option value=\"환불\">환불</option>\n            </Select>\n          </FormField>\n\n          <FormField>\n            <Label>기간 조회</Label>\n            <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\n              <Input\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n              <span>~</span>\n              <Input\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n              />\n            </div>\n          </FormField>\n\n          <SearchButton onClick={handleSearch}>\n            검색\n          </SearchButton>\n        </SearchForm>\n      </SearchSection>\n\n      <ResultsSection>\n        <ResultsHeader>\n          <ResultsTitle>결제 이력 목록</ResultsTitle>\n          <ResultsCount>총 {filteredHistory.length}건</ResultsCount>\n        </ResultsHeader>\n\n        {filteredHistory.length > 0 ? (\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableHeaderCell>결제일</TableHeaderCell>\n                <TableHeaderCell>회원명</TableHeaderCell>\n                <TableHeaderCell>회원ID</TableHeaderCell>\n                <TableHeaderCell>프로그램</TableHeaderCell>\n                <TableHeaderCell>결제금액</TableHeaderCell>\n                <TableHeaderCell>결제방법</TableHeaderCell>\n                <TableHeaderCell>상태</TableHeaderCell>\n                <TableHeaderCell>내용</TableHeaderCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {filteredHistory.map((payment) => (\n                <TableRow key={payment.id}>\n                  <TableCell>{formatDate(payment.date)}</TableCell>\n                  <TableCell>{payment.memberName}</TableCell>\n                  <TableCell>{payment.memberId}</TableCell>\n                  <TableCell>{payment.program}</TableCell>\n                  <TableCell>{formatAmount(payment.amount)}</TableCell>\n                  <TableCell>{payment.paymentMethod}</TableCell>\n                  <TableCell>\n                    <StatusBadge $status={payment.status}>\n                      {payment.status}\n                    </StatusBadge>\n                  </TableCell>\n                  <TableCell>{payment.description}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        ) : (\n          <EmptyState>\n            검색 조건에 맞는 결제 이력이 없습니다.\n          </EmptyState>\n        )}\n      </ResultsSection>\n    </Container>\n  );\n};\n\nexport default MemberPaymentHistory;\n"
        }
    ]
}