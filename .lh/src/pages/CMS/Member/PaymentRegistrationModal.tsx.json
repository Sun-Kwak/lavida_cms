{
    "sourceFile": "src/pages/CMS/Member/PaymentRegistrationModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1761374852720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761375087018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,18 +2,53 @@\n import styled from 'styled-components';\n import { toast } from 'react-toastify';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager } from '../../../utils/indexedDB';\n+import { dbManager, type Member } from '../../../utils/indexedDB';\n import Modal from '../../../components/Modal';\n import CustomDropdown from '../../../components/CustomDropdown';\n+import MemberSearchPanel from './MemberSearchPanel';\n \n+const ModalContainer = styled.div`\n+  display: flex;\n+  gap: 24px;\n+  height: 600px;\n+  min-width: 900px;\n+  width: 100%;\n+  overflow: hidden;\n+`;\n+\n+const LeftPanel = styled.div`\n+  flex: 1;\n+  border-right: 1px solid ${AppColors.borderLight};\n+  padding-right: 24px;\n+  min-width: 0;\n+  display: flex;\n+  flex-direction: column;\n+`;\n+\n+const RightPanel = styled.div`\n+  flex: 1;\n+  padding-left: 24px;\n+  min-width: 0;\n+  display: flex;\n+  flex-direction: column;\n+`;\n+\n+const PanelTitle = styled.h3`\n+  ${AppTextStyles.title3}\n+  margin-bottom: 16px;\n+  color: ${AppColors.onBackground};\n+  border-bottom: 2px solid ${AppColors.primary};\n+  padding-bottom: 8px;\n+`;\n+\n const FormContainer = styled.div`\n   display: flex;\n   flex-direction: column;\n   gap: 24px;\n-  padding: 24px;\n-  min-height: 300px;\n+  flex: 1;\n+  overflow-y: auto;\n `;\n \n const FormGroup = styled.div`\n   display: flex;\n@@ -31,24 +66,8 @@\n   color: ${AppColors.error};\n   margin-left: 4px;\n `;\n \n-const TextInput = styled.input`\n-  padding: 12px 16px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: 14px;\n-  \n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n-`;\n-\n const AmountInput = styled.input`\n   padding: 12px 16px;\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n@@ -66,51 +85,20 @@\n     font-weight: normal;\n   }\n `;\n \n-const MemberSearchContainer = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  align-items: flex-end;\n-`;\n-\n-const SearchButton = styled.button`\n+const TextInput = styled.input`\n   padding: 12px 16px;\n-  background: ${AppColors.primary};\n-  color: ${AppColors.onPrimary};\n-  border: none;\n-  border-radius: 8px;\n-  font-weight: 600;\n-  cursor: pointer;\n-  white-space: nowrap;\n-  \n-  &:hover {\n-    opacity: 0.9;\n-  }\n-  \n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-const MemberInfo = styled.div`\n-  padding: 16px;\n-  background: ${AppColors.background};\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n   font-size: 14px;\n   \n-  .member-name {\n-    font-weight: 600;\n-    font-size: 16px;\n-    margin-bottom: 8px;\n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n   }\n   \n-  .member-details {\n-    display: flex;\n-    flex-direction: column;\n-    gap: 4px;\n+  &::placeholder {\n     color: ${AppColors.onInput1};\n   }\n `;\n \n@@ -139,41 +127,36 @@\n     }\n   }\n `;\n \n-const ModalButton = styled.button<{ $variant?: 'primary' | 'secondary'; disabled?: boolean }>`\n-  flex: 1;\n-  padding: 12px 16px;\n+const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n+  padding: 12px 24px;\n+  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n   border-radius: 8px;\n-  font-size: 14px;\n-  font-weight: 500;\n+  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n+  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  font-weight: 600;\n   cursor: pointer;\n-  border: none;\n+  transition: all 0.2s;\n   \n-  ${({ $variant, disabled }) => $variant === 'primary' ? `\n-    background-color: ${disabled ? '#cccccc' : AppColors.primary};\n-    color: ${AppColors.onPrimary};\n-    cursor: ${disabled ? 'not-allowed' : 'pointer'};\n-    \n-    &:hover {\n-      background-color: ${disabled ? '#cccccc' : AppColors.secondary};\n-    }\n-  ` : `\n-    background-color: ${AppColors.surface};\n-    color: ${AppColors.onSurface};\n-    border: 1px solid ${AppColors.borderLight};\n-    \n-    &:hover {\n-      background-color: ${AppColors.background};\n-    }\n-  `}\n+  &:hover {\n+    opacity: 0.9;\n+    transform: translateY(-1px);\n+  }\n+  \n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+    transform: none;\n+  }\n `;\n \n-const CustomModalFooter = styled.div`\n+const ButtonGroup = styled.div`\n   display: flex;\n-  width: 100%;\n+  justify-content: flex-end;\n   gap: 12px;\n-  padding: 0 24px 24px;\n+  margin-top: 24px;\n `;\n \n const BonusInfo = styled.div`\n   padding: 12px;\n@@ -188,78 +171,58 @@\n     margin-bottom: 4px;\n   }\n `;\n \n+const WarningText = styled.div`\n+  background: #fff3cd;\n+  border: 1px solid #ffeaa7;\n+  border-radius: 8px;\n+  padding: 12px;\n+  margin: 16px 0;\n+  color: #856404;\n+  font-size: 14px;\n+  text-align: center;\n+`;\n+\n interface PaymentRegistrationModalProps {\n   isOpen: boolean;\n   onClose: () => void;\n   onSuccess: () => void;\n }\n \n-interface Member {\n-  id: string;\n-  name: string;\n-  phone: string;\n-  email?: string;\n-  branchId: string;\n-  branchName: string;\n-  coach: string;\n-  coachName: string;\n-}\n-\n const PaymentRegistrationModal: React.FC<PaymentRegistrationModalProps> = ({\n   isOpen,\n   onClose,\n   onSuccess\n }) => {\n-  const [memberSearchQuery, setMemberSearchQuery] = useState('');\n   const [selectedMember, setSelectedMember] = useState<Member | null>(null);\n+  const [memberPointBalance, setMemberPointBalance] = useState<number>(0);\n   const [paymentMethod, setPaymentMethod] = useState<'cash' | 'card' | 'transfer'>('cash');\n   const [amount, setAmount] = useState<string>('');\n   const [memo, setMemo] = useState('');\n   const [isProcessing, setIsProcessing] = useState(false);\n-  const [isSearching, setIsSearching] = useState(false);\n \n   // 모달이 닫힐 때 상태 초기화\n   useEffect(() => {\n     if (!isOpen) {\n-      setMemberSearchQuery('');\n       setSelectedMember(null);\n+      setMemberPointBalance(0);\n       setPaymentMethod('cash');\n       setAmount('');\n       setMemo('');\n       setIsProcessing(false);\n-      setIsSearching(false);\n     }\n   }, [isOpen]);\n \n-  // 회원 검색\n-  const handleMemberSearch = async () => {\n-    if (!memberSearchQuery.trim()) {\n-      toast.warning('회원명 또는 전화번호를 입력해주세요.');\n-      return;\n-    }\n-\n-    setIsSearching(true);\n+  // 회원 선택 시 포인트 잔액 로드\n+  const handleMemberSelect = async (member: Member) => {\n+    setSelectedMember(member);\n     try {\n-      const members = await dbManager.getAllMembers();\n-      const foundMember = members.find(member => \n-        member.name.includes(memberSearchQuery.trim()) ||\n-        member.phone.includes(memberSearchQuery.trim())\n-      );\n-\n-      if (foundMember) {\n-        setSelectedMember(foundMember);\n-        toast.success(`회원을 찾았습니다: ${foundMember.name}`);\n-      } else {\n-        setSelectedMember(null);\n-        toast.error('해당하는 회원을 찾을 수 없습니다.');\n-      }\n+      const pointBalance = await dbManager.getMemberPointBalance(member.id);\n+      setMemberPointBalance(pointBalance);\n     } catch (error) {\n-      console.error('회원 검색 실패:', error);\n-      toast.error('회원 검색 중 오류가 발생했습니다.');\n-    } finally {\n-      setIsSearching(false);\n+      console.error('포인트 잔액 조회 실패:', error);\n+      setMemberPointBalance(0);\n     }\n   };\n \n   // 금액 포맷팅\n@@ -380,8 +343,14 @@\n       setIsProcessing(false);\n     }\n   };\n \n+  // 모달 닫기 처리\n+  const handleClose = () => {\n+    if (isProcessing) return;\n+    onClose();\n+  };\n+\n   const paymentMethodOptions = [\n     { value: 'cash', label: '현금' },\n     { value: 'card', label: '카드' },\n     { value: 'transfer', label: '계좌이체' }\n@@ -394,137 +363,115 @@\n \n   return (\n     <Modal\n       isOpen={isOpen}\n-      onClose={onClose}\n+      onClose={handleClose}\n+      width=\"min(95vw, 1000px)\"\n       header=\"현장 결제 등록\"\n-      width=\"600px\"\n       body={\n-        <FormContainer>\n-          {/* 회원 검색 */}\n-          <FormGroup>\n-            <Label>\n-              회원 검색<RequiredMark>*</RequiredMark>\n-            </Label>\n-            <MemberSearchContainer>\n-              <TextInput\n-                value={memberSearchQuery}\n-                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setMemberSearchQuery(e.target.value)}\n-                placeholder=\"회원명 또는 전화번호 입력\"\n-                onKeyPress={(e: React.KeyboardEvent<HTMLInputElement>) => {\n-                  if (e.key === 'Enter') {\n-                    handleMemberSearch();\n-                  }\n-                }}\n-              />\n-              <SearchButton\n-                onClick={handleMemberSearch}\n-                disabled={isSearching || !memberSearchQuery.trim()}\n-              >\n-                {isSearching ? '검색 중...' : '검색'}\n-              </SearchButton>\n-            </MemberSearchContainer>\n-          </FormGroup>\n-\n-          {/* 선택된 회원 정보 */}\n-          {selectedMember && (\n-            <FormGroup>\n-              <Label>선택된 회원</Label>\n-              <MemberInfo>\n-                <div className=\"member-name\">{selectedMember.name}</div>\n-                <div className=\"member-details\">\n-                  <div>전화번호: {selectedMember.phone}</div>\n-                  <div>이메일: {selectedMember.email || '-'}</div>\n-                  <div>지점: {selectedMember.branchName}</div>\n-                  <div>담당코치: {selectedMember.coachName}</div>\n-                </div>\n-              </MemberInfo>\n-            </FormGroup>\n-          )}\n-\n-          {/* 결제 방식 */}\n-          <FormGroup>\n-            <Label>\n-              결제 방식<RequiredMark>*</RequiredMark>\n-            </Label>\n-            <CustomDropdown\n-              value={paymentMethod}\n-              onChange={(value) => setPaymentMethod(value as 'cash' | 'card' | 'transfer')}\n-              options={paymentMethodOptions}\n-              placeholder=\"결제 방식 선택\"\n+        <ModalContainer>\n+          <LeftPanel>\n+            <PanelTitle>회원 검색 및 선택</PanelTitle>\n+            <MemberSearchPanel\n+              selectedMember={selectedMember}\n+              onMemberSelect={handleMemberSelect}\n+              memberPointBalance={memberPointBalance}\n             />\n-          </FormGroup>\n+          </LeftPanel>\n+          \n+          <RightPanel>\n+            <PanelTitle>결제 정보</PanelTitle>\n+            {!selectedMember ? (\n+              <WarningText>\n+                먼저 왼쪽에서 회원을 선택해주세요.\n+              </WarningText>\n+            ) : (\n+              <FormContainer>\n+                {/* 결제 방식 */}\n+                <FormGroup>\n+                  <Label>\n+                    결제 방식<RequiredMark>*</RequiredMark>\n+                  </Label>\n+                  <CustomDropdown\n+                    value={paymentMethod}\n+                    onChange={(value) => setPaymentMethod(value as 'cash' | 'card' | 'transfer')}\n+                    options={paymentMethodOptions}\n+                    placeholder=\"결제 방식 선택\"\n+                  />\n+                </FormGroup>\n \n-          {/* 금액 */}\n-          <FormGroup>\n-            <Label>\n-              금액<RequiredMark>*</RequiredMark>\n-            </Label>\n-            <AmountInput\n-              type=\"text\"\n-              value={formatAmount(amount)}\n-              onChange={handleAmountChange}\n-              placeholder=\"금액을 입력하세요\"\n-            />\n-          </FormGroup>\n+                {/* 금액 */}\n+                <FormGroup>\n+                  <Label>\n+                    금액<RequiredMark>*</RequiredMark>\n+                  </Label>\n+                  <AmountInput\n+                    type=\"text\"\n+                    value={formatAmount(amount)}\n+                    onChange={handleAmountChange}\n+                    placeholder=\"금액을 입력하세요\"\n+                  />\n+                </FormGroup>\n \n-          {/* 메모 */}\n-          <FormGroup>\n-            <Label>메모</Label>\n-            <TextInput\n-              value={memo}\n-              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setMemo(e.target.value)}\n-              placeholder=\"추가 메모 (선택사항)\"\n-            />\n-          </FormGroup>\n+                {/* 메모 */}\n+                <FormGroup>\n+                  <Label>메모</Label>\n+                  <TextInput\n+                    value={memo}\n+                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setMemo(e.target.value)}\n+                    placeholder=\"추가 메모 (선택사항)\"\n+                  />\n+                </FormGroup>\n \n-          {/* 100만원 이상일 때 보너스 정보 표시 */}\n-          {bonusAmount > 0 && (\n-            <BonusInfo>\n-              <div className=\"bonus-title\">🎉 보너스 포인트 적용!</div>\n-              <div>100만원 단위마다 10% 추가 적립됩니다.</div>\n-            </BonusInfo>\n-          )}\n+                {/* 100만원 이상일 때 보너스 정보 표시 */}\n+                {bonusAmount > 0 && (\n+                  <BonusInfo>\n+                    <div className=\"bonus-title\">🎉 보너스 포인트 적용!</div>\n+                    <div>100만원 단위마다 10% 추가 적립됩니다.</div>\n+                  </BonusInfo>\n+                )}\n \n-          {/* 적립 요약 */}\n-          {baseAmount > 0 && (\n-            <PaymentSummary>\n-              <div className=\"summary-title\">결제 및 포인트 적립 요약</div>\n-              <div className=\"summary-item\">\n-                <span>결제 금액</span>\n-                <span>{baseAmount.toLocaleString()}원</span>\n-              </div>\n-              <div className=\"summary-item\">\n-                <span>기본 포인트 적립</span>\n-                <span>{baseAmount.toLocaleString()}원</span>\n-              </div>\n-              {bonusAmount > 0 && (\n-                <div className=\"summary-item\">\n-                  <span>보너스 포인트 ({Math.floor(baseAmount / 1000000)}개 100만원 단위)</span>\n-                  <span>{bonusAmount.toLocaleString()}원</span>\n-                </div>\n-              )}\n-              <div className=\"summary-item total\">\n-                <span>총 포인트 적립</span>\n-                <span>{totalAmount.toLocaleString()}원</span>\n-              </div>\n-            </PaymentSummary>\n-          )}\n-        </FormContainer>\n+                {/* 적립 요약 */}\n+                {baseAmount > 0 && (\n+                  <PaymentSummary>\n+                    <div className=\"summary-title\">결제 및 포인트 적립 요약</div>\n+                    <div className=\"summary-item\">\n+                      <span>결제 금액</span>\n+                      <span>{baseAmount.toLocaleString()}원</span>\n+                    </div>\n+                    <div className=\"summary-item\">\n+                      <span>기본 포인트 적립</span>\n+                      <span>{baseAmount.toLocaleString()}원</span>\n+                    </div>\n+                    {bonusAmount > 0 && (\n+                      <div className=\"summary-item\">\n+                        <span>보너스 포인트 ({Math.floor(baseAmount / 1000000)}개 100만원 단위)</span>\n+                        <span>{bonusAmount.toLocaleString()}원</span>\n+                      </div>\n+                    )}\n+                    <div className=\"summary-item total\">\n+                      <span>총 포인트 적립</span>\n+                      <span>{totalAmount.toLocaleString()}원</span>\n+                    </div>\n+                  </PaymentSummary>\n+                )}\n+              </FormContainer>\n+            )}\n+          </RightPanel>\n+        </ModalContainer>\n       }\n       footer={\n-        <CustomModalFooter>\n-          <ModalButton onClick={onClose}>\n+        <ButtonGroup>\n+          <Button variant=\"secondary\" onClick={handleClose} disabled={isProcessing}>\n             취소\n-          </ModalButton>\n-          <ModalButton \n-            $variant=\"primary\" \n+          </Button>\n+          <Button \n+            onClick={handleSubmit} \n             disabled={!isValid || isProcessing}\n-            onClick={handleSubmit}\n           >\n             {isProcessing ? '등록 중...' : '현장 결제 등록'}\n-          </ModalButton>\n-        </CustomModalFooter>\n+          </Button>\n+        </ButtonGroup>\n       }\n     />\n   );\n };\n"
                },
                {
                    "date": 1761375250353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,11 +56,14 @@\n   gap: 8px;\n `;\n \n const Label = styled.label`\n+  display: block;\n   ${AppTextStyles.body1}\n   font-weight: 600;\n   color: ${AppColors.onSurface};\n+  text-align: left;\n+  margin-bottom: 8px;\n `;\n \n const RequiredMark = styled.span`\n   color: ${AppColors.error};\n@@ -395,8 +398,9 @@\n                     value={paymentMethod}\n                     onChange={(value) => setPaymentMethod(value as 'cash' | 'card' | 'transfer')}\n                     options={paymentMethodOptions}\n                     placeholder=\"결제 방식 선택\"\n+                    inModal={true}\n                   />\n                 </FormGroup>\n \n                 {/* 금액 */}\n"
                },
                {
                    "date": 1761375753706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,33 +189,45 @@\n interface PaymentRegistrationModalProps {\n   isOpen: boolean;\n   onClose: () => void;\n   onSuccess: () => void;\n+  preselectedMember?: Member | null; // 미리 선택된 회원\n }\n \n const PaymentRegistrationModal: React.FC<PaymentRegistrationModalProps> = ({\n   isOpen,\n   onClose,\n-  onSuccess\n+  onSuccess,\n+  preselectedMember = null\n }) => {\n   const [selectedMember, setSelectedMember] = useState<Member | null>(null);\n   const [memberPointBalance, setMemberPointBalance] = useState<number>(0);\n   const [paymentMethod, setPaymentMethod] = useState<'cash' | 'card' | 'transfer'>('cash');\n   const [amount, setAmount] = useState<string>('');\n   const [memo, setMemo] = useState('');\n   const [isProcessing, setIsProcessing] = useState(false);\n \n+  // 미리 선택된 회원이 있으면 설정하고 포인트 잔액 로드\n+  useEffect(() => {\n+    if (preselectedMember && isOpen) {\n+      handleMemberSelect(preselectedMember);\n+    }\n+  }, [preselectedMember, isOpen]);\n+\n   // 모달이 닫힐 때 상태 초기화\n   useEffect(() => {\n     if (!isOpen) {\n-      setSelectedMember(null);\n-      setMemberPointBalance(0);\n+      // 미리 선택된 회원이 없는 경우에만 초기화\n+      if (!preselectedMember) {\n+        setSelectedMember(null);\n+        setMemberPointBalance(0);\n+      }\n       setPaymentMethod('cash');\n       setAmount('');\n       setMemo('');\n       setIsProcessing(false);\n     }\n-  }, [isOpen]);\n+  }, [isOpen, preselectedMember]);\n \n   // 회원 선택 시 포인트 잔액 로드\n   const handleMemberSelect = async (member: Member) => {\n     setSelectedMember(member);\n@@ -377,8 +389,10 @@\n             <MemberSearchPanel\n               selectedMember={selectedMember}\n               onMemberSelect={handleMemberSelect}\n               memberPointBalance={memberPointBalance}\n+              preselectedMember={preselectedMember}\n+              readonly={!!preselectedMember}\n             />\n           </LeftPanel>\n           \n           <RightPanel>\n"
                }
            ],
            "date": 1761374852720,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { toast } from 'react-toastify';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\nimport { dbManager } from '../../../utils/indexedDB';\nimport Modal from '../../../components/Modal';\nimport CustomDropdown from '../../../components/CustomDropdown';\n\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  padding: 24px;\n  min-height: 300px;\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nconst Label = styled.label`\n  ${AppTextStyles.body1}\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n`;\n\nconst RequiredMark = styled.span`\n  color: ${AppColors.error};\n  margin-left: 4px;\n`;\n\nconst TextInput = styled.input`\n  padding: 12px 16px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: 14px;\n  \n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst AmountInput = styled.input`\n  padding: 12px 16px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  text-align: right;\n  \n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n    font-weight: normal;\n  }\n`;\n\nconst MemberSearchContainer = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: flex-end;\n`;\n\nconst SearchButton = styled.button`\n  padding: 12px 16px;\n  background: ${AppColors.primary};\n  color: ${AppColors.onPrimary};\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  white-space: nowrap;\n  \n  &:hover {\n    opacity: 0.9;\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst MemberInfo = styled.div`\n  padding: 16px;\n  background: ${AppColors.background};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: 14px;\n  \n  .member-name {\n    font-weight: 600;\n    font-size: 16px;\n    margin-bottom: 8px;\n  }\n  \n  .member-details {\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst PaymentSummary = styled.div`\n  padding: 16px;\n  background: #e3f2fd;\n  border-radius: 8px;\n  border: 1px solid ${AppColors.primary};\n  \n  .summary-title {\n    font-weight: 600;\n    margin-bottom: 12px;\n    color: ${AppColors.primary};\n  }\n  \n  .summary-item {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 8px;\n    \n    &.total {\n      border-top: 1px solid ${AppColors.primary};\n      padding-top: 8px;\n      font-weight: 600;\n      font-size: 16px;\n    }\n  }\n`;\n\nconst ModalButton = styled.button<{ $variant?: 'primary' | 'secondary'; disabled?: boolean }>`\n  flex: 1;\n  padding: 12px 16px;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  border: none;\n  \n  ${({ $variant, disabled }) => $variant === 'primary' ? `\n    background-color: ${disabled ? '#cccccc' : AppColors.primary};\n    color: ${AppColors.onPrimary};\n    cursor: ${disabled ? 'not-allowed' : 'pointer'};\n    \n    &:hover {\n      background-color: ${disabled ? '#cccccc' : AppColors.secondary};\n    }\n  ` : `\n    background-color: ${AppColors.surface};\n    color: ${AppColors.onSurface};\n    border: 1px solid ${AppColors.borderLight};\n    \n    &:hover {\n      background-color: ${AppColors.background};\n    }\n  `}\n`;\n\nconst CustomModalFooter = styled.div`\n  display: flex;\n  width: 100%;\n  gap: 12px;\n  padding: 0 24px 24px;\n`;\n\nconst BonusInfo = styled.div`\n  padding: 12px;\n  background: #e8f5e8;\n  border: 1px solid ${AppColors.success};\n  border-radius: 8px;\n  font-size: 14px;\n  color: ${AppColors.success};\n  \n  .bonus-title {\n    font-weight: 600;\n    margin-bottom: 4px;\n  }\n`;\n\ninterface PaymentRegistrationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\ninterface Member {\n  id: string;\n  name: string;\n  phone: string;\n  email?: string;\n  branchId: string;\n  branchName: string;\n  coach: string;\n  coachName: string;\n}\n\nconst PaymentRegistrationModal: React.FC<PaymentRegistrationModalProps> = ({\n  isOpen,\n  onClose,\n  onSuccess\n}) => {\n  const [memberSearchQuery, setMemberSearchQuery] = useState('');\n  const [selectedMember, setSelectedMember] = useState<Member | null>(null);\n  const [paymentMethod, setPaymentMethod] = useState<'cash' | 'card' | 'transfer'>('cash');\n  const [amount, setAmount] = useState<string>('');\n  const [memo, setMemo] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n\n  // 모달이 닫힐 때 상태 초기화\n  useEffect(() => {\n    if (!isOpen) {\n      setMemberSearchQuery('');\n      setSelectedMember(null);\n      setPaymentMethod('cash');\n      setAmount('');\n      setMemo('');\n      setIsProcessing(false);\n      setIsSearching(false);\n    }\n  }, [isOpen]);\n\n  // 회원 검색\n  const handleMemberSearch = async () => {\n    if (!memberSearchQuery.trim()) {\n      toast.warning('회원명 또는 전화번호를 입력해주세요.');\n      return;\n    }\n\n    setIsSearching(true);\n    try {\n      const members = await dbManager.getAllMembers();\n      const foundMember = members.find(member => \n        member.name.includes(memberSearchQuery.trim()) ||\n        member.phone.includes(memberSearchQuery.trim())\n      );\n\n      if (foundMember) {\n        setSelectedMember(foundMember);\n        toast.success(`회원을 찾았습니다: ${foundMember.name}`);\n      } else {\n        setSelectedMember(null);\n        toast.error('해당하는 회원을 찾을 수 없습니다.');\n      }\n    } catch (error) {\n      console.error('회원 검색 실패:', error);\n      toast.error('회원 검색 중 오류가 발생했습니다.');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // 금액 포맷팅\n  const formatAmount = (value: string) => {\n    const numericValue = value.replace(/[^\\d]/g, '');\n    return numericValue ? parseInt(numericValue).toLocaleString() : '';\n  };\n\n  // 금액 입력 처리\n  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]/g, '');\n    setAmount(value);\n  };\n\n  // 보너스 포인트 계산\n  const calculateBonus = (baseAmount: number) => {\n    if (baseAmount >= 1000000) {\n      const millionUnits = Math.floor(baseAmount / 1000000);\n      return millionUnits * 100000; // 100만원당 10만원(10%) 보너스\n    }\n    return 0;\n  };\n\n  // 결제 등록 처리\n  const handleSubmit = async () => {\n    if (!selectedMember) {\n      toast.error('회원을 선택해주세요.');\n      return;\n    }\n\n    if (!amount || parseInt(amount) <= 0) {\n      toast.error('유효한 금액을 입력해주세요.');\n      return;\n    }\n\n    const baseAmount = parseInt(amount);\n    const bonusAmount = calculateBonus(baseAmount);\n    const totalAmount = baseAmount + bonusAmount;\n\n    setIsProcessing(true);\n    try {\n      // 1. 결제 정보 기록 생성\n      const paymentId = await dbManager.addPayment({\n        memberId: selectedMember.id,\n        memberName: selectedMember.name,\n        branchId: selectedMember.branchId,\n        branchName: selectedMember.branchName,\n        coach: selectedMember.coach,\n        coachName: selectedMember.coachName,\n        products: [], // 상품 없음\n        totalAmount: baseAmount,\n        paidAmount: baseAmount,\n        unpaidAmount: 0,\n        paymentStatus: 'completed',\n        paymentMethod: paymentMethod,\n        paymentDate: new Date(),\n        paymentType: 'other',\n        amount: baseAmount,\n        memo: memo || `현장 결제 등록 - ${paymentMethod} ${baseAmount.toLocaleString()}원`\n      });\n\n      // 2. 기본 포인트 적립\n      const expiryDate = new Date();\n      expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n\n      await dbManager.point.addPointTransaction({\n        memberId: selectedMember.id,\n        memberName: selectedMember.name,\n        amount: baseAmount,\n        transactionType: 'earn',\n        relatedOrderId: undefined,\n        relatedPaymentId: paymentId,\n        products: [],\n        branchId: selectedMember.branchId,\n        branchName: selectedMember.branchName,\n        staffId: selectedMember.coach,\n        staffName: selectedMember.coachName,\n        earnedDate: new Date(),\n        expiryDate,\n        isExpired: false,\n        source: '현장결제',\n        description: `현장 결제 등록 - ${paymentMethod} ${baseAmount.toLocaleString()}원${memo ? ` (${memo})` : ''}`\n      });\n\n      // 3. 보너스 포인트 적립 (100만원 이상인 경우)\n      if (bonusAmount > 0) {\n        await dbManager.point.addPointTransaction({\n          memberId: selectedMember.id,\n          memberName: selectedMember.name,\n          amount: bonusAmount,\n          transactionType: 'earn',\n          relatedOrderId: undefined,\n          relatedPaymentId: paymentId,\n          products: [],\n          branchId: selectedMember.branchId,\n          branchName: selectedMember.branchName,\n          staffId: selectedMember.coach,\n          staffName: selectedMember.coachName,\n          earnedDate: new Date(),\n          expiryDate,\n          isExpired: false,\n          source: '보너스포인트',\n          description: `현장 결제 등록 보너스 포인트 (${baseAmount.toLocaleString()}원 → ${Math.floor(baseAmount / 1000000)}개 100만원 단위)`\n        });\n      }\n\n      const successMessage = bonusAmount > 0 \n        ? `현장 결제가 등록되었습니다!\\n결제금액: ${baseAmount.toLocaleString()}원\\n기본 포인트: ${baseAmount.toLocaleString()}원\\n보너스 포인트: ${bonusAmount.toLocaleString()}원\\n총 적립: ${totalAmount.toLocaleString()}원`\n        : `현장 결제가 등록되었습니다!\\n결제금액: ${baseAmount.toLocaleString()}원\\n포인트 적립: ${baseAmount.toLocaleString()}원`;\n\n      toast.success(successMessage);\n      onSuccess();\n      onClose();\n    } catch (error) {\n      console.error('현장 결제 등록 실패:', error);\n      toast.error('현장 결제 등록 중 오류가 발생했습니다.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const paymentMethodOptions = [\n    { value: 'cash', label: '현금' },\n    { value: 'card', label: '카드' },\n    { value: 'transfer', label: '계좌이체' }\n  ];\n\n  const baseAmount = amount ? parseInt(amount) : 0;\n  const bonusAmount = calculateBonus(baseAmount);\n  const totalAmount = baseAmount + bonusAmount;\n  const isValid = selectedMember && baseAmount > 0;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      header=\"현장 결제 등록\"\n      width=\"600px\"\n      body={\n        <FormContainer>\n          {/* 회원 검색 */}\n          <FormGroup>\n            <Label>\n              회원 검색<RequiredMark>*</RequiredMark>\n            </Label>\n            <MemberSearchContainer>\n              <TextInput\n                value={memberSearchQuery}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setMemberSearchQuery(e.target.value)}\n                placeholder=\"회원명 또는 전화번호 입력\"\n                onKeyPress={(e: React.KeyboardEvent<HTMLInputElement>) => {\n                  if (e.key === 'Enter') {\n                    handleMemberSearch();\n                  }\n                }}\n              />\n              <SearchButton\n                onClick={handleMemberSearch}\n                disabled={isSearching || !memberSearchQuery.trim()}\n              >\n                {isSearching ? '검색 중...' : '검색'}\n              </SearchButton>\n            </MemberSearchContainer>\n          </FormGroup>\n\n          {/* 선택된 회원 정보 */}\n          {selectedMember && (\n            <FormGroup>\n              <Label>선택된 회원</Label>\n              <MemberInfo>\n                <div className=\"member-name\">{selectedMember.name}</div>\n                <div className=\"member-details\">\n                  <div>전화번호: {selectedMember.phone}</div>\n                  <div>이메일: {selectedMember.email || '-'}</div>\n                  <div>지점: {selectedMember.branchName}</div>\n                  <div>담당코치: {selectedMember.coachName}</div>\n                </div>\n              </MemberInfo>\n            </FormGroup>\n          )}\n\n          {/* 결제 방식 */}\n          <FormGroup>\n            <Label>\n              결제 방식<RequiredMark>*</RequiredMark>\n            </Label>\n            <CustomDropdown\n              value={paymentMethod}\n              onChange={(value) => setPaymentMethod(value as 'cash' | 'card' | 'transfer')}\n              options={paymentMethodOptions}\n              placeholder=\"결제 방식 선택\"\n            />\n          </FormGroup>\n\n          {/* 금액 */}\n          <FormGroup>\n            <Label>\n              금액<RequiredMark>*</RequiredMark>\n            </Label>\n            <AmountInput\n              type=\"text\"\n              value={formatAmount(amount)}\n              onChange={handleAmountChange}\n              placeholder=\"금액을 입력하세요\"\n            />\n          </FormGroup>\n\n          {/* 메모 */}\n          <FormGroup>\n            <Label>메모</Label>\n            <TextInput\n              value={memo}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setMemo(e.target.value)}\n              placeholder=\"추가 메모 (선택사항)\"\n            />\n          </FormGroup>\n\n          {/* 100만원 이상일 때 보너스 정보 표시 */}\n          {bonusAmount > 0 && (\n            <BonusInfo>\n              <div className=\"bonus-title\">🎉 보너스 포인트 적용!</div>\n              <div>100만원 단위마다 10% 추가 적립됩니다.</div>\n            </BonusInfo>\n          )}\n\n          {/* 적립 요약 */}\n          {baseAmount > 0 && (\n            <PaymentSummary>\n              <div className=\"summary-title\">결제 및 포인트 적립 요약</div>\n              <div className=\"summary-item\">\n                <span>결제 금액</span>\n                <span>{baseAmount.toLocaleString()}원</span>\n              </div>\n              <div className=\"summary-item\">\n                <span>기본 포인트 적립</span>\n                <span>{baseAmount.toLocaleString()}원</span>\n              </div>\n              {bonusAmount > 0 && (\n                <div className=\"summary-item\">\n                  <span>보너스 포인트 ({Math.floor(baseAmount / 1000000)}개 100만원 단위)</span>\n                  <span>{bonusAmount.toLocaleString()}원</span>\n                </div>\n              )}\n              <div className=\"summary-item total\">\n                <span>총 포인트 적립</span>\n                <span>{totalAmount.toLocaleString()}원</span>\n              </div>\n            </PaymentSummary>\n          )}\n        </FormContainer>\n      }\n      footer={\n        <CustomModalFooter>\n          <ModalButton onClick={onClose}>\n            취소\n          </ModalButton>\n          <ModalButton \n            $variant=\"primary\" \n            disabled={!isValid || isProcessing}\n            onClick={handleSubmit}\n          >\n            {isProcessing ? '등록 중...' : '현장 결제 등록'}\n          </ModalButton>\n        </CustomModalFooter>\n      }\n    />\n  );\n};\n\nexport default PaymentRegistrationModal;"
        }
    ]
}