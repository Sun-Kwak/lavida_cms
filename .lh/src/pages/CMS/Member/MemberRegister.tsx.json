{
    "sourceFile": "src/pages/CMS/Member/MemberRegister.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1759105835943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760248001096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,285 @@\n+import React, { useState } from 'react';\n+import { \n+  PageContainer, \n+  PageHeader, \n+  PageTitle, \n+  PageDescription,\n+  StepContainer,\n+  StepWrapper,\n+  StepItem,\n+  StepCircle,\n+  StepLabel,\n+  StepLine,\n+  Card,\n+  ButtonGroup,\n+  Button\n+} from './StyledComponents';\n+import { MemberFormData } from './types';\n+import BasicInfoStep from './BasicInfoStep';\n+import JoinInfoStep from './JoinInfoStep';\n+import PaymentInfoStep from './PaymentInfoStep';\n+import AgreementStep from './AgreementStep';\n+\n+const MemberRegister: React.FC = () => {\n+  const [currentStep, setCurrentStep] = useState(1);\n+  const [formData, setFormData] = useState<MemberFormData>({\n+    basicInfo: {\n+      name: '',\n+      phone: '',\n+      email: '',\n+      birth: '',\n+      gender: '',\n+      address: '',\n+    },\n+    joinInfo: {\n+      coach: '',\n+      joinPath: '',\n+      loginId: '',\n+      loginPassword: '',\n+      enableLogin: false,\n+    },\n+    paymentInfo: {\n+      selectedProducts: [],\n+    },\n+    agreementInfo: {\n+      agreements: [\n+        {\n+          id: 'terms',\n+          title: '회원이용약관',\n+          content: '회원이용약관 내용입니다...',\n+          required: true,\n+          agreed: false,\n+        },\n+        {\n+          id: 'privacy',\n+          title: '개인정보처리방침',\n+          content: '개인정보처리방침 내용입니다...',\n+          required: true,\n+          agreed: false,\n+        },\n+        {\n+          id: 'service',\n+          title: '서비스이용약관',\n+          content: '서비스이용약관 내용입니다...',\n+          required: true,\n+          agreed: false,\n+        },\n+        {\n+          id: 'marketing',\n+          title: '마케팅활용 동의',\n+          content: '마케팅활용 동의 내용입니다...',\n+          required: false,\n+          agreed: false,\n+        },\n+      ],\n+      customerSignature: '',\n+      staffSignature: '',\n+    },\n+  });\n+\n+  const steps = [\n+    { number: 1, label: '기본정보' },\n+    { number: 2, label: '가입정보' },\n+    { number: 3, label: '결제정보' },\n+    { number: 4, label: '동의서명' },\n+  ];\n+\n+  const handleFormUpdate = (updatedData: Partial<MemberFormData>) => {\n+    setFormData(prev => ({ ...prev, ...updatedData }));\n+  };\n+\n+  const validateCurrentStep = (): boolean => {\n+    switch (currentStep) {\n+      case 1:\n+        return !!(formData.basicInfo.name && formData.basicInfo.phone);\n+      case 2:\n+        return !!(formData.joinInfo.coach && formData.joinInfo.joinPath);\n+      case 3:\n+        return true; // 결제정보는 선택사항\n+      case 4:\n+        const requiredAgreements = formData.agreementInfo.agreements.filter(a => a.required);\n+        return requiredAgreements.every(a => a.agreed) && \n+               !!(formData.agreementInfo.customerSignature && formData.agreementInfo.staffSignature);\n+      default:\n+        return true;\n+    }\n+  };\n+\n+  const handleNext = () => {\n+    if (validateCurrentStep() && currentStep < 4) {\n+      setCurrentStep(currentStep + 1);\n+    }\n+  };\n+\n+  const handlePrev = () => {\n+    if (currentStep > 1) {\n+      setCurrentStep(currentStep - 1);\n+    }\n+  };\n+\n+  const handleSkipPayment = () => {\n+    setCurrentStep(4);\n+  };\n+\n+  const handleSubmit = () => {\n+    console.log('회원 등록 데이터:', formData);\n+    alert('회원이 성공적으로 등록되었습니다!');\n+    \n+    // 등록 완료 후 초기화\n+    setCurrentStep(1);\n+    setFormData({\n+      basicInfo: {\n+        name: '',\n+        phone: '',\n+        email: '',\n+        birth: '',\n+        gender: '',\n+        address: '',\n+      },\n+      joinInfo: {\n+        coach: '',\n+        joinPath: '',\n+        loginId: '',\n+        loginPassword: '',\n+        enableLogin: false,\n+      },\n+      paymentInfo: {\n+        selectedProducts: [],\n+      },\n+      agreementInfo: {\n+        agreements: [\n+          {\n+            id: 'terms',\n+            title: '회원이용약관',\n+            content: '회원이용약관 내용입니다...',\n+            required: true,\n+            agreed: false,\n+          },\n+          {\n+            id: 'privacy',\n+            title: '개인정보처리방침',\n+            content: '개인정보처리방침 내용입니다...',\n+            required: true,\n+            agreed: false,\n+          },\n+          {\n+            id: 'service',\n+            title: '서비스이용약관',\n+            content: '서비스이용약관 내용입니다...',\n+            required: true,\n+            agreed: false,\n+          },\n+          {\n+            id: 'marketing',\n+            title: '마케팅활용 동의',\n+            content: '마케팅활용 동의 내용입니다...',\n+            required: false,\n+            agreed: false,\n+          },\n+        ],\n+        customerSignature: '',\n+        staffSignature: '',\n+      },\n+    });\n+  };\n+\n+  const renderStepContent = () => {\n+    const stepProps = {\n+      formData,\n+      onUpdate: handleFormUpdate,\n+      onNext: handleNext,\n+      onPrev: handlePrev,\n+      isValid: validateCurrentStep(),\n+    };\n+\n+    switch (currentStep) {\n+      case 1:\n+        return <BasicInfoStep {...stepProps} />;\n+      case 2:\n+        return <JoinInfoStep {...stepProps} />;\n+      case 3:\n+        return <PaymentInfoStep {...stepProps} />;\n+      case 4:\n+        return <AgreementStep {...stepProps} />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  return (\n+    <PageContainer>\n+      <PageHeader>\n+        <PageTitle>신규 회원 등록</PageTitle>\n+        <PageDescription>새로운 회원의 정보를 단계별로 입력하여 등록합니다.</PageDescription>\n+      </PageHeader>\n+\n+      <StepContainer>\n+        <StepWrapper>\n+          {steps.map((step, index) => (\n+            <StepItem\n+              key={step.number}\n+              $active={currentStep === step.number}\n+              $completed={currentStep > step.number}\n+            >\n+              <StepCircle\n+                $active={currentStep === step.number}\n+                $completed={currentStep > step.number}\n+              >\n+                {currentStep > step.number ? '✓' : step.number}\n+              </StepCircle>\n+              <StepLabel\n+                $active={currentStep === step.number}\n+                $completed={currentStep > step.number}\n+              >\n+                {step.label}\n+              </StepLabel>\n+              {index < steps.length - 1 && (\n+                <StepLine $completed={currentStep > step.number} />\n+              )}\n+            </StepItem>\n+          ))}\n+        </StepWrapper>\n+      </StepContainer>\n+\n+      <Card>\n+        {renderStepContent()}\n+\n+        <ButtonGroup>\n+          <div>\n+            {currentStep > 1 && (\n+              <Button variant=\"secondary\" onClick={handlePrev}>\n+                이전\n+              </Button>\n+            )}\n+          </div>\n+\n+          <div style={{ display: 'flex', gap: '12px' }}>\n+            {currentStep === 3 && (\n+              <Button variant=\"outline\" onClick={handleSkipPayment}>\n+                건너뛰기\n+              </Button>\n+            )}\n+            \n+            {currentStep < 4 ? (\n+              <Button \n+                onClick={handleNext} \n+                disabled={!validateCurrentStep()}\n+              >\n+                다음\n+              </Button>\n+            ) : (\n+              <Button \n+                onClick={handleSubmit}\n+                disabled={!validateCurrentStep()}\n+              >\n+                회원등록 완료\n+              </Button>\n+            )}\n+          </div>\n+        </ButtonGroup>\n+      </Card>\n+    </PageContainer>\n+  );\n+};\n+\n+export default MemberRegister;\n"
                },
                {
                    "date": 1760248409260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,15 @@\n       phone: '',\n       email: '',\n       birth: '',\n       gender: '',\n-      address: '',\n+      addressInfo: {\n+        address: '',\n+        sigunguCode: '',\n+        dong: '',\n+        roadAddress: '',\n+        jibunAddress: '',\n+      },\n     },\n     joinInfo: {\n       coach: '',\n       joinPath: '',\n@@ -133,9 +139,15 @@\n         phone: '',\n         email: '',\n         birth: '',\n         gender: '',\n-        address: '',\n+        addressInfo: {\n+          address: '',\n+          sigunguCode: '',\n+          dong: '',\n+          roadAddress: '',\n+          jibunAddress: '',\n+        },\n       },\n       joinInfo: {\n         coach: '',\n         joinPath: '',\n@@ -282,368 +294,4 @@\n   );\n };\n \n export default MemberRegister;\n-import React, { useState } from 'react';\n-import styled from 'styled-components';\n-import CMSLayout from '../../../components/CMSLayout';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-\n-const PageContainer = styled.div`\n-  width: 100%;\n-  max-width: 800px;\n-  margin: 0 auto;\n-`;\n-\n-const PageHeader = styled.div`\n-  margin-bottom: 24px;\n-`;\n-\n-const PageTitle = styled.h1`\n-  font-size: ${AppTextStyles.title1.fontSize};\n-  font-weight: 700;\n-  color: ${AppColors.onBackground};\n-  margin: 0 0 8px 0;\n-`;\n-\n-const PageDescription = styled.p`\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${AppColors.onInput1};\n-  margin: 0;\n-`;\n-\n-const Card = styled.div`\n-  background: ${AppColors.surface};\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 16px;\n-  padding: 24px;\n-  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n-`;\n-\n-const FormGrid = styled.div`\n-  display: grid;\n-  gap: 16px;\n-  grid-template-columns: 1fr;\n-  \n-  @media (min-width: 768px) {\n-    grid-template-columns: 1fr 1fr;\n-  }\n-`;\n-\n-const FormField = styled.div<{ $fullWidth?: boolean }>`\n-  display: flex;\n-  flex-direction: column;\n-  gap: 8px;\n-  grid-column: ${props => props.$fullWidth ? '1 / -1' : 'auto'};\n-`;\n-\n-const Label = styled.label`\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onSurface};\n-`;\n-\n-const Input = styled.input`\n-  padding: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  outline: none;\n-  \n-  &:focus {\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n-`;\n-\n-const Select = styled.select`\n-  padding: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  outline: none;\n-  background-color: ${AppColors.surface};\n-  \n-  &:focus {\n-    border-color: ${AppColors.primary};\n-  }\n-`;\n-\n-const TextArea = styled.textarea`\n-  padding: 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  outline: none;\n-  min-height: 100px;\n-  resize: vertical;\n-  \n-  &:focus {\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n-`;\n-\n-const CheckboxGroup = styled.div`\n-  display: flex;\n-  flex-wrap: wrap;\n-  gap: 12px;\n-`;\n-\n-const CheckboxLabel = styled.label`\n-  display: flex;\n-  align-items: center;\n-  gap: 8px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  cursor: pointer;\n-`;\n-\n-const Checkbox = styled.input.attrs({ type: 'checkbox' })`\n-  width: 18px;\n-  height: 18px;\n-  accent-color: ${AppColors.primary};\n-`;\n-\n-const ButtonGroup = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  justify-content: flex-end;\n-  margin-top: 24px;\n-`;\n-\n-const Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n-  padding: 12px 24px;\n-  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n-  border-radius: 8px;\n-  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n-  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  font-weight: 600;\n-  cursor: pointer;\n-  transition: all 0.2s;\n-  \n-  &:hover {\n-    opacity: 0.9;\n-  }\n-`;\n-\n-interface MemberFormData {\n-  name: string;\n-  phone: string;\n-  email: string;\n-  birth: string;\n-  gender: string;\n-  address: string;\n-  emergencyContact: string;\n-  emergencyPhone: string;\n-  tags: string[];\n-  coach: string;\n-  notes: string;\n-}\n-\n-const MemberRegister: React.FC = () => {\n-  const [formData, setFormData] = useState<MemberFormData>({\n-    name: '',\n-    phone: '',\n-    email: '',\n-    birth: '',\n-    gender: '',\n-    address: '',\n-    emergencyContact: '',\n-    emergencyPhone: '',\n-    tags: [],\n-    coach: '',\n-    notes: '',\n-  });\n-\n-  const availableTags = ['WBM', '릴렉싱', 'VIP', '신규', '재등록'];\n-  const coaches = ['한수민', '임정현', '민웅희', '김코치', '이코치'];\n-\n-  const handleInputChange = (field: keyof MemberFormData, value: string) => {\n-    setFormData(prev => ({ ...prev, [field]: value }));\n-  };\n-\n-  const handleTagChange = (tag: string, checked: boolean) => {\n-    setFormData(prev => ({\n-      ...prev,\n-      tags: checked \n-        ? [...prev.tags, tag]\n-        : prev.tags.filter(t => t !== tag)\n-    }));\n-  };\n-\n-  const handleSubmit = (e: React.FormEvent) => {\n-    e.preventDefault();\n-    console.log('회원 등록 데이터:', formData);\n-    alert('회원이 성공적으로 등록되었습니다!');\n-  };\n-\n-  const handleCancel = () => {\n-    if (window.confirm('작성 중인 내용이 사라집니다. 정말 취소하시겠습니까?')) {\n-      setFormData({\n-        name: '',\n-        phone: '',\n-        email: '',\n-        birth: '',\n-        gender: '',\n-        address: '',\n-        emergencyContact: '',\n-        emergencyPhone: '',\n-        tags: [],\n-        coach: '',\n-        notes: '',\n-      });\n-    }\n-  };\n-\n-  return (\n-    <CMSLayout currentPath=\"/cms/member/register\">\n-      <PageContainer>\n-        <PageHeader>\n-          <PageTitle>신규 회원 등록</PageTitle>\n-          <PageDescription>새로운 회원의 정보를 입력하여 등록합니다.</PageDescription>\n-        </PageHeader>\n-\n-        <Card>\n-          <form onSubmit={handleSubmit}>\n-            <FormGrid>\n-              <FormField>\n-                <Label>이름 *</Label>\n-                <Input\n-                  value={formData.name}\n-                  onChange={(e) => handleInputChange('name', e.target.value)}\n-                  placeholder=\"홍길동\"\n-                  required\n-                />\n-              </FormField>\n-\n-              <FormField>\n-                <Label>연락처 *</Label>\n-                <Input\n-                  type=\"tel\"\n-                  value={formData.phone}\n-                  onChange={(e) => handleInputChange('phone', e.target.value)}\n-                  placeholder=\"010-0000-0000\"\n-                  required\n-                />\n-              </FormField>\n-\n-              <FormField>\n-                <Label>이메일</Label>\n-                <Input\n-                  type=\"email\"\n-                  value={formData.email}\n-                  onChange={(e) => handleInputChange('email', e.target.value)}\n-                  placeholder=\"example@email.com\"\n-                />\n-              </FormField>\n-\n-              <FormField>\n-                <Label>생년월일</Label>\n-                <Input\n-                  type=\"date\"\n-                  value={formData.birth}\n-                  onChange={(e) => handleInputChange('birth', e.target.value)}\n-                />\n-              </FormField>\n-\n-              <FormField>\n-                <Label>성별</Label>\n-                <Select\n-                  value={formData.gender}\n-                  onChange={(e) => handleInputChange('gender', e.target.value)}\n-                >\n-                  <option value=\"\">선택하세요</option>\n-                  <option value=\"male\">남성</option>\n-                  <option value=\"female\">여성</option>\n-                </Select>\n-              </FormField>\n-\n-              <FormField>\n-                <Label>담당 코치</Label>\n-                <Select\n-                  value={formData.coach}\n-                  onChange={(e) => handleInputChange('coach', e.target.value)}\n-                >\n-                  <option value=\"\">선택하세요</option>\n-                  {coaches.map(coach => (\n-                    <option key={coach} value={coach}>{coach}</option>\n-                  ))}\n-                </Select>\n-              </FormField>\n-\n-              <FormField $fullWidth>\n-                <Label>주소</Label>\n-                <Input\n-                  value={formData.address}\n-                  onChange={(e) => handleInputChange('address', e.target.value)}\n-                  placeholder=\"서울시 강남구...\"\n-                />\n-              </FormField>\n-\n-              <FormField>\n-                <Label>비상연락처 (이름)</Label>\n-                <Input\n-                  value={formData.emergencyContact}\n-                  onChange={(e) => handleInputChange('emergencyContact', e.target.value)}\n-                  placeholder=\"김가족\"\n-                />\n-              </FormField>\n-\n-              <FormField>\n-                <Label>비상연락처 (전화번호)</Label>\n-                <Input\n-                  type=\"tel\"\n-                  value={formData.emergencyPhone}\n-                  onChange={(e) => handleInputChange('emergencyPhone', e.target.value)}\n-                  placeholder=\"010-0000-0000\"\n-                />\n-              </FormField>\n-\n-              <FormField $fullWidth>\n-                <Label>태그</Label>\n-                <CheckboxGroup>\n-                  {availableTags.map(tag => (\n-                    <CheckboxLabel key={tag}>\n-                      <Checkbox\n-                        checked={formData.tags.includes(tag)}\n-                        onChange={(e) => handleTagChange(tag, e.target.checked)}\n-                      />\n-                      {tag}\n-                    </CheckboxLabel>\n-                  ))}\n-                </CheckboxGroup>\n-              </FormField>\n-\n-              <FormField $fullWidth>\n-                <Label>특이사항</Label>\n-                <TextArea\n-                  value={formData.notes}\n-                  onChange={(e) => handleInputChange('notes', e.target.value)}\n-                  placeholder=\"회원에 대한 특이사항이나 주의사항을 입력하세요...\"\n-                />\n-              </FormField>\n-            </FormGrid>\n-\n-            <ButtonGroup>\n-              <Button type=\"button\" variant=\"secondary\" onClick={handleCancel}>\n-                취소\n-              </Button>\n-              <Button type=\"submit\">\n-                등록하기\n-              </Button>\n-            </ButtonGroup>\n-          </form>\n-        </Card>\n-      </PageContainer>\n-    </CMSLayout>\n-  );\n-};\n-\n-export default MemberRegister;\n"
                },
                {
                    "date": 1760250172405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n         jibunAddress: '',\n       },\n     },\n     joinInfo: {\n+      branchId: '',\n       coach: '',\n       joinPath: '',\n       loginId: '',\n       loginPassword: '',\n@@ -148,8 +149,9 @@\n           jibunAddress: '',\n         },\n       },\n       joinInfo: {\n+        branchId: '',\n         coach: '',\n         joinPath: '',\n         loginId: '',\n         loginPassword: '',\n"
                },
                {
                    "date": 1760255178531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,10 @@\n import BasicInfoStep from './BasicInfoStep';\n import JoinInfoStep from './JoinInfoStep';\n import PaymentInfoStep from './PaymentInfoStep';\n import AgreementStep from './AgreementStep';\n+import { saveDocumentAsFile } from './PreviewDocument';\n+import { dbManager } from '../../../utils/indexedDB';\n \n const MemberRegister: React.FC = () => {\n   const [currentStep, setCurrentStep] = useState(1);\n   const [formData, setFormData] = useState<MemberFormData>({\n@@ -104,10 +106,20 @@\n       case 3:\n         return true; // 결제정보는 선택사항\n       case 4:\n         const requiredAgreements = formData.agreementInfo.agreements.filter(a => a.required);\n-        return requiredAgreements.every(a => a.agreed) && \n-               !!(formData.agreementInfo.customerSignature && formData.agreementInfo.staffSignature);\n+        const allRequiredAgreed = requiredAgreements.every(a => a.agreed);\n+        const hasCustomerSignature = !!formData.agreementInfo.customerSignature;\n+        const hasStaffSignature = !!formData.agreementInfo.staffSignature;\n+        \n+        console.log('=== 4단계 검증 ===');\n+        console.log('필수 약관 수:', requiredAgreements.length);\n+        console.log('필수 약관 모두 동의:', allRequiredAgreed);\n+        console.log('고객 서명 존재:', hasCustomerSignature);\n+        console.log('직원 서명 존재:', hasStaffSignature);\n+        console.log('전체 검증 결과:', allRequiredAgreed && hasCustomerSignature && hasStaffSignature);\n+        \n+        return allRequiredAgreed && hasCustomerSignature && hasStaffSignature;\n       default:\n         return true;\n     }\n   };\n@@ -127,75 +139,222 @@\n   const handleSkipPayment = () => {\n     setCurrentStep(4);\n   };\n \n-  const handleSubmit = () => {\n-    console.log('회원 등록 데이터:', formData);\n-    alert('회원이 성공적으로 등록되었습니다!');\n-    \n-    // 등록 완료 후 초기화\n-    setCurrentStep(1);\n-    setFormData({\n-      basicInfo: {\n-        name: '',\n-        phone: '',\n-        email: '',\n-        birth: '',\n-        gender: '',\n-        addressInfo: {\n-          address: '',\n-          sigunguCode: '',\n-          dong: '',\n-          roadAddress: '',\n-          jibunAddress: '',\n+  const handleSubmit = async () => {\n+    try {\n+      console.log('=== 회원 등록 시작 ===');\n+      console.log('폼 데이터:', formData);\n+      \n+      // 0. IndexedDB 연결 상태 확인\n+      console.log('IndexedDB 상태 확인 중...');\n+      try {\n+        // 데이터베이스 테이블 존재 여부 확인\n+        console.log('데이터베이스 객체:', dbManager);\n+        \n+        const testBranches = await dbManager.getAllBranches();\n+        console.log('IndexedDB 연결 성공, 지점 수:', testBranches.length);\n+        \n+        // members 테이블 접근 테스트\n+        console.log('회원 테이블 접근 테스트 중...');\n+        const existingMembers = await dbManager.getAllMembers();\n+        console.log('기존 회원 수:', existingMembers.length);\n+        console.log('기존 회원 목록:', existingMembers);\n+        \n+      } catch (dbError) {\n+        console.error('IndexedDB 연결 실패:', dbError);\n+        throw new Error('데이터베이스 연결에 실패했습니다.');\n+      }\n+      \n+      // 1. 지점명과 코치명 가져오기\n+      console.log('=== 1단계: 지점과 직원 정보 조회 ===');\n+      const branches = await dbManager.getAllBranches();\n+      const staff = await dbManager.getAllStaff();\n+      console.log('전체 지점 수:', branches.length);\n+      console.log('전체 직원 수:', staff.length);\n+      \n+      const branch = branches.find(b => b.id === formData.joinInfo.branchId);\n+      const coach = staff.find(s => s.id === formData.joinInfo.coach);\n+      \n+      console.log('선택된 지점 ID:', formData.joinInfo.branchId);\n+      console.log('찾은 지점 정보:', branch);\n+      console.log('선택된 코치 ID:', formData.joinInfo.coach);\n+      console.log('찾은 코치 정보:', coach);\n+      \n+      // 2. 회원 정보 저장 (기본정보 + 가입정보)\n+      console.log('=== 2단계: 회원 정보 저장 ===');\n+      const memberData = {\n+        name: formData.basicInfo.name,\n+        phone: formData.basicInfo.phone,\n+        email: formData.basicInfo.email,\n+        birth: formData.basicInfo.birth,\n+        gender: formData.basicInfo.gender as 'male' | 'female' | '',\n+        address: formData.basicInfo.addressInfo.address,\n+        sigunguCode: formData.basicInfo.addressInfo.sigunguCode,\n+        dong: formData.basicInfo.addressInfo.dong,\n+        roadAddress: formData.basicInfo.addressInfo.roadAddress,\n+        jibunAddress: formData.basicInfo.addressInfo.jibunAddress,\n+        branchId: formData.joinInfo.branchId,\n+        branchName: branch?.name || '',\n+        coach: formData.joinInfo.coach,\n+        coachName: coach?.name || '',\n+        joinPath: formData.joinInfo.joinPath,\n+        loginId: formData.joinInfo.loginId,\n+        loginPassword: formData.joinInfo.loginPassword,\n+        enableLogin: formData.joinInfo.enableLogin,\n+        agreementInfo: formData.agreementInfo,\n+        isActive: true,\n+        registrationDate: new Date().toISOString(),\n+        // 기본값으로 빈 값 설정 - 추후 필요시 업데이트\n+        agreementDate: '',\n+        signatureData: '',\n+        membershipType: '',\n+        duration: 0,\n+        durationUnit: '',\n+        startDate: '',\n+        endDate: '',\n+        monthlyFee: 0,\n+        totalAmount: 0,\n+        discountAmount: 0,\n+        finalAmount: 0,\n+        paymentMethod: '',\n+        paymentDate: '',\n+        remarks: ''\n+      };\n+      \n+      console.log('저장할 회원 데이터:', memberData);\n+      console.log('데이터 타입 검증:');\n+      console.log('- name 타입:', typeof memberData.name, '값:', memberData.name);\n+      console.log('- phone 타입:', typeof memberData.phone, '값:', memberData.phone);\n+      console.log('- email 타입:', typeof memberData.email, '값:', memberData.email);\n+      \n+      console.log('dbManager.addMember 함수 호출 전...');\n+      let memberId: string;\n+      try {\n+        memberId = await dbManager.addMember(memberData);\n+        console.log('dbManager.addMember 함수 호출 후 - 반환값:', memberId);\n+        console.log('반환값 타입:', typeof memberId);\n+      } catch (addMemberError) {\n+        console.error('❌ addMember 함수에서 에러 발생:', addMemberError);\n+        console.error('에러 타입:', typeof addMemberError);\n+        console.error('에러 메시지:', addMemberError instanceof Error ? addMemberError.message : addMemberError);\n+        console.error('에러 스택:', addMemberError instanceof Error ? addMemberError.stack : '스택 없음');\n+        throw new Error(`회원 저장 중 오류: ${addMemberError instanceof Error ? addMemberError.message : '알 수 없는 오류'}`);\n+      }\n+      \n+      if (!memberId) {\n+        throw new Error('회원 저장에 실패했습니다 - 반환값 없음');\n+      }\n+      \n+      // 즉시 저장 확인\n+      console.log('=== 저장 확인 테스트 ===');\n+      try {\n+        const allMembers = await dbManager.getAllMembers();\n+        console.log('저장 후 전체 회원 수:', allMembers.length);\n+        console.log('저장된 모든 회원:', allMembers);\n+        \n+        const foundMember = allMembers.find(m => m.id === memberId);\n+        if (foundMember) {\n+          console.log('✅ 방금 저장한 회원을 데이터베이스에서 찾았습니다:', foundMember);\n+        } else {\n+          console.error('❌ 방금 저장한 회원을 데이터베이스에서 찾을 수 없습니다');\n+        }\n+      } catch (verifyError) {\n+        console.error('저장 확인 중 오류:', verifyError);\n+      }\n+      \n+      // 3. 결제 정보 저장 (상품이 선택된 경우에만)\n+      if (formData.paymentInfo.selectedProducts.length > 0) {\n+        console.log('결제 정보 저장 중...');\n+        const totalAmount = formData.paymentInfo.selectedProducts.reduce(\n+          (sum, product) => sum + product.price, 0\n+        );\n+        \n+        const paymentId = await dbManager.addPayment({\n+          memberId: memberId,\n+          memberName: formData.basicInfo.name,\n+          products: formData.paymentInfo.selectedProducts,\n+          totalAmount: totalAmount,\n+          paymentStatus: 'pending', // 기본값으로 대기 상태\n+          notes: '회원 등록 시 선택된 상품',\n+        });\n+        console.log('결제 정보 저장 완료 - ID:', paymentId);\n+      }\n+      \n+      // 4. 회원 등록 문서를 HTML 파일로 저장\n+      console.log('문서 생성 중...');\n+      const fileName = await saveDocumentAsFile(formData);\n+      console.log('문서 저장 완료:', fileName);\n+      \n+      alert(`회원이 성공적으로 등록되었습니다!\\n회원 ID: ${memberId}\\n등록 문서가 \"${fileName}\" 파일로 저장되었습니다.`);\n+      \n+      // 등록 완료 후 초기화\n+      setCurrentStep(1);\n+      setFormData({\n+        basicInfo: {\n+          name: '',\n+          phone: '',\n+          email: '',\n+          birth: '',\n+          gender: '',\n+          addressInfo: {\n+            address: '',\n+            sigunguCode: '',\n+            dong: '',\n+            roadAddress: '',\n+            jibunAddress: '',\n+          },\n         },\n-      },\n-      joinInfo: {\n-        branchId: '',\n-        coach: '',\n-        joinPath: '',\n-        loginId: '',\n-        loginPassword: '',\n-        enableLogin: false,\n-      },\n-      paymentInfo: {\n-        selectedProducts: [],\n-      },\n-      agreementInfo: {\n-        agreements: [\n-          {\n-            id: 'terms',\n-            title: '회원이용약관',\n-            content: '회원이용약관 내용입니다...',\n-            required: true,\n-            agreed: false,\n-          },\n-          {\n-            id: 'privacy',\n-            title: '개인정보처리방침',\n-            content: '개인정보처리방침 내용입니다...',\n-            required: true,\n-            agreed: false,\n-          },\n-          {\n-            id: 'service',\n-            title: '서비스이용약관',\n-            content: '서비스이용약관 내용입니다...',\n-            required: true,\n-            agreed: false,\n-          },\n-          {\n-            id: 'marketing',\n-            title: '마케팅활용 동의',\n-            content: '마케팅활용 동의 내용입니다...',\n-            required: false,\n-            agreed: false,\n-          },\n-        ],\n-        customerSignature: '',\n-        staffSignature: '',\n-      },\n-    });\n+        joinInfo: {\n+          branchId: '',\n+          coach: '',\n+          joinPath: '',\n+          loginId: '',\n+          loginPassword: '',\n+          enableLogin: false,\n+        },\n+        paymentInfo: {\n+          selectedProducts: [],\n+        },\n+        agreementInfo: {\n+          agreements: [\n+            {\n+              id: 'terms',\n+              title: '회원이용약관',\n+              content: '회원이용약관 내용입니다...',\n+              required: true,\n+              agreed: false,\n+            },\n+            {\n+              id: 'privacy',\n+              title: '개인정보처리방침',\n+              content: '개인정보처리방침 내용입니다...',\n+              required: true,\n+              agreed: false,\n+            },\n+            {\n+              id: 'service',\n+              title: '서비스이용약관',\n+              content: '서비스이용약관 내용입니다...',\n+              required: true,\n+              agreed: false,\n+            },\n+            {\n+              id: 'marketing',\n+              title: '마케팅활용 동의',\n+              content: '마케팅활용 동의 내용입니다...',\n+              required: false,\n+              agreed: false,\n+            },\n+          ],\n+          customerSignature: '',\n+          staffSignature: '',\n+        },\n+      });\n+    } catch (error) {\n+      console.error('회원 등록 처리 중 오류:', error);\n+      alert(`회원 등록 중 오류가 발생했습니다: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);\n+    }\n   };\n \n   const renderStepContent = () => {\n     const stepProps = {\n"
                },
                {
                    "date": 1760255558087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,9 +273,11 @@\n           memberId: memberId,\n           memberName: formData.basicInfo.name,\n           products: formData.paymentInfo.selectedProducts,\n           totalAmount: totalAmount,\n-          paymentStatus: 'pending', // 기본값으로 대기 상태\n+          paymentStatus: 'completed', // 회원 등록 시 결제 완료로 처리\n+          paymentMethod: '현장결제', // 기본값으로 현장결제 설정\n+          paymentDate: new Date(), // 현재 날짜로 설정\n           notes: '회원 등록 시 선택된 상품',\n         });\n         console.log('결제 정보 저장 완료 - ID:', paymentId);\n       }\n"
                },
                {
                    "date": 1760255779600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n import { dbManager } from '../../../utils/indexedDB';\n \n const MemberRegister: React.FC = () => {\n   const [currentStep, setCurrentStep] = useState(1);\n+  const [isValidating, setIsValidating] = useState(false);\n   const [formData, setFormData] = useState<MemberFormData>({\n     basicInfo: {\n       name: '',\n       phone: '',\n@@ -129,8 +130,47 @@\n       setCurrentStep(currentStep + 1);\n     }\n   };\n \n+  const handleValidateAndNext = async () => {\n+    if (!validateCurrentStep()) {\n+      return;\n+    }\n+\n+    // 1단계(기본정보)에서는 중복 체크 수행\n+    if (currentStep === 1) {\n+      try {\n+        setIsValidating(true);\n+        const { phone, email } = formData.basicInfo;\n+        \n+        // 연락처는 필수이므로 항상 체크\n+        if (!phone) {\n+          alert('연락처를 입력해주세요.');\n+          return;\n+        }\n+\n+        // 중복 체크 수행\n+        const duplicateCheck = await dbManager.checkMemberDuplicate(phone, email);\n+        \n+        if (duplicateCheck.isDuplicate) {\n+          alert(duplicateCheck.message);\n+          return;\n+        }\n+\n+        // 중복이 없으면 다음 단계로\n+        setCurrentStep(currentStep + 1);\n+      } catch (error) {\n+        console.error('중복 체크 실패:', error);\n+        alert('중복 체크 중 오류가 발생했습니다. 다시 시도해주세요.');\n+      } finally {\n+        setIsValidating(false);\n+      }\n+    } else {\n+      // 다른 단계는 일반적인 다음 처리\n+      handleNext();\n+    }\n+  };\n+\n   const handlePrev = () => {\n     if (currentStep > 1) {\n       setCurrentStep(currentStep - 1);\n     }\n@@ -364,8 +404,9 @@\n       onUpdate: handleFormUpdate,\n       onNext: handleNext,\n       onPrev: handlePrev,\n       isValid: validateCurrentStep(),\n+      onValidateAndNext: handleValidateAndNext,\n     };\n \n     switch (currentStep) {\n       case 1:\n@@ -436,12 +477,12 @@\n             )}\n             \n             {currentStep < 4 ? (\n               <Button \n-                onClick={handleNext} \n-                disabled={!validateCurrentStep()}\n+                onClick={currentStep === 1 ? handleValidateAndNext : handleNext} \n+                disabled={!validateCurrentStep() || (currentStep === 1 && isValidating)}\n               >\n-                다음\n+                {currentStep === 1 && isValidating ? '중복 확인 중...' : '다음'}\n               </Button>\n             ) : (\n               <Button \n                 onClick={handleSubmit}\n"
                },
                {
                    "date": 1760256058443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import React, { useState } from 'react';\n+import { toast } from 'react-toastify';\n import { \n   PageContainer, \n   PageHeader, \n   PageTitle, \n@@ -143,25 +144,25 @@\n         const { phone, email } = formData.basicInfo;\n         \n         // 연락처는 필수이므로 항상 체크\n         if (!phone) {\n-          alert('연락처를 입력해주세요.');\n+          toast.error('연락처를 입력해주세요.');\n           return;\n         }\n \n         // 중복 체크 수행\n         const duplicateCheck = await dbManager.checkMemberDuplicate(phone, email);\n         \n         if (duplicateCheck.isDuplicate) {\n-          alert(duplicateCheck.message);\n+          toast.error(duplicateCheck.message || '중복된 정보가 있습니다.');\n           return;\n         }\n \n         // 중복이 없으면 다음 단계로\n         setCurrentStep(currentStep + 1);\n       } catch (error) {\n         console.error('중복 체크 실패:', error);\n-        alert('중복 체크 중 오류가 발생했습니다. 다시 시도해주세요.');\n+        toast.error('중복 체크 중 오류가 발생했습니다. 다시 시도해주세요.');\n       } finally {\n         setIsValidating(false);\n       }\n     } else {\n@@ -326,9 +327,11 @@\n       console.log('문서 생성 중...');\n       const fileName = await saveDocumentAsFile(formData);\n       console.log('문서 저장 완료:', fileName);\n       \n-      alert(`회원이 성공적으로 등록되었습니다!\\n회원 ID: ${memberId}\\n등록 문서가 \"${fileName}\" 파일로 저장되었습니다.`);\n+      toast.success(`회원이 성공적으로 등록되었습니다!\\n회원 ID: ${memberId}\\n등록 문서: ${fileName}`, {\n+        autoClose: 5000\n+      });\n       \n       // 등록 완료 후 초기화\n       setCurrentStep(1);\n       setFormData({\n@@ -393,9 +396,9 @@\n         },\n       });\n     } catch (error) {\n       console.error('회원 등록 처리 중 오류:', error);\n-      alert(`회원 등록 중 오류가 발생했습니다: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);\n+      toast.error(`회원 등록 중 오류가 발생했습니다: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);\n     }\n   };\n \n   const renderStepContent = () => {\n"
                },
                {
                    "date": 1760256268341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,12 +136,13 @@\n     if (!validateCurrentStep()) {\n       return;\n     }\n \n-    // 1단계(기본정보)에서는 중복 체크 수행\n-    if (currentStep === 1) {\n-      try {\n-        setIsValidating(true);\n+    try {\n+      setIsValidating(true);\n+\n+      // 1단계(기본정보)에서는 연락처와 이메일 중복 체크 수행\n+      if (currentStep === 1) {\n         const { phone, email } = formData.basicInfo;\n         \n         // 연락처는 필수이므로 항상 체크\n         if (!phone) {\n@@ -155,20 +156,32 @@\n         if (duplicateCheck.isDuplicate) {\n           toast.error(duplicateCheck.message || '중복된 정보가 있습니다.');\n           return;\n         }\n+      }\n+      \n+      // 2단계(가입정보)에서는 로그인 ID 중복 체크 수행 (로그인 기능 사용 시에만)\n+      else if (currentStep === 2) {\n+        const { enableLogin, loginId } = formData.joinInfo;\n+        \n+        if (enableLogin && loginId) {\n+          // 로그인 ID 중복 체크 수행\n+          const duplicateCheck = await dbManager.checkLoginIdDuplicate(loginId);\n+          \n+          if (duplicateCheck.isDuplicate) {\n+            toast.error(duplicateCheck.message || '이미 사용 중인 로그인 ID입니다.');\n+            return;\n+          }\n+        }\n+      }\n \n-        // 중복이 없으면 다음 단계로\n-        setCurrentStep(currentStep + 1);\n-      } catch (error) {\n-        console.error('중복 체크 실패:', error);\n-        toast.error('중복 체크 중 오류가 발생했습니다. 다시 시도해주세요.');\n-      } finally {\n-        setIsValidating(false);\n-      }\n-    } else {\n-      // 다른 단계는 일반적인 다음 처리\n-      handleNext();\n+      // 중복이 없으면 다음 단계로\n+      setCurrentStep(currentStep + 1);\n+    } catch (error) {\n+      console.error('중복 체크 실패:', error);\n+      toast.error('중복 체크 중 오류가 발생했습니다. 다시 시도해주세요.');\n+    } finally {\n+      setIsValidating(false);\n     }\n   };\n \n   const handlePrev = () => {\n@@ -480,12 +493,12 @@\n             )}\n             \n             {currentStep < 4 ? (\n               <Button \n-                onClick={currentStep === 1 ? handleValidateAndNext : handleNext} \n-                disabled={!validateCurrentStep() || (currentStep === 1 && isValidating)}\n+                onClick={(currentStep === 1 || currentStep === 2) ? handleValidateAndNext : handleNext} \n+                disabled={!validateCurrentStep() || ((currentStep === 1 || currentStep === 2) && isValidating)}\n               >\n-                {currentStep === 1 && isValidating ? '중복 확인 중...' : '다음'}\n+                {((currentStep === 1 || currentStep === 2) && isValidating) ? '중복 확인 중...' : '다음'}\n               </Button>\n             ) : (\n               <Button \n                 onClick={handleSubmit}\n"
                },
                {
                    "date": 1760256816575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,528 @@\n+import React, { useState } from 'react';\n+import { toast } from 'react-toastify';\n+import { \n+  PageContainer, \n+  PageHeader, \n+  PageTitle, \n+  PageDescription,\n+  StepContainer,\n+  StepWrapper,\n+  StepItem,\n+  StepCircle,\n+  StepLabel,\n+  StepLine,\n+  Card,\n+  ButtonGroup,\n+  Button\n+} from './StyledComponents';\n+import { MemberFormData } from './types';\n+import BasicInfoStep from './BasicInfoStep';\n+import JoinInfoStep from './JoinInfoStep';\n+import PaymentInfoStep from './PaymentInfoStep';\n+import AgreementStep from './AgreementStep';\n+import { saveDocumentAsFile } from './PreviewDocument';\n+import { dbManager } from '../../../utils/indexedDB';\n+\n+const MemberRegister: React.FC = () => {\n+  const [currentStep, setCurrentStep] = useState(1);\n+  const [isValidating, setIsValidating] = useState(false);\n+  const [formData, setFormData] = useState<MemberFormData>({\n+    basicInfo: {\n+      name: '',\n+      phone: '',\n+      email: '',\n+      birth: '',\n+      gender: '',\n+      addressInfo: {\n+        address: '',\n+        sigunguCode: '',\n+        dong: '',\n+        roadAddress: '',\n+        jibunAddress: '',\n+      },\n+    },\n+    joinInfo: {\n+      branchId: '',\n+      coach: '',\n+      joinPath: '',\n+      loginId: '',\n+      loginPassword: '',\n+      enableLogin: false,\n+    },\n+    paymentInfo: {\n+      selectedProducts: [],\n+      paymentMethod: 'card',\n+    },\n+    agreementInfo: {\n+      agreements: [\n+        {\n+          id: 'terms',\n+          title: '회원이용약관',\n+          content: '회원이용약관 내용입니다...',\n+          required: true,\n+          agreed: false,\n+        },\n+        {\n+          id: 'privacy',\n+          title: '개인정보처리방침',\n+          content: '개인정보처리방침 내용입니다...',\n+          required: true,\n+          agreed: false,\n+        },\n+        {\n+          id: 'service',\n+          title: '서비스이용약관',\n+          content: '서비스이용약관 내용입니다...',\n+          required: true,\n+          agreed: false,\n+        },\n+        {\n+          id: 'marketing',\n+          title: '마케팅활용 동의',\n+          content: '마케팅활용 동의 내용입니다...',\n+          required: false,\n+          agreed: false,\n+        },\n+      ],\n+      customerSignature: '',\n+      staffSignature: '',\n+    },\n+  });\n+\n+  const steps = [\n+    { number: 1, label: '기본정보' },\n+    { number: 2, label: '가입정보' },\n+    { number: 3, label: '결제정보' },\n+    { number: 4, label: '동의서명' },\n+  ];\n+\n+  const handleFormUpdate = (updatedData: Partial<MemberFormData>) => {\n+    setFormData(prev => ({ ...prev, ...updatedData }));\n+  };\n+\n+  const validateCurrentStep = (): boolean => {\n+    switch (currentStep) {\n+      case 1:\n+        return !!(formData.basicInfo.name && formData.basicInfo.phone);\n+      case 2:\n+        return !!(formData.joinInfo.coach && formData.joinInfo.joinPath);\n+      case 3:\n+        return true; // 결제정보는 선택사항\n+      case 4:\n+        const requiredAgreements = formData.agreementInfo.agreements.filter(a => a.required);\n+        const allRequiredAgreed = requiredAgreements.every(a => a.agreed);\n+        const hasCustomerSignature = !!formData.agreementInfo.customerSignature;\n+        const hasStaffSignature = !!formData.agreementInfo.staffSignature;\n+        \n+        console.log('=== 4단계 검증 ===');\n+        console.log('필수 약관 수:', requiredAgreements.length);\n+        console.log('필수 약관 모두 동의:', allRequiredAgreed);\n+        console.log('고객 서명 존재:', hasCustomerSignature);\n+        console.log('직원 서명 존재:', hasStaffSignature);\n+        console.log('전체 검증 결과:', allRequiredAgreed && hasCustomerSignature && hasStaffSignature);\n+        \n+        return allRequiredAgreed && hasCustomerSignature && hasStaffSignature;\n+      default:\n+        return true;\n+    }\n+  };\n+\n+  const handleNext = () => {\n+    if (validateCurrentStep() && currentStep < 4) {\n+      setCurrentStep(currentStep + 1);\n+    }\n+  };\n+\n+  const handleValidateAndNext = async () => {\n+    if (!validateCurrentStep()) {\n+      return;\n+    }\n+\n+    try {\n+      setIsValidating(true);\n+\n+      // 1단계(기본정보)에서는 연락처와 이메일 중복 체크 수행\n+      if (currentStep === 1) {\n+        const { phone, email } = formData.basicInfo;\n+        \n+        // 연락처는 필수이므로 항상 체크\n+        if (!phone) {\n+          toast.error('연락처를 입력해주세요.');\n+          return;\n+        }\n+\n+        // 중복 체크 수행\n+        const duplicateCheck = await dbManager.checkMemberDuplicate(phone, email);\n+        \n+        if (duplicateCheck.isDuplicate) {\n+          toast.error(duplicateCheck.message || '중복된 정보가 있습니다.');\n+          return;\n+        }\n+      }\n+      \n+      // 2단계(가입정보)에서는 로그인 ID 중복 체크 수행 (로그인 기능 사용 시에만)\n+      else if (currentStep === 2) {\n+        const { enableLogin, loginId } = formData.joinInfo;\n+        \n+        if (enableLogin && loginId) {\n+          // 로그인 ID 중복 체크 수행\n+          const duplicateCheck = await dbManager.checkLoginIdDuplicate(loginId);\n+          \n+          if (duplicateCheck.isDuplicate) {\n+            toast.error(duplicateCheck.message || '이미 사용 중인 로그인 ID입니다.');\n+            return;\n+          }\n+        }\n+      }\n+\n+      // 중복이 없으면 다음 단계로\n+      setCurrentStep(currentStep + 1);\n+    } catch (error) {\n+      console.error('중복 체크 실패:', error);\n+      toast.error('중복 체크 중 오류가 발생했습니다. 다시 시도해주세요.');\n+    } finally {\n+      setIsValidating(false);\n+    }\n+  };\n+\n+  const handlePrev = () => {\n+    if (currentStep > 1) {\n+      setCurrentStep(currentStep - 1);\n+    }\n+  };\n+\n+  const handleSkipPayment = () => {\n+    setCurrentStep(4);\n+  };\n+\n+  const handleSubmit = async () => {\n+    try {\n+      console.log('=== 회원 등록 시작 ===');\n+      console.log('폼 데이터:', formData);\n+      \n+      // 0. IndexedDB 연결 상태 확인\n+      console.log('IndexedDB 상태 확인 중...');\n+      try {\n+        // 데이터베이스 테이블 존재 여부 확인\n+        console.log('데이터베이스 객체:', dbManager);\n+        \n+        const testBranches = await dbManager.getAllBranches();\n+        console.log('IndexedDB 연결 성공, 지점 수:', testBranches.length);\n+        \n+        // members 테이블 접근 테스트\n+        console.log('회원 테이블 접근 테스트 중...');\n+        const existingMembers = await dbManager.getAllMembers();\n+        console.log('기존 회원 수:', existingMembers.length);\n+        console.log('기존 회원 목록:', existingMembers);\n+        \n+      } catch (dbError) {\n+        console.error('IndexedDB 연결 실패:', dbError);\n+        throw new Error('데이터베이스 연결에 실패했습니다.');\n+      }\n+      \n+      // 1. 지점명과 코치명 가져오기\n+      console.log('=== 1단계: 지점과 직원 정보 조회 ===');\n+      const branches = await dbManager.getAllBranches();\n+      const staff = await dbManager.getAllStaff();\n+      console.log('전체 지점 수:', branches.length);\n+      console.log('전체 직원 수:', staff.length);\n+      \n+      const branch = branches.find(b => b.id === formData.joinInfo.branchId);\n+      const coach = staff.find(s => s.id === formData.joinInfo.coach);\n+      \n+      console.log('선택된 지점 ID:', formData.joinInfo.branchId);\n+      console.log('찾은 지점 정보:', branch);\n+      console.log('선택된 코치 ID:', formData.joinInfo.coach);\n+      console.log('찾은 코치 정보:', coach);\n+      \n+      // 2. 회원 정보 저장 (기본정보 + 가입정보)\n+      console.log('=== 2단계: 회원 정보 저장 ===');\n+      const memberData = {\n+        name: formData.basicInfo.name,\n+        phone: formData.basicInfo.phone,\n+        email: formData.basicInfo.email,\n+        birth: formData.basicInfo.birth,\n+        gender: formData.basicInfo.gender as 'male' | 'female' | '',\n+        address: formData.basicInfo.addressInfo.address,\n+        sigunguCode: formData.basicInfo.addressInfo.sigunguCode,\n+        dong: formData.basicInfo.addressInfo.dong,\n+        roadAddress: formData.basicInfo.addressInfo.roadAddress,\n+        jibunAddress: formData.basicInfo.addressInfo.jibunAddress,\n+        branchId: formData.joinInfo.branchId,\n+        branchName: branch?.name || '',\n+        coach: formData.joinInfo.coach,\n+        coachName: coach?.name || '',\n+        joinPath: formData.joinInfo.joinPath,\n+        loginId: formData.joinInfo.loginId,\n+        loginPassword: formData.joinInfo.loginPassword,\n+        enableLogin: formData.joinInfo.enableLogin,\n+        agreementInfo: formData.agreementInfo,\n+        isActive: true,\n+        registrationDate: new Date().toISOString(),\n+        // 기본값으로 빈 값 설정 - 추후 필요시 업데이트\n+        agreementDate: '',\n+        signatureData: '',\n+        membershipType: '',\n+        duration: 0,\n+        durationUnit: '',\n+        startDate: '',\n+        endDate: '',\n+        monthlyFee: 0,\n+        totalAmount: 0,\n+        discountAmount: 0,\n+        finalAmount: 0,\n+        paymentMethod: '',\n+        paymentDate: '',\n+        remarks: ''\n+      };\n+      \n+      console.log('저장할 회원 데이터:', memberData);\n+      console.log('데이터 타입 검증:');\n+      console.log('- name 타입:', typeof memberData.name, '값:', memberData.name);\n+      console.log('- phone 타입:', typeof memberData.phone, '값:', memberData.phone);\n+      console.log('- email 타입:', typeof memberData.email, '값:', memberData.email);\n+      \n+      console.log('dbManager.addMember 함수 호출 전...');\n+      let memberId: string;\n+      try {\n+        memberId = await dbManager.addMember(memberData);\n+        console.log('dbManager.addMember 함수 호출 후 - 반환값:', memberId);\n+        console.log('반환값 타입:', typeof memberId);\n+      } catch (addMemberError) {\n+        console.error('❌ addMember 함수에서 에러 발생:', addMemberError);\n+        console.error('에러 타입:', typeof addMemberError);\n+        console.error('에러 메시지:', addMemberError instanceof Error ? addMemberError.message : addMemberError);\n+        console.error('에러 스택:', addMemberError instanceof Error ? addMemberError.stack : '스택 없음');\n+        throw new Error(`회원 저장 중 오류: ${addMemberError instanceof Error ? addMemberError.message : '알 수 없는 오류'}`);\n+      }\n+      \n+      if (!memberId) {\n+        throw new Error('회원 저장에 실패했습니다 - 반환값 없음');\n+      }\n+      \n+      // 즉시 저장 확인\n+      console.log('=== 저장 확인 테스트 ===');\n+      try {\n+        const allMembers = await dbManager.getAllMembers();\n+        console.log('저장 후 전체 회원 수:', allMembers.length);\n+        console.log('저장된 모든 회원:', allMembers);\n+        \n+        const foundMember = allMembers.find(m => m.id === memberId);\n+        if (foundMember) {\n+          console.log('✅ 방금 저장한 회원을 데이터베이스에서 찾았습니다:', foundMember);\n+        } else {\n+          console.error('❌ 방금 저장한 회원을 데이터베이스에서 찾을 수 없습니다');\n+        }\n+      } catch (verifyError) {\n+        console.error('저장 확인 중 오류:', verifyError);\n+      }\n+      \n+      // 3. 결제 정보 저장 (상품이 선택된 경우에만)\n+      if (formData.paymentInfo.selectedProducts.length > 0) {\n+        console.log('결제 정보 저장 중...');\n+        const totalAmount = formData.paymentInfo.selectedProducts.reduce(\n+          (sum, product) => sum + product.price, 0\n+        );\n+        \n+        // 결제 방법 매핑\n+        const paymentMethodMap: { [key: string]: string } = {\n+          'card': '카드',\n+          'cash': '현금',\n+          'transfer': '계좌이체'\n+        };\n+        \n+        const paymentMethodName = paymentMethodMap[formData.paymentInfo.paymentMethod] || '카드';\n+        \n+        const paymentId = await dbManager.addPayment({\n+          memberId: memberId,\n+          memberName: formData.basicInfo.name,\n+          products: formData.paymentInfo.selectedProducts,\n+          totalAmount: totalAmount,\n+          paymentStatus: 'completed', // 회원 등록 시 결제 완료로 처리\n+          paymentMethod: paymentMethodName,\n+          paymentDate: new Date(), // 현재 날짜로 설정\n+          notes: '회원 등록 시 선택된 상품',\n+        });\n+        console.log('결제 정보 저장 완료 - ID:', paymentId);\n+      }\n+      \n+      // 4. 회원 등록 문서를 HTML 파일로 저장\n+      console.log('문서 생성 중...');\n+      const fileName = await saveDocumentAsFile(formData);\n+      console.log('문서 저장 완료:', fileName);\n+      \n+      toast.success(`회원이 성공적으로 등록되었습니다!\\n회원 ID: ${memberId}\\n등록 문서: ${fileName}`, {\n+        autoClose: 5000\n+      });\n+      \n+      // 등록 완료 후 초기화\n+      setCurrentStep(1);\n+      setFormData({\n+        basicInfo: {\n+          name: '',\n+          phone: '',\n+          email: '',\n+          birth: '',\n+          gender: '',\n+          addressInfo: {\n+            address: '',\n+            sigunguCode: '',\n+            dong: '',\n+            roadAddress: '',\n+            jibunAddress: '',\n+          },\n+        },\n+        joinInfo: {\n+          branchId: '',\n+          coach: '',\n+          joinPath: '',\n+          loginId: '',\n+          loginPassword: '',\n+          enableLogin: false,\n+        },\n+        paymentInfo: {\n+          selectedProducts: [],\n+          paymentMethod: 'card',\n+        },\n+        agreementInfo: {\n+          agreements: [\n+            {\n+              id: 'terms',\n+              title: '회원이용약관',\n+              content: '회원이용약관 내용입니다...',\n+              required: true,\n+              agreed: false,\n+            },\n+            {\n+              id: 'privacy',\n+              title: '개인정보처리방침',\n+              content: '개인정보처리방침 내용입니다...',\n+              required: true,\n+              agreed: false,\n+            },\n+            {\n+              id: 'service',\n+              title: '서비스이용약관',\n+              content: '서비스이용약관 내용입니다...',\n+              required: true,\n+              agreed: false,\n+            },\n+            {\n+              id: 'marketing',\n+              title: '마케팅활용 동의',\n+              content: '마케팅활용 동의 내용입니다...',\n+              required: false,\n+              agreed: false,\n+            },\n+          ],\n+          customerSignature: '',\n+          staffSignature: '',\n+        },\n+      });\n+    } catch (error) {\n+      console.error('회원 등록 처리 중 오류:', error);\n+      toast.error(`회원 등록 중 오류가 발생했습니다: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);\n+    }\n+  };\n+\n+  const renderStepContent = () => {\n+    const stepProps = {\n+      formData,\n+      onUpdate: handleFormUpdate,\n+      onNext: handleNext,\n+      onPrev: handlePrev,\n+      isValid: validateCurrentStep(),\n+      onValidateAndNext: handleValidateAndNext,\n+    };\n+\n+    switch (currentStep) {\n+      case 1:\n+        return <BasicInfoStep {...stepProps} />;\n+      case 2:\n+        return <JoinInfoStep {...stepProps} />;\n+      case 3:\n+        return <PaymentInfoStep {...stepProps} />;\n+      case 4:\n+        return <AgreementStep {...stepProps} />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  return (\n+    <PageContainer>\n+      <PageHeader>\n+        <PageTitle>신규 회원 등록</PageTitle>\n+        <PageDescription>새로운 회원의 정보를 단계별로 입력하여 등록합니다.</PageDescription>\n+      </PageHeader>\n+\n+      <StepContainer>\n+        <StepWrapper>\n+          {steps.map((step, index) => (\n+            <StepItem\n+              key={step.number}\n+              $active={currentStep === step.number}\n+              $completed={currentStep > step.number}\n+            >\n+              <StepCircle\n+                $active={currentStep === step.number}\n+                $completed={currentStep > step.number}\n+              >\n+                {currentStep > step.number ? '✓' : step.number}\n+              </StepCircle>\n+              <StepLabel\n+                $active={currentStep === step.number}\n+                $completed={currentStep > step.number}\n+              >\n+                {step.label}\n+              </StepLabel>\n+              {index < steps.length - 1 && (\n+                <StepLine $completed={currentStep > step.number} />\n+              )}\n+            </StepItem>\n+          ))}\n+        </StepWrapper>\n+      </StepContainer>\n+\n+      <Card>\n+        {renderStepContent()}\n+\n+        <ButtonGroup>\n+          <div>\n+            {currentStep > 1 && (\n+              <Button variant=\"secondary\" onClick={handlePrev}>\n+                이전\n+              </Button>\n+            )}\n+          </div>\n+\n+          <div style={{ display: 'flex', gap: '12px' }}>\n+            {currentStep === 3 && (\n+              <Button variant=\"outline\" onClick={handleSkipPayment}>\n+                건너뛰기\n+              </Button>\n+            )}\n+            \n+            {currentStep < 4 ? (\n+              <Button \n+                onClick={(currentStep === 1 || currentStep === 2) ? handleValidateAndNext : handleNext} \n+                disabled={!validateCurrentStep() || ((currentStep === 1 || currentStep === 2) && isValidating)}\n+              >\n+                {((currentStep === 1 || currentStep === 2) && isValidating) ? '중복 확인 중...' : '다음'}\n+              </Button>\n+            ) : (\n+              <Button \n+                onClick={handleSubmit}\n+                disabled={!validateCurrentStep()}\n+              >\n+                회원등록 완료\n+              </Button>\n+            )}\n+          </div>\n+        </ButtonGroup>\n+      </Card>\n+    </PageContainer>\n+  );\n+};\n+\n+export default MemberRegister;\n"
                },
                {
                    "date": 1760256921584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,15 @@\n \n   const validateCurrentStep = (): boolean => {\n     switch (currentStep) {\n       case 1:\n-        return !!(formData.basicInfo.name && formData.basicInfo.phone);\n+        return !!(\n+          formData.basicInfo.name && \n+          formData.basicInfo.phone && \n+          formData.basicInfo.birth && \n+          formData.basicInfo.gender && \n+          formData.basicInfo.addressInfo.address\n+        );\n       case 2:\n         return !!(formData.joinInfo.coach && formData.joinInfo.joinPath);\n       case 3:\n         return true; // 결제정보는 선택사항\n@@ -525,521 +531,4 @@\n   );\n };\n \n export default MemberRegister;\n-import React, { useState } from 'react';\n-import { toast } from 'react-toastify';\n-import { \n-  PageContainer, \n-  PageHeader, \n-  PageTitle, \n-  PageDescription,\n-  StepContainer,\n-  StepWrapper,\n-  StepItem,\n-  StepCircle,\n-  StepLabel,\n-  StepLine,\n-  Card,\n-  ButtonGroup,\n-  Button\n-} from './StyledComponents';\n-import { MemberFormData } from './types';\n-import BasicInfoStep from './BasicInfoStep';\n-import JoinInfoStep from './JoinInfoStep';\n-import PaymentInfoStep from './PaymentInfoStep';\n-import AgreementStep from './AgreementStep';\n-import { saveDocumentAsFile } from './PreviewDocument';\n-import { dbManager } from '../../../utils/indexedDB';\n-\n-const MemberRegister: React.FC = () => {\n-  const [currentStep, setCurrentStep] = useState(1);\n-  const [isValidating, setIsValidating] = useState(false);\n-  const [formData, setFormData] = useState<MemberFormData>({\n-    basicInfo: {\n-      name: '',\n-      phone: '',\n-      email: '',\n-      birth: '',\n-      gender: '',\n-      addressInfo: {\n-        address: '',\n-        sigunguCode: '',\n-        dong: '',\n-        roadAddress: '',\n-        jibunAddress: '',\n-      },\n-    },\n-    joinInfo: {\n-      branchId: '',\n-      coach: '',\n-      joinPath: '',\n-      loginId: '',\n-      loginPassword: '',\n-      enableLogin: false,\n-    },\n-    paymentInfo: {\n-      selectedProducts: [],\n-    },\n-    agreementInfo: {\n-      agreements: [\n-        {\n-          id: 'terms',\n-          title: '회원이용약관',\n-          content: '회원이용약관 내용입니다...',\n-          required: true,\n-          agreed: false,\n-        },\n-        {\n-          id: 'privacy',\n-          title: '개인정보처리방침',\n-          content: '개인정보처리방침 내용입니다...',\n-          required: true,\n-          agreed: false,\n-        },\n-        {\n-          id: 'service',\n-          title: '서비스이용약관',\n-          content: '서비스이용약관 내용입니다...',\n-          required: true,\n-          agreed: false,\n-        },\n-        {\n-          id: 'marketing',\n-          title: '마케팅활용 동의',\n-          content: '마케팅활용 동의 내용입니다...',\n-          required: false,\n-          agreed: false,\n-        },\n-      ],\n-      customerSignature: '',\n-      staffSignature: '',\n-    },\n-  });\n-\n-  const steps = [\n-    { number: 1, label: '기본정보' },\n-    { number: 2, label: '가입정보' },\n-    { number: 3, label: '결제정보' },\n-    { number: 4, label: '동의서명' },\n-  ];\n-\n-  const handleFormUpdate = (updatedData: Partial<MemberFormData>) => {\n-    setFormData(prev => ({ ...prev, ...updatedData }));\n-  };\n-\n-  const validateCurrentStep = (): boolean => {\n-    switch (currentStep) {\n-      case 1:\n-        return !!(formData.basicInfo.name && formData.basicInfo.phone);\n-      case 2:\n-        return !!(formData.joinInfo.coach && formData.joinInfo.joinPath);\n-      case 3:\n-        return true; // 결제정보는 선택사항\n-      case 4:\n-        const requiredAgreements = formData.agreementInfo.agreements.filter(a => a.required);\n-        const allRequiredAgreed = requiredAgreements.every(a => a.agreed);\n-        const hasCustomerSignature = !!formData.agreementInfo.customerSignature;\n-        const hasStaffSignature = !!formData.agreementInfo.staffSignature;\n-        \n-        console.log('=== 4단계 검증 ===');\n-        console.log('필수 약관 수:', requiredAgreements.length);\n-        console.log('필수 약관 모두 동의:', allRequiredAgreed);\n-        console.log('고객 서명 존재:', hasCustomerSignature);\n-        console.log('직원 서명 존재:', hasStaffSignature);\n-        console.log('전체 검증 결과:', allRequiredAgreed && hasCustomerSignature && hasStaffSignature);\n-        \n-        return allRequiredAgreed && hasCustomerSignature && hasStaffSignature;\n-      default:\n-        return true;\n-    }\n-  };\n-\n-  const handleNext = () => {\n-    if (validateCurrentStep() && currentStep < 4) {\n-      setCurrentStep(currentStep + 1);\n-    }\n-  };\n-\n-  const handleValidateAndNext = async () => {\n-    if (!validateCurrentStep()) {\n-      return;\n-    }\n-\n-    try {\n-      setIsValidating(true);\n-\n-      // 1단계(기본정보)에서는 연락처와 이메일 중복 체크 수행\n-      if (currentStep === 1) {\n-        const { phone, email } = formData.basicInfo;\n-        \n-        // 연락처는 필수이므로 항상 체크\n-        if (!phone) {\n-          toast.error('연락처를 입력해주세요.');\n-          return;\n-        }\n-\n-        // 중복 체크 수행\n-        const duplicateCheck = await dbManager.checkMemberDuplicate(phone, email);\n-        \n-        if (duplicateCheck.isDuplicate) {\n-          toast.error(duplicateCheck.message || '중복된 정보가 있습니다.');\n-          return;\n-        }\n-      }\n-      \n-      // 2단계(가입정보)에서는 로그인 ID 중복 체크 수행 (로그인 기능 사용 시에만)\n-      else if (currentStep === 2) {\n-        const { enableLogin, loginId } = formData.joinInfo;\n-        \n-        if (enableLogin && loginId) {\n-          // 로그인 ID 중복 체크 수행\n-          const duplicateCheck = await dbManager.checkLoginIdDuplicate(loginId);\n-          \n-          if (duplicateCheck.isDuplicate) {\n-            toast.error(duplicateCheck.message || '이미 사용 중인 로그인 ID입니다.');\n-            return;\n-          }\n-        }\n-      }\n-\n-      // 중복이 없으면 다음 단계로\n-      setCurrentStep(currentStep + 1);\n-    } catch (error) {\n-      console.error('중복 체크 실패:', error);\n-      toast.error('중복 체크 중 오류가 발생했습니다. 다시 시도해주세요.');\n-    } finally {\n-      setIsValidating(false);\n-    }\n-  };\n-\n-  const handlePrev = () => {\n-    if (currentStep > 1) {\n-      setCurrentStep(currentStep - 1);\n-    }\n-  };\n-\n-  const handleSkipPayment = () => {\n-    setCurrentStep(4);\n-  };\n-\n-  const handleSubmit = async () => {\n-    try {\n-      console.log('=== 회원 등록 시작 ===');\n-      console.log('폼 데이터:', formData);\n-      \n-      // 0. IndexedDB 연결 상태 확인\n-      console.log('IndexedDB 상태 확인 중...');\n-      try {\n-        // 데이터베이스 테이블 존재 여부 확인\n-        console.log('데이터베이스 객체:', dbManager);\n-        \n-        const testBranches = await dbManager.getAllBranches();\n-        console.log('IndexedDB 연결 성공, 지점 수:', testBranches.length);\n-        \n-        // members 테이블 접근 테스트\n-        console.log('회원 테이블 접근 테스트 중...');\n-        const existingMembers = await dbManager.getAllMembers();\n-        console.log('기존 회원 수:', existingMembers.length);\n-        console.log('기존 회원 목록:', existingMembers);\n-        \n-      } catch (dbError) {\n-        console.error('IndexedDB 연결 실패:', dbError);\n-        throw new Error('데이터베이스 연결에 실패했습니다.');\n-      }\n-      \n-      // 1. 지점명과 코치명 가져오기\n-      console.log('=== 1단계: 지점과 직원 정보 조회 ===');\n-      const branches = await dbManager.getAllBranches();\n-      const staff = await dbManager.getAllStaff();\n-      console.log('전체 지점 수:', branches.length);\n-      console.log('전체 직원 수:', staff.length);\n-      \n-      const branch = branches.find(b => b.id === formData.joinInfo.branchId);\n-      const coach = staff.find(s => s.id === formData.joinInfo.coach);\n-      \n-      console.log('선택된 지점 ID:', formData.joinInfo.branchId);\n-      console.log('찾은 지점 정보:', branch);\n-      console.log('선택된 코치 ID:', formData.joinInfo.coach);\n-      console.log('찾은 코치 정보:', coach);\n-      \n-      // 2. 회원 정보 저장 (기본정보 + 가입정보)\n-      console.log('=== 2단계: 회원 정보 저장 ===');\n-      const memberData = {\n-        name: formData.basicInfo.name,\n-        phone: formData.basicInfo.phone,\n-        email: formData.basicInfo.email,\n-        birth: formData.basicInfo.birth,\n-        gender: formData.basicInfo.gender as 'male' | 'female' | '',\n-        address: formData.basicInfo.addressInfo.address,\n-        sigunguCode: formData.basicInfo.addressInfo.sigunguCode,\n-        dong: formData.basicInfo.addressInfo.dong,\n-        roadAddress: formData.basicInfo.addressInfo.roadAddress,\n-        jibunAddress: formData.basicInfo.addressInfo.jibunAddress,\n-        branchId: formData.joinInfo.branchId,\n-        branchName: branch?.name || '',\n-        coach: formData.joinInfo.coach,\n-        coachName: coach?.name || '',\n-        joinPath: formData.joinInfo.joinPath,\n-        loginId: formData.joinInfo.loginId,\n-        loginPassword: formData.joinInfo.loginPassword,\n-        enableLogin: formData.joinInfo.enableLogin,\n-        agreementInfo: formData.agreementInfo,\n-        isActive: true,\n-        registrationDate: new Date().toISOString(),\n-        // 기본값으로 빈 값 설정 - 추후 필요시 업데이트\n-        agreementDate: '',\n-        signatureData: '',\n-        membershipType: '',\n-        duration: 0,\n-        durationUnit: '',\n-        startDate: '',\n-        endDate: '',\n-        monthlyFee: 0,\n-        totalAmount: 0,\n-        discountAmount: 0,\n-        finalAmount: 0,\n-        paymentMethod: '',\n-        paymentDate: '',\n-        remarks: ''\n-      };\n-      \n-      console.log('저장할 회원 데이터:', memberData);\n-      console.log('데이터 타입 검증:');\n-      console.log('- name 타입:', typeof memberData.name, '값:', memberData.name);\n-      console.log('- phone 타입:', typeof memberData.phone, '값:', memberData.phone);\n-      console.log('- email 타입:', typeof memberData.email, '값:', memberData.email);\n-      \n-      console.log('dbManager.addMember 함수 호출 전...');\n-      let memberId: string;\n-      try {\n-        memberId = await dbManager.addMember(memberData);\n-        console.log('dbManager.addMember 함수 호출 후 - 반환값:', memberId);\n-        console.log('반환값 타입:', typeof memberId);\n-      } catch (addMemberError) {\n-        console.error('❌ addMember 함수에서 에러 발생:', addMemberError);\n-        console.error('에러 타입:', typeof addMemberError);\n-        console.error('에러 메시지:', addMemberError instanceof Error ? addMemberError.message : addMemberError);\n-        console.error('에러 스택:', addMemberError instanceof Error ? addMemberError.stack : '스택 없음');\n-        throw new Error(`회원 저장 중 오류: ${addMemberError instanceof Error ? addMemberError.message : '알 수 없는 오류'}`);\n-      }\n-      \n-      if (!memberId) {\n-        throw new Error('회원 저장에 실패했습니다 - 반환값 없음');\n-      }\n-      \n-      // 즉시 저장 확인\n-      console.log('=== 저장 확인 테스트 ===');\n-      try {\n-        const allMembers = await dbManager.getAllMembers();\n-        console.log('저장 후 전체 회원 수:', allMembers.length);\n-        console.log('저장된 모든 회원:', allMembers);\n-        \n-        const foundMember = allMembers.find(m => m.id === memberId);\n-        if (foundMember) {\n-          console.log('✅ 방금 저장한 회원을 데이터베이스에서 찾았습니다:', foundMember);\n-        } else {\n-          console.error('❌ 방금 저장한 회원을 데이터베이스에서 찾을 수 없습니다');\n-        }\n-      } catch (verifyError) {\n-        console.error('저장 확인 중 오류:', verifyError);\n-      }\n-      \n-      // 3. 결제 정보 저장 (상품이 선택된 경우에만)\n-      if (formData.paymentInfo.selectedProducts.length > 0) {\n-        console.log('결제 정보 저장 중...');\n-        const totalAmount = formData.paymentInfo.selectedProducts.reduce(\n-          (sum, product) => sum + product.price, 0\n-        );\n-        \n-        const paymentId = await dbManager.addPayment({\n-          memberId: memberId,\n-          memberName: formData.basicInfo.name,\n-          products: formData.paymentInfo.selectedProducts,\n-          totalAmount: totalAmount,\n-          paymentStatus: 'completed', // 회원 등록 시 결제 완료로 처리\n-          paymentMethod: '현장결제', // 기본값으로 현장결제 설정\n-          paymentDate: new Date(), // 현재 날짜로 설정\n-          notes: '회원 등록 시 선택된 상품',\n-        });\n-        console.log('결제 정보 저장 완료 - ID:', paymentId);\n-      }\n-      \n-      // 4. 회원 등록 문서를 HTML 파일로 저장\n-      console.log('문서 생성 중...');\n-      const fileName = await saveDocumentAsFile(formData);\n-      console.log('문서 저장 완료:', fileName);\n-      \n-      toast.success(`회원이 성공적으로 등록되었습니다!\\n회원 ID: ${memberId}\\n등록 문서: ${fileName}`, {\n-        autoClose: 5000\n-      });\n-      \n-      // 등록 완료 후 초기화\n-      setCurrentStep(1);\n-      setFormData({\n-        basicInfo: {\n-          name: '',\n-          phone: '',\n-          email: '',\n-          birth: '',\n-          gender: '',\n-          addressInfo: {\n-            address: '',\n-            sigunguCode: '',\n-            dong: '',\n-            roadAddress: '',\n-            jibunAddress: '',\n-          },\n-        },\n-        joinInfo: {\n-          branchId: '',\n-          coach: '',\n-          joinPath: '',\n-          loginId: '',\n-          loginPassword: '',\n-          enableLogin: false,\n-        },\n-        paymentInfo: {\n-          selectedProducts: [],\n-        },\n-        agreementInfo: {\n-          agreements: [\n-            {\n-              id: 'terms',\n-              title: '회원이용약관',\n-              content: '회원이용약관 내용입니다...',\n-              required: true,\n-              agreed: false,\n-            },\n-            {\n-              id: 'privacy',\n-              title: '개인정보처리방침',\n-              content: '개인정보처리방침 내용입니다...',\n-              required: true,\n-              agreed: false,\n-            },\n-            {\n-              id: 'service',\n-              title: '서비스이용약관',\n-              content: '서비스이용약관 내용입니다...',\n-              required: true,\n-              agreed: false,\n-            },\n-            {\n-              id: 'marketing',\n-              title: '마케팅활용 동의',\n-              content: '마케팅활용 동의 내용입니다...',\n-              required: false,\n-              agreed: false,\n-            },\n-          ],\n-          customerSignature: '',\n-          staffSignature: '',\n-        },\n-      });\n-    } catch (error) {\n-      console.error('회원 등록 처리 중 오류:', error);\n-      toast.error(`회원 등록 중 오류가 발생했습니다: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);\n-    }\n-  };\n-\n-  const renderStepContent = () => {\n-    const stepProps = {\n-      formData,\n-      onUpdate: handleFormUpdate,\n-      onNext: handleNext,\n-      onPrev: handlePrev,\n-      isValid: validateCurrentStep(),\n-      onValidateAndNext: handleValidateAndNext,\n-    };\n-\n-    switch (currentStep) {\n-      case 1:\n-        return <BasicInfoStep {...stepProps} />;\n-      case 2:\n-        return <JoinInfoStep {...stepProps} />;\n-      case 3:\n-        return <PaymentInfoStep {...stepProps} />;\n-      case 4:\n-        return <AgreementStep {...stepProps} />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  return (\n-    <PageContainer>\n-      <PageHeader>\n-        <PageTitle>신규 회원 등록</PageTitle>\n-        <PageDescription>새로운 회원의 정보를 단계별로 입력하여 등록합니다.</PageDescription>\n-      </PageHeader>\n-\n-      <StepContainer>\n-        <StepWrapper>\n-          {steps.map((step, index) => (\n-            <StepItem\n-              key={step.number}\n-              $active={currentStep === step.number}\n-              $completed={currentStep > step.number}\n-            >\n-              <StepCircle\n-                $active={currentStep === step.number}\n-                $completed={currentStep > step.number}\n-              >\n-                {currentStep > step.number ? '✓' : step.number}\n-              </StepCircle>\n-              <StepLabel\n-                $active={currentStep === step.number}\n-                $completed={currentStep > step.number}\n-              >\n-                {step.label}\n-              </StepLabel>\n-              {index < steps.length - 1 && (\n-                <StepLine $completed={currentStep > step.number} />\n-              )}\n-            </StepItem>\n-          ))}\n-        </StepWrapper>\n-      </StepContainer>\n-\n-      <Card>\n-        {renderStepContent()}\n-\n-        <ButtonGroup>\n-          <div>\n-            {currentStep > 1 && (\n-              <Button variant=\"secondary\" onClick={handlePrev}>\n-                이전\n-              </Button>\n-            )}\n-          </div>\n-\n-          <div style={{ display: 'flex', gap: '12px' }}>\n-            {currentStep === 3 && (\n-              <Button variant=\"outline\" onClick={handleSkipPayment}>\n-                건너뛰기\n-              </Button>\n-            )}\n-            \n-            {currentStep < 4 ? (\n-              <Button \n-                onClick={(currentStep === 1 || currentStep === 2) ? handleValidateAndNext : handleNext} \n-                disabled={!validateCurrentStep() || ((currentStep === 1 || currentStep === 2) && isValidating)}\n-              >\n-                {((currentStep === 1 || currentStep === 2) && isValidating) ? '중복 확인 중...' : '다음'}\n-              </Button>\n-            ) : (\n-              <Button \n-                onClick={handleSubmit}\n-                disabled={!validateCurrentStep()}\n-              >\n-                회원등록 완료\n-              </Button>\n-            )}\n-          </div>\n-        </ButtonGroup>\n-      </Card>\n-    </PageContainer>\n-  );\n-};\n-\n-export default MemberRegister;\n"
                },
                {
                    "date": 1760257390387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n \n const MemberRegister: React.FC = () => {\n   const [currentStep, setCurrentStep] = useState(1);\n   const [isValidating, setIsValidating] = useState(false);\n+  const [stepErrors, setStepErrors] = useState<{ [stepNumber: number]: { [key: string]: string } }>({});\n   const [formData, setFormData] = useState<MemberFormData>({\n     basicInfo: {\n       name: '',\n       phone: '',\n@@ -100,19 +101,22 @@\n     setFormData(prev => ({ ...prev, ...updatedData }));\n   };\n \n   const validateCurrentStep = (): boolean => {\n+    const currentStepErrors = stepErrors[currentStep] || {};\n+    const hasErrors = Object.keys(currentStepErrors).length > 0;\n+    \n     switch (currentStep) {\n       case 1:\n         return !!(\n           formData.basicInfo.name && \n           formData.basicInfo.phone && \n           formData.basicInfo.birth && \n           formData.basicInfo.gender && \n           formData.basicInfo.addressInfo.address\n-        );\n+        ) && !hasErrors;\n       case 2:\n-        return !!(formData.joinInfo.coach && formData.joinInfo.joinPath);\n+        return !!(formData.joinInfo.coach && formData.joinInfo.joinPath) && !hasErrors;\n       case 3:\n         return true; // 결제정보는 선택사항\n       case 4:\n         const requiredAgreements = formData.agreementInfo.agreements.filter(a => a.required);\n@@ -431,15 +435,23 @@\n     }\n   };\n \n   const renderStepContent = () => {\n+    const handleErrorsChange = (errors: { [key: string]: string }) => {\n+      setStepErrors(prev => ({\n+        ...prev,\n+        [currentStep]: errors\n+      }));\n+    };\n+\n     const stepProps = {\n       formData,\n       onUpdate: handleFormUpdate,\n       onNext: handleNext,\n       onPrev: handlePrev,\n       isValid: validateCurrentStep(),\n       onValidateAndNext: handleValidateAndNext,\n+      onErrorsChange: handleErrorsChange,\n     };\n \n     switch (currentStep) {\n       case 1:\n"
                },
                {
                    "date": 1760257531168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,11 +329,8 @@\n       \n       // 3. 결제 정보 저장 (상품이 선택된 경우에만)\n       if (formData.paymentInfo.selectedProducts.length > 0) {\n         console.log('결제 정보 저장 중...');\n-        const totalAmount = formData.paymentInfo.selectedProducts.reduce(\n-          (sum, product) => sum + product.price, 0\n-        );\n         \n         // 결제 방법 매핑\n         const paymentMethodMap: { [key: string]: string } = {\n           'card': '카드',\n@@ -342,19 +339,25 @@\n         };\n         \n         const paymentMethodName = paymentMethodMap[formData.paymentInfo.paymentMethod] || '카드';\n         \n-        const paymentId = await dbManager.addPayment({\n-          memberId: memberId,\n-          memberName: formData.basicInfo.name,\n-          products: formData.paymentInfo.selectedProducts,\n-          totalAmount: totalAmount,\n-          paymentStatus: 'completed', // 회원 등록 시 결제 완료로 처리\n-          paymentMethod: paymentMethodName,\n-          paymentDate: new Date(), // 현재 날짜로 설정\n-          notes: '회원 등록 시 선택된 상품',\n-        });\n-        console.log('결제 정보 저장 완료 - ID:', paymentId);\n+        // 상품별로 개별 결제 레코드 생성\n+        const paymentIds: string[] = [];\n+        for (const product of formData.paymentInfo.selectedProducts) {\n+          const paymentId = await dbManager.addPayment({\n+            memberId: memberId,\n+            memberName: formData.basicInfo.name,\n+            products: [product], // 상품을 개별로 저장\n+            totalAmount: product.price, // 개별 상품 가격\n+            paymentStatus: 'completed', // 회원 등록 시 결제 완료로 처리\n+            paymentMethod: paymentMethodName,\n+            paymentDate: new Date(), // 현재 날짜로 설정\n+            notes: '회원 등록 시 선택된 상품',\n+          });\n+          paymentIds.push(paymentId);\n+          console.log(`상품 \"${product.name}\" 결제 정보 저장 완료 - ID: ${paymentId}`);\n+        }\n+        console.log('모든 결제 정보 저장 완료 - 총 건수:', paymentIds.length);\n       }\n       \n       // 4. 회원 등록 문서를 HTML 파일로 저장\n       console.log('문서 생성 중...');\n"
                },
                {
                    "date": 1760257923508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,10 +262,10 @@\n         branchName: branch?.name || '',\n         coach: formData.joinInfo.coach,\n         coachName: coach?.name || '',\n         joinPath: formData.joinInfo.joinPath,\n-        loginId: formData.joinInfo.loginId,\n-        loginPassword: formData.joinInfo.loginPassword,\n+        loginId: formData.joinInfo.loginId || `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`, // 공란일 때는 임시 고유값 생성\n+        loginPassword: formData.joinInfo.loginPassword || null, // 공란일 때는 null로 저장\n         enableLogin: formData.joinInfo.enableLogin,\n         agreementInfo: formData.agreementInfo,\n         isActive: true,\n         registrationDate: new Date().toISOString(),\n"
                },
                {
                    "date": 1760757228185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n     },\n     paymentInfo: {\n       selectedProducts: [],\n       paymentMethod: 'card',\n+      receivedAmount: undefined,\n     },\n     agreementInfo: {\n       agreements: [\n         {\n@@ -338,35 +339,84 @@\n           'transfer': '계좌이체'\n         };\n         \n         const paymentMethodName = paymentMethodMap[formData.paymentInfo.paymentMethod] || '카드';\n+        const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n+        const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n         \n-        // 상품별로 개별 결제 레코드 생성\n-        const paymentIds: string[] = [];\n-        for (const product of formData.paymentInfo.selectedProducts) {\n-          const paymentId = await dbManager.addPayment({\n-            memberId: memberId,\n-            memberName: formData.basicInfo.name,\n-            products: [product], // 상품을 개별로 저장\n-            totalAmount: product.price, // 개별 상품 가격\n-            paymentStatus: 'completed', // 회원 등록 시 결제 완료로 처리\n-            paymentMethod: paymentMethodName,\n-            paymentDate: new Date(), // 현재 날짜로 설정\n-            notes: '회원 등록 시 선택된 상품',\n-          });\n-          paymentIds.push(paymentId);\n-          console.log(`상품 \"${product.name}\" 결제 정보 저장 완료 - ID: ${paymentId}`);\n+        console.log(`총 결제금액: ${totalAmount.toLocaleString()}원, 받은금액: ${receivedAmount.toLocaleString()}원`);\n+        \n+        // 전체 상품에 대한 하나의 결제 레코드 생성\n+        const paymentStatus = receivedAmount < totalAmount ? 'unpaid' : 'completed';\n+        \n+        const paymentId = await dbManager.addPayment({\n+          memberId: memberId,\n+          memberName: formData.basicInfo.name,\n+          products: formData.paymentInfo.selectedProducts,\n+          totalAmount: totalAmount,\n+          receivedAmount: receivedAmount,\n+          paymentStatus: paymentStatus,\n+          paymentMethod: paymentMethodName,\n+          paymentDate: new Date(),\n+          notes: paymentStatus === 'unpaid' \n+            ? `회원 등록 - 미수금 ${(totalAmount - receivedAmount).toLocaleString()}원` \n+            : '회원 등록 시 결제 완료',\n+        });\n+        \n+        console.log(`결제 정보 저장 완료 - ID: ${paymentId}, 상태: ${paymentStatus}`);\n+        \n+        // 4. 초과금 처리 (포인트 적립)\n+        if (receivedAmount > totalAmount) {\n+          const overageAmount = receivedAmount - totalAmount;\n+          console.log(`초과금 ${overageAmount.toLocaleString()}원을 포인트로 적립 중...`);\n+          \n+          try {\n+            // 포인트 만료일을 1년 후로 설정\n+            const expiryDate = new Date();\n+            expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n+            \n+            const pointId = await dbManager.addPoint({\n+              memberId: memberId,\n+              memberName: formData.basicInfo.name,\n+              amount: overageAmount,\n+              type: 'earned',\n+              source: '회원등록 초과금',\n+              description: `회원 등록 시 초과 입금액 ${overageAmount.toLocaleString()}원`,\n+              expiryDate: expiryDate,\n+              relatedPaymentId: paymentId\n+            });\n+            \n+            console.log(`포인트 적립 완료 - ID: ${pointId}, 금액: ${overageAmount.toLocaleString()}원`);\n+          } catch (pointError) {\n+            console.error('포인트 적립 실패:', pointError);\n+            // 포인트 적립 실패해도 회원 등록은 계속 진행\n+          }\n         }\n-        console.log('모든 결제 정보 저장 완료 - 총 건수:', paymentIds.length);\n       }\n       \n       // 4. 회원 등록 문서를 HTML 파일로 저장\n       console.log('문서 생성 중...');\n       const fileName = await saveDocumentAsFile(formData);\n       console.log('문서 저장 완료:', fileName);\n       \n-      toast.success(`회원이 성공적으로 등록되었습니다!\\n회원 ID: ${memberId}\\n등록 문서: ${fileName}`, {\n-        autoClose: 5000\n+      // 결과 메시지 생성\n+      let successMessage = `회원이 성공적으로 등록되었습니다!\\n회원 ID: ${memberId}\\n등록 문서: ${fileName}`;\n+      \n+      if (formData.paymentInfo.selectedProducts.length > 0) {\n+        const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n+        const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n+        \n+        if (receivedAmount > totalAmount) {\n+          const overageAmount = receivedAmount - totalAmount;\n+          successMessage += `\\n\\n💰 초과금 ${overageAmount.toLocaleString()}원이 포인트로 적립되었습니다.`;\n+        } else if (receivedAmount < totalAmount) {\n+          const unpaidAmount = totalAmount - receivedAmount;\n+          successMessage += `\\n\\n⚠️ 미수금 ${unpaidAmount.toLocaleString()}원이 있습니다.`;\n+        }\n+      }\n+      \n+      toast.success(successMessage, {\n+        autoClose: 7000\n       });\n       \n       // 등록 완료 후 초기화\n       setCurrentStep(1);\n@@ -395,8 +445,9 @@\n         },\n         paymentInfo: {\n           selectedProducts: [],\n           paymentMethod: 'card',\n+          receivedAmount: undefined,\n         },\n         agreementInfo: {\n           agreements: [\n             {\n"
                },
                {
                    "date": 1760757771091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,9 +245,9 @@\n       console.log('찾은 지점 정보:', branch);\n       console.log('선택된 코치 ID:', formData.joinInfo.coach);\n       console.log('찾은 코치 정보:', coach);\n       \n-      // 2. 회원 정보 저장 (기본정보 + 가입정보)\n+      // 2. 회원 정보 저장 (기본정보 + 가입정보만)\n       console.log('=== 2단계: 회원 정보 저장 ===');\n       const memberData = {\n         name: formData.basicInfo.name,\n         phone: formData.basicInfo.phone,\n@@ -269,23 +269,9 @@\n         enableLogin: formData.joinInfo.enableLogin,\n         agreementInfo: formData.agreementInfo,\n         isActive: true,\n         registrationDate: new Date().toISOString(),\n-        // 기본값으로 빈 값 설정 - 추후 필요시 업데이트\n-        agreementDate: '',\n-        signatureData: '',\n-        membershipType: '',\n-        duration: 0,\n-        durationUnit: '',\n-        startDate: '',\n-        endDate: '',\n-        monthlyFee: 0,\n-        totalAmount: 0,\n-        discountAmount: 0,\n-        finalAmount: 0,\n-        paymentMethod: '',\n-        paymentDate: '',\n-        remarks: ''\n+        remarks: '' // 비고는 빈 문자열로 초기화\n       };\n       \n       console.log('저장할 회원 데이터:', memberData);\n       console.log('데이터 타입 검증:');\n@@ -327,11 +313,13 @@\n       } catch (verifyError) {\n         console.error('저장 확인 중 오류:', verifyError);\n       }\n       \n-      // 3. 결제 정보 저장 (상품이 선택된 경우에만)\n+      // 3. 결제 정보 및 수강 정보 저장 (상품이 선택된 경우에만)\n+      let paymentId: string | null = null;\n+      \n       if (formData.paymentInfo.selectedProducts.length > 0) {\n-        console.log('결제 정보 저장 중...');\n+        console.log('=== 3단계: 결제 정보 및 수강 정보 저장 ===');\n         \n         // 결제 방법 매핑\n         const paymentMethodMap: { [key: string]: string } = {\n           'card': '카드',\n@@ -344,12 +332,12 @@\n         const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n         \n         console.log(`총 결제금액: ${totalAmount.toLocaleString()}원, 받은금액: ${receivedAmount.toLocaleString()}원`);\n         \n-        // 전체 상품에 대한 하나의 결제 레코드 생성\n+        // 3-1. 받은 금액 기준으로 결제 정보 저장 (상품별로 나누지 않음)\n         const paymentStatus = receivedAmount < totalAmount ? 'unpaid' : 'completed';\n         \n-        const paymentId = await dbManager.addPayment({\n+        paymentId = await dbManager.addPayment({\n           memberId: memberId,\n           memberName: formData.basicInfo.name,\n           products: formData.paymentInfo.selectedProducts,\n           totalAmount: totalAmount,\n@@ -362,10 +350,56 @@\n             : '회원 등록 시 결제 완료',\n         });\n         \n         console.log(`결제 정보 저장 완료 - ID: ${paymentId}, 상태: ${paymentStatus}`);\n+\n+        // 3-2. 각 상품별로 수강 정보 저장\n+        console.log('수강 정보 저장 중...');\n+        const courseEnrollments = [];\n         \n-        // 4. 초과금 처리 (포인트 적립)\n+        for (const product of formData.paymentInfo.selectedProducts) {\n+          // 상품별로 비례 배분하여 지불/미납 금액 계산\n+          const productRatio = product.price / totalAmount;\n+          const productPaidAmount = Math.floor(receivedAmount * productRatio);\n+          const productUnpaidAmount = product.price - productPaidAmount;\n+          \n+          // 상품 정보 조회 (프로그램 정보 가져오기 위해)\n+          const productDetails = await dbManager.getProductById(product.id);\n+          \n+          const courseEnrollment = {\n+            memberId: memberId,\n+            memberName: formData.basicInfo.name,\n+            productId: product.id,\n+            productName: product.name,\n+            productPrice: product.price,\n+            programId: productDetails?.programId || '',\n+            programName: productDetails?.programName || '',\n+            programType: productDetails?.programType || '',\n+            branchId: formData.joinInfo.branchId,\n+            branchName: branch?.name || '',\n+            coach: formData.joinInfo.coach,\n+            coachName: coach?.name || '',\n+            enrollmentStatus: (productUnpaidAmount > 0 ? 'unpaid' : 'completed') as 'unpaid' | 'completed',\n+            paidAmount: productPaidAmount,\n+            unpaidAmount: productUnpaidAmount,\n+            startDate: null, // 수강 시작일은 추후 설정\n+            endDate: null, // 수강 종료일은 추후 설정 (기간제인 경우)\n+            sessionCount: productDetails?.sessions, // 횟수제인 경우 총 횟수\n+            completedSessions: 0, // 완료된 수업 횟수 초기값\n+            notes: productUnpaidAmount > 0 \n+              ? `회원 등록 - 미수금 ${productUnpaidAmount.toLocaleString()}원`\n+              : '회원 등록 시 결제 완료',\n+            relatedPaymentId: paymentId\n+          };\n+          \n+          courseEnrollments.push(courseEnrollment);\n+        }\n+        \n+        // 수강 정보 일괄 저장\n+        const courseEnrollmentIds = await dbManager.addMultipleCourseEnrollments(courseEnrollments);\n+        console.log(`수강 정보 저장 완료 - ${courseEnrollmentIds.length}건`);\n+\n+        // 3-3. 초과금 처리 (포인트 적립)\n         if (receivedAmount > totalAmount) {\n           const overageAmount = receivedAmount - totalAmount;\n           console.log(`초과금 ${overageAmount.toLocaleString()}원을 포인트로 적립 중...`);\n           \n@@ -393,9 +427,9 @@\n         }\n       }\n       \n       // 4. 회원 등록 문서를 HTML 파일로 저장\n-      console.log('문서 생성 중...');\n+      console.log('=== 4단계: 문서 생성 ===');\n       const fileName = await saveDocumentAsFile(formData);\n       console.log('문서 저장 완료:', fileName);\n       \n       // 결과 메시지 생성\n@@ -404,14 +438,19 @@\n       if (formData.paymentInfo.selectedProducts.length > 0) {\n         const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n         const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n         \n+        // 선택된 상품 개수 표시\n+        successMessage += `\\n\\n📚 수강 상품: ${formData.paymentInfo.selectedProducts.length}개`;\n+        \n         if (receivedAmount > totalAmount) {\n           const overageAmount = receivedAmount - totalAmount;\n-          successMessage += `\\n\\n💰 초과금 ${overageAmount.toLocaleString()}원이 포인트로 적립되었습니다.`;\n+          successMessage += `\\n💰 초과금 ${overageAmount.toLocaleString()}원이 포인트로 적립되었습니다.`;\n         } else if (receivedAmount < totalAmount) {\n           const unpaidAmount = totalAmount - receivedAmount;\n-          successMessage += `\\n\\n⚠️ 미수금 ${unpaidAmount.toLocaleString()}원이 있습니다.`;\n+          successMessage += `\\n⚠️ 미수금 ${unpaidAmount.toLocaleString()}원이 있습니다.`;\n+        } else {\n+          successMessage += `\\n✅ 모든 상품의 결제가 완료되었습니다.`;\n         }\n       }\n       \n       toast.success(successMessage, {\n"
                },
                {
                    "date": 1760762961876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,651 @@\n+import React, { useState } from 'react';\n+import { toast } from 'react-toastify';\n+import { \n+  PageContainer, \n+  PageHeader, \n+  PageTitle, \n+  PageDescription,\n+  StepContainer,\n+  StepWrapper,\n+  StepItem,\n+  StepCircle,\n+  StepLabel,\n+  StepLine,\n+  Card,\n+  ButtonGroup,\n+  Button\n+} from './StyledComponents';\n+import { MemberFormData } from './types';\n+import BasicInfoStep from './BasicInfoStep';\n+import JoinInfoStep from './JoinInfoStep';\n+import PaymentInfoStep from './PaymentInfoStep';\n+import AgreementStep from './AgreementStep';\n+import { saveDocumentAsFile } from './PreviewDocument';\n+import { dbManager } from '../../../utils/indexedDB';\n+\n+const MemberRegister: React.FC = () => {\n+  const [currentStep, setCurrentStep] = useState(1);\n+  const [isValidating, setIsValidating] = useState(false);\n+  const [stepErrors, setStepErrors] = useState<{ [stepNumber: number]: { [key: string]: string } }>({});\n+  const [formData, setFormData] = useState<MemberFormData>({\n+    basicInfo: {\n+      name: '',\n+      phone: '',\n+      email: '',\n+      birth: '',\n+      gender: '',\n+      addressInfo: {\n+        address: '',\n+        sigunguCode: '',\n+        dong: '',\n+        roadAddress: '',\n+        jibunAddress: '',\n+      },\n+    },\n+    joinInfo: {\n+      branchId: '',\n+      coach: '',\n+      joinPath: '',\n+      loginId: '',\n+      loginPassword: '',\n+      enableLogin: false,\n+    },\n+    paymentInfo: {\n+      selectedProducts: [],\n+      paymentMethod: 'card',\n+      receivedAmount: undefined,\n+    },\n+    agreementInfo: {\n+      agreements: [\n+        {\n+          id: 'terms',\n+          title: '회원이용약관',\n+          content: '회원이용약관 내용입니다...',\n+          required: true,\n+          agreed: false,\n+        },\n+        {\n+          id: 'privacy',\n+          title: '개인정보처리방침',\n+          content: '개인정보처리방침 내용입니다...',\n+          required: true,\n+          agreed: false,\n+        },\n+        {\n+          id: 'service',\n+          title: '서비스이용약관',\n+          content: '서비스이용약관 내용입니다...',\n+          required: true,\n+          agreed: false,\n+        },\n+        {\n+          id: 'marketing',\n+          title: '마케팅활용 동의',\n+          content: '마케팅활용 동의 내용입니다...',\n+          required: false,\n+          agreed: false,\n+        },\n+      ],\n+      customerSignature: '',\n+      staffSignature: '',\n+    },\n+  });\n+\n+  const steps = [\n+    { number: 1, label: '기본정보' },\n+    { number: 2, label: '가입정보' },\n+    { number: 3, label: '결제정보' },\n+    { number: 4, label: '동의서명' },\n+  ];\n+\n+  const handleFormUpdate = (updatedData: Partial<MemberFormData>) => {\n+    setFormData(prev => ({ ...prev, ...updatedData }));\n+  };\n+\n+  const validateCurrentStep = (): boolean => {\n+    const currentStepErrors = stepErrors[currentStep] || {};\n+    const hasErrors = Object.keys(currentStepErrors).length > 0;\n+    \n+    switch (currentStep) {\n+      case 1:\n+        return !!(\n+          formData.basicInfo.name && \n+          formData.basicInfo.phone && \n+          formData.basicInfo.birth && \n+          formData.basicInfo.gender && \n+          formData.basicInfo.addressInfo.address\n+        ) && !hasErrors;\n+      case 2:\n+        return !!(formData.joinInfo.coach && formData.joinInfo.joinPath) && !hasErrors;\n+      case 3:\n+        return true; // 결제정보는 선택사항\n+      case 4:\n+        const requiredAgreements = formData.agreementInfo.agreements.filter(a => a.required);\n+        const allRequiredAgreed = requiredAgreements.every(a => a.agreed);\n+        const hasCustomerSignature = !!formData.agreementInfo.customerSignature;\n+        const hasStaffSignature = !!formData.agreementInfo.staffSignature;\n+        \n+        console.log('=== 4단계 검증 ===');\n+        console.log('필수 약관 수:', requiredAgreements.length);\n+        console.log('필수 약관 모두 동의:', allRequiredAgreed);\n+        console.log('고객 서명 존재:', hasCustomerSignature);\n+        console.log('직원 서명 존재:', hasStaffSignature);\n+        console.log('전체 검증 결과:', allRequiredAgreed && hasCustomerSignature && hasStaffSignature);\n+        \n+        return allRequiredAgreed && hasCustomerSignature && hasStaffSignature;\n+      default:\n+        return true;\n+    }\n+  };\n+\n+  const handleNext = () => {\n+    if (validateCurrentStep() && currentStep < 4) {\n+      setCurrentStep(currentStep + 1);\n+    }\n+  };\n+\n+  const handleValidateAndNext = async () => {\n+    if (!validateCurrentStep()) {\n+      return;\n+    }\n+\n+    try {\n+      setIsValidating(true);\n+\n+      // 1단계(기본정보)에서는 연락처와 이메일 중복 체크 수행\n+      if (currentStep === 1) {\n+        const { phone, email } = formData.basicInfo;\n+        \n+        // 연락처는 필수이므로 항상 체크\n+        if (!phone) {\n+          toast.error('연락처를 입력해주세요.');\n+          return;\n+        }\n+\n+        // 중복 체크 수행\n+        const duplicateCheck = await dbManager.checkMemberDuplicate(phone, email);\n+        \n+        if (duplicateCheck.isDuplicate) {\n+          toast.error(duplicateCheck.message || '중복된 정보가 있습니다.');\n+          return;\n+        }\n+      }\n+      \n+      // 2단계(가입정보)에서는 로그인 ID 중복 체크 수행 (로그인 기능 사용 시에만)\n+      else if (currentStep === 2) {\n+        const { enableLogin, loginId } = formData.joinInfo;\n+        \n+        if (enableLogin && loginId) {\n+          // 로그인 ID 중복 체크 수행\n+          const duplicateCheck = await dbManager.checkLoginIdDuplicate(loginId);\n+          \n+          if (duplicateCheck.isDuplicate) {\n+            toast.error(duplicateCheck.message || '이미 사용 중인 로그인 ID입니다.');\n+            return;\n+          }\n+        }\n+      }\n+\n+      // 중복이 없으면 다음 단계로\n+      setCurrentStep(currentStep + 1);\n+    } catch (error) {\n+      console.error('중복 체크 실패:', error);\n+      toast.error('중복 체크 중 오류가 발생했습니다. 다시 시도해주세요.');\n+    } finally {\n+      setIsValidating(false);\n+    }\n+  };\n+\n+  const handlePrev = () => {\n+    if (currentStep > 1) {\n+      setCurrentStep(currentStep - 1);\n+    }\n+  };\n+\n+  const handleSkipPayment = () => {\n+    setCurrentStep(4);\n+  };\n+\n+  const handleSubmit = async () => {\n+    try {\n+      console.log('=== 회원 등록 시작 ===');\n+      console.log('폼 데이터:', formData);\n+      \n+      // 0. IndexedDB 연결 상태 확인\n+      console.log('IndexedDB 상태 확인 중...');\n+      try {\n+        // 데이터베이스 테이블 존재 여부 확인\n+        console.log('데이터베이스 객체:', dbManager);\n+        \n+        const testBranches = await dbManager.getAllBranches();\n+        console.log('IndexedDB 연결 성공, 지점 수:', testBranches.length);\n+        \n+        // members 테이블 접근 테스트\n+        console.log('회원 테이블 접근 테스트 중...');\n+        const existingMembers = await dbManager.getAllMembers();\n+        console.log('기존 회원 수:', existingMembers.length);\n+        console.log('기존 회원 목록:', existingMembers);\n+        \n+      } catch (dbError) {\n+        console.error('IndexedDB 연결 실패:', dbError);\n+        throw new Error('데이터베이스 연결에 실패했습니다.');\n+      }\n+      \n+      // 1. 지점명과 코치명 가져오기\n+      console.log('=== 1단계: 지점과 직원 정보 조회 ===');\n+      const branches = await dbManager.getAllBranches();\n+      const staff = await dbManager.getAllStaff();\n+      console.log('전체 지점 수:', branches.length);\n+      console.log('전체 직원 수:', staff.length);\n+      \n+      const branch = branches.find(b => b.id === formData.joinInfo.branchId);\n+      const coach = staff.find(s => s.id === formData.joinInfo.coach);\n+      \n+      console.log('선택된 지점 ID:', formData.joinInfo.branchId);\n+      console.log('찾은 지점 정보:', branch);\n+      console.log('선택된 코치 ID:', formData.joinInfo.coach);\n+      console.log('찾은 코치 정보:', coach);\n+      \n+      // 2. 회원 정보 저장 (기본정보 + 가입정보만)\n+      console.log('=== 2단계: 회원 정보 저장 ===');\n+      const memberData = {\n+        name: formData.basicInfo.name,\n+        phone: formData.basicInfo.phone,\n+        email: formData.basicInfo.email,\n+        birth: formData.basicInfo.birth,\n+        gender: formData.basicInfo.gender as 'male' | 'female' | '',\n+        address: formData.basicInfo.addressInfo.address,\n+        sigunguCode: formData.basicInfo.addressInfo.sigunguCode,\n+        dong: formData.basicInfo.addressInfo.dong,\n+        roadAddress: formData.basicInfo.addressInfo.roadAddress,\n+        jibunAddress: formData.basicInfo.addressInfo.jibunAddress,\n+        branchId: formData.joinInfo.branchId,\n+        branchName: branch?.name || '',\n+        coach: formData.joinInfo.coach,\n+        coachName: coach?.name || '',\n+        joinPath: formData.joinInfo.joinPath,\n+        loginId: formData.joinInfo.loginId || `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`, // 공란일 때는 임시 고유값 생성\n+        loginPassword: formData.joinInfo.loginPassword || null, // 공란일 때는 null로 저장\n+        enableLogin: formData.joinInfo.enableLogin,\n+        agreementInfo: formData.agreementInfo,\n+        isActive: true,\n+        registrationDate: new Date().toISOString(),\n+        remarks: '' // 비고는 빈 문자열로 초기화\n+      };\n+      \n+      console.log('저장할 회원 데이터:', memberData);\n+      console.log('데이터 타입 검증:');\n+      console.log('- name 타입:', typeof memberData.name, '값:', memberData.name);\n+      console.log('- phone 타입:', typeof memberData.phone, '값:', memberData.phone);\n+      console.log('- email 타입:', typeof memberData.email, '값:', memberData.email);\n+      \n+      console.log('dbManager.addMember 함수 호출 전...');\n+      let memberId: string;\n+      try {\n+        memberId = await dbManager.addMember(memberData);\n+        console.log('dbManager.addMember 함수 호출 후 - 반환값:', memberId);\n+        console.log('반환값 타입:', typeof memberId);\n+      } catch (addMemberError) {\n+        console.error('❌ addMember 함수에서 에러 발생:', addMemberError);\n+        console.error('에러 타입:', typeof addMemberError);\n+        console.error('에러 메시지:', addMemberError instanceof Error ? addMemberError.message : addMemberError);\n+        console.error('에러 스택:', addMemberError instanceof Error ? addMemberError.stack : '스택 없음');\n+        throw new Error(`회원 저장 중 오류: ${addMemberError instanceof Error ? addMemberError.message : '알 수 없는 오류'}`);\n+      }\n+      \n+      if (!memberId) {\n+        throw new Error('회원 저장에 실패했습니다 - 반환값 없음');\n+      }\n+      \n+      // 즉시 저장 확인\n+      console.log('=== 저장 확인 테스트 ===');\n+      try {\n+        const allMembers = await dbManager.getAllMembers();\n+        console.log('저장 후 전체 회원 수:', allMembers.length);\n+        console.log('저장된 모든 회원:', allMembers);\n+        \n+        const foundMember = allMembers.find(m => m.id === memberId);\n+        if (foundMember) {\n+          console.log('✅ 방금 저장한 회원을 데이터베이스에서 찾았습니다:', foundMember);\n+        } else {\n+          console.error('❌ 방금 저장한 회원을 데이터베이스에서 찾을 수 없습니다');\n+        }\n+      } catch (verifyError) {\n+        console.error('저장 확인 중 오류:', verifyError);\n+      }\n+      \n+      // 3. 결제 정보 및 수강 정보 저장 (상품이 선택된 경우에만)\n+      let paymentId: string | null = null;\n+      \n+      if (formData.paymentInfo.selectedProducts.length > 0) {\n+        console.log('=== 3단계: 결제 정보 및 수강 정보 저장 ===');\n+        \n+        // 결제 방법 매핑\n+        const paymentMethodMap: { [key: string]: string } = {\n+          'card': '카드',\n+          'cash': '현금',\n+          'transfer': '계좌이체'\n+        };\n+        \n+        const paymentMethodName = paymentMethodMap[formData.paymentInfo.paymentMethod] || '카드';\n+        const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n+        const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n+        \n+        console.log(`총 결제금액: ${totalAmount.toLocaleString()}원, 받은금액: ${receivedAmount.toLocaleString()}원`);\n+        \n+        // 3-1. 받은 금액 기준으로 결제 정보 저장 (상품별로 나누지 않음)\n+        const paymentStatus = receivedAmount < totalAmount ? 'unpaid' : 'completed';\n+        \n+        paymentId = await dbManager.addPayment({\n+          memberId: memberId,\n+          memberName: formData.basicInfo.name,\n+          branchId: formData.joinInfo.branchId,\n+          branchName: branch?.name || '',\n+          coach: formData.joinInfo.coach,\n+          coachName: coach?.name || '',\n+          products: formData.paymentInfo.selectedProducts.map(product => ({\n+            ...product,\n+            quantity: 1,\n+            // 프로그램 정보 추가 (향후 필요시)\n+          })),\n+          totalAmount: totalAmount,\n+          paidAmount: receivedAmount,\n+          unpaidAmount: totalAmount - receivedAmount,\n+          paymentStatus: paymentStatus,\n+          paymentMethod: paymentMethodName,\n+          paymentDate: new Date(),\n+          paymentType: 'course' as const, // 수강 결제\n+          relatedCourseId: null, // 개별 수강 등록 후 업데이트 예정\n+          relatedAssetId: null,\n+          memo: paymentStatus === 'unpaid' \n+            ? `회원 등록 - 미수금 ${(totalAmount - receivedAmount).toLocaleString()}원` \n+            : '회원 등록 시 결제 완료',\n+        });\n+        \n+        console.log(`결제 정보 저장 완료 - ID: ${paymentId}, 상태: ${paymentStatus}`);\n+\n+        // 3-2. 각 상품별로 수강 정보 저장\n+        console.log('수강 정보 저장 중...');\n+        const courseEnrollments = [];\n+        \n+        for (const product of formData.paymentInfo.selectedProducts) {\n+          // 상품별로 비례 배분하여 지불/미납 금액 계산\n+          const productRatio = product.price / totalAmount;\n+          const productPaidAmount = Math.floor(receivedAmount * productRatio);\n+          const productUnpaidAmount = product.price - productPaidAmount;\n+          \n+          // 상품 정보 조회 (프로그램 정보 가져오기 위해)\n+          const productDetails = await dbManager.getProductById(product.id);\n+          \n+          const courseEnrollment = {\n+            memberId: memberId,\n+            memberName: formData.basicInfo.name,\n+            productId: product.id,\n+            productName: product.name,\n+            productPrice: product.price,\n+            programId: productDetails?.programId || '',\n+            programName: productDetails?.programName || '',\n+            programType: productDetails?.programType || '',\n+            branchId: formData.joinInfo.branchId,\n+            branchName: branch?.name || '',\n+            coach: formData.joinInfo.coach,\n+            coachName: coach?.name || '',\n+            enrollmentStatus: (productUnpaidAmount > 0 ? 'unpaid' : 'completed') as 'unpaid' | 'completed',\n+            paidAmount: productPaidAmount,\n+            unpaidAmount: productUnpaidAmount,\n+            startDate: null, // 수강 시작일은 추후 설정\n+            endDate: null, // 수강 종료일은 추후 설정 (기간제인 경우)\n+            sessionCount: productDetails?.sessions, // 횟수제인 경우 총 횟수\n+            completedSessions: 0, // 완료된 수업 횟수 초기값\n+            notes: productUnpaidAmount > 0 \n+              ? `회원 등록 - 미수금 ${productUnpaidAmount.toLocaleString()}원`\n+              : '회원 등록 시 결제 완료',\n+            relatedPaymentId: paymentId\n+          };\n+          \n+          courseEnrollments.push(courseEnrollment);\n+        }\n+        \n+        // 수강 정보 일괄 저장\n+        const courseEnrollmentIds = await dbManager.addMultipleCourseEnrollments(courseEnrollments);\n+        console.log(`수강 정보 저장 완료 - ${courseEnrollmentIds.length}건`);\n+\n+        // 3-3. 초과금 처리 (포인트 적립)\n+        if (receivedAmount > totalAmount) {\n+          const overageAmount = receivedAmount - totalAmount;\n+          console.log(`초과금 ${overageAmount.toLocaleString()}원을 포인트로 적립 중...`);\n+          \n+          try {\n+            // 포인트 만료일을 1년 후로 설정\n+            const expiryDate = new Date();\n+            expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n+            \n+            const pointId = await dbManager.addPoint({\n+              memberId: memberId,\n+              memberName: formData.basicInfo.name,\n+              amount: overageAmount,\n+              type: 'earned',\n+              source: '회원등록 초과금',\n+              description: `회원 등록 시 초과 입금액 ${overageAmount.toLocaleString()}원`,\n+              expiryDate: expiryDate,\n+              relatedPaymentId: paymentId\n+            });\n+            \n+            console.log(`포인트 적립 완료 - ID: ${pointId}, 금액: ${overageAmount.toLocaleString()}원`);\n+          } catch (pointError) {\n+            console.error('포인트 적립 실패:', pointError);\n+            // 포인트 적립 실패해도 회원 등록은 계속 진행\n+          }\n+        }\n+      }\n+      \n+      // 4. 회원 등록 문서를 HTML 파일로 저장\n+      console.log('=== 4단계: 문서 생성 ===');\n+      const fileName = await saveDocumentAsFile(formData);\n+      console.log('문서 저장 완료:', fileName);\n+      \n+      // 결과 메시지 생성\n+      let successMessage = `회원이 성공적으로 등록되었습니다!\\n회원 ID: ${memberId}\\n등록 문서: ${fileName}`;\n+      \n+      if (formData.paymentInfo.selectedProducts.length > 0) {\n+        const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n+        const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n+        \n+        // 선택된 상품 개수 표시\n+        successMessage += `\\n\\n📚 수강 상품: ${formData.paymentInfo.selectedProducts.length}개`;\n+        \n+        if (receivedAmount > totalAmount) {\n+          const overageAmount = receivedAmount - totalAmount;\n+          successMessage += `\\n💰 초과금 ${overageAmount.toLocaleString()}원이 포인트로 적립되었습니다.`;\n+        } else if (receivedAmount < totalAmount) {\n+          const unpaidAmount = totalAmount - receivedAmount;\n+          successMessage += `\\n⚠️ 미수금 ${unpaidAmount.toLocaleString()}원이 있습니다.`;\n+        } else {\n+          successMessage += `\\n✅ 모든 상품의 결제가 완료되었습니다.`;\n+        }\n+      }\n+      \n+      toast.success(successMessage, {\n+        autoClose: 7000\n+      });\n+      \n+      // 등록 완료 후 초기화\n+      setCurrentStep(1);\n+      setFormData({\n+        basicInfo: {\n+          name: '',\n+          phone: '',\n+          email: '',\n+          birth: '',\n+          gender: '',\n+          addressInfo: {\n+            address: '',\n+            sigunguCode: '',\n+            dong: '',\n+            roadAddress: '',\n+            jibunAddress: '',\n+          },\n+        },\n+        joinInfo: {\n+          branchId: '',\n+          coach: '',\n+          joinPath: '',\n+          loginId: '',\n+          loginPassword: '',\n+          enableLogin: false,\n+        },\n+        paymentInfo: {\n+          selectedProducts: [],\n+          paymentMethod: 'card',\n+          receivedAmount: undefined,\n+        },\n+        agreementInfo: {\n+          agreements: [\n+            {\n+              id: 'terms',\n+              title: '회원이용약관',\n+              content: '회원이용약관 내용입니다...',\n+              required: true,\n+              agreed: false,\n+            },\n+            {\n+              id: 'privacy',\n+              title: '개인정보처리방침',\n+              content: '개인정보처리방침 내용입니다...',\n+              required: true,\n+              agreed: false,\n+            },\n+            {\n+              id: 'service',\n+              title: '서비스이용약관',\n+              content: '서비스이용약관 내용입니다...',\n+              required: true,\n+              agreed: false,\n+            },\n+            {\n+              id: 'marketing',\n+              title: '마케팅활용 동의',\n+              content: '마케팅활용 동의 내용입니다...',\n+              required: false,\n+              agreed: false,\n+            },\n+          ],\n+          customerSignature: '',\n+          staffSignature: '',\n+        },\n+      });\n+    } catch (error) {\n+      console.error('회원 등록 처리 중 오류:', error);\n+      toast.error(`회원 등록 중 오류가 발생했습니다: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);\n+    }\n+  };\n+\n+  const renderStepContent = () => {\n+    const handleErrorsChange = (errors: { [key: string]: string }) => {\n+      setStepErrors(prev => ({\n+        ...prev,\n+        [currentStep]: errors\n+      }));\n+    };\n+\n+    const stepProps = {\n+      formData,\n+      onUpdate: handleFormUpdate,\n+      onNext: handleNext,\n+      onPrev: handlePrev,\n+      isValid: validateCurrentStep(),\n+      onValidateAndNext: handleValidateAndNext,\n+      onErrorsChange: handleErrorsChange,\n+    };\n+\n+    switch (currentStep) {\n+      case 1:\n+        return <BasicInfoStep {...stepProps} />;\n+      case 2:\n+        return <JoinInfoStep {...stepProps} />;\n+      case 3:\n+        return <PaymentInfoStep {...stepProps} />;\n+      case 4:\n+        return <AgreementStep {...stepProps} />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  return (\n+    <PageContainer>\n+      <PageHeader>\n+        <PageTitle>신규 회원 등록</PageTitle>\n+        <PageDescription>새로운 회원의 정보를 단계별로 입력하여 등록합니다.</PageDescription>\n+      </PageHeader>\n+\n+      <StepContainer>\n+        <StepWrapper>\n+          {steps.map((step, index) => (\n+            <StepItem\n+              key={step.number}\n+              $active={currentStep === step.number}\n+              $completed={currentStep > step.number}\n+            >\n+              <StepCircle\n+                $active={currentStep === step.number}\n+                $completed={currentStep > step.number}\n+              >\n+                {currentStep > step.number ? '✓' : step.number}\n+              </StepCircle>\n+              <StepLabel\n+                $active={currentStep === step.number}\n+                $completed={currentStep > step.number}\n+              >\n+                {step.label}\n+              </StepLabel>\n+              {index < steps.length - 1 && (\n+                <StepLine $completed={currentStep > step.number} />\n+              )}\n+            </StepItem>\n+          ))}\n+        </StepWrapper>\n+      </StepContainer>\n+\n+      <Card>\n+        {renderStepContent()}\n+\n+        <ButtonGroup>\n+          <div>\n+            {currentStep > 1 && (\n+              <Button variant=\"secondary\" onClick={handlePrev}>\n+                이전\n+              </Button>\n+            )}\n+          </div>\n+\n+          <div style={{ display: 'flex', gap: '12px' }}>\n+            {currentStep === 3 && (\n+              <Button variant=\"outline\" onClick={handleSkipPayment}>\n+                건너뛰기\n+              </Button>\n+            )}\n+            \n+            {currentStep < 4 ? (\n+              <Button \n+                onClick={(currentStep === 1 || currentStep === 2) ? handleValidateAndNext : handleNext} \n+                disabled={!validateCurrentStep() || ((currentStep === 1 || currentStep === 2) && isValidating)}\n+              >\n+                {((currentStep === 1 || currentStep === 2) && isValidating) ? '중복 확인 중...' : '다음'}\n+              </Button>\n+            ) : (\n+              <Button \n+                onClick={handleSubmit}\n+                disabled={!validateCurrentStep()}\n+              >\n+                회원등록 완료\n+              </Button>\n+            )}\n+          </div>\n+        </ButtonGroup>\n+      </Card>\n+    </PageContainer>\n+  );\n+};\n+\n+export default MemberRegister;\n"
                },
                {
                    "date": 1760763299969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -332,40 +332,9 @@\n         const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n         \n         console.log(`총 결제금액: ${totalAmount.toLocaleString()}원, 받은금액: ${receivedAmount.toLocaleString()}원`);\n         \n-        // 3-1. 받은 금액 기준으로 결제 정보 저장 (상품별로 나누지 않음)\n-        const paymentStatus = receivedAmount < totalAmount ? 'unpaid' : 'completed';\n-        \n-        paymentId = await dbManager.addPayment({\n-          memberId: memberId,\n-          memberName: formData.basicInfo.name,\n-          branchId: formData.joinInfo.branchId,\n-          branchName: branch?.name || '',\n-          coach: formData.joinInfo.coach,\n-          coachName: coach?.name || '',\n-          products: formData.paymentInfo.selectedProducts.map(product => ({\n-            ...product,\n-            quantity: 1,\n-            // 프로그램 정보 추가 (향후 필요시)\n-          })),\n-          totalAmount: totalAmount,\n-          paidAmount: receivedAmount,\n-          unpaidAmount: totalAmount - receivedAmount,\n-          paymentStatus: paymentStatus,\n-          paymentMethod: paymentMethodName,\n-          paymentDate: new Date(),\n-          paymentType: 'course' as const, // 수강 결제\n-          relatedCourseId: null, // 개별 수강 등록 후 업데이트 예정\n-          relatedAssetId: null,\n-          memo: paymentStatus === 'unpaid' \n-            ? `회원 등록 - 미수금 ${(totalAmount - receivedAmount).toLocaleString()}원` \n-            : '회원 등록 시 결제 완료',\n-        });\n-        \n-        console.log(`결제 정보 저장 완료 - ID: ${paymentId}, 상태: ${paymentStatus}`);\n-\n-        // 3-2. 각 상품별로 수강 정보 저장\n+        // 3-1. 먼저 각 상품별로 수강 정보 저장\n         console.log('수강 정보 저장 중...');\n         const courseEnrollments = [];\n         \n         for (const product of formData.paymentInfo.selectedProducts) {\n@@ -398,10 +367,9 @@\n             sessionCount: productDetails?.sessions, // 횟수제인 경우 총 횟수\n             completedSessions: 0, // 완료된 수업 횟수 초기값\n             notes: productUnpaidAmount > 0 \n               ? `회원 등록 - 미수금 ${productUnpaidAmount.toLocaleString()}원`\n-              : '회원 등록 시 결제 완료',\n-            relatedPaymentId: paymentId\n+              : '회원 등록 시 결제 완료'\n           };\n           \n           courseEnrollments.push(courseEnrollment);\n         }\n@@ -409,647 +377,39 @@\n         // 수강 정보 일괄 저장\n         const courseEnrollmentIds = await dbManager.addMultipleCourseEnrollments(courseEnrollments);\n         console.log(`수강 정보 저장 완료 - ${courseEnrollmentIds.length}건`);\n \n-        // 3-3. 초과금 처리 (포인트 적립)\n-        if (receivedAmount > totalAmount) {\n-          const overageAmount = receivedAmount - totalAmount;\n-          console.log(`초과금 ${overageAmount.toLocaleString()}원을 포인트로 적립 중...`);\n-          \n-          try {\n-            // 포인트 만료일을 1년 후로 설정\n-            const expiryDate = new Date();\n-            expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n-            \n-            const pointId = await dbManager.addPoint({\n-              memberId: memberId,\n-              memberName: formData.basicInfo.name,\n-              amount: overageAmount,\n-              type: 'earned',\n-              source: '회원등록 초과금',\n-              description: `회원 등록 시 초과 입금액 ${overageAmount.toLocaleString()}원`,\n-              expiryDate: expiryDate,\n-              relatedPaymentId: paymentId\n-            });\n-            \n-            console.log(`포인트 적립 완료 - ID: ${pointId}, 금액: ${overageAmount.toLocaleString()}원`);\n-          } catch (pointError) {\n-            console.error('포인트 적립 실패:', pointError);\n-            // 포인트 적립 실패해도 회원 등록은 계속 진행\n-          }\n-        }\n-      }\n-      \n-      // 4. 회원 등록 문서를 HTML 파일로 저장\n-      console.log('=== 4단계: 문서 생성 ===');\n-      const fileName = await saveDocumentAsFile(formData);\n-      console.log('문서 저장 완료:', fileName);\n-      \n-      // 결과 메시지 생성\n-      let successMessage = `회원이 성공적으로 등록되었습니다!\\n회원 ID: ${memberId}\\n등록 문서: ${fileName}`;\n-      \n-      if (formData.paymentInfo.selectedProducts.length > 0) {\n-        const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n-        const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n-        \n-        // 선택된 상품 개수 표시\n-        successMessage += `\\n\\n📚 수강 상품: ${formData.paymentInfo.selectedProducts.length}개`;\n-        \n-        if (receivedAmount > totalAmount) {\n-          const overageAmount = receivedAmount - totalAmount;\n-          successMessage += `\\n💰 초과금 ${overageAmount.toLocaleString()}원이 포인트로 적립되었습니다.`;\n-        } else if (receivedAmount < totalAmount) {\n-          const unpaidAmount = totalAmount - receivedAmount;\n-          successMessage += `\\n⚠️ 미수금 ${unpaidAmount.toLocaleString()}원이 있습니다.`;\n-        } else {\n-          successMessage += `\\n✅ 모든 상품의 결제가 완료되었습니다.`;\n-        }\n-      }\n-      \n-      toast.success(successMessage, {\n-        autoClose: 7000\n-      });\n-      \n-      // 등록 완료 후 초기화\n-      setCurrentStep(1);\n-      setFormData({\n-        basicInfo: {\n-          name: '',\n-          phone: '',\n-          email: '',\n-          birth: '',\n-          gender: '',\n-          addressInfo: {\n-            address: '',\n-            sigunguCode: '',\n-            dong: '',\n-            roadAddress: '',\n-            jibunAddress: '',\n-          },\n-        },\n-        joinInfo: {\n-          branchId: '',\n-          coach: '',\n-          joinPath: '',\n-          loginId: '',\n-          loginPassword: '',\n-          enableLogin: false,\n-        },\n-        paymentInfo: {\n-          selectedProducts: [],\n-          paymentMethod: 'card',\n-          receivedAmount: undefined,\n-        },\n-        agreementInfo: {\n-          agreements: [\n-            {\n-              id: 'terms',\n-              title: '회원이용약관',\n-              content: '회원이용약관 내용입니다...',\n-              required: true,\n-              agreed: false,\n-            },\n-            {\n-              id: 'privacy',\n-              title: '개인정보처리방침',\n-              content: '개인정보처리방침 내용입니다...',\n-              required: true,\n-              agreed: false,\n-            },\n-            {\n-              id: 'service',\n-              title: '서비스이용약관',\n-              content: '서비스이용약관 내용입니다...',\n-              required: true,\n-              agreed: false,\n-            },\n-            {\n-              id: 'marketing',\n-              title: '마케팅활용 동의',\n-              content: '마케팅활용 동의 내용입니다...',\n-              required: false,\n-              agreed: false,\n-            },\n-          ],\n-          customerSignature: '',\n-          staffSignature: '',\n-        },\n-      });\n-    } catch (error) {\n-      console.error('회원 등록 처리 중 오류:', error);\n-      toast.error(`회원 등록 중 오류가 발생했습니다: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);\n-    }\n-  };\n-\n-  const renderStepContent = () => {\n-    const handleErrorsChange = (errors: { [key: string]: string }) => {\n-      setStepErrors(prev => ({\n-        ...prev,\n-        [currentStep]: errors\n-      }));\n-    };\n-\n-    const stepProps = {\n-      formData,\n-      onUpdate: handleFormUpdate,\n-      onNext: handleNext,\n-      onPrev: handlePrev,\n-      isValid: validateCurrentStep(),\n-      onValidateAndNext: handleValidateAndNext,\n-      onErrorsChange: handleErrorsChange,\n-    };\n-\n-    switch (currentStep) {\n-      case 1:\n-        return <BasicInfoStep {...stepProps} />;\n-      case 2:\n-        return <JoinInfoStep {...stepProps} />;\n-      case 3:\n-        return <PaymentInfoStep {...stepProps} />;\n-      case 4:\n-        return <AgreementStep {...stepProps} />;\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  return (\n-    <PageContainer>\n-      <PageHeader>\n-        <PageTitle>신규 회원 등록</PageTitle>\n-        <PageDescription>새로운 회원의 정보를 단계별로 입력하여 등록합니다.</PageDescription>\n-      </PageHeader>\n-\n-      <StepContainer>\n-        <StepWrapper>\n-          {steps.map((step, index) => (\n-            <StepItem\n-              key={step.number}\n-              $active={currentStep === step.number}\n-              $completed={currentStep > step.number}\n-            >\n-              <StepCircle\n-                $active={currentStep === step.number}\n-                $completed={currentStep > step.number}\n-              >\n-                {currentStep > step.number ? '✓' : step.number}\n-              </StepCircle>\n-              <StepLabel\n-                $active={currentStep === step.number}\n-                $completed={currentStep > step.number}\n-              >\n-                {step.label}\n-              </StepLabel>\n-              {index < steps.length - 1 && (\n-                <StepLine $completed={currentStep > step.number} />\n-              )}\n-            </StepItem>\n-          ))}\n-        </StepWrapper>\n-      </StepContainer>\n-\n-      <Card>\n-        {renderStepContent()}\n-\n-        <ButtonGroup>\n-          <div>\n-            {currentStep > 1 && (\n-              <Button variant=\"secondary\" onClick={handlePrev}>\n-                이전\n-              </Button>\n-            )}\n-          </div>\n-\n-          <div style={{ display: 'flex', gap: '12px' }}>\n-            {currentStep === 3 && (\n-              <Button variant=\"outline\" onClick={handleSkipPayment}>\n-                건너뛰기\n-              </Button>\n-            )}\n-            \n-            {currentStep < 4 ? (\n-              <Button \n-                onClick={(currentStep === 1 || currentStep === 2) ? handleValidateAndNext : handleNext} \n-                disabled={!validateCurrentStep() || ((currentStep === 1 || currentStep === 2) && isValidating)}\n-              >\n-                {((currentStep === 1 || currentStep === 2) && isValidating) ? '중복 확인 중...' : '다음'}\n-              </Button>\n-            ) : (\n-              <Button \n-                onClick={handleSubmit}\n-                disabled={!validateCurrentStep()}\n-              >\n-                회원등록 완료\n-              </Button>\n-            )}\n-          </div>\n-        </ButtonGroup>\n-      </Card>\n-    </PageContainer>\n-  );\n-};\n-\n-export default MemberRegister;\n-import React, { useState } from 'react';\n-import { toast } from 'react-toastify';\n-import { \n-  PageContainer, \n-  PageHeader, \n-  PageTitle, \n-  PageDescription,\n-  StepContainer,\n-  StepWrapper,\n-  StepItem,\n-  StepCircle,\n-  StepLabel,\n-  StepLine,\n-  Card,\n-  ButtonGroup,\n-  Button\n-} from './StyledComponents';\n-import { MemberFormData } from './types';\n-import BasicInfoStep from './BasicInfoStep';\n-import JoinInfoStep from './JoinInfoStep';\n-import PaymentInfoStep from './PaymentInfoStep';\n-import AgreementStep from './AgreementStep';\n-import { saveDocumentAsFile } from './PreviewDocument';\n-import { dbManager } from '../../../utils/indexedDB';\n-\n-const MemberRegister: React.FC = () => {\n-  const [currentStep, setCurrentStep] = useState(1);\n-  const [isValidating, setIsValidating] = useState(false);\n-  const [stepErrors, setStepErrors] = useState<{ [stepNumber: number]: { [key: string]: string } }>({});\n-  const [formData, setFormData] = useState<MemberFormData>({\n-    basicInfo: {\n-      name: '',\n-      phone: '',\n-      email: '',\n-      birth: '',\n-      gender: '',\n-      addressInfo: {\n-        address: '',\n-        sigunguCode: '',\n-        dong: '',\n-        roadAddress: '',\n-        jibunAddress: '',\n-      },\n-    },\n-    joinInfo: {\n-      branchId: '',\n-      coach: '',\n-      joinPath: '',\n-      loginId: '',\n-      loginPassword: '',\n-      enableLogin: false,\n-    },\n-    paymentInfo: {\n-      selectedProducts: [],\n-      paymentMethod: 'card',\n-      receivedAmount: undefined,\n-    },\n-    agreementInfo: {\n-      agreements: [\n-        {\n-          id: 'terms',\n-          title: '회원이용약관',\n-          content: '회원이용약관 내용입니다...',\n-          required: true,\n-          agreed: false,\n-        },\n-        {\n-          id: 'privacy',\n-          title: '개인정보처리방침',\n-          content: '개인정보처리방침 내용입니다...',\n-          required: true,\n-          agreed: false,\n-        },\n-        {\n-          id: 'service',\n-          title: '서비스이용약관',\n-          content: '서비스이용약관 내용입니다...',\n-          required: true,\n-          agreed: false,\n-        },\n-        {\n-          id: 'marketing',\n-          title: '마케팅활용 동의',\n-          content: '마케팅활용 동의 내용입니다...',\n-          required: false,\n-          agreed: false,\n-        },\n-      ],\n-      customerSignature: '',\n-      staffSignature: '',\n-    },\n-  });\n-\n-  const steps = [\n-    { number: 1, label: '기본정보' },\n-    { number: 2, label: '가입정보' },\n-    { number: 3, label: '결제정보' },\n-    { number: 4, label: '동의서명' },\n-  ];\n-\n-  const handleFormUpdate = (updatedData: Partial<MemberFormData>) => {\n-    setFormData(prev => ({ ...prev, ...updatedData }));\n-  };\n-\n-  const validateCurrentStep = (): boolean => {\n-    const currentStepErrors = stepErrors[currentStep] || {};\n-    const hasErrors = Object.keys(currentStepErrors).length > 0;\n-    \n-    switch (currentStep) {\n-      case 1:\n-        return !!(\n-          formData.basicInfo.name && \n-          formData.basicInfo.phone && \n-          formData.basicInfo.birth && \n-          formData.basicInfo.gender && \n-          formData.basicInfo.addressInfo.address\n-        ) && !hasErrors;\n-      case 2:\n-        return !!(formData.joinInfo.coach && formData.joinInfo.joinPath) && !hasErrors;\n-      case 3:\n-        return true; // 결제정보는 선택사항\n-      case 4:\n-        const requiredAgreements = formData.agreementInfo.agreements.filter(a => a.required);\n-        const allRequiredAgreed = requiredAgreements.every(a => a.agreed);\n-        const hasCustomerSignature = !!formData.agreementInfo.customerSignature;\n-        const hasStaffSignature = !!formData.agreementInfo.staffSignature;\n-        \n-        console.log('=== 4단계 검증 ===');\n-        console.log('필수 약관 수:', requiredAgreements.length);\n-        console.log('필수 약관 모두 동의:', allRequiredAgreed);\n-        console.log('고객 서명 존재:', hasCustomerSignature);\n-        console.log('직원 서명 존재:', hasStaffSignature);\n-        console.log('전체 검증 결과:', allRequiredAgreed && hasCustomerSignature && hasStaffSignature);\n-        \n-        return allRequiredAgreed && hasCustomerSignature && hasStaffSignature;\n-      default:\n-        return true;\n-    }\n-  };\n-\n-  const handleNext = () => {\n-    if (validateCurrentStep() && currentStep < 4) {\n-      setCurrentStep(currentStep + 1);\n-    }\n-  };\n-\n-  const handleValidateAndNext = async () => {\n-    if (!validateCurrentStep()) {\n-      return;\n-    }\n-\n-    try {\n-      setIsValidating(true);\n-\n-      // 1단계(기본정보)에서는 연락처와 이메일 중복 체크 수행\n-      if (currentStep === 1) {\n-        const { phone, email } = formData.basicInfo;\n-        \n-        // 연락처는 필수이므로 항상 체크\n-        if (!phone) {\n-          toast.error('연락처를 입력해주세요.');\n-          return;\n-        }\n-\n-        // 중복 체크 수행\n-        const duplicateCheck = await dbManager.checkMemberDuplicate(phone, email);\n-        \n-        if (duplicateCheck.isDuplicate) {\n-          toast.error(duplicateCheck.message || '중복된 정보가 있습니다.');\n-          return;\n-        }\n-      }\n-      \n-      // 2단계(가입정보)에서는 로그인 ID 중복 체크 수행 (로그인 기능 사용 시에만)\n-      else if (currentStep === 2) {\n-        const { enableLogin, loginId } = formData.joinInfo;\n-        \n-        if (enableLogin && loginId) {\n-          // 로그인 ID 중복 체크 수행\n-          const duplicateCheck = await dbManager.checkLoginIdDuplicate(loginId);\n-          \n-          if (duplicateCheck.isDuplicate) {\n-            toast.error(duplicateCheck.message || '이미 사용 중인 로그인 ID입니다.');\n-            return;\n-          }\n-        }\n-      }\n-\n-      // 중복이 없으면 다음 단계로\n-      setCurrentStep(currentStep + 1);\n-    } catch (error) {\n-      console.error('중복 체크 실패:', error);\n-      toast.error('중복 체크 중 오류가 발생했습니다. 다시 시도해주세요.');\n-    } finally {\n-      setIsValidating(false);\n-    }\n-  };\n-\n-  const handlePrev = () => {\n-    if (currentStep > 1) {\n-      setCurrentStep(currentStep - 1);\n-    }\n-  };\n-\n-  const handleSkipPayment = () => {\n-    setCurrentStep(4);\n-  };\n-\n-  const handleSubmit = async () => {\n-    try {\n-      console.log('=== 회원 등록 시작 ===');\n-      console.log('폼 데이터:', formData);\n-      \n-      // 0. IndexedDB 연결 상태 확인\n-      console.log('IndexedDB 상태 확인 중...');\n-      try {\n-        // 데이터베이스 테이블 존재 여부 확인\n-        console.log('데이터베이스 객체:', dbManager);\n-        \n-        const testBranches = await dbManager.getAllBranches();\n-        console.log('IndexedDB 연결 성공, 지점 수:', testBranches.length);\n-        \n-        // members 테이블 접근 테스트\n-        console.log('회원 테이블 접근 테스트 중...');\n-        const existingMembers = await dbManager.getAllMembers();\n-        console.log('기존 회원 수:', existingMembers.length);\n-        console.log('기존 회원 목록:', existingMembers);\n-        \n-      } catch (dbError) {\n-        console.error('IndexedDB 연결 실패:', dbError);\n-        throw new Error('데이터베이스 연결에 실패했습니다.');\n-      }\n-      \n-      // 1. 지점명과 코치명 가져오기\n-      console.log('=== 1단계: 지점과 직원 정보 조회 ===');\n-      const branches = await dbManager.getAllBranches();\n-      const staff = await dbManager.getAllStaff();\n-      console.log('전체 지점 수:', branches.length);\n-      console.log('전체 직원 수:', staff.length);\n-      \n-      const branch = branches.find(b => b.id === formData.joinInfo.branchId);\n-      const coach = staff.find(s => s.id === formData.joinInfo.coach);\n-      \n-      console.log('선택된 지점 ID:', formData.joinInfo.branchId);\n-      console.log('찾은 지점 정보:', branch);\n-      console.log('선택된 코치 ID:', formData.joinInfo.coach);\n-      console.log('찾은 코치 정보:', coach);\n-      \n-      // 2. 회원 정보 저장 (기본정보 + 가입정보만)\n-      console.log('=== 2단계: 회원 정보 저장 ===');\n-      const memberData = {\n-        name: formData.basicInfo.name,\n-        phone: formData.basicInfo.phone,\n-        email: formData.basicInfo.email,\n-        birth: formData.basicInfo.birth,\n-        gender: formData.basicInfo.gender as 'male' | 'female' | '',\n-        address: formData.basicInfo.addressInfo.address,\n-        sigunguCode: formData.basicInfo.addressInfo.sigunguCode,\n-        dong: formData.basicInfo.addressInfo.dong,\n-        roadAddress: formData.basicInfo.addressInfo.roadAddress,\n-        jibunAddress: formData.basicInfo.addressInfo.jibunAddress,\n-        branchId: formData.joinInfo.branchId,\n-        branchName: branch?.name || '',\n-        coach: formData.joinInfo.coach,\n-        coachName: coach?.name || '',\n-        joinPath: formData.joinInfo.joinPath,\n-        loginId: formData.joinInfo.loginId || `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`, // 공란일 때는 임시 고유값 생성\n-        loginPassword: formData.joinInfo.loginPassword || null, // 공란일 때는 null로 저장\n-        enableLogin: formData.joinInfo.enableLogin,\n-        agreementInfo: formData.agreementInfo,\n-        isActive: true,\n-        registrationDate: new Date().toISOString(),\n-        remarks: '' // 비고는 빈 문자열로 초기화\n-      };\n-      \n-      console.log('저장할 회원 데이터:', memberData);\n-      console.log('데이터 타입 검증:');\n-      console.log('- name 타입:', typeof memberData.name, '값:', memberData.name);\n-      console.log('- phone 타입:', typeof memberData.phone, '값:', memberData.phone);\n-      console.log('- email 타입:', typeof memberData.email, '값:', memberData.email);\n-      \n-      console.log('dbManager.addMember 함수 호출 전...');\n-      let memberId: string;\n-      try {\n-        memberId = await dbManager.addMember(memberData);\n-        console.log('dbManager.addMember 함수 호출 후 - 반환값:', memberId);\n-        console.log('반환값 타입:', typeof memberId);\n-      } catch (addMemberError) {\n-        console.error('❌ addMember 함수에서 에러 발생:', addMemberError);\n-        console.error('에러 타입:', typeof addMemberError);\n-        console.error('에러 메시지:', addMemberError instanceof Error ? addMemberError.message : addMemberError);\n-        console.error('에러 스택:', addMemberError instanceof Error ? addMemberError.stack : '스택 없음');\n-        throw new Error(`회원 저장 중 오류: ${addMemberError instanceof Error ? addMemberError.message : '알 수 없는 오류'}`);\n-      }\n-      \n-      if (!memberId) {\n-        throw new Error('회원 저장에 실패했습니다 - 반환값 없음');\n-      }\n-      \n-      // 즉시 저장 확인\n-      console.log('=== 저장 확인 테스트 ===');\n-      try {\n-        const allMembers = await dbManager.getAllMembers();\n-        console.log('저장 후 전체 회원 수:', allMembers.length);\n-        console.log('저장된 모든 회원:', allMembers);\n-        \n-        const foundMember = allMembers.find(m => m.id === memberId);\n-        if (foundMember) {\n-          console.log('✅ 방금 저장한 회원을 데이터베이스에서 찾았습니다:', foundMember);\n-        } else {\n-          console.error('❌ 방금 저장한 회원을 데이터베이스에서 찾을 수 없습니다');\n-        }\n-      } catch (verifyError) {\n-        console.error('저장 확인 중 오류:', verifyError);\n-      }\n-      \n-      // 3. 결제 정보 및 수강 정보 저장 (상품이 선택된 경우에만)\n-      let paymentId: string | null = null;\n-      \n-      if (formData.paymentInfo.selectedProducts.length > 0) {\n-        console.log('=== 3단계: 결제 정보 및 수강 정보 저장 ===');\n-        \n-        // 결제 방법 매핑\n-        const paymentMethodMap: { [key: string]: string } = {\n-          'card': '카드',\n-          'cash': '현금',\n-          'transfer': '계좌이체'\n-        };\n-        \n-        const paymentMethodName = paymentMethodMap[formData.paymentInfo.paymentMethod] || '카드';\n-        const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n-        const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n-        \n-        console.log(`총 결제금액: ${totalAmount.toLocaleString()}원, 받은금액: ${receivedAmount.toLocaleString()}원`);\n-        \n-        // 3-1. 받은 금액 기준으로 결제 정보 저장 (상품별로 나누지 않음)\n+        // 3-2. 수강 정보 저장 후 결제 정보 저장 (수강 ID들과 연결)\n         const paymentStatus = receivedAmount < totalAmount ? 'unpaid' : 'completed';\n         \n         paymentId = await dbManager.addPayment({\n           memberId: memberId,\n           memberName: formData.basicInfo.name,\n-          products: formData.paymentInfo.selectedProducts,\n+          branchId: formData.joinInfo.branchId,\n+          branchName: branch?.name || '',\n+          coach: formData.joinInfo.coach,\n+          coachName: coach?.name || '',\n+          products: formData.paymentInfo.selectedProducts.map(product => ({\n+            ...product,\n+            quantity: 1,\n+            // 프로그램 정보 추가 (향후 필요시)\n+          })),\n           totalAmount: totalAmount,\n-          receivedAmount: receivedAmount,\n+          paidAmount: receivedAmount,\n+          unpaidAmount: totalAmount - receivedAmount,\n           paymentStatus: paymentStatus,\n           paymentMethod: paymentMethodName,\n           paymentDate: new Date(),\n-          notes: paymentStatus === 'unpaid' \n-            ? `회원 등록 - 미수금 ${(totalAmount - receivedAmount).toLocaleString()}원` \n-            : '회원 등록 시 결제 완료',\n+          paymentType: 'course' as const, // 수강 결제\n+          relatedCourseId: courseEnrollmentIds.length === 1 ? courseEnrollmentIds[0] : null, // 단일 상품인 경우만 직접 연결\n+          relatedAssetId: null,\n+          memo: courseEnrollmentIds.length > 1 \n+            ? `회원 등록 - 수강 ${courseEnrollmentIds.length}개 (ID: ${courseEnrollmentIds.map(id => id.slice(-8)).join(', ')})${paymentStatus === 'unpaid' ? ` | 미수금 ${(totalAmount - receivedAmount).toLocaleString()}원` : ''}`\n+            : `회원 등록 - ${formData.paymentInfo.selectedProducts[0]?.name} (수강 ID: ${courseEnrollmentIds[0]?.slice(-8) || 'N/A'})${paymentStatus === 'unpaid' ? ` | 미수금 ${(totalAmount - receivedAmount).toLocaleString()}원` : ''}`,\n         });\n         \n         console.log(`결제 정보 저장 완료 - ID: ${paymentId}, 상태: ${paymentStatus}`);\n \n-        // 3-2. 각 상품별로 수강 정보 저장\n-        console.log('수강 정보 저장 중...');\n-        const courseEnrollments = [];\n-        \n-        for (const product of formData.paymentInfo.selectedProducts) {\n-          // 상품별로 비례 배분하여 지불/미납 금액 계산\n-          const productRatio = product.price / totalAmount;\n-          const productPaidAmount = Math.floor(receivedAmount * productRatio);\n-          const productUnpaidAmount = product.price - productPaidAmount;\n-          \n-          // 상품 정보 조회 (프로그램 정보 가져오기 위해)\n-          const productDetails = await dbManager.getProductById(product.id);\n-          \n-          const courseEnrollment = {\n-            memberId: memberId,\n-            memberName: formData.basicInfo.name,\n-            productId: product.id,\n-            productName: product.name,\n-            productPrice: product.price,\n-            programId: productDetails?.programId || '',\n-            programName: productDetails?.programName || '',\n-            programType: productDetails?.programType || '',\n-            branchId: formData.joinInfo.branchId,\n-            branchName: branch?.name || '',\n-            coach: formData.joinInfo.coach,\n-            coachName: coach?.name || '',\n-            enrollmentStatus: (productUnpaidAmount > 0 ? 'unpaid' : 'completed') as 'unpaid' | 'completed',\n-            paidAmount: productPaidAmount,\n-            unpaidAmount: productUnpaidAmount,\n-            startDate: null, // 수강 시작일은 추후 설정\n-            endDate: null, // 수강 종료일은 추후 설정 (기간제인 경우)\n-            sessionCount: productDetails?.sessions, // 횟수제인 경우 총 횟수\n-            completedSessions: 0, // 완료된 수업 횟수 초기값\n-            notes: productUnpaidAmount > 0 \n-              ? `회원 등록 - 미수금 ${productUnpaidAmount.toLocaleString()}원`\n-              : '회원 등록 시 결제 완료',\n-            relatedPaymentId: paymentId\n-          };\n-          \n-          courseEnrollments.push(courseEnrollment);\n-        }\n-        \n-        // 수강 정보 일괄 저장\n-        const courseEnrollmentIds = await dbManager.addMultipleCourseEnrollments(courseEnrollments);\n-        console.log(`수강 정보 저장 완료 - ${courseEnrollmentIds.length}건`);\n-\n         // 3-3. 초과금 처리 (포인트 적립)\n         if (receivedAmount > totalAmount) {\n           const overageAmount = receivedAmount - totalAmount;\n           console.log(`초과금 ${overageAmount.toLocaleString()}원을 포인트로 적립 중...`);\n"
                },
                {
                    "date": 1761366312691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,129 +313,67 @@\n       } catch (verifyError) {\n         console.error('저장 확인 중 오류:', verifyError);\n       }\n       \n-      // 3. 결제 정보 및 수강 정보 저장 (상품이 선택된 경우에만)\n-      let paymentId: string | null = null;\n+      // 3. 결제 정보 및 수강 정보 저장 (상품이 선택된 경우에만) - 개선된 통합 주문 처리\n+      let orderId: string | null = null;\n       \n       if (formData.paymentInfo.selectedProducts.length > 0) {\n-        console.log('=== 3단계: 결제 정보 및 수강 정보 저장 ===');\n+        console.log('=== 3단계: 개선된 통합 주문 처리 ===');\n         \n-        // 결제 방법 매핑\n-        const paymentMethodMap: { [key: string]: string } = {\n-          'card': '카드',\n-          'cash': '현금',\n-          'transfer': '계좌이체'\n-        };\n-        \n-        const paymentMethodName = paymentMethodMap[formData.paymentInfo.paymentMethod] || '카드';\n         const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n         const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n+        const pointPayment = 0; // 회원 등록 시에는 포인트 결제 미지원 (향후 확장 가능)\n+        const cashPayment = receivedAmount - pointPayment;\n         \n-        console.log(`총 결제금액: ${totalAmount.toLocaleString()}원, 받은금액: ${receivedAmount.toLocaleString()}원`);\n+        console.log(`총 결제금액: ${totalAmount.toLocaleString()}원`);\n+        console.log(`포인트 결제: ${pointPayment.toLocaleString()}원`);\n+        console.log(`현금/카드 결제: ${cashPayment.toLocaleString()}원`);\n         \n-        // 3-1. 먼저 각 상품별로 수강 정보 저장\n-        console.log('수강 정보 저장 중...');\n-        const courseEnrollments = [];\n-        \n-        for (const product of formData.paymentInfo.selectedProducts) {\n-          // 상품별로 비례 배분하여 지불/미납 금액 계산\n-          const productRatio = product.price / totalAmount;\n-          const productPaidAmount = Math.floor(receivedAmount * productRatio);\n-          const productUnpaidAmount = product.price - productPaidAmount;\n-          \n-          // 상품 정보 조회 (프로그램 정보 가져오기 위해)\n-          const productDetails = await dbManager.getProductById(product.id);\n-          \n-          const courseEnrollment = {\n-            memberId: memberId,\n-            memberName: formData.basicInfo.name,\n-            productId: product.id,\n-            productName: product.name,\n-            productPrice: product.price,\n-            programId: productDetails?.programId || '',\n-            programName: productDetails?.programName || '',\n-            programType: productDetails?.programType || '',\n-            branchId: formData.joinInfo.branchId,\n-            branchName: branch?.name || '',\n-            coach: formData.joinInfo.coach,\n-            coachName: coach?.name || '',\n-            enrollmentStatus: (productUnpaidAmount > 0 ? 'unpaid' : 'completed') as 'unpaid' | 'completed',\n-            paidAmount: productPaidAmount,\n-            unpaidAmount: productUnpaidAmount,\n-            startDate: null, // 수강 시작일은 추후 설정\n-            endDate: null, // 수강 종료일은 추후 설정 (기간제인 경우)\n-            sessionCount: productDetails?.sessions, // 횟수제인 경우 총 횟수\n-            completedSessions: 0, // 완료된 수업 횟수 초기값\n-            notes: productUnpaidAmount > 0 \n-              ? `회원 등록 - 미수금 ${productUnpaidAmount.toLocaleString()}원`\n-              : '회원 등록 시 결제 완료'\n-          };\n-          \n-          courseEnrollments.push(courseEnrollment);\n-        }\n-        \n-        // 수강 정보 일괄 저장\n-        const courseEnrollmentIds = await dbManager.addMultipleCourseEnrollments(courseEnrollments);\n-        console.log(`수강 정보 저장 완료 - ${courseEnrollmentIds.length}건`);\n-\n-        // 3-2. 수강 정보 저장 후 결제 정보 저장 (수강 ID들과 연결)\n-        const paymentStatus = receivedAmount < totalAmount ? 'unpaid' : 'completed';\n-        \n-        paymentId = await dbManager.addPayment({\n-          memberId: memberId,\n-          memberName: formData.basicInfo.name,\n-          branchId: formData.joinInfo.branchId,\n-          branchName: branch?.name || '',\n-          coach: formData.joinInfo.coach,\n-          coachName: coach?.name || '',\n-          products: formData.paymentInfo.selectedProducts.map(product => ({\n-            ...product,\n-            quantity: 1,\n-            // 프로그램 정보 추가 (향후 필요시)\n-          })),\n-          totalAmount: totalAmount,\n-          paidAmount: receivedAmount,\n-          unpaidAmount: totalAmount - receivedAmount,\n-          paymentStatus: paymentStatus,\n-          paymentMethod: paymentMethodName,\n-          paymentDate: new Date(),\n-          paymentType: 'course' as const, // 수강 결제\n-          relatedCourseId: courseEnrollmentIds.length === 1 ? courseEnrollmentIds[0] : null, // 단일 상품인 경우만 직접 연결\n-          relatedAssetId: null,\n-          memo: courseEnrollmentIds.length > 1 \n-            ? `회원 등록 - 수강 ${courseEnrollmentIds.length}개 (ID: ${courseEnrollmentIds.map(id => id.slice(-8)).join(', ')})${paymentStatus === 'unpaid' ? ` | 미수금 ${(totalAmount - receivedAmount).toLocaleString()}원` : ''}`\n-            : `회원 등록 - ${formData.paymentInfo.selectedProducts[0]?.name} (수강 ID: ${courseEnrollmentIds[0]?.slice(-8) || 'N/A'})${paymentStatus === 'unpaid' ? ` | 미수금 ${(totalAmount - receivedAmount).toLocaleString()}원` : ''}`,\n-        });\n-        \n-        console.log(`결제 정보 저장 완료 - ID: ${paymentId}, 상태: ${paymentStatus}`);\n-\n-        // 3-3. 초과금 처리 (포인트 적립)\n-        if (receivedAmount > totalAmount) {\n-          const overageAmount = receivedAmount - totalAmount;\n-          console.log(`초과금 ${overageAmount.toLocaleString()}원을 포인트로 적립 중...`);\n-          \n-          try {\n-            // 포인트 만료일을 1년 후로 설정\n-            const expiryDate = new Date();\n-            expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n+        try {\n+          // 상품 정보 조회 및 준비\n+          const orderProducts = [];\n+          for (const product of formData.paymentInfo.selectedProducts) {\n+            const productDetails = await dbManager.getProductById(product.id);\n+            if (!productDetails) {\n+              throw new Error(`상품 정보를 찾을 수 없습니다: ${product.name}`);\n+            }\n             \n-            const pointId = await dbManager.addPoint({\n-              memberId: memberId,\n-              memberName: formData.basicInfo.name,\n-              amount: overageAmount,\n-              type: 'earned',\n-              source: '회원등록 초과금',\n-              description: `회원 등록 시 초과 입금액 ${overageAmount.toLocaleString()}원`,\n-              expiryDate: expiryDate,\n-              relatedPaymentId: paymentId\n+            orderProducts.push({\n+              id: product.id,\n+              name: product.name,\n+              price: product.price,\n+              programId: productDetails.programId,\n+              programName: productDetails.programName,\n+              programType: productDetails.programType\n             });\n-            \n-            console.log(`포인트 적립 완료 - ID: ${pointId}, 금액: ${overageAmount.toLocaleString()}원`);\n-          } catch (pointError) {\n-            console.error('포인트 적립 실패:', pointError);\n-            // 포인트 적립 실패해도 회원 등록은 계속 진행\n           }\n+\n+          // 통합 주문 처리 실행\n+          orderId = await dbManager.processOrderWithPayments({\n+            memberInfo: {\n+              id: memberId,\n+              name: formData.basicInfo.name,\n+              branchId: formData.joinInfo.branchId,\n+              branchName: branch?.name || '',\n+              coach: formData.joinInfo.coach,\n+              coachName: coach?.name || ''\n+            },\n+            products: orderProducts,\n+            payments: {\n+              cash: formData.paymentInfo.paymentMethod === 'cash' ? cashPayment : 0,\n+              card: formData.paymentInfo.paymentMethod === 'card' ? cashPayment : 0,\n+              transfer: formData.paymentInfo.paymentMethod === 'transfer' ? cashPayment : 0,\n+              points: pointPayment\n+            },\n+            orderType: 'registration'\n+          });\n+\n+          console.log(`통합 주문 처리 완료 - 주문 ID: ${orderId}`);\n+\n+        } catch (orderError) {\n+          console.error('통합 주문 처리 실패:', orderError);\n+          throw orderError;\n         }\n       }\n       \n       // 4. 회원 등록 문서를 HTML 파일로 저장\n@@ -445,20 +383,32 @@\n       \n       // 결과 메시지 생성\n       let successMessage = `회원이 성공적으로 등록되었습니다!\\n회원 ID: ${memberId}\\n등록 문서: ${fileName}`;\n       \n-      if (formData.paymentInfo.selectedProducts.length > 0) {\n+      if (formData.paymentInfo.selectedProducts.length > 0 && orderId) {\n         const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n         const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n+        const pointPayment = 0; // 회원 등록 시에는 포인트 결제 미지원 (향후 확장 가능)\n+        const totalPaid = (receivedAmount - pointPayment) + pointPayment;\n         \n-        // 선택된 상품 개수 표시\n-        successMessage += `\\n\\n📚 수강 상품: ${formData.paymentInfo.selectedProducts.length}개`;\n+        // 주문 정보 표시\n+        successMessage += `\\n\\n📋 주문 ID: ${orderId.slice(-8)}`;\n+        successMessage += `\\n📚 수강 상품: ${formData.paymentInfo.selectedProducts.length}개`;\n         \n-        if (receivedAmount > totalAmount) {\n-          const overageAmount = receivedAmount - totalAmount;\n-          successMessage += `\\n💰 초과금 ${overageAmount.toLocaleString()}원이 포인트로 적립되었습니다.`;\n-        } else if (receivedAmount < totalAmount) {\n-          const unpaidAmount = totalAmount - receivedAmount;\n+        // 결제 정보 표시\n+        if (pointPayment > 0) {\n+          successMessage += `\\n🪙 포인트 결제: ${pointPayment.toLocaleString()}원`;\n+        }\n+        if (receivedAmount - pointPayment > 0) {\n+          successMessage += `\\n💳 현금/카드 결제: ${(receivedAmount - pointPayment).toLocaleString()}원`;\n+        }\n+        \n+        // 상태 표시\n+        if (totalPaid > totalAmount) {\n+          const excessAmount = totalPaid - totalAmount;\n+          successMessage += `\\n💰 초과금 ${excessAmount.toLocaleString()}원이 포인트로 적립되었습니다.`;\n+        } else if (totalPaid < totalAmount) {\n+          const unpaidAmount = totalAmount - totalPaid;\n           successMessage += `\\n⚠️ 미수금 ${unpaidAmount.toLocaleString()}원이 있습니다.`;\n         } else {\n           successMessage += `\\n✅ 모든 상품의 결제가 완료되었습니다.`;\n         }\n"
                },
                {
                    "date": 1761366849373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,9 @@\n     paymentInfo: {\n       selectedProducts: [],\n       paymentMethod: 'card',\n       receivedAmount: undefined,\n+      pointPayment: 0,\n     },\n     agreementInfo: {\n       agreements: [\n         {\n@@ -321,9 +322,9 @@\n         console.log('=== 3단계: 개선된 통합 주문 처리 ===');\n         \n         const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n         const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n-        const pointPayment = 0; // 회원 등록 시에는 포인트 결제 미지원 (향후 확장 가능)\n+        const pointPayment = formData.paymentInfo.pointPayment || 0; // 포인트 결제 지원\n         const cashPayment = receivedAmount - pointPayment;\n         \n         console.log(`총 결제금액: ${totalAmount.toLocaleString()}원`);\n         console.log(`포인트 결제: ${pointPayment.toLocaleString()}원`);\n@@ -386,9 +387,9 @@\n       \n       if (formData.paymentInfo.selectedProducts.length > 0 && orderId) {\n         const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n         const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n-        const pointPayment = 0; // 회원 등록 시에는 포인트 결제 미지원 (향후 확장 가능)\n+        const pointPayment = formData.paymentInfo.pointPayment || 0;\n         const totalPaid = (receivedAmount - pointPayment) + pointPayment;\n         \n         // 주문 정보 표시\n         successMessage += `\\n\\n📋 주문 ID: ${orderId.slice(-8)}`;\n@@ -446,8 +447,9 @@\n         paymentInfo: {\n           selectedProducts: [],\n           paymentMethod: 'card',\n           receivedAmount: undefined,\n+          pointPayment: 0,\n         },\n         agreementInfo: {\n           agreements: [\n             {\n"
                },
                {
                    "date": 1761367119196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,13 +285,15 @@\n       try {\n         memberId = await dbManager.addMember(memberData);\n         console.log('dbManager.addMember 함수 호출 후 - 반환값:', memberId);\n         console.log('반환값 타입:', typeof memberId);\n+        alert(`회원 등록 성공! 회원 ID: ${memberId}`);\n       } catch (addMemberError) {\n         console.error('❌ addMember 함수에서 에러 발생:', addMemberError);\n         console.error('에러 타입:', typeof addMemberError);\n         console.error('에러 메시지:', addMemberError instanceof Error ? addMemberError.message : addMemberError);\n         console.error('에러 스택:', addMemberError instanceof Error ? addMemberError.stack : '스택 없음');\n+        alert(`회원 등록 실패: ${addMemberError instanceof Error ? addMemberError.message : '알 수 없는 오류'}`);\n         throw new Error(`회원 저장 중 오류: ${addMemberError instanceof Error ? addMemberError.message : '알 수 없는 오류'}`);\n       }\n       \n       if (!memberId) {\n@@ -369,11 +371,13 @@\n             orderType: 'registration'\n           });\n \n           console.log(`통합 주문 처리 완료 - 주문 ID: ${orderId}`);\n+          alert(`통합 주문 처리 완료! 주문 ID: ${orderId.slice(-8)}`);\n \n         } catch (orderError) {\n           console.error('통합 주문 처리 실패:', orderError);\n+          alert(`통합 주문 처리 실패: ${orderError}`);\n           throw orderError;\n         }\n       }\n       \n"
                },
                {
                    "date": 1761372724984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,10 @@\n     joinInfo: {\n       branchId: '',\n       coach: '',\n       joinPath: '',\n+      referrerId: '',\n+      referrerName: '',\n       loginId: '',\n       loginPassword: '',\n       enableLogin: false,\n     },\n@@ -116,9 +118,10 @@\n           formData.basicInfo.gender && \n           formData.basicInfo.addressInfo.address\n         ) && !hasErrors;\n       case 2:\n-        return !!(formData.joinInfo.coach && formData.joinInfo.joinPath) && !hasErrors;\n+        return !!(formData.joinInfo.coach && formData.joinInfo.joinPath && \n+          (formData.joinInfo.joinPath !== '지인추천' || formData.joinInfo.referrerId)) && !hasErrors;\n       case 3:\n         return true; // 결제정보는 선택사항\n       case 4:\n         const requiredAgreements = formData.agreementInfo.agreements.filter(a => a.required);\n@@ -264,8 +267,10 @@\n         branchName: branch?.name || '',\n         coach: formData.joinInfo.coach,\n         coachName: coach?.name || '',\n         joinPath: formData.joinInfo.joinPath,\n+        referrerId: formData.joinInfo.referrerId || null, // 지인추천인 ID\n+        referrerName: formData.joinInfo.referrerName || null, // 지인추천인 이름\n         loginId: formData.joinInfo.loginId || `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`, // 공란일 때는 임시 고유값 생성\n         loginPassword: formData.joinInfo.loginPassword || null, // 공란일 때는 null로 저장\n         enableLogin: formData.joinInfo.enableLogin,\n         agreementInfo: formData.agreementInfo,\n@@ -380,16 +385,68 @@\n           throw orderError;\n         }\n       }\n       \n+      // 3.5. 지인추천 포인트 적립 처리\n+      if (formData.joinInfo.joinPath === '지인추천' && formData.joinInfo.referrerId) {\n+        console.log('=== 지인추천 포인트 적립 처리 ===');\n+        \n+        try {\n+          // 추천인에게 40,000 포인트 적립\n+          const referrerStaff = staff.find(s => s.id === formData.joinInfo.referrerId);\n+          const referrerName = referrerStaff?.name || formData.joinInfo.referrerName || 'Unknown';\n+          \n+          await dbManager.point.addPointTransaction({\n+            memberId: formData.joinInfo.referrerId,\n+            memberName: referrerName,\n+            amount: 40000,\n+            transactionType: 'earn',\n+            source: '지인추천 보상',\n+            description: `${formData.basicInfo.name} 님 추천으로 적립`,\n+            earnedDate: new Date(),\n+            expiryDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1년 후 만료\n+            isExpired: false\n+          });\n+          console.log(`추천인(${referrerName})에게 40,000 포인트 적립 완료`);\n+          \n+          // 신규 회원에게 35,000 포인트 적립\n+          await dbManager.point.addPointTransaction({\n+            memberId: memberId,\n+            memberName: formData.basicInfo.name,\n+            amount: 35000,\n+            transactionType: 'earn',\n+            source: '지인추천 가입 혜택',\n+            description: `${referrerName} 님 추천으로 가입`,\n+            earnedDate: new Date(),\n+            expiryDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1년 후 만료\n+            isExpired: false\n+          });\n+          console.log(`신규 회원(${formData.basicInfo.name})에게 35,000 포인트 적립 완료`);\n+          \n+        } catch (pointError) {\n+          console.error('지인추천 포인트 적립 실패:', pointError);\n+          // 포인트 적립 실패는 경고만 표시하고 계속 진행\n+          alert(`⚠️ 지인추천 포인트 적립 중 오류가 발생했습니다: ${pointError}`);\n+        }\n+      }\n+      \n       // 4. 회원 등록 문서를 HTML 파일로 저장\n       console.log('=== 4단계: 문서 생성 ===');\n       const fileName = await saveDocumentAsFile(formData);\n       console.log('문서 저장 완료:', fileName);\n       \n       // 결과 메시지 생성\n       let successMessage = `회원이 성공적으로 등록되었습니다!\\n회원 ID: ${memberId}\\n등록 문서: ${fileName}`;\n       \n+      // 지인추천 포인트 적립 정보 추가\n+      if (formData.joinInfo.joinPath === '지인추천' && formData.joinInfo.referrerId) {\n+        const referrerStaff = staff.find(s => s.id === formData.joinInfo.referrerId);\n+        const referrerName = referrerStaff?.name || formData.joinInfo.referrerName || 'Unknown';\n+        successMessage += `\\n\\n🎁 지인추천 혜택`;\n+        successMessage += `\\n👨‍💼 추천인(${referrerName}): 40,000 포인트 적립`;\n+        successMessage += `\\n🙋‍♀️ 신규회원: 35,000 포인트 적립`;\n+      }\n+      \n       if (formData.paymentInfo.selectedProducts.length > 0 && orderId) {\n         const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n         const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n         const pointPayment = formData.paymentInfo.pointPayment || 0;\n@@ -443,8 +500,10 @@\n         joinInfo: {\n           branchId: '',\n           coach: '',\n           joinPath: '',\n+          referrerId: '',\n+          referrerName: '',\n           loginId: '',\n           loginPassword: '',\n           enableLogin: false,\n         },\n"
                },
                {
                    "date": 1761373128145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,11 +390,11 @@\n       if (formData.joinInfo.joinPath === '지인추천' && formData.joinInfo.referrerId) {\n         console.log('=== 지인추천 포인트 적립 처리 ===');\n         \n         try {\n-          // 추천인에게 40,000 포인트 적립\n-          const referrerStaff = staff.find(s => s.id === formData.joinInfo.referrerId);\n-          const referrerName = referrerStaff?.name || formData.joinInfo.referrerName || 'Unknown';\n+          // 추천인(기존 회원)에게 40,000 포인트 적립\n+          const referrerMember = await dbManager.getMemberById(formData.joinInfo.referrerId);\n+          const referrerName = referrerMember?.name || formData.joinInfo.referrerName || 'Unknown';\n           \n           await dbManager.point.addPointTransaction({\n             memberId: formData.joinInfo.referrerId,\n             memberName: referrerName,\n"
                },
                {
                    "date": 1761373257746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,10 +118,28 @@\n           formData.basicInfo.gender && \n           formData.basicInfo.addressInfo.address\n         ) && !hasErrors;\n       case 2:\n-        return !!(formData.joinInfo.coach && formData.joinInfo.joinPath && \n-          (formData.joinInfo.joinPath !== '지인추천' || formData.joinInfo.referrerId)) && !hasErrors;\n+        // 기본 필수 필드 검증\n+        const hasBasicFields = !!(formData.joinInfo.coach && formData.joinInfo.joinPath);\n+        \n+        // 지인추천일 때만 추가 검증\n+        const isReferrerValid = formData.joinInfo.joinPath !== '지인추천' || \n+          !!(formData.joinInfo.referrerId && formData.joinInfo.referrerName);\n+        \n+        const isValidStep2 = hasBasicFields && isReferrerValid && !hasErrors;\n+        \n+        console.log('=== 2단계 검증 ===');\n+        console.log('coach:', formData.joinInfo.coach);\n+        console.log('joinPath:', formData.joinInfo.joinPath);\n+        console.log('referrerId:', formData.joinInfo.referrerId);\n+        console.log('referrerName:', formData.joinInfo.referrerName);\n+        console.log('hasErrors:', hasErrors);\n+        console.log('hasBasicFields:', hasBasicFields);\n+        console.log('isReferrerValid:', isReferrerValid);\n+        console.log('최종 검증 결과:', isValidStep2);\n+        \n+        return isValidStep2;\n       case 3:\n         return true; // 결제정보는 선택사항\n       case 4:\n         const requiredAgreements = formData.agreementInfo.agreements.filter(a => a.required);\n"
                },
                {
                    "date": 1761373763894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -485,8 +485,15 @@\n         // 상태 표시\n         if (totalPaid > totalAmount) {\n           const excessAmount = totalPaid - totalAmount;\n           successMessage += `\\n💰 초과금 ${excessAmount.toLocaleString()}원이 포인트로 적립되었습니다.`;\n+          \n+          // 보너스 포인트 계산 및 표시\n+          if (excessAmount >= 1000000) {\n+            const millionUnits = Math.floor(excessAmount / 1000000);\n+            const bonusPoints = millionUnits * 100000;\n+            successMessage += `\\n🎁 보너스 포인트 ${bonusPoints.toLocaleString()}원 추가 적립! (${millionUnits}개 100만원 단위)`;\n+          }\n         } else if (totalPaid < totalAmount) {\n           const unpaidAmount = totalAmount - totalPaid;\n           successMessage += `\\n⚠️ 미수금 ${unpaidAmount.toLocaleString()}원이 있습니다.`;\n         } else {\n"
                },
                {
                    "date": 1761373901398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,15 +308,13 @@\n       try {\n         memberId = await dbManager.addMember(memberData);\n         console.log('dbManager.addMember 함수 호출 후 - 반환값:', memberId);\n         console.log('반환값 타입:', typeof memberId);\n-        alert(`회원 등록 성공! 회원 ID: ${memberId}`);\n       } catch (addMemberError) {\n         console.error('❌ addMember 함수에서 에러 발생:', addMemberError);\n         console.error('에러 타입:', typeof addMemberError);\n         console.error('에러 메시지:', addMemberError instanceof Error ? addMemberError.message : addMemberError);\n         console.error('에러 스택:', addMemberError instanceof Error ? addMemberError.stack : '스택 없음');\n-        alert(`회원 등록 실패: ${addMemberError instanceof Error ? addMemberError.message : '알 수 없는 오류'}`);\n         throw new Error(`회원 저장 중 오류: ${addMemberError instanceof Error ? addMemberError.message : '알 수 없는 오류'}`);\n       }\n       \n       if (!memberId) {\n@@ -394,13 +392,11 @@\n             orderType: 'registration'\n           });\n \n           console.log(`통합 주문 처리 완료 - 주문 ID: ${orderId}`);\n-          alert(`통합 주문 처리 완료! 주문 ID: ${orderId.slice(-8)}`);\n \n         } catch (orderError) {\n           console.error('통합 주문 처리 실패:', orderError);\n-          alert(`통합 주문 처리 실패: ${orderError}`);\n           throw orderError;\n         }\n       }\n       \n@@ -442,9 +438,8 @@\n           \n         } catch (pointError) {\n           console.error('지인추천 포인트 적립 실패:', pointError);\n           // 포인트 적립 실패는 경고만 표시하고 계속 진행\n-          alert(`⚠️ 지인추천 포인트 적립 중 오류가 발생했습니다: ${pointError}`);\n         }\n       }\n       \n       // 4. 회원 등록 문서를 HTML 파일로 저장\n"
                },
                {
                    "date": 1761457974487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -343,9 +343,11 @@\n       \n       if (formData.paymentInfo.selectedProducts.length > 0) {\n         console.log('=== 3단계: 개선된 통합 주문 처리 ===');\n         \n-        const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n+        const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => {\n+          return sum + (product.calculatedPrice || product.price);\n+        }, 0);\n         const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n         const pointPayment = formData.paymentInfo.pointPayment || 0; // 포인트 결제 지원\n         const cashPayment = receivedAmount - pointPayment;\n         \n@@ -361,16 +363,27 @@\n             if (!productDetails) {\n               throw new Error(`상품 정보를 찾을 수 없습니다: ${product.name}`);\n             }\n             \n-            orderProducts.push({\n+            // 기간제 상품의 경우 계산된 가격과 기간 정보 포함\n+            const orderProduct: any = {\n               id: product.id,\n               name: product.name,\n-              price: product.price,\n+              price: product.calculatedPrice || product.price, // 계산된 가격 우선 사용\n               programId: productDetails.programId,\n               programName: productDetails.programName,\n               programType: productDetails.programType\n-            });\n+            };\n+\n+            // 기간제 상품의 경우 기간 정보 추가\n+            if (product.programType === '기간제' && product.startDate && product.endDate) {\n+              orderProduct.startDate = product.startDate;\n+              orderProduct.endDate = product.endDate;\n+              orderProduct.duration = product.duration;\n+              orderProduct.originalPrice = product.price; // 원래 가격도 보관\n+            }\n+            \n+            orderProducts.push(orderProduct);\n           }\n \n           // 통합 주문 처리 실행\n           orderId = await dbManager.processOrderWithPayments({\n@@ -459,17 +472,28 @@\n         successMessage += `\\n🙋‍♀️ 신규회원: 35,000 포인트 적립`;\n       }\n       \n       if (formData.paymentInfo.selectedProducts.length > 0 && orderId) {\n-        const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => sum + product.price, 0);\n+        const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => {\n+          return sum + (product.calculatedPrice || product.price);\n+        }, 0);\n         const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n         const pointPayment = formData.paymentInfo.pointPayment || 0;\n         const totalPaid = (receivedAmount - pointPayment) + pointPayment;\n         \n         // 주문 정보 표시\n         successMessage += `\\n\\n📋 주문 ID: ${orderId.slice(-8)}`;\n         successMessage += `\\n📚 수강 상품: ${formData.paymentInfo.selectedProducts.length}개`;\n         \n+        // 기간제 상품 기간 정보 표시\n+        const periodProducts = formData.paymentInfo.selectedProducts.filter(p => p.programType === '기간제' && p.startDate && p.endDate);\n+        if (periodProducts.length > 0) {\n+          successMessage += `\\n📅 수강 기간:`;\n+          periodProducts.forEach(product => {\n+            successMessage += `\\n   • ${product.name}: ${product.startDate?.toLocaleDateString()} ~ ${product.endDate?.toLocaleDateString()} (${product.duration}일)`;\n+          });\n+        }\n+        \n         // 결제 정보 표시\n         if (pointPayment > 0) {\n           successMessage += `\\n🪙 포인트 결제: ${pointPayment.toLocaleString()}원`;\n         }\n"
                },
                {
                    "date": 1761458536879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -344,9 +344,9 @@\n       if (formData.paymentInfo.selectedProducts.length > 0) {\n         console.log('=== 3단계: 개선된 통합 주문 처리 ===');\n         \n         const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => {\n-          return sum + (product.calculatedPrice || product.price);\n+          return sum + (product.appliedPrice || product.price);\n         }, 0);\n         const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n         const pointPayment = formData.paymentInfo.pointPayment || 0; // 포인트 결제 지원\n         const cashPayment = receivedAmount - pointPayment;\n@@ -363,25 +363,31 @@\n             if (!productDetails) {\n               throw new Error(`상품 정보를 찾을 수 없습니다: ${product.name}`);\n             }\n             \n-            // 기간제 상품의 경우 계산된 가격과 기간 정보 포함\n+            // 기간제/횟수제 상품의 경우 추가 정보 포함\n             const orderProduct: any = {\n               id: product.id,\n               name: product.name,\n-              price: product.calculatedPrice || product.price, // 계산된 가격 우선 사용\n+              price: product.appliedPrice || product.price, // 적용된 가격 사용\n               programId: productDetails.programId,\n               programName: productDetails.programName,\n-              programType: productDetails.programType\n+              programType: productDetails.programType,\n+              originalPrice: product.originalPrice, // 원래 가격\n+              appliedPrice: product.appliedPrice // 적용된 가격\n             };\n \n             // 기간제 상품의 경우 기간 정보 추가\n             if (product.programType === '기간제' && product.startDate && product.endDate) {\n               orderProduct.startDate = product.startDate;\n               orderProduct.endDate = product.endDate;\n               orderProduct.duration = product.duration;\n-              orderProduct.originalPrice = product.price; // 원래 가격도 보관\n             }\n+\n+            // 횟수제 상품의 경우 횟수 정보 추가\n+            if (product.programType === '횟수제' && product.sessions) {\n+              orderProduct.sessions = product.sessions;\n+            }\n             \n             orderProducts.push(orderProduct);\n           }\n \n@@ -473,9 +479,9 @@\n       }\n       \n       if (formData.paymentInfo.selectedProducts.length > 0 && orderId) {\n         const totalAmount = formData.paymentInfo.selectedProducts.reduce((sum, product) => {\n-          return sum + (product.calculatedPrice || product.price);\n+          return sum + (product.appliedPrice || product.price);\n         }, 0);\n         const receivedAmount = formData.paymentInfo.receivedAmount || totalAmount;\n         const pointPayment = formData.paymentInfo.pointPayment || 0;\n         const totalPaid = (receivedAmount - pointPayment) + pointPayment;\n"
                },
                {
                    "date": 1761459201890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,10 +371,10 @@\n               price: product.appliedPrice || product.price, // 적용된 가격 사용\n               programId: productDetails.programId,\n               programName: productDetails.programName,\n               programType: productDetails.programType,\n-              originalPrice: product.originalPrice, // 원래 가격\n-              appliedPrice: product.appliedPrice // 적용된 가격\n+              originalPrice: product.price, // 계산된 정확한 상품 가격\n+              appliedPrice: product.appliedPrice // 사용자가 조정한 적용 가격\n             };\n \n             // 기간제 상품의 경우 기간 정보 추가\n             if (product.programType === '기간제' && product.startDate && product.endDate) {\n"
                }
            ],
            "date": 1759105835943,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport CMSLayout from '../../../components/CMSLayout';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\n\nconst PageContainer = styled.div`\n  width: 100%;\n  max-width: 800px;\n  margin: 0 auto;\n`;\n\nconst PageHeader = styled.div`\n  margin-bottom: 24px;\n`;\n\nconst PageTitle = styled.h1`\n  font-size: ${AppTextStyles.title1.fontSize};\n  font-weight: 700;\n  color: ${AppColors.onBackground};\n  margin: 0 0 8px 0;\n`;\n\nconst PageDescription = styled.p`\n  font-size: ${AppTextStyles.body1.fontSize};\n  color: ${AppColors.onInput1};\n  margin: 0;\n`;\n\nconst Card = styled.div`\n  background: ${AppColors.surface};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 16px;\n  padding: 24px;\n  box-shadow: 0 1px 2px rgba(16, 24, 40, 0.04);\n`;\n\nconst FormGrid = styled.div`\n  display: grid;\n  gap: 16px;\n  grid-template-columns: 1fr;\n  \n  @media (min-width: 768px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`;\n\nconst FormField = styled.div<{ $fullWidth?: boolean }>`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  grid-column: ${props => props.$fullWidth ? '1 / -1' : 'auto'};\n`;\n\nconst Label = styled.label`\n  font-size: ${AppTextStyles.label1.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  outline: none;\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst Select = styled.select`\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  outline: none;\n  background-color: ${AppColors.surface};\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n`;\n\nconst TextArea = styled.textarea`\n  padding: 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 8px;\n  font-size: ${AppTextStyles.body1.fontSize};\n  outline: none;\n  min-height: 100px;\n  resize: vertical;\n  \n  &:focus {\n    border-color: ${AppColors.primary};\n  }\n  \n  &::placeholder {\n    color: ${AppColors.onInput1};\n  }\n`;\n\nconst CheckboxGroup = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n`;\n\nconst CheckboxLabel = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  cursor: pointer;\n`;\n\nconst Checkbox = styled.input.attrs({ type: 'checkbox' })`\n  width: 18px;\n  height: 18px;\n  accent-color: ${AppColors.primary};\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  gap: 12px;\n  justify-content: flex-end;\n  margin-top: 24px;\n`;\n\nconst Button = styled.button<{ variant?: 'primary' | 'secondary' }>`\n  padding: 12px 24px;\n  border: ${props => props.variant === 'secondary' ? `1px solid ${AppColors.borderLight}` : 'none'};\n  border-radius: 8px;\n  background: ${props => props.variant === 'secondary' ? AppColors.surface : AppColors.primary};\n  color: ${props => props.variant === 'secondary' ? AppColors.onSurface : AppColors.onPrimary};\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    opacity: 0.9;\n  }\n`;\n\ninterface MemberFormData {\n  name: string;\n  phone: string;\n  email: string;\n  birth: string;\n  gender: string;\n  address: string;\n  emergencyContact: string;\n  emergencyPhone: string;\n  tags: string[];\n  coach: string;\n  notes: string;\n}\n\nconst MemberRegister: React.FC = () => {\n  const [formData, setFormData] = useState<MemberFormData>({\n    name: '',\n    phone: '',\n    email: '',\n    birth: '',\n    gender: '',\n    address: '',\n    emergencyContact: '',\n    emergencyPhone: '',\n    tags: [],\n    coach: '',\n    notes: '',\n  });\n\n  const availableTags = ['WBM', '릴렉싱', 'VIP', '신규', '재등록'];\n  const coaches = ['한수민', '임정현', '민웅희', '김코치', '이코치'];\n\n  const handleInputChange = (field: keyof MemberFormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleTagChange = (tag: string, checked: boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      tags: checked \n        ? [...prev.tags, tag]\n        : prev.tags.filter(t => t !== tag)\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('회원 등록 데이터:', formData);\n    alert('회원이 성공적으로 등록되었습니다!');\n  };\n\n  const handleCancel = () => {\n    if (window.confirm('작성 중인 내용이 사라집니다. 정말 취소하시겠습니까?')) {\n      setFormData({\n        name: '',\n        phone: '',\n        email: '',\n        birth: '',\n        gender: '',\n        address: '',\n        emergencyContact: '',\n        emergencyPhone: '',\n        tags: [],\n        coach: '',\n        notes: '',\n      });\n    }\n  };\n\n  return (\n    <CMSLayout currentPath=\"/cms/member/register\">\n      <PageContainer>\n        <PageHeader>\n          <PageTitle>신규 회원 등록</PageTitle>\n          <PageDescription>새로운 회원의 정보를 입력하여 등록합니다.</PageDescription>\n        </PageHeader>\n\n        <Card>\n          <form onSubmit={handleSubmit}>\n            <FormGrid>\n              <FormField>\n                <Label>이름 *</Label>\n                <Input\n                  value={formData.name}\n                  onChange={(e) => handleInputChange('name', e.target.value)}\n                  placeholder=\"홍길동\"\n                  required\n                />\n              </FormField>\n\n              <FormField>\n                <Label>연락처 *</Label>\n                <Input\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={(e) => handleInputChange('phone', e.target.value)}\n                  placeholder=\"010-0000-0000\"\n                  required\n                />\n              </FormField>\n\n              <FormField>\n                <Label>이메일</Label>\n                <Input\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  placeholder=\"example@email.com\"\n                />\n              </FormField>\n\n              <FormField>\n                <Label>생년월일</Label>\n                <Input\n                  type=\"date\"\n                  value={formData.birth}\n                  onChange={(e) => handleInputChange('birth', e.target.value)}\n                />\n              </FormField>\n\n              <FormField>\n                <Label>성별</Label>\n                <Select\n                  value={formData.gender}\n                  onChange={(e) => handleInputChange('gender', e.target.value)}\n                >\n                  <option value=\"\">선택하세요</option>\n                  <option value=\"male\">남성</option>\n                  <option value=\"female\">여성</option>\n                </Select>\n              </FormField>\n\n              <FormField>\n                <Label>담당 코치</Label>\n                <Select\n                  value={formData.coach}\n                  onChange={(e) => handleInputChange('coach', e.target.value)}\n                >\n                  <option value=\"\">선택하세요</option>\n                  {coaches.map(coach => (\n                    <option key={coach} value={coach}>{coach}</option>\n                  ))}\n                </Select>\n              </FormField>\n\n              <FormField $fullWidth>\n                <Label>주소</Label>\n                <Input\n                  value={formData.address}\n                  onChange={(e) => handleInputChange('address', e.target.value)}\n                  placeholder=\"서울시 강남구...\"\n                />\n              </FormField>\n\n              <FormField>\n                <Label>비상연락처 (이름)</Label>\n                <Input\n                  value={formData.emergencyContact}\n                  onChange={(e) => handleInputChange('emergencyContact', e.target.value)}\n                  placeholder=\"김가족\"\n                />\n              </FormField>\n\n              <FormField>\n                <Label>비상연락처 (전화번호)</Label>\n                <Input\n                  type=\"tel\"\n                  value={formData.emergencyPhone}\n                  onChange={(e) => handleInputChange('emergencyPhone', e.target.value)}\n                  placeholder=\"010-0000-0000\"\n                />\n              </FormField>\n\n              <FormField $fullWidth>\n                <Label>태그</Label>\n                <CheckboxGroup>\n                  {availableTags.map(tag => (\n                    <CheckboxLabel key={tag}>\n                      <Checkbox\n                        checked={formData.tags.includes(tag)}\n                        onChange={(e) => handleTagChange(tag, e.target.checked)}\n                      />\n                      {tag}\n                    </CheckboxLabel>\n                  ))}\n                </CheckboxGroup>\n              </FormField>\n\n              <FormField $fullWidth>\n                <Label>특이사항</Label>\n                <TextArea\n                  value={formData.notes}\n                  onChange={(e) => handleInputChange('notes', e.target.value)}\n                  placeholder=\"회원에 대한 특이사항이나 주의사항을 입력하세요...\"\n                />\n              </FormField>\n            </FormGrid>\n\n            <ButtonGroup>\n              <Button type=\"button\" variant=\"secondary\" onClick={handleCancel}>\n                취소\n              </Button>\n              <Button type=\"submit\">\n                등록하기\n              </Button>\n            </ButtonGroup>\n          </form>\n        </Card>\n      </PageContainer>\n    </CMSLayout>\n  );\n};\n\nexport default MemberRegister;\n"
        }
    ]
}