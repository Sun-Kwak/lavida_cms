{
    "sourceFile": "src/pages/CMS/Terms/BusinessInfo.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760165251570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760165251570,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\nimport CustomTiptapEditor from '../../../components/Editor/CustomTiptapEditor';\nimport { toast } from 'react-toastify';\nimport { dbManager, TermsDocument } from '../../../utils/indexedDB';\nimport { devLog } from '../../../utils/devLogger';\n\nconst BusinessInfo: React.FC = () => {\n  const [content, setContent] = useState<string>(\"\");\n  const [currentDocument, setCurrentDocument] = useState<TermsDocument | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  // 문서 로딩\n  const loadDocument = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      const activeDoc = await dbManager.getActiveTermsDocument('business_info');\n      if (activeDoc) {\n        setCurrentDocument(activeDoc);\n        setContent(activeDoc.content);\n        devLog(\"사업자 정보 문서 로딩:\", activeDoc);\n      } else {\n        setCurrentDocument(null);\n        setContent(\"\");\n        devLog(\"새 사업자 정보 문서 생성 준비\");\n      }\n    } catch (err: any) {\n      devLog(\"사업자 정보 문서 로딩 실패:\", err);\n      toast.error(\"문서를 불러오는데 실패했습니다.\");\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // 문서 저장\n  const handleSave = async () => {\n    if (!content.trim()) {\n      toast.error(\"문서 내용을 입력해주세요.\");\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      \n      if (currentDocument) {\n        // 기존 문서 수정\n        const updatedDoc = await dbManager.updateTermsDocument(currentDocument.id, {\n          title: \"사업자 정보\",\n          content: content.trim(),\n          isActive: true\n        });\n\n        if (updatedDoc) {\n          setCurrentDocument(updatedDoc);\n          toast.success(\"사업자 정보가 성공적으로 수정되었습니다!\");\n        }\n      } else {\n        // 새 문서 생성\n        const newDoc = await dbManager.addTermsDocument({\n          type: 'business_info',\n          title: \"사업자 정보\",\n          content: content.trim(),\n          isActive: true\n        });\n\n        setCurrentDocument(newDoc);\n        toast.success(\"사업자 정보가 성공적으로 저장되었습니다!\");\n      }\n\n      await loadDocument();\n    } catch (err: any) {\n      devLog(\"사업자 정보 저장 실패:\", err);\n      toast.error(`문서 저장에 실패했습니다: ${err.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 에디터 내용 업데이트\n  const handleEditorUpdate = (newContent: string) => {\n    setContent(newContent);\n  };\n\n  useEffect(() => {\n    loadDocument();\n  }, [loadDocument]);\n\n  return (\n    <Container>\n      <Title>사업자 정보</Title>\n\n      {/* 저장 버튼 */}\n      <ButtonContainer>\n        <SaveButton \n          onClick={handleSave} \n          disabled={isLoading}\n        >\n          {isLoading ? \"저장 중...\" : \"저장하기\"}\n        </SaveButton>\n      </ButtonContainer>\n\n      {/* 에디터 */}\n      <EditorContainer>\n        {isLoading ? (\n          <LoadingMessage>로딩 중...</LoadingMessage>\n        ) : (\n          <CustomTiptapEditor\n            enableImageUpload={false}\n            key={`business-info-${currentDocument?.id || 'new'}`}\n            initialContent={content}\n            onEditorUpdate={handleEditorUpdate}\n            height={600}\n          />\n        )}\n      </EditorContainer>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  padding: 24px;\n  background-color: ${AppColors.surface};\n  min-height: 100vh;\n`;\n\nconst Title = styled.h1`\n  font-size: ${AppTextStyles.title1.fontSize};\n  font-weight: 700;\n  color: ${AppColors.onSurface};\n  margin: 0 0 24px 0;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  gap: 12px;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n`;\n\nconst SaveButton = styled.button`\n  padding: 12px 24px;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: bold;\n  cursor: pointer;\n  background-color: #007bff;\n  color: white;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n\n  &:disabled {\n    background-color: #6c757d;\n    cursor: not-allowed;\n  }\n`;\n\nconst EditorContainer = styled.div`\n  background-color: transparent;\n  border-radius: 8px;\n  min-height: 600px;\n  border: 1px solid #ddd;\n  padding: 20px;\n`;\n\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: #6c757d;\n  font-size: 16px;\n`;\n\nexport default BusinessInfo;\n"
        }
    ]
}