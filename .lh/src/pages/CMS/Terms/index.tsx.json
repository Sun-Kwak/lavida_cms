{
    "sourceFile": "src/pages/CMS/Terms/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1757827860791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757828417775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,502 @@\n+import React, { useEffect, useState } from \"react\";\n+import styled from \"styled-components\";\n+import CMSLayout from \"../../../components/CMSLayout\";\n+import { devLog } from \"../../../utils/devLogger\";\n+import CustomTiptapEditor from \"../../../components/Editor/CustomTiptapEditor\";\n+import { toast } from \"react-toastify\";\n+\n+type TabType = \"이용약관(KR)\" | \"이용약관(EN)\" | \"개인정보 취급방침(KR)\" | \"개인정보 취급방침(EN)\" | \"사업자 정보(KR)\" | \"사업자 정보(EN)\";\n+\n+const TAB_INDEX_MAP: Record<TabType, number> = {\n+  \"이용약관(KR)\": 1,\n+  \"이용약관(EN)\": 2,\n+  \"개인정보 취급방침(KR)\": 3,\n+  \"개인정보 취급방침(EN)\": 4,\n+  \"사업자 정보(KR)\": 5,\n+  \"사업자 정보(EN)\": 6,\n+};\n+\n+interface TermsData {\n+  index: number;\n+  content: string;\n+  termLang: 'KOR' | 'ENG';\n+  createId: string;\n+  createAt: string;\n+  updateAt: string | null;\n+  admin: {\n+    name: string;\n+    adminId: string;\n+  };\n+}\n+\n+// 더미 약관 데이터\n+const dummyTermsData: TermsData[] = [\n+  {\n+    index: 1,\n+    content: '<h2>이용약관(한국어)</h2><p>이 약관은 라비다 서비스 이용에 관한 조건을 규정합니다.</p><p>1. 서비스 이용 범위</p><p>2. 회원의 의무</p><p>3. 서비스 제공자의 의무</p>',\n+    termLang: 'KOR',\n+    createId: 'admin01',\n+    createAt: '2024-01-01T09:00:00Z',\n+    updateAt: '2024-03-01T10:00:00Z',\n+    admin: {\n+      name: '관리자',\n+      adminId: 'admin01'\n+    }\n+  },\n+  {\n+    index: 2,\n+    content: '<h2>Terms of Service (English)</h2><p>These terms govern the use of Lavida services.</p><p>1. Scope of Service Use</p><p>2. User Obligations</p><p>3. Service Provider Obligations</p>',\n+    termLang: 'ENG',\n+    createId: 'admin01',\n+    createAt: '2024-01-01T09:00:00Z',\n+    updateAt: '2024-03-01T10:00:00Z',\n+    admin: {\n+      name: '관리자',\n+      adminId: 'admin01'\n+    }\n+  },\n+  {\n+    index: 3,\n+    content: '<h2>개인정보 취급방침(한국어)</h2><p>라비다는 개인정보보호법에 따라 이용자의 개인정보를 보호합니다.</p><p>1. 개인정보 수집 항목</p><p>2. 개인정보 이용 목적</p><p>3. 개인정보 보관 기간</p>',\n+    termLang: 'KOR',\n+    createId: 'admin01',\n+    createAt: '2024-01-01T09:00:00Z',\n+    updateAt: '2024-03-01T10:00:00Z',\n+    admin: {\n+      name: '관리자',\n+      adminId: 'admin01'\n+    }\n+  },\n+  {\n+    index: 4,\n+    content: '<h2>Privacy Policy (English)</h2><p>Lavida protects user personal information in accordance with privacy protection laws.</p><p>1. Personal Information Collection Items</p><p>2. Purpose of Using Personal Information</p><p>3. Personal Information Storage Period</p>',\n+    termLang: 'ENG',\n+    createId: 'admin01',\n+    createAt: '2024-01-01T09:00:00Z',\n+    updateAt: '2024-03-01T10:00:00Z',\n+    admin: {\n+      name: '관리자',\n+      adminId: 'admin01'\n+    }\n+  },\n+  {\n+    index: 5,\n+    content: '<h2>사업자 정보(한국어)</h2><p>상호: 라비다</p><p>대표자: 홍길동</p><p>사업자등록번호: 123-45-67890</p><p>주소: 서울특별시 강남구 테헤란로 123</p><p>연락처: 02-1234-5678</p>',\n+    termLang: 'KOR',\n+    createId: 'admin01',\n+    createAt: '2024-01-01T09:00:00Z',\n+    updateAt: '2024-03-01T10:00:00Z',\n+    admin: {\n+      name: '관리자',\n+      adminId: 'admin01'\n+    }\n+  },\n+  {\n+    index: 6,\n+    content: '<h2>Business Information (English)</h2><p>Company Name: Lavida</p><p>Representative: Hong Gil-dong</p><p>Business Registration Number: 123-45-67890</p><p>Address: 123 Teheran-ro, Gangnam-gu, Seoul</p><p>Contact: 02-1234-5678</p>',\n+    termLang: 'ENG',\n+    createId: 'admin01',\n+    createAt: '2024-01-01T09:00:00Z',\n+    updateAt: '2024-03-01T10:00:00Z',\n+    admin: {\n+      name: '관리자',\n+      adminId: 'admin01'\n+    }\n+  }\n+];\n+\n+// 더미 API 함수들\n+const getTermsList = async (): Promise<any> => {\n+  await new Promise(resolve => setTimeout(resolve, 500));\n+  \n+  return {\n+    data: {\n+      statusCode: 200,\n+      message: \"success\",\n+      data: dummyTermsData\n+    }\n+  };\n+};\n+\n+const createTerms = async (index: number, data: { content: string; termLang: 'KOR' | 'ENG' }): Promise<any> => {\n+  await new Promise(resolve => setTimeout(resolve, 500));\n+  \n+  // 해당 인덱스의 약관 데이터 업데이트\n+  const termIndex = dummyTermsData.findIndex(term => term.index === index);\n+  if (termIndex !== -1) {\n+    dummyTermsData[termIndex] = {\n+      ...dummyTermsData[termIndex],\n+      content: data.content,\n+      updateAt: new Date().toISOString()\n+    };\n+  } else {\n+    // 새로운 약관 추가\n+    const newTerm: TermsData = {\n+      index,\n+      content: data.content,\n+      termLang: data.termLang,\n+      createId: 'admin01',\n+      createAt: new Date().toISOString(),\n+      updateAt: new Date().toISOString(),\n+      admin: {\n+        name: '관리자',\n+        adminId: 'admin01'\n+      }\n+    };\n+    dummyTermsData.push(newTerm);\n+  }\n+  \n+  return {\n+    data: {\n+      statusCode: 200,\n+      message: \"success\"\n+    }\n+  };\n+};\n+\n+const TermsPage: React.FC = () => {\n+  const [selectedTab, setSelectedTab] = useState<TabType>(\"이용약관(KR)\");\n+  const [content, setContent] = useState<string>(\"\");\n+  const [termsData, setTermsData] = useState<TermsData[]>([]);\n+  const [selectedTermsIndex, setSelectedTermsIndex] = useState<number | null>(1);\n+  const [isLoading, setIsLoading] = useState<boolean>(true); // 초기 로딩 상태를 true로 설정\n+  const [error, setError] = useState<string | null>(null);\n+  const [isInitialLoad, setIsInitialLoad] = useState<boolean>(true); // 초기 로딩 완료 여부\n+\n+  // 약관 저장\n+  const handleSave = async () => {\n+    if (!selectedTermsIndex) {\n+      toast.error(\"선택된 약관이 없습니다.\");\n+      return;\n+    }\n+\n+    if (!content || content.trim() === \"\") {\n+      toast.error(\"약관 내용을 입력해주세요.\");\n+      return;\n+    }\n+\n+    try {\n+      setIsLoading(true);\n+      \n+      // 현재 선택된 탭의 언어 확인\n+      const currentTab = selectedTab;\n+      const termLang = currentTab.includes(\"(KR)\") ? \"KOR\" : \"ENG\";\n+      \n+      devLog(\"약관 저장:\", { \n+        selectedTermsIndex, \n+        content: content.substring(0, 100) + \"...\", // 내용이 길 수 있으므로 일부만 로그\n+        termLang,\n+        selectedTab \n+      });\n+      \n+      const response = await createTerms(selectedTermsIndex, {\n+        content: content,\n+        termLang: termLang\n+      });\n+      \n+      // API 응답 구조 확인: statusCode가 200이고 message가 \"success\"일 때만 성공\n+      if (response?.data?.statusCode === 200 && response?.data?.message === \"success\") {\n+        devLog(\"약관 저장 성공:\", response);\n+        toast.success(\"저장되었습니다!\");\n+        \n+        // 저장 후 데이터 새로고침 (단순 데이터만 업데이트)\n+        const refreshResponse = await getTermsList();\n+        if (refreshResponse && refreshResponse.data && refreshResponse.data.data && Array.isArray(refreshResponse.data.data)) {\n+          setTermsData(refreshResponse.data.data);\n+          devLog(\"저장 후 데이터 새로고침 완료:\", refreshResponse.data.data);\n+        }\n+      } else {\n+        // statusCode가 200이 아니거나 message가 \"success\"가 아닌 경우\n+        const errorMessage = response?.data?.error?.customMessage || \n+                            response?.data?.message || \n+                            '저장 처리 중 오류가 발생했습니다.';\n+        devLog(\"약관 저장 실패 (API 응답):\", response);\n+        toast.error(`저장에 실패했습니다. (${errorMessage})`);\n+      }\n+      \n+    } catch (err: any) {\n+      devLog(\"약관 저장 실패:\", err);\n+      \n+      // callApi에서 던진 에러 처리\n+      const errorMessage = err?.data?.error?.customMessage || \n+                          err?.data?.message ||\n+                          err?.response?.data?.error?.customMessage || \n+                          err?.response?.data?.message || \n+                          err?.message || \n+                          '네트워크 오류가 발생했습니다.';\n+      \n+      toast.error(`저장에 실패했습니다. (${errorMessage})`);\n+    } finally {\n+      setIsLoading(false);\n+    }\n+  };  // 탭 클릭 핸들러\n+  const handleTabClick = (tab: TabType) => {\n+    devLog(\"탭 클릭:\", tab);\n+    devLog(\"현재 termsData:\", termsData);\n+    devLog(\"termsData 타입:\", typeof termsData);\n+    devLog(\"termsData Array.isArray:\", Array.isArray(termsData));\n+    \n+    setSelectedTab(tab);\n+    const tabIndex = TAB_INDEX_MAP[tab];\n+    devLog(\"선택된 탭 인덱스:\", tabIndex);\n+\n+    // termsData가 배열인지 확인\n+    if (!Array.isArray(termsData)) {\n+      devLog(\"termsData가 배열이 아님:\", termsData);\n+      setContent(\"\");\n+      setSelectedTermsIndex(tabIndex);\n+      return;\n+    }\n+\n+    const selectedTerm = termsData.find((term) => Number(term.index) === tabIndex);\n+    devLog(\"선택된 약관:\", selectedTerm);\n+\n+    if (selectedTerm) {\n+      devLog(\"약관 내용 설정:\", selectedTerm.content);\n+      setContent(selectedTerm.content);\n+      setSelectedTermsIndex(Number(selectedTerm.index));\n+    } else {\n+      // 해당 인덱스의 약관이 없으면 빈 내용으로 설정\n+      devLog(\"해당 인덱스의 약관이 없음, 빈 내용으로 설정\");\n+      setContent(\"\");\n+      setSelectedTermsIndex(tabIndex);\n+    }\n+  };\n+\n+  // 에디터 내용 업데이트 핸들러\n+  const handleEditorUpdate = (newContent: string) => {\n+    setContent(newContent);\n+  };\n+\n+  // 컴포넌트 마운트 시 약관 데이터 조회\n+  useEffect(() => {\n+    devLog(\"컴포넌트 마운트 - 약관 데이터 조회\");\n+    \n+    const initializeData = async () => {\n+      try {\n+        setIsLoading(true);\n+        setError(null);\n+        devLog(\"약관 데이터 조회 시작\");\n+        \n+        const response = await getTermsList();\n+        devLog(\"약관 데이터 조회 응답:\", response);\n+        \n+        if (response && response.data && response.data.data && Array.isArray(response.data.data)) {\n+          setTermsData(response.data.data);\n+          devLog(\"약관 데이터 설정 완료:\", response.data.data);\n+          \n+          // 데이터 로딩 완료 후 즉시 현재 탭의 컨텐츠 설정\n+          const tabIndex = TAB_INDEX_MAP[selectedTab];\n+          const selectedTerm = response.data.data.find((term: TermsData) => Number(term.index) === tabIndex);\n+          if (selectedTerm) {\n+            devLog(\"초기 로딩 완료 - 약관 내용 설정:\", selectedTerm.content);\n+            setContent(selectedTerm.content);\n+            setSelectedTermsIndex(selectedTerm.index);\n+          } else {\n+            devLog(\"초기 로딩 완료 - 해당 인덱스의 약관이 없음\");\n+            setContent(\"\");\n+            setSelectedTermsIndex(tabIndex);\n+          }\n+        } else {\n+          devLog(\"응답 데이터가 배열이 아님:\", response);\n+          setTermsData([]);\n+          setContent(\"\");\n+          setSelectedTermsIndex(TAB_INDEX_MAP[selectedTab]);\n+        }\n+        \n+        setIsInitialLoad(false);\n+      } catch (err) {\n+        devLog(\"약관 데이터 조회 실패:\", err);\n+        setError(\"약관 데이터를 불러오는데 실패했습니다.\");\n+        setTermsData([]);\n+        setContent(\"\");\n+        setSelectedTermsIndex(TAB_INDEX_MAP[selectedTab]);\n+        setIsInitialLoad(false);\n+      } finally {\n+        setIsLoading(false);\n+      }\n+    };\n+    \n+    initializeData();\n+  }, [selectedTab]); // selectedTab 의존성 추가\n+\n+  // 탭 변경 시 약관 내용 업데이트 (저장 후 새로고침 제외)\n+  useEffect(() => {\n+    devLog(\"탭 변경:\", { \n+      selectedTab, \n+      termsDataLength: Array.isArray(termsData) ? termsData.length : 0,\n+      isInitialLoad\n+    });\n+    \n+    // 초기 로딩 중이거나 데이터가 없으면 업데이트하지 않음\n+    if (isInitialLoad || !Array.isArray(termsData) || termsData.length === 0) {\n+      devLog(\"초기 로딩 중이거나 데이터가 없으므로 컨텐츠 업데이트 건너뜀\");\n+      return;\n+    }\n+    \n+    const tabIndex = TAB_INDEX_MAP[selectedTab];\n+    const selectedTerm = termsData.find((term) => Number(term.index) === tabIndex);\n+    devLog(\"탭 변경으로 인한 약관 선택:\", selectedTerm);\n+    \n+    if (selectedTerm) {\n+      devLog(\"탭 변경 - 약관 내용 설정:\", selectedTerm.content);\n+      setContent(selectedTerm.content);\n+      setSelectedTermsIndex(selectedTerm.index);\n+    } else {\n+      devLog(\"탭 변경 - 해당 인덱스의 약관이 없음\");\n+      setContent(\"\");\n+      setSelectedTermsIndex(tabIndex);\n+    }\n+  }, [selectedTab, termsData, isInitialLoad]);\n+\n+  return (\n+    <CMSLayout currentPath=\"/cms/terms\">\n+      <TermsPageContainer>\n+        {error && <ErrorMessage>{error}</ErrorMessage>}\n+        <TabContainer>\n+          <TabButton $isActive={selectedTab === \"이용약관(KR)\"} onClick={() => handleTabClick(\"이용약관(KR)\")}>\n+            이용약관(KR)\n+          </TabButton>\n+          <TabButton $isActive={selectedTab === \"이용약관(EN)\"} onClick={() => handleTabClick(\"이용약관(EN)\")}>\n+            이용약관(EN)\n+          </TabButton>\n+          <TabButton\n+            $isActive={selectedTab === \"개인정보 취급방침(KR)\"}\n+            onClick={() => handleTabClick(\"개인정보 취급방침(KR)\")}>\n+            개인정보 취급방침(KR)\n+          </TabButton>\n+          <TabButton\n+            $isActive={selectedTab === \"개인정보 취급방침(EN)\"}\n+            onClick={() => handleTabClick(\"개인정보 취급방침(EN)\")}>\n+            개인정보 취급방침(EN)\n+          </TabButton>\n+          <TabButton $isActive={selectedTab === \"사업자 정보(KR)\"} onClick={() => handleTabClick(\"사업자 정보(KR)\")}>\n+            사업자 정보(KR)\n+          </TabButton>\n+          <TabButton $isActive={selectedTab === \"사업자 정보(EN)\"} onClick={() => handleTabClick(\"사업자 정보(EN)\")}>\n+            사업자 정보(EN)\n+          </TabButton>\n+          <ButtonContainer>\n+            <SaveButton onClick={handleSave} disabled={!selectedTermsIndex || isLoading}>\n+              {isLoading ? \"저장 중...\" : \"저장하기\"}\n+            </SaveButton>\n+          </ButtonContainer>\n+        </TabContainer>\n+\n+        <EditorContainer>\n+          {isLoading || isInitialLoad ? (\n+            <LoadingMessage>로딩 중...</LoadingMessage>\n+          ) : (\n+            <EditorWrapper>\n+              <CustomTiptapEditor\n+              enableImageUpload={false}\n+                key={`${selectedTermsIndex}-${selectedTab}`} \n+                initialContent={content} \n+                onEditorUpdate={handleEditorUpdate}\n+                height={700} // 에디터 높이를 600px로 설정\n+              />\n+            </EditorWrapper>\n+          )}\n+        </EditorContainer>\n+      </TermsPageContainer>\n+    </CMSLayout>\n+  );\n+};\n+\n+const TermsPageContainer = styled.div`\n+  min-width: 1200px;\n+  width: 100%;\n+`;\n+\n+const TabContainer = styled.div`\n+  display: flex;\n+  gap: 8px;\n+  padding: 16px;\n+  border-radius: 8px;\n+  border-bottom: 1px solid #ddd;\n+  margin-bottom: 20px;\n+  flex-wrap: wrap;\n+  align-items: center;\n+`;\n+\n+const TabButton = styled.button<{ $isActive: boolean }>`\n+  padding: 10px 16px;\n+  border: none;\n+  border-radius: 0;\n+  background-color: transparent;\n+  color: ${({ $isActive }) => ($isActive ? \"#000000\" : \"#b6b6b6\")};\n+  font-size: 13px;\n+  font-weight: ${({ $isActive }) => ($isActive ? \"bold\" : \"normal\")};\n+  cursor: pointer;\n+  display: flex;\n+  align-items: center;\n+  gap: 4px;\n+  border-bottom: ${({ $isActive }) => ($isActive ? \"2px solid #000000\" : \"none\")};\n+  white-space: nowrap;\n+\n+  &:hover {\n+    color: ${({ $isActive }) => ($isActive ? \"#000000\" : \"#666666\")};\n+  }\n+`;\n+\n+const EditorContainer = styled.div`\n+  background-color: transparent;\n+  border-radius: 8px;\n+  //   padding: 24px;\n+  min-height: 600px;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 20px;\n+`;\n+\n+const EditorWrapper = styled.div`\n+  flex: 1;\n+  border: 1px solid #ddd;\n+  border-radius: 8px;\n+  padding: 20px;\n+`;\n+\n+const ButtonContainer = styled.div`\n+  display: flex;\n+  justify-content: flex-end;\n+  margin-left: auto;\n+`;\n+\n+const SaveButton = styled.button`\n+  padding: 12px 24px;\n+  background-color: #000000;\n+  color: white;\n+  border: none;\n+  border-radius: 8px;\n+  font-size: 14px;\n+  font-weight: bold;\n+  cursor: pointer;\n+  display: flex;\n+  align-items: center;\n+  gap: 4px;\n+\n+  &:hover {\n+    background-color: #333333;\n+  }\n+\n+  &:disabled {\n+    background-color: #cccccc;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const LoadingMessage = styled.div`\n+  text-align: center;\n+  padding: 20px;\n+  color: #6c757d;\n+`;\n+\n+const ErrorMessage = styled.div`\n+  background-color: #f8d7da;\n+  color: #721c24;\n+  padding: 10px;\n+  border-radius: 5px;\n+  margin-bottom: 20px;\n+`;\n+\n+export default TermsPage;\n"
                },
                {
                    "date": 1760164637516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,400 +1,371 @@\n-import React, { useEffect, useState } from \"react\";\n+import React, { useEffect, useState, useCallback } from \"react\";\n import styled from \"styled-components\";\n import CMSLayout from \"../../../components/CMSLayout\";\n import { devLog } from \"../../../utils/devLogger\";\n import CustomTiptapEditor from \"../../../components/Editor/CustomTiptapEditor\";\n import { toast } from \"react-toastify\";\n+import { dbManager, TermsDocument } from \"../../../utils/indexedDB\";\n \n-type TabType = \"이용약관(KR)\" | \"이용약관(EN)\" | \"개인정보 취급방침(KR)\" | \"개인정보 취급방침(EN)\" | \"사업자 정보(KR)\" | \"사업자 정보(EN)\";\n+type DocumentType = \"privacy_policy\" | \"terms_of_service\" | \"business_info\" | \"marketing_consent\" | \"member_terms\" | \"contract\";\n \n-const TAB_INDEX_MAP: Record<TabType, number> = {\n-  \"이용약관(KR)\": 1,\n-  \"이용약관(EN)\": 2,\n-  \"개인정보 취급방침(KR)\": 3,\n-  \"개인정보 취급방침(EN)\": 4,\n-  \"사업자 정보(KR)\": 5,\n-  \"사업자 정보(EN)\": 6,\n-};\n-\n-interface TermsData {\n-  index: number;\n-  content: string;\n-  termLang: 'KOR' | 'ENG';\n-  createId: string;\n-  createAt: string;\n-  updateAt: string | null;\n-  admin: {\n-    name: string;\n-    adminId: string;\n-  };\n+interface DocumentTab {\n+  type: DocumentType;\n+  label: string;\n+  description: string;\n }\n \n-// 더미 약관 데이터\n-const dummyTermsData: TermsData[] = [\n-  {\n-    index: 1,\n-    content: '<h2>이용약관(한국어)</h2><p>이 약관은 라비다 서비스 이용에 관한 조건을 규정합니다.</p><p>1. 서비스 이용 범위</p><p>2. 회원의 의무</p><p>3. 서비스 제공자의 의무</p>',\n-    termLang: 'KOR',\n-    createId: 'admin01',\n-    createAt: '2024-01-01T09:00:00Z',\n-    updateAt: '2024-03-01T10:00:00Z',\n-    admin: {\n-      name: '관리자',\n-      adminId: 'admin01'\n-    }\n-  },\n-  {\n-    index: 2,\n-    content: '<h2>Terms of Service (English)</h2><p>These terms govern the use of Lavida services.</p><p>1. Scope of Service Use</p><p>2. User Obligations</p><p>3. Service Provider Obligations</p>',\n-    termLang: 'ENG',\n-    createId: 'admin01',\n-    createAt: '2024-01-01T09:00:00Z',\n-    updateAt: '2024-03-01T10:00:00Z',\n-    admin: {\n-      name: '관리자',\n-      adminId: 'admin01'\n-    }\n-  },\n-  {\n-    index: 3,\n-    content: '<h2>개인정보 취급방침(한국어)</h2><p>라비다는 개인정보보호법에 따라 이용자의 개인정보를 보호합니다.</p><p>1. 개인정보 수집 항목</p><p>2. 개인정보 이용 목적</p><p>3. 개인정보 보관 기간</p>',\n-    termLang: 'KOR',\n-    createId: 'admin01',\n-    createAt: '2024-01-01T09:00:00Z',\n-    updateAt: '2024-03-01T10:00:00Z',\n-    admin: {\n-      name: '관리자',\n-      adminId: 'admin01'\n-    }\n-  },\n-  {\n-    index: 4,\n-    content: '<h2>Privacy Policy (English)</h2><p>Lavida protects user personal information in accordance with privacy protection laws.</p><p>1. Personal Information Collection Items</p><p>2. Purpose of Using Personal Information</p><p>3. Personal Information Storage Period</p>',\n-    termLang: 'ENG',\n-    createId: 'admin01',\n-    createAt: '2024-01-01T09:00:00Z',\n-    updateAt: '2024-03-01T10:00:00Z',\n-    admin: {\n-      name: '관리자',\n-      adminId: 'admin01'\n-    }\n-  },\n-  {\n-    index: 5,\n-    content: '<h2>사업자 정보(한국어)</h2><p>상호: 라비다</p><p>대표자: 홍길동</p><p>사업자등록번호: 123-45-67890</p><p>주소: 서울특별시 강남구 테헤란로 123</p><p>연락처: 02-1234-5678</p>',\n-    termLang: 'KOR',\n-    createId: 'admin01',\n-    createAt: '2024-01-01T09:00:00Z',\n-    updateAt: '2024-03-01T10:00:00Z',\n-    admin: {\n-      name: '관리자',\n-      adminId: 'admin01'\n-    }\n-  },\n-  {\n-    index: 6,\n-    content: '<h2>Business Information (English)</h2><p>Company Name: Lavida</p><p>Representative: Hong Gil-dong</p><p>Business Registration Number: 123-45-67890</p><p>Address: 123 Teheran-ro, Gangnam-gu, Seoul</p><p>Contact: 02-1234-5678</p>',\n-    termLang: 'ENG',\n-    createId: 'admin01',\n-    createAt: '2024-01-01T09:00:00Z',\n-    updateAt: '2024-03-01T10:00:00Z',\n-    admin: {\n-      name: '관리자',\n-      adminId: 'admin01'\n-    }\n-  }\n+const DOCUMENT_TABS: DocumentTab[] = [\n+  { type: \"privacy_policy\", label: \"개인정보 처리방침\", description: \"개인정보 수집, 이용, 처리에 관한 방침\" },\n+  { type: \"terms_of_service\", label: \"서비스 이용약관\", description: \"서비스 이용에 관한 약관\" },\n+  { type: \"business_info\", label: \"사업자 정보\", description: \"사업자 등록 정보 및 연락처\" },\n+  { type: \"marketing_consent\", label: \"마케팅 활용 동의\", description: \"마케팅 목적의 개인정보 활용 동의서\" },\n+  { type: \"member_terms\", label: \"회원 이용약관\", description: \"회원가입 및 회원 서비스 이용약관\" },\n+  { type: \"contract\", label: \"계약서\", description: \"서비스 계약서 템플릿\" }\n ];\n \n-// 더미 API 함수들\n-const getTermsList = async (): Promise<any> => {\n-  await new Promise(resolve => setTimeout(resolve, 500));\n-  \n-  return {\n-    data: {\n-      statusCode: 200,\n-      message: \"success\",\n-      data: dummyTermsData\n+const TermsPage: React.FC = () => {\n+  const [selectedTab, setSelectedTab] = useState<DocumentType>(\"privacy_policy\");\n+  const [content, setContent] = useState<string>(\"\");\n+  const [title, setTitle] = useState<string>(\"\");\n+  const [currentDocument, setCurrentDocument] = useState<TermsDocument | null>(null);\n+  const [allDocuments, setAllDocuments] = useState<TermsDocument[]>([]);\n+  const [isLoading, setIsLoading] = useState<boolean>(false);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  // 문서 목록 로딩\n+  const loadDocuments = async () => {\n+    try {\n+      setIsLoading(true);\n+      setError(null);\n+      const documents = await dbManager.getAllTermsDocuments();\n+      setAllDocuments(documents);\n+      devLog(\"문서 목록 로딩 완료:\", documents);\n+    } catch (err: any) {\n+      devLog(\"문서 목록 로딩 실패:\", err);\n+      setError(\"문서 목록을 불러오는데 실패했습니다.\");\n+      toast.error(\"문서 목록을 불러오는데 실패했습니다.\");\n+    } finally {\n+      setIsLoading(false);\n     }\n   };\n-};\n \n-const createTerms = async (index: number, data: { content: string; termLang: 'KOR' | 'ENG' }): Promise<any> => {\n-  await new Promise(resolve => setTimeout(resolve, 500));\n-  \n-  // 해당 인덱스의 약관 데이터 업데이트\n-  const termIndex = dummyTermsData.findIndex(term => term.index === index);\n-  if (termIndex !== -1) {\n-    dummyTermsData[termIndex] = {\n-      ...dummyTermsData[termIndex],\n-      content: data.content,\n-      updateAt: new Date().toISOString()\n-    };\n-  } else {\n-    // 새로운 약관 추가\n-    const newTerm: TermsData = {\n-      index,\n-      content: data.content,\n-      termLang: data.termLang,\n-      createId: 'admin01',\n-      createAt: new Date().toISOString(),\n-      updateAt: new Date().toISOString(),\n-      admin: {\n-        name: '관리자',\n-        adminId: 'admin01'\n+  // 현재 선택된 탭에 해당하는 문서 로딩\n+  const loadCurrentDocument = useCallback(async () => {\n+    try {\n+      const activeDoc = await dbManager.getActiveTermsDocument(selectedTab);\n+      if (activeDoc) {\n+        setCurrentDocument(activeDoc);\n+        setContent(activeDoc.content);\n+        setTitle(activeDoc.title);\n+        devLog(\"현재 문서 로딩:\", activeDoc);\n+      } else {\n+        // 해당 타입의 활성 문서가 없으면 기본값 설정\n+        const currentTabInfo = DOCUMENT_TABS.find(tab => tab.type === selectedTab);\n+        const defaultTitle = currentTabInfo?.label || \"\";\n+        \n+        setCurrentDocument(null);\n+        setContent(\"\");\n+        setTitle(defaultTitle);\n+        devLog(\"새 문서 생성 준비:\", { selectedTab, defaultTitle });\n       }\n-    };\n-    dummyTermsData.push(newTerm);\n-  }\n-  \n-  return {\n-    data: {\n-      statusCode: 200,\n-      message: \"success\"\n+    } catch (err: any) {\n+      devLog(\"현재 문서 로딩 실패:\", err);\n+      toast.error(\"문서를 불러오는데 실패했습니다.\");\n     }\n-  };\n-};\n+  }, [selectedTab]);\n \n-const TermsPage: React.FC = () => {\n-  const [selectedTab, setSelectedTab] = useState<TabType>(\"이용약관(KR)\");\n-  const [content, setContent] = useState<string>(\"\");\n-  const [termsData, setTermsData] = useState<TermsData[]>([]);\n-  const [selectedTermsIndex, setSelectedTermsIndex] = useState<number | null>(1);\n-  const [isLoading, setIsLoading] = useState<boolean>(true); // 초기 로딩 상태를 true로 설정\n-  const [error, setError] = useState<string | null>(null);\n-  const [isInitialLoad, setIsInitialLoad] = useState<boolean>(true); // 초기 로딩 완료 여부\n-\n-  // 약관 저장\n+  // 문서 저장\n   const handleSave = async () => {\n-    if (!selectedTermsIndex) {\n-      toast.error(\"선택된 약관이 없습니다.\");\n+    if (!title.trim()) {\n+      toast.error(\"문서 제목을 입력해주세요.\");\n       return;\n     }\n \n-    if (!content || content.trim() === \"\") {\n-      toast.error(\"약관 내용을 입력해주세요.\");\n+    if (!content.trim()) {\n+      toast.error(\"문서 내용을 입력해주세요.\");\n       return;\n     }\n \n     try {\n       setIsLoading(true);\n-      \n-      // 현재 선택된 탭의 언어 확인\n-      const currentTab = selectedTab;\n-      const termLang = currentTab.includes(\"(KR)\") ? \"KOR\" : \"ENG\";\n-      \n-      devLog(\"약관 저장:\", { \n-        selectedTermsIndex, \n-        content: content.substring(0, 100) + \"...\", // 내용이 길 수 있으므로 일부만 로그\n-        termLang,\n-        selectedTab \n+      devLog(\"문서 저장 시작:\", { \n+        selectedTab, \n+        title,\n+        contentLength: content.length,\n+        isNewDocument: !currentDocument\n       });\n-      \n-      const response = await createTerms(selectedTermsIndex, {\n-        content: content,\n-        termLang: termLang\n-      });\n-      \n-      // API 응답 구조 확인: statusCode가 200이고 message가 \"success\"일 때만 성공\n-      if (response?.data?.statusCode === 200 && response?.data?.message === \"success\") {\n-        devLog(\"약관 저장 성공:\", response);\n-        toast.success(\"저장되었습니다!\");\n-        \n-        // 저장 후 데이터 새로고침 (단순 데이터만 업데이트)\n-        const refreshResponse = await getTermsList();\n-        if (refreshResponse && refreshResponse.data && refreshResponse.data.data && Array.isArray(refreshResponse.data.data)) {\n-          setTermsData(refreshResponse.data.data);\n-          devLog(\"저장 후 데이터 새로고침 완료:\", refreshResponse.data.data);\n+\n+      if (currentDocument) {\n+        // 기존 문서 수정\n+        const updatedDoc = await dbManager.updateTermsDocument(currentDocument.id, {\n+          title: title.trim(),\n+          content: content.trim(),\n+          isActive: true\n+        });\n+\n+        if (updatedDoc) {\n+          setCurrentDocument(updatedDoc);\n+          toast.success(\"문서가 성공적으로 수정되었습니다!\");\n+          devLog(\"문서 수정 성공:\", updatedDoc);\n         }\n       } else {\n-        // statusCode가 200이 아니거나 message가 \"success\"가 아닌 경우\n-        const errorMessage = response?.data?.error?.customMessage || \n-                            response?.data?.message || \n-                            '저장 처리 중 오류가 발생했습니다.';\n-        devLog(\"약관 저장 실패 (API 응답):\", response);\n-        toast.error(`저장에 실패했습니다. (${errorMessage})`);\n+        // 새 문서 생성\n+        const newDoc = await dbManager.addTermsDocument({\n+          type: selectedTab,\n+          title: title.trim(),\n+          content: content.trim(),\n+          isActive: true\n+        });\n+\n+        setCurrentDocument(newDoc);\n+        toast.success(\"문서가 성공적으로 저장되었습니다!\");\n+        devLog(\"새 문서 생성 성공:\", newDoc);\n       }\n+\n+      // 문서 목록 새로고침\n+      await loadDocuments();\n       \n     } catch (err: any) {\n-      devLog(\"약관 저장 실패:\", err);\n+      devLog(\"문서 저장 실패:\", err);\n+      toast.error(`문서 저장에 실패했습니다: ${err.message}`);\n+    } finally {\n+      setIsLoading(false);\n+    }\n+  };\n+\n+  // 문서 삭제\n+  const handleDelete = async () => {\n+    if (!currentDocument) {\n+      toast.error(\"삭제할 문서가 없습니다.\");\n+      return;\n+    }\n+\n+    if (!window.confirm(\"정말로 이 문서를 삭제하시겠습니까?\")) {\n+      return;\n+    }\n+\n+    try {\n+      setIsLoading(true);\n+      await dbManager.deleteTermsDocument(currentDocument.id);\n       \n-      // callApi에서 던진 에러 처리\n-      const errorMessage = err?.data?.error?.customMessage || \n-                          err?.data?.message ||\n-                          err?.response?.data?.error?.customMessage || \n-                          err?.response?.data?.message || \n-                          err?.message || \n-                          '네트워크 오류가 발생했습니다.';\n+      toast.success(\"문서가 성공적으로 삭제되었습니다!\");\n+      devLog(\"문서 삭제 성공:\", currentDocument.id);\n+\n+      // 상태 초기화\n+      setCurrentDocument(null);\n+      setContent(\"\");\n+      const currentTabInfo = DOCUMENT_TABS.find(tab => tab.type === selectedTab);\n+      const defaultTitle = currentTabInfo?.label || \"\";\n+      setTitle(defaultTitle);\n+\n+      // 문서 목록 새로고침\n+      await loadDocuments();\n       \n-      toast.error(`저장에 실패했습니다. (${errorMessage})`);\n+    } catch (err: any) {\n+      devLog(\"문서 삭제 실패:\", err);\n+      toast.error(`문서 삭제에 실패했습니다: ${err.message}`);\n     } finally {\n       setIsLoading(false);\n     }\n-  };  // 탭 클릭 핸들러\n-  const handleTabClick = (tab: TabType) => {\n-    devLog(\"탭 클릭:\", tab);\n-    devLog(\"현재 termsData:\", termsData);\n-    devLog(\"termsData 타입:\", typeof termsData);\n-    devLog(\"termsData Array.isArray:\", Array.isArray(termsData));\n-    \n-    setSelectedTab(tab);\n-    const tabIndex = TAB_INDEX_MAP[tab];\n-    devLog(\"선택된 탭 인덱스:\", tabIndex);\n+  };\n \n-    // termsData가 배열인지 확인\n-    if (!Array.isArray(termsData)) {\n-      devLog(\"termsData가 배열이 아님:\", termsData);\n-      setContent(\"\");\n-      setSelectedTermsIndex(tabIndex);\n+  // 새 버전 생성\n+  const handleCreateNewVersion = async () => {\n+    if (!currentDocument) {\n+      toast.error(\"기반이 될 문서가 없습니다.\");\n       return;\n     }\n \n-    const selectedTerm = termsData.find((term) => Number(term.index) === tabIndex);\n-    devLog(\"선택된 약관:\", selectedTerm);\n+    try {\n+      setIsLoading(true);\n+      \n+      const newDoc = await dbManager.addTermsDocument({\n+        type: currentDocument.type,\n+        title: currentDocument.title,\n+        content: currentDocument.content,\n+        isActive: true\n+      });\n \n-    if (selectedTerm) {\n-      devLog(\"약관 내용 설정:\", selectedTerm.content);\n-      setContent(selectedTerm.content);\n-      setSelectedTermsIndex(Number(selectedTerm.index));\n-    } else {\n-      // 해당 인덱스의 약관이 없으면 빈 내용으로 설정\n-      devLog(\"해당 인덱스의 약관이 없음, 빈 내용으로 설정\");\n-      setContent(\"\");\n-      setSelectedTermsIndex(tabIndex);\n+      setCurrentDocument(newDoc);\n+      toast.success(`새 버전 (v${newDoc.version})이 생성되었습니다!`);\n+      devLog(\"새 버전 생성 성공:\", newDoc);\n+\n+      // 문서 목록 새로고침\n+      await loadDocuments();\n+      \n+    } catch (err: any) {\n+      devLog(\"새 버전 생성 실패:\", err);\n+      toast.error(`새 버전 생성에 실패했습니다: ${err.message}`);\n+    } finally {\n+      setIsLoading(false);\n     }\n   };\n \n+  // 탭 클릭 핸들러\n+  const handleTabClick = (documentType: DocumentType) => {\n+    setSelectedTab(documentType);\n+    devLog(\"탭 변경:\", { documentType });\n+  };\n+\n   // 에디터 내용 업데이트 핸들러\n   const handleEditorUpdate = (newContent: string) => {\n     setContent(newContent);\n   };\n \n-  // 컴포넌트 마운트 시 약관 데이터 조회\n+  // 제목 변경 핸들러\n+  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n+    setTitle(e.target.value);\n+  };\n+\n+  // 컴포넌트 마운트 시 문서 목록 로딩\n   useEffect(() => {\n-    devLog(\"컴포넌트 마운트 - 약관 데이터 조회\");\n-    \n-    const initializeData = async () => {\n-      try {\n-        setIsLoading(true);\n-        setError(null);\n-        devLog(\"약관 데이터 조회 시작\");\n-        \n-        const response = await getTermsList();\n-        devLog(\"약관 데이터 조회 응답:\", response);\n-        \n-        if (response && response.data && response.data.data && Array.isArray(response.data.data)) {\n-          setTermsData(response.data.data);\n-          devLog(\"약관 데이터 설정 완료:\", response.data.data);\n-          \n-          // 데이터 로딩 완료 후 즉시 현재 탭의 컨텐츠 설정\n-          const tabIndex = TAB_INDEX_MAP[selectedTab];\n-          const selectedTerm = response.data.data.find((term: TermsData) => Number(term.index) === tabIndex);\n-          if (selectedTerm) {\n-            devLog(\"초기 로딩 완료 - 약관 내용 설정:\", selectedTerm.content);\n-            setContent(selectedTerm.content);\n-            setSelectedTermsIndex(selectedTerm.index);\n-          } else {\n-            devLog(\"초기 로딩 완료 - 해당 인덱스의 약관이 없음\");\n-            setContent(\"\");\n-            setSelectedTermsIndex(tabIndex);\n-          }\n-        } else {\n-          devLog(\"응답 데이터가 배열이 아님:\", response);\n-          setTermsData([]);\n-          setContent(\"\");\n-          setSelectedTermsIndex(TAB_INDEX_MAP[selectedTab]);\n-        }\n-        \n-        setIsInitialLoad(false);\n-      } catch (err) {\n-        devLog(\"약관 데이터 조회 실패:\", err);\n-        setError(\"약관 데이터를 불러오는데 실패했습니다.\");\n-        setTermsData([]);\n-        setContent(\"\");\n-        setSelectedTermsIndex(TAB_INDEX_MAP[selectedTab]);\n-        setIsInitialLoad(false);\n-      } finally {\n-        setIsLoading(false);\n-      }\n-    };\n-    \n-    initializeData();\n-  }, [selectedTab]); // selectedTab 의존성 추가\n+    loadDocuments();\n+  }, []);\n \n-  // 탭 변경 시 약관 내용 업데이트 (저장 후 새로고침 제외)\n+  // 탭이 변경될 때 현재 문서 로딩\n   useEffect(() => {\n-    devLog(\"탭 변경:\", { \n-      selectedTab, \n-      termsDataLength: Array.isArray(termsData) ? termsData.length : 0,\n-      isInitialLoad\n-    });\n-    \n-    // 초기 로딩 중이거나 데이터가 없으면 업데이트하지 않음\n-    if (isInitialLoad || !Array.isArray(termsData) || termsData.length === 0) {\n-      devLog(\"초기 로딩 중이거나 데이터가 없으므로 컨텐츠 업데이트 건너뜀\");\n-      return;\n-    }\n-    \n-    const tabIndex = TAB_INDEX_MAP[selectedTab];\n-    const selectedTerm = termsData.find((term) => Number(term.index) === tabIndex);\n-    devLog(\"탭 변경으로 인한 약관 선택:\", selectedTerm);\n-    \n-    if (selectedTerm) {\n-      devLog(\"탭 변경 - 약관 내용 설정:\", selectedTerm.content);\n-      setContent(selectedTerm.content);\n-      setSelectedTermsIndex(selectedTerm.index);\n-    } else {\n-      devLog(\"탭 변경 - 해당 인덱스의 약관이 없음\");\n-      setContent(\"\");\n-      setSelectedTermsIndex(tabIndex);\n-    }\n-  }, [selectedTab, termsData, isInitialLoad]);\n+    loadCurrentDocument();\n+  }, [selectedTab, loadCurrentDocument]);\n \n+  // 현재 탭 정보\n+  const currentTabInfo = DOCUMENT_TABS.find(tab => tab.type === selectedTab);\n+\n+  // 현재 선택된 타입의 모든 버전\n+  const currentTypeDocuments = allDocuments.filter(\n+    doc => doc.type === selectedTab\n+  ).sort((a, b) => b.version - a.version);\n+\n   return (\n     <CMSLayout currentPath=\"/cms/terms\">\n       <TermsPageContainer>\n         {error && <ErrorMessage>{error}</ErrorMessage>}\n+        \n+        {/* 문서 타입 탭 */}\n         <TabContainer>\n-          <TabButton $isActive={selectedTab === \"이용약관(KR)\"} onClick={() => handleTabClick(\"이용약관(KR)\")}>\n-            이용약관(KR)\n-          </TabButton>\n-          <TabButton $isActive={selectedTab === \"이용약관(EN)\"} onClick={() => handleTabClick(\"이용약관(EN)\")}>\n-            이용약관(EN)\n-          </TabButton>\n-          <TabButton\n-            $isActive={selectedTab === \"개인정보 취급방침(KR)\"}\n-            onClick={() => handleTabClick(\"개인정보 취급방침(KR)\")}>\n-            개인정보 취급방침(KR)\n-          </TabButton>\n-          <TabButton\n-            $isActive={selectedTab === \"개인정보 취급방침(EN)\"}\n-            onClick={() => handleTabClick(\"개인정보 취급방침(EN)\")}>\n-            개인정보 취급방침(EN)\n-          </TabButton>\n-          <TabButton $isActive={selectedTab === \"사업자 정보(KR)\"} onClick={() => handleTabClick(\"사업자 정보(KR)\")}>\n-            사업자 정보(KR)\n-          </TabButton>\n-          <TabButton $isActive={selectedTab === \"사업자 정보(EN)\"} onClick={() => handleTabClick(\"사업자 정보(EN)\")}>\n-            사업자 정보(EN)\n-          </TabButton>\n-          <ButtonContainer>\n-            <SaveButton onClick={handleSave} disabled={!selectedTermsIndex || isLoading}>\n-              {isLoading ? \"저장 중...\" : \"저장하기\"}\n-            </SaveButton>\n-          </ButtonContainer>\n+          {DOCUMENT_TABS.map((tab) => (\n+            <TabButton \n+              key={tab.type}\n+              $isActive={selectedTab === tab.type} \n+              onClick={() => handleTabClick(tab.type)}\n+              title={tab.description}\n+            >\n+              {tab.label}\n+            </TabButton>\n+          ))}\n         </TabContainer>\n \n+        {/* 문서 정보 */}\n+        <DocumentInfoContainer>\n+          <DocumentMetaInfo>\n+            {currentDocument && (\n+              <>\n+                <InfoItem>\n+                  <InfoLabel>버전:</InfoLabel>\n+                  <InfoValue>v{currentDocument.version}</InfoValue>\n+                </InfoItem>\n+                <InfoItem>\n+                  <InfoLabel>생성일:</InfoLabel>\n+                  <InfoValue>{currentDocument.createdAt.toLocaleDateString('ko-KR')}</InfoValue>\n+                </InfoItem>\n+                <InfoItem>\n+                  <InfoLabel>수정일:</InfoLabel>\n+                  <InfoValue>{currentDocument.updatedAt.toLocaleDateString('ko-KR')}</InfoValue>\n+                </InfoItem>\n+                {currentDocument.publishedAt && (\n+                  <InfoItem>\n+                    <InfoLabel>발행일:</InfoLabel>\n+                    <InfoValue>{currentDocument.publishedAt.toLocaleDateString('ko-KR')}</InfoValue>\n+                  </InfoItem>\n+                )}\n+              </>\n+            )}\n+          </DocumentMetaInfo>\n+        </DocumentInfoContainer>\n+\n+        {/* 제목 입력 */}\n+        <TitleContainer>\n+          <TitleLabel>문서 제목:</TitleLabel>\n+          <TitleInput\n+            type=\"text\"\n+            value={title}\n+            onChange={handleTitleChange}\n+            placeholder=\"문서 제목을 입력하세요\"\n+          />\n+        </TitleContainer>\n+\n+        {/* 버전 관리 */}\n+        {currentTypeDocuments.length > 0 && (\n+          <VersionContainer>\n+            <VersionLabel>기존 버전:</VersionLabel>\n+            <VersionList>\n+              {currentTypeDocuments.map((doc) => (\n+                <VersionItem \n+                  key={doc.id}\n+                  $isActive={currentDocument?.id === doc.id}\n+                  onClick={() => {\n+                    setCurrentDocument(doc);\n+                    setContent(doc.content);\n+                    setTitle(doc.title);\n+                  }}\n+                >\n+                  v{doc.version} {doc.isActive && <ActiveBadge>활성</ActiveBadge>}\n+                  <VersionDate>{doc.updatedAt.toLocaleDateString('ko-KR')}</VersionDate>\n+                </VersionItem>\n+              ))}\n+            </VersionList>\n+          </VersionContainer>\n+        )}\n+\n+        {/* 버튼 컨테이너 */}\n+        <ButtonContainer>\n+          <ActionButton \n+            onClick={handleSave} \n+            disabled={isLoading}\n+            $variant=\"save\"\n+          >\n+            {isLoading ? \"저장 중...\" : currentDocument ? \"수정하기\" : \"새로 저장\"}\n+          </ActionButton>\n+          \n+          {currentDocument && (\n+            <>\n+              <ActionButton \n+                onClick={handleCreateNewVersion} \n+                disabled={isLoading}\n+                $variant=\"version\"\n+              >\n+                새 버전 생성\n+              </ActionButton>\n+              \n+              <ActionButton \n+                onClick={handleDelete} \n+                disabled={isLoading}\n+                $variant=\"delete\"\n+              >\n+                삭제하기\n+              </ActionButton>\n+            </>\n+          )}\n+        </ButtonContainer>\n+\n+        {/* 문서 설명 */}\n+        <DocumentDescription>\n+          <DescriptionTitle>{currentTabInfo?.label}</DescriptionTitle>\n+          <DescriptionText>{currentTabInfo?.description}</DescriptionText>\n+        </DocumentDescription>\n+\n+        {/* 에디터 */}\n         <EditorContainer>\n-          {isLoading || isInitialLoad ? (\n+          {isLoading ? (\n             <LoadingMessage>로딩 중...</LoadingMessage>\n           ) : (\n             <EditorWrapper>\n               <CustomTiptapEditor\n-              enableImageUpload={false}\n-                key={`${selectedTermsIndex}-${selectedTab}`} \n-                initialContent={content} \n+                enableImageUpload={false}\n+                key={`${selectedTab}-${currentDocument?.id || 'new'}`}\n+                initialContent={content}\n                 onEditorUpdate={handleEditorUpdate}\n-                height={700} // 에디터 높이를 600px로 설정\n+                height={700}\n               />\n             </EditorWrapper>\n           )}\n         </EditorContainer>\n@@ -421,581 +392,246 @@\n \n const TabButton = styled.button<{ $isActive: boolean }>`\n   padding: 10px 16px;\n   border: none;\n-  border-radius: 0;\n-  background-color: transparent;\n-  color: ${({ $isActive }) => ($isActive ? \"#000000\" : \"#b6b6b6\")};\n+  border-radius: 8px;\n+  background-color: ${({ $isActive }) => ($isActive ? \"#000000\" : \"#f8f9fa\")};\n+  color: ${({ $isActive }) => ($isActive ? \"#ffffff\" : \"#666666\")};\n   font-size: 13px;\n   font-weight: ${({ $isActive }) => ($isActive ? \"bold\" : \"normal\")};\n   cursor: pointer;\n   display: flex;\n   align-items: center;\n   gap: 4px;\n-  border-bottom: ${({ $isActive }) => ($isActive ? \"2px solid #000000\" : \"none\")};\n   white-space: nowrap;\n+  transition: all 0.2s ease;\n \n   &:hover {\n-    color: ${({ $isActive }) => ($isActive ? \"#000000\" : \"#666666\")};\n+    background-color: ${({ $isActive }) => ($isActive ? \"#000000\" : \"#e9ecef\")};\n+    color: ${({ $isActive }) => ($isActive ? \"#ffffff\" : \"#333333\")};\n   }\n `;\n \n-const EditorContainer = styled.div`\n-  background-color: transparent;\n-  border-radius: 8px;\n-  //   padding: 24px;\n-  min-height: 600px;\n+const DocumentInfoContainer = styled.div`\n   display: flex;\n-  flex-direction: column;\n-  gap: 20px;\n-`;\n-\n-const EditorWrapper = styled.div`\n-  flex: 1;\n-  border: 1px solid #ddd;\n+  justify-content: flex-end;\n+  align-items: center;\n+  padding: 16px;\n+  background-color: #f8f9fa;\n   border-radius: 8px;\n-  padding: 20px;\n+  margin-bottom: 20px;\n+  flex-wrap: wrap;\n+  gap: 16px;\n `;\n \n-const ButtonContainer = styled.div`\n+const DocumentMetaInfo = styled.div`\n   display: flex;\n-  justify-content: flex-end;\n-  margin-left: auto;\n+  gap: 20px;\n+  flex-wrap: wrap;\n `;\n \n-const SaveButton = styled.button`\n-  padding: 12px 24px;\n-  background-color: #000000;\n-  color: white;\n-  border: none;\n-  border-radius: 8px;\n-  font-size: 14px;\n-  font-weight: bold;\n-  cursor: pointer;\n+const InfoItem = styled.div`\n   display: flex;\n   align-items: center;\n   gap: 4px;\n-\n-  &:hover {\n-    background-color: #333333;\n-  }\n-\n-  &:disabled {\n-    background-color: #cccccc;\n-    cursor: not-allowed;\n-  }\n `;\n \n-const LoadingMessage = styled.div`\n-  text-align: center;\n-  padding: 20px;\n+const InfoLabel = styled.span`\n+  font-size: 12px;\n   color: #6c757d;\n+  font-weight: 500;\n `;\n \n-const ErrorMessage = styled.div`\n-  background-color: #f8d7da;\n-  color: #721c24;\n-  padding: 10px;\n-  border-radius: 5px;\n+const InfoValue = styled.span`\n+  font-size: 12px;\n+  color: #495057;\n+  font-weight: 600;\n+`;\n+\n+const TitleContainer = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 8px;\n   margin-bottom: 20px;\n `;\n \n-export default TermsPage;\n-import React, { useEffect, useState } from \"react\";\n-import styled from \"styled-components\";\n-import { devLog } from \"../../../utils/devLogger\";\n-import CustomTiptapEditor from \"../../../components/Editor/CustomTiptapEditor\";\n-import { toast } from \"react-toastify\";\n+const TitleLabel = styled.label`\n+  font-size: 14px;\n+  font-weight: 600;\n+  color: #495057;\n+`;\n \n-type TabType = \"이용약관(KR)\" | \"이용약관(EN)\" | \"개인정보 취급방침(KR)\" | \"개인정보 취급방침(EN)\" | \"사업자 정보(KR)\" | \"사업자 정보(EN)\";\n+const TitleInput = styled.input`\n+  padding: 12px 16px;\n+  border: 1px solid #dee2e6;\n+  border-radius: 8px;\n+  font-size: 14px;\n+  transition: border-color 0.2s ease;\n \n-const TAB_INDEX_MAP: Record<TabType, number> = {\n-  \"이용약관(KR)\": 1,\n-  \"이용약관(EN)\": 2,\n-  \"개인정보 취급방침(KR)\": 3,\n-  \"개인정보 취급방침(EN)\": 4,\n-  \"사업자 정보(KR)\": 5,\n-  \"사업자 정보(EN)\": 6,\n-};\n-\n-interface TermsData {\n-  index: number;\n-  content: string;\n-  termLang: 'KOR' | 'ENG';\n-  createId: string;\n-  createAt: string;\n-  updateAt: string | null;\n-  admin: {\n-    name: string;\n-    adminId: string;\n-  };\n-}\n-\n-// 더미 약관 데이터\n-const dummyTermsData: TermsData[] = [\n-  {\n-    index: 1,\n-    content: '<h2>이용약관(한국어)</h2><p>이 약관은 라비다 서비스 이용에 관한 조건을 규정합니다.</p><p>1. 서비스 이용 범위</p><p>2. 회원의 의무</p><p>3. 서비스 제공자의 의무</p>',\n-    termLang: 'KOR',\n-    createId: 'admin01',\n-    createAt: '2024-01-01T09:00:00Z',\n-    updateAt: '2024-03-01T10:00:00Z',\n-    admin: {\n-      name: '관리자',\n-      adminId: 'admin01'\n-    }\n-  },\n-  {\n-    index: 2,\n-    content: '<h2>Terms of Service (English)</h2><p>These terms govern the use of Lavida services.</p><p>1. Scope of Service Use</p><p>2. User Obligations</p><p>3. Service Provider Obligations</p>',\n-    termLang: 'ENG',\n-    createId: 'admin01',\n-    createAt: '2024-01-01T09:00:00Z',\n-    updateAt: '2024-03-01T10:00:00Z',\n-    admin: {\n-      name: '관리자',\n-      adminId: 'admin01'\n-    }\n-  },\n-  {\n-    index: 3,\n-    content: '<h2>개인정보 취급방침(한국어)</h2><p>라비다는 개인정보보호법에 따라 이용자의 개인정보를 보호합니다.</p><p>1. 개인정보 수집 항목</p><p>2. 개인정보 이용 목적</p><p>3. 개인정보 보관 기간</p>',\n-    termLang: 'KOR',\n-    createId: 'admin01',\n-    createAt: '2024-01-01T09:00:00Z',\n-    updateAt: '2024-03-01T10:00:00Z',\n-    admin: {\n-      name: '관리자',\n-      adminId: 'admin01'\n-    }\n-  },\n-  {\n-    index: 4,\n-    content: '<h2>Privacy Policy (English)</h2><p>Lavida protects user personal information in accordance with privacy protection laws.</p><p>1. Personal Information Collection Items</p><p>2. Purpose of Using Personal Information</p><p>3. Personal Information Storage Period</p>',\n-    termLang: 'ENG',\n-    createId: 'admin01',\n-    createAt: '2024-01-01T09:00:00Z',\n-    updateAt: '2024-03-01T10:00:00Z',\n-    admin: {\n-      name: '관리자',\n-      adminId: 'admin01'\n-    }\n-  },\n-  {\n-    index: 5,\n-    content: '<h2>사업자 정보(한국어)</h2><p>상호: 라비다</p><p>대표자: 홍길동</p><p>사업자등록번호: 123-45-67890</p><p>주소: 서울특별시 강남구 테헤란로 123</p><p>연락처: 02-1234-5678</p>',\n-    termLang: 'KOR',\n-    createId: 'admin01',\n-    createAt: '2024-01-01T09:00:00Z',\n-    updateAt: '2024-03-01T10:00:00Z',\n-    admin: {\n-      name: '관리자',\n-      adminId: 'admin01'\n-    }\n-  },\n-  {\n-    index: 6,\n-    content: '<h2>Business Information (English)</h2><p>Company Name: Lavida</p><p>Representative: Hong Gil-dong</p><p>Business Registration Number: 123-45-67890</p><p>Address: 123 Teheran-ro, Gangnam-gu, Seoul</p><p>Contact: 02-1234-5678</p>',\n-    termLang: 'ENG',\n-    createId: 'admin01',\n-    createAt: '2024-01-01T09:00:00Z',\n-    updateAt: '2024-03-01T10:00:00Z',\n-    admin: {\n-      name: '관리자',\n-      adminId: 'admin01'\n-    }\n+  &:focus {\n+    outline: none;\n+    border-color: #007bff;\n+    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n   }\n-];\n+`;\n \n-// 더미 API 함수들\n-const getTermsList = async (): Promise<any> => {\n-  await new Promise(resolve => setTimeout(resolve, 500));\n-  \n-  return {\n-    data: {\n-      statusCode: 200,\n-      message: \"success\",\n-      data: dummyTermsData\n-    }\n-  };\n-};\n+const VersionContainer = styled.div`\n+  margin-bottom: 20px;\n+  padding: 16px;\n+  background-color: #f8f9fa;\n+  border-radius: 8px;\n+`;\n \n-const createTerms = async (index: number, data: { content: string; termLang: 'KOR' | 'ENG' }): Promise<any> => {\n-  await new Promise(resolve => setTimeout(resolve, 500));\n-  \n-  // 해당 인덱스의 약관 데이터 업데이트\n-  const termIndex = dummyTermsData.findIndex(term => term.index === index);\n-  if (termIndex !== -1) {\n-    dummyTermsData[termIndex] = {\n-      ...dummyTermsData[termIndex],\n-      content: data.content,\n-      updateAt: new Date().toISOString()\n-    };\n-  } else {\n-    // 새로운 약관 추가\n-    const newTerm: TermsData = {\n-      index,\n-      content: data.content,\n-      termLang: data.termLang,\n-      createId: 'admin01',\n-      createAt: new Date().toISOString(),\n-      updateAt: new Date().toISOString(),\n-      admin: {\n-        name: '관리자',\n-        adminId: 'admin01'\n-      }\n-    };\n-    dummyTermsData.push(newTerm);\n-  }\n-  \n-  return {\n-    data: {\n-      statusCode: 200,\n-      message: \"success\"\n-    }\n-  };\n-};\n-\n-const TermsPage: React.FC = () => {\n-  const [selectedTab, setSelectedTab] = useState<TabType>(\"이용약관(KR)\");\n-  const [content, setContent] = useState<string>(\"\");\n-  const [termsData, setTermsData] = useState<TermsData[]>([]);\n-  const [selectedTermsIndex, setSelectedTermsIndex] = useState<number | null>(1);\n-  const [isLoading, setIsLoading] = useState<boolean>(true); // 초기 로딩 상태를 true로 설정\n-  const [error, setError] = useState<string | null>(null);\n-  const [isInitialLoad, setIsInitialLoad] = useState<boolean>(true); // 초기 로딩 완료 여부\n-\n-  // 약관 저장\n-  const handleSave = async () => {\n-    if (!selectedTermsIndex) {\n-      toast.error(\"선택된 약관이 없습니다.\");\n-      return;\n-    }\n-\n-    if (!content || content.trim() === \"\") {\n-      toast.error(\"약관 내용을 입력해주세요.\");\n-      return;\n-    }\n-\n-    try {\n-      setIsLoading(true);\n-      \n-      // 현재 선택된 탭의 언어 확인\n-      const currentTab = selectedTab;\n-      const termLang = currentTab.includes(\"(KR)\") ? \"KOR\" : \"ENG\";\n-      \n-      devLog(\"약관 저장:\", { \n-        selectedTermsIndex, \n-        content: content.substring(0, 100) + \"...\", // 내용이 길 수 있으므로 일부만 로그\n-        termLang,\n-        selectedTab \n-      });\n-      \n-      const response = await createTerms(selectedTermsIndex, {\n-        content: content,\n-        termLang: termLang\n-      });\n-      \n-      // API 응답 구조 확인: statusCode가 200이고 message가 \"success\"일 때만 성공\n-      if (response?.data?.statusCode === 200 && response?.data?.message === \"success\") {\n-        devLog(\"약관 저장 성공:\", response);\n-        toast.success(\"저장되었습니다!\");\n-        \n-        // 저장 후 데이터 새로고침 (단순 데이터만 업데이트)\n-        const refreshResponse = await getTermsList();\n-        if (refreshResponse && refreshResponse.data && refreshResponse.data.data && Array.isArray(refreshResponse.data.data)) {\n-          setTermsData(refreshResponse.data.data);\n-          devLog(\"저장 후 데이터 새로고침 완료:\", refreshResponse.data.data);\n-        }\n-      } else {\n-        // statusCode가 200이 아니거나 message가 \"success\"가 아닌 경우\n-        const errorMessage = response?.data?.error?.customMessage || \n-                            response?.data?.message || \n-                            '저장 처리 중 오류가 발생했습니다.';\n-        devLog(\"약관 저장 실패 (API 응답):\", response);\n-        toast.error(`저장에 실패했습니다. (${errorMessage})`);\n-      }\n-      \n-    } catch (err: any) {\n-      devLog(\"약관 저장 실패:\", err);\n-      \n-      // callApi에서 던진 에러 처리\n-      const errorMessage = err?.data?.error?.customMessage || \n-                          err?.data?.message ||\n-                          err?.response?.data?.error?.customMessage || \n-                          err?.response?.data?.message || \n-                          err?.message || \n-                          '네트워크 오류가 발생했습니다.';\n-      \n-      toast.error(`저장에 실패했습니다. (${errorMessage})`);\n-    } finally {\n-      setIsLoading(false);\n-    }\n-  };  // 탭 클릭 핸들러\n-  const handleTabClick = (tab: TabType) => {\n-    devLog(\"탭 클릭:\", tab);\n-    devLog(\"현재 termsData:\", termsData);\n-    devLog(\"termsData 타입:\", typeof termsData);\n-    devLog(\"termsData Array.isArray:\", Array.isArray(termsData));\n-    \n-    setSelectedTab(tab);\n-    const tabIndex = TAB_INDEX_MAP[tab];\n-    devLog(\"선택된 탭 인덱스:\", tabIndex);\n-\n-    // termsData가 배열인지 확인\n-    if (!Array.isArray(termsData)) {\n-      devLog(\"termsData가 배열이 아님:\", termsData);\n-      setContent(\"\");\n-      setSelectedTermsIndex(tabIndex);\n-      return;\n-    }\n-\n-    const selectedTerm = termsData.find((term) => Number(term.index) === tabIndex);\n-    devLog(\"선택된 약관:\", selectedTerm);\n-\n-    if (selectedTerm) {\n-      devLog(\"약관 내용 설정:\", selectedTerm.content);\n-      setContent(selectedTerm.content);\n-      setSelectedTermsIndex(Number(selectedTerm.index));\n-    } else {\n-      // 해당 인덱스의 약관이 없으면 빈 내용으로 설정\n-      devLog(\"해당 인덱스의 약관이 없음, 빈 내용으로 설정\");\n-      setContent(\"\");\n-      setSelectedTermsIndex(tabIndex);\n-    }\n-  };\n-\n-  // 에디터 내용 업데이트 핸들러\n-  const handleEditorUpdate = (newContent: string) => {\n-    setContent(newContent);\n-  };\n-\n-  // 컴포넌트 마운트 시 약관 데이터 조회\n-  useEffect(() => {\n-    devLog(\"컴포넌트 마운트 - 약관 데이터 조회\");\n-    \n-    const initializeData = async () => {\n-      try {\n-        setIsLoading(true);\n-        setError(null);\n-        devLog(\"약관 데이터 조회 시작\");\n-        \n-        const response = await getTermsList();\n-        devLog(\"약관 데이터 조회 응답:\", response);\n-        \n-        if (response && response.data && response.data.data && Array.isArray(response.data.data)) {\n-          setTermsData(response.data.data);\n-          devLog(\"약관 데이터 설정 완료:\", response.data.data);\n-          \n-          // 데이터 로딩 완료 후 즉시 현재 탭의 컨텐츠 설정\n-          const tabIndex = TAB_INDEX_MAP[selectedTab];\n-          const selectedTerm = response.data.data.find((term: TermsData) => Number(term.index) === tabIndex);\n-          if (selectedTerm) {\n-            devLog(\"초기 로딩 완료 - 약관 내용 설정:\", selectedTerm.content);\n-            setContent(selectedTerm.content);\n-            setSelectedTermsIndex(selectedTerm.index);\n-          } else {\n-            devLog(\"초기 로딩 완료 - 해당 인덱스의 약관이 없음\");\n-            setContent(\"\");\n-            setSelectedTermsIndex(tabIndex);\n-          }\n-        } else {\n-          devLog(\"응답 데이터가 배열이 아님:\", response);\n-          setTermsData([]);\n-          setContent(\"\");\n-          setSelectedTermsIndex(TAB_INDEX_MAP[selectedTab]);\n-        }\n-        \n-        setIsInitialLoad(false);\n-      } catch (err) {\n-        devLog(\"약관 데이터 조회 실패:\", err);\n-        setError(\"약관 데이터를 불러오는데 실패했습니다.\");\n-        setTermsData([]);\n-        setContent(\"\");\n-        setSelectedTermsIndex(TAB_INDEX_MAP[selectedTab]);\n-        setIsInitialLoad(false);\n-      } finally {\n-        setIsLoading(false);\n-      }\n-    };\n-    \n-    initializeData();\n-  }, [selectedTab]); // selectedTab 의존성 추가\n-\n-  // 탭 변경 시 약관 내용 업데이트 (저장 후 새로고침 제외)\n-  useEffect(() => {\n-    devLog(\"탭 변경:\", { \n-      selectedTab, \n-      termsDataLength: Array.isArray(termsData) ? termsData.length : 0,\n-      isInitialLoad\n-    });\n-    \n-    // 초기 로딩 중이거나 데이터가 없으면 업데이트하지 않음\n-    if (isInitialLoad || !Array.isArray(termsData) || termsData.length === 0) {\n-      devLog(\"초기 로딩 중이거나 데이터가 없으므로 컨텐츠 업데이트 건너뜀\");\n-      return;\n-    }\n-    \n-    const tabIndex = TAB_INDEX_MAP[selectedTab];\n-    const selectedTerm = termsData.find((term) => Number(term.index) === tabIndex);\n-    devLog(\"탭 변경으로 인한 약관 선택:\", selectedTerm);\n-    \n-    if (selectedTerm) {\n-      devLog(\"탭 변경 - 약관 내용 설정:\", selectedTerm.content);\n-      setContent(selectedTerm.content);\n-      setSelectedTermsIndex(selectedTerm.index);\n-    } else {\n-      devLog(\"탭 변경 - 해당 인덱스의 약관이 없음\");\n-      setContent(\"\");\n-      setSelectedTermsIndex(tabIndex);\n-    }\n-  }, [selectedTab, termsData, isInitialLoad]);\n-\n-  return (\n-    <TermsPageContainer>\n-      {error && <ErrorMessage>{error}</ErrorMessage>}\n-      <TabContainer>\n-        <TabButton $isActive={selectedTab === \"이용약관(KR)\"} onClick={() => handleTabClick(\"이용약관(KR)\")}>\n-          이용약관(KR)\n-        </TabButton>\n-        <TabButton $isActive={selectedTab === \"이용약관(EN)\"} onClick={() => handleTabClick(\"이용약관(EN)\")}>\n-          이용약관(EN)\n-        </TabButton>\n-        <TabButton\n-          $isActive={selectedTab === \"개인정보 취급방침(KR)\"}\n-          onClick={() => handleTabClick(\"개인정보 취급방침(KR)\")}>\n-          개인정보 취급방침(KR)\n-        </TabButton>\n-        <TabButton\n-          $isActive={selectedTab === \"개인정보 취급방침(EN)\"}\n-          onClick={() => handleTabClick(\"개인정보 취급방침(EN)\")}>\n-          개인정보 취급방침(EN)\n-        </TabButton>\n-        <TabButton $isActive={selectedTab === \"사업자 정보(KR)\"} onClick={() => handleTabClick(\"사업자 정보(KR)\")}>\n-          사업자 정보(KR)\n-        </TabButton>\n-        <TabButton $isActive={selectedTab === \"사업자 정보(EN)\"} onClick={() => handleTabClick(\"사업자 정보(EN)\")}>\n-          사업자 정보(EN)\n-        </TabButton>\n-        <ButtonContainer>\n-          <SaveButton onClick={handleSave} disabled={!selectedTermsIndex || isLoading}>\n-            {isLoading ? \"저장 중...\" : \"저장하기\"}\n-          </SaveButton>\n-        </ButtonContainer>\n-      </TabContainer>\n-\n-      <EditorContainer>\n-        {isLoading || isInitialLoad ? (\n-          <LoadingMessage>로딩 중...</LoadingMessage>\n-        ) : (\n-          <EditorWrapper>\n-            <CustomTiptapEditor\n-            enableImageUpload={false}\n-              key={`${selectedTermsIndex}-${selectedTab}`} \n-              initialContent={content} \n-              onEditorUpdate={handleEditorUpdate}\n-              height={700} // 에디터 높이를 600px로 설정\n-            />\n-          </EditorWrapper>\n-        )}\n-      </EditorContainer>\n-    </TermsPageContainer>\n-  );\n-};\n-\n-const TermsPageContainer = styled.div`\n-  min-width: 1200px;\n-  width: 100%;\n+const VersionLabel = styled.div`\n+  font-size: 14px;\n+  font-weight: 600;\n+  color: #495057;\n+  margin-bottom: 12px;\n `;\n \n-const TabContainer = styled.div`\n+const VersionList = styled.div`\n   display: flex;\n   gap: 8px;\n-  padding: 16px;\n-  border-radius: 8px;\n-  border-bottom: 1px solid #ddd;\n-  margin-bottom: 20px;\n   flex-wrap: wrap;\n-  align-items: center;\n `;\n \n-const TabButton = styled.button<{ $isActive: boolean }>`\n-  padding: 10px 16px;\n-  border: none;\n-  border-radius: 0;\n-  background-color: transparent;\n-  color: ${({ $isActive }) => ($isActive ? \"#000000\" : \"#b6b6b6\")};\n-  font-size: 13px;\n-  font-weight: ${({ $isActive }) => ($isActive ? \"bold\" : \"normal\")};\n+const VersionItem = styled.button<{ $isActive: boolean }>`\n+  padding: 8px 12px;\n+  border: 1px solid #dee2e6;\n+  border-radius: 6px;\n+  background-color: ${({ $isActive }) => ($isActive ? \"#28a745\" : \"#ffffff\")};\n+  color: ${({ $isActive }) => ($isActive ? \"#ffffff\" : \"#495057\")};\n+  font-size: 12px;\n   cursor: pointer;\n   display: flex;\n+  flex-direction: column;\n   align-items: center;\n-  gap: 4px;\n-  border-bottom: ${({ $isActive }) => ($isActive ? \"2px solid #000000\" : \"none\")};\n-  white-space: nowrap;\n+  gap: 2px;\n+  transition: all 0.2s ease;\n \n   &:hover {\n-    color: ${({ $isActive }) => ($isActive ? \"#000000\" : \"#666666\")};\n+    background-color: ${({ $isActive }) => ($isActive ? \"#28a745\" : \"#e9ecef\")};\n   }\n `;\n \n-const EditorContainer = styled.div`\n-  background-color: transparent;\n-  border-radius: 8px;\n-  //   padding: 24px;\n-  min-height: 600px;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 20px;\n+const ActiveBadge = styled.span`\n+  background-color: #dc3545;\n+  color: white;\n+  font-size: 10px;\n+  padding: 2px 6px;\n+  border-radius: 10px;\n+  margin-left: 4px;\n `;\n \n-const EditorWrapper = styled.div`\n-  flex: 1;\n-  border: 1px solid #ddd;\n-  border-radius: 8px;\n-  padding: 20px;\n+const VersionDate = styled.span`\n+  font-size: 10px;\n+  opacity: 0.7;\n `;\n \n const ButtonContainer = styled.div`\n   display: flex;\n   justify-content: flex-end;\n-  margin-left: auto;\n+  gap: 12px;\n+  margin-bottom: 20px;\n+  flex-wrap: wrap;\n `;\n \n-const SaveButton = styled.button`\n+const ActionButton = styled.button<{ $variant: 'save' | 'version' | 'delete' }>`\n   padding: 12px 24px;\n-  background-color: #000000;\n-  color: white;\n   border: none;\n   border-radius: 8px;\n   font-size: 14px;\n   font-weight: bold;\n   cursor: pointer;\n   display: flex;\n   align-items: center;\n   gap: 4px;\n+  transition: all 0.2s ease;\n \n-  &:hover {\n-    background-color: #333333;\n-  }\n+  ${({ $variant }) => {\n+    switch ($variant) {\n+      case 'save':\n+        return `\n+          background-color: #007bff;\n+          color: white;\n+          &:hover { background-color: #0056b3; }\n+          &:disabled { background-color: #6c757d; cursor: not-allowed; }\n+        `;\n+      case 'version':\n+        return `\n+          background-color: #28a745;\n+          color: white;\n+          &:hover { background-color: #1e7e34; }\n+          &:disabled { background-color: #6c757d; cursor: not-allowed; }\n+        `;\n+      case 'delete':\n+        return `\n+          background-color: #dc3545;\n+          color: white;\n+          &:hover { background-color: #bd2130; }\n+          &:disabled { background-color: #6c757d; cursor: not-allowed; }\n+        `;\n+      default:\n+        return `\n+          background-color: #6c757d;\n+          color: white;\n+          &:hover { background-color: #545b62; }\n+        `;\n+    }\n+  }}\n+`;\n \n-  &:disabled {\n-    background-color: #cccccc;\n-    cursor: not-allowed;\n-  }\n+const DocumentDescription = styled.div`\n+  padding: 16px;\n+  background-color: #e7f3ff;\n+  border-left: 4px solid #007bff;\n+  border-radius: 4px;\n+  margin-bottom: 20px;\n `;\n \n+const DescriptionTitle = styled.h3`\n+  margin: 0 0 8px 0;\n+  font-size: 16px;\n+  font-weight: 600;\n+  color: #007bff;\n+`;\n+\n+const DescriptionText = styled.p`\n+  margin: 0;\n+  font-size: 14px;\n+  color: #495057;\n+  line-height: 1.5;\n+`;\n+\n+const EditorContainer = styled.div`\n+  background-color: transparent;\n+  border-radius: 8px;\n+  min-height: 600px;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 20px;\n+`;\n+\n+const EditorWrapper = styled.div`\n+  flex: 1;\n+  border: 1px solid #ddd;\n+  border-radius: 8px;\n+  padding: 20px;\n+`;\n+\n const LoadingMessage = styled.div`\n   text-align: center;\n   padding: 20px;\n   color: #6c757d;\n+  font-size: 16px;\n `;\n \n const ErrorMessage = styled.div`\n   background-color: #f8d7da;\n   color: #721c24;\n-  padding: 10px;\n-  border-radius: 5px;\n+  padding: 12px 16px;\n+  border-radius: 8px;\n   margin-bottom: 20px;\n+  border: 1px solid #f5c6cb;\n `;\n \n export default TermsPage;\n"
                }
            ],
            "date": 1757827860791,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { devLog } from \"../../../utils/devLogger\";\nimport CustomTiptapEditor from \"../../../components/Editor/CustomTiptapEditor\";\nimport { toast } from \"react-toastify\";\n\ntype TabType = \"이용약관(KR)\" | \"이용약관(EN)\" | \"개인정보 취급방침(KR)\" | \"개인정보 취급방침(EN)\" | \"사업자 정보(KR)\" | \"사업자 정보(EN)\";\n\nconst TAB_INDEX_MAP: Record<TabType, number> = {\n  \"이용약관(KR)\": 1,\n  \"이용약관(EN)\": 2,\n  \"개인정보 취급방침(KR)\": 3,\n  \"개인정보 취급방침(EN)\": 4,\n  \"사업자 정보(KR)\": 5,\n  \"사업자 정보(EN)\": 6,\n};\n\ninterface TermsData {\n  index: number;\n  content: string;\n  termLang: 'KOR' | 'ENG';\n  createId: string;\n  createAt: string;\n  updateAt: string | null;\n  admin: {\n    name: string;\n    adminId: string;\n  };\n}\n\n// 더미 약관 데이터\nconst dummyTermsData: TermsData[] = [\n  {\n    index: 1,\n    content: '<h2>이용약관(한국어)</h2><p>이 약관은 라비다 서비스 이용에 관한 조건을 규정합니다.</p><p>1. 서비스 이용 범위</p><p>2. 회원의 의무</p><p>3. 서비스 제공자의 의무</p>',\n    termLang: 'KOR',\n    createId: 'admin01',\n    createAt: '2024-01-01T09:00:00Z',\n    updateAt: '2024-03-01T10:00:00Z',\n    admin: {\n      name: '관리자',\n      adminId: 'admin01'\n    }\n  },\n  {\n    index: 2,\n    content: '<h2>Terms of Service (English)</h2><p>These terms govern the use of Lavida services.</p><p>1. Scope of Service Use</p><p>2. User Obligations</p><p>3. Service Provider Obligations</p>',\n    termLang: 'ENG',\n    createId: 'admin01',\n    createAt: '2024-01-01T09:00:00Z',\n    updateAt: '2024-03-01T10:00:00Z',\n    admin: {\n      name: '관리자',\n      adminId: 'admin01'\n    }\n  },\n  {\n    index: 3,\n    content: '<h2>개인정보 취급방침(한국어)</h2><p>라비다는 개인정보보호법에 따라 이용자의 개인정보를 보호합니다.</p><p>1. 개인정보 수집 항목</p><p>2. 개인정보 이용 목적</p><p>3. 개인정보 보관 기간</p>',\n    termLang: 'KOR',\n    createId: 'admin01',\n    createAt: '2024-01-01T09:00:00Z',\n    updateAt: '2024-03-01T10:00:00Z',\n    admin: {\n      name: '관리자',\n      adminId: 'admin01'\n    }\n  },\n  {\n    index: 4,\n    content: '<h2>Privacy Policy (English)</h2><p>Lavida protects user personal information in accordance with privacy protection laws.</p><p>1. Personal Information Collection Items</p><p>2. Purpose of Using Personal Information</p><p>3. Personal Information Storage Period</p>',\n    termLang: 'ENG',\n    createId: 'admin01',\n    createAt: '2024-01-01T09:00:00Z',\n    updateAt: '2024-03-01T10:00:00Z',\n    admin: {\n      name: '관리자',\n      adminId: 'admin01'\n    }\n  },\n  {\n    index: 5,\n    content: '<h2>사업자 정보(한국어)</h2><p>상호: 라비다</p><p>대표자: 홍길동</p><p>사업자등록번호: 123-45-67890</p><p>주소: 서울특별시 강남구 테헤란로 123</p><p>연락처: 02-1234-5678</p>',\n    termLang: 'KOR',\n    createId: 'admin01',\n    createAt: '2024-01-01T09:00:00Z',\n    updateAt: '2024-03-01T10:00:00Z',\n    admin: {\n      name: '관리자',\n      adminId: 'admin01'\n    }\n  },\n  {\n    index: 6,\n    content: '<h2>Business Information (English)</h2><p>Company Name: Lavida</p><p>Representative: Hong Gil-dong</p><p>Business Registration Number: 123-45-67890</p><p>Address: 123 Teheran-ro, Gangnam-gu, Seoul</p><p>Contact: 02-1234-5678</p>',\n    termLang: 'ENG',\n    createId: 'admin01',\n    createAt: '2024-01-01T09:00:00Z',\n    updateAt: '2024-03-01T10:00:00Z',\n    admin: {\n      name: '관리자',\n      adminId: 'admin01'\n    }\n  }\n];\n\n// 더미 API 함수들\nconst getTermsList = async (): Promise<any> => {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  return {\n    data: {\n      statusCode: 200,\n      message: \"success\",\n      data: dummyTermsData\n    }\n  };\n};\n\nconst createTerms = async (index: number, data: { content: string; termLang: 'KOR' | 'ENG' }): Promise<any> => {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  // 해당 인덱스의 약관 데이터 업데이트\n  const termIndex = dummyTermsData.findIndex(term => term.index === index);\n  if (termIndex !== -1) {\n    dummyTermsData[termIndex] = {\n      ...dummyTermsData[termIndex],\n      content: data.content,\n      updateAt: new Date().toISOString()\n    };\n  } else {\n    // 새로운 약관 추가\n    const newTerm: TermsData = {\n      index,\n      content: data.content,\n      termLang: data.termLang,\n      createId: 'admin01',\n      createAt: new Date().toISOString(),\n      updateAt: new Date().toISOString(),\n      admin: {\n        name: '관리자',\n        adminId: 'admin01'\n      }\n    };\n    dummyTermsData.push(newTerm);\n  }\n  \n  return {\n    data: {\n      statusCode: 200,\n      message: \"success\"\n    }\n  };\n};\n\nconst TermsPage: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState<TabType>(\"이용약관(KR)\");\n  const [content, setContent] = useState<string>(\"\");\n  const [termsData, setTermsData] = useState<TermsData[]>([]);\n  const [selectedTermsIndex, setSelectedTermsIndex] = useState<number | null>(1);\n  const [isLoading, setIsLoading] = useState<boolean>(true); // 초기 로딩 상태를 true로 설정\n  const [error, setError] = useState<string | null>(null);\n  const [isInitialLoad, setIsInitialLoad] = useState<boolean>(true); // 초기 로딩 완료 여부\n\n  // 약관 저장\n  const handleSave = async () => {\n    if (!selectedTermsIndex) {\n      toast.error(\"선택된 약관이 없습니다.\");\n      return;\n    }\n\n    if (!content || content.trim() === \"\") {\n      toast.error(\"약관 내용을 입력해주세요.\");\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // 현재 선택된 탭의 언어 확인\n      const currentTab = selectedTab;\n      const termLang = currentTab.includes(\"(KR)\") ? \"KOR\" : \"ENG\";\n      \n      devLog(\"약관 저장:\", { \n        selectedTermsIndex, \n        content: content.substring(0, 100) + \"...\", // 내용이 길 수 있으므로 일부만 로그\n        termLang,\n        selectedTab \n      });\n      \n      const response = await createTerms(selectedTermsIndex, {\n        content: content,\n        termLang: termLang\n      });\n      \n      // API 응답 구조 확인: statusCode가 200이고 message가 \"success\"일 때만 성공\n      if (response?.data?.statusCode === 200 && response?.data?.message === \"success\") {\n        devLog(\"약관 저장 성공:\", response);\n        toast.success(\"저장되었습니다!\");\n        \n        // 저장 후 데이터 새로고침 (단순 데이터만 업데이트)\n        const refreshResponse = await getTermsList();\n        if (refreshResponse && refreshResponse.data && refreshResponse.data.data && Array.isArray(refreshResponse.data.data)) {\n          setTermsData(refreshResponse.data.data);\n          devLog(\"저장 후 데이터 새로고침 완료:\", refreshResponse.data.data);\n        }\n      } else {\n        // statusCode가 200이 아니거나 message가 \"success\"가 아닌 경우\n        const errorMessage = response?.data?.error?.customMessage || \n                            response?.data?.message || \n                            '저장 처리 중 오류가 발생했습니다.';\n        devLog(\"약관 저장 실패 (API 응답):\", response);\n        toast.error(`저장에 실패했습니다. (${errorMessage})`);\n      }\n      \n    } catch (err: any) {\n      devLog(\"약관 저장 실패:\", err);\n      \n      // callApi에서 던진 에러 처리\n      const errorMessage = err?.data?.error?.customMessage || \n                          err?.data?.message ||\n                          err?.response?.data?.error?.customMessage || \n                          err?.response?.data?.message || \n                          err?.message || \n                          '네트워크 오류가 발생했습니다.';\n      \n      toast.error(`저장에 실패했습니다. (${errorMessage})`);\n    } finally {\n      setIsLoading(false);\n    }\n  };  // 탭 클릭 핸들러\n  const handleTabClick = (tab: TabType) => {\n    devLog(\"탭 클릭:\", tab);\n    devLog(\"현재 termsData:\", termsData);\n    devLog(\"termsData 타입:\", typeof termsData);\n    devLog(\"termsData Array.isArray:\", Array.isArray(termsData));\n    \n    setSelectedTab(tab);\n    const tabIndex = TAB_INDEX_MAP[tab];\n    devLog(\"선택된 탭 인덱스:\", tabIndex);\n\n    // termsData가 배열인지 확인\n    if (!Array.isArray(termsData)) {\n      devLog(\"termsData가 배열이 아님:\", termsData);\n      setContent(\"\");\n      setSelectedTermsIndex(tabIndex);\n      return;\n    }\n\n    const selectedTerm = termsData.find((term) => Number(term.index) === tabIndex);\n    devLog(\"선택된 약관:\", selectedTerm);\n\n    if (selectedTerm) {\n      devLog(\"약관 내용 설정:\", selectedTerm.content);\n      setContent(selectedTerm.content);\n      setSelectedTermsIndex(Number(selectedTerm.index));\n    } else {\n      // 해당 인덱스의 약관이 없으면 빈 내용으로 설정\n      devLog(\"해당 인덱스의 약관이 없음, 빈 내용으로 설정\");\n      setContent(\"\");\n      setSelectedTermsIndex(tabIndex);\n    }\n  };\n\n  // 에디터 내용 업데이트 핸들러\n  const handleEditorUpdate = (newContent: string) => {\n    setContent(newContent);\n  };\n\n  // 컴포넌트 마운트 시 약관 데이터 조회\n  useEffect(() => {\n    devLog(\"컴포넌트 마운트 - 약관 데이터 조회\");\n    \n    const initializeData = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        devLog(\"약관 데이터 조회 시작\");\n        \n        const response = await getTermsList();\n        devLog(\"약관 데이터 조회 응답:\", response);\n        \n        if (response && response.data && response.data.data && Array.isArray(response.data.data)) {\n          setTermsData(response.data.data);\n          devLog(\"약관 데이터 설정 완료:\", response.data.data);\n          \n          // 데이터 로딩 완료 후 즉시 현재 탭의 컨텐츠 설정\n          const tabIndex = TAB_INDEX_MAP[selectedTab];\n          const selectedTerm = response.data.data.find((term: TermsData) => Number(term.index) === tabIndex);\n          if (selectedTerm) {\n            devLog(\"초기 로딩 완료 - 약관 내용 설정:\", selectedTerm.content);\n            setContent(selectedTerm.content);\n            setSelectedTermsIndex(selectedTerm.index);\n          } else {\n            devLog(\"초기 로딩 완료 - 해당 인덱스의 약관이 없음\");\n            setContent(\"\");\n            setSelectedTermsIndex(tabIndex);\n          }\n        } else {\n          devLog(\"응답 데이터가 배열이 아님:\", response);\n          setTermsData([]);\n          setContent(\"\");\n          setSelectedTermsIndex(TAB_INDEX_MAP[selectedTab]);\n        }\n        \n        setIsInitialLoad(false);\n      } catch (err) {\n        devLog(\"약관 데이터 조회 실패:\", err);\n        setError(\"약관 데이터를 불러오는데 실패했습니다.\");\n        setTermsData([]);\n        setContent(\"\");\n        setSelectedTermsIndex(TAB_INDEX_MAP[selectedTab]);\n        setIsInitialLoad(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    initializeData();\n  }, [selectedTab]); // selectedTab 의존성 추가\n\n  // 탭 변경 시 약관 내용 업데이트 (저장 후 새로고침 제외)\n  useEffect(() => {\n    devLog(\"탭 변경:\", { \n      selectedTab, \n      termsDataLength: Array.isArray(termsData) ? termsData.length : 0,\n      isInitialLoad\n    });\n    \n    // 초기 로딩 중이거나 데이터가 없으면 업데이트하지 않음\n    if (isInitialLoad || !Array.isArray(termsData) || termsData.length === 0) {\n      devLog(\"초기 로딩 중이거나 데이터가 없으므로 컨텐츠 업데이트 건너뜀\");\n      return;\n    }\n    \n    const tabIndex = TAB_INDEX_MAP[selectedTab];\n    const selectedTerm = termsData.find((term) => Number(term.index) === tabIndex);\n    devLog(\"탭 변경으로 인한 약관 선택:\", selectedTerm);\n    \n    if (selectedTerm) {\n      devLog(\"탭 변경 - 약관 내용 설정:\", selectedTerm.content);\n      setContent(selectedTerm.content);\n      setSelectedTermsIndex(selectedTerm.index);\n    } else {\n      devLog(\"탭 변경 - 해당 인덱스의 약관이 없음\");\n      setContent(\"\");\n      setSelectedTermsIndex(tabIndex);\n    }\n  }, [selectedTab, termsData, isInitialLoad]);\n\n  return (\n    <TermsPageContainer>\n      {error && <ErrorMessage>{error}</ErrorMessage>}\n      <TabContainer>\n        <TabButton $isActive={selectedTab === \"이용약관(KR)\"} onClick={() => handleTabClick(\"이용약관(KR)\")}>\n          이용약관(KR)\n        </TabButton>\n        <TabButton $isActive={selectedTab === \"이용약관(EN)\"} onClick={() => handleTabClick(\"이용약관(EN)\")}>\n          이용약관(EN)\n        </TabButton>\n        <TabButton\n          $isActive={selectedTab === \"개인정보 취급방침(KR)\"}\n          onClick={() => handleTabClick(\"개인정보 취급방침(KR)\")}>\n          개인정보 취급방침(KR)\n        </TabButton>\n        <TabButton\n          $isActive={selectedTab === \"개인정보 취급방침(EN)\"}\n          onClick={() => handleTabClick(\"개인정보 취급방침(EN)\")}>\n          개인정보 취급방침(EN)\n        </TabButton>\n        <TabButton $isActive={selectedTab === \"사업자 정보(KR)\"} onClick={() => handleTabClick(\"사업자 정보(KR)\")}>\n          사업자 정보(KR)\n        </TabButton>\n        <TabButton $isActive={selectedTab === \"사업자 정보(EN)\"} onClick={() => handleTabClick(\"사업자 정보(EN)\")}>\n          사업자 정보(EN)\n        </TabButton>\n        <ButtonContainer>\n          <SaveButton onClick={handleSave} disabled={!selectedTermsIndex || isLoading}>\n            {isLoading ? \"저장 중...\" : \"저장하기\"}\n          </SaveButton>\n        </ButtonContainer>\n      </TabContainer>\n\n      <EditorContainer>\n        {isLoading || isInitialLoad ? (\n          <LoadingMessage>로딩 중...</LoadingMessage>\n        ) : (\n          <EditorWrapper>\n            <CustomTiptapEditor\n            enableImageUpload={false}\n              key={`${selectedTermsIndex}-${selectedTab}`} \n              initialContent={content} \n              onEditorUpdate={handleEditorUpdate}\n              height={700} // 에디터 높이를 600px로 설정\n            />\n          </EditorWrapper>\n        )}\n      </EditorContainer>\n    </TermsPageContainer>\n  );\n};\n\nconst TermsPageContainer = styled.div`\n  min-width: 1200px;\n  width: 100%;\n`;\n\nconst TabContainer = styled.div`\n  display: flex;\n  gap: 8px;\n  padding: 16px;\n  border-radius: 8px;\n  border-bottom: 1px solid #ddd;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n  align-items: center;\n`;\n\nconst TabButton = styled.button<{ $isActive: boolean }>`\n  padding: 10px 16px;\n  border: none;\n  border-radius: 0;\n  background-color: transparent;\n  color: ${({ $isActive }) => ($isActive ? \"#000000\" : \"#b6b6b6\")};\n  font-size: 13px;\n  font-weight: ${({ $isActive }) => ($isActive ? \"bold\" : \"normal\")};\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  border-bottom: ${({ $isActive }) => ($isActive ? \"2px solid #000000\" : \"none\")};\n  white-space: nowrap;\n\n  &:hover {\n    color: ${({ $isActive }) => ($isActive ? \"#000000\" : \"#666666\")};\n  }\n`;\n\nconst EditorContainer = styled.div`\n  background-color: transparent;\n  border-radius: 8px;\n  //   padding: 24px;\n  min-height: 600px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst EditorWrapper = styled.div`\n  flex: 1;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  padding: 20px;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-left: auto;\n`;\n\nconst SaveButton = styled.button`\n  padding: 12px 24px;\n  background-color: #000000;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: bold;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n\n  &:hover {\n    background-color: #333333;\n  }\n\n  &:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n  }\n`;\n\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: #6c757d;\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: #f8d7da;\n  color: #721c24;\n  padding: 10px;\n  border-radius: 5px;\n  margin-bottom: 20px;\n`;\n\nexport default TermsPage;\n"
        }
    ]
}