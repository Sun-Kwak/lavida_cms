{
    "sourceFile": "src/pages/CMS/Program/ProgramManagement.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1760076906208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760076990293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n import React from 'react';\n import styled from 'styled-components';\n+import CMSLayout from '../../../components/CMSLayout';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n \n-const Container = styled.div`\n-  padding: 24px;\n-  background-color: ${AppColors.surface};\n-  min-height: 100vh;\n+const PageContainer = styled.div`\n+  width: 100%;\n `;\n \n const Header = styled.div`\n   margin-bottom: 32px;\n@@ -32,18 +31,20 @@\n `;\n \n const ProgramManagement: React.FC = () => {\n   return (\n-    <Container>\n-      <Header>\n-        <Title>프로그램 관리</Title>\n-        <Description>운동 프로그램을 관리하고 설정할 수 있습니다.</Description>\n-      </Header>\n-      \n-      <Content>\n-        <p>프로그램 관리 기능이 구현될 예정입니다.</p>\n-      </Content>\n-    </Container>\n+    <CMSLayout currentPath=\"/cms/program/management\">\n+      <PageContainer>\n+        <Header>\n+          <Title>프로그램 관리</Title>\n+          <Description>운동 프로그램을 관리하고 설정할 수 있습니다.</Description>\n+        </Header>\n+        \n+        <Content>\n+          <p>프로그램 관리 기능이 구현될 예정입니다.</p>\n+        </Content>\n+      </PageContainer>\n+    </CMSLayout>\n   );\n };\n \n export default ProgramManagement;\n"
                },
                {
                    "date": 1760077595068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,699 @@\n-import React from 'react';\n+import React, { useState, useEffect } from 'react';\n import styled from 'styled-components';\n-import CMSLayout from '../../../components/CMSLayout';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, Program } from '../../../utils/indexedDB';\n+import CustomDropdown from '../../../components/CustomDropdown';\n \n-const PageContainer = styled.div`\n+const Container = styled.div`\n   width: 100%;\n `;\n \n-const Header = styled.div`\n-  margin-bottom: 32px;\n+const LoadingState = styled.div`\n+  padding: 24px;\n+  text-align: center;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n `;\n \n-const Title = styled.h1`\n-  ${AppTextStyles.headline1}\n+const ErrorState = styled.div`\n+  padding: 16px;\n+  margin-bottom: 16px;\n+  border: 1px solid ${AppColors.error};\n+  border-radius: 8px;\n+  background-color: ${AppColors.error}10;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const RefreshButton = styled.button`\n+  padding: 8px 16px;\n+  margin-left: 8px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.primary};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: white;\n+  }\n+`;\n+\n+const AddButton = styled.button`\n+  width: 100%;\n+  padding: 12px;\n+  margin-bottom: 16px;\n+  border: 2px dashed ${AppColors.borderLight};\n+  border-radius: 8px;\n+  background-color: transparent;\n   color: ${AppColors.onSurface};\n-  margin-bottom: 8px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    border-color: ${AppColors.primary};\n+    color: ${AppColors.primary};\n+    background-color: ${AppColors.primary}05;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n `;\n \n-const Description = styled.p`\n-  ${AppTextStyles.body1}\n+const Table = styled.div`\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  overflow: hidden;\n+`;\n+\n+const TableHeader = styled.div`\n+  background-color: ${AppColors.background};\n+  padding: 12px 16px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  font-weight: 600;\n+  font-size: ${AppTextStyles.body2.fontSize};\n   color: ${AppColors.onSurface};\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n `;\n \n-const Content = styled.div`\n+const TableStats = styled.span`\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}80;\n+  font-weight: normal;\n+`;\n+\n+const TableRow = styled.div`\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 12px 16px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface};\n+\n+  &:last-child {\n+    border-bottom: none;\n+  }\n+\n+  &:hover {\n+    background-color: ${AppColors.background};\n+  }\n+`;\n+\n+const ProgramInfo = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 4px;\n+`;\n+\n+const ProgramName = styled.span`\n+  font-weight: 500;\n+`;\n+\n+const ProgramDetails = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 4px;\n+`;\n+\n+const DetailItem = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 6px;\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}60;\n+`;\n+\n+const DetailLabel = styled.span`\n+  font-weight: 500;\n+  min-width: 40px;\n+  color: ${AppColors.onSurface}80;\n+`;\n+\n+const DetailValue = styled.span`\n+  color: ${AppColors.onSurface}60;\n+`;\n+\n+const ActionButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const EditButton = styled.button`\n+  padding: 4px 8px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.primary};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: white;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const DeleteButton = styled.button`\n+  padding: 4px 8px;\n+  border: 1px solid ${AppColors.error};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.error};\n+    color: white;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const EmptyState = styled.div`\n+  padding: 24px;\n+  text-align: center;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const AddForm = styled.div`\n+  padding: 16px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  margin-bottom: 16px;\n   background-color: ${AppColors.background};\n+`;\n+\n+const FormRow = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  margin-bottom: 12px;\n+`;\n+\n+const FieldColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 8px;\n+  min-width: 0;\n+  overflow: hidden;\n+`;\n+\n+const Label = styled.label<{ $required?: boolean }>`\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  \n+  ${({ $required }) => $required && `\n+    &::after {\n+      content: ' *';\n+      color: ${AppColors.error};\n+    }\n+  `}\n+`;\n+\n+const Input = styled.input<{ error?: boolean }>`\n+  width: 100%;\n+  min-width: 0;\n+  padding: 12px;\n+  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n+  background-color: ${AppColors.input};\n+  box-sizing: border-box;\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &::placeholder {\n+    color: ${AppColors.onInput1};\n+  }\n+\n+  &:disabled {\n+    background-color: ${AppColors.background};\n+    opacity: 0.5;\n+  }\n+`;\n+\n+const FormButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const SaveButton = styled.button`\n+  flex: 1;\n+  padding: 8px 16px;\n+  border: none;\n+  border-radius: 4px;\n+  background-color: ${AppColors.primary};\n+  color: white;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover:not(:disabled) {\n+    background-color: ${AppColors.secondary};\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const CancelButton = styled.button`\n+  flex: 1;\n+  padding: 8px 16px;\n   border: 1px solid ${AppColors.borderLight};\n-  border-radius: 12px;\n-  padding: 24px;\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover:not(:disabled) {\n+    background-color: ${AppColors.background};\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n `;\n \n+const ErrorText = styled.div`\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  margin-top: 4px;\n+`;\n+\n const ProgramManagement: React.FC = () => {\n+  const [programs, setPrograms] = useState<Program[]>([]);\n+  const [isAdding, setIsAdding] = useState(false);\n+  const [editingId, setEditingId] = useState<string | null>(null);\n+  const [newProgramName, setNewProgramName] = useState('');\n+  const [newProgramType, setNewProgramType] = useState('');\n+  const [editProgramName, setEditProgramName] = useState('');\n+  const [editProgramType, setEditProgramType] = useState('');\n+  const [loading, setLoading] = useState(true);\n+  const [saving, setSaving] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n+\n+  // 프로그램 종류 옵션\n+  const programTypeOptions = [\n+    { value: '횟수제', label: '횟수제' },\n+    { value: '기간제', label: '기간제' }\n+  ];\n+\n+  // 컴포넌트 마운트 시 데이터 로드\n+  useEffect(() => {\n+    loadPrograms();\n+  }, []);\n+\n+  const loadPrograms = async () => {\n+    try {\n+      setLoading(true);\n+      setError(null);\n+      const programData = await dbManager.getAllPrograms();\n+      // 오래된 등록 순서로 정렬 (createdAt 오름차순)\n+      const sortedPrograms = programData.sort((a, b) => \n+        new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n+      );\n+      setPrograms(sortedPrograms);\n+    } catch (err) {\n+      console.error('프로그램 데이터 로드 실패:', err);\n+      setError('프로그램 데이터를 불러오는데 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const validateForm = (name: string, type: string): boolean => {\n+    const newErrors: { [key: string]: string } = {};\n+\n+    if (!name.trim()) {\n+      newErrors.name = '프로그램명을 입력해주세요.';\n+    }\n+\n+    if (!type) {\n+      newErrors.type = '프로그램 종류를 선택해주세요.';\n+    }\n+\n+    setErrors(newErrors);\n+    return Object.keys(newErrors).length === 0;\n+  };\n+\n+  const handleAddProgram = async () => {\n+    if (!validateForm(newProgramName, newProgramType)) {\n+      return;\n+    }\n+\n+    try {\n+      setSaving(true);\n+      setError(null);\n+      \n+      const newProgram = await dbManager.addProgram({\n+        name: newProgramName.trim(),\n+        type: newProgramType,\n+        isActive: true,\n+      });\n+      \n+      // 새로운 프로그램 추가 후 정렬 유지\n+      setPrograms(prev => {\n+        const updated = [...prev, newProgram];\n+        return updated.sort((a, b) => \n+          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n+        );\n+      });\n+      setNewProgramName('');\n+      setNewProgramType('');\n+      setIsAdding(false);\n+      setEditingId(null); // 수정 모드 해제\n+      setErrors({});\n+      \n+      console.log('새 프로그램 추가됨:', newProgram);\n+    } catch (err) {\n+      console.error('프로그램 추가 실패:', err);\n+      setError('프로그램 추가에 실패했습니다.');\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleDeleteProgram = async (id: string) => {\n+    if (!window.confirm('정말로 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.')) {\n+      return;\n+    }\n+\n+    try {\n+      setError(null);\n+      const success = await dbManager.deleteProgram(id);\n+      \n+      if (success) {\n+        setPrograms(prev => prev.filter(program => program.id !== id));\n+        console.log('프로그램 삭제됨:', id);\n+      } else {\n+        throw new Error('삭제 실패');\n+      }\n+    } catch (err) {\n+      console.error('프로그램 삭제 실패:', err);\n+      setError('프로그램 삭제에 실패했습니다.');\n+    }\n+  };\n+\n+  const handleEditProgram = (program: Program) => {\n+    setEditingId(program.id);\n+    setEditProgramName(program.name);\n+    setEditProgramType(program.type);\n+    setIsAdding(false);\n+    setErrors({});\n+  };\n+\n+  const handleUpdateProgram = async () => {\n+    if (!validateForm(editProgramName, editProgramType)) {\n+      return;\n+    }\n+\n+    if (!editingId) return;\n+\n+    try {\n+      setSaving(true);\n+      setError(null);\n+      \n+      const updatedProgram = await dbManager.updateProgram(editingId, {\n+        name: editProgramName.trim(),\n+        type: editProgramType,\n+      });\n+      \n+      if (updatedProgram) {\n+        setPrograms(prev => prev.map(program => \n+          program.id === editingId ? updatedProgram : program\n+        ));\n+        \n+        handleCancelEdit();\n+        console.log('프로그램 수정됨:', updatedProgram);\n+      } else {\n+        throw new Error('수정 실패');\n+      }\n+    } catch (err) {\n+      console.error('프로그램 수정 실패:', err);\n+      setError('프로그램 수정에 실패했습니다.');\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleCancelEdit = () => {\n+    setEditingId(null);\n+    setEditProgramName('');\n+    setEditProgramType('');\n+    setError(null);\n+    setErrors({});\n+  };\n+\n+  const handleCancel = () => {\n+    setNewProgramName('');\n+    setNewProgramType('');\n+    setIsAdding(false);\n+    setEditingId(null);\n+    setEditProgramName('');\n+    setEditProgramType('');\n+    setError(null);\n+    setErrors({});\n+  };\n+\n+  const handleKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter' && !saving) {\n+      handleAddProgram();\n+    }\n+  };\n+\n+  const handleEditKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter' && !saving) {\n+      handleUpdateProgram();\n+    }\n+  };\n+\n+  if (loading) {\n+    return (\n+      <Container>\n+        <LoadingState>프로그램 데이터를 불러오는 중...</LoadingState>\n+      </Container>\n+    );\n+  }\n+\n   return (\n-    <CMSLayout currentPath=\"/cms/program/management\">\n-      <PageContainer>\n-        <Header>\n-          <Title>프로그램 관리</Title>\n-          <Description>운동 프로그램을 관리하고 설정할 수 있습니다.</Description>\n-        </Header>\n-        \n-        <Content>\n-          <p>프로그램 관리 기능이 구현될 예정입니다.</p>\n-        </Content>\n-      </PageContainer>\n-    </CMSLayout>\n+    <Container>\n+      {error && (\n+        <ErrorState>\n+          {error}\n+          <RefreshButton onClick={loadPrograms}>\n+            다시 시도\n+          </RefreshButton>\n+        </ErrorState>\n+      )}\n+\n+      {isAdding && (\n+        <AddForm>\n+          <FormRow>\n+            <FieldColumn>\n+              <Label $required>프로그램명</Label>\n+              <Input\n+                type=\"text\"\n+                placeholder=\"프로그램명을 입력하세요\"\n+                value={newProgramName}\n+                onChange={(e) => setNewProgramName(e.target.value)}\n+                onKeyPress={handleKeyPress}\n+                disabled={saving}\n+                error={!!errors.name}\n+                autoFocus\n+              />\n+              {errors.name && <ErrorText>{errors.name}</ErrorText>}\n+            </FieldColumn>\n+            <FieldColumn>\n+              <Label $required>프로그램 종류</Label>\n+              <CustomDropdown\n+                value={newProgramType}\n+                onChange={(value: string) => setNewProgramType(value)}\n+                options={programTypeOptions}\n+                placeholder=\"프로그램 종류를 선택하세요\"\n+                error={!!errors.type}\n+                disabled={saving}\n+                required\n+              />\n+              {errors.type && <ErrorText>{errors.type}</ErrorText>}\n+            </FieldColumn>\n+          </FormRow>\n+          <FormButtons>\n+            <SaveButton onClick={handleAddProgram} disabled={saving}>\n+              {saving ? '저장 중...' : '저장'}\n+            </SaveButton>\n+            <CancelButton onClick={handleCancel} disabled={saving}>\n+              취소\n+            </CancelButton>\n+          </FormButtons>\n+        </AddForm>\n+      )}\n+\n+      {!isAdding && (\n+        <AddButton onClick={() => {\n+          setIsAdding(true);\n+          setEditingId(null);\n+          setEditProgramName('');\n+          setEditProgramType('');\n+          setErrors({});\n+        }} disabled={loading || editingId !== null}>\n+          + 새 프로그램 추가\n+        </AddButton>\n+      )}\n+\n+      <Table>\n+        <TableHeader>\n+          프로그램 목록\n+          <TableStats>총 {programs.length}개 프로그램</TableStats>\n+        </TableHeader>\n+        {programs.length === 0 ? (\n+          <EmptyState>등록된 프로그램이 없습니다.</EmptyState>\n+        ) : (\n+          programs.map((program) => (\n+            <TableRow \n+              key={program.id}\n+              style={editingId === program.id ? {\n+                flexDirection: 'column',\n+                alignItems: 'stretch',\n+                padding: '16px',\n+                backgroundColor: `${AppColors.primary}05`\n+              } : {}}\n+            >\n+              {editingId === program.id ? (\n+                // 수정 모드\n+                <div style={{ \n+                  width: '100%', \n+                  display: 'flex', \n+                  flexDirection: 'column', \n+                  gap: '12px',\n+                  padding: '8px 0'\n+                }}>\n+                  <div style={{ display: 'flex', gap: '12px' }}>\n+                    <FieldColumn>\n+                      <Label $required>프로그램명</Label>\n+                      <Input\n+                        type=\"text\"\n+                        value={editProgramName}\n+                        onChange={(e) => setEditProgramName(e.target.value)}\n+                        onKeyPress={handleEditKeyPress}\n+                        disabled={saving}\n+                        error={!!errors.name}\n+                        placeholder=\"프로그램명을 입력하세요\"\n+                        autoFocus\n+                      />\n+                      {errors.name && <ErrorText>{errors.name}</ErrorText>}\n+                    </FieldColumn>\n+                    <FieldColumn>\n+                      <Label $required>프로그램 종류</Label>\n+                      <CustomDropdown\n+                        value={editProgramType}\n+                        onChange={(value: string) => setEditProgramType(value)}\n+                        options={programTypeOptions}\n+                        placeholder=\"프로그램 종류를 선택하세요\"\n+                        error={!!errors.type}\n+                        disabled={saving}\n+                        required\n+                      />\n+                      {errors.type && <ErrorText>{errors.type}</ErrorText>}\n+                    </FieldColumn>\n+                  </div>\n+                  <div style={{ \n+                    display: 'flex', \n+                    gap: '8px', \n+                    justifyContent: 'flex-end',\n+                    marginTop: '4px'\n+                  }}>\n+                    <SaveButton \n+                      onClick={handleUpdateProgram} \n+                      disabled={saving}\n+                      style={{ \n+                        padding: '6px 16px', \n+                        fontSize: '13px',\n+                        minWidth: '60px'\n+                      }}\n+                    >\n+                      {saving ? '저장 중...' : '저장'}\n+                    </SaveButton>\n+                    <CancelButton \n+                      onClick={handleCancelEdit} \n+                      disabled={saving}\n+                      style={{ \n+                        padding: '6px 16px', \n+                        fontSize: '13px',\n+                        minWidth: '60px'\n+                      }}\n+                    >\n+                      취소\n+                    </CancelButton>\n+                  </div>\n+                </div>\n+              ) : (\n+                // 보기 모드\n+                <>\n+                  <ProgramInfo>\n+                    <ProgramName>{program.name}</ProgramName>\n+                    <ProgramDetails>\n+                      <DetailItem>\n+                        <DetailLabel>종류:</DetailLabel>\n+                        <DetailValue>{program.type}</DetailValue>\n+                      </DetailItem>\n+                    </ProgramDetails>\n+                  </ProgramInfo>\n+                  <ActionButtons>\n+                    <EditButton \n+                      onClick={() => handleEditProgram(program)}\n+                      disabled={saving || editingId !== null}\n+                    >\n+                      수정\n+                    </EditButton>\n+                    <DeleteButton \n+                      onClick={() => handleDeleteProgram(program.id)}\n+                      disabled={saving || editingId !== null}\n+                    >\n+                      삭제\n+                    </DeleteButton>\n+                  </ActionButtons>\n+                </>\n+              )}\n+            </TableRow>\n+          ))\n+        )}\n+      </Table>\n+    </Container>\n   );\n };\n \n export default ProgramManagement;\n"
                },
                {
                    "date": 1760077684694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, Program } from '../../../utils/indexedDB';\n import CustomDropdown from '../../../components/CustomDropdown';\n+import CMSLayout from '../../../components/CMSLayout';\n \n const Container = styled.div`\n   width: 100%;\n `;\n@@ -502,198 +503,202 @@\n   };\n \n   if (loading) {\n     return (\n-      <Container>\n-        <LoadingState>프로그램 데이터를 불러오는 중...</LoadingState>\n-      </Container>\n+      <CMSLayout>\n+        <Container>\n+          <LoadingState>프로그램 데이터를 불러오는 중...</LoadingState>\n+        </Container>\n+      </CMSLayout>\n     );\n   }\n \n   return (\n-    <Container>\n-      {error && (\n-        <ErrorState>\n-          {error}\n-          <RefreshButton onClick={loadPrograms}>\n-            다시 시도\n-          </RefreshButton>\n-        </ErrorState>\n-      )}\n+    <CMSLayout>\n+      <Container>\n+        {error && (\n+          <ErrorState>\n+            {error}\n+            <RefreshButton onClick={loadPrograms}>\n+              다시 시도\n+            </RefreshButton>\n+          </ErrorState>\n+        )}\n \n-      {isAdding && (\n-        <AddForm>\n-          <FormRow>\n-            <FieldColumn>\n-              <Label $required>프로그램명</Label>\n-              <Input\n-                type=\"text\"\n-                placeholder=\"프로그램명을 입력하세요\"\n-                value={newProgramName}\n-                onChange={(e) => setNewProgramName(e.target.value)}\n-                onKeyPress={handleKeyPress}\n-                disabled={saving}\n-                error={!!errors.name}\n-                autoFocus\n-              />\n-              {errors.name && <ErrorText>{errors.name}</ErrorText>}\n-            </FieldColumn>\n-            <FieldColumn>\n-              <Label $required>프로그램 종류</Label>\n-              <CustomDropdown\n-                value={newProgramType}\n-                onChange={(value: string) => setNewProgramType(value)}\n-                options={programTypeOptions}\n-                placeholder=\"프로그램 종류를 선택하세요\"\n-                error={!!errors.type}\n-                disabled={saving}\n-                required\n-              />\n-              {errors.type && <ErrorText>{errors.type}</ErrorText>}\n-            </FieldColumn>\n-          </FormRow>\n-          <FormButtons>\n-            <SaveButton onClick={handleAddProgram} disabled={saving}>\n-              {saving ? '저장 중...' : '저장'}\n-            </SaveButton>\n-            <CancelButton onClick={handleCancel} disabled={saving}>\n-              취소\n-            </CancelButton>\n-          </FormButtons>\n-        </AddForm>\n-      )}\n+        {isAdding && (\n+          <AddForm>\n+            <FormRow>\n+              <FieldColumn>\n+                <Label $required>프로그램명</Label>\n+                <Input\n+                  type=\"text\"\n+                  placeholder=\"프로그램명을 입력하세요\"\n+                  value={newProgramName}\n+                  onChange={(e) => setNewProgramName(e.target.value)}\n+                  onKeyPress={handleKeyPress}\n+                  disabled={saving}\n+                  error={!!errors.name}\n+                  autoFocus\n+                />\n+                {errors.name && <ErrorText>{errors.name}</ErrorText>}\n+              </FieldColumn>\n+              <FieldColumn>\n+                <Label $required>프로그램 종류</Label>\n+                <CustomDropdown\n+                  value={newProgramType}\n+                  onChange={(value: string) => setNewProgramType(value)}\n+                  options={programTypeOptions}\n+                  placeholder=\"프로그램 종류를 선택하세요\"\n+                  error={!!errors.type}\n+                  disabled={saving}\n+                  required\n+                />\n+                {errors.type && <ErrorText>{errors.type}</ErrorText>}\n+              </FieldColumn>\n+            </FormRow>\n+            <FormButtons>\n+              <SaveButton onClick={handleAddProgram} disabled={saving}>\n+                {saving ? '저장 중...' : '저장'}\n+              </SaveButton>\n+              <CancelButton onClick={handleCancel} disabled={saving}>\n+                취소\n+              </CancelButton>\n+            </FormButtons>\n+          </AddForm>\n+        )}\n \n-      {!isAdding && (\n-        <AddButton onClick={() => {\n-          setIsAdding(true);\n-          setEditingId(null);\n-          setEditProgramName('');\n-          setEditProgramType('');\n-          setErrors({});\n-        }} disabled={loading || editingId !== null}>\n-          + 새 프로그램 추가\n-        </AddButton>\n-      )}\n+        {!isAdding && (\n+          <AddButton onClick={() => {\n+            setIsAdding(true);\n+            setEditingId(null);\n+            setEditProgramName('');\n+            setEditProgramType('');\n+            setErrors({});\n+          }} disabled={loading || editingId !== null}>\n+            + 새 프로그램 추가\n+          </AddButton>\n+        )}\n \n-      <Table>\n-        <TableHeader>\n-          프로그램 목록\n-          <TableStats>총 {programs.length}개 프로그램</TableStats>\n-        </TableHeader>\n-        {programs.length === 0 ? (\n-          <EmptyState>등록된 프로그램이 없습니다.</EmptyState>\n-        ) : (\n-          programs.map((program) => (\n-            <TableRow \n-              key={program.id}\n-              style={editingId === program.id ? {\n-                flexDirection: 'column',\n-                alignItems: 'stretch',\n-                padding: '16px',\n-                backgroundColor: `${AppColors.primary}05`\n-              } : {}}\n-            >\n-              {editingId === program.id ? (\n-                // 수정 모드\n-                <div style={{ \n-                  width: '100%', \n-                  display: 'flex', \n-                  flexDirection: 'column', \n-                  gap: '12px',\n-                  padding: '8px 0'\n-                }}>\n-                  <div style={{ display: 'flex', gap: '12px' }}>\n-                    <FieldColumn>\n-                      <Label $required>프로그램명</Label>\n-                      <Input\n-                        type=\"text\"\n-                        value={editProgramName}\n-                        onChange={(e) => setEditProgramName(e.target.value)}\n-                        onKeyPress={handleEditKeyPress}\n-                        disabled={saving}\n-                        error={!!errors.name}\n-                        placeholder=\"프로그램명을 입력하세요\"\n-                        autoFocus\n-                      />\n-                      {errors.name && <ErrorText>{errors.name}</ErrorText>}\n-                    </FieldColumn>\n-                    <FieldColumn>\n-                      <Label $required>프로그램 종류</Label>\n-                      <CustomDropdown\n-                        value={editProgramType}\n-                        onChange={(value: string) => setEditProgramType(value)}\n-                        options={programTypeOptions}\n-                        placeholder=\"프로그램 종류를 선택하세요\"\n-                        error={!!errors.type}\n-                        disabled={saving}\n-                        required\n-                      />\n-                      {errors.type && <ErrorText>{errors.type}</ErrorText>}\n-                    </FieldColumn>\n-                  </div>\n+        <Table>\n+          <TableHeader>\n+            프로그램 목록\n+            <TableStats>총 {programs.length}개 프로그램</TableStats>\n+          </TableHeader>\n+          {programs.length === 0 ? (\n+            <EmptyState>등록된 프로그램이 없습니다.</EmptyState>\n+          ) : (\n+            programs.map((program) => (\n+              <TableRow \n+                key={program.id}\n+                style={editingId === program.id ? {\n+                  flexDirection: 'column',\n+                  alignItems: 'stretch',\n+                  padding: '16px',\n+                  backgroundColor: `${AppColors.primary}05`\n+                } : {}}\n+              >\n+                {editingId === program.id ? (\n+                  // 수정 모드\n                   <div style={{ \n+                    width: '100%', \n                     display: 'flex', \n-                    gap: '8px', \n-                    justifyContent: 'flex-end',\n-                    marginTop: '4px'\n+                    flexDirection: 'column', \n+                    gap: '12px',\n+                    padding: '8px 0'\n                   }}>\n-                    <SaveButton \n-                      onClick={handleUpdateProgram} \n-                      disabled={saving}\n-                      style={{ \n-                        padding: '6px 16px', \n-                        fontSize: '13px',\n-                        minWidth: '60px'\n-                      }}\n-                    >\n-                      {saving ? '저장 중...' : '저장'}\n-                    </SaveButton>\n-                    <CancelButton \n-                      onClick={handleCancelEdit} \n-                      disabled={saving}\n-                      style={{ \n-                        padding: '6px 16px', \n-                        fontSize: '13px',\n-                        minWidth: '60px'\n-                      }}\n-                    >\n-                      취소\n-                    </CancelButton>\n+                    <div style={{ display: 'flex', gap: '12px' }}>\n+                      <FieldColumn>\n+                        <Label $required>프로그램명</Label>\n+                        <Input\n+                          type=\"text\"\n+                          value={editProgramName}\n+                          onChange={(e) => setEditProgramName(e.target.value)}\n+                          onKeyPress={handleEditKeyPress}\n+                          disabled={saving}\n+                          error={!!errors.name}\n+                          placeholder=\"프로그램명을 입력하세요\"\n+                          autoFocus\n+                        />\n+                        {errors.name && <ErrorText>{errors.name}</ErrorText>}\n+                      </FieldColumn>\n+                      <FieldColumn>\n+                        <Label $required>프로그램 종류</Label>\n+                        <CustomDropdown\n+                          value={editProgramType}\n+                          onChange={(value: string) => setEditProgramType(value)}\n+                          options={programTypeOptions}\n+                          placeholder=\"프로그램 종류를 선택하세요\"\n+                          error={!!errors.type}\n+                          disabled={saving}\n+                          required\n+                        />\n+                        {errors.type && <ErrorText>{errors.type}</ErrorText>}\n+                      </FieldColumn>\n+                    </div>\n+                    <div style={{ \n+                      display: 'flex', \n+                      gap: '8px', \n+                      justifyContent: 'flex-end',\n+                      marginTop: '4px'\n+                    }}>\n+                      <SaveButton \n+                        onClick={handleUpdateProgram} \n+                        disabled={saving}\n+                        style={{ \n+                          padding: '6px 16px', \n+                          fontSize: '13px',\n+                          minWidth: '60px'\n+                        }}\n+                      >\n+                        {saving ? '저장 중...' : '저장'}\n+                      </SaveButton>\n+                      <CancelButton \n+                        onClick={handleCancelEdit} \n+                        disabled={saving}\n+                        style={{ \n+                          padding: '6px 16px', \n+                          fontSize: '13px',\n+                          minWidth: '60px'\n+                        }}\n+                      >\n+                        취소\n+                      </CancelButton>\n+                    </div>\n                   </div>\n-                </div>\n-              ) : (\n-                // 보기 모드\n-                <>\n-                  <ProgramInfo>\n-                    <ProgramName>{program.name}</ProgramName>\n-                    <ProgramDetails>\n-                      <DetailItem>\n-                        <DetailLabel>종류:</DetailLabel>\n-                        <DetailValue>{program.type}</DetailValue>\n-                      </DetailItem>\n-                    </ProgramDetails>\n-                  </ProgramInfo>\n-                  <ActionButtons>\n-                    <EditButton \n-                      onClick={() => handleEditProgram(program)}\n-                      disabled={saving || editingId !== null}\n-                    >\n-                      수정\n-                    </EditButton>\n-                    <DeleteButton \n-                      onClick={() => handleDeleteProgram(program.id)}\n-                      disabled={saving || editingId !== null}\n-                    >\n-                      삭제\n-                    </DeleteButton>\n-                  </ActionButtons>\n-                </>\n-              )}\n-            </TableRow>\n-          ))\n-        )}\n-      </Table>\n-    </Container>\n+                ) : (\n+                  // 보기 모드\n+                  <>\n+                    <ProgramInfo>\n+                      <ProgramName>{program.name}</ProgramName>\n+                      <ProgramDetails>\n+                        <DetailItem>\n+                          <DetailLabel>종류:</DetailLabel>\n+                          <DetailValue>{program.type}</DetailValue>\n+                        </DetailItem>\n+                      </ProgramDetails>\n+                    </ProgramInfo>\n+                    <ActionButtons>\n+                      <EditButton \n+                        onClick={() => handleEditProgram(program)}\n+                        disabled={saving || editingId !== null}\n+                      >\n+                        수정\n+                      </EditButton>\n+                      <DeleteButton \n+                        onClick={() => handleDeleteProgram(program.id)}\n+                        disabled={saving || editingId !== null}\n+                      >\n+                        삭제\n+                      </DeleteButton>\n+                    </ActionButtons>\n+                  </>\n+                )}\n+              </TableRow>\n+            ))\n+          )}\n+        </Table>\n+      </Container>\n+    </CMSLayout>\n   );\n };\n \n export default ProgramManagement;\n"
                },
                {
                    "date": 1760077843308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n-import React, { useState, useEffect } from 'react';\n+import React, { useState, useEffect, useCallback } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, Program } from '../../../utils/indexedDB';\n import CustomDropdown from '../../../components/CustomDropdown';\n import CMSLayout from '../../../components/CMSLayout';\n+import { SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n \n const Container = styled.div`\n   width: 100%;\n `;\n@@ -325,20 +326,56 @@\n   const [loading, setLoading] = useState(true);\n   const [saving, setSaving] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n   const [errors, setErrors] = useState<{ [key: string]: string }>({});\n+  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\n+  const [currentUserInfo, setCurrentUserInfo] = useState<any>(null);\n+  const [hasPermission, setHasPermission] = useState(false);\n \n   // 프로그램 종류 옵션\n   const programTypeOptions = [\n     { value: '횟수제', label: '횟수제' },\n     { value: '기간제', label: '기간제' }\n   ];\n \n-  // 컴포넌트 마운트 시 데이터 로드\n-  useEffect(() => {\n-    loadPrograms();\n+  // 컴포넌트 마운트 시 권한 체크 및 데이터 로드\n+  const checkPermissionAndLoadData = useCallback(async () => {\n+    try {\n+      const adminId = sessionStorage.getItem('adminId');\n+      setCurrentUserId(adminId);\n+      \n+      if (adminId) {\n+        // 현재 로그인한 사용자 정보 가져오기\n+        const allStaff = await dbManager.getAllStaff();\n+        const currentUser = allStaff.find(staff => staff.loginId === adminId);\n+        setCurrentUserInfo(currentUser || null);\n+        \n+        // MASTER 권한 또는 시스템 관리자만 접근 가능\n+        const isMaster = currentUser && currentUser.permission === 'MASTER';\n+        const isSystemAdmin = adminId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n+        \n+        if (isMaster || isSystemAdmin) {\n+          setHasPermission(true);\n+          loadPrograms();\n+        } else {\n+          setHasPermission(false);\n+          setLoading(false);\n+        }\n+      } else {\n+        setHasPermission(false);\n+        setLoading(false);\n+      }\n+    } catch (error) {\n+      console.error('권한 체크 실패:', error);\n+      setHasPermission(false);\n+      setLoading(false);\n+    }\n   }, []);\n \n+  useEffect(() => {\n+    checkPermissionAndLoadData();\n+  }, [checkPermissionAndLoadData]);\n+\n   const loadPrograms = async () => {\n     try {\n       setLoading(true);\n       setError(null);\n@@ -505,14 +542,27 @@\n   if (loading) {\n     return (\n       <CMSLayout>\n         <Container>\n-          <LoadingState>프로그램 데이터를 불러오는 중...</LoadingState>\n+          <LoadingState>권한을 확인하는 중...</LoadingState>\n         </Container>\n       </CMSLayout>\n     );\n   }\n \n+  // 권한이 없는 경우\n+  if (!hasPermission) {\n+    return (\n+      <CMSLayout>\n+        <Container>\n+          <ErrorState>\n+            접근 권한이 없습니다. 프로그램 관리는 MASTER 권한만 접근 가능합니다.\n+          </ErrorState>\n+        </Container>\n+      </CMSLayout>\n+    );\n+  }\n+\n   return (\n     <CMSLayout>\n       <Container>\n         {error && (\n"
                },
                {
                    "date": 1760077990882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -348,27 +348,24 @@\n         const allStaff = await dbManager.getAllStaff();\n         const currentUser = allStaff.find(staff => staff.loginId === adminId);\n         setCurrentUserInfo(currentUser || null);\n         \n-        // MASTER 권한 또는 시스템 관리자만 접근 가능\n+        // MASTER 권한 또는 시스템 관리자만 편집 가능\n         const isMaster = currentUser && currentUser.permission === 'MASTER';\n         const isSystemAdmin = adminId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n         \n-        if (isMaster || isSystemAdmin) {\n-          setHasPermission(true);\n-          loadPrograms();\n-        } else {\n-          setHasPermission(false);\n-          setLoading(false);\n-        }\n+        setHasPermission(isMaster || isSystemAdmin);\n+        \n+        // 모든 권한에서 프로그램 목록은 볼 수 있음\n+        loadPrograms();\n       } else {\n         setHasPermission(false);\n-        setLoading(false);\n+        loadPrograms(); // 로그인하지 않아도 목록은 볼 수 있음\n       }\n     } catch (error) {\n       console.error('권한 체크 실패:', error);\n       setHasPermission(false);\n-      setLoading(false);\n+      loadPrograms(); // 에러가 있어도 목록은 표시\n     }\n   }, []);\n \n   useEffect(() => {\n@@ -542,27 +539,14 @@\n   if (loading) {\n     return (\n       <CMSLayout>\n         <Container>\n-          <LoadingState>권한을 확인하는 중...</LoadingState>\n+          <LoadingState>프로그램 데이터를 불러오는 중...</LoadingState>\n         </Container>\n       </CMSLayout>\n     );\n   }\n \n-  // 권한이 없는 경우\n-  if (!hasPermission) {\n-    return (\n-      <CMSLayout>\n-        <Container>\n-          <ErrorState>\n-            접근 권한이 없습니다. 프로그램 관리는 MASTER 권한만 접근 가능합니다.\n-          </ErrorState>\n-        </Container>\n-      </CMSLayout>\n-    );\n-  }\n-\n   return (\n     <CMSLayout>\n       <Container>\n         {error && (\n@@ -573,9 +557,9 @@\n             </RefreshButton>\n           </ErrorState>\n         )}\n \n-        {isAdding && (\n+        {hasPermission && isAdding && (\n           <AddForm>\n             <FormRow>\n               <FieldColumn>\n                 <Label $required>프로그램명</Label>\n@@ -615,9 +599,9 @@\n             </FormButtons>\n           </AddForm>\n         )}\n \n-        {!isAdding && (\n+        {hasPermission && !isAdding && (\n           <AddButton onClick={() => {\n             setIsAdding(true);\n             setEditingId(null);\n             setEditProgramName('');\n@@ -627,8 +611,14 @@\n             + 새 프로그램 추가\n           </AddButton>\n         )}\n \n+        {!hasPermission && (\n+          <ErrorState style={{ marginBottom: '16px', backgroundColor: `${AppColors.primary}10`, borderColor: AppColors.primary, color: AppColors.primary }}>\n+            ℹ️ 프로그램 목록 조회만 가능합니다. 추가/수정/삭제는 MASTER 권한이 필요합니다.\n+          </ErrorState>\n+        )}\n+\n         <Table>\n           <TableHeader>\n             프로그램 목록\n             <TableStats>총 {programs.length}개 프로그램</TableStats>\n@@ -725,22 +715,24 @@\n                           <DetailValue>{program.type}</DetailValue>\n                         </DetailItem>\n                       </ProgramDetails>\n                     </ProgramInfo>\n-                    <ActionButtons>\n-                      <EditButton \n-                        onClick={() => handleEditProgram(program)}\n-                        disabled={saving || editingId !== null}\n-                      >\n-                        수정\n-                      </EditButton>\n-                      <DeleteButton \n-                        onClick={() => handleDeleteProgram(program.id)}\n-                        disabled={saving || editingId !== null}\n-                      >\n-                        삭제\n-                      </DeleteButton>\n-                    </ActionButtons>\n+                    {hasPermission && (\n+                      <ActionButtons>\n+                        <EditButton \n+                          onClick={() => handleEditProgram(program)}\n+                          disabled={saving || editingId !== null}\n+                        >\n+                          수정\n+                        </EditButton>\n+                        <DeleteButton \n+                          onClick={() => handleDeleteProgram(program.id)}\n+                          disabled={saving || editingId !== null}\n+                        >\n+                          삭제\n+                        </DeleteButton>\n+                      </ActionButtons>\n+                    )}\n                   </>\n                 )}\n               </TableRow>\n             ))\n"
                },
                {
                    "date": 1760152441093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, Program } from '../../../utils/indexedDB';\n import CustomDropdown from '../../../components/CustomDropdown';\n-import CMSLayout from '../../../components/CMSLayout';\n+import CMSLayout, { refreshProgramsInNavigation } from '../../../components/CMSLayout';\n import { SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n \n const Container = styled.div`\n   width: 100%;\n@@ -432,8 +432,11 @@\n       setIsAdding(false);\n       setEditingId(null); // 수정 모드 해제\n       setErrors({});\n       \n+      // 네비게이션 메뉴 새로고침\n+      await refreshProgramsInNavigation();\n+      \n       console.log('새 프로그램 추가됨:', newProgram);\n     } catch (err) {\n       console.error('프로그램 추가 실패:', err);\n       setError('프로그램 추가에 실패했습니다.');\n@@ -452,8 +455,12 @@\n       const success = await dbManager.deleteProgram(id);\n       \n       if (success) {\n         setPrograms(prev => prev.filter(program => program.id !== id));\n+        \n+        // 네비게이션 메뉴 새로고침\n+        await refreshProgramsInNavigation();\n+        \n         console.log('프로그램 삭제됨:', id);\n       } else {\n         throw new Error('삭제 실패');\n       }\n@@ -491,8 +498,11 @@\n         setPrograms(prev => prev.map(program => \n           program.id === editingId ? updatedProgram : program\n         ));\n         \n+        // 네비게이션 메뉴 새로고침\n+        await refreshProgramsInNavigation();\n+        \n         handleCancelEdit();\n         console.log('프로그램 수정됨:', updatedProgram);\n       } else {\n         throw new Error('수정 실패');\n"
                },
                {
                    "date": 1760161526171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,13 +235,13 @@\n     }\n   `}\n `;\n \n-const Input = styled.input<{ error?: boolean }>`\n+const Input = styled.input<{ $error?: boolean }>`\n   width: 100%;\n   min-width: 0;\n   padding: 12px;\n-  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n+  border: 1px solid ${({ $error }) => $error ? AppColors.error : AppColors.borderLight};\n   border-radius: 8px;\n   font-size: ${AppTextStyles.body1.fontSize};\n   color: ${AppColors.onSurface};\n   background-color: ${AppColors.input};\n@@ -579,9 +579,9 @@\n                   value={newProgramName}\n                   onChange={(e) => setNewProgramName(e.target.value)}\n                   onKeyPress={handleKeyPress}\n                   disabled={saving}\n-                  error={!!errors.name}\n+                  $error={!!errors.name}\n                   autoFocus\n                 />\n                 {errors.name && <ErrorText>{errors.name}</ErrorText>}\n               </FieldColumn>\n@@ -663,9 +663,9 @@\n                           value={editProgramName}\n                           onChange={(e) => setEditProgramName(e.target.value)}\n                           onKeyPress={handleEditKeyPress}\n                           disabled={saving}\n-                          error={!!errors.name}\n+                          $error={!!errors.name}\n                           placeholder=\"프로그램명을 입력하세요\"\n                           autoFocus\n                         />\n                         {errors.name && <ErrorText>{errors.name}</ErrorText>}\n"
                },
                {
                    "date": 1760161752950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,814 @@\n+import React, { useState, useEffect } from 'react';\n+import styled from 'styled-components';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, Program } from '../../../utils/indexedDB';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import CMSLayout, { refreshProgramsInNavigation } from '../../../components/CMSLayout';\n+import { SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n+\n+const Container = styled.div`\n+  width: 100%;\n+`;\n+\n+const LoadingState = styled.div`\n+  padding: 24px;\n+  text-align: center;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const ErrorState = styled.div`\n+  padding: 16px;\n+  margin-bottom: 16px;\n+  border: 1px solid ${AppColors.error};\n+  border-radius: 8px;\n+  background-color: ${AppColors.error}10;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const RefreshButton = styled.button`\n+  padding: 8px 16px;\n+  margin-left: 8px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.primary};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: white;\n+  }\n+`;\n+\n+const AddButton = styled.button`\n+  width: 100%;\n+  padding: 12px;\n+  margin-bottom: 16px;\n+  border: 2px dashed ${AppColors.borderLight};\n+  border-radius: 8px;\n+  background-color: transparent;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    border-color: ${AppColors.primary};\n+    color: ${AppColors.primary};\n+    background-color: ${AppColors.primary}05;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const Table = styled.div`\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  overflow: hidden;\n+`;\n+\n+const TableHeader = styled.div`\n+  background-color: ${AppColors.background};\n+  padding: 12px 16px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  font-weight: 600;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface};\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+`;\n+\n+const TableStats = styled.span`\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}80;\n+  font-weight: normal;\n+`;\n+\n+const TableRow = styled.div`\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 12px 16px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface};\n+\n+  &:last-child {\n+    border-bottom: none;\n+  }\n+\n+  &:hover {\n+    background-color: ${AppColors.background};\n+  }\n+`;\n+\n+const ProgramInfo = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 4px;\n+`;\n+\n+const ProgramName = styled.span`\n+  font-weight: 500;\n+`;\n+\n+const ProgramDetails = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 4px;\n+`;\n+\n+const DetailItem = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 6px;\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}60;\n+`;\n+\n+const DetailLabel = styled.span`\n+  font-weight: 500;\n+  min-width: 40px;\n+  color: ${AppColors.onSurface}80;\n+`;\n+\n+const DetailValue = styled.span`\n+  color: ${AppColors.onSurface}60;\n+`;\n+\n+const ActionButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const EditButton = styled.button`\n+  padding: 4px 8px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.primary};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: white;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const DeleteButton = styled.button`\n+  padding: 4px 8px;\n+  border: 1px solid ${AppColors.error};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.error};\n+    color: white;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const EmptyState = styled.div`\n+  padding: 24px;\n+  text-align: center;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const AddForm = styled.div`\n+  padding: 16px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  margin-bottom: 16px;\n+  background-color: ${AppColors.background};\n+`;\n+\n+const FormRow = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  margin-bottom: 12px;\n+`;\n+\n+const FieldColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 8px;\n+  min-width: 0;\n+  overflow: hidden;\n+`;\n+\n+const Label = styled.label<{ $required?: boolean }>`\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  \n+  ${({ $required }) => $required && `\n+    &::after {\n+      content: ' *';\n+      color: ${AppColors.error};\n+    }\n+  `}\n+`;\n+\n+const Input = styled.input<{ $error?: boolean }>`\n+  width: 100%;\n+  min-width: 0;\n+  padding: 12px;\n+  border: 1px solid ${({ $error }) => $error ? AppColors.error : AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n+  background-color: ${AppColors.input};\n+  box-sizing: border-box;\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &::placeholder {\n+    color: ${AppColors.onInput1};\n+  }\n+\n+  &:disabled {\n+    background-color: ${AppColors.background};\n+    opacity: 0.5;\n+  }\n+`;\n+\n+const FormButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const SaveButton = styled.button`\n+  flex: 1;\n+  padding: 8px 16px;\n+  border: none;\n+  border-radius: 4px;\n+  background-color: ${AppColors.primary};\n+  color: white;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover:not(:disabled) {\n+    background-color: ${AppColors.secondary};\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const CancelButton = styled.button`\n+  flex: 1;\n+  padding: 8px 16px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover:not(:disabled) {\n+    background-color: ${AppColors.background};\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const ErrorText = styled.div`\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  margin-top: 4px;\n+`;\n+\n+const ProgramManagement: React.FC = () => {\n+  const [programs, setPrograms] = useState<Program[]>([]);\n+  const [isAdding, setIsAdding] = useState(false);\n+  const [editingId, setEditingId] = useState<string | null>(null);\n+  const [newProgramName, setNewProgramName] = useState('');\n+  const [newProgramType, setNewProgramType] = useState('');\n+  const [editProgramName, setEditProgramName] = useState('');\n+  const [editProgramType, setEditProgramType] = useState('');\n+  const [loading, setLoading] = useState(true);\n+  const [saving, setSaving] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n+  const [hasPermission, setHasPermission] = useState(false);\n+  const [programUsageCount, setProgramUsageCount] = useState<{ [key: string]: number }>({});\n+\n+  // 프로그램 종류 옵션\n+  const programTypeOptions = [\n+    { value: '횟수제', label: '횟수제' },\n+    { value: '기간제', label: '기간제' }\n+  ];\n+\n+  // 컴포넌트 마운트 시 권한 체크 및 데이터 로드\n+  const checkPermissionAndLoadData = async () => {\n+    try {\n+      const adminId = sessionStorage.getItem('adminId');\n+      \n+      if (adminId) {\n+        // 현재 로그인한 사용자 정보 가져오기\n+        const allStaff = await dbManager.getAllStaff();\n+        const currentUser = allStaff.find(staff => staff.loginId === adminId);\n+        \n+        // MASTER 권한 또는 시스템 관리자만 편집 가능\n+        const isMaster = currentUser && currentUser.permission === 'MASTER';\n+        const isSystemAdmin = adminId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n+        \n+        setHasPermission(isMaster || isSystemAdmin);\n+        \n+        // 모든 권한에서 프로그램 목록은 볼 수 있음\n+        loadPrograms();\n+      } else {\n+        setHasPermission(false);\n+        loadPrograms(); // 로그인하지 않아도 목록은 볼 수 있음\n+      }\n+    } catch (error) {\n+      console.error('권한 체크 실패:', error);\n+      setHasPermission(false);\n+      loadPrograms(); // 에러가 있어도 목록은 표시\n+    }\n+  };\n+\n+  useEffect(() => {\n+    checkPermissionAndLoadData();\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\n+  }, []);\n+\n+  const loadPrograms = async () => {\n+    try {\n+      setLoading(true);\n+      setError(null);\n+      const programData = await dbManager.getAllPrograms();\n+      // 오래된 등록 순서로 정렬 (createdAt 오름차순)\n+      const sortedPrograms = programData.sort((a, b) => \n+        new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n+      );\n+      setPrograms(sortedPrograms);\n+      \n+      // 각 프로그램의 사용량 확인\n+      await loadProgramUsageCount(sortedPrograms);\n+    } catch (err) {\n+      console.error('프로그램 데이터 로드 실패:', err);\n+      setError('프로그램 데이터를 불러오는데 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const loadProgramUsageCount = async (programList: Program[]) => {\n+    try {\n+      const usageCount: { [key: string]: number } = {};\n+      \n+      for (const program of programList) {\n+        const relatedProducts = await dbManager.getProductsByProgram(program.id);\n+        usageCount[program.id] = relatedProducts.length;\n+      }\n+      \n+      setProgramUsageCount(usageCount);\n+    } catch (err) {\n+      console.error('프로그램 사용량 확인 실패:', err);\n+    }\n+  };\n+\n+  const validateForm = (name: string, type: string): boolean => {\n+    const newErrors: { [key: string]: string } = {};\n+\n+    if (!name.trim()) {\n+      newErrors.name = '프로그램명을 입력해주세요.';\n+    }\n+\n+    if (!type) {\n+      newErrors.type = '프로그램 종류를 선택해주세요.';\n+    }\n+\n+    setErrors(newErrors);\n+    return Object.keys(newErrors).length === 0;\n+  };\n+\n+  const handleAddProgram = async () => {\n+    if (!validateForm(newProgramName, newProgramType)) {\n+      return;\n+    }\n+\n+    try {\n+      setSaving(true);\n+      setError(null);\n+      \n+      const newProgram = await dbManager.addProgram({\n+        name: newProgramName.trim(),\n+        type: newProgramType,\n+        isActive: true,\n+      });\n+      \n+      // 새로운 프로그램 추가 후 정렬 유지\n+      setPrograms(prev => {\n+        const updated = [...prev, newProgram];\n+        const sorted = updated.sort((a, b) => \n+          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n+        );\n+        \n+        // 사용량 정보도 업데이트\n+        loadProgramUsageCount(sorted);\n+        \n+        return sorted;\n+      });\n+      setNewProgramName('');\n+      setNewProgramType('');\n+      setIsAdding(false);\n+      setEditingId(null); // 수정 모드 해제\n+      setErrors({});\n+      \n+      // 네비게이션 메뉴 새로고침\n+      await refreshProgramsInNavigation();\n+      \n+      console.log('새 프로그램 추가됨:', newProgram);\n+    } catch (err) {\n+      console.error('프로그램 추가 실패:', err);\n+      setError('프로그램 추가에 실패했습니다.');\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleDeleteProgram = async (id: string) => {\n+    try {\n+      setError(null);\n+      \n+      // 먼저 해당 프로그램이 상품에서 사용되고 있는지 확인\n+      const relatedProducts = await dbManager.getProductsByProgram(id);\n+      \n+      if (relatedProducts.length > 0) {\n+        const programName = programs.find(p => p.id === id)?.name || '해당 프로그램';\n+        setError(`${programName}은(는) 현재 ${relatedProducts.length}개의 상품에서 사용 중이므로 삭제할 수 없습니다.\\n먼저 관련 상품들을 삭제하거나 다른 프로그램으로 변경해주세요.`);\n+        return;\n+      }\n+      \n+      if (!window.confirm('정말로 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.')) {\n+        return;\n+      }\n+\n+      const success = await dbManager.deleteProgram(id);\n+      \n+      if (success) {\n+        setPrograms(prev => prev.filter(program => program.id !== id));\n+        \n+        // 네비게이션 메뉴 새로고침\n+        await refreshProgramsInNavigation();\n+        \n+        // 프로그램 사용량 다시 로드\n+        const updatedPrograms = programs.filter(program => program.id !== id);\n+        await loadProgramUsageCount(updatedPrograms);\n+        \n+        console.log('프로그램 삭제됨:', id);\n+      } else {\n+        throw new Error('삭제 실패');\n+      }\n+    } catch (err) {\n+      console.error('프로그램 삭제 실패:', err);\n+      setError('프로그램 삭제에 실패했습니다.');\n+    }\n+  };\n+\n+  const handleEditProgram = (program: Program) => {\n+    setEditingId(program.id);\n+    setEditProgramName(program.name);\n+    setEditProgramType(program.type);\n+    setIsAdding(false);\n+    setErrors({});\n+  };\n+\n+  const handleUpdateProgram = async () => {\n+    if (!validateForm(editProgramName, editProgramType)) {\n+      return;\n+    }\n+\n+    if (!editingId) return;\n+\n+    try {\n+      setSaving(true);\n+      setError(null);\n+      \n+      const updatedProgram = await dbManager.updateProgram(editingId, {\n+        name: editProgramName.trim(),\n+        type: editProgramType,\n+      });\n+      \n+      if (updatedProgram) {\n+        setPrograms(prev => {\n+          const updated = prev.map(program => \n+            program.id === editingId ? updatedProgram : program\n+          );\n+          \n+          // 사용량 정보도 업데이트\n+          loadProgramUsageCount(updated);\n+          \n+          return updated;\n+        });\n+        \n+        // 네비게이션 메뉴 새로고침\n+        await refreshProgramsInNavigation();\n+        \n+        handleCancelEdit();\n+        console.log('프로그램 수정됨:', updatedProgram);\n+      } else {\n+        throw new Error('수정 실패');\n+      }\n+    } catch (err) {\n+      console.error('프로그램 수정 실패:', err);\n+      setError('프로그램 수정에 실패했습니다.');\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleCancelEdit = () => {\n+    setEditingId(null);\n+    setEditProgramName('');\n+    setEditProgramType('');\n+    setError(null);\n+    setErrors({});\n+  };\n+\n+  const handleCancel = () => {\n+    setNewProgramName('');\n+    setNewProgramType('');\n+    setIsAdding(false);\n+    setEditingId(null);\n+    setEditProgramName('');\n+    setEditProgramType('');\n+    setError(null);\n+    setErrors({});\n+  };\n+\n+  const handleKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter' && !saving) {\n+      handleAddProgram();\n+    }\n+  };\n+\n+  const handleEditKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter' && !saving) {\n+      handleUpdateProgram();\n+    }\n+  };\n+\n+  if (loading) {\n+    return (\n+      <CMSLayout>\n+        <Container>\n+          <LoadingState>프로그램 데이터를 불러오는 중...</LoadingState>\n+        </Container>\n+      </CMSLayout>\n+    );\n+  }\n+\n+  return (\n+    <CMSLayout>\n+      <Container>\n+        {error && (\n+          <ErrorState>\n+            {error}\n+            <RefreshButton onClick={loadPrograms}>\n+              다시 시도\n+            </RefreshButton>\n+          </ErrorState>\n+        )}\n+\n+        {hasPermission && isAdding && (\n+          <AddForm>\n+            <FormRow>\n+              <FieldColumn>\n+                <Label $required>프로그램명</Label>\n+                <Input\n+                  type=\"text\"\n+                  placeholder=\"프로그램명을 입력하세요\"\n+                  value={newProgramName}\n+                  onChange={(e) => setNewProgramName(e.target.value)}\n+                  onKeyPress={handleKeyPress}\n+                  disabled={saving}\n+                  $error={!!errors.name}\n+                  autoFocus\n+                />\n+                {errors.name && <ErrorText>{errors.name}</ErrorText>}\n+              </FieldColumn>\n+              <FieldColumn>\n+                <Label $required>프로그램 종류</Label>\n+                <CustomDropdown\n+                  value={newProgramType}\n+                  onChange={(value: string) => setNewProgramType(value)}\n+                  options={programTypeOptions}\n+                  placeholder=\"프로그램 종류를 선택하세요\"\n+                  error={!!errors.type}\n+                  disabled={saving}\n+                  required\n+                />\n+                {errors.type && <ErrorText>{errors.type}</ErrorText>}\n+              </FieldColumn>\n+            </FormRow>\n+            <FormButtons>\n+              <SaveButton onClick={handleAddProgram} disabled={saving}>\n+                {saving ? '저장 중...' : '저장'}\n+              </SaveButton>\n+              <CancelButton onClick={handleCancel} disabled={saving}>\n+                취소\n+              </CancelButton>\n+            </FormButtons>\n+          </AddForm>\n+        )}\n+\n+        {hasPermission && !isAdding && (\n+          <AddButton onClick={() => {\n+            setIsAdding(true);\n+            setEditingId(null);\n+            setEditProgramName('');\n+            setEditProgramType('');\n+            setErrors({});\n+          }} disabled={loading || editingId !== null}>\n+            + 새 프로그램 추가\n+          </AddButton>\n+        )}\n+\n+        {!hasPermission && (\n+          <ErrorState style={{ marginBottom: '16px', backgroundColor: `${AppColors.primary}10`, borderColor: AppColors.primary, color: AppColors.primary }}>\n+            ℹ️ 프로그램 목록 조회만 가능합니다. 추가/수정/삭제는 MASTER 권한이 필요합니다.\n+          </ErrorState>\n+        )}\n+\n+        <Table>\n+          <TableHeader>\n+            프로그램 목록\n+            <TableStats>총 {programs.length}개 프로그램</TableStats>\n+          </TableHeader>\n+          {programs.length === 0 ? (\n+            <EmptyState>등록된 프로그램이 없습니다.</EmptyState>\n+          ) : (\n+            programs.map((program) => (\n+              <TableRow \n+                key={program.id}\n+                style={editingId === program.id ? {\n+                  flexDirection: 'column',\n+                  alignItems: 'stretch',\n+                  padding: '16px',\n+                  backgroundColor: `${AppColors.primary}05`\n+                } : {}}\n+              >\n+                {editingId === program.id ? (\n+                  // 수정 모드\n+                  <div style={{ \n+                    width: '100%', \n+                    display: 'flex', \n+                    flexDirection: 'column', \n+                    gap: '12px',\n+                    padding: '8px 0'\n+                  }}>\n+                    <div style={{ display: 'flex', gap: '12px' }}>\n+                      <FieldColumn>\n+                        <Label $required>프로그램명</Label>\n+                        <Input\n+                          type=\"text\"\n+                          value={editProgramName}\n+                          onChange={(e) => setEditProgramName(e.target.value)}\n+                          onKeyPress={handleEditKeyPress}\n+                          disabled={saving}\n+                          $error={!!errors.name}\n+                          placeholder=\"프로그램명을 입력하세요\"\n+                          autoFocus\n+                        />\n+                        {errors.name && <ErrorText>{errors.name}</ErrorText>}\n+                      </FieldColumn>\n+                      <FieldColumn>\n+                        <Label $required>프로그램 종류</Label>\n+                        <CustomDropdown\n+                          value={editProgramType}\n+                          onChange={(value: string) => setEditProgramType(value)}\n+                          options={programTypeOptions}\n+                          placeholder=\"프로그램 종류를 선택하세요\"\n+                          error={!!errors.type}\n+                          disabled={saving}\n+                          required\n+                        />\n+                        {errors.type && <ErrorText>{errors.type}</ErrorText>}\n+                      </FieldColumn>\n+                    </div>\n+                    <div style={{ \n+                      display: 'flex', \n+                      gap: '8px', \n+                      justifyContent: 'flex-end',\n+                      marginTop: '4px'\n+                    }}>\n+                      <SaveButton \n+                        onClick={handleUpdateProgram} \n+                        disabled={saving}\n+                        style={{ \n+                          padding: '6px 16px', \n+                          fontSize: '13px',\n+                          minWidth: '60px'\n+                        }}\n+                      >\n+                        {saving ? '저장 중...' : '저장'}\n+                      </SaveButton>\n+                      <CancelButton \n+                        onClick={handleCancelEdit} \n+                        disabled={saving}\n+                        style={{ \n+                          padding: '6px 16px', \n+                          fontSize: '13px',\n+                          minWidth: '60px'\n+                        }}\n+                      >\n+                        취소\n+                      </CancelButton>\n+                    </div>\n+                  </div>\n+                ) : (\n+                  // 보기 모드\n+                  <>\n+                    <ProgramInfo>\n+                      <ProgramName>{program.name}</ProgramName>\n+                      <ProgramDetails>\n+                        <DetailItem>\n+                          <DetailLabel>종류:</DetailLabel>\n+                          <DetailValue>{program.type}</DetailValue>\n+                        </DetailItem>\n+                        <DetailItem>\n+                          <DetailLabel>사용중:</DetailLabel>\n+                          <DetailValue>\n+                            {programUsageCount[program.id] || 0}개 상품\n+                            {programUsageCount[program.id] > 0 && (\n+                              <span style={{ \n+                                color: AppColors.error, \n+                                marginLeft: '4px',\n+                                fontSize: '11px'\n+                              }}>\n+                                (삭제 불가)\n+                              </span>\n+                            )}\n+                          </DetailValue>\n+                        </DetailItem>\n+                      </ProgramDetails>\n+                    </ProgramInfo>\n+                    {hasPermission && (\n+                      <ActionButtons>\n+                        <EditButton \n+                          onClick={() => handleEditProgram(program)}\n+                          disabled={saving || editingId !== null}\n+                        >\n+                          수정\n+                        </EditButton>\n+                        <DeleteButton \n+                          onClick={() => handleDeleteProgram(program.id)}\n+                          disabled={saving || editingId !== null || (programUsageCount[program.id] || 0) > 0}\n+                          title={(programUsageCount[program.id] || 0) > 0 ? '상품에서 사용 중인 프로그램은 삭제할 수 없습니다.' : '삭제'}\n+                        >\n+                          삭제\n+                        </DeleteButton>\n+                      </ActionButtons>\n+                    )}\n+                  </>\n+                )}\n+              </TableRow>\n+            ))\n+          )}\n+        </Table>\n+      </Container>\n+    </CMSLayout>\n+  );\n+};\n+\n+export default ProgramManagement;\n"
                },
                {
                    "date": 1760162316292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState, useEffect } from 'react';\n+import React, { useState, useEffect, useCallback, useMemo } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, Program } from '../../../utils/indexedDB';\n@@ -330,15 +330,15 @@\n   const [hasPermission, setHasPermission] = useState(false);\n   const [programUsageCount, setProgramUsageCount] = useState<{ [key: string]: number }>({});\n \n   // 프로그램 종류 옵션\n-  const programTypeOptions = [\n+  const programTypeOptions = useMemo(() => [\n     { value: '횟수제', label: '횟수제' },\n     { value: '기간제', label: '기간제' }\n-  ];\n+  ], []);\n \n   // 컴포넌트 마운트 시 권한 체크 및 데이터 로드\n-  const checkPermissionAndLoadData = async () => {\n+  const checkPermissionAndLoadData = useCallback(async () => {\n     try {\n       const adminId = sessionStorage.getItem('adminId');\n       \n       if (adminId) {\n@@ -350,28 +350,63 @@\n         const isMaster = currentUser && currentUser.permission === 'MASTER';\n         const isSystemAdmin = adminId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n         \n         setHasPermission(isMaster || isSystemAdmin);\n-        \n-        // 모든 권한에서 프로그램 목록은 볼 수 있음\n-        loadPrograms();\n       } else {\n         setHasPermission(false);\n-        loadPrograms(); // 로그인하지 않아도 목록은 볼 수 있음\n       }\n+      \n+      // 프로그램 목록 로드\n+      try {\n+        setLoading(true);\n+        setError(null);\n+        const programData = await dbManager.getAllPrograms();\n+        // 오래된 등록 순서로 정렬 (createdAt 오름차순)\n+        const sortedPrograms = programData.sort((a, b) => \n+          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n+        );\n+        setPrograms(sortedPrograms);\n+        \n+        // 각 프로그램의 사용량 확인\n+        const usageCount: { [key: string]: number } = {};\n+        for (const program of sortedPrograms) {\n+          const relatedProducts = await dbManager.getProductsByProgram(program.id);\n+          usageCount[program.id] = relatedProducts.length;\n+        }\n+        setProgramUsageCount(usageCount);\n+      } catch (err) {\n+        console.error('프로그램 데이터 로드 실패:', err);\n+        setError('프로그램 데이터를 불러오는데 실패했습니다.');\n+      } finally {\n+        setLoading(false);\n+      }\n     } catch (error) {\n       console.error('권한 체크 실패:', error);\n       setHasPermission(false);\n-      loadPrograms(); // 에러가 있어도 목록은 표시\n+      setLoading(false);\n     }\n-  };\n+  }, []);\n \n   useEffect(() => {\n     checkPermissionAndLoadData();\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\n+  }, [checkPermissionAndLoadData]);\n+\n+  const loadProgramUsageCount = useCallback(async (programList: Program[]) => {\n+    try {\n+      const usageCount: { [key: string]: number } = {};\n+      \n+      for (const program of programList) {\n+        const relatedProducts = await dbManager.getProductsByProgram(program.id);\n+        usageCount[program.id] = relatedProducts.length;\n+      }\n+      \n+      setProgramUsageCount(usageCount);\n+    } catch (err) {\n+      console.error('프로그램 사용량 확인 실패:', err);\n+    }\n   }, []);\n \n-  const loadPrograms = async () => {\n+  const loadPrograms = useCallback(async () => {\n     try {\n       setLoading(true);\n       setError(null);\n       const programData = await dbManager.getAllPrograms();\n@@ -388,26 +423,11 @@\n       setError('프로그램 데이터를 불러오는데 실패했습니다.');\n     } finally {\n       setLoading(false);\n     }\n-  };\n+  }, [loadProgramUsageCount]);\n \n-  const loadProgramUsageCount = async (programList: Program[]) => {\n-    try {\n-      const usageCount: { [key: string]: number } = {};\n-      \n-      for (const program of programList) {\n-        const relatedProducts = await dbManager.getProductsByProgram(program.id);\n-        usageCount[program.id] = relatedProducts.length;\n-      }\n-      \n-      setProgramUsageCount(usageCount);\n-    } catch (err) {\n-      console.error('프로그램 사용량 확인 실패:', err);\n-    }\n-  };\n-\n-  const validateForm = (name: string, type: string): boolean => {\n+  const validateForm = useCallback((name: string, type: string): boolean => {\n     const newErrors: { [key: string]: string } = {};\n \n     if (!name.trim()) {\n       newErrors.name = '프로그램명을 입력해주세요.';\n@@ -418,11 +438,11 @@\n     }\n \n     setErrors(newErrors);\n     return Object.keys(newErrors).length === 0;\n-  };\n+  }, []);\n \n-  const handleAddProgram = async () => {\n+  const handleAddProgram = useCallback(async () => {\n     if (!validateForm(newProgramName, newProgramType)) {\n       return;\n     }\n \n@@ -463,9 +483,9 @@\n       setError('프로그램 추가에 실패했습니다.');\n     } finally {\n       setSaving(false);\n     }\n-  };\n+  }, [newProgramName, newProgramType, validateForm, loadProgramUsageCount]);\n \n   const handleDeleteProgram = async (id: string) => {\n     try {\n       setError(null);\n@@ -811,760 +831,4 @@\n   );\n };\n \n export default ProgramManagement;\n-import React, { useState, useEffect, useCallback } from 'react';\n-import styled from 'styled-components';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager, Program } from '../../../utils/indexedDB';\n-import CustomDropdown from '../../../components/CustomDropdown';\n-import CMSLayout, { refreshProgramsInNavigation } from '../../../components/CMSLayout';\n-import { SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n-\n-const Container = styled.div`\n-  width: 100%;\n-`;\n-\n-const LoadingState = styled.div`\n-  padding: 24px;\n-  text-align: center;\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-`;\n-\n-const ErrorState = styled.div`\n-  padding: 16px;\n-  margin-bottom: 16px;\n-  border: 1px solid ${AppColors.error};\n-  border-radius: 8px;\n-  background-color: ${AppColors.error}10;\n-  color: ${AppColors.error};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-`;\n-\n-const RefreshButton = styled.button`\n-  padding: 8px 16px;\n-  margin-left: 8px;\n-  border: 1px solid ${AppColors.primary};\n-  border-radius: 4px;\n-  background-color: transparent;\n-  color: ${AppColors.primary};\n-  font-size: ${AppTextStyles.label3.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.primary};\n-    color: white;\n-  }\n-`;\n-\n-const AddButton = styled.button`\n-  width: 100%;\n-  padding: 12px;\n-  margin-bottom: 16px;\n-  border: 2px dashed ${AppColors.borderLight};\n-  border-radius: 8px;\n-  background-color: transparent;\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    border-color: ${AppColors.primary};\n-    color: ${AppColors.primary};\n-    background-color: ${AppColors.primary}05;\n-  }\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-const Table = styled.div`\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  overflow: hidden;\n-`;\n-\n-const TableHeader = styled.div`\n-  background-color: ${AppColors.background};\n-  padding: 12px 16px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  font-weight: 600;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onSurface};\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-`;\n-\n-const TableStats = styled.span`\n-  font-size: ${AppTextStyles.label3.fontSize};\n-  color: ${AppColors.onSurface}80;\n-  font-weight: normal;\n-`;\n-\n-const TableRow = styled.div`\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  padding: 12px 16px;\n-  border-bottom: 1px solid ${AppColors.borderLight};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onSurface};\n-\n-  &:last-child {\n-    border-bottom: none;\n-  }\n-\n-  &:hover {\n-    background-color: ${AppColors.background};\n-  }\n-`;\n-\n-const ProgramInfo = styled.div`\n-  flex: 1;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 4px;\n-`;\n-\n-const ProgramName = styled.span`\n-  font-weight: 500;\n-`;\n-\n-const ProgramDetails = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  gap: 4px;\n-`;\n-\n-const DetailItem = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 6px;\n-  font-size: ${AppTextStyles.label3.fontSize};\n-  color: ${AppColors.onSurface}60;\n-`;\n-\n-const DetailLabel = styled.span`\n-  font-weight: 500;\n-  min-width: 40px;\n-  color: ${AppColors.onSurface}80;\n-`;\n-\n-const DetailValue = styled.span`\n-  color: ${AppColors.onSurface}60;\n-`;\n-\n-const ActionButtons = styled.div`\n-  display: flex;\n-  gap: 8px;\n-`;\n-\n-const EditButton = styled.button`\n-  padding: 4px 8px;\n-  border: 1px solid ${AppColors.primary};\n-  border-radius: 4px;\n-  background-color: transparent;\n-  color: ${AppColors.primary};\n-  font-size: ${AppTextStyles.label3.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.primary};\n-    color: white;\n-  }\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-const DeleteButton = styled.button`\n-  padding: 4px 8px;\n-  border: 1px solid ${AppColors.error};\n-  border-radius: 4px;\n-  background-color: transparent;\n-  color: ${AppColors.error};\n-  font-size: ${AppTextStyles.label3.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover {\n-    background-color: ${AppColors.error};\n-    color: white;\n-  }\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-const EmptyState = styled.div`\n-  padding: 24px;\n-  text-align: center;\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-`;\n-\n-const AddForm = styled.div`\n-  padding: 16px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 8px;\n-  margin-bottom: 16px;\n-  background-color: ${AppColors.background};\n-`;\n-\n-const FormRow = styled.div`\n-  display: flex;\n-  gap: 12px;\n-  margin-bottom: 12px;\n-`;\n-\n-const FieldColumn = styled.div`\n-  flex: 1;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 8px;\n-  min-width: 0;\n-  overflow: hidden;\n-`;\n-\n-const Label = styled.label<{ $required?: boolean }>`\n-  font-size: ${AppTextStyles.label1.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onSurface};\n-  \n-  ${({ $required }) => $required && `\n-    &::after {\n-      content: ' *';\n-      color: ${AppColors.error};\n-    }\n-  `}\n-`;\n-\n-const Input = styled.input<{ $error?: boolean }>`\n-  width: 100%;\n-  min-width: 0;\n-  padding: 12px;\n-  border: 1px solid ${({ $error }) => $error ? AppColors.error : AppColors.borderLight};\n-  border-radius: 8px;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  color: ${AppColors.onSurface};\n-  background-color: ${AppColors.input};\n-  box-sizing: border-box;\n-  \n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-  }\n-  \n-  &::placeholder {\n-    color: ${AppColors.onInput1};\n-  }\n-\n-  &:disabled {\n-    background-color: ${AppColors.background};\n-    opacity: 0.5;\n-  }\n-`;\n-\n-const FormButtons = styled.div`\n-  display: flex;\n-  gap: 8px;\n-`;\n-\n-const SaveButton = styled.button`\n-  flex: 1;\n-  padding: 8px 16px;\n-  border: none;\n-  border-radius: 4px;\n-  background-color: ${AppColors.primary};\n-  color: white;\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover:not(:disabled) {\n-    background-color: ${AppColors.secondary};\n-  }\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-const CancelButton = styled.button`\n-  flex: 1;\n-  padding: 8px 16px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 4px;\n-  background-color: transparent;\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  cursor: pointer;\n-  transition: all 0.2s ease;\n-\n-  &:hover:not(:disabled) {\n-    background-color: ${AppColors.background};\n-  }\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-const ErrorText = styled.div`\n-  color: ${AppColors.error};\n-  font-size: ${AppTextStyles.label3.fontSize};\n-  margin-top: 4px;\n-`;\n-\n-const ProgramManagement: React.FC = () => {\n-  const [programs, setPrograms] = useState<Program[]>([]);\n-  const [isAdding, setIsAdding] = useState(false);\n-  const [editingId, setEditingId] = useState<string | null>(null);\n-  const [newProgramName, setNewProgramName] = useState('');\n-  const [newProgramType, setNewProgramType] = useState('');\n-  const [editProgramName, setEditProgramName] = useState('');\n-  const [editProgramType, setEditProgramType] = useState('');\n-  const [loading, setLoading] = useState(true);\n-  const [saving, setSaving] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n-  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\n-  const [currentUserInfo, setCurrentUserInfo] = useState<any>(null);\n-  const [hasPermission, setHasPermission] = useState(false);\n-\n-  // 프로그램 종류 옵션\n-  const programTypeOptions = [\n-    { value: '횟수제', label: '횟수제' },\n-    { value: '기간제', label: '기간제' }\n-  ];\n-\n-  // 컴포넌트 마운트 시 권한 체크 및 데이터 로드\n-  const checkPermissionAndLoadData = useCallback(async () => {\n-    try {\n-      const adminId = sessionStorage.getItem('adminId');\n-      setCurrentUserId(adminId);\n-      \n-      if (adminId) {\n-        // 현재 로그인한 사용자 정보 가져오기\n-        const allStaff = await dbManager.getAllStaff();\n-        const currentUser = allStaff.find(staff => staff.loginId === adminId);\n-        setCurrentUserInfo(currentUser || null);\n-        \n-        // MASTER 권한 또는 시스템 관리자만 편집 가능\n-        const isMaster = currentUser && currentUser.permission === 'MASTER';\n-        const isSystemAdmin = adminId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n-        \n-        setHasPermission(isMaster || isSystemAdmin);\n-        \n-        // 모든 권한에서 프로그램 목록은 볼 수 있음\n-        loadPrograms();\n-      } else {\n-        setHasPermission(false);\n-        loadPrograms(); // 로그인하지 않아도 목록은 볼 수 있음\n-      }\n-    } catch (error) {\n-      console.error('권한 체크 실패:', error);\n-      setHasPermission(false);\n-      loadPrograms(); // 에러가 있어도 목록은 표시\n-    }\n-  }, []);\n-\n-  useEffect(() => {\n-    checkPermissionAndLoadData();\n-  }, [checkPermissionAndLoadData]);\n-\n-  const loadPrograms = async () => {\n-    try {\n-      setLoading(true);\n-      setError(null);\n-      const programData = await dbManager.getAllPrograms();\n-      // 오래된 등록 순서로 정렬 (createdAt 오름차순)\n-      const sortedPrograms = programData.sort((a, b) => \n-        new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n-      );\n-      setPrograms(sortedPrograms);\n-    } catch (err) {\n-      console.error('프로그램 데이터 로드 실패:', err);\n-      setError('프로그램 데이터를 불러오는데 실패했습니다.');\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n-\n-  const validateForm = (name: string, type: string): boolean => {\n-    const newErrors: { [key: string]: string } = {};\n-\n-    if (!name.trim()) {\n-      newErrors.name = '프로그램명을 입력해주세요.';\n-    }\n-\n-    if (!type) {\n-      newErrors.type = '프로그램 종류를 선택해주세요.';\n-    }\n-\n-    setErrors(newErrors);\n-    return Object.keys(newErrors).length === 0;\n-  };\n-\n-  const handleAddProgram = async () => {\n-    if (!validateForm(newProgramName, newProgramType)) {\n-      return;\n-    }\n-\n-    try {\n-      setSaving(true);\n-      setError(null);\n-      \n-      const newProgram = await dbManager.addProgram({\n-        name: newProgramName.trim(),\n-        type: newProgramType,\n-        isActive: true,\n-      });\n-      \n-      // 새로운 프로그램 추가 후 정렬 유지\n-      setPrograms(prev => {\n-        const updated = [...prev, newProgram];\n-        return updated.sort((a, b) => \n-          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n-        );\n-      });\n-      setNewProgramName('');\n-      setNewProgramType('');\n-      setIsAdding(false);\n-      setEditingId(null); // 수정 모드 해제\n-      setErrors({});\n-      \n-      // 네비게이션 메뉴 새로고침\n-      await refreshProgramsInNavigation();\n-      \n-      console.log('새 프로그램 추가됨:', newProgram);\n-    } catch (err) {\n-      console.error('프로그램 추가 실패:', err);\n-      setError('프로그램 추가에 실패했습니다.');\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-\n-  const handleDeleteProgram = async (id: string) => {\n-    if (!window.confirm('정말로 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.')) {\n-      return;\n-    }\n-\n-    try {\n-      setError(null);\n-      const success = await dbManager.deleteProgram(id);\n-      \n-      if (success) {\n-        setPrograms(prev => prev.filter(program => program.id !== id));\n-        \n-        // 네비게이션 메뉴 새로고침\n-        await refreshProgramsInNavigation();\n-        \n-        console.log('프로그램 삭제됨:', id);\n-      } else {\n-        throw new Error('삭제 실패');\n-      }\n-    } catch (err) {\n-      console.error('프로그램 삭제 실패:', err);\n-      setError('프로그램 삭제에 실패했습니다.');\n-    }\n-  };\n-\n-  const handleEditProgram = (program: Program) => {\n-    setEditingId(program.id);\n-    setEditProgramName(program.name);\n-    setEditProgramType(program.type);\n-    setIsAdding(false);\n-    setErrors({});\n-  };\n-\n-  const handleUpdateProgram = async () => {\n-    if (!validateForm(editProgramName, editProgramType)) {\n-      return;\n-    }\n-\n-    if (!editingId) return;\n-\n-    try {\n-      setSaving(true);\n-      setError(null);\n-      \n-      const updatedProgram = await dbManager.updateProgram(editingId, {\n-        name: editProgramName.trim(),\n-        type: editProgramType,\n-      });\n-      \n-      if (updatedProgram) {\n-        setPrograms(prev => prev.map(program => \n-          program.id === editingId ? updatedProgram : program\n-        ));\n-        \n-        // 네비게이션 메뉴 새로고침\n-        await refreshProgramsInNavigation();\n-        \n-        handleCancelEdit();\n-        console.log('프로그램 수정됨:', updatedProgram);\n-      } else {\n-        throw new Error('수정 실패');\n-      }\n-    } catch (err) {\n-      console.error('프로그램 수정 실패:', err);\n-      setError('프로그램 수정에 실패했습니다.');\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-\n-  const handleCancelEdit = () => {\n-    setEditingId(null);\n-    setEditProgramName('');\n-    setEditProgramType('');\n-    setError(null);\n-    setErrors({});\n-  };\n-\n-  const handleCancel = () => {\n-    setNewProgramName('');\n-    setNewProgramType('');\n-    setIsAdding(false);\n-    setEditingId(null);\n-    setEditProgramName('');\n-    setEditProgramType('');\n-    setError(null);\n-    setErrors({});\n-  };\n-\n-  const handleKeyPress = (e: React.KeyboardEvent) => {\n-    if (e.key === 'Enter' && !saving) {\n-      handleAddProgram();\n-    }\n-  };\n-\n-  const handleEditKeyPress = (e: React.KeyboardEvent) => {\n-    if (e.key === 'Enter' && !saving) {\n-      handleUpdateProgram();\n-    }\n-  };\n-\n-  if (loading) {\n-    return (\n-      <CMSLayout>\n-        <Container>\n-          <LoadingState>프로그램 데이터를 불러오는 중...</LoadingState>\n-        </Container>\n-      </CMSLayout>\n-    );\n-  }\n-\n-  return (\n-    <CMSLayout>\n-      <Container>\n-        {error && (\n-          <ErrorState>\n-            {error}\n-            <RefreshButton onClick={loadPrograms}>\n-              다시 시도\n-            </RefreshButton>\n-          </ErrorState>\n-        )}\n-\n-        {hasPermission && isAdding && (\n-          <AddForm>\n-            <FormRow>\n-              <FieldColumn>\n-                <Label $required>프로그램명</Label>\n-                <Input\n-                  type=\"text\"\n-                  placeholder=\"프로그램명을 입력하세요\"\n-                  value={newProgramName}\n-                  onChange={(e) => setNewProgramName(e.target.value)}\n-                  onKeyPress={handleKeyPress}\n-                  disabled={saving}\n-                  $error={!!errors.name}\n-                  autoFocus\n-                />\n-                {errors.name && <ErrorText>{errors.name}</ErrorText>}\n-              </FieldColumn>\n-              <FieldColumn>\n-                <Label $required>프로그램 종류</Label>\n-                <CustomDropdown\n-                  value={newProgramType}\n-                  onChange={(value: string) => setNewProgramType(value)}\n-                  options={programTypeOptions}\n-                  placeholder=\"프로그램 종류를 선택하세요\"\n-                  error={!!errors.type}\n-                  disabled={saving}\n-                  required\n-                />\n-                {errors.type && <ErrorText>{errors.type}</ErrorText>}\n-              </FieldColumn>\n-            </FormRow>\n-            <FormButtons>\n-              <SaveButton onClick={handleAddProgram} disabled={saving}>\n-                {saving ? '저장 중...' : '저장'}\n-              </SaveButton>\n-              <CancelButton onClick={handleCancel} disabled={saving}>\n-                취소\n-              </CancelButton>\n-            </FormButtons>\n-          </AddForm>\n-        )}\n-\n-        {hasPermission && !isAdding && (\n-          <AddButton onClick={() => {\n-            setIsAdding(true);\n-            setEditingId(null);\n-            setEditProgramName('');\n-            setEditProgramType('');\n-            setErrors({});\n-          }} disabled={loading || editingId !== null}>\n-            + 새 프로그램 추가\n-          </AddButton>\n-        )}\n-\n-        {!hasPermission && (\n-          <ErrorState style={{ marginBottom: '16px', backgroundColor: `${AppColors.primary}10`, borderColor: AppColors.primary, color: AppColors.primary }}>\n-            ℹ️ 프로그램 목록 조회만 가능합니다. 추가/수정/삭제는 MASTER 권한이 필요합니다.\n-          </ErrorState>\n-        )}\n-\n-        <Table>\n-          <TableHeader>\n-            프로그램 목록\n-            <TableStats>총 {programs.length}개 프로그램</TableStats>\n-          </TableHeader>\n-          {programs.length === 0 ? (\n-            <EmptyState>등록된 프로그램이 없습니다.</EmptyState>\n-          ) : (\n-            programs.map((program) => (\n-              <TableRow \n-                key={program.id}\n-                style={editingId === program.id ? {\n-                  flexDirection: 'column',\n-                  alignItems: 'stretch',\n-                  padding: '16px',\n-                  backgroundColor: `${AppColors.primary}05`\n-                } : {}}\n-              >\n-                {editingId === program.id ? (\n-                  // 수정 모드\n-                  <div style={{ \n-                    width: '100%', \n-                    display: 'flex', \n-                    flexDirection: 'column', \n-                    gap: '12px',\n-                    padding: '8px 0'\n-                  }}>\n-                    <div style={{ display: 'flex', gap: '12px' }}>\n-                      <FieldColumn>\n-                        <Label $required>프로그램명</Label>\n-                        <Input\n-                          type=\"text\"\n-                          value={editProgramName}\n-                          onChange={(e) => setEditProgramName(e.target.value)}\n-                          onKeyPress={handleEditKeyPress}\n-                          disabled={saving}\n-                          $error={!!errors.name}\n-                          placeholder=\"프로그램명을 입력하세요\"\n-                          autoFocus\n-                        />\n-                        {errors.name && <ErrorText>{errors.name}</ErrorText>}\n-                      </FieldColumn>\n-                      <FieldColumn>\n-                        <Label $required>프로그램 종류</Label>\n-                        <CustomDropdown\n-                          value={editProgramType}\n-                          onChange={(value: string) => setEditProgramType(value)}\n-                          options={programTypeOptions}\n-                          placeholder=\"프로그램 종류를 선택하세요\"\n-                          error={!!errors.type}\n-                          disabled={saving}\n-                          required\n-                        />\n-                        {errors.type && <ErrorText>{errors.type}</ErrorText>}\n-                      </FieldColumn>\n-                    </div>\n-                    <div style={{ \n-                      display: 'flex', \n-                      gap: '8px', \n-                      justifyContent: 'flex-end',\n-                      marginTop: '4px'\n-                    }}>\n-                      <SaveButton \n-                        onClick={handleUpdateProgram} \n-                        disabled={saving}\n-                        style={{ \n-                          padding: '6px 16px', \n-                          fontSize: '13px',\n-                          minWidth: '60px'\n-                        }}\n-                      >\n-                        {saving ? '저장 중...' : '저장'}\n-                      </SaveButton>\n-                      <CancelButton \n-                        onClick={handleCancelEdit} \n-                        disabled={saving}\n-                        style={{ \n-                          padding: '6px 16px', \n-                          fontSize: '13px',\n-                          minWidth: '60px'\n-                        }}\n-                      >\n-                        취소\n-                      </CancelButton>\n-                    </div>\n-                  </div>\n-                ) : (\n-                  // 보기 모드\n-                  <>\n-                    <ProgramInfo>\n-                      <ProgramName>{program.name}</ProgramName>\n-                      <ProgramDetails>\n-                        <DetailItem>\n-                          <DetailLabel>종류:</DetailLabel>\n-                          <DetailValue>{program.type}</DetailValue>\n-                        </DetailItem>\n-                      </ProgramDetails>\n-                    </ProgramInfo>\n-                    {hasPermission && (\n-                      <ActionButtons>\n-                        <EditButton \n-                          onClick={() => handleEditProgram(program)}\n-                          disabled={saving || editingId !== null}\n-                        >\n-                          수정\n-                        </EditButton>\n-                        <DeleteButton \n-                          onClick={() => handleDeleteProgram(program.id)}\n-                          disabled={saving || editingId !== null}\n-                        >\n-                          삭제\n-                        </DeleteButton>\n-                      </ActionButtons>\n-                    )}\n-                  </>\n-                )}\n-              </TableRow>\n-            ))\n-          )}\n-        </Table>\n-      </Container>\n-    </CMSLayout>\n-  );\n-};\n-\n-export default ProgramManagement;\n"
                },
                {
                    "date": 1760162638423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,830 @@\n+import React, { useState, useEffect, useCallback, useMemo } from 'react';\n+import styled from 'styled-components';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, Program } from '../../../utils/indexedDB';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import { refreshProgramsInNavigation } from '../../../components/CMSRootLayout';\n+import { SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n+\n+const Container = styled.div`\n+  width: 100%;\n+`;\n+\n+const LoadingState = styled.div`\n+  padding: 24px;\n+  text-align: center;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const ErrorState = styled.div`\n+  padding: 16px;\n+  margin-bottom: 16px;\n+  border: 1px solid ${AppColors.error};\n+  border-radius: 8px;\n+  background-color: ${AppColors.error}10;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const RefreshButton = styled.button`\n+  padding: 8px 16px;\n+  margin-left: 8px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.primary};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: white;\n+  }\n+`;\n+\n+const AddButton = styled.button`\n+  width: 100%;\n+  padding: 12px;\n+  margin-bottom: 16px;\n+  border: 2px dashed ${AppColors.borderLight};\n+  border-radius: 8px;\n+  background-color: transparent;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    border-color: ${AppColors.primary};\n+    color: ${AppColors.primary};\n+    background-color: ${AppColors.primary}05;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const Table = styled.div`\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  overflow: hidden;\n+`;\n+\n+const TableHeader = styled.div`\n+  background-color: ${AppColors.background};\n+  padding: 12px 16px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  font-weight: 600;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface};\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+`;\n+\n+const TableStats = styled.span`\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}80;\n+  font-weight: normal;\n+`;\n+\n+const TableRow = styled.div`\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 12px 16px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface};\n+\n+  &:last-child {\n+    border-bottom: none;\n+  }\n+\n+  &:hover {\n+    background-color: ${AppColors.background};\n+  }\n+`;\n+\n+const ProgramInfo = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 4px;\n+`;\n+\n+const ProgramName = styled.span`\n+  font-weight: 500;\n+`;\n+\n+const ProgramDetails = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 4px;\n+`;\n+\n+const DetailItem = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 6px;\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}60;\n+`;\n+\n+const DetailLabel = styled.span`\n+  font-weight: 500;\n+  min-width: 40px;\n+  color: ${AppColors.onSurface}80;\n+`;\n+\n+const DetailValue = styled.span`\n+  color: ${AppColors.onSurface}60;\n+`;\n+\n+const ActionButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const EditButton = styled.button`\n+  padding: 4px 8px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.primary};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: white;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const DeleteButton = styled.button`\n+  padding: 4px 8px;\n+  border: 1px solid ${AppColors.error};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.error};\n+    color: white;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const EmptyState = styled.div`\n+  padding: 24px;\n+  text-align: center;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const AddForm = styled.div`\n+  padding: 16px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  margin-bottom: 16px;\n+  background-color: ${AppColors.background};\n+`;\n+\n+const FormRow = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  margin-bottom: 12px;\n+`;\n+\n+const FieldColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 8px;\n+  min-width: 0;\n+  overflow: hidden;\n+`;\n+\n+const Label = styled.label<{ $required?: boolean }>`\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  \n+  ${({ $required }) => $required && `\n+    &::after {\n+      content: ' *';\n+      color: ${AppColors.error};\n+    }\n+  `}\n+`;\n+\n+const Input = styled.input<{ $error?: boolean }>`\n+  width: 100%;\n+  min-width: 0;\n+  padding: 12px;\n+  border: 1px solid ${({ $error }) => $error ? AppColors.error : AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n+  background-color: ${AppColors.input};\n+  box-sizing: border-box;\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &::placeholder {\n+    color: ${AppColors.onInput1};\n+  }\n+\n+  &:disabled {\n+    background-color: ${AppColors.background};\n+    opacity: 0.5;\n+  }\n+`;\n+\n+const FormButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const SaveButton = styled.button`\n+  flex: 1;\n+  padding: 8px 16px;\n+  border: none;\n+  border-radius: 4px;\n+  background-color: ${AppColors.primary};\n+  color: white;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover:not(:disabled) {\n+    background-color: ${AppColors.secondary};\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const CancelButton = styled.button`\n+  flex: 1;\n+  padding: 8px 16px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover:not(:disabled) {\n+    background-color: ${AppColors.background};\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const ErrorText = styled.div`\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  margin-top: 4px;\n+`;\n+\n+const ProgramManagement: React.FC = () => {\n+  const [programs, setPrograms] = useState<Program[]>([]);\n+  const [isAdding, setIsAdding] = useState(false);\n+  const [editingId, setEditingId] = useState<string | null>(null);\n+  const [newProgramName, setNewProgramName] = useState('');\n+  const [newProgramType, setNewProgramType] = useState('');\n+  const [editProgramName, setEditProgramName] = useState('');\n+  const [editProgramType, setEditProgramType] = useState('');\n+  const [loading, setLoading] = useState(true);\n+  const [saving, setSaving] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n+  const [hasPermission, setHasPermission] = useState(false);\n+  const [programUsageCount, setProgramUsageCount] = useState<{ [key: string]: number }>({});\n+\n+  // 프로그램 종류 옵션\n+  const programTypeOptions = useMemo(() => [\n+    { value: '횟수제', label: '횟수제' },\n+    { value: '기간제', label: '기간제' }\n+  ], []);\n+\n+  // 컴포넌트 마운트 시 권한 체크 및 데이터 로드\n+  const checkPermissionAndLoadData = useCallback(async () => {\n+    try {\n+      const adminId = sessionStorage.getItem('adminId');\n+      \n+      if (adminId) {\n+        // 현재 로그인한 사용자 정보 가져오기\n+        const allStaff = await dbManager.getAllStaff();\n+        const currentUser = allStaff.find(staff => staff.loginId === adminId);\n+        \n+        // MASTER 권한 또는 시스템 관리자만 편집 가능\n+        const isMaster = currentUser && currentUser.permission === 'MASTER';\n+        const isSystemAdmin = adminId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n+        \n+        setHasPermission(isMaster || isSystemAdmin);\n+      } else {\n+        setHasPermission(false);\n+      }\n+      \n+      // 프로그램 목록 로드\n+      try {\n+        setLoading(true);\n+        setError(null);\n+        const programData = await dbManager.getAllPrograms();\n+        // 오래된 등록 순서로 정렬 (createdAt 오름차순)\n+        const sortedPrograms = programData.sort((a, b) => \n+          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n+        );\n+        setPrograms(sortedPrograms);\n+        \n+        // 각 프로그램의 사용량 확인\n+        const usageCount: { [key: string]: number } = {};\n+        for (const program of sortedPrograms) {\n+          const relatedProducts = await dbManager.getProductsByProgram(program.id);\n+          usageCount[program.id] = relatedProducts.length;\n+        }\n+        setProgramUsageCount(usageCount);\n+      } catch (err) {\n+        console.error('프로그램 데이터 로드 실패:', err);\n+        setError('프로그램 데이터를 불러오는데 실패했습니다.');\n+      } finally {\n+        setLoading(false);\n+      }\n+    } catch (error) {\n+      console.error('권한 체크 실패:', error);\n+      setHasPermission(false);\n+      setLoading(false);\n+    }\n+  }, []);\n+\n+  useEffect(() => {\n+    checkPermissionAndLoadData();\n+  }, [checkPermissionAndLoadData]);\n+\n+  const loadProgramUsageCount = useCallback(async (programList: Program[]) => {\n+    try {\n+      const usageCount: { [key: string]: number } = {};\n+      \n+      for (const program of programList) {\n+        const relatedProducts = await dbManager.getProductsByProgram(program.id);\n+        usageCount[program.id] = relatedProducts.length;\n+      }\n+      \n+      setProgramUsageCount(usageCount);\n+    } catch (err) {\n+      console.error('프로그램 사용량 확인 실패:', err);\n+    }\n+  }, []);\n+\n+  const loadPrograms = useCallback(async () => {\n+    try {\n+      setLoading(true);\n+      setError(null);\n+      const programData = await dbManager.getAllPrograms();\n+      // 오래된 등록 순서로 정렬 (createdAt 오름차순)\n+      const sortedPrograms = programData.sort((a, b) => \n+        new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n+      );\n+      setPrograms(sortedPrograms);\n+      \n+      // 각 프로그램의 사용량 확인\n+      await loadProgramUsageCount(sortedPrograms);\n+    } catch (err) {\n+      console.error('프로그램 데이터 로드 실패:', err);\n+      setError('프로그램 데이터를 불러오는데 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  }, [loadProgramUsageCount]);\n+\n+  const validateForm = useCallback((name: string, type: string): boolean => {\n+    const newErrors: { [key: string]: string } = {};\n+\n+    if (!name.trim()) {\n+      newErrors.name = '프로그램명을 입력해주세요.';\n+    }\n+\n+    if (!type) {\n+      newErrors.type = '프로그램 종류를 선택해주세요.';\n+    }\n+\n+    setErrors(newErrors);\n+    return Object.keys(newErrors).length === 0;\n+  }, []);\n+\n+  const handleAddProgram = useCallback(async () => {\n+    if (!validateForm(newProgramName, newProgramType)) {\n+      return;\n+    }\n+\n+    try {\n+      setSaving(true);\n+      setError(null);\n+      \n+      const newProgram = await dbManager.addProgram({\n+        name: newProgramName.trim(),\n+        type: newProgramType,\n+        isActive: true,\n+      });\n+      \n+      // 새로운 프로그램 추가 후 정렬 유지\n+      setPrograms(prev => {\n+        const updated = [...prev, newProgram];\n+        const sorted = updated.sort((a, b) => \n+          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n+        );\n+        \n+        // 사용량 정보도 업데이트\n+        loadProgramUsageCount(sorted);\n+        \n+        return sorted;\n+      });\n+      setNewProgramName('');\n+      setNewProgramType('');\n+      setIsAdding(false);\n+      setEditingId(null); // 수정 모드 해제\n+      setErrors({});\n+      \n+      // 네비게이션 메뉴 새로고침\n+      await refreshProgramsInNavigation();\n+      \n+      console.log('새 프로그램 추가됨:', newProgram);\n+    } catch (err) {\n+      console.error('프로그램 추가 실패:', err);\n+      setError('프로그램 추가에 실패했습니다.');\n+    } finally {\n+      setSaving(false);\n+    }\n+  }, [newProgramName, newProgramType, validateForm, loadProgramUsageCount]);\n+\n+  const handleDeleteProgram = async (id: string) => {\n+    try {\n+      setError(null);\n+      \n+      // 먼저 해당 프로그램이 상품에서 사용되고 있는지 확인\n+      const relatedProducts = await dbManager.getProductsByProgram(id);\n+      \n+      if (relatedProducts.length > 0) {\n+        const programName = programs.find(p => p.id === id)?.name || '해당 프로그램';\n+        setError(`${programName}은(는) 현재 ${relatedProducts.length}개의 상품에서 사용 중이므로 삭제할 수 없습니다.\\n먼저 관련 상품들을 삭제하거나 다른 프로그램으로 변경해주세요.`);\n+        return;\n+      }\n+      \n+      if (!window.confirm('정말로 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.')) {\n+        return;\n+      }\n+\n+      const success = await dbManager.deleteProgram(id);\n+      \n+      if (success) {\n+        setPrograms(prev => prev.filter(program => program.id !== id));\n+        \n+        // 네비게이션 메뉴 새로고침\n+        await refreshProgramsInNavigation();\n+        \n+        // 프로그램 사용량 다시 로드\n+        const updatedPrograms = programs.filter(program => program.id !== id);\n+        await loadProgramUsageCount(updatedPrograms);\n+        \n+        console.log('프로그램 삭제됨:', id);\n+      } else {\n+        throw new Error('삭제 실패');\n+      }\n+    } catch (err) {\n+      console.error('프로그램 삭제 실패:', err);\n+      setError('프로그램 삭제에 실패했습니다.');\n+    }\n+  };\n+\n+  const handleEditProgram = (program: Program) => {\n+    setEditingId(program.id);\n+    setEditProgramName(program.name);\n+    setEditProgramType(program.type);\n+    setIsAdding(false);\n+    setErrors({});\n+  };\n+\n+  const handleUpdateProgram = async () => {\n+    if (!validateForm(editProgramName, editProgramType)) {\n+      return;\n+    }\n+\n+    if (!editingId) return;\n+\n+    try {\n+      setSaving(true);\n+      setError(null);\n+      \n+      const updatedProgram = await dbManager.updateProgram(editingId, {\n+        name: editProgramName.trim(),\n+        type: editProgramType,\n+      });\n+      \n+      if (updatedProgram) {\n+        setPrograms(prev => {\n+          const updated = prev.map(program => \n+            program.id === editingId ? updatedProgram : program\n+          );\n+          \n+          // 사용량 정보도 업데이트\n+          loadProgramUsageCount(updated);\n+          \n+          return updated;\n+        });\n+        \n+        // 네비게이션 메뉴 새로고침\n+        await refreshProgramsInNavigation();\n+        \n+        handleCancelEdit();\n+        console.log('프로그램 수정됨:', updatedProgram);\n+      } else {\n+        throw new Error('수정 실패');\n+      }\n+    } catch (err) {\n+      console.error('프로그램 수정 실패:', err);\n+      setError('프로그램 수정에 실패했습니다.');\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleCancelEdit = () => {\n+    setEditingId(null);\n+    setEditProgramName('');\n+    setEditProgramType('');\n+    setError(null);\n+    setErrors({});\n+  };\n+\n+  const handleCancel = () => {\n+    setNewProgramName('');\n+    setNewProgramType('');\n+    setIsAdding(false);\n+    setEditingId(null);\n+    setEditProgramName('');\n+    setEditProgramType('');\n+    setError(null);\n+    setErrors({});\n+  };\n+\n+  const handleKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter' && !saving) {\n+      handleAddProgram();\n+    }\n+  };\n+\n+  const handleEditKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter' && !saving) {\n+      handleUpdateProgram();\n+    }\n+  };\n+\n+  if (loading) {\n+    return (\n+      <Container>\n+        <LoadingState>프로그램 데이터를 불러오는 중...</LoadingState>\n+      </Container>\n+    );\n+  }\n+\n+  return (\n+    <Container>\n+      {error && (\n+        <ErrorState>\n+          {error}\n+          <RefreshButton onClick={loadPrograms}>\n+            다시 시도\n+          </RefreshButton>\n+        </ErrorState>\n+      )}\n+\n+        {hasPermission && isAdding && (\n+          <AddForm>\n+            <FormRow>\n+              <FieldColumn>\n+                <Label $required>프로그램명</Label>\n+                <Input\n+                  type=\"text\"\n+                  placeholder=\"프로그램명을 입력하세요\"\n+                  value={newProgramName}\n+                  onChange={(e) => setNewProgramName(e.target.value)}\n+                  onKeyPress={handleKeyPress}\n+                  disabled={saving}\n+                  $error={!!errors.name}\n+                  autoFocus\n+                />\n+                {errors.name && <ErrorText>{errors.name}</ErrorText>}\n+              </FieldColumn>\n+              <FieldColumn>\n+                <Label $required>프로그램 종류</Label>\n+                <CustomDropdown\n+                  value={newProgramType}\n+                  onChange={(value: string) => setNewProgramType(value)}\n+                  options={programTypeOptions}\n+                  placeholder=\"프로그램 종류를 선택하세요\"\n+                  error={!!errors.type}\n+                  disabled={saving}\n+                  required\n+                />\n+                {errors.type && <ErrorText>{errors.type}</ErrorText>}\n+              </FieldColumn>\n+            </FormRow>\n+            <FormButtons>\n+              <SaveButton onClick={handleAddProgram} disabled={saving}>\n+                {saving ? '저장 중...' : '저장'}\n+              </SaveButton>\n+              <CancelButton onClick={handleCancel} disabled={saving}>\n+                취소\n+              </CancelButton>\n+            </FormButtons>\n+          </AddForm>\n+        )}\n+\n+        {hasPermission && !isAdding && (\n+          <AddButton onClick={() => {\n+            setIsAdding(true);\n+            setEditingId(null);\n+            setEditProgramName('');\n+            setEditProgramType('');\n+            setErrors({});\n+          }} disabled={loading || editingId !== null}>\n+            + 새 프로그램 추가\n+          </AddButton>\n+        )}\n+\n+        {!hasPermission && (\n+          <ErrorState style={{ marginBottom: '16px', backgroundColor: `${AppColors.primary}10`, borderColor: AppColors.primary, color: AppColors.primary }}>\n+            ℹ️ 프로그램 목록 조회만 가능합니다. 추가/수정/삭제는 MASTER 권한이 필요합니다.\n+          </ErrorState>\n+        )}\n+\n+        <Table>\n+          <TableHeader>\n+            프로그램 목록\n+            <TableStats>총 {programs.length}개 프로그램</TableStats>\n+          </TableHeader>\n+          {programs.length === 0 ? (\n+            <EmptyState>등록된 프로그램이 없습니다.</EmptyState>\n+          ) : (\n+            programs.map((program) => (\n+              <TableRow \n+                key={program.id}\n+                style={editingId === program.id ? {\n+                  flexDirection: 'column',\n+                  alignItems: 'stretch',\n+                  padding: '16px',\n+                  backgroundColor: `${AppColors.primary}05`\n+                } : {}}\n+              >\n+                {editingId === program.id ? (\n+                  // 수정 모드\n+                  <div style={{ \n+                    width: '100%', \n+                    display: 'flex', \n+                    flexDirection: 'column', \n+                    gap: '12px',\n+                    padding: '8px 0'\n+                  }}>\n+                    <div style={{ display: 'flex', gap: '12px' }}>\n+                      <FieldColumn>\n+                        <Label $required>프로그램명</Label>\n+                        <Input\n+                          type=\"text\"\n+                          value={editProgramName}\n+                          onChange={(e) => setEditProgramName(e.target.value)}\n+                          onKeyPress={handleEditKeyPress}\n+                          disabled={saving}\n+                          $error={!!errors.name}\n+                          placeholder=\"프로그램명을 입력하세요\"\n+                          autoFocus\n+                        />\n+                        {errors.name && <ErrorText>{errors.name}</ErrorText>}\n+                      </FieldColumn>\n+                      <FieldColumn>\n+                        <Label $required>프로그램 종류</Label>\n+                        <CustomDropdown\n+                          value={editProgramType}\n+                          onChange={(value: string) => setEditProgramType(value)}\n+                          options={programTypeOptions}\n+                          placeholder=\"프로그램 종류를 선택하세요\"\n+                          error={!!errors.type}\n+                          disabled={saving}\n+                          required\n+                        />\n+                        {errors.type && <ErrorText>{errors.type}</ErrorText>}\n+                      </FieldColumn>\n+                    </div>\n+                    <div style={{ \n+                      display: 'flex', \n+                      gap: '8px', \n+                      justifyContent: 'flex-end',\n+                      marginTop: '4px'\n+                    }}>\n+                      <SaveButton \n+                        onClick={handleUpdateProgram} \n+                        disabled={saving}\n+                        style={{ \n+                          padding: '6px 16px', \n+                          fontSize: '13px',\n+                          minWidth: '60px'\n+                        }}\n+                      >\n+                        {saving ? '저장 중...' : '저장'}\n+                      </SaveButton>\n+                      <CancelButton \n+                        onClick={handleCancelEdit} \n+                        disabled={saving}\n+                        style={{ \n+                          padding: '6px 16px', \n+                          fontSize: '13px',\n+                          minWidth: '60px'\n+                        }}\n+                      >\n+                        취소\n+                      </CancelButton>\n+                    </div>\n+                  </div>\n+                ) : (\n+                  // 보기 모드\n+                  <>\n+                    <ProgramInfo>\n+                      <ProgramName>{program.name}</ProgramName>\n+                      <ProgramDetails>\n+                        <DetailItem>\n+                          <DetailLabel>종류:</DetailLabel>\n+                          <DetailValue>{program.type}</DetailValue>\n+                        </DetailItem>\n+                        <DetailItem>\n+                          <DetailLabel>사용중:</DetailLabel>\n+                          <DetailValue>\n+                            {programUsageCount[program.id] || 0}개 상품\n+                            {programUsageCount[program.id] > 0 && (\n+                              <span style={{ \n+                                color: AppColors.error, \n+                                marginLeft: '4px',\n+                                fontSize: '11px'\n+                              }}>\n+                                (삭제 불가)\n+                              </span>\n+                            )}\n+                          </DetailValue>\n+                        </DetailItem>\n+                      </ProgramDetails>\n+                    </ProgramInfo>\n+                    {hasPermission && (\n+                      <ActionButtons>\n+                        <EditButton \n+                          onClick={() => handleEditProgram(program)}\n+                          disabled={saving || editingId !== null}\n+                        >\n+                          수정\n+                        </EditButton>\n+                        <DeleteButton \n+                          onClick={() => handleDeleteProgram(program.id)}\n+                          disabled={saving || editingId !== null || (programUsageCount[program.id] || 0) > 0}\n+                          title={(programUsageCount[program.id] || 0) > 0 ? '상품에서 사용 중인 프로그램은 삭제할 수 없습니다.' : '삭제'}\n+                        >\n+                          삭제\n+                        </DeleteButton>\n+                      </ActionButtons>\n+                    )}\n+                  </>\n+                )}\n+              </TableRow>\n+            ))\n+          )}\n+        </Table>\n+      </Container>\n+    );\n+  };\n+\n+export default ProgramManagement;\n"
                }
            ],
            "date": 1760076906208,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\n\nconst Container = styled.div`\n  padding: 24px;\n  background-color: ${AppColors.surface};\n  min-height: 100vh;\n`;\n\nconst Header = styled.div`\n  margin-bottom: 32px;\n`;\n\nconst Title = styled.h1`\n  ${AppTextStyles.headline1}\n  color: ${AppColors.onSurface};\n  margin-bottom: 8px;\n`;\n\nconst Description = styled.p`\n  ${AppTextStyles.body1}\n  color: ${AppColors.onSurface};\n`;\n\nconst Content = styled.div`\n  background-color: ${AppColors.background};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 12px;\n  padding: 24px;\n`;\n\nconst ProgramManagement: React.FC = () => {\n  return (\n    <Container>\n      <Header>\n        <Title>프로그램 관리</Title>\n        <Description>운동 프로그램을 관리하고 설정할 수 있습니다.</Description>\n      </Header>\n      \n      <Content>\n        <p>프로그램 관리 기능이 구현될 예정입니다.</p>\n      </Content>\n    </Container>\n  );\n};\n\nexport default ProgramManagement;\n"
        }
    ]
}