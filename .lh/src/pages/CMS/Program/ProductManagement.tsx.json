{
    "sourceFile": "src/pages/CMS/Program/ProductManagement.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1760076906195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760076990293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n import React from 'react';\n import styled from 'styled-components';\n+import CMSLayout from '../../../components/CMSLayout';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n \n-const Container = styled.div`\n-  padding: 24px;\n-  background-color: ${AppColors.surface};\n-  min-height: 100vh;\n+const PageContainer = styled.div`\n+  width: 100%;\n `;\n \n const Header = styled.div`\n   margin-bottom: 32px;\n@@ -32,18 +31,20 @@\n `;\n \n const ProductManagement: React.FC = () => {\n   return (\n-    <Container>\n-      <Header>\n-        <Title>상품 관리</Title>\n-        <Description>상품을 관리하고 설정할 수 있습니다.</Description>\n-      </Header>\n-      \n-      <Content>\n-        <p>상품 관리 기능이 구현될 예정입니다.</p>\n-      </Content>\n-    </Container>\n+    <CMSLayout currentPath=\"/cms/program/product\">\n+      <PageContainer>\n+        <Header>\n+          <Title>상품 관리</Title>\n+          <Description>상품을 관리하고 설정할 수 있습니다.</Description>\n+        </Header>\n+        \n+        <Content>\n+          <p>상품 관리 기능이 구현될 예정입니다.</p>\n+        </Content>\n+      </PageContainer>\n+    </CMSLayout>\n   );\n };\n \n export default ProductManagement;\n"
                },
                {
                    "date": 1760079938600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,49 +1,961 @@\n-import React from 'react';\n+import React, { useState, useEffect, useCallback } from 'react';\n import styled from 'styled-components';\n-import CMSLayout from '../../../components/CMSLayout';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, Product, Branch, Program } from '../../../utils/indexedDB';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import CMSLayout from '../../../components/CMSLayout';\n+import { SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n \n-const PageContainer = styled.div`\n+const Container = styled.div`\n   width: 100%;\n `;\n \n-const Header = styled.div`\n-  margin-bottom: 32px;\n+const LoadingState = styled.div`\n+  padding: 24px;\n+  text-align: center;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n `;\n \n-const Title = styled.h1`\n-  ${AppTextStyles.headline1}\n+const ErrorState = styled.div`\n+  padding: 16px;\n+  margin-bottom: 16px;\n+  border: 1px solid ${AppColors.error};\n+  border-radius: 8px;\n+  background-color: ${AppColors.error}10;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const RefreshButton = styled.button`\n+  padding: 8px 16px;\n+  margin-left: 8px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.primary};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: white;\n+  }\n+`;\n+\n+const AddButton = styled.button`\n+  width: 100%;\n+  padding: 12px;\n+  margin-bottom: 16px;\n+  border: 2px dashed ${AppColors.borderLight};\n+  border-radius: 8px;\n+  background-color: transparent;\n   color: ${AppColors.onSurface};\n-  margin-bottom: 8px;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    border-color: ${AppColors.primary};\n+    color: ${AppColors.primary};\n+    background-color: ${AppColors.primary}05;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n `;\n \n-const Description = styled.p`\n-  ${AppTextStyles.body1}\n+const Table = styled.div`\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  overflow: hidden;\n+`;\n+\n+const TableHeader = styled.div`\n+  background-color: ${AppColors.background};\n+  padding: 12px 16px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  font-weight: 600;\n+  font-size: ${AppTextStyles.body2.fontSize};\n   color: ${AppColors.onSurface};\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n `;\n \n-const Content = styled.div`\n+const TableStats = styled.span`\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}80;\n+  font-weight: normal;\n+`;\n+\n+const TableRow = styled.div`\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 12px 16px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface};\n+\n+  &:last-child {\n+    border-bottom: none;\n+  }\n+\n+  &:hover {\n+    background-color: ${AppColors.background};\n+  }\n+`;\n+\n+const ProductInfo = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 4px;\n+`;\n+\n+const ProductName = styled.span`\n+  font-weight: 500;\n+`;\n+\n+const ProductDetails = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 4px;\n+`;\n+\n+const DetailItem = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 6px;\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  color: ${AppColors.onSurface}60;\n+`;\n+\n+const DetailLabel = styled.span`\n+  font-weight: 500;\n+  min-width: 60px;\n+  color: ${AppColors.onSurface}80;\n+`;\n+\n+const DetailValue = styled.span`\n+  color: ${AppColors.onSurface}60;\n+`;\n+\n+const ActionButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const EditButton = styled.button`\n+  padding: 4px 8px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.primary};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.primary};\n+    color: white;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const DeleteButton = styled.button`\n+  padding: 4px 8px;\n+  border: 1px solid ${AppColors.error};\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.error};\n+    color: white;\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const EmptyState = styled.div`\n+  padding: 24px;\n+  text-align: center;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+`;\n+\n+const AddForm = styled.div`\n+  padding: 16px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  margin-bottom: 16px;\n   background-color: ${AppColors.background};\n+`;\n+\n+const FormRow = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  margin-bottom: 12px;\n+`;\n+\n+const FieldColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 8px;\n+  min-width: 0;\n+  overflow: hidden;\n+`;\n+\n+const Label = styled.label<{ $required?: boolean }>`\n+  font-size: ${AppTextStyles.label1.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  \n+  ${({ $required }) => $required && `\n+    &::after {\n+      content: ' *';\n+      color: ${AppColors.error};\n+    }\n+  `}\n+`;\n+\n+const Input = styled.input<{ error?: boolean }>`\n+  width: 100%;\n+  min-width: 0;\n+  padding: 12px;\n+  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n+  background-color: ${AppColors.input};\n+  box-sizing: border-box;\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &::placeholder {\n+    color: ${AppColors.onInput1};\n+  }\n+\n+  &:disabled {\n+    background-color: ${AppColors.background};\n+    opacity: 0.5;\n+  }\n+`;\n+\n+const FormButtons = styled.div`\n+  display: flex;\n+  gap: 8px;\n+`;\n+\n+const SaveButton = styled.button`\n+  flex: 1;\n+  padding: 8px 16px;\n+  border: none;\n+  border-radius: 4px;\n+  background-color: ${AppColors.primary};\n+  color: white;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover:not(:disabled) {\n+    background-color: ${AppColors.secondary};\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const CancelButton = styled.button`\n+  flex: 1;\n+  padding: 8px 16px;\n   border: 1px solid ${AppColors.borderLight};\n-  border-radius: 12px;\n-  padding: 24px;\n+  border-radius: 4px;\n+  background-color: transparent;\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover:not(:disabled) {\n+    background-color: ${AppColors.background};\n+  }\n+\n+  &:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+  }\n `;\n \n+const ErrorText = styled.div`\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.label3.fontSize};\n+  margin-top: 4px;\n+`;\n+\n const ProductManagement: React.FC = () => {\n+  const [products, setProducts] = useState<Product[]>([]);\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [programs, setPrograms] = useState<Program[]>([]);\n+  const [isAdding, setIsAdding] = useState(false);\n+  const [editingId, setEditingId] = useState<string | null>(null);\n+  \n+  // 새 상품 추가 폼 상태\n+  const [newProductName, setNewProductName] = useState('');\n+  const [newBranchId, setNewBranchId] = useState('');\n+  const [newProgramId, setNewProgramId] = useState('');\n+  const [newSessions, setNewSessions] = useState<number | ''>('');\n+  \n+  // 수정 폼 상태\n+  const [editProductName, setEditProductName] = useState('');\n+  const [editBranchId, setEditBranchId] = useState('');\n+  const [editProgramId, setEditProgramId] = useState('');\n+  const [editSessions, setEditSessions] = useState<number | ''>('');\n+  \n+  const [loading, setLoading] = useState(true);\n+  const [saving, setSaving] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n+  const [hasPermission, setHasPermission] = useState(false);\n+\n+  // 선택된 프로그램 정보\n+  const selectedProgram = programs.find(p => p.id === newProgramId);\n+  const editSelectedProgram = programs.find(p => p.id === editProgramId);\n+\n+  // 드롭다운 옵션 생성\n+  const branchOptions = branches.map(branch => ({\n+    value: branch.id,\n+    label: branch.name\n+  }));\n+\n+  const programOptions = programs.map(program => ({\n+    value: program.id,\n+    label: `${program.name} (${program.type})`\n+  }));\n+\n+  // 상품명 자동 생성 함수\n+  const generateProductName = useCallback((programName: string, sessions?: number | '') => {\n+    if (!programName) return '';\n+    \n+    if (sessions && typeof sessions === 'number') {\n+      return `${programName} ${sessions}회`;\n+    }\n+    \n+    return programName;\n+  }, []);\n+\n+  // 프로그램 선택 시 상품명 자동 업데이트\n+  useEffect(() => {\n+    if (selectedProgram) {\n+      const autoName = generateProductName(selectedProgram.name, selectedProgram.type === '횟수제' ? newSessions : undefined);\n+      setNewProductName(autoName);\n+    }\n+  }, [selectedProgram, newSessions, generateProductName]);\n+\n+  useEffect(() => {\n+    if (editSelectedProgram) {\n+      const autoName = generateProductName(editSelectedProgram.name, editSelectedProgram.type === '횟수제' ? editSessions : undefined);\n+      setEditProductName(autoName);\n+    }\n+  }, [editSelectedProgram, editSessions, generateProductName]);\n+\n+  // 컴포넌트 마운트 시 권한 체크 및 데이터 로드\n+  const checkPermissionAndLoadData = useCallback(async () => {\n+    try {\n+      const adminId = sessionStorage.getItem('adminId');\n+      \n+      if (adminId) {\n+        // 현재 로그인한 사용자 정보 가져오기\n+        const allStaff = await dbManager.getAllStaff();\n+        const currentUser = allStaff.find(staff => staff.loginId === adminId);\n+        \n+        // MASTER 권한 또는 시스템 관리자만 편집 가능\n+        const isMaster = currentUser && currentUser.permission === 'MASTER';\n+        const isSystemAdmin = adminId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n+        \n+        setHasPermission(isMaster || isSystemAdmin);\n+        \n+        // 모든 권한에서 상품 목록은 볼 수 있음\n+        loadData();\n+      } else {\n+        setHasPermission(false);\n+        loadData(); // 로그인하지 않아도 목록은 볼 수 있음\n+      }\n+    } catch (error) {\n+      console.error('권한 체크 실패:', error);\n+      setHasPermission(false);\n+      loadData(); // 에러가 있어도 목록은 표시\n+    }\n+  }, []);\n+\n+  useEffect(() => {\n+    checkPermissionAndLoadData();\n+  }, [checkPermissionAndLoadData]);\n+\n+  const loadData = async () => {\n+    try {\n+      setLoading(true);\n+      setError(null);\n+      \n+      // 병렬로 데이터 로드\n+      const [productData, branchData, programData] = await Promise.all([\n+        dbManager.getAllProducts(),\n+        dbManager.getAllBranches(),\n+        dbManager.getAllPrograms()\n+      ]);\n+      \n+      // 최신 등록 순서로 정렬 (createdAt 내림차순)\n+      const sortedProducts = productData.sort((a, b) => \n+        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n+      );\n+      \n+      setProducts(sortedProducts);\n+      setBranches(branchData.filter(branch => branch.isActive));\n+      setPrograms(programData.filter(program => program.isActive));\n+    } catch (err) {\n+      console.error('데이터 로드 실패:', err);\n+      setError('데이터를 불러오는데 실패했습니다.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  const validateForm = (name: string, branchId: string, programId: string, sessions?: number | ''): boolean => {\n+    const newErrors: { [key: string]: string } = {};\n+\n+    if (!name.trim()) {\n+      newErrors.name = '상품명을 입력해주세요.';\n+    }\n+\n+    if (!branchId) {\n+      newErrors.branchId = '지점을 선택해주세요.';\n+    }\n+\n+    if (!programId) {\n+      newErrors.programId = '프로그램을 선택해주세요.';\n+    }\n+\n+    // 횟수제인 경우 횟수 검증\n+    const program = programs.find(p => p.id === programId);\n+    if (program && program.type === '횟수제') {\n+      if (!sessions || sessions <= 0) {\n+        newErrors.sessions = '횟수를 입력해주세요.';\n+      }\n+    }\n+\n+    setErrors(newErrors);\n+    return Object.keys(newErrors).length === 0;\n+  };\n+\n+  const handleAddProduct = async () => {\n+    if (!validateForm(newProductName, newBranchId, newProgramId, newSessions)) {\n+      return;\n+    }\n+\n+    try {\n+      setSaving(true);\n+      setError(null);\n+      \n+      const selectedBranch = branches.find(b => b.id === newBranchId);\n+      const selectedProgram = programs.find(p => p.id === newProgramId);\n+      \n+      if (!selectedBranch || !selectedProgram) {\n+        throw new Error('선택된 지점 또는 프로그램 정보를 찾을 수 없습니다.');\n+      }\n+\n+      const newProduct = await dbManager.addProduct({\n+        name: newProductName.trim(),\n+        branchId: newBranchId,\n+        programId: newProgramId,\n+        programName: selectedProgram.name,\n+        programType: selectedProgram.type,\n+        sessions: selectedProgram.type === '횟수제' ? Number(newSessions) : undefined,\n+        isActive: true,\n+      });\n+      \n+      // 새로운 상품 추가 후 정렬 유지\n+      setProducts(prev => {\n+        const updated = [newProduct, ...prev];\n+        return updated.sort((a, b) => \n+          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n+        );\n+      });\n+      \n+      // 폼 초기화\n+      setNewProductName('');\n+      setNewBranchId('');\n+      setNewProgramId('');\n+      setNewSessions('');\n+      setIsAdding(false);\n+      setEditingId(null);\n+      setErrors({});\n+      \n+      console.log('새 상품 추가됨:', newProduct);\n+    } catch (err) {\n+      console.error('상품 추가 실패:', err);\n+      setError('상품 추가에 실패했습니다.');\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleDeleteProduct = async (id: string) => {\n+    if (!window.confirm('정말로 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.')) {\n+      return;\n+    }\n+\n+    try {\n+      setError(null);\n+      const success = await dbManager.deleteProduct(id);\n+      \n+      if (success) {\n+        setProducts(prev => prev.filter(product => product.id !== id));\n+        console.log('상품 삭제됨:', id);\n+      } else {\n+        throw new Error('삭제 실패');\n+      }\n+    } catch (err) {\n+      console.error('상품 삭제 실패:', err);\n+      setError('상품 삭제에 실패했습니다.');\n+    }\n+  };\n+\n+  const handleEditProduct = (product: Product) => {\n+    setEditingId(product.id);\n+    setEditProductName(product.name);\n+    setEditBranchId(product.branchId);\n+    setEditProgramId(product.programId);\n+    setEditSessions(product.sessions || '');\n+    setIsAdding(false);\n+    setErrors({});\n+  };\n+\n+  const handleUpdateProduct = async () => {\n+    if (!validateForm(editProductName, editBranchId, editProgramId, editSessions)) {\n+      return;\n+    }\n+\n+    if (!editingId) return;\n+\n+    try {\n+      setSaving(true);\n+      setError(null);\n+      \n+      const selectedBranch = branches.find(b => b.id === editBranchId);\n+      const selectedProgram = programs.find(p => p.id === editProgramId);\n+      \n+      if (!selectedBranch || !selectedProgram) {\n+        throw new Error('선택된 지점 또는 프로그램 정보를 찾을 수 없습니다.');\n+      }\n+\n+      const updatedProduct = await dbManager.updateProduct(editingId, {\n+        name: editProductName.trim(),\n+        branchId: editBranchId,\n+        programId: editProgramId,\n+        programName: selectedProgram.name,\n+        programType: selectedProgram.type,\n+        sessions: selectedProgram.type === '횟수제' ? Number(editSessions) : undefined,\n+      });\n+      \n+      if (updatedProduct) {\n+        setProducts(prev => prev.map(product => \n+          product.id === editingId ? updatedProduct : product\n+        ));\n+        \n+        handleCancelEdit();\n+        console.log('상품 수정됨:', updatedProduct);\n+      } else {\n+        throw new Error('수정 실패');\n+      }\n+    } catch (err) {\n+      console.error('상품 수정 실패:', err);\n+      setError('상품 수정에 실패했습니다.');\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleCancelEdit = () => {\n+    setEditingId(null);\n+    setEditProductName('');\n+    setEditBranchId('');\n+    setEditProgramId('');\n+    setEditSessions('');\n+    setError(null);\n+    setErrors({});\n+  };\n+\n+  const handleCancel = () => {\n+    setNewProductName('');\n+    setNewBranchId('');\n+    setNewProgramId('');\n+    setNewSessions('');\n+    setIsAdding(false);\n+    setEditingId(null);\n+    setEditProductName('');\n+    setEditBranchId('');\n+    setEditProgramId('');\n+    setEditSessions('');\n+    setError(null);\n+    setErrors({});\n+  };\n+\n+  const handleKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter' && !saving) {\n+      handleAddProduct();\n+    }\n+  };\n+\n+  const handleEditKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter' && !saving) {\n+      handleUpdateProduct();\n+    }\n+  };\n+\n+  // 지점명과 프로그램명 가져오는 헬퍼 함수\n+  const getBranchName = (branchId: string) => {\n+    const branch = branches.find(b => b.id === branchId);\n+    return branch ? branch.name : '알 수 없는 지점';\n+  };\n+\n+  if (loading) {\n+    return (\n+      <CMSLayout>\n+        <Container>\n+          <LoadingState>상품 데이터를 불러오는 중...</LoadingState>\n+        </Container>\n+      </CMSLayout>\n+    );\n+  }\n+\n   return (\n-    <CMSLayout currentPath=\"/cms/program/product\">\n-      <PageContainer>\n-        <Header>\n-          <Title>상품 관리</Title>\n-          <Description>상품을 관리하고 설정할 수 있습니다.</Description>\n-        </Header>\n-        \n-        <Content>\n-          <p>상품 관리 기능이 구현될 예정입니다.</p>\n-        </Content>\n-      </PageContainer>\n+    <CMSLayout>\n+      <Container>\n+        {error && (\n+          <ErrorState>\n+            {error}\n+            <RefreshButton onClick={loadData}>\n+              다시 시도\n+            </RefreshButton>\n+          </ErrorState>\n+        )}\n+\n+        {hasPermission && isAdding && (\n+          <AddForm>\n+            <FormRow>\n+              <FieldColumn>\n+                <Label $required>지점</Label>\n+                <CustomDropdown\n+                  value={newBranchId}\n+                  onChange={(value: string) => setNewBranchId(value)}\n+                  options={branchOptions}\n+                  placeholder=\"지점을 선택하세요\"\n+                  error={!!errors.branchId}\n+                  disabled={saving}\n+                  required\n+                />\n+                {errors.branchId && <ErrorText>{errors.branchId}</ErrorText>}\n+              </FieldColumn>\n+              <FieldColumn>\n+                <Label $required>프로그램</Label>\n+                <CustomDropdown\n+                  value={newProgramId}\n+                  onChange={(value: string) => setNewProgramId(value)}\n+                  options={programOptions}\n+                  placeholder=\"프로그램을 선택하세요\"\n+                  error={!!errors.programId}\n+                  disabled={saving}\n+                  required\n+                />\n+                {errors.programId && <ErrorText>{errors.programId}</ErrorText>}\n+              </FieldColumn>\n+            </FormRow>\n+            \n+            {selectedProgram && selectedProgram.type === '횟수제' && (\n+              <FormRow>\n+                <FieldColumn>\n+                  <Label $required>횟수</Label>\n+                  <Input\n+                    type=\"number\"\n+                    placeholder=\"횟수를 입력하세요\"\n+                    value={newSessions}\n+                    onChange={(e) => setNewSessions(e.target.value ? Number(e.target.value) : '')}\n+                    onKeyPress={handleKeyPress}\n+                    disabled={saving}\n+                    error={!!errors.sessions}\n+                    min={1}\n+                  />\n+                  {errors.sessions && <ErrorText>{errors.sessions}</ErrorText>}\n+                </FieldColumn>\n+                <FieldColumn style={{ flex: 2 }}>\n+                  <Label $required>상품명</Label>\n+                  <Input\n+                    type=\"text\"\n+                    placeholder=\"상품명을 입력하세요\"\n+                    value={newProductName}\n+                    onChange={(e) => setNewProductName(e.target.value)}\n+                    onKeyPress={handleKeyPress}\n+                    disabled={saving}\n+                    error={!!errors.name}\n+                  />\n+                  {errors.name && <ErrorText>{errors.name}</ErrorText>}\n+                </FieldColumn>\n+              </FormRow>\n+            )}\n+            \n+            {selectedProgram && selectedProgram.type === '기간제' && (\n+              <FormRow>\n+                <FieldColumn>\n+                  <Label $required>상품명</Label>\n+                  <Input\n+                    type=\"text\"\n+                    placeholder=\"상품명을 입력하세요\"\n+                    value={newProductName}\n+                    onChange={(e) => setNewProductName(e.target.value)}\n+                    onKeyPress={handleKeyPress}\n+                    disabled={saving}\n+                    error={!!errors.name}\n+                  />\n+                  {errors.name && <ErrorText>{errors.name}</ErrorText>}\n+                </FieldColumn>\n+              </FormRow>\n+            )}\n+            \n+            <FormButtons>\n+              <SaveButton onClick={handleAddProduct} disabled={saving}>\n+                {saving ? '저장 중...' : '저장'}\n+              </SaveButton>\n+              <CancelButton onClick={handleCancel} disabled={saving}>\n+                취소\n+              </CancelButton>\n+            </FormButtons>\n+          </AddForm>\n+        )}\n+\n+        {hasPermission && !isAdding && (\n+          <AddButton onClick={() => {\n+            setIsAdding(true);\n+            setEditingId(null);\n+            setEditProductName('');\n+            setEditBranchId('');\n+            setEditProgramId('');\n+            setEditSessions('');\n+            setErrors({});\n+          }} disabled={loading || editingId !== null}>\n+            + 새 상품 추가\n+          </AddButton>\n+        )}\n+\n+        {!hasPermission && (\n+          <ErrorState style={{ marginBottom: '16px', backgroundColor: `${AppColors.primary}10`, borderColor: AppColors.primary, color: AppColors.primary }}>\n+            ℹ️ 상품 목록 조회만 가능합니다. 추가/수정/삭제는 MASTER 권한이 필요합니다.\n+          </ErrorState>\n+        )}\n+\n+        <Table>\n+          <TableHeader>\n+            상품 목록\n+            <TableStats>총 {products.length}개 상품</TableStats>\n+          </TableHeader>\n+          {products.length === 0 ? (\n+            <EmptyState>등록된 상품이 없습니다.</EmptyState>\n+          ) : (\n+            products.map((product) => (\n+              <TableRow \n+                key={product.id}\n+                style={editingId === product.id ? {\n+                  flexDirection: 'column',\n+                  alignItems: 'stretch',\n+                  padding: '16px',\n+                  backgroundColor: `${AppColors.primary}05`\n+                } : {}}\n+              >\n+                {editingId === product.id ? (\n+                  // 수정 모드\n+                  <div style={{ \n+                    width: '100%', \n+                    display: 'flex', \n+                    flexDirection: 'column', \n+                    gap: '12px',\n+                    padding: '8px 0'\n+                  }}>\n+                    <div style={{ display: 'flex', gap: '12px' }}>\n+                      <FieldColumn>\n+                        <Label $required>지점</Label>\n+                        <CustomDropdown\n+                          value={editBranchId}\n+                          onChange={(value: string) => setEditBranchId(value)}\n+                          options={branchOptions}\n+                          placeholder=\"지점을 선택하세요\"\n+                          error={!!errors.branchId}\n+                          disabled={saving}\n+                          required\n+                        />\n+                        {errors.branchId && <ErrorText>{errors.branchId}</ErrorText>}\n+                      </FieldColumn>\n+                      <FieldColumn>\n+                        <Label $required>프로그램</Label>\n+                        <CustomDropdown\n+                          value={editProgramId}\n+                          onChange={(value: string) => setEditProgramId(value)}\n+                          options={programOptions}\n+                          placeholder=\"프로그램을 선택하세요\"\n+                          error={!!errors.programId}\n+                          disabled={saving}\n+                          required\n+                        />\n+                        {errors.programId && <ErrorText>{errors.programId}</ErrorText>}\n+                      </FieldColumn>\n+                    </div>\n+                    \n+                    {editSelectedProgram && editSelectedProgram.type === '횟수제' && (\n+                      <div style={{ display: 'flex', gap: '12px' }}>\n+                        <FieldColumn>\n+                          <Label $required>횟수</Label>\n+                          <Input\n+                            type=\"number\"\n+                            placeholder=\"횟수를 입력하세요\"\n+                            value={editSessions}\n+                            onChange={(e) => setEditSessions(e.target.value ? Number(e.target.value) : '')}\n+                            onKeyPress={handleEditKeyPress}\n+                            disabled={saving}\n+                            error={!!errors.sessions}\n+                            min={1}\n+                          />\n+                          {errors.sessions && <ErrorText>{errors.sessions}</ErrorText>}\n+                        </FieldColumn>\n+                        <FieldColumn style={{ flex: 2 }}>\n+                          <Label $required>상품명</Label>\n+                          <Input\n+                            type=\"text\"\n+                            placeholder=\"상품명을 입력하세요\"\n+                            value={editProductName}\n+                            onChange={(e) => setEditProductName(e.target.value)}\n+                            onKeyPress={handleEditKeyPress}\n+                            disabled={saving}\n+                            error={!!errors.name}\n+                          />\n+                          {errors.name && <ErrorText>{errors.name}</ErrorText>}\n+                        </FieldColumn>\n+                      </div>\n+                    )}\n+                    \n+                    {editSelectedProgram && editSelectedProgram.type === '기간제' && (\n+                      <div style={{ display: 'flex', gap: '12px' }}>\n+                        <FieldColumn>\n+                          <Label $required>상품명</Label>\n+                          <Input\n+                            type=\"text\"\n+                            placeholder=\"상품명을 입력하세요\"\n+                            value={editProductName}\n+                            onChange={(e) => setEditProductName(e.target.value)}\n+                            onKeyPress={handleEditKeyPress}\n+                            disabled={saving}\n+                            error={!!errors.name}\n+                          />\n+                          {errors.name && <ErrorText>{errors.name}</ErrorText>}\n+                        </FieldColumn>\n+                      </div>\n+                    )}\n+                    \n+                    <div style={{ \n+                      display: 'flex', \n+                      gap: '8px', \n+                      justifyContent: 'flex-end',\n+                      marginTop: '4px'\n+                    }}>\n+                      <SaveButton \n+                        onClick={handleUpdateProduct} \n+                        disabled={saving}\n+                        style={{ \n+                          padding: '6px 16px', \n+                          fontSize: '13px',\n+                          minWidth: '60px'\n+                        }}\n+                      >\n+                        {saving ? '저장 중...' : '저장'}\n+                      </SaveButton>\n+                      <CancelButton \n+                        onClick={handleCancelEdit} \n+                        disabled={saving}\n+                        style={{ \n+                          padding: '6px 16px', \n+                          fontSize: '13px',\n+                          minWidth: '60px'\n+                        }}\n+                      >\n+                        취소\n+                      </CancelButton>\n+                    </div>\n+                  </div>\n+                ) : (\n+                  // 보기 모드\n+                  <>\n+                    <ProductInfo>\n+                      <ProductName>{product.name}</ProductName>\n+                      <ProductDetails>\n+                        <DetailItem>\n+                          <DetailLabel>지점:</DetailLabel>\n+                          <DetailValue>{getBranchName(product.branchId)}</DetailValue>\n+                        </DetailItem>\n+                        <DetailItem>\n+                          <DetailLabel>프로그램:</DetailLabel>\n+                          <DetailValue>{product.programName} ({product.programType})</DetailValue>\n+                        </DetailItem>\n+                        {product.sessions && (\n+                          <DetailItem>\n+                            <DetailLabel>횟수:</DetailLabel>\n+                            <DetailValue>{product.sessions}회</DetailValue>\n+                          </DetailItem>\n+                        )}\n+                      </ProductDetails>\n+                    </ProductInfo>\n+                    {hasPermission && (\n+                      <ActionButtons>\n+                        <EditButton \n+                          onClick={() => handleEditProduct(product)}\n+                          disabled={saving || editingId !== null}\n+                        >\n+                          수정\n+                        </EditButton>\n+                        <DeleteButton \n+                          onClick={() => handleDeleteProduct(product.id)}\n+                          disabled={saving || editingId !== null}\n+                        >\n+                          삭제\n+                        </DeleteButton>\n+                      </ActionButtons>\n+                    )}\n+                  </>\n+                )}\n+              </TableRow>\n+            ))\n+          )}\n+        </Table>\n+      </Container>\n     </CMSLayout>\n   );\n };\n \n"
                },
                {
                    "date": 1760080088293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -692,58 +692,38 @@\n                 {errors.programId && <ErrorText>{errors.programId}</ErrorText>}\n               </FieldColumn>\n             </FormRow>\n             \n-            {selectedProgram && selectedProgram.type === '횟수제' && (\n-              <FormRow>\n-                <FieldColumn>\n-                  <Label $required>횟수</Label>\n-                  <Input\n-                    type=\"number\"\n-                    placeholder=\"횟수를 입력하세요\"\n-                    value={newSessions}\n-                    onChange={(e) => setNewSessions(e.target.value ? Number(e.target.value) : '')}\n-                    onKeyPress={handleKeyPress}\n-                    disabled={saving}\n-                    error={!!errors.sessions}\n-                    min={1}\n-                  />\n-                  {errors.sessions && <ErrorText>{errors.sessions}</ErrorText>}\n-                </FieldColumn>\n-                <FieldColumn style={{ flex: 2 }}>\n-                  <Label $required>상품명</Label>\n-                  <Input\n-                    type=\"text\"\n-                    placeholder=\"상품명을 입력하세요\"\n-                    value={newProductName}\n-                    onChange={(e) => setNewProductName(e.target.value)}\n-                    onKeyPress={handleKeyPress}\n-                    disabled={saving}\n-                    error={!!errors.name}\n-                  />\n-                  {errors.name && <ErrorText>{errors.name}</ErrorText>}\n-                </FieldColumn>\n-              </FormRow>\n-            )}\n+            <FormRow>\n+              <FieldColumn>\n+                <Label $required={selectedProgram?.type === '횟수제'}>횟수</Label>\n+                <Input\n+                  type=\"number\"\n+                  placeholder={selectedProgram?.type === '횟수제' ? \"횟수를 입력하세요\" : \"기간제는 횟수 불필요\"}\n+                  value={newSessions}\n+                  onChange={(e) => setNewSessions(e.target.value ? Number(e.target.value) : '')}\n+                  onKeyPress={handleKeyPress}\n+                  disabled={saving || !selectedProgram || selectedProgram.type === '기간제'}\n+                  error={!!errors.sessions}\n+                  min={1}\n+                />\n+                {errors.sessions && <ErrorText>{errors.sessions}</ErrorText>}\n+              </FieldColumn>\n+              <FieldColumn>\n+                <Label $required>상품명</Label>\n+                <Input\n+                  type=\"text\"\n+                  placeholder=\"상품명을 입력하세요\"\n+                  value={newProductName}\n+                  onChange={(e) => setNewProductName(e.target.value)}\n+                  onKeyPress={handleKeyPress}\n+                  disabled={saving}\n+                  error={!!errors.name}\n+                />\n+                {errors.name && <ErrorText>{errors.name}</ErrorText>}\n+              </FieldColumn>\n+            </FormRow>\n             \n-            {selectedProgram && selectedProgram.type === '기간제' && (\n-              <FormRow>\n-                <FieldColumn>\n-                  <Label $required>상품명</Label>\n-                  <Input\n-                    type=\"text\"\n-                    placeholder=\"상품명을 입력하세요\"\n-                    value={newProductName}\n-                    onChange={(e) => setNewProductName(e.target.value)}\n-                    onKeyPress={handleKeyPress}\n-                    disabled={saving}\n-                    error={!!errors.name}\n-                  />\n-                  {errors.name && <ErrorText>{errors.name}</ErrorText>}\n-                </FieldColumn>\n-              </FormRow>\n-            )}\n-            \n             <FormButtons>\n               <SaveButton onClick={handleAddProduct} disabled={saving}>\n                 {saving ? '저장 중...' : '저장'}\n               </SaveButton>\n@@ -829,58 +809,38 @@\n                         {errors.programId && <ErrorText>{errors.programId}</ErrorText>}\n                       </FieldColumn>\n                     </div>\n                     \n-                    {editSelectedProgram && editSelectedProgram.type === '횟수제' && (\n-                      <div style={{ display: 'flex', gap: '12px' }}>\n-                        <FieldColumn>\n-                          <Label $required>횟수</Label>\n-                          <Input\n-                            type=\"number\"\n-                            placeholder=\"횟수를 입력하세요\"\n-                            value={editSessions}\n-                            onChange={(e) => setEditSessions(e.target.value ? Number(e.target.value) : '')}\n-                            onKeyPress={handleEditKeyPress}\n-                            disabled={saving}\n-                            error={!!errors.sessions}\n-                            min={1}\n-                          />\n-                          {errors.sessions && <ErrorText>{errors.sessions}</ErrorText>}\n-                        </FieldColumn>\n-                        <FieldColumn style={{ flex: 2 }}>\n-                          <Label $required>상품명</Label>\n-                          <Input\n-                            type=\"text\"\n-                            placeholder=\"상품명을 입력하세요\"\n-                            value={editProductName}\n-                            onChange={(e) => setEditProductName(e.target.value)}\n-                            onKeyPress={handleEditKeyPress}\n-                            disabled={saving}\n-                            error={!!errors.name}\n-                          />\n-                          {errors.name && <ErrorText>{errors.name}</ErrorText>}\n-                        </FieldColumn>\n-                      </div>\n-                    )}\n+                    <div style={{ display: 'flex', gap: '12px' }}>\n+                      <FieldColumn>\n+                        <Label $required={editSelectedProgram?.type === '횟수제'}>횟수</Label>\n+                        <Input\n+                          type=\"number\"\n+                          placeholder={editSelectedProgram?.type === '횟수제' ? \"횟수를 입력하세요\" : \"기간제는 횟수 불필요\"}\n+                          value={editSessions}\n+                          onChange={(e) => setEditSessions(e.target.value ? Number(e.target.value) : '')}\n+                          onKeyPress={handleEditKeyPress}\n+                          disabled={saving || !editSelectedProgram || editSelectedProgram.type === '기간제'}\n+                          error={!!errors.sessions}\n+                          min={1}\n+                        />\n+                        {errors.sessions && <ErrorText>{errors.sessions}</ErrorText>}\n+                      </FieldColumn>\n+                      <FieldColumn>\n+                        <Label $required>상품명</Label>\n+                        <Input\n+                          type=\"text\"\n+                          placeholder=\"상품명을 입력하세요\"\n+                          value={editProductName}\n+                          onChange={(e) => setEditProductName(e.target.value)}\n+                          onKeyPress={handleEditKeyPress}\n+                          disabled={saving}\n+                          error={!!errors.name}\n+                        />\n+                        {errors.name && <ErrorText>{errors.name}</ErrorText>}\n+                      </FieldColumn>\n+                    </div>\n                     \n-                    {editSelectedProgram && editSelectedProgram.type === '기간제' && (\n-                      <div style={{ display: 'flex', gap: '12px' }}>\n-                        <FieldColumn>\n-                          <Label $required>상품명</Label>\n-                          <Input\n-                            type=\"text\"\n-                            placeholder=\"상품명을 입력하세요\"\n-                            value={editProductName}\n-                            onChange={(e) => setEditProductName(e.target.value)}\n-                            onKeyPress={handleEditKeyPress}\n-                            disabled={saving}\n-                            error={!!errors.name}\n-                          />\n-                          {errors.name && <ErrorText>{errors.name}</ErrorText>}\n-                        </FieldColumn>\n-                      </div>\n-                    )}\n-                    \n                     <div style={{ \n                       display: 'flex', \n                       gap: '8px', \n                       justifyContent: 'flex-end',\n"
                },
                {
                    "date": 1760080507419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -338,8 +338,10 @@\n   const [saving, setSaving] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n   const [errors, setErrors] = useState<{ [key: string]: string }>({});\n   const [hasPermission, setHasPermission] = useState(false);\n+  const [userPermission, setUserPermission] = useState<string>('');\n+  const [userBranchId, setUserBranchId] = useState<string>('');\n \n   // 선택된 프로그램 정보\n   const selectedProgram = programs.find(p => p.id === newProgramId);\n   const editSelectedProgram = programs.find(p => p.id === editProgramId);\n@@ -349,8 +351,13 @@\n     value: branch.id,\n     label: branch.name\n   }));\n \n+  // EDITOR인 경우 본인 지점만 표시\n+  const availableBranchOptions = userPermission === 'EDITOR' \n+    ? branchOptions.filter(option => option.value === userBranchId)\n+    : branchOptions;\n+\n   const programOptions = programs.map(program => ({\n     value: program.id,\n     label: `${program.name} (${program.type})`\n   }));\n@@ -390,23 +397,39 @@\n         // 현재 로그인한 사용자 정보 가져오기\n         const allStaff = await dbManager.getAllStaff();\n         const currentUser = allStaff.find(staff => staff.loginId === adminId);\n         \n-        // MASTER 권한 또는 시스템 관리자만 편집 가능\n-        const isMaster = currentUser && currentUser.permission === 'MASTER';\n-        const isSystemAdmin = adminId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n+        if (currentUser) {\n+          setUserPermission(currentUser.permission);\n+          setUserBranchId(currentUser.branchId);\n+          \n+          // 권한별 접근 설정\n+          const isMaster = currentUser.permission === 'MASTER';\n+          const isSystemAdmin = adminId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n+          const isEditor = currentUser.permission === 'EDITOR';\n+          \n+          // MASTER와 시스템 관리자, EDITOR는 편집 가능, VIEW는 조회만\n+          setHasPermission(isMaster || isSystemAdmin || isEditor);\n+          \n+          // EDITOR인 경우 본인 지점으로 자동 설정\n+          if (isEditor) {\n+            setNewBranchId(currentUser.branchId);\n+            setEditBranchId(currentUser.branchId);\n+          }\n+        }\n         \n-        setHasPermission(isMaster || isSystemAdmin);\n-        \n-        // 모든 권한에서 상품 목록은 볼 수 있음\n         loadData();\n       } else {\n         setHasPermission(false);\n+        setUserPermission('');\n+        setUserBranchId('');\n         loadData(); // 로그인하지 않아도 목록은 볼 수 있음\n       }\n     } catch (error) {\n       console.error('권한 체크 실패:', error);\n       setHasPermission(false);\n+      setUserPermission('');\n+      setUserBranchId('');\n       loadData(); // 에러가 있어도 목록은 표시\n     }\n   }, []);\n \n@@ -521,8 +544,15 @@\n     }\n   };\n \n   const handleDeleteProduct = async (id: string) => {\n+    // EDITOR인 경우 본인 지점 상품만 삭제 가능\n+    const product = products.find(p => p.id === id);\n+    if (userPermission === 'EDITOR' && product && product.branchId !== userBranchId) {\n+      setError('본인 지점의 상품만 삭제할 수 있습니다.');\n+      return;\n+    }\n+    \n     if (!window.confirm('정말로 삭제하시겠습니까?\\n삭제된 데이터는 복구할 수 없습니다.')) {\n       return;\n     }\n \n@@ -542,8 +572,14 @@\n     }\n   };\n \n   const handleEditProduct = (product: Product) => {\n+    // EDITOR인 경우 본인 지점 상품만 수정 가능\n+    if (userPermission === 'EDITOR' && product.branchId !== userBranchId) {\n+      setError('본인 지점의 상품만 수정할 수 있습니다.');\n+      return;\n+    }\n+    \n     setEditingId(product.id);\n     setEditProductName(product.name);\n     setEditBranchId(product.branchId);\n     setEditProgramId(product.programId);\n@@ -669,12 +705,12 @@\n                 <Label $required>지점</Label>\n                 <CustomDropdown\n                   value={newBranchId}\n                   onChange={(value: string) => setNewBranchId(value)}\n-                  options={branchOptions}\n+                  options={availableBranchOptions}\n                   placeholder=\"지점을 선택하세요\"\n                   error={!!errors.branchId}\n-                  disabled={saving}\n+                  disabled={saving || userPermission === 'EDITOR'}\n                   required\n                 />\n                 {errors.branchId && <ErrorText>{errors.branchId}</ErrorText>}\n               </FieldColumn>\n@@ -749,12 +785,18 @@\n         )}\n \n         {!hasPermission && (\n           <ErrorState style={{ marginBottom: '16px', backgroundColor: `${AppColors.primary}10`, borderColor: AppColors.primary, color: AppColors.primary }}>\n-            ℹ️ 상품 목록 조회만 가능합니다. 추가/수정/삭제는 MASTER 권한이 필요합니다.\n+            ℹ️ 상품 목록 조회만 가능합니다. 추가/수정/삭제는 MASTER 또는 EDITOR 권한이 필요합니다.\n           </ErrorState>\n         )}\n \n+        {hasPermission && userPermission === 'EDITOR' && (\n+          <ErrorState style={{ marginBottom: '16px', backgroundColor: `${AppColors.secondary}10`, borderColor: AppColors.secondary, color: AppColors.secondary }}>\n+            ℹ️ EDITOR 권한으로 본인 지점({getBranchName(userBranchId)})의 상품만 관리할 수 있습니다.\n+          </ErrorState>\n+        )}\n+\n         <Table>\n           <TableHeader>\n             상품 목록\n             <TableStats>총 {products.length}개 상품</TableStats>\n@@ -786,12 +828,12 @@\n                         <Label $required>지점</Label>\n                         <CustomDropdown\n                           value={editBranchId}\n                           onChange={(value: string) => setEditBranchId(value)}\n-                          options={branchOptions}\n+                          options={availableBranchOptions}\n                           placeholder=\"지점을 선택하세요\"\n                           error={!!errors.branchId}\n-                          disabled={saving}\n+                          disabled={saving || userPermission === 'EDITOR'}\n                           required\n                         />\n                         {errors.branchId && <ErrorText>{errors.branchId}</ErrorText>}\n                       </FieldColumn>\n@@ -895,15 +937,15 @@\n                     {hasPermission && (\n                       <ActionButtons>\n                         <EditButton \n                           onClick={() => handleEditProduct(product)}\n-                          disabled={saving || editingId !== null}\n+                          disabled={saving || editingId !== null || (userPermission === 'EDITOR' && product.branchId !== userBranchId)}\n                         >\n                           수정\n                         </EditButton>\n                         <DeleteButton \n                           onClick={() => handleDeleteProduct(product.id)}\n-                          disabled={saving || editingId !== null}\n+                          disabled={saving || editingId !== null || (userPermission === 'EDITOR' && product.branchId !== userBranchId)}\n                         >\n                           삭제\n                         </DeleteButton>\n                       </ActionButtons>\n"
                },
                {
                    "date": 1760150819906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,8 +261,36 @@\n     opacity: 0.5;\n   }\n `;\n \n+const TextArea = styled.textarea<{ error?: boolean }>`\n+  width: 100%;\n+  min-width: 0;\n+  padding: 12px;\n+  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n+  background-color: ${AppColors.input};\n+  box-sizing: border-box;\n+  resize: vertical;\n+  min-height: 80px;\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+  \n+  &::placeholder {\n+    color: ${AppColors.onInput1};\n+  }\n+\n+  &:disabled {\n+    background-color: ${AppColors.background};\n+    opacity: 0.5;\n+  }\n+`;\n+\n const FormButtons = styled.div`\n   display: flex;\n   gap: 8px;\n `;\n@@ -326,14 +354,18 @@\n   const [newProductName, setNewProductName] = useState('');\n   const [newBranchId, setNewBranchId] = useState('');\n   const [newProgramId, setNewProgramId] = useState('');\n   const [newSessions, setNewSessions] = useState<number | ''>('');\n+  const [newPrice, setNewPrice] = useState<number | ''>('');\n+  const [newDescription, setNewDescription] = useState('');\n   \n   // 수정 폼 상태\n   const [editProductName, setEditProductName] = useState('');\n   const [editBranchId, setEditBranchId] = useState('');\n   const [editProgramId, setEditProgramId] = useState('');\n   const [editSessions, setEditSessions] = useState<number | ''>('');\n+  const [editPrice, setEditPrice] = useState<number | ''>('');\n+  const [editDescription, setEditDescription] = useState('');\n   \n   const [loading, setLoading] = useState(true);\n   const [saving, setSaving] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n@@ -514,8 +546,10 @@\n         programId: newProgramId,\n         programName: selectedProgram.name,\n         programType: selectedProgram.type,\n         sessions: selectedProgram.type === '횟수제' ? Number(newSessions) : undefined,\n+        price: newPrice ? Number(newPrice) : undefined,\n+        description: newDescription.trim() || undefined,\n         isActive: true,\n       });\n       \n       // 새로운 상품 추가 후 정렬 유지\n@@ -530,8 +564,10 @@\n       setNewProductName('');\n       setNewBranchId('');\n       setNewProgramId('');\n       setNewSessions('');\n+      setNewPrice('');\n+      setNewDescription('');\n       setIsAdding(false);\n       setEditingId(null);\n       setErrors({});\n       \n@@ -583,8 +619,10 @@\n     setEditProductName(product.name);\n     setEditBranchId(product.branchId);\n     setEditProgramId(product.programId);\n     setEditSessions(product.sessions || '');\n+    setEditPrice(product.price || '');\n+    setEditDescription(product.description || '');\n     setIsAdding(false);\n     setErrors({});\n   };\n \n@@ -612,8 +650,10 @@\n         programId: editProgramId,\n         programName: selectedProgram.name,\n         programType: selectedProgram.type,\n         sessions: selectedProgram.type === '횟수제' ? Number(editSessions) : undefined,\n+        price: editPrice ? Number(editPrice) : undefined,\n+        description: editDescription.trim() || undefined,\n       });\n       \n       if (updatedProduct) {\n         setProducts(prev => prev.map(product => \n@@ -638,8 +678,10 @@\n     setEditProductName('');\n     setEditBranchId('');\n     setEditProgramId('');\n     setEditSessions('');\n+    setEditPrice('');\n+    setEditDescription('');\n     setError(null);\n     setErrors({});\n   };\n \n@@ -647,14 +689,18 @@\n     setNewProductName('');\n     setNewBranchId('');\n     setNewProgramId('');\n     setNewSessions('');\n+    setNewPrice('');\n+    setNewDescription('');\n     setIsAdding(false);\n     setEditingId(null);\n     setEditProductName('');\n     setEditBranchId('');\n     setEditProgramId('');\n     setEditSessions('');\n+    setEditPrice('');\n+    setEditDescription('');\n     setError(null);\n     setErrors({});\n   };\n \n@@ -744,8 +790,23 @@\n                 />\n                 {errors.sessions && <ErrorText>{errors.sessions}</ErrorText>}\n               </FieldColumn>\n               <FieldColumn>\n+                <Label>가격</Label>\n+                <Input\n+                  type=\"number\"\n+                  placeholder=\"가격을 입력하세요 (원)\"\n+                  value={newPrice}\n+                  onChange={(e) => setNewPrice(e.target.value ? Number(e.target.value) : '')}\n+                  onKeyPress={handleKeyPress}\n+                  disabled={saving}\n+                  min={0}\n+                />\n+              </FieldColumn>\n+            </FormRow>\n+            \n+            <FormRow>\n+              <FieldColumn>\n                 <Label $required>상품명</Label>\n                 <Input\n                   type=\"text\"\n                   placeholder=\"상품명을 입력하세요\"\n@@ -758,8 +819,20 @@\n                 {errors.name && <ErrorText>{errors.name}</ErrorText>}\n               </FieldColumn>\n             </FormRow>\n             \n+            <FormRow>\n+              <FieldColumn>\n+                <Label>상품소개</Label>\n+                <TextArea\n+                  placeholder=\"상품에 대한 설명을 입력하세요 (선택사항)\"\n+                  value={newDescription}\n+                  onChange={(e) => setNewDescription(e.target.value)}\n+                  disabled={saving}\n+                />\n+              </FieldColumn>\n+            </FormRow>\n+            \n             <FormButtons>\n               <SaveButton onClick={handleAddProduct} disabled={saving}>\n                 {saving ? '저장 중...' : '저장'}\n               </SaveButton>\n@@ -777,8 +850,10 @@\n             setEditProductName('');\n             setEditBranchId('');\n             setEditProgramId('');\n             setEditSessions('');\n+            setEditPrice('');\n+            setEditDescription('');\n             setErrors({});\n           }} disabled={loading || editingId !== null}>\n             + 새 상품 추가\n           </AddButton>\n@@ -867,8 +942,23 @@\n                         />\n                         {errors.sessions && <ErrorText>{errors.sessions}</ErrorText>}\n                       </FieldColumn>\n                       <FieldColumn>\n+                        <Label>가격</Label>\n+                        <Input\n+                          type=\"number\"\n+                          placeholder=\"가격을 입력하세요 (원)\"\n+                          value={editPrice}\n+                          onChange={(e) => setEditPrice(e.target.value ? Number(e.target.value) : '')}\n+                          onKeyPress={handleEditKeyPress}\n+                          disabled={saving}\n+                          min={0}\n+                        />\n+                      </FieldColumn>\n+                    </div>\n+                    \n+                    <div style={{ display: 'flex', gap: '12px' }}>\n+                      <FieldColumn>\n                         <Label $required>상품명</Label>\n                         <Input\n                           type=\"text\"\n                           placeholder=\"상품명을 입력하세요\"\n@@ -881,8 +971,20 @@\n                         {errors.name && <ErrorText>{errors.name}</ErrorText>}\n                       </FieldColumn>\n                     </div>\n                     \n+                    <div style={{ display: 'flex', gap: '12px' }}>\n+                      <FieldColumn>\n+                        <Label>상품소개</Label>\n+                        <TextArea\n+                          placeholder=\"상품에 대한 설명을 입력하세요 (선택사항)\"\n+                          value={editDescription}\n+                          onChange={(e) => setEditDescription(e.target.value)}\n+                          disabled={saving}\n+                        />\n+                      </FieldColumn>\n+                    </div>\n+                    \n                     <div style={{ \n                       display: 'flex', \n                       gap: '8px', \n                       justifyContent: 'flex-end',\n@@ -931,8 +1033,27 @@\n                             <DetailLabel>횟수:</DetailLabel>\n                             <DetailValue>{product.sessions}회</DetailValue>\n                           </DetailItem>\n                         )}\n+                        {product.price && (\n+                          <DetailItem>\n+                            <DetailLabel>가격:</DetailLabel>\n+                            <DetailValue>{product.price.toLocaleString()}원</DetailValue>\n+                          </DetailItem>\n+                        )}\n+                        {product.description && (\n+                          <DetailItem>\n+                            <DetailLabel>소개:</DetailLabel>\n+                            <DetailValue style={{ \n+                              maxWidth: '400px', \n+                              overflow: 'hidden', \n+                              textOverflow: 'ellipsis', \n+                              whiteSpace: 'nowrap' \n+                            }}>\n+                              {product.description}\n+                            </DetailValue>\n+                          </DetailItem>\n+                        )}\n                       </ProductDetails>\n                     </ProductInfo>\n                     {hasPermission && (\n                       <ActionButtons>\n"
                },
                {
                    "date": 1760151132677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -354,16 +354,18 @@\n   const [newProductName, setNewProductName] = useState('');\n   const [newBranchId, setNewBranchId] = useState('');\n   const [newProgramId, setNewProgramId] = useState('');\n   const [newSessions, setNewSessions] = useState<number | ''>('');\n+  const [newDuration, setNewDuration] = useState<number>(30); // 기본 30분\n   const [newPrice, setNewPrice] = useState<number | ''>('');\n   const [newDescription, setNewDescription] = useState('');\n   \n   // 수정 폼 상태\n   const [editProductName, setEditProductName] = useState('');\n   const [editBranchId, setEditBranchId] = useState('');\n   const [editProgramId, setEditProgramId] = useState('');\n   const [editSessions, setEditSessions] = useState<number | ''>('');\n+  const [editDuration, setEditDuration] = useState<number>(30); // 기본 30분\n   const [editPrice, setEditPrice] = useState<number | ''>('');\n   const [editDescription, setEditDescription] = useState('');\n   \n   const [loading, setLoading] = useState(true);\n@@ -393,8 +395,17 @@\n     value: program.id,\n     label: `${program.name} (${program.type})`\n   }));\n \n+  // 소요시간 옵션 (횟수제인 경우에만 사용)\n+  const durationOptions = [\n+    { value: 30, label: '30분' },\n+    { value: 50, label: '50분' },\n+    { value: 60, label: '60분' },\n+    { value: 90, label: '90분' },\n+    { value: 120, label: '120분' }\n+  ];\n+\n   // 상품명 자동 생성 함수\n   const generateProductName = useCallback((programName: string, sessions?: number | '') => {\n     if (!programName) return '';\n     \n@@ -546,8 +557,9 @@\n         programId: newProgramId,\n         programName: selectedProgram.name,\n         programType: selectedProgram.type,\n         sessions: selectedProgram.type === '횟수제' ? Number(newSessions) : undefined,\n+        duration: selectedProgram.type === '횟수제' ? newDuration : undefined,\n         price: newPrice ? Number(newPrice) : undefined,\n         description: newDescription.trim() || undefined,\n         isActive: true,\n       });\n@@ -564,8 +576,9 @@\n       setNewProductName('');\n       setNewBranchId('');\n       setNewProgramId('');\n       setNewSessions('');\n+      setNewDuration(30);\n       setNewPrice('');\n       setNewDescription('');\n       setIsAdding(false);\n       setEditingId(null);\n@@ -619,8 +632,9 @@\n     setEditProductName(product.name);\n     setEditBranchId(product.branchId);\n     setEditProgramId(product.programId);\n     setEditSessions(product.sessions || '');\n+    setEditDuration(product.duration || 30);\n     setEditPrice(product.price || '');\n     setEditDescription(product.description || '');\n     setIsAdding(false);\n     setErrors({});\n@@ -650,8 +664,9 @@\n         programId: editProgramId,\n         programName: selectedProgram.name,\n         programType: selectedProgram.type,\n         sessions: selectedProgram.type === '횟수제' ? Number(editSessions) : undefined,\n+        duration: selectedProgram.type === '횟수제' ? editDuration : undefined,\n         price: editPrice ? Number(editPrice) : undefined,\n         description: editDescription.trim() || undefined,\n       });\n       \n@@ -678,8 +693,9 @@\n     setEditProductName('');\n     setEditBranchId('');\n     setEditProgramId('');\n     setEditSessions('');\n+    setEditDuration(30);\n     setEditPrice('');\n     setEditDescription('');\n     setError(null);\n     setErrors({});\n@@ -689,16 +705,18 @@\n     setNewProductName('');\n     setNewBranchId('');\n     setNewProgramId('');\n     setNewSessions('');\n+    setNewDuration(30);\n     setNewPrice('');\n     setNewDescription('');\n     setIsAdding(false);\n     setEditingId(null);\n     setEditProductName('');\n     setEditBranchId('');\n     setEditProgramId('');\n     setEditSessions('');\n+    setEditDuration(30);\n     setEditPrice('');\n     setEditDescription('');\n     setError(null);\n     setErrors({});\n@@ -790,8 +808,22 @@\n                 />\n                 {errors.sessions && <ErrorText>{errors.sessions}</ErrorText>}\n               </FieldColumn>\n               <FieldColumn>\n+                <Label $required={selectedProgram?.type === '횟수제'}>소요시간</Label>\n+                <CustomDropdown\n+                  value={newDuration.toString()}\n+                  onChange={(value: string) => setNewDuration(Number(value))}\n+                  options={durationOptions.map(option => ({ value: option.value.toString(), label: option.label }))}\n+                  placeholder={selectedProgram?.type === '횟수제' ? \"소요시간을 선택하세요\" : \"기간제는 소요시간 불필요\"}\n+                  disabled={saving || !selectedProgram || selectedProgram.type === '기간제'}\n+                  required={selectedProgram?.type === '횟수제'}\n+                />\n+              </FieldColumn>\n+            </FormRow>\n+            \n+            <FormRow>\n+              <FieldColumn>\n                 <Label>가격</Label>\n                 <Input\n                   type=\"number\"\n                   placeholder=\"가격을 입력하세요 (원)\"\n@@ -850,8 +882,9 @@\n             setEditProductName('');\n             setEditBranchId('');\n             setEditProgramId('');\n             setEditSessions('');\n+            setEditDuration(30);\n             setEditPrice('');\n             setEditDescription('');\n             setErrors({});\n           }} disabled={loading || editingId !== null}>\n@@ -942,8 +975,22 @@\n                         />\n                         {errors.sessions && <ErrorText>{errors.sessions}</ErrorText>}\n                       </FieldColumn>\n                       <FieldColumn>\n+                        <Label $required={editSelectedProgram?.type === '횟수제'}>소요시간</Label>\n+                        <CustomDropdown\n+                          value={editDuration.toString()}\n+                          onChange={(value: string) => setEditDuration(Number(value))}\n+                          options={durationOptions.map(option => ({ value: option.value.toString(), label: option.label }))}\n+                          placeholder={editSelectedProgram?.type === '횟수제' ? \"소요시간을 선택하세요\" : \"기간제는 소요시간 불필요\"}\n+                          disabled={saving || !editSelectedProgram || editSelectedProgram.type === '기간제'}\n+                          required={editSelectedProgram?.type === '횟수제'}\n+                        />\n+                      </FieldColumn>\n+                    </div>\n+                    \n+                    <div style={{ display: 'flex', gap: '12px' }}>\n+                      <FieldColumn>\n                         <Label>가격</Label>\n                         <Input\n                           type=\"number\"\n                           placeholder=\"가격을 입력하세요 (원)\"\n@@ -1033,8 +1080,14 @@\n                             <DetailLabel>횟수:</DetailLabel>\n                             <DetailValue>{product.sessions}회</DetailValue>\n                           </DetailItem>\n                         )}\n+                        {product.duration && (\n+                          <DetailItem>\n+                            <DetailLabel>소요시간:</DetailLabel>\n+                            <DetailValue>{product.duration}분</DetailValue>\n+                          </DetailItem>\n+                        )}\n                         {product.price && (\n                           <DetailItem>\n                             <DetailLabel>가격:</DetailLabel>\n                             <DetailValue>{product.price.toLocaleString()}원</DetailValue>\n"
                },
                {
                    "date": 1760151257121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -398,12 +398,9 @@\n \n   // 소요시간 옵션 (횟수제인 경우에만 사용)\n   const durationOptions = [\n     { value: 30, label: '30분' },\n-    { value: 50, label: '50분' },\n-    { value: 60, label: '60분' },\n-    { value: 90, label: '90분' },\n-    { value: 120, label: '120분' }\n+    { value: 50, label: '50분' }\n   ];\n \n   // 상품명 자동 생성 함수\n   const generateProductName = useCallback((programName: string, sessions?: number | '') => {\n"
                },
                {
                    "date": 1760161526164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,13 +235,13 @@\n     }\n   `}\n `;\n \n-const Input = styled.input<{ error?: boolean }>`\n+const Input = styled.input<{ $error?: boolean }>`\n   width: 100%;\n   min-width: 0;\n   padding: 12px;\n-  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n+  border: 1px solid ${({ $error }) => $error ? AppColors.error : AppColors.borderLight};\n   border-radius: 8px;\n   font-size: ${AppTextStyles.body1.fontSize};\n   color: ${AppColors.onSurface};\n   background-color: ${AppColors.input};\n@@ -261,13 +261,13 @@\n     opacity: 0.5;\n   }\n `;\n \n-const TextArea = styled.textarea<{ error?: boolean }>`\n+const TextArea = styled.textarea<{ $error?: boolean }>`\n   width: 100%;\n   min-width: 0;\n   padding: 12px;\n-  border: 1px solid ${({ error }) => error ? AppColors.error : AppColors.borderLight};\n+  border: 1px solid ${({ $error }) => $error ? AppColors.error : AppColors.borderLight};\n   border-radius: 8px;\n   font-size: ${AppTextStyles.body1.fontSize};\n   color: ${AppColors.onSurface};\n   background-color: ${AppColors.input};\n@@ -799,9 +799,9 @@\n                   value={newSessions}\n                   onChange={(e) => setNewSessions(e.target.value ? Number(e.target.value) : '')}\n                   onKeyPress={handleKeyPress}\n                   disabled={saving || !selectedProgram || selectedProgram.type === '기간제'}\n-                  error={!!errors.sessions}\n+                  $error={!!errors.sessions}\n                   min={1}\n                 />\n                 {errors.sessions && <ErrorText>{errors.sessions}</ErrorText>}\n               </FieldColumn>\n@@ -842,9 +842,9 @@\n                   value={newProductName}\n                   onChange={(e) => setNewProductName(e.target.value)}\n                   onKeyPress={handleKeyPress}\n                   disabled={saving}\n-                  error={!!errors.name}\n+                  $error={!!errors.name}\n                 />\n                 {errors.name && <ErrorText>{errors.name}</ErrorText>}\n               </FieldColumn>\n             </FormRow>\n@@ -966,9 +966,9 @@\n                           value={editSessions}\n                           onChange={(e) => setEditSessions(e.target.value ? Number(e.target.value) : '')}\n                           onKeyPress={handleEditKeyPress}\n                           disabled={saving || !editSelectedProgram || editSelectedProgram.type === '기간제'}\n-                          error={!!errors.sessions}\n+                          $error={!!errors.sessions}\n                           min={1}\n                         />\n                         {errors.sessions && <ErrorText>{errors.sessions}</ErrorText>}\n                       </FieldColumn>\n@@ -1009,9 +1009,9 @@\n                           value={editProductName}\n                           onChange={(e) => setEditProductName(e.target.value)}\n                           onKeyPress={handleEditKeyPress}\n                           disabled={saving}\n-                          error={!!errors.name}\n+                          $error={!!errors.name}\n                         />\n                         {errors.name && <ErrorText>{errors.name}</ErrorText>}\n                       </FieldColumn>\n                     </div>\n"
                },
                {
                    "date": 1761908255031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, Product, Branch, Program } from '../../../utils/indexedDB';\n import CustomDropdown from '../../../components/CustomDropdown';\n-import CMSLayout from '../../../components/CMSLayout';\n import { SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n \n const Container = styled.div`\n   width: 100%;\n@@ -354,8 +353,9 @@\n   const [newProductName, setNewProductName] = useState('');\n   const [newBranchId, setNewBranchId] = useState('');\n   const [newProgramId, setNewProgramId] = useState('');\n   const [newSessions, setNewSessions] = useState<number | ''>('');\n+  const [newMonths, setNewMonths] = useState<number | ''>(''); // 기간제용 개월수\n   const [newDuration, setNewDuration] = useState<number>(30); // 기본 30분\n   const [newPrice, setNewPrice] = useState<number | ''>('');\n   const [newDescription, setNewDescription] = useState('');\n   \n@@ -363,8 +363,9 @@\n   const [editProductName, setEditProductName] = useState('');\n   const [editBranchId, setEditBranchId] = useState('');\n   const [editProgramId, setEditProgramId] = useState('');\n   const [editSessions, setEditSessions] = useState<number | ''>('');\n+  const [editMonths, setEditMonths] = useState<number | ''>(''); // 기간제용 개월수\n   const [editDuration, setEditDuration] = useState<number>(30); // 기본 30분\n   const [editPrice, setEditPrice] = useState<number | ''>('');\n   const [editDescription, setEditDescription] = useState('');\n   \n@@ -402,32 +403,44 @@\n     { value: 50, label: '50분' }\n   ];\n \n   // 상품명 자동 생성 함수\n-  const generateProductName = useCallback((programName: string, sessions?: number | '') => {\n+  const generateProductName = useCallback((programName: string, sessions?: number | '', months?: number | '') => {\n     if (!programName) return '';\n     \n     if (sessions && typeof sessions === 'number') {\n       return `${programName} ${sessions}회`;\n     }\n     \n+    if (months && typeof months === 'number') {\n+      return `${programName} ${months}개월`;\n+    }\n+    \n     return programName;\n   }, []);\n \n   // 프로그램 선택 시 상품명 자동 업데이트\n   useEffect(() => {\n     if (selectedProgram) {\n-      const autoName = generateProductName(selectedProgram.name, selectedProgram.type === '횟수제' ? newSessions : undefined);\n+      const autoName = generateProductName(\n+        selectedProgram.name, \n+        selectedProgram.type === '횟수제' ? newSessions : undefined,\n+        selectedProgram.type === '기간제' ? newMonths : undefined\n+      );\n       setNewProductName(autoName);\n     }\n-  }, [selectedProgram, newSessions, generateProductName]);\n+  }, [selectedProgram, newSessions, newMonths, generateProductName]);\n \n   useEffect(() => {\n     if (editSelectedProgram) {\n-      const autoName = generateProductName(editSelectedProgram.name, editSelectedProgram.type === '횟수제' ? editSessions : undefined);\n+      const autoName = generateProductName(\n+        editSelectedProgram.name, \n+        editSelectedProgram.type === '횟수제' ? editSessions : undefined,\n+        editSelectedProgram.type === '기간제' ? editMonths : undefined\n+      );\n       setEditProductName(autoName);\n     }\n-  }, [editSelectedProgram, editSessions, generateProductName]);\n+  }, [editSelectedProgram, editSessions, editMonths, generateProductName]);\n \n   // 컴포넌트 마운트 시 권한 체크 및 데이터 로드\n   const checkPermissionAndLoadData = useCallback(async () => {\n     try {\n@@ -504,9 +517,9 @@\n       setLoading(false);\n     }\n   };\n \n-  const validateForm = (name: string, branchId: string, programId: string, sessions?: number | ''): boolean => {\n+  const validateForm = (name: string, branchId: string, programId: string, sessions?: number | '', months?: number | ''): boolean => {\n     const newErrors: { [key: string]: string } = {};\n \n     if (!name.trim()) {\n       newErrors.name = '상품명을 입력해주세요.';\n@@ -519,22 +532,28 @@\n     if (!programId) {\n       newErrors.programId = '프로그램을 선택해주세요.';\n     }\n \n-    // 횟수제인 경우 횟수 검증\n+    // 프로그램 타입에 따른 검증\n     const program = programs.find(p => p.id === programId);\n-    if (program && program.type === '횟수제') {\n-      if (!sessions || sessions <= 0) {\n-        newErrors.sessions = '횟수를 입력해주세요.';\n+    if (program) {\n+      if (program.type === '횟수제') {\n+        if (!sessions || sessions <= 0) {\n+          newErrors.sessions = '횟수를 입력해주세요.';\n+        }\n+      } else if (program.type === '기간제') {\n+        if (!months || months <= 0) {\n+          newErrors.months = '개월수를 입력해주세요.';\n+        }\n       }\n     }\n \n     setErrors(newErrors);\n     return Object.keys(newErrors).length === 0;\n   };\n \n   const handleAddProduct = async () => {\n-    if (!validateForm(newProductName, newBranchId, newProgramId, newSessions)) {\n+    if (!validateForm(newProductName, newBranchId, newProgramId, newSessions, newMonths)) {\n       return;\n     }\n \n     try {\n@@ -554,8 +573,9 @@\n         programId: newProgramId,\n         programName: selectedProgram.name,\n         programType: selectedProgram.type,\n         sessions: selectedProgram.type === '횟수제' ? Number(newSessions) : undefined,\n+        months: selectedProgram.type === '기간제' ? Number(newMonths) : undefined,\n         duration: selectedProgram.type === '횟수제' ? newDuration : undefined,\n         price: newPrice ? Number(newPrice) : undefined,\n         description: newDescription.trim() || undefined,\n         isActive: true,\n@@ -573,8 +593,9 @@\n       setNewProductName('');\n       setNewBranchId('');\n       setNewProgramId('');\n       setNewSessions('');\n+      setNewMonths('');\n       setNewDuration(30);\n       setNewPrice('');\n       setNewDescription('');\n       setIsAdding(false);\n@@ -629,17 +650,18 @@\n     setEditProductName(product.name);\n     setEditBranchId(product.branchId);\n     setEditProgramId(product.programId);\n     setEditSessions(product.sessions || '');\n+    setEditMonths(product.months || '');\n     setEditDuration(product.duration || 30);\n     setEditPrice(product.price || '');\n     setEditDescription(product.description || '');\n     setIsAdding(false);\n     setErrors({});\n   };\n \n   const handleUpdateProduct = async () => {\n-    if (!validateForm(editProductName, editBranchId, editProgramId, editSessions)) {\n+    if (!validateForm(editProductName, editBranchId, editProgramId, editSessions, editMonths)) {\n       return;\n     }\n \n     if (!editingId) return;\n@@ -661,8 +683,9 @@\n         programId: editProgramId,\n         programName: selectedProgram.name,\n         programType: selectedProgram.type,\n         sessions: selectedProgram.type === '횟수제' ? Number(editSessions) : undefined,\n+        months: selectedProgram.type === '기간제' ? Number(editMonths) : undefined,\n         duration: selectedProgram.type === '횟수제' ? editDuration : undefined,\n         price: editPrice ? Number(editPrice) : undefined,\n         description: editDescription.trim() || undefined,\n       });\n@@ -690,8 +713,9 @@\n     setEditProductName('');\n     setEditBranchId('');\n     setEditProgramId('');\n     setEditSessions('');\n+    setEditMonths('');\n     setEditDuration(30);\n     setEditPrice('');\n     setEditDescription('');\n     setError(null);\n@@ -702,8 +726,9 @@\n     setNewProductName('');\n     setNewBranchId('');\n     setNewProgramId('');\n     setNewSessions('');\n+    setNewMonths('');\n     setNewDuration(30);\n     setNewPrice('');\n     setNewDescription('');\n     setIsAdding(false);\n@@ -711,8 +736,9 @@\n     setEditProductName('');\n     setEditBranchId('');\n     setEditProgramId('');\n     setEditSessions('');\n+    setEditMonths('');\n     setEditDuration(30);\n     setEditPrice('');\n     setEditDescription('');\n     setError(null);\n@@ -738,18 +764,18 @@\n   };\n \n   if (loading) {\n     return (\n-      <CMSLayout>\n+      \n         <Container>\n           <LoadingState>상품 데이터를 불러오는 중...</LoadingState>\n         </Container>\n-      </CMSLayout>\n+      \n     );\n   }\n \n   return (\n-    <CMSLayout>\n+    \n       <Container>\n         {error && (\n           <ErrorState>\n             {error}\n@@ -805,8 +831,25 @@\n                 />\n                 {errors.sessions && <ErrorText>{errors.sessions}</ErrorText>}\n               </FieldColumn>\n               <FieldColumn>\n+                <Label $required={selectedProgram?.type === '기간제'}>개월수</Label>\n+                <Input\n+                  type=\"number\"\n+                  placeholder={selectedProgram?.type === '기간제' ? \"개월수를 입력하세요\" : \"횟수제는 개월수 불필요\"}\n+                  value={newMonths}\n+                  onChange={(e) => setNewMonths(e.target.value ? Number(e.target.value) : '')}\n+                  onKeyPress={handleKeyPress}\n+                  disabled={saving || !selectedProgram || selectedProgram.type === '횟수제'}\n+                  $error={!!errors.months}\n+                  min={1}\n+                />\n+                {errors.months && <ErrorText>{errors.months}</ErrorText>}\n+              </FieldColumn>\n+            </FormRow>\n+            \n+            <FormRow>\n+              <FieldColumn>\n                 <Label $required={selectedProgram?.type === '횟수제'}>소요시간</Label>\n                 <CustomDropdown\n                   value={newDuration.toString()}\n                   onChange={(value: string) => setNewDuration(Number(value))}\n@@ -879,8 +922,9 @@\n             setEditProductName('');\n             setEditBranchId('');\n             setEditProgramId('');\n             setEditSessions('');\n+            setEditMonths('');\n             setEditDuration(30);\n             setEditPrice('');\n             setEditDescription('');\n             setErrors({});\n@@ -972,8 +1016,25 @@\n                         />\n                         {errors.sessions && <ErrorText>{errors.sessions}</ErrorText>}\n                       </FieldColumn>\n                       <FieldColumn>\n+                        <Label $required={editSelectedProgram?.type === '기간제'}>개월수</Label>\n+                        <Input\n+                          type=\"number\"\n+                          placeholder={editSelectedProgram?.type === '기간제' ? \"개월수를 입력하세요\" : \"횟수제는 개월수 불필요\"}\n+                          value={editMonths}\n+                          onChange={(e) => setEditMonths(e.target.value ? Number(e.target.value) : '')}\n+                          onKeyPress={handleEditKeyPress}\n+                          disabled={saving || !editSelectedProgram || editSelectedProgram.type === '횟수제'}\n+                          $error={!!errors.months}\n+                          min={1}\n+                        />\n+                        {errors.months && <ErrorText>{errors.months}</ErrorText>}\n+                      </FieldColumn>\n+                    </div>\n+                    \n+                    <div style={{ display: 'flex', gap: '12px' }}>\n+                      <FieldColumn>\n                         <Label $required={editSelectedProgram?.type === '횟수제'}>소요시간</Label>\n                         <CustomDropdown\n                           value={editDuration.toString()}\n                           onChange={(value: string) => setEditDuration(Number(value))}\n@@ -1077,8 +1138,14 @@\n                             <DetailLabel>횟수:</DetailLabel>\n                             <DetailValue>{product.sessions}회</DetailValue>\n                           </DetailItem>\n                         )}\n+                        {product.months && (\n+                          <DetailItem>\n+                            <DetailLabel>개월수:</DetailLabel>\n+                            <DetailValue>{product.months}개월</DetailValue>\n+                          </DetailItem>\n+                        )}\n                         {product.duration && (\n                           <DetailItem>\n                             <DetailLabel>소요시간:</DetailLabel>\n                             <DetailValue>{product.duration}분</DetailValue>\n@@ -1127,9 +1194,9 @@\n             ))\n           )}\n         </Table>\n       </Container>\n-    </CMSLayout>\n+    \n   );\n };\n \n export default ProductManagement;\n"
                }
            ],
            "date": 1760076906195,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\n\nconst Container = styled.div`\n  padding: 24px;\n  background-color: ${AppColors.surface};\n  min-height: 100vh;\n`;\n\nconst Header = styled.div`\n  margin-bottom: 32px;\n`;\n\nconst Title = styled.h1`\n  ${AppTextStyles.headline1}\n  color: ${AppColors.onSurface};\n  margin-bottom: 8px;\n`;\n\nconst Description = styled.p`\n  ${AppTextStyles.body1}\n  color: ${AppColors.onSurface};\n`;\n\nconst Content = styled.div`\n  background-color: ${AppColors.background};\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 12px;\n  padding: 24px;\n`;\n\nconst ProductManagement: React.FC = () => {\n  return (\n    <Container>\n      <Header>\n        <Title>상품 관리</Title>\n        <Description>상품을 관리하고 설정할 수 있습니다.</Description>\n      </Header>\n      \n      <Content>\n        <p>상품 관리 기능이 구현될 예정입니다.</p>\n      </Content>\n    </Container>\n  );\n};\n\nexport default ProductManagement;\n"
        }
    ]
}