{
    "sourceFile": "src/pages/CMS/Login/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1757827333310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757827890531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n   return (\n     <Container className=\"cms-layout\">\n       <LoginFormContainer>\n         <LogoContainer>\n-          <Logo src=\"/logo.svg\" alt=\"BidSpace Logo\" />\n+          <Logo src=\"/logo.svg\" alt=\"Lavida Logo\" />\n         </LogoContainer>\n         \n         <FormTitle>로그인</FormTitle>\n         \n"
                },
                {
                    "date": 1759911046517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,10 @@\n import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n import { useAdminAuth } from '../../../context/AdminAuthContext';\n import PrimaryButton from '../../../components/PrimaryButton';\n+import { dbManager } from '../../../utils/indexedDB';\n+import { autoInitializeSystem } from '../../../utils/systemInit';\n \n const Container = styled.div`\n   display: flex;\n   justify-content: center;\n@@ -71,14 +73,19 @@\n   useEffect(() => {\n     // Context가 완전히 초기화되고, 이미 로그인되어 있고, 현재 로그인 시도 중이 아닐 때만 리다이렉트\n     if (ready && isLoggedIn && !isLoading) {\n       console.log('이미 로그인되어 있음, CMS 페이지로 이동');\n-      window.location.href = '/cms/admin';\n+      window.location.href = '/cms/dashboard';\n     }\n   }, [ready, isLoggedIn, isLoading]);\n \n-  const userIdRegex = /^(?=.*[A-Za-z])(?=.*[0-9])[A-Za-z0-9]{6,20}$/;\n-  const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?~^<>,.&+=])[A-Za-z\\d$@$!%*#?~^<>,.&+=]{8,}$/;\n+  // 컴포넌트 마운트 시 시스템 초기화\n+  useEffect(() => {\n+    const initSystem = async () => {\n+      await autoInitializeSystem();\n+    };\n+    initSystem();\n+  }, []);\n \n   const handleLogin = async () => {\n     if (isLoading) return; // 이미 로딩 중이면 중복 실행 방지\n \n@@ -89,35 +96,67 @@\n \n     if (!userId) {\n       setIdError(\"아이디를 입력해주세요.\");\n       hasError = true;\n-    } else if (!userIdRegex.test(userId)) {\n-      setIdError(\"아이디는 영문과 숫자를 모두 포함하여 6~20자로 입력해주세요.\");\n-      hasError = true;\n     }\n \n     if (!password) {\n       setPwdError(\"비밀번호를 입력해주세요.\");\n       hasError = true;\n-    } else if (!passwordRegex.test(password)) {\n-      setPwdError(\"비밀번호는 영문, 숫자, 특수문자를 모두 포함하여 8자 이상 입력해주세요.\");\n-      hasError = true;\n     }\n \n     if (hasError) return;\n \n     setIsLoading(true);\n \n-    // 더미 로그인 체크\n-    if (userId === 'lavida01' && password === 'a!111111') {\n-      // 성공\n-      const dummyToken = 'dummy_access_token';\n-      login(userId, dummyToken);\n+    try {\n+      // 데이터베이스에서 직원 정보 조회\n+      const staff = await dbManager.getStaffByLoginId(userId);\n+      \n+      if (!staff) {\n+        toast.error(\"존재하지 않는 계정입니다.\", {\n+          autoClose: 5000,\n+          hideProgressBar: false,\n+          closeOnClick: true,\n+          pauseOnHover: true,\n+        });\n+        setIsLoading(false);\n+        return;\n+      }\n+\n+      // 비밀번호 확인\n+      if (staff.password !== password) {\n+        toast.error(\"비밀번호가 일치하지 않습니다.\", {\n+          autoClose: 5000,\n+          hideProgressBar: false,\n+          closeOnClick: true,\n+          pauseOnHover: true,\n+        });\n+        setIsLoading(false);\n+        return;\n+      }\n+\n+      // 권한 확인 (MASTER, EDITOR만 로그인 허용)\n+      if (staff.permission !== 'MASTER' && staff.permission !== 'EDITOR') {\n+        toast.error(\"CMS 접근 권한이 없습니다.\", {\n+          autoClose: 5000,\n+          hideProgressBar: false,\n+          closeOnClick: true,\n+          pauseOnHover: true,\n+        });\n+        setIsLoading(false);\n+        return;\n+      }\n+\n+      // 로그인 성공\n+      const accessToken = `staff_${staff.id}_${Date.now()}`;\n+      login(userId, accessToken);\n       toast.success(\"로그인되었습니다.\");\n-      window.location.href = '/cms/admin';\n-    } else {\n-      // 실패\n-      toast.error(\"아이디 또는 비밀번호가 일치하지 않습니다.\", {\n+      window.location.href = '/cms/dashboard';\n+\n+    } catch (error) {\n+      console.error('로그인 처리 중 오류:', error);\n+      toast.error(\"로그인 처리 중 오류가 발생했습니다.\", {\n         autoClose: 5000,\n         hideProgressBar: false,\n         closeOnClick: true,\n         pauseOnHover: true,\n"
                },
                {
                    "date": 1759912385133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n import { useAdminAuth } from '../../../context/AdminAuthContext';\n import PrimaryButton from '../../../components/PrimaryButton';\n import { dbManager } from '../../../utils/indexedDB';\n-import { autoInitializeSystem } from '../../../utils/systemInit';\n \n const Container = styled.div`\n   display: flex;\n   justify-content: center;\n@@ -77,16 +76,8 @@\n       window.location.href = '/cms/dashboard';\n     }\n   }, [ready, isLoggedIn, isLoading]);\n \n-  // 컴포넌트 마운트 시 시스템 초기화\n-  useEffect(() => {\n-    const initSystem = async () => {\n-      await autoInitializeSystem();\n-    };\n-    initSystem();\n-  }, []);\n-\n   const handleLogin = async () => {\n     if (isLoading) return; // 이미 로딩 중이면 중복 실행 방지\n \n     setIdError(null);\n"
                },
                {
                    "date": 1760074699391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,8 +125,20 @@\n         setIsLoading(false);\n         return;\n       }\n \n+      // 계정 활성 상태 확인\n+      if (!staff.isActive) {\n+        toast.error(\"비활성화된 계정입니다. 관리자에게 문의하세요.\", {\n+          autoClose: 5000,\n+          hideProgressBar: false,\n+          closeOnClick: true,\n+          pauseOnHover: true,\n+        });\n+        setIsLoading(false);\n+        return;\n+      }\n+\n       // 권한 확인 (MASTER, EDITOR만 로그인 허용)\n       if (staff.permission !== 'MASTER' && staff.permission !== 'EDITOR') {\n         toast.error(\"CMS 접근 권한이 없습니다.\", {\n           autoClose: 5000,\n"
                },
                {
                    "date": 1760075648009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,10 +137,10 @@\n         setIsLoading(false);\n         return;\n       }\n \n-      // 권한 확인 (MASTER, EDITOR만 로그인 허용)\n-      if (staff.permission !== 'MASTER' && staff.permission !== 'EDITOR') {\n+      // 권한 확인 (MASTER, EDITOR, VIEWER 모두 로그인 허용)\n+      if (!['MASTER', 'EDITOR', 'VIEWER'].includes(staff.permission)) {\n         toast.error(\"CMS 접근 권한이 없습니다.\", {\n           autoClose: 5000,\n           hideProgressBar: false,\n           closeOnClick: true,\n"
                },
                {
                    "date": 1760703784423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React, { useState, useEffect } from 'react';\n+import styled from 'styled-components';\n+import { toast } from 'react-toastify';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { FormTitle } from '../../../customComponents/FormTitle';\n+import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n+import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n+import { useAdminAuth } from '../../../context/AdminAuthContext';\n+import PrimaryButton from '../../../components/PrimaryButton';\n+import { dbManager } from '../../../utils/indexedDB';\n+\n+const Container = styled.div`\n+  display: flex;\n+  justify-content: center;\n+  align-items: center;\n+  min-height: 100vh;\n+  background-color: ${AppColors.background};\n+  padding: 20px;\n+`;\n+\n+const LoginFormContainer = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  align-items: flex-start;\n+  width: 100%;\n+  max-width: 400px;\n+  gap: 24px;\n+`;\n+\n+const LogoContainer = styled.div`\n+  display: flex;\n+  justify-content: center;\n+  width: 100%;\n+  margin-bottom: 16px;\n+`;\n+\n+const Logo = styled.img`\n+  width: 120px;\n+  height: auto;\n+`;\n+\n+const FormWrapper = styled.div`\n+  width: 100%;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 16px;\n+`;\n+\n+const ButtonWrapper = styled.div`\n+  width: 100%;\n+  margin-top: 8px;\n+`;\n+\n+const HelpText = styled.p`\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onInput2};\n+  text-align: center;\n+  line-height: 1.5;\n+  margin: 0;\n+`;\n+\n+const CMSLogin: React.FC = () => {\n+  const [userId, setUserId] = useState('');\n+  const [password, setPassword] = useState('');\n+  const [idError, setIdError] = useState<string | null>(null);\n+  const [pwdError, setPwdError] = useState<string | null>(null);\n+  const [isLoading, setIsLoading] = useState(false);\n+\n+  const { login, isLoggedIn, ready } = useAdminAuth();\n+\n+  useEffect(() => {\n+    // Context가 완전히 초기화되고, 이미 로그인되어 있고, 현재 로그인 시도 중이 아닐 때만 리다이렉트\n+    if (ready && isLoggedIn && !isLoading) {\n+      console.log('이미 로그인되어 있음, CMS 페이지로 이동');\n+      window.location.href = '/cms/dashboard';\n+    }\n+  }, [ready, isLoggedIn, isLoading]);\n+\n+  const handleLogin = async () => {\n+    if (isLoading) return; // 이미 로딩 중이면 중복 실행 방지\n+\n+    setIdError(null);\n+    setPwdError(null);\n+\n+    let hasError = false;\n+\n+    if (!userId) {\n+      setIdError(\"아이디를 입력해주세요.\");\n+      hasError = true;\n+    }\n+\n+    if (!password) {\n+      setPwdError(\"비밀번호를 입력해주세요.\");\n+      hasError = true;\n+    }\n+\n+    if (hasError) return;\n+\n+    setIsLoading(true);\n+\n+    try {\n+      // 데이터베이스에서 직원 정보 조회\n+      const staff = await dbManager.getStaffByLoginId(userId);\n+      \n+      if (!staff) {\n+        toast.error(\"존재하지 않는 계정입니다.\", {\n+          autoClose: 5000,\n+          hideProgressBar: false,\n+          closeOnClick: true,\n+          pauseOnHover: true,\n+        });\n+        setIsLoading(false);\n+        return;\n+      }\n+\n+      // 비밀번호 확인\n+      if (staff.password !== password) {\n+        toast.error(\"비밀번호가 일치하지 않습니다.\", {\n+          autoClose: 5000,\n+          hideProgressBar: false,\n+          closeOnClick: true,\n+          pauseOnHover: true,\n+        });\n+        setIsLoading(false);\n+        return;\n+      }\n+\n+      // 계정 활성 상태 확인\n+      if (!staff.isActive) {\n+        toast.error(\"비활성화된 계정입니다. 관리자에게 문의하세요.\", {\n+          autoClose: 5000,\n+          hideProgressBar: false,\n+          closeOnClick: true,\n+          pauseOnHover: true,\n+        });\n+        setIsLoading(false);\n+        return;\n+      }\n+\n+      // 권한 확인 (MASTER, EDITOR, VIEWER 모두 로그인 허용)\n+      if (!['MASTER', 'EDITOR', 'VIEWER'].includes(staff.permission)) {\n+        toast.error(\"CMS 접근 권한이 없습니다.\", {\n+          autoClose: 5000,\n+          hideProgressBar: false,\n+          closeOnClick: true,\n+          pauseOnHover: true,\n+        });\n+        setIsLoading(false);\n+        return;\n+      }\n+\n+      // 로그인 성공\n+      const accessToken = `staff_${staff.id}_${Date.now()}`;\n+      login(userId, accessToken);\n+      toast.success(\"로그인되었습니다.\");\n+      window.location.href = '/cms/dashboard';\n+\n+    } catch (error) {\n+      console.error('로그인 처리 중 오류:', error);\n+      toast.error(\"로그인 처리 중 오류가 발생했습니다.\", {\n+        autoClose: 5000,\n+        hideProgressBar: false,\n+        closeOnClick: true,\n+        pauseOnHover: true,\n+      });\n+    }\n+\n+    setIsLoading(false);\n+  };\n+\n+  return (\n+    <Container className=\"cms-layout\">\n+      <LoginFormContainer>\n+        <LogoContainer>\n+          <Logo src=\"/logo192.png\" alt=\"Lavida Logo\" />\n+        </LogoContainer>\n+        \n+        <FormTitle>로그인</FormTitle>\n+        \n+        <FormWrapper>\n+          <div>\n+            <AppIdTextField\n+              value={userId}\n+              onChange={(e) => setUserId(e.target.value)}\n+              showValidationMessage={false}\n+              errorMessage={idError || undefined}\n+            />\n+          </div>\n+          \n+          <div>\n+            <AppPwdTextField\n+              value={password}\n+              onChange={(e) => setPassword(e.target.value)}\n+              fieldType={PwdFieldType.PASSWORD}\n+              showValidationMessage={false}\n+              errorMessage={pwdError || undefined}\n+            />\n+          </div>\n+        </FormWrapper>\n+        \n+        <ButtonWrapper>\n+          <PrimaryButton\n+            onClick={handleLogin}\n+            disabled={isLoading}\n+          >\n+            {isLoading ? \"로그인 중...\" : \"로그인\"}\n+          </PrimaryButton>\n+        </ButtonWrapper>\n+        \n+        <HelpText>\n+          시스템 계정이 없다면, 관리자에게 문의 바랍니다.\n+        </HelpText>\n+      </LoginFormContainer>\n+    </Container>\n+  );\n+};\n+\n+export default CMSLogin;\n"
                },
                {
                    "date": 1760755500677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,309 @@\n+import React, { useState, useEffect } from 'react';\n+import styled from 'styled-components';\n+import { toast } from 'react-toastify';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import { FormTitle } from '../../../customComponents/FormTitle';\n+import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n+import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n+import { useAdminAuth } from '../../../context/AdminAuthContext';\n+import PrimaryButton from '../../../components/PrimaryButton';\n+import { dbManager } from '../../../utils/indexedDB';\n+\n+const Container = styled.div`\n+  display: flex;\n+  justify-content: center;\n+  align-items: center;\n+  min-height: 100vh;\n+  background-color: ${AppColors.background};\n+  padding: 20px;\n+`;\n+\n+const LoginFormContainer = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  align-items: flex-start;\n+  width: 100%;\n+  max-width: 400px;\n+  gap: 24px;\n+`;\n+\n+const LogoContainer = styled.div`\n+  display: flex;\n+  justify-content: center;\n+  width: 100%;\n+  margin-bottom: 16px;\n+`;\n+\n+const Logo = styled.img`\n+  width: 120px;\n+  height: auto;\n+`;\n+\n+const FormWrapper = styled.div`\n+  width: 100%;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 16px;\n+`;\n+\n+const ButtonWrapper = styled.div`\n+  width: 100%;\n+  margin-top: 8px;\n+`;\n+\n+const HelpText = styled.p`\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onInput2};\n+  text-align: center;\n+  line-height: 1.5;\n+  margin: 0;\n+`;\n+\n+const CMSLogin: React.FC = () => {\n+  const [userId, setUserId] = useState('');\n+  const [password, setPassword] = useState('');\n+  const [idError, setIdError] = useState<string | null>(null);\n+  const [pwdError, setPwdError] = useState<string | null>(null);\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [systemStatus, setSystemStatus] = useState<'checking' | 'ready' | 'initializing'>('checking');\n+\n+  const { login, isLoggedIn, ready } = useAdminAuth();\n+\n+  useEffect(() => {\n+    // Context가 완전히 초기화되고, 이미 로그인되어 있고, 현재 로그인 시도 중이 아닐 때만 리다이렉트\n+    if (ready && isLoggedIn && !isLoading) {\n+      console.log('이미 로그인되어 있음, CMS 페이지로 이동');\n+      window.location.href = '/cms/dashboard';\n+    }\n+  }, [ready, isLoggedIn, isLoading]);\n+\n+  useEffect(() => {\n+    // 시스템 상태 확인\n+    const checkSystemStatus = async () => {\n+      try {\n+        setSystemStatus('checking');\n+        \n+        // IndexedDB 연결 대기\n+        let dbReady = false;\n+        let attempts = 0;\n+        const maxAttempts = 15;\n+        \n+        while (!dbReady && attempts < maxAttempts) {\n+          try {\n+            await dbManager.getAllBranches();\n+            dbReady = true;\n+          } catch (error) {\n+            attempts++;\n+            console.log(`🔄 시스템 상태 확인 중... (${attempts}/${maxAttempts})`);\n+            await new Promise(resolve => setTimeout(resolve, 500));\n+          }\n+        }\n+        \n+        if (!dbReady) {\n+          console.warn('⚠️ IndexedDB 연결 시간 초과, 계속 진행');\n+        }\n+        \n+        // 시스템 관리자 존재 여부 확인\n+        const systemAdmin = await dbManager.getStaffByLoginId('system_admin');\n+        \n+        if (systemAdmin) {\n+          console.log('✅ 시스템 준비 완료');\n+          setSystemStatus('ready');\n+        } else {\n+          console.log('⏳ 시스템 관리자 생성 중...');\n+          setSystemStatus('initializing');\n+          \n+          // 시스템 관리자가 생성될 때까지 대기\n+          await waitForSystemAdmin();\n+        }\n+      } catch (error) {\n+        console.error('시스템 상태 확인 중 오류:', error);\n+        setSystemStatus('ready'); // 오류 시에도 계속 진행\n+      }\n+    };\n+    \n+    checkSystemStatus();\n+  }, []);\n+\n+  const waitForSystemAdmin = async () => {\n+    let attempts = 0;\n+    const maxAttempts = 30; // 15초까지 대기\n+    \n+    while (attempts < maxAttempts) {\n+      try {\n+        const systemAdmin = await dbManager.getStaffByLoginId('system_admin');\n+        if (systemAdmin) {\n+          console.log('✅ 시스템 관리자 생성 완료');\n+          setSystemStatus('ready');\n+          return;\n+        }\n+        \n+        attempts++;\n+        await new Promise(resolve => setTimeout(resolve, 500));\n+      } catch (error) {\n+        attempts++;\n+        await new Promise(resolve => setTimeout(resolve, 500));\n+      }\n+    }\n+    \n+    console.log('⏰ 시스템 관리자 생성 대기 시간 초과, 계속 진행');\n+    setSystemStatus('ready');\n+  };\n+\n+  const handleLogin = async () => {\n+    if (isLoading) return; // 이미 로딩 중이면 중복 실행 방지\n+\n+    setIdError(null);\n+    setPwdError(null);\n+\n+    let hasError = false;\n+\n+    if (!userId) {\n+      setIdError(\"아이디를 입력해주세요.\");\n+      hasError = true;\n+    }\n+\n+    if (!password) {\n+      setPwdError(\"비밀번호를 입력해주세요.\");\n+      hasError = true;\n+    }\n+\n+    if (hasError) return;\n+\n+    setIsLoading(true);\n+\n+    try {\n+      // 데이터베이스에서 직원 정보 조회\n+      const staff = await dbManager.getStaffByLoginId(userId);\n+      \n+      if (!staff) {\n+        toast.error(\"존재하지 않는 계정입니다.\", {\n+          autoClose: 5000,\n+          hideProgressBar: false,\n+          closeOnClick: true,\n+          pauseOnHover: true,\n+        });\n+        setIsLoading(false);\n+        return;\n+      }\n+\n+      // 비밀번호 확인\n+      if (staff.password !== password) {\n+        toast.error(\"비밀번호가 일치하지 않습니다.\", {\n+          autoClose: 5000,\n+          hideProgressBar: false,\n+          closeOnClick: true,\n+          pauseOnHover: true,\n+        });\n+        setIsLoading(false);\n+        return;\n+      }\n+\n+      // 계정 활성 상태 확인\n+      if (!staff.isActive) {\n+        toast.error(\"비활성화된 계정입니다. 관리자에게 문의하세요.\", {\n+          autoClose: 5000,\n+          hideProgressBar: false,\n+          closeOnClick: true,\n+          pauseOnHover: true,\n+        });\n+        setIsLoading(false);\n+        return;\n+      }\n+\n+      // 권한 확인 (MASTER, EDITOR, VIEWER 모두 로그인 허용)\n+      if (!['MASTER', 'EDITOR', 'VIEWER'].includes(staff.permission)) {\n+        toast.error(\"CMS 접근 권한이 없습니다.\", {\n+          autoClose: 5000,\n+          hideProgressBar: false,\n+          closeOnClick: true,\n+          pauseOnHover: true,\n+        });\n+        setIsLoading(false);\n+        return;\n+      }\n+\n+      // 로그인 성공\n+      const accessToken = `staff_${staff.id}_${Date.now()}`;\n+      login(userId, accessToken);\n+      toast.success(\"로그인되었습니다.\");\n+      window.location.href = '/cms/dashboard';\n+\n+    } catch (error) {\n+      console.error('로그인 처리 중 오류:', error);\n+      toast.error(\"로그인 처리 중 오류가 발생했습니다.\", {\n+        autoClose: 5000,\n+        hideProgressBar: false,\n+        closeOnClick: true,\n+        pauseOnHover: true,\n+      });\n+    }\n+\n+    setIsLoading(false);\n+  };\n+\n+  return (\n+    <Container className=\"cms-layout\">\n+      <LoginFormContainer>\n+        <LogoContainer>\n+          <Logo src=\"/logo192.png\" alt=\"Lavida Logo\" />\n+        </LogoContainer>\n+        \n+        <FormTitle>로그인</FormTitle>\n+        \n+        {systemStatus === 'checking' && (\n+          <HelpText>\n+            🔄 시스템 상태를 확인하고 있습니다...\n+          </HelpText>\n+        )}\n+        \n+        {systemStatus === 'initializing' && (\n+          <HelpText>\n+            ⏳ 시스템을 초기화하고 있습니다. 잠시만 기다려주세요...\n+          </HelpText>\n+        )}\n+        \n+        {systemStatus === 'ready' && (\n+          <>\n+            <FormWrapper>\n+              <div>\n+                <AppIdTextField\n+                  value={userId}\n+                  onChange={(e) => setUserId(e.target.value)}\n+                  showValidationMessage={false}\n+                  errorMessage={idError || undefined}\n+                />\n+              </div>\n+              \n+              <div>\n+                <AppPwdTextField\n+                  value={password}\n+                  onChange={(e) => setPassword(e.target.value)}\n+                  fieldType={PwdFieldType.PASSWORD}\n+                  showValidationMessage={false}\n+                  errorMessage={pwdError || undefined}\n+                />\n+              </div>\n+            </FormWrapper>\n+            \n+            <ButtonWrapper>\n+              <PrimaryButton\n+                onClick={handleLogin}\n+                disabled={isLoading}\n+              >\n+                {isLoading ? \"로그인 중...\" : \"로그인\"}\n+              </PrimaryButton>\n+            </ButtonWrapper>\n+            \n+            <HelpText>\n+              시스템 계정이 없다면, 관리자에게 문의 바랍니다.\n+            </HelpText>\n+          </>\n+        )}\n+      </LoginFormContainer>\n+    </Container>\n+  );\n+};\n+\n+export default CMSLogin;\n"
                },
                {
                    "date": 1761648628613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n   useEffect(() => {\n     // Context가 완전히 초기화되고, 이미 로그인되어 있고, 현재 로그인 시도 중이 아닐 때만 리다이렉트\n     if (ready && isLoggedIn && !isLoading) {\n       console.log('이미 로그인되어 있음, CMS 페이지로 이동');\n-      window.location.href = '/cms/dashboard';\n+      window.location.href = '/cms/member/search';\n     }\n   }, [ready, isLoggedIn, isLoading]);\n \n   useEffect(() => {\n@@ -227,9 +227,9 @@\n       // 로그인 성공\n       const accessToken = `staff_${staff.id}_${Date.now()}`;\n       login(userId, accessToken);\n       toast.success(\"로그인되었습니다.\");\n-      window.location.href = '/cms/dashboard';\n+      window.location.href = '/cms/member/search';\n \n     } catch (error) {\n       console.error('로그인 처리 중 오류:', error);\n       toast.error(\"로그인 처리 중 오류가 발생했습니다.\", {\n@@ -306,442 +306,4 @@\n   );\n };\n \n export default CMSLogin;\n-import React, { useState, useEffect } from 'react';\n-import styled from 'styled-components';\n-import { toast } from 'react-toastify';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { FormTitle } from '../../../customComponents/FormTitle';\n-import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n-import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n-import { useAdminAuth } from '../../../context/AdminAuthContext';\n-import PrimaryButton from '../../../components/PrimaryButton';\n-import { dbManager } from '../../../utils/indexedDB';\n-\n-const Container = styled.div`\n-  display: flex;\n-  justify-content: center;\n-  align-items: center;\n-  min-height: 100vh;\n-  background-color: ${AppColors.background};\n-  padding: 20px;\n-`;\n-\n-const LoginFormContainer = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  align-items: flex-start;\n-  width: 100%;\n-  max-width: 400px;\n-  gap: 24px;\n-`;\n-\n-const LogoContainer = styled.div`\n-  display: flex;\n-  justify-content: center;\n-  width: 100%;\n-  margin-bottom: 16px;\n-`;\n-\n-const Logo = styled.img`\n-  width: 120px;\n-  height: auto;\n-`;\n-\n-const FormWrapper = styled.div`\n-  width: 100%;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 16px;\n-`;\n-\n-const ButtonWrapper = styled.div`\n-  width: 100%;\n-  margin-top: 8px;\n-`;\n-\n-const HelpText = styled.p`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onInput2};\n-  text-align: center;\n-  line-height: 1.5;\n-  margin: 0;\n-`;\n-\n-const CMSLogin: React.FC = () => {\n-  const [userId, setUserId] = useState('');\n-  const [password, setPassword] = useState('');\n-  const [idError, setIdError] = useState<string | null>(null);\n-  const [pwdError, setPwdError] = useState<string | null>(null);\n-  const [isLoading, setIsLoading] = useState(false);\n-\n-  const { login, isLoggedIn, ready } = useAdminAuth();\n-\n-  useEffect(() => {\n-    // Context가 완전히 초기화되고, 이미 로그인되어 있고, 현재 로그인 시도 중이 아닐 때만 리다이렉트\n-    if (ready && isLoggedIn && !isLoading) {\n-      console.log('이미 로그인되어 있음, CMS 페이지로 이동');\n-      window.location.href = '/cms/dashboard';\n-    }\n-  }, [ready, isLoggedIn, isLoading]);\n-\n-  const handleLogin = async () => {\n-    if (isLoading) return; // 이미 로딩 중이면 중복 실행 방지\n-\n-    setIdError(null);\n-    setPwdError(null);\n-\n-    let hasError = false;\n-\n-    if (!userId) {\n-      setIdError(\"아이디를 입력해주세요.\");\n-      hasError = true;\n-    }\n-\n-    if (!password) {\n-      setPwdError(\"비밀번호를 입력해주세요.\");\n-      hasError = true;\n-    }\n-\n-    if (hasError) return;\n-\n-    setIsLoading(true);\n-\n-    try {\n-      // 데이터베이스에서 직원 정보 조회\n-      const staff = await dbManager.getStaffByLoginId(userId);\n-      \n-      if (!staff) {\n-        toast.error(\"존재하지 않는 계정입니다.\", {\n-          autoClose: 5000,\n-          hideProgressBar: false,\n-          closeOnClick: true,\n-          pauseOnHover: true,\n-        });\n-        setIsLoading(false);\n-        return;\n-      }\n-\n-      // 비밀번호 확인\n-      if (staff.password !== password) {\n-        toast.error(\"비밀번호가 일치하지 않습니다.\", {\n-          autoClose: 5000,\n-          hideProgressBar: false,\n-          closeOnClick: true,\n-          pauseOnHover: true,\n-        });\n-        setIsLoading(false);\n-        return;\n-      }\n-\n-      // 계정 활성 상태 확인\n-      if (!staff.isActive) {\n-        toast.error(\"비활성화된 계정입니다. 관리자에게 문의하세요.\", {\n-          autoClose: 5000,\n-          hideProgressBar: false,\n-          closeOnClick: true,\n-          pauseOnHover: true,\n-        });\n-        setIsLoading(false);\n-        return;\n-      }\n-\n-      // 권한 확인 (MASTER, EDITOR, VIEWER 모두 로그인 허용)\n-      if (!['MASTER', 'EDITOR', 'VIEWER'].includes(staff.permission)) {\n-        toast.error(\"CMS 접근 권한이 없습니다.\", {\n-          autoClose: 5000,\n-          hideProgressBar: false,\n-          closeOnClick: true,\n-          pauseOnHover: true,\n-        });\n-        setIsLoading(false);\n-        return;\n-      }\n-\n-      // 로그인 성공\n-      const accessToken = `staff_${staff.id}_${Date.now()}`;\n-      login(userId, accessToken);\n-      toast.success(\"로그인되었습니다.\");\n-      window.location.href = '/cms/dashboard';\n-\n-    } catch (error) {\n-      console.error('로그인 처리 중 오류:', error);\n-      toast.error(\"로그인 처리 중 오류가 발생했습니다.\", {\n-        autoClose: 5000,\n-        hideProgressBar: false,\n-        closeOnClick: true,\n-        pauseOnHover: true,\n-      });\n-    }\n-\n-    setIsLoading(false);\n-  };\n-\n-  return (\n-    <Container className=\"cms-layout\">\n-      <LoginFormContainer>\n-        <LogoContainer>\n-          <Logo src=\"/logo192.png\" alt=\"Lavida Logo\" />\n-        </LogoContainer>\n-        \n-        <FormTitle>로그인</FormTitle>\n-        \n-        <FormWrapper>\n-          <div>\n-            <AppIdTextField\n-              value={userId}\n-              onChange={(e) => setUserId(e.target.value)}\n-              showValidationMessage={false}\n-              errorMessage={idError || undefined}\n-            />\n-          </div>\n-          \n-          <div>\n-            <AppPwdTextField\n-              value={password}\n-              onChange={(e) => setPassword(e.target.value)}\n-              fieldType={PwdFieldType.PASSWORD}\n-              showValidationMessage={false}\n-              errorMessage={pwdError || undefined}\n-            />\n-          </div>\n-        </FormWrapper>\n-        \n-        <ButtonWrapper>\n-          <PrimaryButton\n-            onClick={handleLogin}\n-            disabled={isLoading}\n-          >\n-            {isLoading ? \"로그인 중...\" : \"로그인\"}\n-          </PrimaryButton>\n-        </ButtonWrapper>\n-        \n-        <HelpText>\n-          시스템 계정이 없다면, 관리자에게 문의 바랍니다.\n-        </HelpText>\n-      </LoginFormContainer>\n-    </Container>\n-  );\n-};\n-\n-export default CMSLogin;\n-import React, { useState, useEffect } from 'react';\n-import styled from 'styled-components';\n-import { toast } from 'react-toastify';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import { FormTitle } from '../../../customComponents/FormTitle';\n-import { AppIdTextField } from '../../../customComponents/AppIdTextField';\n-import { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n-import { useAdminAuth } from '../../../context/AdminAuthContext';\n-import PrimaryButton from '../../../components/PrimaryButton';\n-import { dbManager } from '../../../utils/indexedDB';\n-\n-const Container = styled.div`\n-  display: flex;\n-  justify-content: center;\n-  align-items: center;\n-  min-height: 100vh;\n-  background-color: ${AppColors.background};\n-  padding: 20px;\n-`;\n-\n-const LoginFormContainer = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  align-items: flex-start;\n-  width: 100%;\n-  max-width: 400px;\n-  gap: 24px;\n-`;\n-\n-const LogoContainer = styled.div`\n-  display: flex;\n-  justify-content: center;\n-  width: 100%;\n-  margin-bottom: 16px;\n-`;\n-\n-const Logo = styled.img`\n-  width: 120px;\n-  height: auto;\n-`;\n-\n-const FormWrapper = styled.div`\n-  width: 100%;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 16px;\n-`;\n-\n-const ButtonWrapper = styled.div`\n-  width: 100%;\n-  margin-top: 8px;\n-`;\n-\n-const HelpText = styled.p`\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onInput2};\n-  text-align: center;\n-  line-height: 1.5;\n-  margin: 0;\n-`;\n-\n-const CMSLogin: React.FC = () => {\n-  const [userId, setUserId] = useState('');\n-  const [password, setPassword] = useState('');\n-  const [idError, setIdError] = useState<string | null>(null);\n-  const [pwdError, setPwdError] = useState<string | null>(null);\n-  const [isLoading, setIsLoading] = useState(false);\n-\n-  const { login, isLoggedIn, ready } = useAdminAuth();\n-\n-  useEffect(() => {\n-    // Context가 완전히 초기화되고, 이미 로그인되어 있고, 현재 로그인 시도 중이 아닐 때만 리다이렉트\n-    if (ready && isLoggedIn && !isLoading) {\n-      console.log('이미 로그인되어 있음, CMS 페이지로 이동');\n-      window.location.href = '/cms/dashboard';\n-    }\n-  }, [ready, isLoggedIn, isLoading]);\n-\n-  const handleLogin = async () => {\n-    if (isLoading) return; // 이미 로딩 중이면 중복 실행 방지\n-\n-    setIdError(null);\n-    setPwdError(null);\n-\n-    let hasError = false;\n-\n-    if (!userId) {\n-      setIdError(\"아이디를 입력해주세요.\");\n-      hasError = true;\n-    }\n-\n-    if (!password) {\n-      setPwdError(\"비밀번호를 입력해주세요.\");\n-      hasError = true;\n-    }\n-\n-    if (hasError) return;\n-\n-    setIsLoading(true);\n-\n-    try {\n-      // 데이터베이스에서 직원 정보 조회\n-      const staff = await dbManager.getStaffByLoginId(userId);\n-      \n-      if (!staff) {\n-        toast.error(\"존재하지 않는 계정입니다.\", {\n-          autoClose: 5000,\n-          hideProgressBar: false,\n-          closeOnClick: true,\n-          pauseOnHover: true,\n-        });\n-        setIsLoading(false);\n-        return;\n-      }\n-\n-      // 비밀번호 확인\n-      if (staff.password !== password) {\n-        toast.error(\"비밀번호가 일치하지 않습니다.\", {\n-          autoClose: 5000,\n-          hideProgressBar: false,\n-          closeOnClick: true,\n-          pauseOnHover: true,\n-        });\n-        setIsLoading(false);\n-        return;\n-      }\n-\n-      // 계정 활성 상태 확인\n-      if (!staff.isActive) {\n-        toast.error(\"비활성화된 계정입니다. 관리자에게 문의하세요.\", {\n-          autoClose: 5000,\n-          hideProgressBar: false,\n-          closeOnClick: true,\n-          pauseOnHover: true,\n-        });\n-        setIsLoading(false);\n-        return;\n-      }\n-\n-      // 권한 확인 (MASTER, EDITOR, VIEWER 모두 로그인 허용)\n-      if (!['MASTER', 'EDITOR', 'VIEWER'].includes(staff.permission)) {\n-        toast.error(\"CMS 접근 권한이 없습니다.\", {\n-          autoClose: 5000,\n-          hideProgressBar: false,\n-          closeOnClick: true,\n-          pauseOnHover: true,\n-        });\n-        setIsLoading(false);\n-        return;\n-      }\n-\n-      // 로그인 성공\n-      const accessToken = `staff_${staff.id}_${Date.now()}`;\n-      login(userId, accessToken);\n-      toast.success(\"로그인되었습니다.\");\n-      window.location.href = '/cms/dashboard';\n-\n-    } catch (error) {\n-      console.error('로그인 처리 중 오류:', error);\n-      toast.error(\"로그인 처리 중 오류가 발생했습니다.\", {\n-        autoClose: 5000,\n-        hideProgressBar: false,\n-        closeOnClick: true,\n-        pauseOnHover: true,\n-      });\n-    }\n-\n-    setIsLoading(false);\n-  };\n-\n-  return (\n-    <Container className=\"cms-layout\">\n-      <LoginFormContainer>\n-        <LogoContainer>\n-          <Logo src=\"/logo.svg\" alt=\"Lavida Logo\" />\n-        </LogoContainer>\n-        \n-        <FormTitle>로그인</FormTitle>\n-        \n-        <FormWrapper>\n-          <div>\n-            <AppIdTextField\n-              value={userId}\n-              onChange={(e) => setUserId(e.target.value)}\n-              showValidationMessage={false}\n-              errorMessage={idError || undefined}\n-            />\n-          </div>\n-          \n-          <div>\n-            <AppPwdTextField\n-              value={password}\n-              onChange={(e) => setPassword(e.target.value)}\n-              fieldType={PwdFieldType.PASSWORD}\n-              showValidationMessage={false}\n-              errorMessage={pwdError || undefined}\n-            />\n-          </div>\n-        </FormWrapper>\n-        \n-        <ButtonWrapper>\n-          <PrimaryButton\n-            onClick={handleLogin}\n-            disabled={isLoading}\n-          >\n-            {isLoading ? \"로그인 중...\" : \"로그인\"}\n-          </PrimaryButton>\n-        </ButtonWrapper>\n-        \n-        <HelpText>\n-          시스템 계정이 없다면, 관리자에게 문의 바랍니다.\n-        </HelpText>\n-      </LoginFormContainer>\n-    </Container>\n-  );\n-};\n-\n-export default CMSLogin;\n"
                },
                {
                    "date": 1761650177346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -246,9 +246,9 @@\n   return (\n     <Container className=\"cms-layout\">\n       <LoginFormContainer>\n         <LogoContainer>\n-          <Logo src=\"/logo192.png\" alt=\"Lavida Logo\" />\n+          <Logo src={`${process.env.PUBLIC_URL}/logo192.png`} alt=\"Lavida Logo\" />\n         </LogoContainer>\n         \n         <FormTitle>로그인</FormTitle>\n         \n"
                },
                {
                    "date": 1761650403299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n import styled from 'styled-components';\n import { toast } from 'react-toastify';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n@@ -60,8 +61,9 @@\n   margin: 0;\n `;\n \n const CMSLogin: React.FC = () => {\n+  const navigate = useNavigate();\n   const [userId, setUserId] = useState('');\n   const [password, setPassword] = useState('');\n   const [idError, setIdError] = useState<string | null>(null);\n   const [pwdError, setPwdError] = useState<string | null>(null);\n@@ -73,11 +75,11 @@\n   useEffect(() => {\n     // Context가 완전히 초기화되고, 이미 로그인되어 있고, 현재 로그인 시도 중이 아닐 때만 리다이렉트\n     if (ready && isLoggedIn && !isLoading) {\n       console.log('이미 로그인되어 있음, CMS 페이지로 이동');\n-      window.location.href = '/cms/member/search';\n+      navigate('/cms/member/search');\n     }\n-  }, [ready, isLoggedIn, isLoading]);\n+  }, [ready, isLoggedIn, isLoading, navigate]);\n \n   useEffect(() => {\n     // 시스템 상태 확인\n     const checkSystemStatus = async () => {\n@@ -227,9 +229,9 @@\n       // 로그인 성공\n       const accessToken = `staff_${staff.id}_${Date.now()}`;\n       login(userId, accessToken);\n       toast.success(\"로그인되었습니다.\");\n-      window.location.href = '/cms/member/search';\n+      navigate('/cms/member/search');\n \n     } catch (error) {\n       console.error('로그인 처리 중 오류:', error);\n       toast.error(\"로그인 처리 중 오류가 발생했습니다.\", {\n"
                },
                {
                    "date": 1761907538671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,8 @@\n   const [password, setPassword] = useState('');\n   const [idError, setIdError] = useState<string | null>(null);\n   const [pwdError, setPwdError] = useState<string | null>(null);\n   const [isLoading, setIsLoading] = useState(false);\n-  const [systemStatus, setSystemStatus] = useState<'checking' | 'ready' | 'initializing'>('checking');\n \n   const { login, isLoggedIn, ready } = useAdminAuth();\n \n   useEffect(() => {\n@@ -79,81 +78,8 @@\n       navigate('/cms/member/search');\n     }\n   }, [ready, isLoggedIn, isLoading, navigate]);\n \n-  useEffect(() => {\n-    // 시스템 상태 확인\n-    const checkSystemStatus = async () => {\n-      try {\n-        setSystemStatus('checking');\n-        \n-        // IndexedDB 연결 대기\n-        let dbReady = false;\n-        let attempts = 0;\n-        const maxAttempts = 15;\n-        \n-        while (!dbReady && attempts < maxAttempts) {\n-          try {\n-            await dbManager.getAllBranches();\n-            dbReady = true;\n-          } catch (error) {\n-            attempts++;\n-            console.log(`🔄 시스템 상태 확인 중... (${attempts}/${maxAttempts})`);\n-            await new Promise(resolve => setTimeout(resolve, 500));\n-          }\n-        }\n-        \n-        if (!dbReady) {\n-          console.warn('⚠️ IndexedDB 연결 시간 초과, 계속 진행');\n-        }\n-        \n-        // 시스템 관리자 존재 여부 확인\n-        const systemAdmin = await dbManager.getStaffByLoginId('system_admin');\n-        \n-        if (systemAdmin) {\n-          console.log('✅ 시스템 준비 완료');\n-          setSystemStatus('ready');\n-        } else {\n-          console.log('⏳ 시스템 관리자 생성 중...');\n-          setSystemStatus('initializing');\n-          \n-          // 시스템 관리자가 생성될 때까지 대기\n-          await waitForSystemAdmin();\n-        }\n-      } catch (error) {\n-        console.error('시스템 상태 확인 중 오류:', error);\n-        setSystemStatus('ready'); // 오류 시에도 계속 진행\n-      }\n-    };\n-    \n-    checkSystemStatus();\n-  }, []);\n-\n-  const waitForSystemAdmin = async () => {\n-    let attempts = 0;\n-    const maxAttempts = 30; // 15초까지 대기\n-    \n-    while (attempts < maxAttempts) {\n-      try {\n-        const systemAdmin = await dbManager.getStaffByLoginId('system_admin');\n-        if (systemAdmin) {\n-          console.log('✅ 시스템 관리자 생성 완료');\n-          setSystemStatus('ready');\n-          return;\n-        }\n-        \n-        attempts++;\n-        await new Promise(resolve => setTimeout(resolve, 500));\n-      } catch (error) {\n-        attempts++;\n-        await new Promise(resolve => setTimeout(resolve, 500));\n-      }\n-    }\n-    \n-    console.log('⏰ 시스템 관리자 생성 대기 시간 초과, 계속 진행');\n-    setSystemStatus('ready');\n-  };\n-\n   const handleLogin = async () => {\n     if (isLoading) return; // 이미 로딩 중이면 중복 실행 방지\n \n     setIdError(null);\n@@ -253,57 +179,41 @@\n         </LogoContainer>\n         \n         <FormTitle>로그인</FormTitle>\n         \n-        {systemStatus === 'checking' && (\n-          <HelpText>\n-            🔄 시스템 상태를 확인하고 있습니다...\n-          </HelpText>\n-        )}\n+        <FormWrapper>\n+          <div>\n+            <AppIdTextField\n+              value={userId}\n+              onChange={(e) => setUserId(e.target.value)}\n+              showValidationMessage={false}\n+              errorMessage={idError || undefined}\n+            />\n+          </div>\n+          \n+          <div>\n+            <AppPwdTextField\n+              value={password}\n+              onChange={(e) => setPassword(e.target.value)}\n+              fieldType={PwdFieldType.PASSWORD}\n+              showValidationMessage={false}\n+              errorMessage={pwdError || undefined}\n+            />\n+          </div>\n+        </FormWrapper>\n         \n-        {systemStatus === 'initializing' && (\n-          <HelpText>\n-            ⏳ 시스템을 초기화하고 있습니다. 잠시만 기다려주세요...\n-          </HelpText>\n-        )}\n+        <ButtonWrapper>\n+          <PrimaryButton\n+            onClick={handleLogin}\n+            disabled={isLoading}\n+          >\n+            {isLoading ? \"로그인 중...\" : \"로그인\"}\n+          </PrimaryButton>\n+        </ButtonWrapper>\n         \n-        {systemStatus === 'ready' && (\n-          <>\n-            <FormWrapper>\n-              <div>\n-                <AppIdTextField\n-                  value={userId}\n-                  onChange={(e) => setUserId(e.target.value)}\n-                  showValidationMessage={false}\n-                  errorMessage={idError || undefined}\n-                />\n-              </div>\n-              \n-              <div>\n-                <AppPwdTextField\n-                  value={password}\n-                  onChange={(e) => setPassword(e.target.value)}\n-                  fieldType={PwdFieldType.PASSWORD}\n-                  showValidationMessage={false}\n-                  errorMessage={pwdError || undefined}\n-                />\n-              </div>\n-            </FormWrapper>\n-            \n-            <ButtonWrapper>\n-              <PrimaryButton\n-                onClick={handleLogin}\n-                disabled={isLoading}\n-              >\n-                {isLoading ? \"로그인 중...\" : \"로그인\"}\n-              </PrimaryButton>\n-            </ButtonWrapper>\n-            \n-            <HelpText>\n-              시스템 계정이 없다면, 관리자에게 문의 바랍니다.\n-            </HelpText>\n-          </>\n-        )}\n+        <HelpText>\n+          시스템 계정이 없다면, 관리자에게 문의 바랍니다.\n+        </HelpText>\n       </LoginFormContainer>\n     </Container>\n   );\n };\n"
                },
                {
                    "date": 1761907659822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,8 +170,14 @@\n \n     setIsLoading(false);\n   };\n \n+  const handleKeyPress = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter') {\n+      handleLogin();\n+    }\n+  };\n+\n   return (\n     <Container className=\"cms-layout\">\n       <LoginFormContainer>\n         <LogoContainer>\n@@ -179,9 +185,9 @@\n         </LogoContainer>\n         \n         <FormTitle>로그인</FormTitle>\n         \n-        <FormWrapper>\n+        <FormWrapper onKeyDown={handleKeyPress}>\n           <div>\n             <AppIdTextField\n               value={userId}\n               onChange={(e) => setUserId(e.target.value)}\n"
                }
            ],
            "date": 1757827333310,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { toast } from 'react-toastify';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\nimport { FormTitle } from '../../../customComponents/FormTitle';\nimport { AppIdTextField } from '../../../customComponents/AppIdTextField';\nimport { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\nimport { useAdminAuth } from '../../../context/AdminAuthContext';\nimport PrimaryButton from '../../../components/PrimaryButton';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: ${AppColors.background};\n  padding: 20px;\n`;\n\nconst LoginFormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  width: 100%;\n  max-width: 400px;\n  gap: 24px;\n`;\n\nconst LogoContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  margin-bottom: 16px;\n`;\n\nconst Logo = styled.img`\n  width: 120px;\n  height: auto;\n`;\n\nconst FormWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ButtonWrapper = styled.div`\n  width: 100%;\n  margin-top: 8px;\n`;\n\nconst HelpText = styled.p`\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onInput2};\n  text-align: center;\n  line-height: 1.5;\n  margin: 0;\n`;\n\nconst CMSLogin: React.FC = () => {\n  const [userId, setUserId] = useState('');\n  const [password, setPassword] = useState('');\n  const [idError, setIdError] = useState<string | null>(null);\n  const [pwdError, setPwdError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { login, isLoggedIn, ready } = useAdminAuth();\n\n  useEffect(() => {\n    // Context가 완전히 초기화되고, 이미 로그인되어 있고, 현재 로그인 시도 중이 아닐 때만 리다이렉트\n    if (ready && isLoggedIn && !isLoading) {\n      console.log('이미 로그인되어 있음, CMS 페이지로 이동');\n      window.location.href = '/cms/admin';\n    }\n  }, [ready, isLoggedIn, isLoading]);\n\n  const userIdRegex = /^(?=.*[A-Za-z])(?=.*[0-9])[A-Za-z0-9]{6,20}$/;\n  const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?~^<>,.&+=])[A-Za-z\\d$@$!%*#?~^<>,.&+=]{8,}$/;\n\n  const handleLogin = async () => {\n    if (isLoading) return; // 이미 로딩 중이면 중복 실행 방지\n\n    setIdError(null);\n    setPwdError(null);\n\n    let hasError = false;\n\n    if (!userId) {\n      setIdError(\"아이디를 입력해주세요.\");\n      hasError = true;\n    } else if (!userIdRegex.test(userId)) {\n      setIdError(\"아이디는 영문과 숫자를 모두 포함하여 6~20자로 입력해주세요.\");\n      hasError = true;\n    }\n\n    if (!password) {\n      setPwdError(\"비밀번호를 입력해주세요.\");\n      hasError = true;\n    } else if (!passwordRegex.test(password)) {\n      setPwdError(\"비밀번호는 영문, 숫자, 특수문자를 모두 포함하여 8자 이상 입력해주세요.\");\n      hasError = true;\n    }\n\n    if (hasError) return;\n\n    setIsLoading(true);\n\n    // 더미 로그인 체크\n    if (userId === 'lavida01' && password === 'a!111111') {\n      // 성공\n      const dummyToken = 'dummy_access_token';\n      login(userId, dummyToken);\n      toast.success(\"로그인되었습니다.\");\n      window.location.href = '/cms/admin';\n    } else {\n      // 실패\n      toast.error(\"아이디 또는 비밀번호가 일치하지 않습니다.\", {\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n      });\n    }\n\n    setIsLoading(false);\n  };\n\n  return (\n    <Container className=\"cms-layout\">\n      <LoginFormContainer>\n        <LogoContainer>\n          <Logo src=\"/logo.svg\" alt=\"BidSpace Logo\" />\n        </LogoContainer>\n        \n        <FormTitle>로그인</FormTitle>\n        \n        <FormWrapper>\n          <div>\n            <AppIdTextField\n              value={userId}\n              onChange={(e) => setUserId(e.target.value)}\n              showValidationMessage={false}\n              errorMessage={idError || undefined}\n            />\n          </div>\n          \n          <div>\n            <AppPwdTextField\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              fieldType={PwdFieldType.PASSWORD}\n              showValidationMessage={false}\n              errorMessage={pwdError || undefined}\n            />\n          </div>\n        </FormWrapper>\n        \n        <ButtonWrapper>\n          <PrimaryButton\n            onClick={handleLogin}\n            disabled={isLoading}\n          >\n            {isLoading ? \"로그인 중...\" : \"로그인\"}\n          </PrimaryButton>\n        </ButtonWrapper>\n        \n        <HelpText>\n          시스템 계정이 없다면, 관리자에게 문의 바랍니다.\n        </HelpText>\n      </LoginFormContainer>\n    </Container>\n  );\n};\n\nexport default CMSLogin;\n"
        }
    ]
}