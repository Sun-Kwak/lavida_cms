{
    "sourceFile": "src/pages/CMS/Reservation/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 35,
            "patches": [
                {
                    "date": 1760152571922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760153067467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,21 +81,22 @@\n   // 현재 선택된 메뉴 확인\n   const getMenuType = () => {\n     const path = location.pathname;\n     if (path.includes('/program/')) return 'program';\n-    if (path.includes('/new')) return 'new';\n-    if (path.includes('/timetable')) return 'timetable';\n-    if (path.includes('/batch')) return 'batch';\n-    if (path.includes('/waiting')) return 'waiting';\n-    if (path.includes('/auto-remind')) return 'auto-remind';\n-    return 'unknown';\n+    if (path.includes('/new') || path.endsWith('/new')) return 'new';\n+    if (path.includes('/timetable') || path.endsWith('/timetable')) return 'timetable';\n+    if (path.includes('/batch') || path.endsWith('/batch')) return 'batch';\n+    if (path.includes('/waiting') || path.endsWith('/waiting')) return 'waiting';\n+    if (path.includes('/auto-remind') || path.endsWith('/auto-remind')) return 'auto-remind';\n+    if (path === '/cms/reservation' || path === '/cms/reservation/') return 'main';\n+    return 'main';\n   };\n \n   const getPageTitle = () => {\n     const menuType = getMenuType();\n     switch (menuType) {\n       case 'program':\n-        return program ? `${program.name} 예약` : '프로그램 예약';\n+        return program ? `달력 예정 - ${program.name}` : '달력 예정';\n       case 'new':\n         return '신규 예약';\n       case 'timetable':\n         return '시간표 보기';\n@@ -104,42 +105,57 @@\n       case 'waiting':\n         return '대기 관리';\n       case 'auto-remind':\n         return '자동 리마인드';\n+      case 'main':\n+        return '달력 예정';\n       default:\n-        return '예약/스케줄';\n+        return '달력 예정';\n     }\n   };\n \n+  // 기본 메뉴 데이터\n+  // const basicMenus = [\n+  //   { title: '신규 예약', description: '새로운 예약을 등록합니다', path: '/cms/reservation/new' },\n+  //   { title: '시간표 보기', description: '예약 시간표를 확인합니다', path: '/cms/reservation/timetable' },\n+  //   { title: '일괄 예약', description: '여러 예약을 한 번에 등록합니다', path: '/cms/reservation/batch' },\n+  //   { title: '대기 관리', description: '예약 대기자를 관리합니다', path: '/cms/reservation/waiting' },\n+  //   { title: '자동 리마인드', description: '예약 알림을 설정합니다', path: '/cms/reservation/auto-remind' },\n+  // ];\n+\n   // 프로그램 정보 로드\n   useEffect(() => {\n-    const loadProgram = async () => {\n+    const loadData = async () => {\n       if (programId) {\n         try {\n           setLoading(true);\n-          const programs = await dbManager.getAllPrograms();\n-          const foundProgram = programs.find(p => p.id === programId);\n+          const allPrograms = await dbManager.getAllPrograms();\n+          const activePrograms = allPrograms.filter(p => p.isActive);\n+          \n+          const foundProgram = activePrograms.find(p => p.id === programId);\n           setProgram(foundProgram || null);\n         } catch (error) {\n-          console.error('프로그램 정보 로드 실패:', error);\n+          console.error('데이터 로드 실패:', error);\n           setProgram(null);\n         } finally {\n           setLoading(false);\n         }\n       }\n     };\n \n-    loadProgram();\n+    loadData();\n   }, [programId]);\n \n+  const menuType = getMenuType();\n+\n   return (\n     <CMSLayout>\n       <Container>\n         <ContentContainer>\n           <Title>{getPageTitle()}</Title>\n           \n           {/* 프로그램별 예약인 경우 프로그램 정보 표시 */}\n-          {program && (\n+          {program && menuType === 'program' && (\n             <ProgramInfo>\n               <ProgramName>{program.name}</ProgramName>\n               <ProgramDetails>\n                 <DetailItem>\n@@ -155,10 +171,15 @@\n           )}\n           \n           {loading ? (\n             <PlaceholderContent>\n-              프로그램 정보를 불러오는 중...\n+              데이터를 불러오는 중...\n             </PlaceholderContent>\n+          ) : menuType === 'main' ? (\n+            // 메인 화면에서는 단순히 달력 예정 텍스트만 표시\n+            <PlaceholderContent>\n+              달력 예정\n+            </PlaceholderContent>\n           ) : (\n             <PlaceholderContent>\n               {getPageTitle()} 기능이 준비 중입니다.\n               <br />\n"
                },
                {
                    "date": 1760154018703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,18 @@\n-import React, { useState, useEffect } from 'react';\n+import React, { useState, useEffect, useCallback } from 'react';\n import { useParams, useLocation } from 'react-router-dom';\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import CMSLayout from '../../../components/CMSLayout';\n import { dbManager, Program } from '../../../utils/indexedDB';\n+import { \n+  ScheduleCalendar, \n+  type CalendarView, \n+  type ScheduleEvent, \n+  type StaffInfo,\n+  assignStaffColor \n+} from '../../../components/Calendar';\n \n const Container = styled.div`\n   width: 100%;\n `;\n@@ -76,8 +83,15 @@\n   const { programId } = useParams<{ programId: string }>();\n   const location = useLocation();\n   const [program, setProgram] = useState<Program | null>(null);\n   const [loading, setLoading] = useState(false);\n+  \n+  // 달력 관련 상태\n+  const [calendarView, setCalendarView] = useState<CalendarView>('week');\n+  const [currentDate, setCurrentDate] = useState(new Date());\n+  const [staffList, setStaffList] = useState<StaffInfo[]>([]);\n+  const [selectedStaffIds, setSelectedStaffIds] = useState<string[]>([]);\n+  const [events, setEvents] = useState<ScheduleEvent[]>([]);\n \n   // 현재 선택된 메뉴 확인\n   const getMenuType = () => {\n     const path = location.pathname;\n@@ -112,17 +126,73 @@\n         return '달력 예정';\n     }\n   };\n \n-  // 기본 메뉴 데이터\n-  // const basicMenus = [\n-  //   { title: '신규 예약', description: '새로운 예약을 등록합니다', path: '/cms/reservation/new' },\n-  //   { title: '시간표 보기', description: '예약 시간표를 확인합니다', path: '/cms/reservation/timetable' },\n-  //   { title: '일괄 예약', description: '여러 예약을 한 번에 등록합니다', path: '/cms/reservation/batch' },\n-  //   { title: '대기 관리', description: '예약 대기자를 관리합니다', path: '/cms/reservation/waiting' },\n-  //   { title: '자동 리마인드', description: '예약 알림을 설정합니다', path: '/cms/reservation/auto-remind' },\n-  // ];\n+  // 직원 데이터 로드\n+  const loadStaffData = async () => {\n+    try {\n+      const allStaff = await dbManager.getAllStaff();\n+      const activeCoaches = allStaff.filter(staff => \n+        staff.isActive && staff.role === '코치'\n+      );\n+      \n+      const staffInfo: StaffInfo[] = activeCoaches.map((staff, index) => ({\n+        id: staff.id,\n+        name: staff.name,\n+        role: staff.role,\n+        program: staff.program,\n+        isActive: staff.isActive,\n+        color: assignStaffColor(staff.id, index)\n+      }));\n+      \n+      setStaffList(staffInfo);\n+      \n+      // 기본적으로 모든 코치 선택\n+      setSelectedStaffIds(staffInfo.map(staff => staff.id));\n+    } catch (error) {\n+      console.error('직원 데이터 로드 실패:', error);\n+    }\n+  };\n \n+  // 샘플 이벤트 생성 (실제로는 DB에서 로드)\n+  const generateSampleEvents = useCallback((): ScheduleEvent[] => {\n+    const sampleEvents: ScheduleEvent[] = [];\n+    const today = new Date();\n+    \n+    // 이번 주 월요일부터 금요일까지 샘플 데이터 생성\n+    for (let day = 0; day < 7; day++) {\n+      const eventDate = new Date(today);\n+      eventDate.setDate(today.getDate() - today.getDay() + day + 1); // 월요일부터\n+      \n+      staffList.forEach((staff, staffIndex) => {\n+        // 각 직원당 하루에 2-3개 이벤트\n+        for (let eventIndex = 0; eventIndex < Math.floor(Math.random() * 3) + 1; eventIndex++) {\n+          const startHour = 9 + (eventIndex * 3) + Math.floor(Math.random() * 2);\n+          const startTime = new Date(eventDate);\n+          startTime.setHours(startHour, 0, 0, 0);\n+          \n+          const endTime = new Date(startTime);\n+          endTime.setHours(startHour + 1, 0, 0, 0);\n+          \n+          sampleEvents.push({\n+            id: `event-${day}-${staffIndex}-${eventIndex}`,\n+            title: `${staff.program || '개인 레슨'}`,\n+            startTime,\n+            endTime,\n+            staffId: staff.id,\n+            staffName: staff.name,\n+            programName: staff.program,\n+            memberName: `회원${eventIndex + 1}`,\n+            type: 'class',\n+            color: staff.color\n+          });\n+        }\n+      });\n+    }\n+    \n+    return sampleEvents;\n+  }, [staffList]);\n+\n   // 프로그램 정보 로드\n   useEffect(() => {\n     const loadData = async () => {\n       if (programId) {\n@@ -144,8 +214,31 @@\n \n     loadData();\n   }, [programId]);\n \n+  // 직원 데이터 로드\n+  useEffect(() => {\n+    loadStaffData();\n+  }, []);\n+\n+  // 직원 목록이 로드된 후 샘플 이벤트 생성\n+  useEffect(() => {\n+    if (staffList.length > 0) {\n+      setEvents(generateSampleEvents());\n+    }\n+  }, [staffList, generateSampleEvents]);\n+\n+  // 이벤트 핸들러들\n+  const handleEventClick = (event: ScheduleEvent) => {\n+    console.log('이벤트 클릭:', event);\n+    // 여기서 이벤트 상세 보기 모달 등을 열 수 있습니다\n+  };\n+\n+  const handleEventCreate = (startTime: Date, endTime: Date, staffId?: string) => {\n+    console.log('새 이벤트 생성:', { startTime, endTime, staffId });\n+    // 여기서 새 이벤트 생성 모달 등을 열 수 있습니다\n+  };\n+\n   const menuType = getMenuType();\n \n   return (\n     <CMSLayout>\n@@ -173,13 +266,22 @@\n           {loading ? (\n             <PlaceholderContent>\n               데이터를 불러오는 중...\n             </PlaceholderContent>\n-          ) : menuType === 'main' ? (\n-            // 메인 화면에서는 단순히 달력 예정 텍스트만 표시\n-            <PlaceholderContent>\n-              달력 예정\n-            </PlaceholderContent>\n+          ) : menuType === 'main' || menuType === 'program' ? (\n+            // 메인 화면이나 프로그램별 예약에서는 달력 컴포넌트 표시\n+            <ScheduleCalendar\n+              view={calendarView}\n+              currentDate={currentDate}\n+              events={events}\n+              staffList={staffList}\n+              selectedStaffIds={selectedStaffIds}\n+              onViewChange={setCalendarView}\n+              onDateChange={setCurrentDate}\n+              onStaffFilter={setSelectedStaffIds}\n+              onEventClick={handleEventClick}\n+              onEventCreate={handleEventCreate}\n+            />\n           ) : (\n             <PlaceholderContent>\n               {getPageTitle()} 기능이 준비 중입니다.\n               <br />\n"
                },
                {
                    "date": 1760154404928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import CMSLayout from '../../../components/CMSLayout';\n-import { dbManager, Program } from '../../../utils/indexedDB';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import { dbManager, type Branch } from '../../../utils/indexedDB';\n import { \n   ScheduleCalendar, \n   type CalendarView, \n   type ScheduleEvent, \n@@ -23,54 +24,26 @@\n   border-radius: 8px;\n   border: 1px solid ${AppColors.borderLight};\n `;\n \n-const Title = styled.h2`\n-  font-size: ${AppTextStyles.title1.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.onSurface};\n+const FilterContainer = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 16px;\n   margin-bottom: 24px;\n-`;\n-\n-const ProgramInfo = styled.div`\n   padding: 16px;\n   background-color: ${AppColors.background};\n   border-radius: 8px;\n   border: 1px solid ${AppColors.borderLight};\n-  margin-bottom: 24px;\n `;\n \n-const ProgramName = styled.h3`\n-  font-size: ${AppTextStyles.title2.fontSize};\n+const FilterLabel = styled.label`\n+  font-size: ${AppTextStyles.body1.fontSize};\n   font-weight: 500;\n-  color: ${AppColors.primary};\n-  margin-bottom: 8px;\n-`;\n-\n-const ProgramDetails = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  gap: 4px;\n-`;\n-\n-const DetailItem = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 8px;\n-  font-size: ${AppTextStyles.body2.fontSize};\n   color: ${AppColors.onSurface};\n-`;\n-\n-const DetailLabel = styled.span`\n-  font-weight: 500;\n   min-width: 80px;\n-  color: ${AppColors.onSurface}80;\n `;\n \n-const DetailValue = styled.span`\n-  color: ${AppColors.onSurface};\n-`;\n-\n const PlaceholderContent = styled.div`\n   padding: 48px;\n   text-align: center;\n   color: ${AppColors.onSurface}60;\n@@ -81,11 +54,14 @@\n \n const ReservationPage: React.FC = () => {\n   const { programId } = useParams<{ programId: string }>();\n   const location = useLocation();\n-  const [program, setProgram] = useState<Program | null>(null);\n   const [loading, setLoading] = useState(false);\n   \n+  // 지점 관련 상태\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [selectedBranchId, setSelectedBranchId] = useState<string>('');\n+  \n   // 달력 관련 상태\n   const [calendarView, setCalendarView] = useState<CalendarView>('week');\n   const [currentDate, setCurrentDate] = useState(new Date());\n   const [staffList, setStaffList] = useState<StaffInfo[]>([]);\n@@ -104,38 +80,47 @@\n     if (path === '/cms/reservation' || path === '/cms/reservation/') return 'main';\n     return 'main';\n   };\n \n-  const getPageTitle = () => {\n-    const menuType = getMenuType();\n-    switch (menuType) {\n-      case 'program':\n-        return program ? `달력 예정 - ${program.name}` : '달력 예정';\n-      case 'new':\n-        return '신규 예약';\n-      case 'timetable':\n-        return '시간표 보기';\n-      case 'batch':\n-        return '일괄 예약';\n-      case 'waiting':\n-        return '대기 관리';\n-      case 'auto-remind':\n-        return '자동 리마인드';\n-      case 'main':\n-        return '달력 예정';\n-      default:\n-        return '달력 예정';\n+  // 지점 데이터 로드\n+  const loadBranchData = async () => {\n+    try {\n+      const branchData = await dbManager.getAllBranches();\n+      setBranches(branchData);\n+      \n+      // 기본적으로 첫 번째 지점 선택 (전체가 아닌 첫 번째 실제 지점)\n+      const activeBranches = branchData.filter(branch => branch.name !== '전체');\n+      if (activeBranches.length > 0) {\n+        setSelectedBranchId(activeBranches[0].id);\n+      }\n+    } catch (error) {\n+      console.error('지점 데이터 로드 실패:', error);\n     }\n   };\n \n+  // 지점 드랍다운 옵션 생성\n+  const getBranchOptions = () => {\n+    const activeBranches = branches.filter(branch => branch.name !== '전체');\n+    return activeBranches.map(branch => ({\n+      value: branch.id,\n+      label: branch.name,\n+      description: branch.address\n+    }));\n+  };\n+\n   // 직원 데이터 로드\n-  const loadStaffData = async () => {\n+  const loadStaffData = useCallback(async () => {\n     try {\n       const allStaff = await dbManager.getAllStaff();\n-      const activeCoaches = allStaff.filter(staff => \n+      let activeCoaches = allStaff.filter(staff => \n         staff.isActive && staff.role === '코치'\n       );\n       \n+      // 지점이 선택된 경우 해당 지점의 코치만 필터링\n+      if (selectedBranchId) {\n+        activeCoaches = activeCoaches.filter(staff => staff.branchId === selectedBranchId);\n+      }\n+      \n       const staffInfo: StaffInfo[] = activeCoaches.map((staff, index) => ({\n         id: staff.id,\n         name: staff.name,\n         role: staff.role,\n@@ -150,9 +135,9 @@\n       setSelectedStaffIds(staffInfo.map(staff => staff.id));\n     } catch (error) {\n       console.error('직원 데이터 로드 실패:', error);\n     }\n-  };\n+  }, [selectedBranchId]);\n \n   // 샘플 이벤트 생성 (실제로는 DB에서 로드)\n   const generateSampleEvents = useCallback((): ScheduleEvent[] => {\n     const sampleEvents: ScheduleEvent[] = [];\n@@ -197,16 +182,11 @@\n     const loadData = async () => {\n       if (programId) {\n         try {\n           setLoading(true);\n-          const allPrograms = await dbManager.getAllPrograms();\n-          const activePrograms = allPrograms.filter(p => p.isActive);\n-          \n-          const foundProgram = activePrograms.find(p => p.id === programId);\n-          setProgram(foundProgram || null);\n+          // 실제로는 이 곳에서 필요한 데이터를 로드할 수 있습니다\n         } catch (error) {\n           console.error('데이터 로드 실패:', error);\n-          setProgram(null);\n         } finally {\n           setLoading(false);\n         }\n       }\n@@ -214,13 +194,20 @@\n \n     loadData();\n   }, [programId]);\n \n-  // 직원 데이터 로드\n+  // 지점 데이터 로드\n   useEffect(() => {\n-    loadStaffData();\n+    loadBranchData();\n   }, []);\n \n+  // 직원 데이터 로드 (지점 선택이 변경될 때마다)\n+  useEffect(() => {\n+    if (selectedBranchId) {\n+      loadStaffData();\n+    }\n+  }, [selectedBranchId, loadStaffData]);\n+\n   // 직원 목록이 로드된 후 샘플 이벤트 생성\n   useEffect(() => {\n     if (staffList.length > 0) {\n       setEvents(generateSampleEvents());\n@@ -243,48 +230,46 @@\n   return (\n     <CMSLayout>\n       <Container>\n         <ContentContainer>\n-          <Title>{getPageTitle()}</Title>\n+          {/* 지점 필터 */}\n+          <FilterContainer>\n+            <FilterLabel>지점 선택:</FilterLabel>\n+            <CustomDropdown\n+              value={selectedBranchId}\n+              onChange={(value: string) => setSelectedBranchId(value)}\n+              options={getBranchOptions()}\n+              placeholder=\"지점을 선택하세요\"\n+            />\n+          </FilterContainer>\n           \n-          {/* 프로그램별 예약인 경우 프로그램 정보 표시 */}\n-          {program && menuType === 'program' && (\n-            <ProgramInfo>\n-              <ProgramName>{program.name}</ProgramName>\n-              <ProgramDetails>\n-                <DetailItem>\n-                  <DetailLabel>유형:</DetailLabel>\n-                  <DetailValue>{program.type}</DetailValue>\n-                </DetailItem>\n-                <DetailItem>\n-                  <DetailLabel>활성 상태:</DetailLabel>\n-                  <DetailValue>{program.isActive ? '활성' : '비활성'}</DetailValue>\n-                </DetailItem>\n-              </ProgramDetails>\n-            </ProgramInfo>\n-          )}\n-          \n           {loading ? (\n             <PlaceholderContent>\n               데이터를 불러오는 중...\n             </PlaceholderContent>\n           ) : menuType === 'main' || menuType === 'program' ? (\n-            // 메인 화면이나 프로그램별 예약에서는 달력 컴포넌트 표시\n-            <ScheduleCalendar\n-              view={calendarView}\n-              currentDate={currentDate}\n-              events={events}\n-              staffList={staffList}\n-              selectedStaffIds={selectedStaffIds}\n-              onViewChange={setCalendarView}\n-              onDateChange={setCurrentDate}\n-              onStaffFilter={setSelectedStaffIds}\n-              onEventClick={handleEventClick}\n-              onEventCreate={handleEventCreate}\n-            />\n+            // 메인 화면이나 프로그램별 예약에서는 달력 컴포넌트 표시 (지점이 선택된 경우만)\n+            selectedBranchId ? (\n+              <ScheduleCalendar\n+                view={calendarView}\n+                currentDate={currentDate}\n+                events={events}\n+                staffList={staffList}\n+                selectedStaffIds={selectedStaffIds}\n+                onViewChange={setCalendarView}\n+                onDateChange={setCurrentDate}\n+                onStaffFilter={setSelectedStaffIds}\n+                onEventClick={handleEventClick}\n+                onEventCreate={handleEventCreate}\n+              />\n+            ) : (\n+              <PlaceholderContent>\n+                지점을 선택해주세요.\n+              </PlaceholderContent>\n+            )\n           ) : (\n             <PlaceholderContent>\n-              {getPageTitle()} 기능이 준비 중입니다.\n+              예약 관리 기능이 준비 중입니다.\n               <br />\n               <br />\n               이곳에 실제 예약 관리 기능이 구현될 예정입니다.\n             </PlaceholderContent>\n"
                },
                {
                    "date": 1760154456612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,17 +33,24 @@\n   padding: 16px;\n   background-color: ${AppColors.background};\n   border-radius: 8px;\n   border: 1px solid ${AppColors.borderLight};\n+  justify-content: flex-start;\n `;\n \n const FilterLabel = styled.label`\n   font-size: ${AppTextStyles.body1.fontSize};\n   font-weight: 500;\n   color: ${AppColors.onSurface};\n   min-width: 80px;\n+  flex-shrink: 0;\n `;\n \n+const DropdownWrapper = styled.div`\n+  width: 250px;\n+  flex-shrink: 0;\n+`;\n+\n const PlaceholderContent = styled.div`\n   padding: 48px;\n   text-align: center;\n   color: ${AppColors.onSurface}60;\n@@ -233,14 +240,16 @@\n         <ContentContainer>\n           {/* 지점 필터 */}\n           <FilterContainer>\n             <FilterLabel>지점 선택:</FilterLabel>\n-            <CustomDropdown\n-              value={selectedBranchId}\n-              onChange={(value: string) => setSelectedBranchId(value)}\n-              options={getBranchOptions()}\n-              placeholder=\"지점을 선택하세요\"\n-            />\n+            <DropdownWrapper>\n+              <CustomDropdown\n+                value={selectedBranchId}\n+                onChange={(value: string) => setSelectedBranchId(value)}\n+                options={getBranchOptions()}\n+                placeholder=\"지점을 선택하세요\"\n+              />\n+            </DropdownWrapper>\n           </FilterContainer>\n           \n           {loading ? (\n             <PlaceholderContent>\n"
                },
                {
                    "date": 1760154726085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import CMSLayout from '../../../components/CMSLayout';\n import CustomDropdown from '../../../components/CustomDropdown';\n-import { dbManager, type Branch } from '../../../utils/indexedDB';\n+import { dbManager, type Branch, type Program } from '../../../utils/indexedDB';\n import { \n   ScheduleCalendar, \n   type CalendarView, \n   type ScheduleEvent, \n@@ -36,8 +36,16 @@\n   border: 1px solid ${AppColors.borderLight};\n   justify-content: flex-start;\n `;\n \n+const ProgramTitle = styled.h3`\n+  font-size: ${AppTextStyles.title2.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.primary};\n+  margin: 0;\n+  margin-right: 24px;\n+`;\n+\n const FilterLabel = styled.label`\n   font-size: ${AppTextStyles.body1.fontSize};\n   font-weight: 500;\n   color: ${AppColors.onSurface};\n@@ -67,8 +75,11 @@\n   // 지점 관련 상태\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [selectedBranchId, setSelectedBranchId] = useState<string>('');\n   \n+  // 프로그램 관련 상태\n+  const [currentProgram, setCurrentProgram] = useState<Program | null>(null);\n+  \n   // 달력 관련 상태\n   const [calendarView, setCalendarView] = useState<CalendarView>('week');\n   const [currentDate, setCurrentDate] = useState(new Date());\n   const [staffList, setStaffList] = useState<StaffInfo[]>([]);\n@@ -113,8 +124,24 @@\n       description: branch.address\n     }));\n   };\n \n+  // 프로그램 데이터 로드\n+  const loadProgramData = useCallback(async () => {\n+    if (programId) {\n+      try {\n+        const allPrograms = await dbManager.getAllPrograms();\n+        const foundProgram = allPrograms.find(p => p.id === programId);\n+        setCurrentProgram(foundProgram || null);\n+      } catch (error) {\n+        console.error('프로그램 데이터 로드 실패:', error);\n+        setCurrentProgram(null);\n+      }\n+    } else {\n+      setCurrentProgram(null);\n+    }\n+  }, [programId]);\n+\n   // 직원 데이터 로드\n   const loadStaffData = useCallback(async () => {\n     try {\n       const allStaff = await dbManager.getAllStaff();\n@@ -130,9 +157,9 @@\n       const staffInfo: StaffInfo[] = activeCoaches.map((staff, index) => ({\n         id: staff.id,\n         name: staff.name,\n         role: staff.role,\n-        program: staff.program,\n+        program: '', // 프로그램 정보 제거\n         isActive: staff.isActive,\n         color: assignStaffColor(staff.id, index)\n       }));\n       \n@@ -166,14 +193,14 @@\n           endTime.setHours(startHour + 1, 0, 0, 0);\n           \n           sampleEvents.push({\n             id: `event-${day}-${staffIndex}-${eventIndex}`,\n-            title: `${staff.program || '개인 레슨'}`,\n+            title: `개인 레슨`,\n             startTime,\n             endTime,\n             staffId: staff.id,\n             staffName: staff.name,\n-            programName: staff.program,\n+            programName: currentProgram?.name || '개인 레슨',\n             memberName: `회원${eventIndex + 1}`,\n             type: 'class',\n             color: staff.color\n           });\n@@ -181,9 +208,9 @@\n       });\n     }\n     \n     return sampleEvents;\n-  }, [staffList]);\n+  }, [staffList, currentProgram]);\n \n   // 프로그램 정보 로드\n   useEffect(() => {\n     const loadData = async () => {\n@@ -206,8 +233,13 @@\n   useEffect(() => {\n     loadBranchData();\n   }, []);\n \n+  // 프로그램 데이터 로드\n+  useEffect(() => {\n+    loadProgramData();\n+  }, [loadProgramData]);\n+\n   // 직원 데이터 로드 (지점 선택이 변경될 때마다)\n   useEffect(() => {\n     if (selectedBranchId) {\n       loadStaffData();\n@@ -239,8 +271,11 @@\n       <Container>\n         <ContentContainer>\n           {/* 지점 필터 */}\n           <FilterContainer>\n+            {currentProgram && (\n+              <ProgramTitle>{currentProgram.name}</ProgramTitle>\n+            )}\n             <FilterLabel>지점 선택:</FilterLabel>\n             <DropdownWrapper>\n               <CustomDropdown\n                 value={selectedBranchId}\n"
                },
                {
                    "date": 1760157680258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,16 @@\n import { AppTextStyles } from '../../../styles/textStyles';\n import CMSLayout from '../../../components/CMSLayout';\n import CustomDropdown from '../../../components/CustomDropdown';\n import { dbManager, type Branch, type Program } from '../../../utils/indexedDB';\n+import { getCurrentUser } from '../../../utils/authUtils';\n import { \n   ScheduleCalendar, \n+  HolidayModal,\n   type CalendarView, \n   type ScheduleEvent, \n   type StaffInfo,\n+  type HolidaySettings,\n   assignStaffColor \n } from '../../../components/Calendar';\n \n const Container = styled.div`\n@@ -85,8 +88,14 @@\n   const [staffList, setStaffList] = useState<StaffInfo[]>([]);\n   const [selectedStaffIds, setSelectedStaffIds] = useState<string[]>([]);\n   const [events, setEvents] = useState<ScheduleEvent[]>([]);\n \n+  // 휴일설정 모달 관련 상태\n+  const [isHolidayModalOpen, setIsHolidayModalOpen] = useState(false);\n+  const [holidayModalStaffId, setHolidayModalStaffId] = useState<string | undefined>();\n+  const [currentUser, setCurrentUser] = useState<{ id: string; role: 'master' | 'coach' | 'admin' } | undefined>();\n+  const [holidaySettings, setHolidaySettings] = useState<HolidaySettings[]>([]);\n+\n   // 현재 선택된 메뉴 확인\n   const getMenuType = () => {\n     const path = location.pathname;\n     if (path.includes('/program/')) return 'program';\n@@ -171,47 +180,59 @@\n       console.error('직원 데이터 로드 실패:', error);\n     }\n   }, [selectedBranchId]);\n \n-  // 샘플 이벤트 생성 (실제로는 DB에서 로드)\n-  const generateSampleEvents = useCallback((): ScheduleEvent[] => {\n-    const sampleEvents: ScheduleEvent[] = [];\n-    const today = new Date();\n-    \n-    // 이번 주 월요일부터 금요일까지 샘플 데이터 생성\n-    for (let day = 0; day < 7; day++) {\n-      const eventDate = new Date(today);\n-      eventDate.setDate(today.getDate() - today.getDay() + day + 1); // 월요일부터\n+  // 휴일설정 로드\n+  const loadHolidaySettings = useCallback(async () => {\n+    try {\n+      const currentMonth = new Date();\n+      const startDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n+      const endDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n       \n-      staffList.forEach((staff, staffIndex) => {\n-        // 각 직원당 하루에 2-3개 이벤트\n-        for (let eventIndex = 0; eventIndex < Math.floor(Math.random() * 3) + 1; eventIndex++) {\n-          const startHour = 9 + (eventIndex * 3) + Math.floor(Math.random() * 2);\n-          const startTime = new Date(eventDate);\n-          startTime.setHours(startHour, 0, 0, 0);\n-          \n-          const endTime = new Date(startTime);\n-          endTime.setHours(startHour + 1, 0, 0, 0);\n-          \n-          sampleEvents.push({\n-            id: `event-${day}-${staffIndex}-${eventIndex}`,\n-            title: `개인 레슨`,\n-            startTime,\n-            endTime,\n-            staffId: staff.id,\n-            staffName: staff.name,\n-            programName: currentProgram?.name || '개인 레슨',\n-            memberName: `회원${eventIndex + 1}`,\n-            type: 'class',\n-            color: staff.color\n-          });\n-        }\n-      });\n+      const startDateStr = startDate.toISOString().split('T')[0];\n+      const endDateStr = endDate.toISOString().split('T')[0];\n+      \n+      const settings = await dbManager.getHolidaySettingsByDateRange(startDateStr, endDateStr);\n+      setHolidaySettings(settings);\n+    } catch (error) {\n+      console.error('휴일설정 로드 실패:', error);\n     }\n-    \n-    return sampleEvents;\n-  }, [staffList, currentProgram]);\n+  }, []);\n \n+  // 현재 사용자 정보 로드\n+  const loadCurrentUser = useCallback(async () => {\n+    try {\n+      const user = await getCurrentUser();\n+      if (user) {\n+        setCurrentUser(user);\n+      }\n+    } catch (error) {\n+      console.error('현재 사용자 정보 로드 실패:', error);\n+    }\n+  }, []);\n+\n+  // 휴일설정 모달 관련 함수들\n+  const handleHolidaySettings = (staffId?: string) => {\n+    setHolidayModalStaffId(staffId);\n+    setIsHolidayModalOpen(true);\n+  };\n+\n+  const handleHolidayModalClose = () => {\n+    setIsHolidayModalOpen(false);\n+    setHolidayModalStaffId(undefined);\n+  };\n+\n+  const handleHolidaySettingsSave = async (settings: HolidaySettings[]) => {\n+    try {\n+      await dbManager.saveHolidaySettings(settings);\n+      console.log('휴일설정 저장 성공:', settings);\n+      // 휴일설정 새로고침\n+      await loadHolidaySettings();\n+    } catch (error) {\n+      console.error('휴일설정 저장 실패:', error);\n+    }\n+  };\n+\n   // 프로그램 정보 로드\n   useEffect(() => {\n     const loadData = async () => {\n       if (programId) {\n@@ -231,9 +252,11 @@\n \n   // 지점 데이터 로드\n   useEffect(() => {\n     loadBranchData();\n-  }, []);\n+    loadCurrentUser(); // 현재 사용자 정보도 함께 로드\n+    loadHolidaySettings(); // 휴일설정도 함께 로드\n+  }, [loadCurrentUser, loadHolidaySettings]);\n \n   // 프로그램 데이터 로드\n   useEffect(() => {\n     loadProgramData();\n@@ -245,15 +268,54 @@\n       loadStaffData();\n     }\n   }, [selectedBranchId, loadStaffData]);\n \n-  // 직원 목록이 로드된 후 샘플 이벤트 생성\n+  // 휴일설정을 이벤트로 변환하는 함수\n+  const generateHolidayEvents = useCallback((): ScheduleEvent[] => {\n+    const holidayEvents: ScheduleEvent[] = [];\n+    \n+    holidaySettings.forEach(setting => {\n+      if (setting.isHoliday) {\n+        const staff = staffList.find(s => s.id === setting.staffId);\n+        if (staff && selectedStaffIds.includes(staff.id)) {\n+          const date = new Date(setting.date);\n+          const startTime = new Date(date);\n+          startTime.setHours(0, 0, 0, 0);\n+          const endTime = new Date(date);\n+          endTime.setHours(23, 59, 59, 999);\n+          \n+          holidayEvents.push({\n+            id: `holiday-${setting.id}`,\n+            title: '휴일',\n+            startTime,\n+            endTime,\n+            staffId: staff.id,\n+            staffName: staff.name,\n+            type: 'break',\n+            color: '#f87171', // 빨간색으로 휴일 표시\n+            description: `${staff.name} 코치 휴일`\n+          });\n+        }\n+      }\n+    });\n+    \n+    return holidayEvents;\n+  }, [holidaySettings, staffList, selectedStaffIds]);\n+\n+  // 직원 목록이 로드된 후 이벤트 초기화\n   useEffect(() => {\n     if (staffList.length > 0) {\n-      setEvents(generateSampleEvents());\n+      // 휴일설정 기반 이벤트 생성\n+      const holidayEvents = generateHolidayEvents();\n+      setEvents(holidayEvents);\n     }\n-  }, [staffList, generateSampleEvents]);\n+  }, [staffList, generateHolidayEvents]);\n \n+  // 달력 날짜 변경 시 휴일설정 새로고침\n+  useEffect(() => {\n+    loadHolidaySettings();\n+  }, [currentDate, loadHolidaySettings]);\n+\n   // 이벤트 핸들러들\n   const handleEventClick = (event: ScheduleEvent) => {\n     console.log('이벤트 클릭:', event);\n     // 여기서 이벤트 상세 보기 모달 등을 열 수 있습니다\n@@ -303,8 +365,9 @@\n                 onDateChange={setCurrentDate}\n                 onStaffFilter={setSelectedStaffIds}\n                 onEventClick={handleEventClick}\n                 onEventCreate={handleEventCreate}\n+                onHolidaySettings={handleHolidaySettings}\n               />\n             ) : (\n               <PlaceholderContent>\n                 지점을 선택해주세요.\n@@ -319,8 +382,18 @@\n             </PlaceholderContent>\n           )}\n         </ContentContainer>\n       </Container>\n+\n+      {/* 휴일설정 모달 */}\n+      <HolidayModal\n+        isOpen={isHolidayModalOpen}\n+        onClose={handleHolidayModalClose}\n+        staffId={holidayModalStaffId}\n+        staffList={staffList}\n+        currentUser={currentUser}\n+        onSave={handleHolidaySettingsSave}\n+      />\n     </CMSLayout>\n   );\n };\n \n"
                },
                {
                    "date": 1760158255865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,15 @@\n         name: staff.name,\n         role: staff.role,\n         program: '', // 프로그램 정보 제거\n         isActive: staff.isActive,\n-        color: assignStaffColor(staff.id, index)\n+        color: assignStaffColor(staff.id, index),\n+        contractStartDate: staff.contractStartDate,\n+        contractEndDate: staff.contractEndDate || undefined,\n+        workingHours: {\n+          start: 9, // 기본 근무 시간 (필요시 직원별 설정으로 확장 가능)\n+          end: 21\n+        }\n       }));\n       \n       setStaffList(staffInfo);\n       \n@@ -220,16 +226,17 @@\n     setIsHolidayModalOpen(false);\n     setHolidayModalStaffId(undefined);\n   };\n \n-  const handleHolidaySettingsSave = async (settings: HolidaySettings[]) => {\n+  const handleHolidaySettingsSave = async (settings: Omit<HolidaySettings, 'id' | 'createdAt' | 'updatedAt'>[]) => {\n     try {\n       await dbManager.saveHolidaySettings(settings);\n       console.log('휴일설정 저장 성공:', settings);\n       // 휴일설정 새로고침\n       await loadHolidaySettings();\n     } catch (error) {\n       console.error('휴일설정 저장 실패:', error);\n+      throw error; // 에러를 다시 throw하여 HolidayModal에서 처리하도록 함\n     }\n   };\n \n   // 프로그램 정보 로드\n@@ -391,8 +398,9 @@\n         staffId={holidayModalStaffId}\n         staffList={staffList}\n         currentUser={currentUser}\n         onSave={handleHolidaySettingsSave}\n+        existingHolidays={holidaySettings}\n       />\n     </CMSLayout>\n   );\n };\n"
                },
                {
                    "date": 1760158641551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,13 +162,18 @@\n       if (selectedBranchId) {\n         activeCoaches = activeCoaches.filter(staff => staff.branchId === selectedBranchId);\n       }\n       \n+      // 프로그램이 선택된 경우 해당 프로그램을 담당하는 코치만 필터링\n+      if (currentProgram) {\n+        activeCoaches = activeCoaches.filter(staff => staff.program === currentProgram.name);\n+      }\n+      \n       const staffInfo: StaffInfo[] = activeCoaches.map((staff, index) => ({\n         id: staff.id,\n         name: staff.name,\n         role: staff.role,\n-        program: '', // 프로그램 정보 제거\n+        program: staff.program || '', // 담당 프로그램 정보 표시\n         isActive: staff.isActive,\n         color: assignStaffColor(staff.id, index),\n         contractStartDate: staff.contractStartDate,\n         contractEndDate: staff.contractEndDate || undefined,\n@@ -184,9 +189,9 @@\n       setSelectedStaffIds(staffInfo.map(staff => staff.id));\n     } catch (error) {\n       console.error('직원 데이터 로드 실패:', error);\n     }\n-  }, [selectedBranchId]);\n+  }, [selectedBranchId, currentProgram]);\n \n   // 휴일설정 로드\n   const loadHolidaySettings = useCallback(async () => {\n     try {\n@@ -268,14 +273,14 @@\n   useEffect(() => {\n     loadProgramData();\n   }, [loadProgramData]);\n \n-  // 직원 데이터 로드 (지점 선택이 변경될 때마다)\n+  // 직원 데이터 로드 (지점 선택이나 프로그램이 변경될 때마다)\n   useEffect(() => {\n     if (selectedBranchId) {\n       loadStaffData();\n     }\n-  }, [selectedBranchId, loadStaffData]);\n+  }, [selectedBranchId, currentProgram, loadStaffData]);\n \n   // 휴일설정을 이벤트로 변환하는 함수\n   const generateHolidayEvents = useCallback((): ScheduleEvent[] => {\n     const holidayEvents: ScheduleEvent[] = [];\n@@ -358,24 +363,43 @@\n           {loading ? (\n             <PlaceholderContent>\n               데이터를 불러오는 중...\n             </PlaceholderContent>\n-          ) : menuType === 'main' || menuType === 'program' ? (\n-            // 메인 화면이나 프로그램별 예약에서는 달력 컴포넌트 표시 (지점이 선택된 경우만)\n+          ) : menuType === 'main' ? (\n+            // 메인 화면에서는 프로그램 선택 안내 메시지 표시\n+            <PlaceholderContent>\n+              좌측 메뉴에서 프로그램을 선택하여 해당 프로그램의 예약 관리를 시작하세요.\n+            </PlaceholderContent>\n+          ) : menuType === 'program' ? (\n+            // 프로그램별 예약에서는 달력 컴포넌트 표시 (지점이 선택된 경우만)\n             selectedBranchId ? (\n-              <ScheduleCalendar\n-                view={calendarView}\n-                currentDate={currentDate}\n-                events={events}\n-                staffList={staffList}\n-                selectedStaffIds={selectedStaffIds}\n-                onViewChange={setCalendarView}\n-                onDateChange={setCurrentDate}\n-                onStaffFilter={setSelectedStaffIds}\n-                onEventClick={handleEventClick}\n-                onEventCreate={handleEventCreate}\n-                onHolidaySettings={handleHolidaySettings}\n-              />\n+              currentProgram ? (\n+                staffList.length > 0 ? (\n+                  <ScheduleCalendar\n+                    view={calendarView}\n+                    currentDate={currentDate}\n+                    events={events}\n+                    staffList={staffList}\n+                    selectedStaffIds={selectedStaffIds}\n+                    onViewChange={setCalendarView}\n+                    onDateChange={setCurrentDate}\n+                    onStaffFilter={setSelectedStaffIds}\n+                    onEventClick={handleEventClick}\n+                    onEventCreate={handleEventCreate}\n+                    onHolidaySettings={handleHolidaySettings}\n+                  />\n+                ) : (\n+                  <PlaceholderContent>\n+                    선택한 지점에 \"{currentProgram.name}\" 프로그램을 담당하는 코치가 없습니다.\n+                    <br />\n+                    직원 관리에서 코치의 담당 프로그램을 설정해주세요.\n+                  </PlaceholderContent>\n+                )\n+              ) : (\n+                <PlaceholderContent>\n+                  프로그램 정보를 불러오는 중입니다...\n+                </PlaceholderContent>\n+              )\n             ) : (\n               <PlaceholderContent>\n                 지점을 선택해주세요.\n               </PlaceholderContent>\n"
                },
                {
                    "date": 1760160088703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -284,35 +284,51 @@\n   // 휴일설정을 이벤트로 변환하는 함수\n   const generateHolidayEvents = useCallback((): ScheduleEvent[] => {\n     const holidayEvents: ScheduleEvent[] = [];\n     \n-    holidaySettings.forEach(setting => {\n-      if (setting.isHoliday) {\n-        const staff = staffList.find(s => s.id === setting.staffId);\n-        if (staff && selectedStaffIds.includes(staff.id)) {\n-          const date = new Date(setting.date);\n-          const startTime = new Date(date);\n-          startTime.setHours(0, 0, 0, 0);\n-          const endTime = new Date(date);\n-          endTime.setHours(23, 59, 59, 999);\n+    // 각 코치별로 휴일 이벤트 생성\n+    staffList.forEach(staff => {\n+      if (staff.role === '코치' && selectedStaffIds.includes(staff.id)) {\n+        // 현재 월의 모든 날짜에 대해 휴일 여부 확인\n+        const year = currentDate.getFullYear();\n+        const month = currentDate.getMonth();\n+        const lastDay = new Date(year, month + 1, 0).getDate();\n+        \n+        for (let day = 1; day <= lastDay; day++) {\n+          const date = new Date(year, month, day);\n+          const dateStr = date.toISOString().split('T')[0];\n+          const isWeekend = date.getDay() === 0 || date.getDay() === 6;\n           \n-          holidayEvents.push({\n-            id: `holiday-${setting.id}`,\n-            title: '휴일',\n-            startTime,\n-            endTime,\n-            staffId: staff.id,\n-            staffName: staff.name,\n-            type: 'break',\n-            color: '#f87171', // 빨간색으로 휴일 표시\n-            description: `${staff.name} 코치 휴일`\n-          });\n+          // 해당 날짜의 휴일 설정 찾기\n+          const setting = holidaySettings.find(s => s.staffId === staff.id && s.date === dateStr);\n+          \n+          // 휴일 여부 결정: 설정이 있으면 설정값 사용, 없으면 주말 기본값 사용\n+          const isHoliday = setting ? setting.isHoliday : isWeekend;\n+          \n+          if (isHoliday) {\n+            const startTime = new Date(date);\n+            startTime.setHours(0, 0, 0, 0);\n+            const endTime = new Date(date);\n+            endTime.setHours(23, 59, 59, 999);\n+            \n+            holidayEvents.push({\n+              id: `holiday-${staff.id}-${dateStr}`,\n+              title: '휴일',\n+              startTime,\n+              endTime,\n+              staffId: staff.id,\n+              staffName: staff.name,\n+              type: 'break',\n+              color: '#f87171', // 빨간색으로 휴일 표시\n+              description: `${staff.name} 코치 휴일`\n+            });\n+          }\n         }\n       }\n     });\n     \n     return holidayEvents;\n-  }, [holidaySettings, staffList, selectedStaffIds]);\n+  }, [holidaySettings, staffList, selectedStaffIds, currentDate]);\n \n   // 직원 목록이 로드된 후 이벤트 초기화\n   useEffect(() => {\n     if (staffList.length > 0) {\n"
                },
                {
                    "date": 1760160349122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState, useEffect, useCallback } from 'react';\n+import React, { useState, useEffect, useCallback, useMemo } from 'react';\n import { useParams, useLocation } from 'react-router-dom';\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n@@ -328,16 +328,26 @@\n     \n     return holidayEvents;\n   }, [holidaySettings, staffList, selectedStaffIds, currentDate]);\n \n+  // 실제 예약 이벤트들을 가져오는 함수 (TODO: 실제 데이터베이스에서 로드)\n+  const generateReservationEvents = useCallback((): ScheduleEvent[] => {\n+    // 현재는 더미 데이터이지만, 실제로는 데이터베이스에서 예약 데이터를 로드해야 함\n+    // TODO: dbManager에서 예약 데이터 로드 로직 추가\n+    return [];\n+  }, []);\n+\n+  // 모든 이벤트 통합 (휴일 + 예약)\n+  const allEvents = useMemo(() => {\n+    const holidayEvents = generateHolidayEvents();\n+    const reservationEvents = generateReservationEvents();\n+    return [...holidayEvents, ...reservationEvents];\n+  }, [generateHolidayEvents, generateReservationEvents]);\n+\n   // 직원 목록이 로드된 후 이벤트 초기화\n   useEffect(() => {\n-    if (staffList.length > 0) {\n-      // 휴일설정 기반 이벤트 생성\n-      const holidayEvents = generateHolidayEvents();\n-      setEvents(holidayEvents);\n-    }\n-  }, [staffList, generateHolidayEvents]);\n+    setEvents(allEvents);\n+  }, [allEvents]);\n \n   // 달력 날짜 변경 시 휴일설정 새로고침\n   useEffect(() => {\n     loadHolidaySettings();\n@@ -439,8 +449,9 @@\n         staffList={staffList}\n         currentUser={currentUser}\n         onSave={handleHolidaySettingsSave}\n         existingHolidays={holidaySettings}\n+        existingEvents={events} // 예약 제한을 위한 기존 이벤트 전달\n       />\n     </CMSLayout>\n   );\n };\n"
                },
                {
                    "date": 1760161170371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,9 +221,24 @@\n     }\n   }, []);\n \n   // 휴일설정 모달 관련 함수들\n-  const handleHolidaySettings = (staffId?: string) => {\n+  const handleHolidaySettings = async (staffId?: string) => {\n+    // 권한 체크\n+    if (!currentUser) {\n+      alert('사용자 정보를 확인할 수 없습니다.');\n+      return;\n+    }\n+\n+    // 특정 직원의 휴일설정인 경우 권한 체크\n+    if (staffId) {\n+      // 마스터 권한이 아니고 본인이 아닌 경우 접근 차단\n+      if (currentUser.role !== 'master' && currentUser.id !== staffId) {\n+        alert('권한이 없습니다. 본인의 휴일설정만 수정할 수 있습니다.');\n+        return;\n+      }\n+    }\n+\n     setHolidayModalStaffId(staffId);\n     setIsHolidayModalOpen(true);\n   };\n \n@@ -233,8 +248,22 @@\n   };\n \n   const handleHolidaySettingsSave = async (settings: Omit<HolidaySettings, 'id' | 'createdAt' | 'updatedAt'>[]) => {\n     try {\n+      // 권한 재검증\n+      if (!currentUser) {\n+        throw new Error('사용자 정보를 확인할 수 없습니다.');\n+      }\n+\n+      // 저장하려는 설정에 포함된 모든 직원에 대한 권한 체크\n+      const uniqueStaffIds = Array.from(new Set(settings.map(s => s.staffId)));\n+      \n+      for (const staffId of uniqueStaffIds) {\n+        if (currentUser.role !== 'master' && currentUser.id !== staffId) {\n+          throw new Error('권한이 없습니다. 본인의 휴일설정만 수정할 수 있습니다.');\n+        }\n+      }\n+\n       await dbManager.saveHolidaySettings(settings);\n       console.log('휴일설정 저장 성공:', settings);\n       // 휴일설정 새로고침\n       await loadHolidaySettings();\n"
                },
                {
                    "date": 1760162918057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import { useParams, useLocation } from 'react-router-dom';\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n-import CMSLayout from '../../../components/CMSLayout';\n import CustomDropdown from '../../../components/CustomDropdown';\n import { dbManager, type Branch, type Program } from '../../../utils/indexedDB';\n import { getCurrentUser } from '../../../utils/authUtils';\n import { \n@@ -395,9 +394,9 @@\n \n   const menuType = getMenuType();\n \n   return (\n-    <CMSLayout>\n+    <>\n       <Container>\n         <ContentContainer>\n           {/* 지점 필터 */}\n           <FilterContainer>\n@@ -480,9 +479,9 @@\n         onSave={handleHolidaySettingsSave}\n         existingHolidays={holidaySettings}\n         existingEvents={events} // 예약 제한을 위한 기존 이벤트 전달\n       />\n-    </CMSLayout>\n+    </>\n   );\n };\n \n export default ReservationPage;\n"
                },
                {
                    "date": 1761451696707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,15 +5,18 @@\n import { AppTextStyles } from '../../../styles/textStyles';\n import CustomDropdown from '../../../components/CustomDropdown';\n import { dbManager, type Branch, type Program } from '../../../utils/indexedDB';\n import { getCurrentUser } from '../../../utils/authUtils';\n+import { migrateHolidaySettingsToWeekly, checkMigrationStatus } from '../../../utils/holidayMigration';\n import { \n   ScheduleCalendar, \n   HolidayModal,\n+  WeeklyHolidayModal,\n   type CalendarView, \n   type ScheduleEvent, \n   type StaffInfo,\n   type HolidaySettings,\n+  type WeeklyHolidaySettings,\n   assignStaffColor \n } from '../../../components/Calendar';\n \n const Container = styled.div`\n@@ -89,11 +92,13 @@\n   const [events, setEvents] = useState<ScheduleEvent[]>([]);\n \n   // 휴일설정 모달 관련 상태\n   const [isHolidayModalOpen, setIsHolidayModalOpen] = useState(false);\n+  const [isWeeklyHolidayModalOpen, setIsWeeklyHolidayModalOpen] = useState(false);\n   const [holidayModalStaffId, setHolidayModalStaffId] = useState<string | undefined>();\n   const [currentUser, setCurrentUser] = useState<{ id: string; role: 'master' | 'coach' | 'admin' } | undefined>();\n   const [holidaySettings, setHolidaySettings] = useState<HolidaySettings[]>([]);\n+  const [weeklyHolidaySettings, setWeeklyHolidaySettings] = useState<WeeklyHolidaySettings[]>([]);\n \n   // 현재 선택된 메뉴 확인\n   const getMenuType = () => {\n     const path = location.pathname;\n@@ -207,8 +212,25 @@\n       console.error('휴일설정 로드 실패:', error);\n     }\n   }, []);\n \n+  // 주별 휴일설정 로드\n+  const loadWeeklyHolidaySettings = useCallback(async () => {\n+    try {\n+      // 모든 직원의 주별 휴일설정 로드\n+      const allSettings: WeeklyHolidaySettings[] = [];\n+      \n+      for (const staff of staffList) {\n+        const staffSettings = await dbManager.getWeeklyHolidaySettingsByStaff(staff.id);\n+        allSettings.push(...staffSettings);\n+      }\n+      \n+      setWeeklyHolidaySettings(allSettings);\n+    } catch (error) {\n+      console.error('주별 휴일설정 로드 실패:', error);\n+    }\n+  }, [staffList]);\n+\n   // 현재 사용자 정보 로드\n   const loadCurrentUser = useCallback(async () => {\n     try {\n       const user = await getCurrentUser();\n@@ -219,9 +241,9 @@\n       console.error('현재 사용자 정보 로드 실패:', error);\n     }\n   }, []);\n \n-  // 휴일설정 모달 관련 함수들\n+  // 휴일설정 모달 관련 함수들 (기존)\n   const handleHolidaySettings = async (staffId?: string) => {\n     // 권한 체크\n     if (!currentUser) {\n       alert('사용자 정보를 확인할 수 없습니다.');\n@@ -240,13 +262,39 @@\n     setHolidayModalStaffId(staffId);\n     setIsHolidayModalOpen(true);\n   };\n \n+  // 주별 휴일설정 모달 관련 함수들 (새로운)\n+  const handleWeeklyHolidaySettings = async (staffId?: string) => {\n+    // 권한 체크\n+    if (!currentUser) {\n+      alert('사용자 정보를 확인할 수 없습니다.');\n+      return;\n+    }\n+\n+    // 특정 직원의 휴일설정인 경우 권한 체크\n+    if (staffId) {\n+      // 마스터 권한이 아니고 본인이 아닌 경우 접근 차단\n+      if (currentUser.role !== 'master' && currentUser.id !== staffId) {\n+        alert('권한이 없습니다. 본인의 휴일설정만 수정할 수 있습니다.');\n+        return;\n+      }\n+    }\n+\n+    setHolidayModalStaffId(staffId);\n+    setIsWeeklyHolidayModalOpen(true);\n+  };\n+\n   const handleHolidayModalClose = () => {\n     setIsHolidayModalOpen(false);\n     setHolidayModalStaffId(undefined);\n   };\n \n+  const handleWeeklyHolidayModalClose = () => {\n+    setIsWeeklyHolidayModalOpen(false);\n+    setHolidayModalStaffId(undefined);\n+  };\n+\n   const handleHolidaySettingsSave = async (settings: Omit<HolidaySettings, 'id' | 'createdAt' | 'updatedAt'>[]) => {\n     try {\n       // 권한 재검증\n       if (!currentUser) {\n@@ -271,8 +319,34 @@\n       throw error; // 에러를 다시 throw하여 HolidayModal에서 처리하도록 함\n     }\n   };\n \n+  const handleWeeklyHolidaySettingsSave = async (settings: Omit<WeeklyHolidaySettings, 'id' | 'createdAt' | 'updatedAt'>[]) => {\n+    try {\n+      // 권한 재검증\n+      if (!currentUser) {\n+        throw new Error('사용자 정보를 확인할 수 없습니다.');\n+      }\n+\n+      // 저장하려는 설정에 포함된 모든 직원에 대한 권한 체크\n+      const uniqueStaffIds = Array.from(new Set(settings.map(s => s.staffId)));\n+      \n+      for (const staffId of uniqueStaffIds) {\n+        if (currentUser.role !== 'master' && currentUser.id !== staffId) {\n+          throw new Error('권한이 없습니다. 본인의 휴일설정만 수정할 수 있습니다.');\n+        }\n+      }\n+\n+      await dbManager.saveWeeklyHolidaySettings(settings);\n+      console.log('주별 휴일설정 저장 성공:', settings);\n+      // 주별 휴일설정 새로고침\n+      await loadWeeklyHolidaySettings();\n+    } catch (error) {\n+      console.error('주별 휴일설정 저장 실패:', error);\n+      throw error; // 에러를 다시 throw하여 WeeklyHolidayModal에서 처리하도록 함\n+    }\n+  };\n+\n   // 프로그램 정보 로드\n   useEffect(() => {\n     const loadData = async () => {\n       if (programId) {\n@@ -291,11 +365,28 @@\n   }, [programId]);\n \n   // 지점 데이터 로드\n   useEffect(() => {\n-    loadBranchData();\n-    loadCurrentUser(); // 현재 사용자 정보도 함께 로드\n-    loadHolidaySettings(); // 휴일설정도 함께 로드\n+    const initializeData = async () => {\n+      // 마이그레이션 상태 확인 및 실행\n+      try {\n+        const migrationStatus = await checkMigrationStatus();\n+        if (migrationStatus.hasOldSettings && !migrationStatus.hasNewSettings) {\n+          console.log('휴일 설정 마이그레이션을 시작합니다...');\n+          await migrateHolidaySettingsToWeekly();\n+          console.log('휴일 설정 마이그레이션이 완료되었습니다.');\n+        }\n+      } catch (error) {\n+        console.error('휴일 설정 마이그레이션 실패:', error);\n+      }\n+      \n+      // 기본 데이터 로드\n+      loadBranchData();\n+      loadCurrentUser();\n+      loadHolidaySettings();\n+    };\n+    \n+    initializeData();\n   }, [loadCurrentUser, loadHolidaySettings]);\n \n   // 프로그램 데이터 로드\n   useEffect(() => {\n@@ -308,8 +399,15 @@\n       loadStaffData();\n     }\n   }, [selectedBranchId, currentProgram, loadStaffData]);\n \n+  // 주별 휴일설정 로드 (직원 목록이 로드된 후)\n+  useEffect(() => {\n+    if (staffList.length > 0) {\n+      loadWeeklyHolidaySettings();\n+    }\n+  }, [staffList, loadWeeklyHolidaySettings]);\n+\n   // 휴일설정을 이벤트로 변환하는 함수\n   const generateHolidayEvents = useCallback((): ScheduleEvent[] => {\n     const holidayEvents: ScheduleEvent[] = [];\n     \n@@ -386,9 +484,46 @@\n     console.log('이벤트 클릭:', event);\n     // 여기서 이벤트 상세 보기 모달 등을 열 수 있습니다\n   };\n \n+  // 예약 가능 여부 체크 (금요일 이후에만 다음주 예약 가능)\n+  const isReservationAllowed = (targetDate: Date): boolean => {\n+    const today = new Date();\n+    const dayOfWeek = today.getDay(); // 0: 일요일, 1: 월요일, ..., 5: 금요일, 6: 토요일\n+    \n+    // 대상 날짜가 이번주인지 다음주인지 판단\n+    const currentWeekStart = new Date(today);\n+    currentWeekStart.setDate(today.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\n+    currentWeekStart.setHours(0, 0, 0, 0);\n+    \n+    const nextWeekStart = new Date(currentWeekStart);\n+    nextWeekStart.setDate(currentWeekStart.getDate() + 7);\n+    \n+    const targetWeekStart = new Date(targetDate);\n+    targetWeekStart.setDate(targetDate.getDate() - (targetDate.getDay() === 0 ? 6 : targetDate.getDay() - 1));\n+    targetWeekStart.setHours(0, 0, 0, 0);\n+    \n+    // 이번주 예약은 항상 가능\n+    if (targetWeekStart.getTime() <= currentWeekStart.getTime()) {\n+      return true;\n+    }\n+    \n+    // 다음주 예약은 금요일 이후에만 가능\n+    if (targetWeekStart.getTime() === nextWeekStart.getTime()) {\n+      return dayOfWeek >= 5; // 금요일(5) 이후\n+    }\n+    \n+    // 그 이후 주차는 금요일 이후에만 가능\n+    return dayOfWeek >= 5;\n+  };\n+\n   const handleEventCreate = (startTime: Date, endTime: Date, staffId?: string) => {\n+    // 예약 가능 시점 체크\n+    if (!isReservationAllowed(startTime)) {\n+      alert('다음주 예약은 금요일 이후부터 가능합니다.');\n+      return;\n+    }\n+    \n     console.log('새 이벤트 생성:', { startTime, endTime, staffId });\n     // 여기서 새 이벤트 생성 모달 등을 열 수 있습니다\n   };\n \n@@ -438,9 +573,9 @@\n                     onDateChange={setCurrentDate}\n                     onStaffFilter={setSelectedStaffIds}\n                     onEventClick={handleEventClick}\n                     onEventCreate={handleEventCreate}\n-                    onHolidaySettings={handleHolidaySettings}\n+                    onHolidaySettings={handleWeeklyHolidaySettings}\n                   />\n                 ) : (\n                   <PlaceholderContent>\n                     선택한 지점에 \"{currentProgram.name}\" 프로그램을 담당하는 코치가 없습니다.\n@@ -468,9 +603,9 @@\n           )}\n         </ContentContainer>\n       </Container>\n \n-      {/* 휴일설정 모달 */}\n+      {/* 기존 휴일설정 모달 (호환성 유지) */}\n       <HolidayModal\n         isOpen={isHolidayModalOpen}\n         onClose={handleHolidayModalClose}\n         staffId={holidayModalStaffId}\n@@ -479,8 +614,19 @@\n         onSave={handleHolidaySettingsSave}\n         existingHolidays={holidaySettings}\n         existingEvents={events} // 예약 제한을 위한 기존 이벤트 전달\n       />\n+\n+      {/* 새로운 주별 휴일설정 모달 */}\n+      <WeeklyHolidayModal\n+        isOpen={isWeeklyHolidayModalOpen}\n+        onClose={handleWeeklyHolidayModalClose}\n+        staffId={holidayModalStaffId}\n+        staffList={staffList}\n+        currentUser={currentUser}\n+        onSave={handleWeeklyHolidaySettingsSave}\n+        existingWeeklyHolidays={weeklyHolidaySettings}\n+      />\n     </>\n   );\n };\n \n"
                },
                {
                    "date": 1761454363845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,28 +263,8 @@\n     setIsHolidayModalOpen(true);\n   };\n \n   // 주별 휴일설정 모달 관련 함수들 (새로운)\n-  const handleWeeklyHolidaySettings = async (staffId?: string) => {\n-    // 권한 체크\n-    if (!currentUser) {\n-      alert('사용자 정보를 확인할 수 없습니다.');\n-      return;\n-    }\n-\n-    // 특정 직원의 휴일설정인 경우 권한 체크\n-    if (staffId) {\n-      // 마스터 권한이 아니고 본인이 아닌 경우 접근 차단\n-      if (currentUser.role !== 'master' && currentUser.id !== staffId) {\n-        alert('권한이 없습니다. 본인의 휴일설정만 수정할 수 있습니다.');\n-        return;\n-      }\n-    }\n-\n-    setHolidayModalStaffId(staffId);\n-    setIsWeeklyHolidayModalOpen(true);\n-  };\n-\n   const handleHolidayModalClose = () => {\n     setIsHolidayModalOpen(false);\n     setHolidayModalStaffId(undefined);\n   };\n@@ -406,9 +386,9 @@\n       loadWeeklyHolidaySettings();\n     }\n   }, [staffList, loadWeeklyHolidaySettings]);\n \n-  // 휴일설정을 이벤트로 변환하는 함수\n+  // 주별 휴일설정을 이벤트로 변환하는 함수\n   const generateHolidayEvents = useCallback((): ScheduleEvent[] => {\n     const holidayEvents: ScheduleEvent[] = [];\n     \n     // 각 코치별로 휴일 이벤트 생성\n@@ -421,16 +401,53 @@\n         \n         for (let day = 1; day <= lastDay; day++) {\n           const date = new Date(year, month, day);\n           const dateStr = date.toISOString().split('T')[0];\n-          const isWeekend = date.getDay() === 0 || date.getDay() === 6;\n+          const dayOfWeek = date.getDay(); // 0: 일요일, 1: 월요일, ..., 6: 토요일\n           \n-          // 해당 날짜의 휴일 설정 찾기\n-          const setting = holidaySettings.find(s => s.staffId === staff.id && s.date === dateStr);\n+          // 해당 날짜가 속한 주의 월요일 계산\n+          const mondayOfWeek = new Date(date);\n+          const daysFromMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // 일요일은 6, 나머지는 dayOfWeek - 1\n+          mondayOfWeek.setDate(date.getDate() - daysFromMonday);\n+          const weekStartDate = mondayOfWeek.toISOString().split('T')[0];\n           \n-          // 휴일 여부 결정: 설정이 있으면 설정값 사용, 없으면 주말 기본값 사용\n-          const isHoliday = setting ? setting.isHoliday : isWeekend;\n+          // 주별 휴일 설정 찾기\n+          const weeklySettings = weeklyHolidaySettings.find(\n+            s => s.staffId === staff.id && s.weekStartDate === weekStartDate\n+          );\n           \n+          let isHoliday = false;\n+          let breakTimes: Array<{ start: number; end: number; name: string; }> = [];\n+          \n+          if (weeklySettings) {\n+            // 요일별 키 매핑\n+            const dayKeys = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n+            const dayKey = dayKeys[dayOfWeek] as keyof typeof weeklySettings.weekDays;\n+            const daySettings = weeklySettings.weekDays[dayKey];\n+            \n+            if (daySettings) {\n+              isHoliday = daySettings.isHoliday;\n+              if (daySettings.breakTimes) {\n+                breakTimes = daySettings.breakTimes\n+                  .filter(bt => bt.name && bt.name.trim() !== '')\n+                  .map(bt => ({\n+                    start: bt.start,\n+                    end: bt.end,\n+                    name: bt.name!\n+                  }));\n+              }\n+            }\n+          } else {\n+            // 주별 설정이 없으면 기존 일별 설정 확인\n+            const dailySetting = holidaySettings.find(s => s.staffId === staff.id && s.date === dateStr);\n+            if (dailySetting) {\n+              isHoliday = dailySetting.isHoliday;\n+            } else {\n+              // 기본값: 주말은 휴일\n+              isHoliday = dayOfWeek === 0 || dayOfWeek === 6;\n+            }\n+          }\n+          \n           if (isHoliday) {\n             const startTime = new Date(date);\n             startTime.setHours(0, 0, 0, 0);\n             const endTime = new Date(date);\n@@ -446,15 +463,35 @@\n               type: 'break',\n               color: '#f87171', // 빨간색으로 휴일 표시\n               description: `${staff.name} 코치 휴일`\n             });\n+          } else {\n+            // 근무일인 경우 휴게시간 이벤트 생성\n+            breakTimes.forEach((breakTime, index) => {\n+              const breakStartTime = new Date(date);\n+              breakStartTime.setHours(breakTime.start, 0, 0, 0);\n+              const breakEndTime = new Date(date);\n+              breakEndTime.setHours(breakTime.end, 0, 0, 0);\n+              \n+              holidayEvents.push({\n+                id: `break-${staff.id}-${dateStr}-${index}`,\n+                title: breakTime.name || '휴게시간',\n+                startTime: breakStartTime,\n+                endTime: breakEndTime,\n+                staffId: staff.id,\n+                staffName: staff.name,\n+                type: 'break',\n+                color: '#fbbf24', // 노란색으로 휴게시간 표시\n+                description: `${staff.name} 코치 ${breakTime.name || '휴게시간'}`\n+              });\n+            });\n           }\n         }\n       }\n     });\n     \n     return holidayEvents;\n-  }, [holidaySettings, staffList, selectedStaffIds, currentDate]);\n+  }, [holidaySettings, weeklyHolidaySettings, staffList, selectedStaffIds, currentDate]);\n \n   // 실제 예약 이벤트들을 가져오는 함수 (TODO: 실제 데이터베이스에서 로드)\n   const generateReservationEvents = useCallback((): ScheduleEvent[] => {\n     // 현재는 더미 데이터이지만, 실제로는 데이터베이스에서 예약 데이터를 로드해야 함\n@@ -573,9 +610,10 @@\n                     onDateChange={setCurrentDate}\n                     onStaffFilter={setSelectedStaffIds}\n                     onEventClick={handleEventClick}\n                     onEventCreate={handleEventCreate}\n-                    onHolidaySettings={handleWeeklyHolidaySettings}\n+                    onHolidaySettings={handleHolidaySettings}\n+                    weeklyHolidaySettings={weeklyHolidaySettings}\n                   />\n                 ) : (\n                   <PlaceholderContent>\n                     선택한 지점에 \"{currentProgram.name}\" 프로그램을 담당하는 코치가 없습니다.\n"
                },
                {
                    "date": 1761454547868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,12 +90,13 @@\n   const [staffList, setStaffList] = useState<StaffInfo[]>([]);\n   const [selectedStaffIds, setSelectedStaffIds] = useState<string[]>([]);\n   const [events, setEvents] = useState<ScheduleEvent[]>([]);\n \n-  // 휴일설정 모달 관련 상태\n+  // 휴일설정 모달 상태\n   const [isHolidayModalOpen, setIsHolidayModalOpen] = useState(false);\n   const [isWeeklyHolidayModalOpen, setIsWeeklyHolidayModalOpen] = useState(false);\n   const [holidayModalStaffId, setHolidayModalStaffId] = useState<string | undefined>();\n+  const [weeklyHolidayModalStaffId, setWeeklyHolidayModalStaffId] = useState<string | undefined>();\n   const [currentUser, setCurrentUser] = useState<{ id: string; role: 'master' | 'coach' | 'admin' } | undefined>();\n   const [holidaySettings, setHolidaySettings] = useState<HolidaySettings[]>([]);\n   const [weeklyHolidaySettings, setWeeklyHolidaySettings] = useState<WeeklyHolidaySettings[]>([]);\n \n@@ -241,9 +242,9 @@\n       console.error('현재 사용자 정보 로드 실패:', error);\n     }\n   }, []);\n \n-  // 휴일설정 모달 관련 함수들 (기존)\n+  // 휴일설정 모달 관련 함수들 (주별 휴일설정으로 변경)\n   const handleHolidaySettings = async (staffId?: string) => {\n     // 권한 체크\n     if (!currentUser) {\n       alert('사용자 정보를 확인할 수 없습니다.');\n@@ -258,10 +259,10 @@\n         return;\n       }\n     }\n \n-    setHolidayModalStaffId(staffId);\n-    setIsHolidayModalOpen(true);\n+    setWeeklyHolidayModalStaffId(staffId);\n+    setIsWeeklyHolidayModalOpen(true);\n   };\n \n   // 주별 휴일설정 모달 관련 함수들 (새로운)\n   const handleHolidayModalClose = () => {\n@@ -270,9 +271,9 @@\n   };\n \n   const handleWeeklyHolidayModalClose = () => {\n     setIsWeeklyHolidayModalOpen(false);\n-    setHolidayModalStaffId(undefined);\n+    setWeeklyHolidayModalStaffId(undefined);\n   };\n \n   const handleHolidaySettingsSave = async (settings: Omit<HolidaySettings, 'id' | 'createdAt' | 'updatedAt'>[]) => {\n     try {\n@@ -657,9 +658,9 @@\n       {/* 새로운 주별 휴일설정 모달 */}\n       <WeeklyHolidayModal\n         isOpen={isWeeklyHolidayModalOpen}\n         onClose={handleWeeklyHolidayModalClose}\n-        staffId={holidayModalStaffId}\n+        staffId={weeklyHolidayModalStaffId}\n         staffList={staffList}\n         currentUser={currentUser}\n         onSave={handleWeeklyHolidaySettingsSave}\n         existingWeeklyHolidays={weeklyHolidaySettings}\n"
                },
                {
                    "date": 1761454862194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,22 +217,29 @@\n   // 주별 휴일설정 로드\n   const loadWeeklyHolidaySettings = useCallback(async () => {\n     try {\n       // 모든 직원의 주별 휴일설정 로드\n+      const allStaffIds = staffList.map(staff => staff.id);\n+      if (allStaffIds.length === 0) {\n+        console.log('직원 목록이 비어있어 주별 휴일설정을 로드하지 않음');\n+        return;\n+      }\n+      \n+      console.log('주별 휴일설정 로드 시작:', { staffCount: allStaffIds.length });\n+      \n+      // 각 직원별로 개별 조회해서 합치기\n       const allSettings: WeeklyHolidaySettings[] = [];\n-      \n-      for (const staff of staffList) {\n-        const staffSettings = await dbManager.getWeeklyHolidaySettingsByStaff(staff.id);\n+      for (const staffId of allStaffIds) {\n+        const staffSettings = await dbManager.getWeeklyHolidaySettingsByStaff(staffId);\n         allSettings.push(...staffSettings);\n       }\n       \n+      console.log('주별 휴일설정 로드 완료:', { settingsCount: allSettings.length, settings: allSettings });\n       setWeeklyHolidaySettings(allSettings);\n     } catch (error) {\n       console.error('주별 휴일설정 로드 실패:', error);\n     }\n-  }, [staffList]);\n-\n-  // 현재 사용자 정보 로드\n+  }, [staffList]);  // 현재 사용자 정보 로드\n   const loadCurrentUser = useCallback(async () => {\n     try {\n       const user = await getCurrentUser();\n       if (user) {\n@@ -389,13 +396,21 @@\n   }, [staffList, loadWeeklyHolidaySettings]);\n \n   // 주별 휴일설정을 이벤트로 변환하는 함수\n   const generateHolidayEvents = useCallback((): ScheduleEvent[] => {\n+    console.log('generateHolidayEvents 호출됨:', { \n+      weeklyHolidaySettingsCount: weeklyHolidaySettings.length, \n+      staffListCount: staffList.length,\n+      selectedStaffIdsCount: selectedStaffIds.length \n+    });\n+    \n     const holidayEvents: ScheduleEvent[] = [];\n     \n     // 각 코치별로 휴일 이벤트 생성\n     staffList.forEach(staff => {\n       if (staff.role === '코치' && selectedStaffIds.includes(staff.id)) {\n+        console.log(`${staff.name} 코치의 휴일 이벤트 생성 중...`);\n+        \n         // 현재 월의 모든 날짜에 대해 휴일 여부 확인\n         const year = currentDate.getFullYear();\n         const month = currentDate.getMonth();\n         const lastDay = new Date(year, month + 1, 0).getDate();\n@@ -415,12 +430,19 @@\n           const weeklySettings = weeklyHolidaySettings.find(\n             s => s.staffId === staff.id && s.weekStartDate === weekStartDate\n           );\n           \n+          console.log(`${staff.name} - ${dateStr}:`, { \n+            weekStartDate, \n+            hasWeeklySettings: !!weeklySettings,\n+            dayOfWeek \n+          });\n+          \n           let isHoliday = false;\n           let breakTimes: Array<{ start: number; end: number; name: string; }> = [];\n           \n           if (weeklySettings) {\n+            console.log(`${staff.name} - 주별 설정 발견:`, weeklySettings);\n             // 요일별 키 매핑\n             const dayKeys = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n             const dayKey = dayKeys[dayOfWeek] as keyof typeof weeklySettings.weekDays;\n             const daySettings = weeklySettings.weekDays[dayKey];\n@@ -448,8 +470,9 @@\n             }\n           }\n           \n           if (isHoliday) {\n+            console.log(`${staff.name} - ${dateStr}: 휴일로 설정됨`);\n             const startTime = new Date(date);\n             startTime.setHours(0, 0, 0, 0);\n             const endTime = new Date(date);\n             endTime.setHours(23, 59, 59, 999);\n@@ -466,8 +489,11 @@\n               description: `${staff.name} 코치 휴일`\n             });\n           } else {\n             // 근무일인 경우 휴게시간 이벤트 생성\n+            if (breakTimes.length > 0) {\n+              console.log(`${staff.name} - ${dateStr}: ${breakTimes.length}개 휴게시간 생성`);\n+            }\n             breakTimes.forEach((breakTime, index) => {\n               const breakStartTime = new Date(date);\n               breakStartTime.setHours(breakTime.start, 0, 0, 0);\n               const breakEndTime = new Date(date);\n@@ -489,8 +515,13 @@\n         }\n       }\n     });\n     \n+    console.log('generateHolidayEvents 완료:', { \n+      totalEvents: holidayEvents.length,\n+      holidayEvents: holidayEvents.map(e => ({ id: e.id, title: e.title, staffName: e.staffName }))\n+    });\n+    \n     return holidayEvents;\n   }, [holidaySettings, weeklyHolidaySettings, staffList, selectedStaffIds, currentDate]);\n \n   // 실제 예약 이벤트들을 가져오는 함수 (TODO: 실제 데이터베이스에서 로드)\n"
                },
                {
                    "date": 1761455098883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -399,9 +399,14 @@\n   const generateHolidayEvents = useCallback((): ScheduleEvent[] => {\n     console.log('generateHolidayEvents 호출됨:', { \n       weeklyHolidaySettingsCount: weeklyHolidaySettings.length, \n       staffListCount: staffList.length,\n-      selectedStaffIdsCount: selectedStaffIds.length \n+      selectedStaffIdsCount: selectedStaffIds.length,\n+      weeklyHolidaySettings: weeklyHolidaySettings.map(s => ({\n+        staffId: s.staffId,\n+        weekStartDate: s.weekStartDate,\n+        weekDays: Object.keys(s.weekDays)\n+      }))\n     });\n     \n     const holidayEvents: ScheduleEvent[] = [];\n     \n@@ -425,8 +430,15 @@\n           const daysFromMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // 일요일은 6, 나머지는 dayOfWeek - 1\n           mondayOfWeek.setDate(date.getDate() - daysFromMonday);\n           const weekStartDate = mondayOfWeek.toISOString().split('T')[0];\n           \n+          console.log(`${staff.name} - ${dateStr} 주 계산:`, {\n+            originalDate: dateStr,\n+            dayOfWeek,\n+            daysFromMonday,\n+            calculatedWeekStartDate: weekStartDate\n+          });\n+          \n           // 주별 휴일 설정 찾기\n           const weeklySettings = weeklyHolidaySettings.find(\n             s => s.staffId === staff.id && s.weekStartDate === weekStartDate\n           );\n"
                },
                {
                    "date": 1761455802254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -323,18 +323,132 @@\n           throw new Error('권한이 없습니다. 본인의 휴일설정만 수정할 수 있습니다.');\n         }\n       }\n \n+      // 1. 주별 휴일설정 저장\n       await dbManager.saveWeeklyHolidaySettings(settings);\n       console.log('주별 휴일설정 저장 성공:', settings);\n-      // 주별 휴일설정 새로고침\n+      \n+      // 2. 기존 휴일/휴게시간 이벤트 삭제 (해당 주차, 해당 직원)\n+      for (const setting of settings) {\n+        const weekStartDate = setting.weekStartDate;\n+        const weekEndDate = new Date(weekStartDate + 'T00:00:00');\n+        weekEndDate.setDate(weekEndDate.getDate() + 6);\n+        const weekEndDateStr = weekEndDate.toISOString().split('T')[0];\n+        \n+        // 해당 주차의 기존 휴일/휴게시간 이벤트 삭제\n+        // TODO: 스케줄 이벤트 삭제 로직 구현 필요\n+        console.log(`${setting.staffId}의 ${weekStartDate}~${weekEndDateStr} 주차 이벤트 삭제 예정`);\n+      }\n+      \n+      // 3. 새로운 휴일/휴게시간을 스케줄 이벤트로 생성하여 저장\n+      const scheduleEvents: ScheduleEvent[] = [];\n+      \n+      for (const setting of settings) {\n+        const staff = staffList.find(s => s.id === setting.staffId);\n+        if (!staff) continue;\n+        \n+        const weekStartDate = new Date(setting.weekStartDate + 'T00:00:00');\n+        \n+        // 각 요일별로 이벤트 생성\n+        const dayKeys = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'] as const;\n+        \n+        dayKeys.forEach((dayKey, index) => {\n+          const daySettings = setting.weekDays[dayKey];\n+          const currentDate = new Date(weekStartDate);\n+          currentDate.setDate(weekStartDate.getDate() + index);\n+          const dateStr = currentDate.toISOString().split('T')[0];\n+          \n+          if (daySettings.isHoliday) {\n+            // 휴일 이벤트 생성\n+            const startTime = new Date(currentDate);\n+            startTime.setHours(0, 0, 0, 0);\n+            const endTime = new Date(currentDate);\n+            endTime.setHours(23, 59, 59, 999);\n+            \n+            scheduleEvents.push({\n+              id: `holiday-${setting.staffId}-${dateStr}`,\n+              title: '휴일',\n+              startTime,\n+              endTime,\n+              staffId: setting.staffId,\n+              staffName: staff.name,\n+              type: 'holiday',\n+              color: '#f87171',\n+              description: `${staff.name} 코치 휴일`,\n+              sourceType: 'weekly_holiday',\n+              sourceId: setting.staffId + '-' + setting.weekStartDate\n+            });\n+          } else if (daySettings.breakTimes && daySettings.breakTimes.length > 0) {\n+            // 휴게시간 이벤트들 생성\n+            daySettings.breakTimes.forEach((breakTime, breakIndex) => {\n+              if (breakTime.name && breakTime.name.trim() !== '') {\n+                const breakStartTime = new Date(currentDate);\n+                breakStartTime.setHours(breakTime.start, 0, 0, 0);\n+                const breakEndTime = new Date(currentDate);\n+                breakEndTime.setHours(breakTime.end, 0, 0, 0);\n+                \n+                scheduleEvents.push({\n+                  id: `break-${setting.staffId}-${dateStr}-${breakIndex}`,\n+                  title: breakTime.name,\n+                  startTime: breakStartTime,\n+                  endTime: breakEndTime,\n+                  staffId: setting.staffId,\n+                  staffName: staff.name,\n+                  type: 'break',\n+                  color: '#fbbf24',\n+                  description: `${staff.name} 코치 ${breakTime.name}`,\n+                  sourceType: 'weekly_holiday',\n+                  sourceId: setting.staffId + '-' + setting.weekStartDate\n+                });\n+              }\n+            });\n+          }\n+        });\n+      }\n+      \n+      // 4. 생성된 스케줄 이벤트들을 데이터베이스에 저장\n+      if (scheduleEvents.length > 0) {\n+        console.log('생성된 휴일/휴게시간 이벤트들:', scheduleEvents);\n+        await dbManager.saveScheduleEvents(scheduleEvents);\n+        console.log('스케줄 이벤트 저장 완료');\n+      }\n+      \n+      // 5. 주별 휴일설정 새로고침\n       await loadWeeklyHolidaySettings();\n+      \n+      // 6. 이벤트 목록 새로고침 (저장된 스케줄 이벤트들 로드)\n+      if (scheduleEvents.length > 0) {\n+        setEvents(prev => [...prev.filter(e => !e.id.startsWith('holiday-') && !e.id.startsWith('break-')), ...scheduleEvents]);\n+      }\n+      \n     } catch (error) {\n       console.error('주별 휴일설정 저장 실패:', error);\n       throw error; // 에러를 다시 throw하여 WeeklyHolidayModal에서 처리하도록 함\n     }\n   };\n \n+  // 저장된 스케줄 이벤트 로드\n+  const loadScheduleEvents = useCallback(async () => {\n+    try {\n+      const startDate = new Date(currentDate);\n+      startDate.setDate(startDate.getDate() - 7); // 현재 날짜 1주 전부터\n+      const endDate = new Date(currentDate);\n+      endDate.setDate(endDate.getDate() + 14); // 현재 날짜 2주 후까지\n+      \n+      const savedEvents = await dbManager.getAllScheduleEvents(startDate, endDate);\n+      console.log('저장된 스케줄 이벤트 로드:', savedEvents.length, '개');\n+      \n+      // 기존 저장된 이벤트들을 제거하고 새로 로드된 이벤트들을 추가\n+      setEvents(prev => [\n+        ...prev.filter(e => !e.sourceType || e.sourceType !== 'weekly_holiday'),\n+        ...savedEvents\n+      ]);\n+    } catch (error) {\n+      console.error('스케줄 이벤트 로드 실패:', error);\n+    }\n+  }, [currentDate]);\n+\n   // 프로그램 정보 로드\n   useEffect(() => {\n     const loadData = async () => {\n       if (programId) {\n@@ -370,12 +484,13 @@\n       // 기본 데이터 로드\n       loadBranchData();\n       loadCurrentUser();\n       loadHolidaySettings();\n+      loadScheduleEvents();\n     };\n     \n     initializeData();\n-  }, [loadCurrentUser, loadHolidaySettings]);\n+  }, [loadCurrentUser, loadHolidaySettings, loadScheduleEvents]);\n \n   // 프로그램 데이터 로드\n   useEffect(() => {\n     loadProgramData();\n@@ -495,11 +610,13 @@\n               startTime,\n               endTime,\n               staffId: staff.id,\n               staffName: staff.name,\n-              type: 'break',\n+              type: 'holiday',\n               color: '#f87171', // 빨간색으로 휴일 표시\n-              description: `${staff.name} 코치 휴일`\n+              description: `${staff.name} 코치 휴일`,\n+              sourceType: 'weekly_holiday',\n+              sourceId: `temp-${staff.id}-${dateStr}`\n             });\n           } else {\n             // 근무일인 경우 휴게시간 이벤트 생성\n             if (breakTimes.length > 0) {\n@@ -519,9 +636,11 @@\n                 staffId: staff.id,\n                 staffName: staff.name,\n                 type: 'break',\n                 color: '#fbbf24', // 노란색으로 휴게시간 표시\n-                description: `${staff.name} 코치 ${breakTime.name || '휴게시간'}`\n+                description: `${staff.name} 코치 ${breakTime.name || '휴게시간'}`,\n+                sourceType: 'weekly_holiday',\n+                sourceId: `temp-${staff.id}-${dateStr}`\n               });\n             });\n           }\n         }\n@@ -559,8 +678,13 @@\n   useEffect(() => {\n     loadHolidaySettings();\n   }, [currentDate, loadHolidaySettings]);\n \n+  // 달력 날짜 변경 시 스케줄 이벤트 새로고침\n+  useEffect(() => {\n+    loadScheduleEvents();\n+  }, [currentDate, loadScheduleEvents]);\n+\n   // 이벤트 핸들러들\n   const handleEventClick = (event: ScheduleEvent) => {\n     console.log('이벤트 클릭:', event);\n     // 여기서 이벤트 상세 보기 모달 등을 열 수 있습니다\n"
                },
                {
                    "date": 1761456338015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,10 +96,10 @@\n   const [isWeeklyHolidayModalOpen, setIsWeeklyHolidayModalOpen] = useState(false);\n   const [holidayModalStaffId, setHolidayModalStaffId] = useState<string | undefined>();\n   const [weeklyHolidayModalStaffId, setWeeklyHolidayModalStaffId] = useState<string | undefined>();\n   const [currentUser, setCurrentUser] = useState<{ id: string; role: 'master' | 'coach' | 'admin' } | undefined>();\n-  const [holidaySettings, setHolidaySettings] = useState<HolidaySettings[]>([]);\n-  const [weeklyHolidaySettings, setWeeklyHolidaySettings] = useState<WeeklyHolidaySettings[]>([]);\n+  const holidaySettings: HolidaySettings[] = []; // 빈 배열로 고정\n+  const [weeklyHolidaySettings] = useState<WeeklyHolidaySettings[]>([]); // 빈 배열로 고정\n \n   // 현재 선택된 메뉴 확인\n   const getMenuType = () => {\n     const path = location.pathname;\n@@ -196,50 +196,26 @@\n       console.error('직원 데이터 로드 실패:', error);\n     }\n   }, [selectedBranchId, currentProgram]);\n \n-  // 휴일설정 로드\n-  const loadHolidaySettings = useCallback(async () => {\n-    try {\n-      const currentMonth = new Date();\n-      const startDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n-      const endDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n-      \n-      const startDateStr = startDate.toISOString().split('T')[0];\n-      const endDateStr = endDate.toISOString().split('T')[0];\n-      \n-      const settings = await dbManager.getHolidaySettingsByDateRange(startDateStr, endDateStr);\n-      setHolidaySettings(settings);\n-    } catch (error) {\n-      console.error('휴일설정 로드 실패:', error);\n-    }\n-  }, []);\n+  // 휴일설정 로드 (더 이상 사용 안함 - 스케줄 이벤트로 대체)\n+  // const loadHolidaySettings = useCallback(async () => {\n+  //   try {\n+  //     const currentMonth = new Date();\n+  //     const startDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n+  //     const endDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n+  //     \n+  //     const startDateStr = startDate.toISOString().split('T')[0];\n+  //     const endDateStr = endDate.toISOString().split('T')[0];\n+  //     \n+  //     const settings = await dbManager.getHolidaySettingsByDateRange(startDateStr, endDateStr);\n+  //     setHolidaySettings(settings);\n+  //   } catch (error) {\n+  //     console.error('휴일설정 로드 실패:', error);\n+  //   }\n+  // }, []);\n \n-  // 주별 휴일설정 로드\n-  const loadWeeklyHolidaySettings = useCallback(async () => {\n-    try {\n-      // 모든 직원의 주별 휴일설정 로드\n-      const allStaffIds = staffList.map(staff => staff.id);\n-      if (allStaffIds.length === 0) {\n-        console.log('직원 목록이 비어있어 주별 휴일설정을 로드하지 않음');\n-        return;\n-      }\n-      \n-      console.log('주별 휴일설정 로드 시작:', { staffCount: allStaffIds.length });\n-      \n-      // 각 직원별로 개별 조회해서 합치기\n-      const allSettings: WeeklyHolidaySettings[] = [];\n-      for (const staffId of allStaffIds) {\n-        const staffSettings = await dbManager.getWeeklyHolidaySettingsByStaff(staffId);\n-        allSettings.push(...staffSettings);\n-      }\n-      \n-      console.log('주별 휴일설정 로드 완료:', { settingsCount: allSettings.length, settings: allSettings });\n-      setWeeklyHolidaySettings(allSettings);\n-    } catch (error) {\n-      console.error('주별 휴일설정 로드 실패:', error);\n-    }\n-  }, [staffList]);  // 현재 사용자 정보 로드\n+  // 현재 사용자 정보 로드\n   const loadCurrentUser = useCallback(async () => {\n     try {\n       const user = await getCurrentUser();\n       if (user) {\n@@ -299,10 +275,10 @@\n       }\n \n       await dbManager.saveHolidaySettings(settings);\n       console.log('휴일설정 저장 성공:', settings);\n-      // 휴일설정 새로고침\n-      await loadHolidaySettings();\n+      // 휴일설정 새로고침 (제거됨 - 스케줄 이벤트 사용)\n+      // await loadHolidaySettings();\n     } catch (error) {\n       console.error('휴일설정 저장 실패:', error);\n       throw error; // 에러를 다시 throw하여 HolidayModal에서 처리하도록 함\n     }\n@@ -412,12 +388,9 @@\n         await dbManager.saveScheduleEvents(scheduleEvents);\n         console.log('스케줄 이벤트 저장 완료');\n       }\n       \n-      // 5. 주별 휴일설정 새로고침\n-      await loadWeeklyHolidaySettings();\n-      \n-      // 6. 이벤트 목록 새로고침 (저장된 스케줄 이벤트들 로드)\n+      // 5. 이벤트 목록 새로고침 (저장된 스케줄 이벤트들 로드)\n       if (scheduleEvents.length > 0) {\n         setEvents(prev => [...prev.filter(e => !e.id.startsWith('holiday-') && !e.id.startsWith('break-')), ...scheduleEvents]);\n       }\n       \n@@ -483,14 +456,14 @@\n       \n       // 기본 데이터 로드\n       loadBranchData();\n       loadCurrentUser();\n-      loadHolidaySettings();\n+      // loadHolidaySettings(); // 제거됨\n       loadScheduleEvents();\n     };\n     \n     initializeData();\n-  }, [loadCurrentUser, loadHolidaySettings, loadScheduleEvents]);\n+  }, [loadCurrentUser, loadScheduleEvents]);\n \n   // 프로그램 데이터 로드\n   useEffect(() => {\n     loadProgramData();\n@@ -502,16 +475,14 @@\n       loadStaffData();\n     }\n   }, [selectedBranchId, currentProgram, loadStaffData]);\n \n-  // 주별 휴일설정 로드 (직원 목록이 로드된 후)\n-  useEffect(() => {\n-    if (staffList.length > 0) {\n-      loadWeeklyHolidaySettings();\n-    }\n-  }, [staffList, loadWeeklyHolidaySettings]);\n+  // 더이상 사용하지 않는 함수들 (저장된 스케줄 이벤트 사용)\n+  // const generateHolidayEvents = useCallback((): ScheduleEvent[] => {\n+  //   return [];\n+  // }, []);\n \n-  // 주별 휴일설정을 이벤트로 변환하는 함수\n+  // 실제 예약 이벤트들을 가져오는 함수 (TODO: 실제 데이터베이스에서 로드)\n   const generateHolidayEvents = useCallback((): ScheduleEvent[] => {\n     console.log('generateHolidayEvents 호출됨:', { \n       weeklyHolidaySettingsCount: weeklyHolidaySettings.length, \n       staffListCount: staffList.length,\n@@ -646,44 +617,41 @@\n         }\n       }\n     });\n     \n-    console.log('generateHolidayEvents 완료:', { \n-      totalEvents: holidayEvents.length,\n-      holidayEvents: holidayEvents.map(e => ({ id: e.id, title: e.title, staffName: e.staffName }))\n-    });\n-    \n-    return holidayEvents;\n-  }, [holidaySettings, weeklyHolidaySettings, staffList, selectedStaffIds, currentDate]);\n+    // 동적 생성 로직 제거 - 저장된 스케줄 이벤트만 사용\n+    return [];\n+  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n \n   // 실제 예약 이벤트들을 가져오는 함수 (TODO: 실제 데이터베이스에서 로드)\n   const generateReservationEvents = useCallback((): ScheduleEvent[] => {\n     // 현재는 더미 데이터이지만, 실제로는 데이터베이스에서 예약 데이터를 로드해야 함\n     // TODO: dbManager에서 예약 데이터 로드 로직 추가\n     return [];\n   }, []);\n \n-  // 모든 이벤트 통합 (휴일 + 예약)\n+  // 모든 이벤트 통합 (저장된 스케줄 이벤트만 사용)\n   const allEvents = useMemo(() => {\n-    const holidayEvents = generateHolidayEvents();\n+    // generateHolidayEvents와 generateReservationEvents는 빈 배열 반환\n     const reservationEvents = generateReservationEvents();\n-    return [...holidayEvents, ...reservationEvents];\n-  }, [generateHolidayEvents, generateReservationEvents]);\n+    return [...reservationEvents]; // 실제로는 loadScheduleEvents에서 불러온 이벤트들을 사용\n+  }, [generateReservationEvents]);\n \n-  // 직원 목록이 로드된 후 이벤트 초기화\n-  useEffect(() => {\n-    setEvents(allEvents);\n-  }, [allEvents]);\n+  // 직원 목록이 로드된 후 이벤트 초기화 (비활성화 - loadScheduleEvents 사용)\n+  // useEffect(() => {\n+  //   setEvents(allEvents);\n+  // }, [allEvents]);\n \n-  // 달력 날짜 변경 시 휴일설정 새로고침\n-  useEffect(() => {\n-    loadHolidaySettings();\n-  }, [currentDate, loadHolidaySettings]);\n+  // 달력 날짜 변경 시 휴일설정 새로고침 (제거됨 - 불필요한 재렌더링 방지)\n+  // useEffect(() => {\n+  //   loadHolidaySettings();\n+  // }, [currentDate, loadHolidaySettings]);\n \n-  // 달력 날짜 변경 시 스케줄 이벤트 새로고침\n+  // 달력 월 변경 시에만 스케줄 이벤트 새로고침\n+  const currentMonth = `${currentDate.getFullYear()}-${currentDate.getMonth()}`;\n   useEffect(() => {\n     loadScheduleEvents();\n-  }, [currentDate, loadScheduleEvents]);\n+  }, [currentMonth, loadScheduleEvents]);\n \n   // 이벤트 핸들러들\n   const handleEventClick = (event: ScheduleEvent) => {\n     console.log('이벤트 클릭:', event);\n"
                },
                {
                    "date": 1761456993516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState, useEffect, useCallback, useMemo } from 'react';\n+import React, { useState, useEffect, useCallback } from 'react';\n import { useParams, useLocation } from 'react-router-dom';\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n@@ -113,22 +113,24 @@\n     return 'main';\n   };\n \n   // 지점 데이터 로드\n-  const loadBranchData = async () => {\n+  const loadBranchData = useCallback(async () => {\n     try {\n       const branchData = await dbManager.getAllBranches();\n       setBranches(branchData);\n       \n-      // 기본적으로 첫 번째 지점 선택 (전체가 아닌 첫 번째 실제 지점)\n-      const activeBranches = branchData.filter(branch => branch.name !== '전체');\n-      if (activeBranches.length > 0) {\n-        setSelectedBranchId(activeBranches[0].id);\n+      // 지점이 이미 선택되어 있지 않은 경우에만 첫 번째 지점 선택\n+      if (!selectedBranchId) {\n+        const activeBranches = branchData.filter(branch => branch.name !== '전체');\n+        if (activeBranches.length > 0) {\n+          setSelectedBranchId(activeBranches[0].id);\n+        }\n       }\n     } catch (error) {\n       console.error('지점 데이터 로드 실패:', error);\n     }\n-  };\n+  }, [selectedBranchId]);\n \n   // 지점 드랍다운 옵션 생성\n   const getBranchOptions = () => {\n     const activeBranches = branches.filter(branch => branch.name !== '전체');\n@@ -454,17 +456,23 @@\n         console.error('휴일 설정 마이그레이션 실패:', error);\n       }\n       \n       // 기본 데이터 로드\n-      loadBranchData();\n+      await loadBranchData();\n       loadCurrentUser();\n-      // loadHolidaySettings(); // 제거됨\n-      loadScheduleEvents();\n+      // 초기 스케줄 이벤트는 지점이 선택된 후에 로드\n     };\n     \n     initializeData();\n-  }, [loadCurrentUser, loadScheduleEvents]);\n+  }, [loadBranchData, loadCurrentUser]);\n \n+  // 지점이 선택된 후 초기 스케줄 이벤트 로드 (지점 변경 시만)\n+  useEffect(() => {\n+    if (selectedBranchId && !loading) {\n+      loadScheduleEvents();\n+    }\n+  }, [selectedBranchId]); // eslint-disable-line react-hooks/exhaustive-deps\n+\n   // 프로그램 데이터 로드\n   useEffect(() => {\n     loadProgramData();\n   }, [loadProgramData]);\n@@ -475,184 +483,33 @@\n       loadStaffData();\n     }\n   }, [selectedBranchId, currentProgram, loadStaffData]);\n \n-  // 더이상 사용하지 않는 함수들 (저장된 스케줄 이벤트 사용)\n-  // const generateHolidayEvents = useCallback((): ScheduleEvent[] => {\n-  //   return [];\n-  // }, []);\n+  // 지점 선택 변경 핸들러\n+  const handleBranchChange = useCallback((branchId: string) => {\n+    setSelectedBranchId(branchId);\n+    // 지점 변경 시에만 스케줄 이벤트 새로고침\n+    setTimeout(() => {\n+      loadScheduleEvents();\n+    }, 0);\n+  }, [loadScheduleEvents]);\n \n-  // 실제 예약 이벤트들을 가져오는 함수 (TODO: 실제 데이터베이스에서 로드)\n-  const generateHolidayEvents = useCallback((): ScheduleEvent[] => {\n-    console.log('generateHolidayEvents 호출됨:', { \n-      weeklyHolidaySettingsCount: weeklyHolidaySettings.length, \n-      staffListCount: staffList.length,\n-      selectedStaffIdsCount: selectedStaffIds.length,\n-      weeklyHolidaySettings: weeklyHolidaySettings.map(s => ({\n-        staffId: s.staffId,\n-        weekStartDate: s.weekStartDate,\n-        weekDays: Object.keys(s.weekDays)\n-      }))\n-    });\n+  // 달력 날짜 변경 핸들러 (최적화)\n+  const handleDateChange = useCallback((newDate: Date) => {\n+    const newMonth = `${newDate.getFullYear()}-${String(newDate.getMonth()).padStart(2, '0')}`;\n+    const oldMonth = `${currentDate.getFullYear()}-${String(currentDate.getMonth()).padStart(2, '0')}`;\n     \n-    const holidayEvents: ScheduleEvent[] = [];\n+    setCurrentDate(newDate);\n     \n-    // 각 코치별로 휴일 이벤트 생성\n-    staffList.forEach(staff => {\n-      if (staff.role === '코치' && selectedStaffIds.includes(staff.id)) {\n-        console.log(`${staff.name} 코치의 휴일 이벤트 생성 중...`);\n-        \n-        // 현재 월의 모든 날짜에 대해 휴일 여부 확인\n-        const year = currentDate.getFullYear();\n-        const month = currentDate.getMonth();\n-        const lastDay = new Date(year, month + 1, 0).getDate();\n-        \n-        for (let day = 1; day <= lastDay; day++) {\n-          const date = new Date(year, month, day);\n-          const dateStr = date.toISOString().split('T')[0];\n-          const dayOfWeek = date.getDay(); // 0: 일요일, 1: 월요일, ..., 6: 토요일\n-          \n-          // 해당 날짜가 속한 주의 월요일 계산\n-          const mondayOfWeek = new Date(date);\n-          const daysFromMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // 일요일은 6, 나머지는 dayOfWeek - 1\n-          mondayOfWeek.setDate(date.getDate() - daysFromMonday);\n-          const weekStartDate = mondayOfWeek.toISOString().split('T')[0];\n-          \n-          console.log(`${staff.name} - ${dateStr} 주 계산:`, {\n-            originalDate: dateStr,\n-            dayOfWeek,\n-            daysFromMonday,\n-            calculatedWeekStartDate: weekStartDate\n-          });\n-          \n-          // 주별 휴일 설정 찾기\n-          const weeklySettings = weeklyHolidaySettings.find(\n-            s => s.staffId === staff.id && s.weekStartDate === weekStartDate\n-          );\n-          \n-          console.log(`${staff.name} - ${dateStr}:`, { \n-            weekStartDate, \n-            hasWeeklySettings: !!weeklySettings,\n-            dayOfWeek \n-          });\n-          \n-          let isHoliday = false;\n-          let breakTimes: Array<{ start: number; end: number; name: string; }> = [];\n-          \n-          if (weeklySettings) {\n-            console.log(`${staff.name} - 주별 설정 발견:`, weeklySettings);\n-            // 요일별 키 매핑\n-            const dayKeys = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n-            const dayKey = dayKeys[dayOfWeek] as keyof typeof weeklySettings.weekDays;\n-            const daySettings = weeklySettings.weekDays[dayKey];\n-            \n-            if (daySettings) {\n-              isHoliday = daySettings.isHoliday;\n-              if (daySettings.breakTimes) {\n-                breakTimes = daySettings.breakTimes\n-                  .filter(bt => bt.name && bt.name.trim() !== '')\n-                  .map(bt => ({\n-                    start: bt.start,\n-                    end: bt.end,\n-                    name: bt.name!\n-                  }));\n-              }\n-            }\n-          } else {\n-            // 주별 설정이 없으면 기존 일별 설정 확인\n-            const dailySetting = holidaySettings.find(s => s.staffId === staff.id && s.date === dateStr);\n-            if (dailySetting) {\n-              isHoliday = dailySetting.isHoliday;\n-            } else {\n-              // 기본값: 주말은 휴일\n-              isHoliday = dayOfWeek === 0 || dayOfWeek === 6;\n-            }\n-          }\n-          \n-          if (isHoliday) {\n-            console.log(`${staff.name} - ${dateStr}: 휴일로 설정됨`);\n-            const startTime = new Date(date);\n-            startTime.setHours(0, 0, 0, 0);\n-            const endTime = new Date(date);\n-            endTime.setHours(23, 59, 59, 999);\n-            \n-            holidayEvents.push({\n-              id: `holiday-${staff.id}-${dateStr}`,\n-              title: '휴일',\n-              startTime,\n-              endTime,\n-              staffId: staff.id,\n-              staffName: staff.name,\n-              type: 'holiday',\n-              color: '#f87171', // 빨간색으로 휴일 표시\n-              description: `${staff.name} 코치 휴일`,\n-              sourceType: 'weekly_holiday',\n-              sourceId: `temp-${staff.id}-${dateStr}`\n-            });\n-          } else {\n-            // 근무일인 경우 휴게시간 이벤트 생성\n-            if (breakTimes.length > 0) {\n-              console.log(`${staff.name} - ${dateStr}: ${breakTimes.length}개 휴게시간 생성`);\n-            }\n-            breakTimes.forEach((breakTime, index) => {\n-              const breakStartTime = new Date(date);\n-              breakStartTime.setHours(breakTime.start, 0, 0, 0);\n-              const breakEndTime = new Date(date);\n-              breakEndTime.setHours(breakTime.end, 0, 0, 0);\n-              \n-              holidayEvents.push({\n-                id: `break-${staff.id}-${dateStr}-${index}`,\n-                title: breakTime.name || '휴게시간',\n-                startTime: breakStartTime,\n-                endTime: breakEndTime,\n-                staffId: staff.id,\n-                staffName: staff.name,\n-                type: 'break',\n-                color: '#fbbf24', // 노란색으로 휴게시간 표시\n-                description: `${staff.name} 코치 ${breakTime.name || '휴게시간'}`,\n-                sourceType: 'weekly_holiday',\n-                sourceId: `temp-${staff.id}-${dateStr}`\n-              });\n-            });\n-          }\n-        }\n-      }\n-    });\n-    \n-    // 동적 생성 로직 제거 - 저장된 스케줄 이벤트만 사용\n-    return [];\n-  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n+    // 월이 변경된 경우에만 스케줄 이벤트 새로고침\n+    if (newMonth !== oldMonth) {\n+      // 약간의 지연을 두어 상태 업데이트가 완료된 후 로드\n+      setTimeout(() => {\n+        loadScheduleEvents();\n+      }, 0);\n+    }\n+  }, [currentDate, loadScheduleEvents]);\n \n-  // 실제 예약 이벤트들을 가져오는 함수 (TODO: 실제 데이터베이스에서 로드)\n-  const generateReservationEvents = useCallback((): ScheduleEvent[] => {\n-    // 현재는 더미 데이터이지만, 실제로는 데이터베이스에서 예약 데이터를 로드해야 함\n-    // TODO: dbManager에서 예약 데이터 로드 로직 추가\n-    return [];\n-  }, []);\n-\n-  // 모든 이벤트 통합 (저장된 스케줄 이벤트만 사용)\n-  const allEvents = useMemo(() => {\n-    // generateHolidayEvents와 generateReservationEvents는 빈 배열 반환\n-    const reservationEvents = generateReservationEvents();\n-    return [...reservationEvents]; // 실제로는 loadScheduleEvents에서 불러온 이벤트들을 사용\n-  }, [generateReservationEvents]);\n-\n-  // 직원 목록이 로드된 후 이벤트 초기화 (비활성화 - loadScheduleEvents 사용)\n-  // useEffect(() => {\n-  //   setEvents(allEvents);\n-  // }, [allEvents]);\n-\n-  // 달력 날짜 변경 시 휴일설정 새로고침 (제거됨 - 불필요한 재렌더링 방지)\n-  // useEffect(() => {\n-  //   loadHolidaySettings();\n-  // }, [currentDate, loadHolidaySettings]);\n-\n-  // 달력 월 변경 시에만 스케줄 이벤트 새로고침\n-  const currentMonth = `${currentDate.getFullYear()}-${currentDate.getMonth()}`;\n-  useEffect(() => {\n-    loadScheduleEvents();\n-  }, [currentMonth, loadScheduleEvents]);\n-\n   // 이벤트 핸들러들\n   const handleEventClick = (event: ScheduleEvent) => {\n     console.log('이벤트 클릭:', event);\n     // 여기서 이벤트 상세 보기 모달 등을 열 수 있습니다\n@@ -714,9 +571,9 @@\n             <FilterLabel>지점 선택:</FilterLabel>\n             <DropdownWrapper>\n               <CustomDropdown\n                 value={selectedBranchId}\n-                onChange={(value: string) => setSelectedBranchId(value)}\n+                onChange={handleBranchChange}\n                 options={getBranchOptions()}\n                 placeholder=\"지점을 선택하세요\"\n               />\n             </DropdownWrapper>\n@@ -742,9 +599,9 @@\n                     events={events}\n                     staffList={staffList}\n                     selectedStaffIds={selectedStaffIds}\n                     onViewChange={setCalendarView}\n-                    onDateChange={setCurrentDate}\n+                    onDateChange={handleDateChange}\n                     onStaffFilter={setSelectedStaffIds}\n                     onEventClick={handleEventClick}\n                     onEventCreate={handleEventCreate}\n                     onHolidaySettings={handleHolidaySettings}\n"
                },
                {
                    "date": 1761460101673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,11 +156,18 @@\n       setCurrentProgram(null);\n     }\n   }, [programId]);\n \n-  // 직원 데이터 로드\n+  // 직원 데이터 로드 (횟수제 프로그램용)\n   const loadStaffData = useCallback(async () => {\n     try {\n+      // 기간제 프로그램인 경우 직원 데이터 로드하지 않음\n+      if (currentProgram?.type === '기간제') {\n+        setStaffList([]);\n+        setSelectedStaffIds([]);\n+        return;\n+      }\n+\n       const allStaff = await dbManager.getAllStaff();\n       let activeCoaches = allStaff.filter(staff => \n         staff.isActive && staff.role === '코치'\n       );\n@@ -198,8 +205,121 @@\n       console.error('직원 데이터 로드 실패:', error);\n     }\n   }, [selectedBranchId, currentProgram]);\n \n+  // 기간제 수강 정보 로드\n+  const loadPeriodCourseEnrollments = useCallback(async () => {\n+    try {\n+      if (!selectedBranchId || !currentProgram) {\n+        return [];\n+      }\n+\n+      // 해당 지점의 활성 수강 정보 조회\n+      const allEnrollments = await dbManager.getAllCourseEnrollments();\n+      const branchEnrollments = allEnrollments.filter(enrollment => \n+        enrollment.branchId === selectedBranchId &&\n+        enrollment.programId === currentProgram.id &&\n+        enrollment.programType === '기간제' &&\n+        enrollment.enrollmentStatus === 'active' &&\n+        enrollment.startDate &&\n+        enrollment.endDate\n+      );\n+\n+      return branchEnrollments;\n+    } catch (error) {\n+      console.error('기간제 수강 정보 로드 실패:', error);\n+      return [];\n+    }\n+  }, [selectedBranchId, currentProgram]);\n+\n+  // 기간제 수강 정보를 달력 이벤트로 변환\n+  const generatePeriodEvents = useCallback(async () => {\n+    const isPeriodProgram = currentProgram?.type === '기간제';\n+    \n+    if (!isPeriodProgram || !selectedBranchId || !currentProgram) {\n+      return [];\n+    }\n+\n+    try {\n+      const periodEnrollments = await loadPeriodCourseEnrollments();\n+      const periodEvents: ScheduleEvent[] = [];\n+\n+      // 프로그램별로 그룹화하여 수강생 수 계산\n+      const programGroups: { [key: string]: { \n+        enrollments: any[], \n+        dates: { startDate: Date, endDate: Date }[] \n+      } } = {};\n+\n+      // 수강 정보를 프로그램별로 그룹화\n+      for (const enrollment of periodEnrollments) {\n+        const key = `${enrollment.programId}-${enrollment.programName}`;\n+        if (!programGroups[key]) {\n+          programGroups[key] = { enrollments: [], dates: [] };\n+        }\n+        programGroups[key].enrollments.push(enrollment);\n+        \n+        // 수강 기간 추가\n+        if (enrollment.startDate && enrollment.endDate) {\n+          programGroups[key].dates.push({\n+            startDate: new Date(enrollment.startDate),\n+            endDate: new Date(enrollment.endDate)\n+          });\n+        }\n+      }\n+\n+      // 각 프로그램별로 달력 이벤트 생성\n+      for (const [programKey, group] of Object.entries(programGroups)) {\n+        const programName = group.enrollments[0]?.programName || '알 수 없는 프로그램';\n+\n+        // 모든 수강 기간을 고려해서 전체 기간 계산\n+        if (group.dates.length > 0) {\n+          const earliestStart = new Date(Math.min(...group.dates.map(d => d.startDate.getTime())));\n+          const latestEnd = new Date(Math.max(...group.dates.map(d => d.endDate.getTime())));\n+\n+          // 전체 기간에 대해 하루 종일 이벤트 생성\n+          const currentDate = new Date(earliestStart);\n+          while (currentDate <= latestEnd) {\n+            // 해당 날짜에 수강 중인 회원 수 계산\n+            const activeCount = group.dates.filter(dateRange => \n+              currentDate >= dateRange.startDate && currentDate <= dateRange.endDate\n+            ).length;\n+\n+            if (activeCount > 0) {\n+              const eventStartTime = new Date(currentDate);\n+              eventStartTime.setHours(0, 0, 0, 0);\n+              const eventEndTime = new Date(currentDate);\n+              eventEndTime.setHours(23, 59, 59, 999);\n+\n+              periodEvents.push({\n+                id: `period-${programKey}-${currentDate.toISOString().split('T')[0]}`,\n+                title: `${programName} ${activeCount}명`,\n+                startTime: eventStartTime,\n+                endTime: eventEndTime,\n+                staffId: 'period-program', // 기간제는 특정 코치에 속하지 않음\n+                staffName: '기간제 프로그램',\n+                type: 'class',\n+                color: '#10b981', // 녹색 계열로 기간제 표시\n+                description: `${programName} 기간제 수강생 ${activeCount}명`,\n+                sourceType: 'period_enrollment',\n+                sourceId: programKey,\n+                programId: group.enrollments[0]?.programId,\n+                programName: programName\n+              });\n+            }\n+\n+            currentDate.setDate(currentDate.getDate() + 1);\n+          }\n+        }\n+      }\n+\n+      console.log('기간제 달력 이벤트 생성:', periodEvents.length, '개');\n+      return periodEvents;\n+    } catch (error) {\n+      console.error('기간제 달력 이벤트 생성 실패:', error);\n+      return [];\n+    }\n+  }, [selectedBranchId, currentProgram, loadPeriodCourseEnrollments]);\n+\n   // 휴일설정 로드 (더 이상 사용 안함 - 스케줄 이벤트로 대체)\n   // const loadHolidaySettings = useCallback(async () => {\n   //   try {\n   //     const currentMonth = new Date();\n@@ -409,20 +529,28 @@\n       startDate.setDate(startDate.getDate() - 7); // 현재 날짜 1주 전부터\n       const endDate = new Date(currentDate);\n       endDate.setDate(endDate.getDate() + 14); // 현재 날짜 2주 후까지\n       \n-      const savedEvents = await dbManager.getAllScheduleEvents(startDate, endDate);\n-      console.log('저장된 스케줄 이벤트 로드:', savedEvents.length, '개');\n+      const isPeriodProgram = currentProgram?.type === '기간제';\n+      let allEvents: ScheduleEvent[] = [];\n+\n+      if (isPeriodProgram) {\n+        // 기간제 프로그램인 경우 기간제 이벤트 생성\n+        const periodEvents = await generatePeriodEvents();\n+        allEvents = [...periodEvents];\n+        console.log('기간제 스케줄 이벤트 로드 완료:', periodEvents.length, '개');\n+      } else {\n+        // 횟수제 프로그램인 경우 저장된 스케줄 이벤트 로드 (코치 스케줄 등)\n+        const savedEvents = await dbManager.getAllScheduleEvents(startDate, endDate);\n+        allEvents = [...savedEvents];\n+        console.log('횟수제 저장된 스케줄 이벤트 로드:', savedEvents.length, '개');\n+      }\n       \n-      // 기존 저장된 이벤트들을 제거하고 새로 로드된 이벤트들을 추가\n-      setEvents(prev => [\n-        ...prev.filter(e => !e.sourceType || e.sourceType !== 'weekly_holiday'),\n-        ...savedEvents\n-      ]);\n+      setEvents(allEvents);\n     } catch (error) {\n       console.error('스케줄 이벤트 로드 실패:', error);\n     }\n-  }, [currentDate]);\n+  }, [currentDate, currentProgram, generatePeriodEvents]);\n \n   // 프로그램 정보 로드\n   useEffect(() => {\n     const loadData = async () => {\n@@ -464,14 +592,14 @@\n     \n     initializeData();\n   }, [loadBranchData, loadCurrentUser]);\n \n-  // 지점이 선택된 후 초기 스케줄 이벤트 로드 (지점 변경 시만)\n+  // 지점이 선택된 후 초기 스케줄 이벤트 로드 (지점/프로그램 변경 시)\n   useEffect(() => {\n-    if (selectedBranchId && !loading) {\n+    if (selectedBranchId && currentProgram && !loading) {\n       loadScheduleEvents();\n     }\n-  }, [selectedBranchId]); // eslint-disable-line react-hooks/exhaustive-deps\n+  }, [selectedBranchId, currentProgram, loadScheduleEvents]); // eslint-disable-line react-hooks/exhaustive-deps\n \n   // 프로그램 데이터 로드\n   useEffect(() => {\n     loadProgramData();\n@@ -591,28 +719,51 @@\n           ) : menuType === 'program' ? (\n             // 프로그램별 예약에서는 달력 컴포넌트 표시 (지점이 선택된 경우만)\n             selectedBranchId ? (\n               currentProgram ? (\n-                staffList.length > 0 ? (\n+                currentProgram.type === '횟수제' ? (\n+                  // 횟수제 프로그램인 경우 코치 스케줄 표시\n+                  staffList.length > 0 ? (\n+                    <ScheduleCalendar\n+                      view={calendarView}\n+                      currentDate={currentDate}\n+                      events={events}\n+                      staffList={staffList}\n+                      selectedStaffIds={selectedStaffIds}\n+                      onViewChange={setCalendarView}\n+                      onDateChange={handleDateChange}\n+                      onStaffFilter={setSelectedStaffIds}\n+                      onEventClick={handleEventClick}\n+                      onEventCreate={handleEventCreate}\n+                      onHolidaySettings={handleHolidaySettings}\n+                      weeklyHolidaySettings={weeklyHolidaySettings}\n+                    />\n+                  ) : (\n+                    <PlaceholderContent>\n+                      선택한 지점에 \"{currentProgram.name}\" 프로그램을 담당하는 코치가 없습니다.\n+                      <br />\n+                      직원 관리에서 코치의 담당 프로그램을 설정해주세요.\n+                    </PlaceholderContent>\n+                  )\n+                ) : currentProgram.type === '기간제' ? (\n+                  // 기간제 프로그램인 경우 기간제 스케줄 표시\n                   <ScheduleCalendar\n                     view={calendarView}\n                     currentDate={currentDate}\n                     events={events}\n-                    staffList={staffList}\n-                    selectedStaffIds={selectedStaffIds}\n+                    staffList={[]} // 기간제는 코치별 필터링 없음\n+                    selectedStaffIds={[]}\n                     onViewChange={setCalendarView}\n                     onDateChange={handleDateChange}\n-                    onStaffFilter={setSelectedStaffIds}\n+                    onStaffFilter={() => {}} // 기간제는 코치 필터링 없음\n                     onEventClick={handleEventClick}\n                     onEventCreate={handleEventCreate}\n-                    onHolidaySettings={handleHolidaySettings}\n-                    weeklyHolidaySettings={weeklyHolidaySettings}\n+                    onHolidaySettings={undefined} // 기간제는 휴일설정 없음\n+                    weeklyHolidaySettings={[]}\n                   />\n                 ) : (\n                   <PlaceholderContent>\n-                    선택한 지점에 \"{currentProgram.name}\" 프로그램을 담당하는 코치가 없습니다.\n-                    <br />\n-                    직원 관리에서 코치의 담당 프로그램을 설정해주세요.\n+                    알 수 없는 프로그램 타입입니다: {currentProgram.type}\n                   </PlaceholderContent>\n                 )\n               ) : (\n                 <PlaceholderContent>\n"
                },
                {
                    "date": 1761460460422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -758,8 +758,9 @@\n                     onEventClick={handleEventClick}\n                     onEventCreate={handleEventCreate}\n                     onHolidaySettings={undefined} // 기간제는 휴일설정 없음\n                     weeklyHolidaySettings={[]}\n+                    allowEmptyStaff={true} // 기간제는 코치가 없어도 달력 표시\n                   />\n                 ) : (\n                   <PlaceholderContent>\n                     알 수 없는 프로그램 타입입니다: {currentProgram.type}\n"
                },
                {
                    "date": 1761460654094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,895 @@\n+import React, { useState, useEffect, useCallback } from 'react';\n+import { useParams, useLocation } from 'react-router-dom';\n+import styled from 'styled-components';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n+import CustomDropdown from '../../../components/CustomDropdown';\n+import { dbManager, type Branch, type Program } from '../../../utils/indexedDB';\n+import { getCurrentUser } from '../../../utils/authUtils';\n+import { migrateHolidaySettingsToWeekly, checkMigrationStatus } from '../../../utils/holidayMigration';\n+import { \n+  ScheduleCalendar, \n+  HolidayModal,\n+  WeeklyHolidayModal,\n+  type CalendarView, \n+  type ScheduleEvent, \n+  type StaffInfo,\n+  type HolidaySettings,\n+  type WeeklyHolidaySettings,\n+  assignStaffColor \n+} from '../../../components/Calendar';\n+\n+const Container = styled.div`\n+  width: 100%;\n+`;\n+\n+const ContentContainer = styled.div`\n+  padding: 24px;\n+  background-color: ${AppColors.surface};\n+  border-radius: 8px;\n+  border: 1px solid ${AppColors.borderLight};\n+`;\n+\n+const FilterContainer = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 16px;\n+  margin-bottom: 24px;\n+  padding: 16px;\n+  background-color: ${AppColors.background};\n+  border-radius: 8px;\n+  border: 1px solid ${AppColors.borderLight};\n+  justify-content: flex-start;\n+`;\n+\n+const ProgramTitle = styled.h3`\n+  font-size: ${AppTextStyles.title2.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.primary};\n+  margin: 0;\n+  margin-right: 24px;\n+`;\n+\n+const FilterLabel = styled.label`\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  font-weight: 500;\n+  color: ${AppColors.onSurface};\n+  min-width: 80px;\n+  flex-shrink: 0;\n+`;\n+\n+const DropdownWrapper = styled.div`\n+  width: 250px;\n+  flex-shrink: 0;\n+`;\n+\n+const PlaceholderContent = styled.div`\n+  padding: 48px;\n+  text-align: center;\n+  color: ${AppColors.onSurface}60;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  border: 2px dashed ${AppColors.borderLight};\n+  border-radius: 8px;\n+`;\n+\n+const ReservationPage: React.FC = () => {\n+  const { programId } = useParams<{ programId: string }>();\n+  const location = useLocation();\n+  const [loading, setLoading] = useState(false);\n+  \n+  // 지점 관련 상태\n+  const [branches, setBranches] = useState<Branch[]>([]);\n+  const [selectedBranchId, setSelectedBranchId] = useState<string>('');\n+  \n+  // 프로그램 관련 상태\n+  const [currentProgram, setCurrentProgram] = useState<Program | null>(null);\n+  \n+  // 달력 관련 상태\n+  const [calendarView, setCalendarView] = useState<CalendarView>('week');\n+  const [currentDate, setCurrentDate] = useState(new Date());\n+  const [staffList, setStaffList] = useState<StaffInfo[]>([]);\n+  const [selectedStaffIds, setSelectedStaffIds] = useState<string[]>([]);\n+  const [events, setEvents] = useState<ScheduleEvent[]>([]);\n+\n+  // 휴일설정 모달 상태\n+  const [isHolidayModalOpen, setIsHolidayModalOpen] = useState(false);\n+  const [isWeeklyHolidayModalOpen, setIsWeeklyHolidayModalOpen] = useState(false);\n+  const [holidayModalStaffId, setHolidayModalStaffId] = useState<string | undefined>();\n+  const [weeklyHolidayModalStaffId, setWeeklyHolidayModalStaffId] = useState<string | undefined>();\n+  const [currentUser, setCurrentUser] = useState<{ id: string; role: 'master' | 'coach' | 'admin' } | undefined>();\n+  const holidaySettings: HolidaySettings[] = []; // 빈 배열로 고정\n+  const [weeklyHolidaySettings] = useState<WeeklyHolidaySettings[]>([]); // 빈 배열로 고정\n+\n+  // 현재 선택된 메뉴 확인\n+  const getMenuType = () => {\n+    const path = location.pathname;\n+    if (path.includes('/program/')) return 'program';\n+    if (path.includes('/new') || path.endsWith('/new')) return 'new';\n+    if (path.includes('/timetable') || path.endsWith('/timetable')) return 'timetable';\n+    if (path.includes('/batch') || path.endsWith('/batch')) return 'batch';\n+    if (path.includes('/waiting') || path.endsWith('/waiting')) return 'waiting';\n+    if (path.includes('/auto-remind') || path.endsWith('/auto-remind')) return 'auto-remind';\n+    if (path === '/cms/reservation' || path === '/cms/reservation/') return 'main';\n+    return 'main';\n+  };\n+\n+  // 지점 데이터 로드\n+  const loadBranchData = useCallback(async () => {\n+    try {\n+      const branchData = await dbManager.getAllBranches();\n+      setBranches(branchData);\n+      \n+      // 지점이 이미 선택되어 있지 않은 경우에만 첫 번째 지점 선택\n+      if (!selectedBranchId) {\n+        const activeBranches = branchData.filter(branch => branch.name !== '전체');\n+        if (activeBranches.length > 0) {\n+          setSelectedBranchId(activeBranches[0].id);\n+        }\n+      }\n+    } catch (error) {\n+      console.error('지점 데이터 로드 실패:', error);\n+    }\n+  }, [selectedBranchId]);\n+\n+  // 지점 드랍다운 옵션 생성\n+  const getBranchOptions = () => {\n+    const activeBranches = branches.filter(branch => branch.name !== '전체');\n+    return activeBranches.map(branch => ({\n+      value: branch.id,\n+      label: branch.name,\n+      description: branch.address\n+    }));\n+  };\n+\n+  // 프로그램 데이터 로드\n+  const loadProgramData = useCallback(async () => {\n+    if (programId) {\n+      try {\n+        const allPrograms = await dbManager.getAllPrograms();\n+        const foundProgram = allPrograms.find(p => p.id === programId);\n+        setCurrentProgram(foundProgram || null);\n+      } catch (error) {\n+        console.error('프로그램 데이터 로드 실패:', error);\n+        setCurrentProgram(null);\n+      }\n+    } else {\n+      setCurrentProgram(null);\n+    }\n+  }, [programId]);\n+\n+  // 직원 데이터 로드 (횟수제 프로그램용)\n+  const loadStaffData = useCallback(async () => {\n+    try {\n+      // 기간제 프로그램인 경우 직원 데이터 로드하지 않음\n+      if (currentProgram?.type === '기간제') {\n+        setStaffList([]);\n+        setSelectedStaffIds([]);\n+        return;\n+      }\n+\n+      const allStaff = await dbManager.getAllStaff();\n+      let activeCoaches = allStaff.filter(staff => \n+        staff.isActive && staff.role === '코치'\n+      );\n+      \n+      // 지점이 선택된 경우 해당 지점의 코치만 필터링\n+      if (selectedBranchId) {\n+        activeCoaches = activeCoaches.filter(staff => staff.branchId === selectedBranchId);\n+      }\n+      \n+      // 프로그램이 선택된 경우 해당 프로그램을 담당하는 코치만 필터링\n+      if (currentProgram) {\n+        activeCoaches = activeCoaches.filter(staff => staff.program === currentProgram.name);\n+      }\n+      \n+      const staffInfo: StaffInfo[] = activeCoaches.map((staff, index) => ({\n+        id: staff.id,\n+        name: staff.name,\n+        role: staff.role,\n+        program: staff.program || '', // 담당 프로그램 정보 표시\n+        isActive: staff.isActive,\n+        color: assignStaffColor(staff.id, index),\n+        contractStartDate: staff.contractStartDate,\n+        contractEndDate: staff.contractEndDate || undefined,\n+        workingHours: {\n+          start: 9, // 기본 근무 시간 (필요시 직원별 설정으로 확장 가능)\n+          end: 21\n+        }\n+      }));\n+      \n+      setStaffList(staffInfo);\n+      \n+      // 기본적으로 모든 코치 선택\n+      setSelectedStaffIds(staffInfo.map(staff => staff.id));\n+    } catch (error) {\n+      console.error('직원 데이터 로드 실패:', error);\n+    }\n+  }, [selectedBranchId, currentProgram]);\n+\n+  // 기간제 수강 정보 로드\n+  const loadPeriodCourseEnrollments = useCallback(async () => {\n+    try {\n+      if (!selectedBranchId || !currentProgram) {\n+        console.log('기간제 수강 정보 로드 조건 미충족:', { selectedBranchId, currentProgram: currentProgram?.name });\n+        return [];\n+      }\n+\n+      console.log('기간제 수강 정보 로드 시작:', { \n+        branchId: selectedBranchId, \n+        programId: currentProgram.id, \n+        programName: currentProgram.name,\n+        programType: currentProgram.type \n+      });\n+\n+      // 해당 지점의 활성 수강 정보 조회\n+      const allEnrollments = await dbManager.getAllCourseEnrollments();\n+      console.log('전체 수강 정보 개수:', allEnrollments.length);\n+\n+      const branchEnrollments = allEnrollments.filter(enrollment => {\n+        const branchMatch = enrollment.branchId === selectedBranchId;\n+        const programMatch = enrollment.programId === currentProgram.id;\n+        const typeMatch = enrollment.programType === '기간제';\n+        const statusMatch = enrollment.enrollmentStatus === 'active';\n+        const dateMatch = enrollment.startDate && enrollment.endDate;\n+\n+        console.log('수강 정보 체크:', {\n+          enrollmentId: enrollment.id,\n+          branchId: enrollment.branchId,\n+          programId: enrollment.programId,\n+          programType: enrollment.programType,\n+          enrollmentStatus: enrollment.enrollmentStatus,\n+          startDate: enrollment.startDate,\n+          endDate: enrollment.endDate,\n+          memberName: enrollment.memberName,\n+          // 필터링 조건 체크 결과\n+          branchMatch,\n+          programMatch,\n+          typeMatch,\n+          statusMatch,\n+          dateMatch,\n+          // 현재 선택된 값들\n+          selectedBranchId,\n+          currentProgramId: currentProgram.id,\n+          currentProgramName: currentProgram.name\n+        });\n+\n+        return branchMatch && programMatch && typeMatch && statusMatch && dateMatch;\n+      });\n+\n+      console.log('필터링된 기간제 수강 정보:', branchEnrollments.length, '건');\n+      branchEnrollments.forEach(enrollment => {\n+        console.log('- 회원:', enrollment.memberName, '기간:', enrollment.startDate, '~', enrollment.endDate);\n+      });\n+\n+      return branchEnrollments;\n+    } catch (error) {\n+      console.error('기간제 수강 정보 로드 실패:', error);\n+      return [];\n+    }\n+  }, [selectedBranchId, currentProgram]);\n+\n+  // 기간제 수강 정보를 달력 이벤트로 변환\n+  const generatePeriodEvents = useCallback(async () => {\n+    const isPeriodProgram = currentProgram?.type === '기간제';\n+    \n+    console.log('기간제 이벤트 생성 시작:', { \n+      isPeriodProgram, \n+      selectedBranchId, \n+      currentProgram: currentProgram?.name \n+    });\n+    \n+    if (!isPeriodProgram || !selectedBranchId || !currentProgram) {\n+      console.log('기간제 이벤트 생성 조건 미충족');\n+      return [];\n+    }\n+\n+    try {\n+      const periodEnrollments = await loadPeriodCourseEnrollments();\n+      console.log('로드된 기간제 수강 정보:', periodEnrollments.length, '건');\n+      \n+      if (periodEnrollments.length === 0) {\n+        console.log('기간제 수강 정보가 없습니다');\n+        return [];\n+      }\n+\n+      const periodEvents: ScheduleEvent[] = [];\n+\n+      // 프로그램별로 그룹화하여 수강생 수 계산\n+      const programGroups: { [key: string]: { \n+        enrollments: any[], \n+        dates: { startDate: Date, endDate: Date }[] \n+      } } = {};\n+\n+      // 수강 정보를 프로그램별로 그룹화\n+      for (const enrollment of periodEnrollments) {\n+        const key = `${enrollment.programId}-${enrollment.programName}`;\n+        if (!programGroups[key]) {\n+          programGroups[key] = { enrollments: [], dates: [] };\n+        }\n+        programGroups[key].enrollments.push(enrollment);\n+        \n+        // 수강 기간 추가\n+        if (enrollment.startDate && enrollment.endDate) {\n+          const startDate = new Date(enrollment.startDate);\n+          const endDate = new Date(enrollment.endDate);\n+          \n+          console.log('수강 기간 파싱:', {\n+            memberName: enrollment.memberName,\n+            startDateStr: enrollment.startDate,\n+            endDateStr: enrollment.endDate,\n+            startDate: startDate,\n+            endDate: endDate\n+          });\n+          \n+          programGroups[key].dates.push({ startDate, endDate });\n+        }\n+      }\n+\n+      console.log('프로그램 그룹:', Object.keys(programGroups));\n+\n+      // 각 프로그램별로 달력 이벤트 생성\n+      for (const [programKey, group] of Object.entries(programGroups)) {\n+        const programName = group.enrollments[0]?.programName || '알 수 없는 프로그램';\n+        console.log('프로그램 처리:', programName, '수강생:', group.enrollments.length, '명');\n+\n+        // 모든 수강 기간을 고려해서 전체 기간 계산\n+        if (group.dates.length > 0) {\n+          const earliestStart = new Date(Math.min(...group.dates.map(d => d.startDate.getTime())));\n+          const latestEnd = new Date(Math.max(...group.dates.map(d => d.endDate.getTime())));\n+\n+          console.log('전체 기간:', earliestStart, '~', latestEnd);\n+\n+          // 전체 기간에 대해 하루 종일 이벤트 생성\n+          const currentDate = new Date(earliestStart);\n+          let eventCount = 0;\n+          \n+          while (currentDate <= latestEnd) {\n+            // 해당 날짜에 수강 중인 회원 수 계산\n+            const activeCount = group.dates.filter(dateRange => \n+              currentDate >= dateRange.startDate && currentDate <= dateRange.endDate\n+            ).length;\n+\n+            if (activeCount > 0) {\n+              const eventStartTime = new Date(currentDate);\n+              eventStartTime.setHours(0, 0, 0, 0);\n+              const eventEndTime = new Date(currentDate);\n+              eventEndTime.setHours(23, 59, 59, 999);\n+\n+              const event = {\n+                id: `period-${programKey}-${currentDate.toISOString().split('T')[0]}`,\n+                title: `${programName} ${activeCount}명`,\n+                startTime: eventStartTime,\n+                endTime: eventEndTime,\n+                staffId: 'period-program', // 기간제는 특정 코치에 속하지 않음\n+                staffName: '기간제 프로그램',\n+                type: 'class' as const,\n+                color: '#10b981', // 녹색 계열로 기간제 표시\n+                description: `${programName} 기간제 수강생 ${activeCount}명`,\n+                sourceType: 'period_enrollment' as const,\n+                sourceId: programKey,\n+                programId: group.enrollments[0]?.programId,\n+                programName: programName\n+              };\n+\n+              periodEvents.push(event);\n+              eventCount++;\n+              \n+              if (eventCount <= 5) { // 처음 5개만 로그 출력\n+                console.log('이벤트 생성:', {\n+                  date: currentDate.toISOString().split('T')[0],\n+                  title: event.title,\n+                  activeCount\n+                });\n+              }\n+            }\n+\n+            currentDate.setDate(currentDate.getDate() + 1);\n+          }\n+          \n+          console.log(`${programName} - 총 ${eventCount}개 이벤트 생성`);\n+        }\n+      }\n+\n+      console.log('기간제 달력 이벤트 생성 완료:', periodEvents.length, '개');\n+      return periodEvents;\n+    } catch (error) {\n+      console.error('기간제 달력 이벤트 생성 실패:', error);\n+      return [];\n+    }\n+  }, [selectedBranchId, currentProgram, loadPeriodCourseEnrollments]);\n+\n+  // 휴일설정 로드 (더 이상 사용 안함 - 스케줄 이벤트로 대체)\n+  // const loadHolidaySettings = useCallback(async () => {\n+  //   try {\n+  //     const currentMonth = new Date();\n+  //     const startDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n+  //     const endDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n+  //     \n+  //     const startDateStr = startDate.toISOString().split('T')[0];\n+  //     const endDateStr = endDate.toISOString().split('T')[0];\n+  //     \n+  //     const settings = await dbManager.getHolidaySettingsByDateRange(startDateStr, endDateStr);\n+  //     setHolidaySettings(settings);\n+  //   } catch (error) {\n+  //     console.error('휴일설정 로드 실패:', error);\n+  //   }\n+  // }, []);\n+\n+  // 현재 사용자 정보 로드\n+  const loadCurrentUser = useCallback(async () => {\n+    try {\n+      const user = await getCurrentUser();\n+      if (user) {\n+        setCurrentUser(user);\n+      }\n+    } catch (error) {\n+      console.error('현재 사용자 정보 로드 실패:', error);\n+    }\n+  }, []);\n+\n+  // 휴일설정 모달 관련 함수들 (주별 휴일설정으로 변경)\n+  const handleHolidaySettings = async (staffId?: string) => {\n+    // 권한 체크\n+    if (!currentUser) {\n+      alert('사용자 정보를 확인할 수 없습니다.');\n+      return;\n+    }\n+\n+    // 특정 직원의 휴일설정인 경우 권한 체크\n+    if (staffId) {\n+      // 마스터 권한이 아니고 본인이 아닌 경우 접근 차단\n+      if (currentUser.role !== 'master' && currentUser.id !== staffId) {\n+        alert('권한이 없습니다. 본인의 휴일설정만 수정할 수 있습니다.');\n+        return;\n+      }\n+    }\n+\n+    setWeeklyHolidayModalStaffId(staffId);\n+    setIsWeeklyHolidayModalOpen(true);\n+  };\n+\n+  // 주별 휴일설정 모달 관련 함수들 (새로운)\n+  const handleHolidayModalClose = () => {\n+    setIsHolidayModalOpen(false);\n+    setHolidayModalStaffId(undefined);\n+  };\n+\n+  const handleWeeklyHolidayModalClose = () => {\n+    setIsWeeklyHolidayModalOpen(false);\n+    setWeeklyHolidayModalStaffId(undefined);\n+  };\n+\n+  const handleHolidaySettingsSave = async (settings: Omit<HolidaySettings, 'id' | 'createdAt' | 'updatedAt'>[]) => {\n+    try {\n+      // 권한 재검증\n+      if (!currentUser) {\n+        throw new Error('사용자 정보를 확인할 수 없습니다.');\n+      }\n+\n+      // 저장하려는 설정에 포함된 모든 직원에 대한 권한 체크\n+      const uniqueStaffIds = Array.from(new Set(settings.map(s => s.staffId)));\n+      \n+      for (const staffId of uniqueStaffIds) {\n+        if (currentUser.role !== 'master' && currentUser.id !== staffId) {\n+          throw new Error('권한이 없습니다. 본인의 휴일설정만 수정할 수 있습니다.');\n+        }\n+      }\n+\n+      await dbManager.saveHolidaySettings(settings);\n+      console.log('휴일설정 저장 성공:', settings);\n+      // 휴일설정 새로고침 (제거됨 - 스케줄 이벤트 사용)\n+      // await loadHolidaySettings();\n+    } catch (error) {\n+      console.error('휴일설정 저장 실패:', error);\n+      throw error; // 에러를 다시 throw하여 HolidayModal에서 처리하도록 함\n+    }\n+  };\n+\n+  const handleWeeklyHolidaySettingsSave = async (settings: Omit<WeeklyHolidaySettings, 'id' | 'createdAt' | 'updatedAt'>[]) => {\n+    try {\n+      // 권한 재검증\n+      if (!currentUser) {\n+        throw new Error('사용자 정보를 확인할 수 없습니다.');\n+      }\n+\n+      // 저장하려는 설정에 포함된 모든 직원에 대한 권한 체크\n+      const uniqueStaffIds = Array.from(new Set(settings.map(s => s.staffId)));\n+      \n+      for (const staffId of uniqueStaffIds) {\n+        if (currentUser.role !== 'master' && currentUser.id !== staffId) {\n+          throw new Error('권한이 없습니다. 본인의 휴일설정만 수정할 수 있습니다.');\n+        }\n+      }\n+\n+      // 1. 주별 휴일설정 저장\n+      await dbManager.saveWeeklyHolidaySettings(settings);\n+      console.log('주별 휴일설정 저장 성공:', settings);\n+      \n+      // 2. 기존 휴일/휴게시간 이벤트 삭제 (해당 주차, 해당 직원)\n+      for (const setting of settings) {\n+        const weekStartDate = setting.weekStartDate;\n+        const weekEndDate = new Date(weekStartDate + 'T00:00:00');\n+        weekEndDate.setDate(weekEndDate.getDate() + 6);\n+        const weekEndDateStr = weekEndDate.toISOString().split('T')[0];\n+        \n+        // 해당 주차의 기존 휴일/휴게시간 이벤트 삭제\n+        // TODO: 스케줄 이벤트 삭제 로직 구현 필요\n+        console.log(`${setting.staffId}의 ${weekStartDate}~${weekEndDateStr} 주차 이벤트 삭제 예정`);\n+      }\n+      \n+      // 3. 새로운 휴일/휴게시간을 스케줄 이벤트로 생성하여 저장\n+      const scheduleEvents: ScheduleEvent[] = [];\n+      \n+      for (const setting of settings) {\n+        const staff = staffList.find(s => s.id === setting.staffId);\n+        if (!staff) continue;\n+        \n+        const weekStartDate = new Date(setting.weekStartDate + 'T00:00:00');\n+        \n+        // 각 요일별로 이벤트 생성\n+        const dayKeys = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'] as const;\n+        \n+        dayKeys.forEach((dayKey, index) => {\n+          const daySettings = setting.weekDays[dayKey];\n+          const currentDate = new Date(weekStartDate);\n+          currentDate.setDate(weekStartDate.getDate() + index);\n+          const dateStr = currentDate.toISOString().split('T')[0];\n+          \n+          if (daySettings.isHoliday) {\n+            // 휴일 이벤트 생성\n+            const startTime = new Date(currentDate);\n+            startTime.setHours(0, 0, 0, 0);\n+            const endTime = new Date(currentDate);\n+            endTime.setHours(23, 59, 59, 999);\n+            \n+            scheduleEvents.push({\n+              id: `holiday-${setting.staffId}-${dateStr}`,\n+              title: '휴일',\n+              startTime,\n+              endTime,\n+              staffId: setting.staffId,\n+              staffName: staff.name,\n+              type: 'holiday',\n+              color: '#f87171',\n+              description: `${staff.name} 코치 휴일`,\n+              sourceType: 'weekly_holiday',\n+              sourceId: setting.staffId + '-' + setting.weekStartDate\n+            });\n+          } else if (daySettings.breakTimes && daySettings.breakTimes.length > 0) {\n+            // 휴게시간 이벤트들 생성\n+            daySettings.breakTimes.forEach((breakTime, breakIndex) => {\n+              if (breakTime.name && breakTime.name.trim() !== '') {\n+                const breakStartTime = new Date(currentDate);\n+                breakStartTime.setHours(breakTime.start, 0, 0, 0);\n+                const breakEndTime = new Date(currentDate);\n+                breakEndTime.setHours(breakTime.end, 0, 0, 0);\n+                \n+                scheduleEvents.push({\n+                  id: `break-${setting.staffId}-${dateStr}-${breakIndex}`,\n+                  title: breakTime.name,\n+                  startTime: breakStartTime,\n+                  endTime: breakEndTime,\n+                  staffId: setting.staffId,\n+                  staffName: staff.name,\n+                  type: 'break',\n+                  color: '#fbbf24',\n+                  description: `${staff.name} 코치 ${breakTime.name}`,\n+                  sourceType: 'weekly_holiday',\n+                  sourceId: setting.staffId + '-' + setting.weekStartDate\n+                });\n+              }\n+            });\n+          }\n+        });\n+      }\n+      \n+      // 4. 생성된 스케줄 이벤트들을 데이터베이스에 저장\n+      if (scheduleEvents.length > 0) {\n+        console.log('생성된 휴일/휴게시간 이벤트들:', scheduleEvents);\n+        await dbManager.saveScheduleEvents(scheduleEvents);\n+        console.log('스케줄 이벤트 저장 완료');\n+      }\n+      \n+      // 5. 이벤트 목록 새로고침 (저장된 스케줄 이벤트들 로드)\n+      if (scheduleEvents.length > 0) {\n+        setEvents(prev => [...prev.filter(e => !e.id.startsWith('holiday-') && !e.id.startsWith('break-')), ...scheduleEvents]);\n+      }\n+      \n+    } catch (error) {\n+      console.error('주별 휴일설정 저장 실패:', error);\n+      throw error; // 에러를 다시 throw하여 WeeklyHolidayModal에서 처리하도록 함\n+    }\n+  };\n+\n+  // 저장된 스케줄 이벤트 로드\n+  const loadScheduleEvents = useCallback(async () => {\n+    try {\n+      const startDate = new Date(currentDate);\n+      startDate.setDate(startDate.getDate() - 7); // 현재 날짜 1주 전부터\n+      const endDate = new Date(currentDate);\n+      endDate.setDate(endDate.getDate() + 14); // 현재 날짜 2주 후까지\n+      \n+      const isPeriodProgram = currentProgram?.type === '기간제';\n+      let allEvents: ScheduleEvent[] = [];\n+\n+      if (isPeriodProgram) {\n+        // 기간제 프로그램인 경우 기간제 이벤트 생성\n+        const periodEvents = await generatePeriodEvents();\n+        allEvents = [...periodEvents];\n+        console.log('기간제 스케줄 이벤트 로드 완료:', periodEvents.length, '개');\n+      } else {\n+        // 횟수제 프로그램인 경우 저장된 스케줄 이벤트 로드 (코치 스케줄 등)\n+        const savedEvents = await dbManager.getAllScheduleEvents(startDate, endDate);\n+        allEvents = [...savedEvents];\n+        console.log('횟수제 저장된 스케줄 이벤트 로드:', savedEvents.length, '개');\n+      }\n+      \n+      setEvents(allEvents);\n+    } catch (error) {\n+      console.error('스케줄 이벤트 로드 실패:', error);\n+    }\n+  }, [currentDate, currentProgram, generatePeriodEvents]);\n+\n+  // 프로그램 정보 로드\n+  useEffect(() => {\n+    const loadData = async () => {\n+      if (programId) {\n+        try {\n+          setLoading(true);\n+          // 실제로는 이 곳에서 필요한 데이터를 로드할 수 있습니다\n+        } catch (error) {\n+          console.error('데이터 로드 실패:', error);\n+        } finally {\n+          setLoading(false);\n+        }\n+      }\n+    };\n+\n+    loadData();\n+  }, [programId]);\n+\n+  // 지점 데이터 로드\n+  useEffect(() => {\n+    const initializeData = async () => {\n+      // 마이그레이션 상태 확인 및 실행\n+      try {\n+        const migrationStatus = await checkMigrationStatus();\n+        if (migrationStatus.hasOldSettings && !migrationStatus.hasNewSettings) {\n+          console.log('휴일 설정 마이그레이션을 시작합니다...');\n+          await migrateHolidaySettingsToWeekly();\n+          console.log('휴일 설정 마이그레이션이 완료되었습니다.');\n+        }\n+      } catch (error) {\n+        console.error('휴일 설정 마이그레이션 실패:', error);\n+      }\n+      \n+      // 기본 데이터 로드\n+      await loadBranchData();\n+      loadCurrentUser();\n+      // 초기 스케줄 이벤트는 지점이 선택된 후에 로드\n+    };\n+    \n+    initializeData();\n+  }, [loadBranchData, loadCurrentUser]);\n+\n+  // 지점이 선택된 후 초기 스케줄 이벤트 로드 (지점/프로그램 변경 시)\n+  useEffect(() => {\n+    if (selectedBranchId && currentProgram && !loading) {\n+      loadScheduleEvents();\n+    }\n+  }, [selectedBranchId, currentProgram, loadScheduleEvents]); // eslint-disable-line react-hooks/exhaustive-deps\n+\n+  // 프로그램 데이터 로드\n+  useEffect(() => {\n+    loadProgramData();\n+  }, [loadProgramData]);\n+\n+  // 직원 데이터 로드 (지점 선택이나 프로그램이 변경될 때마다)\n+  useEffect(() => {\n+    if (selectedBranchId) {\n+      loadStaffData();\n+    }\n+  }, [selectedBranchId, currentProgram, loadStaffData]);\n+\n+  // 지점 선택 변경 핸들러\n+  const handleBranchChange = useCallback((branchId: string) => {\n+    setSelectedBranchId(branchId);\n+    // 지점 변경 시에만 스케줄 이벤트 새로고침\n+    setTimeout(() => {\n+      loadScheduleEvents();\n+    }, 0);\n+  }, [loadScheduleEvents]);\n+\n+  // 달력 날짜 변경 핸들러 (최적화)\n+  const handleDateChange = useCallback((newDate: Date) => {\n+    const newMonth = `${newDate.getFullYear()}-${String(newDate.getMonth()).padStart(2, '0')}`;\n+    const oldMonth = `${currentDate.getFullYear()}-${String(currentDate.getMonth()).padStart(2, '0')}`;\n+    \n+    setCurrentDate(newDate);\n+    \n+    // 월이 변경된 경우에만 스케줄 이벤트 새로고침\n+    if (newMonth !== oldMonth) {\n+      // 약간의 지연을 두어 상태 업데이트가 완료된 후 로드\n+      setTimeout(() => {\n+        loadScheduleEvents();\n+      }, 0);\n+    }\n+  }, [currentDate, loadScheduleEvents]);\n+\n+  // 이벤트 핸들러들\n+  const handleEventClick = (event: ScheduleEvent) => {\n+    console.log('이벤트 클릭:', event);\n+    // 여기서 이벤트 상세 보기 모달 등을 열 수 있습니다\n+  };\n+\n+  // 예약 가능 여부 체크 (금요일 이후에만 다음주 예약 가능)\n+  const isReservationAllowed = (targetDate: Date): boolean => {\n+    const today = new Date();\n+    const dayOfWeek = today.getDay(); // 0: 일요일, 1: 월요일, ..., 5: 금요일, 6: 토요일\n+    \n+    // 대상 날짜가 이번주인지 다음주인지 판단\n+    const currentWeekStart = new Date(today);\n+    currentWeekStart.setDate(today.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\n+    currentWeekStart.setHours(0, 0, 0, 0);\n+    \n+    const nextWeekStart = new Date(currentWeekStart);\n+    nextWeekStart.setDate(currentWeekStart.getDate() + 7);\n+    \n+    const targetWeekStart = new Date(targetDate);\n+    targetWeekStart.setDate(targetDate.getDate() - (targetDate.getDay() === 0 ? 6 : targetDate.getDay() - 1));\n+    targetWeekStart.setHours(0, 0, 0, 0);\n+    \n+    // 이번주 예약은 항상 가능\n+    if (targetWeekStart.getTime() <= currentWeekStart.getTime()) {\n+      return true;\n+    }\n+    \n+    // 다음주 예약은 금요일 이후에만 가능\n+    if (targetWeekStart.getTime() === nextWeekStart.getTime()) {\n+      return dayOfWeek >= 5; // 금요일(5) 이후\n+    }\n+    \n+    // 그 이후 주차는 금요일 이후에만 가능\n+    return dayOfWeek >= 5;\n+  };\n+\n+  const handleEventCreate = (startTime: Date, endTime: Date, staffId?: string) => {\n+    // 예약 가능 시점 체크\n+    if (!isReservationAllowed(startTime)) {\n+      alert('다음주 예약은 금요일 이후부터 가능합니다.');\n+      return;\n+    }\n+    \n+    console.log('새 이벤트 생성:', { startTime, endTime, staffId });\n+    // 여기서 새 이벤트 생성 모달 등을 열 수 있습니다\n+  };\n+\n+  const menuType = getMenuType();\n+\n+  return (\n+    <>\n+      <Container>\n+        <ContentContainer>\n+          {/* 지점 필터 */}\n+          <FilterContainer>\n+            {currentProgram && (\n+              <ProgramTitle>{currentProgram.name}</ProgramTitle>\n+            )}\n+            <FilterLabel>지점 선택:</FilterLabel>\n+            <DropdownWrapper>\n+              <CustomDropdown\n+                value={selectedBranchId}\n+                onChange={handleBranchChange}\n+                options={getBranchOptions()}\n+                placeholder=\"지점을 선택하세요\"\n+              />\n+            </DropdownWrapper>\n+          </FilterContainer>\n+          \n+          {loading ? (\n+            <PlaceholderContent>\n+              데이터를 불러오는 중...\n+            </PlaceholderContent>\n+          ) : menuType === 'main' ? (\n+            // 메인 화면에서는 프로그램 선택 안내 메시지 표시\n+            <PlaceholderContent>\n+              좌측 메뉴에서 프로그램을 선택하여 해당 프로그램의 예약 관리를 시작하세요.\n+            </PlaceholderContent>\n+          ) : menuType === 'program' ? (\n+            // 프로그램별 예약에서는 달력 컴포넌트 표시 (지점이 선택된 경우만)\n+            selectedBranchId ? (\n+              currentProgram ? (\n+                currentProgram.type === '횟수제' ? (\n+                  // 횟수제 프로그램인 경우 코치 스케줄 표시\n+                  staffList.length > 0 ? (\n+                    <ScheduleCalendar\n+                      view={calendarView}\n+                      currentDate={currentDate}\n+                      events={events}\n+                      staffList={staffList}\n+                      selectedStaffIds={selectedStaffIds}\n+                      onViewChange={setCalendarView}\n+                      onDateChange={handleDateChange}\n+                      onStaffFilter={setSelectedStaffIds}\n+                      onEventClick={handleEventClick}\n+                      onEventCreate={handleEventCreate}\n+                      onHolidaySettings={handleHolidaySettings}\n+                      weeklyHolidaySettings={weeklyHolidaySettings}\n+                    />\n+                  ) : (\n+                    <PlaceholderContent>\n+                      선택한 지점에 \"{currentProgram.name}\" 프로그램을 담당하는 코치가 없습니다.\n+                      <br />\n+                      직원 관리에서 코치의 담당 프로그램을 설정해주세요.\n+                    </PlaceholderContent>\n+                  )\n+                ) : currentProgram.type === '기간제' ? (\n+                  // 기간제 프로그램인 경우 기간제 스케줄 표시\n+                  <ScheduleCalendar\n+                    view={calendarView}\n+                    currentDate={currentDate}\n+                    events={events}\n+                    staffList={[]} // 기간제는 코치별 필터링 없음\n+                    selectedStaffIds={[]}\n+                    onViewChange={setCalendarView}\n+                    onDateChange={handleDateChange}\n+                    onStaffFilter={() => {}} // 기간제는 코치 필터링 없음\n+                    onEventClick={handleEventClick}\n+                    onEventCreate={handleEventCreate}\n+                    onHolidaySettings={undefined} // 기간제는 휴일설정 없음\n+                    weeklyHolidaySettings={[]}\n+                    allowEmptyStaff={true} // 기간제는 코치가 없어도 달력 표시\n+                  />\n+                ) : (\n+                  <PlaceholderContent>\n+                    알 수 없는 프로그램 타입입니다: {currentProgram.type}\n+                  </PlaceholderContent>\n+                )\n+              ) : (\n+                <PlaceholderContent>\n+                  프로그램 정보를 불러오는 중입니다...\n+                </PlaceholderContent>\n+              )\n+            ) : (\n+              <PlaceholderContent>\n+                지점을 선택해주세요.\n+              </PlaceholderContent>\n+            )\n+          ) : (\n+            <PlaceholderContent>\n+              예약 관리 기능이 준비 중입니다.\n+              <br />\n+              <br />\n+              이곳에 실제 예약 관리 기능이 구현될 예정입니다.\n+            </PlaceholderContent>\n+          )}\n+        </ContentContainer>\n+      </Container>\n+\n+      {/* 기존 휴일설정 모달 (호환성 유지) */}\n+      <HolidayModal\n+        isOpen={isHolidayModalOpen}\n+        onClose={handleHolidayModalClose}\n+        staffId={holidayModalStaffId}\n+        staffList={staffList}\n+        currentUser={currentUser}\n+        onSave={handleHolidaySettingsSave}\n+        existingHolidays={holidaySettings}\n+        existingEvents={events} // 예약 제한을 위한 기존 이벤트 전달\n+      />\n+\n+      {/* 새로운 주별 휴일설정 모달 */}\n+      <WeeklyHolidayModal\n+        isOpen={isWeeklyHolidayModalOpen}\n+        onClose={handleWeeklyHolidayModalClose}\n+        staffId={weeklyHolidayModalStaffId}\n+        staffList={staffList}\n+        currentUser={currentUser}\n+        onSave={handleWeeklyHolidaySettingsSave}\n+        existingWeeklyHolidays={weeklyHolidaySettings}\n+      />\n+    </>\n+  );\n+};\n+\n+export default ReservationPage;\n"
                },
                {
                    "date": 1761460745787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,14 +116,17 @@\n   // 지점 데이터 로드\n   const loadBranchData = useCallback(async () => {\n     try {\n       const branchData = await dbManager.getAllBranches();\n+      console.log('모든 지점 정보:', branchData.map(b => ({ id: b.id, name: b.name })));\n+      console.log('지점 상세:', branchData.forEach(b => console.log(`지점: ${b.name}, ID: ${b.id}`)));\n       setBranches(branchData);\n       \n       // 지점이 이미 선택되어 있지 않은 경우에만 첫 번째 지점 선택\n       if (!selectedBranchId) {\n         const activeBranches = branchData.filter(branch => branch.name !== '전체');\n         if (activeBranches.length > 0) {\n+          console.log('기본 선택 지점:', activeBranches[0].name, activeBranches[0].id);\n           setSelectedBranchId(activeBranches[0].id);\n         }\n       }\n     } catch (error) {\n@@ -624,825 +627,13 @@\n         console.log('횟수제 저장된 스케줄 이벤트 로드:', savedEvents.length, '개');\n       }\n       \n       setEvents(allEvents);\n-    } catch (error) {\n-      console.error('스케줄 이벤트 로드 실패:', error);\n-    }\n-  }, [currentDate, currentProgram, generatePeriodEvents]);\n-\n-  // 프로그램 정보 로드\n-  useEffect(() => {\n-    const loadData = async () => {\n-      if (programId) {\n-        try {\n-          setLoading(true);\n-          // 실제로는 이 곳에서 필요한 데이터를 로드할 수 있습니다\n-        } catch (error) {\n-          console.error('데이터 로드 실패:', error);\n-        } finally {\n-          setLoading(false);\n-        }\n+      console.log('달력에 설정된 이벤트 수:', allEvents.length);\n+      if (allEvents.length > 0) {\n+        console.log('첫 번째 이벤트:', allEvents[0]);\n       }\n-    };\n-\n-    loadData();\n-  }, [programId]);\n-\n-  // 지점 데이터 로드\n-  useEffect(() => {\n-    const initializeData = async () => {\n-      // 마이그레이션 상태 확인 및 실행\n-      try {\n-        const migrationStatus = await checkMigrationStatus();\n-        if (migrationStatus.hasOldSettings && !migrationStatus.hasNewSettings) {\n-          console.log('휴일 설정 마이그레이션을 시작합니다...');\n-          await migrateHolidaySettingsToWeekly();\n-          console.log('휴일 설정 마이그레이션이 완료되었습니다.');\n-        }\n-      } catch (error) {\n-        console.error('휴일 설정 마이그레이션 실패:', error);\n-      }\n-      \n-      // 기본 데이터 로드\n-      await loadBranchData();\n-      loadCurrentUser();\n-      // 초기 스케줄 이벤트는 지점이 선택된 후에 로드\n-    };\n-    \n-    initializeData();\n-  }, [loadBranchData, loadCurrentUser]);\n-\n-  // 지점이 선택된 후 초기 스케줄 이벤트 로드 (지점/프로그램 변경 시)\n-  useEffect(() => {\n-    if (selectedBranchId && currentProgram && !loading) {\n-      loadScheduleEvents();\n-    }\n-  }, [selectedBranchId, currentProgram, loadScheduleEvents]); // eslint-disable-line react-hooks/exhaustive-deps\n-\n-  // 프로그램 데이터 로드\n-  useEffect(() => {\n-    loadProgramData();\n-  }, [loadProgramData]);\n-\n-  // 직원 데이터 로드 (지점 선택이나 프로그램이 변경될 때마다)\n-  useEffect(() => {\n-    if (selectedBranchId) {\n-      loadStaffData();\n-    }\n-  }, [selectedBranchId, currentProgram, loadStaffData]);\n-\n-  // 지점 선택 변경 핸들러\n-  const handleBranchChange = useCallback((branchId: string) => {\n-    setSelectedBranchId(branchId);\n-    // 지점 변경 시에만 스케줄 이벤트 새로고침\n-    setTimeout(() => {\n-      loadScheduleEvents();\n-    }, 0);\n-  }, [loadScheduleEvents]);\n-\n-  // 달력 날짜 변경 핸들러 (최적화)\n-  const handleDateChange = useCallback((newDate: Date) => {\n-    const newMonth = `${newDate.getFullYear()}-${String(newDate.getMonth()).padStart(2, '0')}`;\n-    const oldMonth = `${currentDate.getFullYear()}-${String(currentDate.getMonth()).padStart(2, '0')}`;\n-    \n-    setCurrentDate(newDate);\n-    \n-    // 월이 변경된 경우에만 스케줄 이벤트 새로고침\n-    if (newMonth !== oldMonth) {\n-      // 약간의 지연을 두어 상태 업데이트가 완료된 후 로드\n-      setTimeout(() => {\n-        loadScheduleEvents();\n-      }, 0);\n-    }\n-  }, [currentDate, loadScheduleEvents]);\n-\n-  // 이벤트 핸들러들\n-  const handleEventClick = (event: ScheduleEvent) => {\n-    console.log('이벤트 클릭:', event);\n-    // 여기서 이벤트 상세 보기 모달 등을 열 수 있습니다\n-  };\n-\n-  // 예약 가능 여부 체크 (금요일 이후에만 다음주 예약 가능)\n-  const isReservationAllowed = (targetDate: Date): boolean => {\n-    const today = new Date();\n-    const dayOfWeek = today.getDay(); // 0: 일요일, 1: 월요일, ..., 5: 금요일, 6: 토요일\n-    \n-    // 대상 날짜가 이번주인지 다음주인지 판단\n-    const currentWeekStart = new Date(today);\n-    currentWeekStart.setDate(today.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\n-    currentWeekStart.setHours(0, 0, 0, 0);\n-    \n-    const nextWeekStart = new Date(currentWeekStart);\n-    nextWeekStart.setDate(currentWeekStart.getDate() + 7);\n-    \n-    const targetWeekStart = new Date(targetDate);\n-    targetWeekStart.setDate(targetDate.getDate() - (targetDate.getDay() === 0 ? 6 : targetDate.getDay() - 1));\n-    targetWeekStart.setHours(0, 0, 0, 0);\n-    \n-    // 이번주 예약은 항상 가능\n-    if (targetWeekStart.getTime() <= currentWeekStart.getTime()) {\n-      return true;\n-    }\n-    \n-    // 다음주 예약은 금요일 이후에만 가능\n-    if (targetWeekStart.getTime() === nextWeekStart.getTime()) {\n-      return dayOfWeek >= 5; // 금요일(5) 이후\n-    }\n-    \n-    // 그 이후 주차는 금요일 이후에만 가능\n-    return dayOfWeek >= 5;\n-  };\n-\n-  const handleEventCreate = (startTime: Date, endTime: Date, staffId?: string) => {\n-    // 예약 가능 시점 체크\n-    if (!isReservationAllowed(startTime)) {\n-      alert('다음주 예약은 금요일 이후부터 가능합니다.');\n-      return;\n-    }\n-    \n-    console.log('새 이벤트 생성:', { startTime, endTime, staffId });\n-    // 여기서 새 이벤트 생성 모달 등을 열 수 있습니다\n-  };\n-\n-  const menuType = getMenuType();\n-\n-  return (\n-    <>\n-      <Container>\n-        <ContentContainer>\n-          {/* 지점 필터 */}\n-          <FilterContainer>\n-            {currentProgram && (\n-              <ProgramTitle>{currentProgram.name}</ProgramTitle>\n-            )}\n-            <FilterLabel>지점 선택:</FilterLabel>\n-            <DropdownWrapper>\n-              <CustomDropdown\n-                value={selectedBranchId}\n-                onChange={handleBranchChange}\n-                options={getBranchOptions()}\n-                placeholder=\"지점을 선택하세요\"\n-              />\n-            </DropdownWrapper>\n-          </FilterContainer>\n-          \n-          {loading ? (\n-            <PlaceholderContent>\n-              데이터를 불러오는 중...\n-            </PlaceholderContent>\n-          ) : menuType === 'main' ? (\n-            // 메인 화면에서는 프로그램 선택 안내 메시지 표시\n-            <PlaceholderContent>\n-              좌측 메뉴에서 프로그램을 선택하여 해당 프로그램의 예약 관리를 시작하세요.\n-            </PlaceholderContent>\n-          ) : menuType === 'program' ? (\n-            // 프로그램별 예약에서는 달력 컴포넌트 표시 (지점이 선택된 경우만)\n-            selectedBranchId ? (\n-              currentProgram ? (\n-                currentProgram.type === '횟수제' ? (\n-                  // 횟수제 프로그램인 경우 코치 스케줄 표시\n-                  staffList.length > 0 ? (\n-                    <ScheduleCalendar\n-                      view={calendarView}\n-                      currentDate={currentDate}\n-                      events={events}\n-                      staffList={staffList}\n-                      selectedStaffIds={selectedStaffIds}\n-                      onViewChange={setCalendarView}\n-                      onDateChange={handleDateChange}\n-                      onStaffFilter={setSelectedStaffIds}\n-                      onEventClick={handleEventClick}\n-                      onEventCreate={handleEventCreate}\n-                      onHolidaySettings={handleHolidaySettings}\n-                      weeklyHolidaySettings={weeklyHolidaySettings}\n-                    />\n-                  ) : (\n-                    <PlaceholderContent>\n-                      선택한 지점에 \"{currentProgram.name}\" 프로그램을 담당하는 코치가 없습니다.\n-                      <br />\n-                      직원 관리에서 코치의 담당 프로그램을 설정해주세요.\n-                    </PlaceholderContent>\n-                  )\n-                ) : currentProgram.type === '기간제' ? (\n-                  // 기간제 프로그램인 경우 기간제 스케줄 표시\n-                  <ScheduleCalendar\n-                    view={calendarView}\n-                    currentDate={currentDate}\n-                    events={events}\n-                    staffList={[]} // 기간제는 코치별 필터링 없음\n-                    selectedStaffIds={[]}\n-                    onViewChange={setCalendarView}\n-                    onDateChange={handleDateChange}\n-                    onStaffFilter={() => {}} // 기간제는 코치 필터링 없음\n-                    onEventClick={handleEventClick}\n-                    onEventCreate={handleEventCreate}\n-                    onHolidaySettings={undefined} // 기간제는 휴일설정 없음\n-                    weeklyHolidaySettings={[]}\n-                    allowEmptyStaff={true} // 기간제는 코치가 없어도 달력 표시\n-                  />\n-                ) : (\n-                  <PlaceholderContent>\n-                    알 수 없는 프로그램 타입입니다: {currentProgram.type}\n-                  </PlaceholderContent>\n-                )\n-              ) : (\n-                <PlaceholderContent>\n-                  프로그램 정보를 불러오는 중입니다...\n-                </PlaceholderContent>\n-              )\n-            ) : (\n-              <PlaceholderContent>\n-                지점을 선택해주세요.\n-              </PlaceholderContent>\n-            )\n-          ) : (\n-            <PlaceholderContent>\n-              예약 관리 기능이 준비 중입니다.\n-              <br />\n-              <br />\n-              이곳에 실제 예약 관리 기능이 구현될 예정입니다.\n-            </PlaceholderContent>\n-          )}\n-        </ContentContainer>\n-      </Container>\n-\n-      {/* 기존 휴일설정 모달 (호환성 유지) */}\n-      <HolidayModal\n-        isOpen={isHolidayModalOpen}\n-        onClose={handleHolidayModalClose}\n-        staffId={holidayModalStaffId}\n-        staffList={staffList}\n-        currentUser={currentUser}\n-        onSave={handleHolidaySettingsSave}\n-        existingHolidays={holidaySettings}\n-        existingEvents={events} // 예약 제한을 위한 기존 이벤트 전달\n-      />\n-\n-      {/* 새로운 주별 휴일설정 모달 */}\n-      <WeeklyHolidayModal\n-        isOpen={isWeeklyHolidayModalOpen}\n-        onClose={handleWeeklyHolidayModalClose}\n-        staffId={weeklyHolidayModalStaffId}\n-        staffList={staffList}\n-        currentUser={currentUser}\n-        onSave={handleWeeklyHolidaySettingsSave}\n-        existingWeeklyHolidays={weeklyHolidaySettings}\n-      />\n-    </>\n-  );\n-};\n-\n-export default ReservationPage;\n-import React, { useState, useEffect, useCallback } from 'react';\n-import { useParams, useLocation } from 'react-router-dom';\n-import styled from 'styled-components';\n-import { AppColors } from '../../../styles/colors';\n-import { AppTextStyles } from '../../../styles/textStyles';\n-import CustomDropdown from '../../../components/CustomDropdown';\n-import { dbManager, type Branch, type Program } from '../../../utils/indexedDB';\n-import { getCurrentUser } from '../../../utils/authUtils';\n-import { migrateHolidaySettingsToWeekly, checkMigrationStatus } from '../../../utils/holidayMigration';\n-import { \n-  ScheduleCalendar, \n-  HolidayModal,\n-  WeeklyHolidayModal,\n-  type CalendarView, \n-  type ScheduleEvent, \n-  type StaffInfo,\n-  type HolidaySettings,\n-  type WeeklyHolidaySettings,\n-  assignStaffColor \n-} from '../../../components/Calendar';\n-\n-const Container = styled.div`\n-  width: 100%;\n-`;\n-\n-const ContentContainer = styled.div`\n-  padding: 24px;\n-  background-color: ${AppColors.surface};\n-  border-radius: 8px;\n-  border: 1px solid ${AppColors.borderLight};\n-`;\n-\n-const FilterContainer = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 16px;\n-  margin-bottom: 24px;\n-  padding: 16px;\n-  background-color: ${AppColors.background};\n-  border-radius: 8px;\n-  border: 1px solid ${AppColors.borderLight};\n-  justify-content: flex-start;\n-`;\n-\n-const ProgramTitle = styled.h3`\n-  font-size: ${AppTextStyles.title2.fontSize};\n-  font-weight: 600;\n-  color: ${AppColors.primary};\n-  margin: 0;\n-  margin-right: 24px;\n-`;\n-\n-const FilterLabel = styled.label`\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  font-weight: 500;\n-  color: ${AppColors.onSurface};\n-  min-width: 80px;\n-  flex-shrink: 0;\n-`;\n-\n-const DropdownWrapper = styled.div`\n-  width: 250px;\n-  flex-shrink: 0;\n-`;\n-\n-const PlaceholderContent = styled.div`\n-  padding: 48px;\n-  text-align: center;\n-  color: ${AppColors.onSurface}60;\n-  font-size: ${AppTextStyles.body1.fontSize};\n-  border: 2px dashed ${AppColors.borderLight};\n-  border-radius: 8px;\n-`;\n-\n-const ReservationPage: React.FC = () => {\n-  const { programId } = useParams<{ programId: string }>();\n-  const location = useLocation();\n-  const [loading, setLoading] = useState(false);\n-  \n-  // 지점 관련 상태\n-  const [branches, setBranches] = useState<Branch[]>([]);\n-  const [selectedBranchId, setSelectedBranchId] = useState<string>('');\n-  \n-  // 프로그램 관련 상태\n-  const [currentProgram, setCurrentProgram] = useState<Program | null>(null);\n-  \n-  // 달력 관련 상태\n-  const [calendarView, setCalendarView] = useState<CalendarView>('week');\n-  const [currentDate, setCurrentDate] = useState(new Date());\n-  const [staffList, setStaffList] = useState<StaffInfo[]>([]);\n-  const [selectedStaffIds, setSelectedStaffIds] = useState<string[]>([]);\n-  const [events, setEvents] = useState<ScheduleEvent[]>([]);\n-\n-  // 휴일설정 모달 상태\n-  const [isHolidayModalOpen, setIsHolidayModalOpen] = useState(false);\n-  const [isWeeklyHolidayModalOpen, setIsWeeklyHolidayModalOpen] = useState(false);\n-  const [holidayModalStaffId, setHolidayModalStaffId] = useState<string | undefined>();\n-  const [weeklyHolidayModalStaffId, setWeeklyHolidayModalStaffId] = useState<string | undefined>();\n-  const [currentUser, setCurrentUser] = useState<{ id: string; role: 'master' | 'coach' | 'admin' } | undefined>();\n-  const holidaySettings: HolidaySettings[] = []; // 빈 배열로 고정\n-  const [weeklyHolidaySettings] = useState<WeeklyHolidaySettings[]>([]); // 빈 배열로 고정\n-\n-  // 현재 선택된 메뉴 확인\n-  const getMenuType = () => {\n-    const path = location.pathname;\n-    if (path.includes('/program/')) return 'program';\n-    if (path.includes('/new') || path.endsWith('/new')) return 'new';\n-    if (path.includes('/timetable') || path.endsWith('/timetable')) return 'timetable';\n-    if (path.includes('/batch') || path.endsWith('/batch')) return 'batch';\n-    if (path.includes('/waiting') || path.endsWith('/waiting')) return 'waiting';\n-    if (path.includes('/auto-remind') || path.endsWith('/auto-remind')) return 'auto-remind';\n-    if (path === '/cms/reservation' || path === '/cms/reservation/') return 'main';\n-    return 'main';\n-  };\n-\n-  // 지점 데이터 로드\n-  const loadBranchData = useCallback(async () => {\n-    try {\n-      const branchData = await dbManager.getAllBranches();\n-      setBranches(branchData);\n-      \n-      // 지점이 이미 선택되어 있지 않은 경우에만 첫 번째 지점 선택\n-      if (!selectedBranchId) {\n-        const activeBranches = branchData.filter(branch => branch.name !== '전체');\n-        if (activeBranches.length > 0) {\n-          setSelectedBranchId(activeBranches[0].id);\n-        }\n-      }\n     } catch (error) {\n-      console.error('지점 데이터 로드 실패:', error);\n-    }\n-  }, [selectedBranchId]);\n-\n-  // 지점 드랍다운 옵션 생성\n-  const getBranchOptions = () => {\n-    const activeBranches = branches.filter(branch => branch.name !== '전체');\n-    return activeBranches.map(branch => ({\n-      value: branch.id,\n-      label: branch.name,\n-      description: branch.address\n-    }));\n-  };\n-\n-  // 프로그램 데이터 로드\n-  const loadProgramData = useCallback(async () => {\n-    if (programId) {\n-      try {\n-        const allPrograms = await dbManager.getAllPrograms();\n-        const foundProgram = allPrograms.find(p => p.id === programId);\n-        setCurrentProgram(foundProgram || null);\n-      } catch (error) {\n-        console.error('프로그램 데이터 로드 실패:', error);\n-        setCurrentProgram(null);\n-      }\n-    } else {\n-      setCurrentProgram(null);\n-    }\n-  }, [programId]);\n-\n-  // 직원 데이터 로드 (횟수제 프로그램용)\n-  const loadStaffData = useCallback(async () => {\n-    try {\n-      // 기간제 프로그램인 경우 직원 데이터 로드하지 않음\n-      if (currentProgram?.type === '기간제') {\n-        setStaffList([]);\n-        setSelectedStaffIds([]);\n-        return;\n-      }\n-\n-      const allStaff = await dbManager.getAllStaff();\n-      let activeCoaches = allStaff.filter(staff => \n-        staff.isActive && staff.role === '코치'\n-      );\n-      \n-      // 지점이 선택된 경우 해당 지점의 코치만 필터링\n-      if (selectedBranchId) {\n-        activeCoaches = activeCoaches.filter(staff => staff.branchId === selectedBranchId);\n-      }\n-      \n-      // 프로그램이 선택된 경우 해당 프로그램을 담당하는 코치만 필터링\n-      if (currentProgram) {\n-        activeCoaches = activeCoaches.filter(staff => staff.program === currentProgram.name);\n-      }\n-      \n-      const staffInfo: StaffInfo[] = activeCoaches.map((staff, index) => ({\n-        id: staff.id,\n-        name: staff.name,\n-        role: staff.role,\n-        program: staff.program || '', // 담당 프로그램 정보 표시\n-        isActive: staff.isActive,\n-        color: assignStaffColor(staff.id, index),\n-        contractStartDate: staff.contractStartDate,\n-        contractEndDate: staff.contractEndDate || undefined,\n-        workingHours: {\n-          start: 9, // 기본 근무 시간 (필요시 직원별 설정으로 확장 가능)\n-          end: 21\n-        }\n-      }));\n-      \n-      setStaffList(staffInfo);\n-      \n-      // 기본적으로 모든 코치 선택\n-      setSelectedStaffIds(staffInfo.map(staff => staff.id));\n-    } catch (error) {\n-      console.error('직원 데이터 로드 실패:', error);\n-    }\n-  }, [selectedBranchId, currentProgram]);\n-\n-  // 기간제 수강 정보 로드\n-  const loadPeriodCourseEnrollments = useCallback(async () => {\n-    try {\n-      if (!selectedBranchId || !currentProgram) {\n-        return [];\n-      }\n-\n-      // 해당 지점의 활성 수강 정보 조회\n-      const allEnrollments = await dbManager.getAllCourseEnrollments();\n-      const branchEnrollments = allEnrollments.filter(enrollment => \n-        enrollment.branchId === selectedBranchId &&\n-        enrollment.programId === currentProgram.id &&\n-        enrollment.programType === '기간제' &&\n-        enrollment.enrollmentStatus === 'active' &&\n-        enrollment.startDate &&\n-        enrollment.endDate\n-      );\n-\n-      return branchEnrollments;\n-    } catch (error) {\n-      console.error('기간제 수강 정보 로드 실패:', error);\n-      return [];\n-    }\n-  }, [selectedBranchId, currentProgram]);\n-\n-  // 기간제 수강 정보를 달력 이벤트로 변환\n-  const generatePeriodEvents = useCallback(async () => {\n-    const isPeriodProgram = currentProgram?.type === '기간제';\n-    \n-    if (!isPeriodProgram || !selectedBranchId || !currentProgram) {\n-      return [];\n-    }\n-\n-    try {\n-      const periodEnrollments = await loadPeriodCourseEnrollments();\n-      const periodEvents: ScheduleEvent[] = [];\n-\n-      // 프로그램별로 그룹화하여 수강생 수 계산\n-      const programGroups: { [key: string]: { \n-        enrollments: any[], \n-        dates: { startDate: Date, endDate: Date }[] \n-      } } = {};\n-\n-      // 수강 정보를 프로그램별로 그룹화\n-      for (const enrollment of periodEnrollments) {\n-        const key = `${enrollment.programId}-${enrollment.programName}`;\n-        if (!programGroups[key]) {\n-          programGroups[key] = { enrollments: [], dates: [] };\n-        }\n-        programGroups[key].enrollments.push(enrollment);\n-        \n-        // 수강 기간 추가\n-        if (enrollment.startDate && enrollment.endDate) {\n-          programGroups[key].dates.push({\n-            startDate: new Date(enrollment.startDate),\n-            endDate: new Date(enrollment.endDate)\n-          });\n-        }\n-      }\n-\n-      // 각 프로그램별로 달력 이벤트 생성\n-      for (const [programKey, group] of Object.entries(programGroups)) {\n-        const programName = group.enrollments[0]?.programName || '알 수 없는 프로그램';\n-\n-        // 모든 수강 기간을 고려해서 전체 기간 계산\n-        if (group.dates.length > 0) {\n-          const earliestStart = new Date(Math.min(...group.dates.map(d => d.startDate.getTime())));\n-          const latestEnd = new Date(Math.max(...group.dates.map(d => d.endDate.getTime())));\n-\n-          // 전체 기간에 대해 하루 종일 이벤트 생성\n-          const currentDate = new Date(earliestStart);\n-          while (currentDate <= latestEnd) {\n-            // 해당 날짜에 수강 중인 회원 수 계산\n-            const activeCount = group.dates.filter(dateRange => \n-              currentDate >= dateRange.startDate && currentDate <= dateRange.endDate\n-            ).length;\n-\n-            if (activeCount > 0) {\n-              const eventStartTime = new Date(currentDate);\n-              eventStartTime.setHours(0, 0, 0, 0);\n-              const eventEndTime = new Date(currentDate);\n-              eventEndTime.setHours(23, 59, 59, 999);\n-\n-              periodEvents.push({\n-                id: `period-${programKey}-${currentDate.toISOString().split('T')[0]}`,\n-                title: `${programName} ${activeCount}명`,\n-                startTime: eventStartTime,\n-                endTime: eventEndTime,\n-                staffId: 'period-program', // 기간제는 특정 코치에 속하지 않음\n-                staffName: '기간제 프로그램',\n-                type: 'class',\n-                color: '#10b981', // 녹색 계열로 기간제 표시\n-                description: `${programName} 기간제 수강생 ${activeCount}명`,\n-                sourceType: 'period_enrollment',\n-                sourceId: programKey,\n-                programId: group.enrollments[0]?.programId,\n-                programName: programName\n-              });\n-            }\n-\n-            currentDate.setDate(currentDate.getDate() + 1);\n-          }\n-        }\n-      }\n-\n-      console.log('기간제 달력 이벤트 생성:', periodEvents.length, '개');\n-      return periodEvents;\n-    } catch (error) {\n-      console.error('기간제 달력 이벤트 생성 실패:', error);\n-      return [];\n-    }\n-  }, [selectedBranchId, currentProgram, loadPeriodCourseEnrollments]);\n-\n-  // 휴일설정 로드 (더 이상 사용 안함 - 스케줄 이벤트로 대체)\n-  // const loadHolidaySettings = useCallback(async () => {\n-  //   try {\n-  //     const currentMonth = new Date();\n-  //     const startDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n-  //     const endDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n-  //     \n-  //     const startDateStr = startDate.toISOString().split('T')[0];\n-  //     const endDateStr = endDate.toISOString().split('T')[0];\n-  //     \n-  //     const settings = await dbManager.getHolidaySettingsByDateRange(startDateStr, endDateStr);\n-  //     setHolidaySettings(settings);\n-  //   } catch (error) {\n-  //     console.error('휴일설정 로드 실패:', error);\n-  //   }\n-  // }, []);\n-\n-  // 현재 사용자 정보 로드\n-  const loadCurrentUser = useCallback(async () => {\n-    try {\n-      const user = await getCurrentUser();\n-      if (user) {\n-        setCurrentUser(user);\n-      }\n-    } catch (error) {\n-      console.error('현재 사용자 정보 로드 실패:', error);\n-    }\n-  }, []);\n-\n-  // 휴일설정 모달 관련 함수들 (주별 휴일설정으로 변경)\n-  const handleHolidaySettings = async (staffId?: string) => {\n-    // 권한 체크\n-    if (!currentUser) {\n-      alert('사용자 정보를 확인할 수 없습니다.');\n-      return;\n-    }\n-\n-    // 특정 직원의 휴일설정인 경우 권한 체크\n-    if (staffId) {\n-      // 마스터 권한이 아니고 본인이 아닌 경우 접근 차단\n-      if (currentUser.role !== 'master' && currentUser.id !== staffId) {\n-        alert('권한이 없습니다. 본인의 휴일설정만 수정할 수 있습니다.');\n-        return;\n-      }\n-    }\n-\n-    setWeeklyHolidayModalStaffId(staffId);\n-    setIsWeeklyHolidayModalOpen(true);\n-  };\n-\n-  // 주별 휴일설정 모달 관련 함수들 (새로운)\n-  const handleHolidayModalClose = () => {\n-    setIsHolidayModalOpen(false);\n-    setHolidayModalStaffId(undefined);\n-  };\n-\n-  const handleWeeklyHolidayModalClose = () => {\n-    setIsWeeklyHolidayModalOpen(false);\n-    setWeeklyHolidayModalStaffId(undefined);\n-  };\n-\n-  const handleHolidaySettingsSave = async (settings: Omit<HolidaySettings, 'id' | 'createdAt' | 'updatedAt'>[]) => {\n-    try {\n-      // 권한 재검증\n-      if (!currentUser) {\n-        throw new Error('사용자 정보를 확인할 수 없습니다.');\n-      }\n-\n-      // 저장하려는 설정에 포함된 모든 직원에 대한 권한 체크\n-      const uniqueStaffIds = Array.from(new Set(settings.map(s => s.staffId)));\n-      \n-      for (const staffId of uniqueStaffIds) {\n-        if (currentUser.role !== 'master' && currentUser.id !== staffId) {\n-          throw new Error('권한이 없습니다. 본인의 휴일설정만 수정할 수 있습니다.');\n-        }\n-      }\n-\n-      await dbManager.saveHolidaySettings(settings);\n-      console.log('휴일설정 저장 성공:', settings);\n-      // 휴일설정 새로고침 (제거됨 - 스케줄 이벤트 사용)\n-      // await loadHolidaySettings();\n-    } catch (error) {\n-      console.error('휴일설정 저장 실패:', error);\n-      throw error; // 에러를 다시 throw하여 HolidayModal에서 처리하도록 함\n-    }\n-  };\n-\n-  const handleWeeklyHolidaySettingsSave = async (settings: Omit<WeeklyHolidaySettings, 'id' | 'createdAt' | 'updatedAt'>[]) => {\n-    try {\n-      // 권한 재검증\n-      if (!currentUser) {\n-        throw new Error('사용자 정보를 확인할 수 없습니다.');\n-      }\n-\n-      // 저장하려는 설정에 포함된 모든 직원에 대한 권한 체크\n-      const uniqueStaffIds = Array.from(new Set(settings.map(s => s.staffId)));\n-      \n-      for (const staffId of uniqueStaffIds) {\n-        if (currentUser.role !== 'master' && currentUser.id !== staffId) {\n-          throw new Error('권한이 없습니다. 본인의 휴일설정만 수정할 수 있습니다.');\n-        }\n-      }\n-\n-      // 1. 주별 휴일설정 저장\n-      await dbManager.saveWeeklyHolidaySettings(settings);\n-      console.log('주별 휴일설정 저장 성공:', settings);\n-      \n-      // 2. 기존 휴일/휴게시간 이벤트 삭제 (해당 주차, 해당 직원)\n-      for (const setting of settings) {\n-        const weekStartDate = setting.weekStartDate;\n-        const weekEndDate = new Date(weekStartDate + 'T00:00:00');\n-        weekEndDate.setDate(weekEndDate.getDate() + 6);\n-        const weekEndDateStr = weekEndDate.toISOString().split('T')[0];\n-        \n-        // 해당 주차의 기존 휴일/휴게시간 이벤트 삭제\n-        // TODO: 스케줄 이벤트 삭제 로직 구현 필요\n-        console.log(`${setting.staffId}의 ${weekStartDate}~${weekEndDateStr} 주차 이벤트 삭제 예정`);\n-      }\n-      \n-      // 3. 새로운 휴일/휴게시간을 스케줄 이벤트로 생성하여 저장\n-      const scheduleEvents: ScheduleEvent[] = [];\n-      \n-      for (const setting of settings) {\n-        const staff = staffList.find(s => s.id === setting.staffId);\n-        if (!staff) continue;\n-        \n-        const weekStartDate = new Date(setting.weekStartDate + 'T00:00:00');\n-        \n-        // 각 요일별로 이벤트 생성\n-        const dayKeys = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'] as const;\n-        \n-        dayKeys.forEach((dayKey, index) => {\n-          const daySettings = setting.weekDays[dayKey];\n-          const currentDate = new Date(weekStartDate);\n-          currentDate.setDate(weekStartDate.getDate() + index);\n-          const dateStr = currentDate.toISOString().split('T')[0];\n-          \n-          if (daySettings.isHoliday) {\n-            // 휴일 이벤트 생성\n-            const startTime = new Date(currentDate);\n-            startTime.setHours(0, 0, 0, 0);\n-            const endTime = new Date(currentDate);\n-            endTime.setHours(23, 59, 59, 999);\n-            \n-            scheduleEvents.push({\n-              id: `holiday-${setting.staffId}-${dateStr}`,\n-              title: '휴일',\n-              startTime,\n-              endTime,\n-              staffId: setting.staffId,\n-              staffName: staff.name,\n-              type: 'holiday',\n-              color: '#f87171',\n-              description: `${staff.name} 코치 휴일`,\n-              sourceType: 'weekly_holiday',\n-              sourceId: setting.staffId + '-' + setting.weekStartDate\n-            });\n-          } else if (daySettings.breakTimes && daySettings.breakTimes.length > 0) {\n-            // 휴게시간 이벤트들 생성\n-            daySettings.breakTimes.forEach((breakTime, breakIndex) => {\n-              if (breakTime.name && breakTime.name.trim() !== '') {\n-                const breakStartTime = new Date(currentDate);\n-                breakStartTime.setHours(breakTime.start, 0, 0, 0);\n-                const breakEndTime = new Date(currentDate);\n-                breakEndTime.setHours(breakTime.end, 0, 0, 0);\n-                \n-                scheduleEvents.push({\n-                  id: `break-${setting.staffId}-${dateStr}-${breakIndex}`,\n-                  title: breakTime.name,\n-                  startTime: breakStartTime,\n-                  endTime: breakEndTime,\n-                  staffId: setting.staffId,\n-                  staffName: staff.name,\n-                  type: 'break',\n-                  color: '#fbbf24',\n-                  description: `${staff.name} 코치 ${breakTime.name}`,\n-                  sourceType: 'weekly_holiday',\n-                  sourceId: setting.staffId + '-' + setting.weekStartDate\n-                });\n-              }\n-            });\n-          }\n-        });\n-      }\n-      \n-      // 4. 생성된 스케줄 이벤트들을 데이터베이스에 저장\n-      if (scheduleEvents.length > 0) {\n-        console.log('생성된 휴일/휴게시간 이벤트들:', scheduleEvents);\n-        await dbManager.saveScheduleEvents(scheduleEvents);\n-        console.log('스케줄 이벤트 저장 완료');\n-      }\n-      \n-      // 5. 이벤트 목록 새로고침 (저장된 스케줄 이벤트들 로드)\n-      if (scheduleEvents.length > 0) {\n-        setEvents(prev => [...prev.filter(e => !e.id.startsWith('holiday-') && !e.id.startsWith('break-')), ...scheduleEvents]);\n-      }\n-      \n-    } catch (error) {\n-      console.error('주별 휴일설정 저장 실패:', error);\n-      throw error; // 에러를 다시 throw하여 WeeklyHolidayModal에서 처리하도록 함\n-    }\n-  };\n-\n-  // 저장된 스케줄 이벤트 로드\n-  const loadScheduleEvents = useCallback(async () => {\n-    try {\n-      const startDate = new Date(currentDate);\n-      startDate.setDate(startDate.getDate() - 7); // 현재 날짜 1주 전부터\n-      const endDate = new Date(currentDate);\n-      endDate.setDate(endDate.getDate() + 14); // 현재 날짜 2주 후까지\n-      \n-      const isPeriodProgram = currentProgram?.type === '기간제';\n-      let allEvents: ScheduleEvent[] = [];\n-\n-      if (isPeriodProgram) {\n-        // 기간제 프로그램인 경우 기간제 이벤트 생성\n-        const periodEvents = await generatePeriodEvents();\n-        allEvents = [...periodEvents];\n-        console.log('기간제 스케줄 이벤트 로드 완료:', periodEvents.length, '개');\n-      } else {\n-        // 횟수제 프로그램인 경우 저장된 스케줄 이벤트 로드 (코치 스케줄 등)\n-        const savedEvents = await dbManager.getAllScheduleEvents(startDate, endDate);\n-        allEvents = [...savedEvents];\n-        console.log('횟수제 저장된 스케줄 이벤트 로드:', savedEvents.length, '개');\n-      }\n-      \n-      setEvents(allEvents);\n-    } catch (error) {\n       console.error('스케줄 이벤트 로드 실패:', error);\n     }\n   }, [currentDate, currentProgram, generatePeriodEvents]);\n \n"
                },
                {
                    "date": 1761460844210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -614,8 +614,14 @@\n       \n       const isPeriodProgram = currentProgram?.type === '기간제';\n       let allEvents: ScheduleEvent[] = [];\n \n+      console.log('스케줄 이벤트 로드 시작:', { \n+        isPeriodProgram, \n+        selectedBranchId, \n+        programName: currentProgram?.name \n+      });\n+\n       if (isPeriodProgram) {\n         // 기간제 프로그램인 경우 기간제 이벤트 생성\n         const periodEvents = await generatePeriodEvents();\n         allEvents = [...periodEvents];\n@@ -634,9 +640,9 @@\n       }\n     } catch (error) {\n       console.error('스케줄 이벤트 로드 실패:', error);\n     }\n-  }, [currentDate, currentProgram, generatePeriodEvents]);\n+  }, [currentDate, currentProgram, selectedBranchId, generatePeriodEvents]);\n \n   // 프로그램 정보 로드\n   useEffect(() => {\n     const loadData = async () => {\n"
                },
                {
                    "date": 1761460935739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,8 +136,14 @@\n \n   // 지점 드랍다운 옵션 생성\n   const getBranchOptions = () => {\n     const activeBranches = branches.filter(branch => branch.name !== '전체');\n+    console.log('활성 지점 목록:', activeBranches.map(b => ({ id: b.id, name: b.name })));\n+    console.log('현재 선택된 지점 ID:', selectedBranchId);\n+    \n+    const selectedBranch = activeBranches.find(b => b.id === selectedBranchId);\n+    console.log('현재 선택된 지점:', selectedBranch?.name);\n+    \n     return activeBranches.map(branch => ({\n       value: branch.id,\n       label: branch.name,\n       description: branch.address\n@@ -705,13 +711,21 @@\n   }, [selectedBranchId, currentProgram, loadStaffData]);\n \n   // 지점 선택 변경 핸들러\n   const handleBranchChange = useCallback((branchId: string) => {\n+    console.log('지점 변경:', branchId);\n+    \n+    // 이전 이벤트 초기화\n+    setEvents([]);\n+    \n+    // 지점 설정\n     setSelectedBranchId(branchId);\n-    // 지점 변경 시에만 스케줄 이벤트 새로고침\n-    setTimeout(() => {\n-      loadScheduleEvents();\n-    }, 0);\n+    \n+    // 약간의 지연 후 새로운 이벤트 로드\n+    setTimeout(async () => {\n+      console.log('지점 변경 후 이벤트 새로고침 시작');\n+      await loadScheduleEvents();\n+    }, 100);\n   }, [loadScheduleEvents]);\n \n   // 달력 날짜 변경 핸들러 (최적화)\n   const handleDateChange = useCallback((newDate: Date) => {\n"
                },
                {
                    "date": 1761460987879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -692,10 +692,18 @@\n   }, [loadBranchData, loadCurrentUser]);\n \n   // 지점이 선택된 후 초기 스케줄 이벤트 로드 (지점/프로그램 변경 시)\n   useEffect(() => {\n+    console.log('=== useEffect 트리거 ===');\n+    console.log('selectedBranchId:', selectedBranchId);\n+    console.log('currentProgram:', currentProgram?.name);\n+    console.log('loading:', loading);\n+    \n     if (selectedBranchId && currentProgram && !loading) {\n+      console.log('조건 만족 - loadScheduleEvents 호출');\n       loadScheduleEvents();\n+    } else {\n+      console.log('조건 불만족 - loadScheduleEvents 호출 안함');\n     }\n   }, [selectedBranchId, currentProgram, loadScheduleEvents]); // eslint-disable-line react-hooks/exhaustive-deps\n \n   // 프로그램 데이터 로드\n@@ -710,23 +718,22 @@\n     }\n   }, [selectedBranchId, currentProgram, loadStaffData]);\n \n   // 지점 선택 변경 핸들러\n-  const handleBranchChange = useCallback((branchId: string) => {\n-    console.log('지점 변경:', branchId);\n+  const handleBranchChange = useCallback(async (branchId: string) => {\n+    console.log('=== 지점 변경 시작 ===');\n+    console.log('이전 지점 ID:', selectedBranchId);\n+    console.log('새로운 지점 ID:', branchId);\n     \n     // 이전 이벤트 초기화\n     setEvents([]);\n+    console.log('이벤트 초기화 완료');\n     \n     // 지점 설정\n     setSelectedBranchId(branchId);\n+    console.log('지점 ID 설정 완료');\n     \n-    // 약간의 지연 후 새로운 이벤트 로드\n-    setTimeout(async () => {\n-      console.log('지점 변경 후 이벤트 새로고침 시작');\n-      await loadScheduleEvents();\n-    }, 100);\n-  }, [loadScheduleEvents]);\n+  }, [selectedBranchId]);\n \n   // 달력 날짜 변경 핸들러 (최적화)\n   const handleDateChange = useCallback((newDate: Date) => {\n     const newMonth = `${newDate.getFullYear()}-${String(newDate.getMonth()).padStart(2, '0')}`;\n"
                },
                {
                    "date": 1761734768633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import CustomDropdown from '../../../components/CustomDropdown';\n+import ReservationModal from '../../../components/ReservationModal';\n import { dbManager, type Branch, type Program } from '../../../utils/indexedDB';\n import { getCurrentUser } from '../../../utils/authUtils';\n import { migrateHolidaySettingsToWeekly, checkMigrationStatus } from '../../../utils/holidayMigration';\n import { \n@@ -95,12 +96,21 @@\n   const [isHolidayModalOpen, setIsHolidayModalOpen] = useState(false);\n   const [isWeeklyHolidayModalOpen, setIsWeeklyHolidayModalOpen] = useState(false);\n   const [holidayModalStaffId, setHolidayModalStaffId] = useState<string | undefined>();\n   const [weeklyHolidayModalStaffId, setWeeklyHolidayModalStaffId] = useState<string | undefined>();\n-  const [currentUser, setCurrentUser] = useState<{ id: string; role: 'master' | 'coach' | 'admin' } | undefined>();\n+  const [currentUser, setCurrentUser] = useState<{ id: string; role: 'master' | 'coach' | 'admin'; name?: string } | undefined>();\n   const holidaySettings: HolidaySettings[] = []; // 빈 배열로 고정\n   const [weeklyHolidaySettings] = useState<WeeklyHolidaySettings[]>([]); // 빈 배열로 고정\n \n+  // 예약 모달 상태\n+  const [isReservationModalOpen, setIsReservationModalOpen] = useState(false);\n+  const [reservationModalData, setReservationModalData] = useState<{\n+    startTime: Date;\n+    endTime: Date;\n+    staffId: string;\n+    staffName: string;\n+  } | null>(null);\n+\n   // 현재 선택된 메뉴 확인\n   const getMenuType = () => {\n     const path = location.pathname;\n     if (path.includes('/program/')) return 'program';\n@@ -787,18 +797,57 @@\n     return dayOfWeek >= 5;\n   };\n \n   const handleEventCreate = (startTime: Date, endTime: Date, staffId?: string) => {\n+    // 횟수제 프로그램인지 확인\n+    if (!currentProgram || currentProgram.type !== '횟수제') {\n+      alert('횟수제 프로그램에서만 예약을 생성할 수 있습니다.');\n+      return;\n+    }\n+\n+    // 스태프 정보 확인\n+    if (!staffId) {\n+      alert('코치를 선택해주세요.');\n+      return;\n+    }\n+\n+    const staff = staffList.find(s => s.id === staffId);\n+    if (!staff) {\n+      alert('선택한 코치 정보를 찾을 수 없습니다.');\n+      return;\n+    }\n+\n     // 예약 가능 시점 체크\n     if (!isReservationAllowed(startTime)) {\n       alert('다음주 예약은 금요일 이후부터 가능합니다.');\n       return;\n     }\n     \n-    console.log('새 이벤트 생성:', { startTime, endTime, staffId });\n-    // 여기서 새 이벤트 생성 모달 등을 열 수 있습니다\n+    // 예약 모달 데이터 설정 및 모달 열기\n+    setReservationModalData({\n+      startTime,\n+      endTime,\n+      staffId,\n+      staffName: staff.name\n+    });\n+    setIsReservationModalOpen(true);\n   };\n \n+  // 예약 모달 닫기\n+  const handleReservationModalClose = () => {\n+    setIsReservationModalOpen(false);\n+    setReservationModalData(null);\n+  };\n+\n+  // 예약 생성 완료 후 콜백\n+  const handleReservationCreate = (newReservation: ScheduleEvent) => {\n+    // 이벤트 목록에 새 예약 추가\n+    setEvents(prev => [...prev, newReservation]);\n+    \n+    // 모달 닫기\n+    handleReservationModalClose();\n+  };\n+\n   const menuType = getMenuType();\n \n   return (\n     <>\n@@ -921,8 +970,28 @@\n         currentUser={currentUser}\n         onSave={handleWeeklyHolidaySettingsSave}\n         existingWeeklyHolidays={weeklyHolidaySettings}\n       />\n+\n+      {/* 예약 생성 모달 */}\n+      {isReservationModalOpen && reservationModalData && currentProgram && (\n+        <ReservationModal\n+          isOpen={isReservationModalOpen}\n+          onClose={handleReservationModalClose}\n+          startTime={reservationModalData.startTime}\n+          endTime={reservationModalData.endTime}\n+          staffId={reservationModalData.staffId}\n+          staffName={reservationModalData.staffName}\n+          programId={currentProgram.id}\n+          programName={currentProgram.name}\n+          program={currentProgram}\n+          branchId={selectedBranchId}\n+          branchName={branches.find(b => b.id === selectedBranchId)?.name || ''}\n+          currentUser={currentUser}\n+          existingEvents={events}\n+          onReservationCreate={handleReservationCreate}\n+        />\n+      )}\n     </>\n   );\n };\n \n"
                },
                {
                    "date": 1761734933207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,14 +217,33 @@\n       }));\n       \n       setStaffList(staffInfo);\n       \n-      // 기본적으로 모든 코치 선택\n-      setSelectedStaffIds(staffInfo.map(staff => staff.id));\n+      // 사용자 권한에 따른 기본 코치 선택\n+      if (currentUser) {\n+        if (currentUser.role === 'master') {\n+          // Master: 기본적으로 모든 코치 선택\n+          setSelectedStaffIds(staffInfo.map(staff => staff.id));\n+        } else if (currentUser.role === 'coach') {\n+          // 담당 코치: 본인만 선택\n+          const myStaffInfo = staffInfo.find(staff => staff.id === currentUser.id);\n+          if (myStaffInfo) {\n+            setSelectedStaffIds([currentUser.id]);\n+          } else {\n+            // 본인이 목록에 없는 경우 (다른 프로그램 담당 등) 빈 배열\n+            setSelectedStaffIds([]);\n+          }\n+        } else {\n+          setSelectedStaffIds([]);\n+        }\n+      } else {\n+        // 사용자 정보가 없는 경우 기본적으로 모든 코치 선택\n+        setSelectedStaffIds(staffInfo.map(staff => staff.id));\n+      }\n     } catch (error) {\n       console.error('직원 데이터 로드 실패:', error);\n     }\n-  }, [selectedBranchId, currentProgram]);\n+  }, [selectedBranchId, currentProgram, currentUser]);\n \n   // 기간제 수강 정보 로드\n   const loadPeriodCourseEnrollments = useCallback(async () => {\n     try {\n@@ -722,12 +741,12 @@\n   }, [loadProgramData]);\n \n   // 직원 데이터 로드 (지점 선택이나 프로그램이 변경될 때마다)\n   useEffect(() => {\n-    if (selectedBranchId) {\n+    if (selectedBranchId && currentUser) {\n       loadStaffData();\n     }\n-  }, [selectedBranchId, currentProgram, loadStaffData]);\n+  }, [selectedBranchId, currentProgram, currentUser, loadStaffData]);\n \n   // 지점 선택 변경 핸들러\n   const handleBranchChange = useCallback(async (branchId: string) => {\n     console.log('=== 지점 변경 시작 ===');\n@@ -803,17 +822,43 @@\n       alert('횟수제 프로그램에서만 예약을 생성할 수 있습니다.');\n       return;\n     }\n \n-    // 스태프 정보 확인\n-    if (!staffId) {\n-      alert('코치를 선택해주세요.');\n+    // 사용자 권한에 따른 코치 선택 로직\n+    let selectedStaffId = staffId;\n+    let selectedStaff: StaffInfo | undefined;\n+\n+    if (!currentUser) {\n+      alert('사용자 정보를 확인할 수 없습니다.');\n       return;\n     }\n \n-    const staff = staffList.find(s => s.id === staffId);\n-    if (!staff) {\n-      alert('선택한 코치 정보를 찾을 수 없습니다.');\n+    if (currentUser.role === 'master') {\n+      // Master: 달력에서 하나의 코치만 선택된 경우에만 허용\n+      if (selectedStaffIds.length !== 1) {\n+        alert('예약을 생성하려면 달력에서 코치를 하나만 선택해주세요.');\n+        return;\n+      }\n+      \n+      // 선택된 코치 사용\n+      selectedStaffId = selectedStaffIds[0];\n+      selectedStaff = staffList.find(s => s.id === selectedStaffId);\n+      \n+      if (!selectedStaff) {\n+        alert('선택한 코치 정보를 찾을 수 없습니다.');\n+        return;\n+      }\n+    } else if (currentUser.role === 'coach') {\n+      // 담당 코치: 본인의 코치 ID 사용\n+      selectedStaffId = currentUser.id;\n+      selectedStaff = staffList.find(s => s.id === selectedStaffId);\n+      \n+      if (!selectedStaff) {\n+        alert('코치 정보를 찾을 수 없습니다.');\n+        return;\n+      }\n+    } else {\n+      alert('예약 생성 권한이 없습니다.');\n       return;\n     }\n \n     // 예약 가능 시점 체크\n@@ -825,10 +870,10 @@\n     // 예약 모달 데이터 설정 및 모달 열기\n     setReservationModalData({\n       startTime,\n       endTime,\n-      staffId,\n-      staffName: staff.name\n+      staffId: selectedStaffId,\n+      staffName: selectedStaff.name\n     });\n     setIsReservationModalOpen(true);\n   };\n \n"
                },
                {
                    "date": 1761735362652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,9 @@\n   const [selectedBranchId, setSelectedBranchId] = useState<string>('');\n   \n   // 프로그램 관련 상태\n   const [currentProgram, setCurrentProgram] = useState<Program | null>(null);\n+  const [programDuration, setProgramDuration] = useState<number | undefined>(undefined);\n   \n   // 달력 관련 상태\n   const [calendarView, setCalendarView] = useState<CalendarView>('week');\n   const [currentDate, setCurrentDate] = useState(new Date());\n@@ -166,16 +167,37 @@\n       try {\n         const allPrograms = await dbManager.getAllPrograms();\n         const foundProgram = allPrograms.find(p => p.id === programId);\n         setCurrentProgram(foundProgram || null);\n+\n+        // 프로그램과 연결된 상품의 소요시간 조회\n+        if (foundProgram && selectedBranchId) {\n+          const allProducts = await dbManager.getAllProducts();\n+          const programProducts = allProducts.filter(product => \n+            product.programId === foundProgram.id && \n+            product.branchId === selectedBranchId &&\n+            product.isActive\n+          );\n+\n+          // 첫 번째 활성 상품의 소요시간을 사용 (대부분의 경우 프로그램당 하나의 소요시간)\n+          if (programProducts.length > 0) {\n+            setProgramDuration(programProducts[0].duration);\n+          } else {\n+            setProgramDuration(undefined);\n+          }\n+        } else {\n+          setProgramDuration(undefined);\n+        }\n       } catch (error) {\n         console.error('프로그램 데이터 로드 실패:', error);\n         setCurrentProgram(null);\n+        setProgramDuration(undefined);\n       }\n     } else {\n       setCurrentProgram(null);\n+      setProgramDuration(undefined);\n     }\n-  }, [programId]);\n+  }, [programId, selectedBranchId]);\n \n   // 직원 데이터 로드 (횟수제 프로그램용)\n   const loadStaffData = useCallback(async () => {\n     try {\n@@ -942,8 +964,9 @@\n                       onEventClick={handleEventClick}\n                       onEventCreate={handleEventCreate}\n                       onHolidaySettings={handleHolidaySettings}\n                       weeklyHolidaySettings={weeklyHolidaySettings}\n+                      programDuration={programDuration}\n                     />\n                   ) : (\n                     <PlaceholderContent>\n                       선택한 지점에 \"{currentProgram.name}\" 프로그램을 담당하는 코치가 없습니다.\n@@ -966,8 +989,9 @@\n                     onEventCreate={handleEventCreate}\n                     onHolidaySettings={undefined} // 기간제는 휴일설정 없음\n                     weeklyHolidaySettings={[]}\n                     allowEmptyStaff={true} // 기간제는 코치가 없어도 달력 표시\n+                    programDuration={programDuration}\n                   />\n                 ) : (\n                   <PlaceholderContent>\n                     알 수 없는 프로그램 타입입니다: {currentProgram.type}\n"
                },
                {
                    "date": 1761739739695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -974,24 +974,25 @@\n                       직원 관리에서 코치의 담당 프로그램을 설정해주세요.\n                     </PlaceholderContent>\n                   )\n                 ) : currentProgram.type === '기간제' ? (\n-                  // 기간제 프로그램인 경우 기간제 스케줄 표시\n+                  // 기간제 프로그램인 경우 월별 달력만 표시\n                   <ScheduleCalendar\n-                    view={calendarView}\n+                    view=\"month\" // 월별 고정\n                     currentDate={currentDate}\n                     events={events}\n                     staffList={[]} // 기간제는 코치별 필터링 없음\n                     selectedStaffIds={[]}\n-                    onViewChange={setCalendarView}\n+                    onViewChange={() => {}} // 기간제는 뷰 변경 비활성화\n                     onDateChange={handleDateChange}\n                     onStaffFilter={() => {}} // 기간제는 코치 필터링 없음\n                     onEventClick={handleEventClick}\n                     onEventCreate={handleEventCreate}\n                     onHolidaySettings={undefined} // 기간제는 휴일설정 없음\n                     weeklyHolidaySettings={[]}\n                     allowEmptyStaff={true} // 기간제는 코치가 없어도 달력 표시\n                     programDuration={programDuration}\n+                    hideViewOptions={['day', 'week']} // 일별, 주별 뷰 숨김\n                   />\n                 ) : (\n                   <PlaceholderContent>\n                     알 수 없는 프로그램 타입입니다: {currentProgram.type}\n"
                },
                {
                    "date": 1761740206294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -965,8 +965,9 @@\n                       onEventCreate={handleEventCreate}\n                       onHolidaySettings={handleHolidaySettings}\n                       weeklyHolidaySettings={weeklyHolidaySettings}\n                       programDuration={programDuration}\n+                      disablePastTime={true}\n                     />\n                   ) : (\n                     <PlaceholderContent>\n                       선택한 지점에 \"{currentProgram.name}\" 프로그램을 담당하는 코치가 없습니다.\n@@ -991,8 +992,9 @@\n                     weeklyHolidaySettings={[]}\n                     allowEmptyStaff={true} // 기간제는 코치가 없어도 달력 표시\n                     programDuration={programDuration}\n                     hideViewOptions={['day', 'week']} // 일별, 주별 뷰 숨김\n+                    disablePastTime={true}\n                   />\n                 ) : (\n                   <PlaceholderContent>\n                     알 수 없는 프로그램 타입입니다: {currentProgram.type}\n"
                },
                {
                    "date": 1761741030928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -595,9 +595,9 @@\n           currentDate.setDate(weekStartDate.getDate() + index);\n           const dateStr = currentDate.toISOString().split('T')[0];\n           \n           if (daySettings.isHoliday) {\n-            // 휴일 이벤트 생성\n+            // 휴일 이벤트 생성 (하루 종일 - 표시용)\n             const startTime = new Date(currentDate);\n             startTime.setHours(0, 0, 0, 0);\n             const endTime = new Date(currentDate);\n             endTime.setHours(23, 59, 59, 999);\n@@ -837,9 +837,9 @@\n     // 그 이후 주차는 금요일 이후에만 가능\n     return dayOfWeek >= 5;\n   };\n \n-  const handleEventCreate = (startTime: Date, endTime: Date, staffId?: string) => {\n+  const handleEventCreate = (startTime: Date, endTime: Date, staffId?: string, replaceEventId?: string) => {\n     // 횟수제 프로그램인지 확인\n     if (!currentProgram || currentProgram.type !== '횟수제') {\n       alert('횟수제 프로그램에서만 예약을 생성할 수 있습니다.');\n       return;\n@@ -853,8 +853,30 @@\n       alert('사용자 정보를 확인할 수 없습니다.');\n       return;\n     }\n \n+    // 휴일/휴게시간에 대한 권한 체크\n+    const isHolidayOrBreakTime = events.some(event => \n+      event.staffId === (staffId || selectedStaffIds[0]) &&\n+      (event.type === 'holiday' || event.type === 'break') &&\n+      startTime >= event.startTime &&\n+      startTime < event.endTime\n+    );\n+\n+    if (isHolidayOrBreakTime) {\n+      // 휴일/휴게시간에 예약하려는 경우 권한 체크\n+      const targetStaffId = staffId || selectedStaffIds[0];\n+      \n+      if (currentUser.role === 'master' || currentUser.id === targetStaffId) {\n+        // 마스터이거나 본인 코치인 경우 허용\n+        console.log('휴일/휴게시간 예약 권한 확인됨:', currentUser.role, currentUser.id, targetStaffId);\n+      } else {\n+        // 일반 사용자는 휴일/휴게시간에 예약 불가\n+        alert('휴일 및 휴게시간에는 예약을 생성할 수 없습니다. 관리자에게 문의하세요.');\n+        return;\n+      }\n+    }\n+\n     if (currentUser.role === 'master') {\n       // Master: 달력에서 하나의 코치만 선택된 경우에만 허용\n       if (selectedStaffIds.length !== 1) {\n         alert('예약을 생성하려면 달력에서 코치를 하나만 선택해주세요.');\n@@ -966,8 +988,9 @@\n                       onHolidaySettings={handleHolidaySettings}\n                       weeklyHolidaySettings={weeklyHolidaySettings}\n                       programDuration={programDuration}\n                       disablePastTime={true}\n+                      currentUser={currentUser}\n                     />\n                   ) : (\n                     <PlaceholderContent>\n                       선택한 지점에 \"{currentProgram.name}\" 프로그램을 담당하는 코치가 없습니다.\n"
                },
                {
                    "date": 1761741441298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -576,48 +576,34 @@\n         // TODO: 스케줄 이벤트 삭제 로직 구현 필요\n         console.log(`${setting.staffId}의 ${weekStartDate}~${weekEndDateStr} 주차 이벤트 삭제 예정`);\n       }\n       \n-      // 3. 새로운 휴일/휴게시간을 스케줄 이벤트로 생성하여 저장\n+      // 3. 새로운 휴일/휴게시간을 스케줄 이벤트로 생성하여 저장하지 않음\n+      // 대신 휴일 정보는 WeeklyHolidaySettings에만 저장하고, \n+      // 화면에서는 해당 정보를 읽어서 시각적으로만 표시\n+      \n+      // 휴게시간만 스케줄 이벤트로 생성 (휴게시간은 실제로 예약 불가해야 함)\n       const scheduleEvents: ScheduleEvent[] = [];\n       \n       for (const setting of settings) {\n         const staff = staffList.find(s => s.id === setting.staffId);\n         if (!staff) continue;\n         \n         const weekStartDate = new Date(setting.weekStartDate + 'T00:00:00');\n         \n-        // 각 요일별로 이벤트 생성\n+        // 각 요일별로 휴게시간 이벤트만 생성\n         const dayKeys = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'] as const;\n         \n         dayKeys.forEach((dayKey, index) => {\n           const daySettings = setting.weekDays[dayKey];\n           const currentDate = new Date(weekStartDate);\n           currentDate.setDate(weekStartDate.getDate() + index);\n           const dateStr = currentDate.toISOString().split('T')[0];\n           \n-          if (daySettings.isHoliday) {\n-            // 휴일 이벤트 생성 (하루 종일 - 표시용)\n-            const startTime = new Date(currentDate);\n-            startTime.setHours(0, 0, 0, 0);\n-            const endTime = new Date(currentDate);\n-            endTime.setHours(23, 59, 59, 999);\n-            \n-            scheduleEvents.push({\n-              id: `holiday-${setting.staffId}-${dateStr}`,\n-              title: '휴일',\n-              startTime,\n-              endTime,\n-              staffId: setting.staffId,\n-              staffName: staff.name,\n-              type: 'holiday',\n-              color: '#f87171',\n-              description: `${staff.name} 코치 휴일`,\n-              sourceType: 'weekly_holiday',\n-              sourceId: setting.staffId + '-' + setting.weekStartDate\n-            });\n-          } else if (daySettings.breakTimes && daySettings.breakTimes.length > 0) {\n-            // 휴게시간 이벤트들 생성\n+          // 휴일은 스케줄 이벤트로 생성하지 않음 - 화면에서만 표시\n+          \n+          // 휴게시간만 스케줄 이벤트로 생성\n+          if (!daySettings.isHoliday && daySettings.breakTimes && daySettings.breakTimes.length > 0) {\n             daySettings.breakTimes.forEach((breakTime, breakIndex) => {\n               if (breakTime.name && breakTime.name.trim() !== '') {\n                 const breakStartTime = new Date(currentDate);\n                 breakStartTime.setHours(breakTime.start, 0, 0, 0);\n@@ -853,28 +839,52 @@\n       alert('사용자 정보를 확인할 수 없습니다.');\n       return;\n     }\n \n-    // 휴일/휴게시간에 대한 권한 체크\n-    const isHolidayOrBreakTime = events.some(event => \n-      event.staffId === (staffId || selectedStaffIds[0]) &&\n-      (event.type === 'holiday' || event.type === 'break') &&\n+    // 휴일에 대한 권한 체크 (weeklyHolidaySettings 기반)\n+    const targetStaffId = staffId || selectedStaffIds[0];\n+    if (targetStaffId) {\n+      const dayOfWeek = startTime.getDay();\n+      const weekStartDate = (() => {\n+        const monday = new Date(startTime);\n+        monday.setDate(startTime.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\n+        return monday.toISOString().split('T')[0];\n+      })();\n+\n+      const weeklySettings = weeklyHolidaySettings.find(\n+        s => s.staffId === targetStaffId && s.weekStartDate === weekStartDate\n+      );\n+\n+      if (weeklySettings) {\n+        const dayKeys = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n+        const dayKey = dayKeys[dayOfWeek] as keyof typeof weeklySettings.weekDays;\n+        const daySettings = weeklySettings.weekDays[dayKey];\n+\n+        if (daySettings?.isHoliday) {\n+          // 휴일에 예약하려는 경우 권한 체크\n+          if (currentUser.role === 'master' || currentUser.id === targetStaffId) {\n+            // 마스터이거나 본인 코치인 경우 허용\n+            console.log('휴일 예약 권한 확인됨:', currentUser.role, currentUser.id, targetStaffId);\n+          } else {\n+            // 일반 사용자는 휴일에 예약 불가\n+            alert('휴일에는 예약을 생성할 수 없습니다. 관리자에게 문의하세요.');\n+            return;\n+          }\n+        }\n+      }\n+    }\n+\n+    // 휴게시간에 대한 체크 (스케줄 이벤트 기반)\n+    const isBreakTime = events.some(event => \n+      event.staffId === targetStaffId &&\n+      event.type === 'break' &&\n       startTime >= event.startTime &&\n       startTime < event.endTime\n     );\n \n-    if (isHolidayOrBreakTime) {\n-      // 휴일/휴게시간에 예약하려는 경우 권한 체크\n-      const targetStaffId = staffId || selectedStaffIds[0];\n-      \n-      if (currentUser.role === 'master' || currentUser.id === targetStaffId) {\n-        // 마스터이거나 본인 코치인 경우 허용\n-        console.log('휴일/휴게시간 예약 권한 확인됨:', currentUser.role, currentUser.id, targetStaffId);\n-      } else {\n-        // 일반 사용자는 휴일/휴게시간에 예약 불가\n-        alert('휴일 및 휴게시간에는 예약을 생성할 수 없습니다. 관리자에게 문의하세요.');\n-        return;\n-      }\n+    if (isBreakTime) {\n+      alert('휴게시간에는 예약을 생성할 수 없습니다.');\n+      return;\n     }\n \n     if (currentUser.role === 'master') {\n       // Master: 달력에서 하나의 코치만 선택된 경우에만 허용\n"
                },
                {
                    "date": 1761742231936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n   const [holidayModalStaffId, setHolidayModalStaffId] = useState<string | undefined>();\n   const [weeklyHolidayModalStaffId, setWeeklyHolidayModalStaffId] = useState<string | undefined>();\n   const [currentUser, setCurrentUser] = useState<{ id: string; role: 'master' | 'coach' | 'admin'; name?: string } | undefined>();\n   const holidaySettings: HolidaySettings[] = []; // 빈 배열로 고정\n-  const [weeklyHolidaySettings] = useState<WeeklyHolidaySettings[]>([]); // 빈 배열로 고정\n+  const [weeklyHolidaySettings, setWeeklyHolidaySettings] = useState<WeeklyHolidaySettings[]>([]);\n \n   // 예약 모달 상태\n   const [isReservationModalOpen, setIsReservationModalOpen] = useState(false);\n   const [reservationModalData, setReservationModalData] = useState<{\n@@ -474,8 +474,35 @@\n   //     console.error('휴일설정 로드 실패:', error);\n   //   }\n   // }, []);\n \n+  // 주별 휴일설정 로드\n+  const loadWeeklyHolidaySettings = useCallback(async () => {\n+    try {\n+      if (!selectedBranchId || staffList.length === 0) return;\n+      \n+      console.log('주별 휴일설정 로드 시작:', { selectedBranchId, staffCount: staffList.length });\n+      \n+      const allSettings: WeeklyHolidaySettings[] = [];\n+      \n+      // 각 코치별로 휴일 설정 로드\n+      for (const staff of staffList) {\n+        try {\n+          const staffSettings = await dbManager.getWeeklyHolidaySettingsByStaff(staff.id);\n+          console.log(`${staff.name} 코치 휴일설정:`, staffSettings.length, '개');\n+          allSettings.push(...staffSettings);\n+        } catch (error) {\n+          console.error(`${staff.name} 코치 휴일설정 로드 실패:`, error);\n+        }\n+      }\n+      \n+      console.log('전체 주별 휴일설정 로드 완료:', allSettings.length, '개');\n+      setWeeklyHolidaySettings(allSettings);\n+    } catch (error) {\n+      console.error('주별 휴일설정 로드 실패:', error);\n+    }\n+  }, [selectedBranchId, staffList]);\n+\n   // 현재 사용자 정보 로드\n   const loadCurrentUser = useCallback(async () => {\n     try {\n       const user = await getCurrentUser();\n@@ -754,8 +781,15 @@\n       loadStaffData();\n     }\n   }, [selectedBranchId, currentProgram, currentUser, loadStaffData]);\n \n+  // 직원 데이터가 로드된 후 주별 휴일설정 로드\n+  useEffect(() => {\n+    if (staffList.length > 0) {\n+      loadWeeklyHolidaySettings();\n+    }\n+  }, [staffList, loadWeeklyHolidaySettings]);\n+\n   // 지점 선택 변경 핸들러\n   const handleBranchChange = useCallback(async (branchId: string) => {\n     console.log('=== 지점 변경 시작 ===');\n     console.log('이전 지점 ID:', selectedBranchId);\n"
                }
            ],
            "date": 1760152571922,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\nimport CMSLayout from '../../../components/CMSLayout';\nimport { dbManager, Program } from '../../../utils/indexedDB';\n\nconst Container = styled.div`\n  width: 100%;\n`;\n\nconst ContentContainer = styled.div`\n  padding: 24px;\n  background-color: ${AppColors.surface};\n  border-radius: 8px;\n  border: 1px solid ${AppColors.borderLight};\n`;\n\nconst Title = styled.h2`\n  font-size: ${AppTextStyles.title1.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin-bottom: 24px;\n`;\n\nconst ProgramInfo = styled.div`\n  padding: 16px;\n  background-color: ${AppColors.background};\n  border-radius: 8px;\n  border: 1px solid ${AppColors.borderLight};\n  margin-bottom: 24px;\n`;\n\nconst ProgramName = styled.h3`\n  font-size: ${AppTextStyles.title2.fontSize};\n  font-weight: 500;\n  color: ${AppColors.primary};\n  margin-bottom: 8px;\n`;\n\nconst ProgramDetails = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nconst DetailItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onSurface};\n`;\n\nconst DetailLabel = styled.span`\n  font-weight: 500;\n  min-width: 80px;\n  color: ${AppColors.onSurface}80;\n`;\n\nconst DetailValue = styled.span`\n  color: ${AppColors.onSurface};\n`;\n\nconst PlaceholderContent = styled.div`\n  padding: 48px;\n  text-align: center;\n  color: ${AppColors.onSurface}60;\n  font-size: ${AppTextStyles.body1.fontSize};\n  border: 2px dashed ${AppColors.borderLight};\n  border-radius: 8px;\n`;\n\nconst ReservationPage: React.FC = () => {\n  const { programId } = useParams<{ programId: string }>();\n  const location = useLocation();\n  const [program, setProgram] = useState<Program | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  // 현재 선택된 메뉴 확인\n  const getMenuType = () => {\n    const path = location.pathname;\n    if (path.includes('/program/')) return 'program';\n    if (path.includes('/new')) return 'new';\n    if (path.includes('/timetable')) return 'timetable';\n    if (path.includes('/batch')) return 'batch';\n    if (path.includes('/waiting')) return 'waiting';\n    if (path.includes('/auto-remind')) return 'auto-remind';\n    return 'unknown';\n  };\n\n  const getPageTitle = () => {\n    const menuType = getMenuType();\n    switch (menuType) {\n      case 'program':\n        return program ? `${program.name} 예약` : '프로그램 예약';\n      case 'new':\n        return '신규 예약';\n      case 'timetable':\n        return '시간표 보기';\n      case 'batch':\n        return '일괄 예약';\n      case 'waiting':\n        return '대기 관리';\n      case 'auto-remind':\n        return '자동 리마인드';\n      default:\n        return '예약/스케줄';\n    }\n  };\n\n  // 프로그램 정보 로드\n  useEffect(() => {\n    const loadProgram = async () => {\n      if (programId) {\n        try {\n          setLoading(true);\n          const programs = await dbManager.getAllPrograms();\n          const foundProgram = programs.find(p => p.id === programId);\n          setProgram(foundProgram || null);\n        } catch (error) {\n          console.error('프로그램 정보 로드 실패:', error);\n          setProgram(null);\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n\n    loadProgram();\n  }, [programId]);\n\n  return (\n    <CMSLayout>\n      <Container>\n        <ContentContainer>\n          <Title>{getPageTitle()}</Title>\n          \n          {/* 프로그램별 예약인 경우 프로그램 정보 표시 */}\n          {program && (\n            <ProgramInfo>\n              <ProgramName>{program.name}</ProgramName>\n              <ProgramDetails>\n                <DetailItem>\n                  <DetailLabel>유형:</DetailLabel>\n                  <DetailValue>{program.type}</DetailValue>\n                </DetailItem>\n                <DetailItem>\n                  <DetailLabel>활성 상태:</DetailLabel>\n                  <DetailValue>{program.isActive ? '활성' : '비활성'}</DetailValue>\n                </DetailItem>\n              </ProgramDetails>\n            </ProgramInfo>\n          )}\n          \n          {loading ? (\n            <PlaceholderContent>\n              프로그램 정보를 불러오는 중...\n            </PlaceholderContent>\n          ) : (\n            <PlaceholderContent>\n              {getPageTitle()} 기능이 준비 중입니다.\n              <br />\n              <br />\n              이곳에 실제 예약 관리 기능이 구현될 예정입니다.\n            </PlaceholderContent>\n          )}\n        </ContentContainer>\n      </Container>\n    </CMSLayout>\n  );\n};\n\nexport default ReservationPage;\n"
        }
    ]
}