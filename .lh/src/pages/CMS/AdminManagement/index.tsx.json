{
    "sourceFile": "src/pages/CMS/AdminManagement/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1757827860790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757828417767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,607 @@\n+import React, { useState, useRef } from 'react';\n+import { toast } from 'react-toastify';\n+import CMSLayout from '../../../components/CMSLayout';\n+import GenericListUI, { FetchParams, FetchResult } from '../../../components/CustomList/GenericListUI';\n+import { ColumnDefinition } from '../../../components/CustomList/GenericDataTable';\n+import AdminFormPopup, { AdminFormData } from './AdminFormPopup';\n+import PasswordPopup from './PasswordPopup';\n+import dayjs from 'dayjs';\n+\n+// 관리자 데이터 타입 정의\n+interface AdminData {\n+  id?: number; // id를 optional로 변경\n+  no?: number; // no도 optional로 변경\n+  adminId: string; // API 응답의 adminId 필드\n+  name: string;\n+  email: string;\n+  cellphone?: string; // API 응답의 cellphone 필드\n+  memo?: string;\n+  createAt?: string; // API 응답의 createAt 필드\n+  lastLoginTime?: string; // API 응답의 lastLoginTime 필드\n+  // 기존 필드들은 하위 호환성을 위해 유지\n+  joinDate?: string;\n+  lastAccess?: string;\n+  username?: string;\n+  phone?: string;\n+}\n+\n+// 더미 데이터\n+const dummyAdminData: AdminData[] = [\n+  {\n+    id: 1,\n+    no: 1,\n+    adminId: 'lavida01',\n+    name: '관리자',\n+    email: 'admin@lavida.com',\n+    cellphone: '010-1234-5678',\n+    memo: '최고 관리자',\n+    createAt: '2024-01-01T09:00:00Z',\n+    lastLoginTime: '2024-03-15T14:30:00Z',\n+    username: 'lavida01',\n+    phone: '010-1234-5678',\n+    joinDate: '2024-01-01T09:00:00Z',\n+    lastAccess: '2024-03-15T14:30:00Z',\n+  },\n+  {\n+    id: 2,\n+    no: 2,\n+    adminId: 'admin02',\n+    name: '김관리',\n+    email: 'kim@lavida.com',\n+    cellphone: '010-2345-6789',\n+    memo: '일반 관리자',\n+    createAt: '2024-02-01T10:00:00Z',\n+    lastLoginTime: '2024-03-14T16:20:00Z',\n+    username: 'admin02',\n+    phone: '010-2345-6789',\n+    joinDate: '2024-02-01T10:00:00Z',\n+    lastAccess: '2024-03-14T16:20:00Z',\n+  },\n+  {\n+    id: 3,\n+    no: 3,\n+    adminId: 'admin03',\n+    name: '이운영',\n+    email: 'lee@lavida.com',\n+    cellphone: '010-3456-7890',\n+    memo: '운영 관리자',\n+    createAt: '2024-02-15T11:00:00Z',\n+    lastLoginTime: '2024-03-13T09:15:00Z',\n+    username: 'admin03',\n+    phone: '010-3456-7890',\n+    joinDate: '2024-02-15T11:00:00Z',\n+    lastAccess: '2024-03-13T09:15:00Z',\n+  },\n+];\n+\n+// 더미 API 함수들\n+const getAdminList = async (params?: any): Promise<any> => {\n+  // 실제 API 호출 시뮬레이션을 위한 delay\n+  await new Promise(resolve => setTimeout(resolve, 500));\n+  \n+  return {\n+    data: {\n+      statusCode: 200,\n+      message: \"success\",\n+      data: dummyAdminData,\n+      metadata: {\n+        totalCnt: dummyAdminData.length,\n+        allCnt: dummyAdminData.length,\n+      }\n+    }\n+  };\n+};\n+\n+const createAdmin = async (data: any): Promise<any> => {\n+  await new Promise(resolve => setTimeout(resolve, 500));\n+  \n+  // 새로운 관리자 데이터를 더미 데이터에 추가\n+  const newAdmin: AdminData = {\n+    id: dummyAdminData.length + 1,\n+    no: dummyAdminData.length + 1,\n+    adminId: data.adminId,\n+    name: data.name,\n+    email: data.email,\n+    cellphone: data.cellphone,\n+    memo: data.memo,\n+    createAt: new Date().toISOString(),\n+    lastLoginTime: undefined,\n+    username: data.adminId,\n+    phone: data.cellphone,\n+    joinDate: new Date().toISOString(),\n+    lastAccess: undefined,\n+  };\n+  \n+  dummyAdminData.push(newAdmin);\n+  \n+  return {\n+    data: {\n+      statusCode: 200,\n+      message: \"success\",\n+      data: newAdmin\n+    }\n+  };\n+};\n+\n+const updateAdmin = async (adminId: string, data: any): Promise<any> => {\n+  await new Promise(resolve => setTimeout(resolve, 500));\n+  \n+  const adminIndex = dummyAdminData.findIndex(admin => admin.adminId === adminId);\n+  if (adminIndex !== -1) {\n+    dummyAdminData[adminIndex] = {\n+      ...dummyAdminData[adminIndex],\n+      ...data,\n+      // 업데이트 시간 갱신\n+      updateAt: new Date().toISOString(),\n+    };\n+  }\n+  \n+  return {\n+    data: {\n+      statusCode: 200,\n+      message: \"success\",\n+      data: dummyAdminData[adminIndex]\n+    }\n+  };\n+};\n+\n+const deleteAdmin = async (adminId: string): Promise<any> => {\n+  await new Promise(resolve => setTimeout(resolve, 500));\n+  \n+  const adminIndex = dummyAdminData.findIndex(admin => admin.adminId === adminId);\n+  if (adminIndex !== -1) {\n+    dummyAdminData.splice(adminIndex, 1);\n+  }\n+  \n+  return {\n+    data: {\n+      statusCode: 200,\n+      message: \"success\"\n+    }\n+  };\n+};\n+\n+const AdminManagementPage: React.FC = () => {\n+  const [refreshTrigger, setRefreshTrigger] = useState(0);\n+  const listRef = useRef<{ refetch: () => void }>(null);\n+  \n+  // 팝업 상태\n+  const [isPopupOpen, setIsPopupOpen] = useState(false);\n+  const [isEditMode, setIsEditMode] = useState(false);\n+  const [selectedAdmin, setSelectedAdmin] = useState<AdminData | null>(null);\n+  const [showPasswordChange, setShowPasswordChange] = useState(false);\n+  const [isPasswordPopupOpen, setIsPasswordPopupOpen] = useState(false);\n+  \n+  // 폼 데이터\n+  const [formData, setFormData] = useState<AdminFormData>({\n+    username: '',\n+    email: '',\n+    name: '',\n+    phone: '',\n+    password: '',\n+    confirmPassword: '',\n+    memo: '',\n+  });\n+  \n+  // 폼 에러\n+  const [formErrors, setFormErrors] = useState<Partial<AdminFormData>>({});\n+\n+  // 폼 초기화\n+  const resetForm = () => {\n+    setFormData({\n+      username: '',\n+      email: '',\n+      name: '',\n+      phone: '',\n+      password: '',\n+      confirmPassword: '',\n+      memo: '',\n+    });\n+    setFormErrors({});\n+    setShowPasswordChange(false);\n+  };\n+\n+  // 폼 유효성 검사\n+  const validateForm = (): boolean => {\n+    const errors: Partial<AdminFormData> = {};\n+\n+    // 아이디 검증 (AppIdTextField가 내부적으로 검증)\n+    if (!formData.username.trim()) {\n+      errors.username = '아이디를 입력해주세요.';\n+    } else {\n+      // 영문자와 숫자를 포함한 6~20자 검증\n+      const idPattern = /^(?=.*[A-Za-z])(?=.*[0-9])[A-Za-z0-9]{6,20}$/;\n+      if (!idPattern.test(formData.username)) {\n+        errors.username = '아이디는 영문자와 숫자를 포함한 6~20자여야 합니다.';\n+      }\n+    }\n+\n+    // 이메일 검증 (AppEmailTextField가 내부적으로 검증)\n+    if (!formData.email.trim()) {\n+      errors.email = '이메일을 입력해주세요.';\n+    } else {\n+      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n+      if (!emailPattern.test(formData.email)) {\n+        errors.email = '올바른 이메일 형식을 입력해주세요.';\n+      }\n+    }\n+\n+    // 이름 검증\n+    if (!formData.name.trim()) {\n+      errors.name = '이름을 입력해주세요.';\n+    }\n+\n+    // 전화번호 검증 (AppGPhoneTextField가 내부적으로 검증)\n+    if (!formData.phone.trim()) {\n+      errors.phone = '전화번호를 입력해주세요.';\n+    } else if (formData.phone.length < 8 || formData.phone.length > 15) {\n+      errors.phone = '연락처는 8자리에서 15자리까지 입력해주세요.';\n+    }\n+\n+    // 신규 등록 시 또는 비밀번호 변경 모드일 때만 비밀번호 검증\n+    if (!isEditMode || showPasswordChange) {\n+      // 비밀번호 검증 (AppPwdTextField가 내부적으로 검증)\n+      if (!formData.password.trim()) {\n+        errors.password = '비밀번호를 입력해주세요.';\n+      } else {\n+        const pwdPattern = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/;\n+        if (!pwdPattern.test(formData.password)) {\n+          errors.password = '비밀번호는 영문자, 숫자, 특수문자를 포함하여 8자리 이상이어야 합니다.';\n+        }\n+      }\n+\n+      // 비밀번호 확인 검증\n+      if (!formData.confirmPassword.trim()) {\n+        errors.confirmPassword = '비밀번호 확인을 입력해주세요.';\n+      } else if (formData.password !== formData.confirmPassword) {\n+        errors.confirmPassword = '비밀번호가 일치하지 않습니다.';\n+      }\n+    }\n+\n+    setFormErrors(errors);\n+    return Object.keys(errors).length === 0;\n+  };\n+\n+  // 폼 데이터 변경 핸들러\n+  const handleInputChange = (field: keyof AdminFormData, value: string) => {\n+    setFormData(prev => ({ ...prev, [field]: value }));\n+    // 해당 필드의 에러 제거\n+    if (formErrors[field]) {\n+      setFormErrors(prev => ({ ...prev, [field]: undefined }));\n+    }\n+  };\n+\n+  // 팝업 열기 (신규 등록)\n+  const openAddPopup = () => {\n+    setIsEditMode(false);\n+    setSelectedAdmin(null);\n+    resetForm();\n+    setIsPopupOpen(true);\n+  };\n+\n+  // 팝업 열기 (수정)\n+  const openEditPopup = (admin: AdminData) => {\n+    setIsEditMode(true);\n+    setSelectedAdmin(admin);\n+    setFormData({\n+      username: admin.adminId || admin.username || '', // adminId를 username 폼 필드에 매핑\n+      email: admin.email,\n+      name: admin.name,\n+      phone: admin.cellphone || admin.phone || '', // cellphone을 phone 폼 필드에 매핑\n+      password: '',\n+      confirmPassword: '',\n+      memo: admin.memo || '',\n+    });\n+    setFormErrors({});\n+    setShowPasswordChange(false);\n+    setIsPopupOpen(true);\n+  };\n+\n+  // 팝업 닫기\n+  const closePopup = () => {\n+    setIsPopupOpen(false);\n+    resetForm();\n+  };\n+\n+  // 삭제 핸들러\n+  const handleDelete = async () => {\n+    if (!selectedAdmin?.adminId) {\n+      toast.error('관리자 정보를 찾을 수 없습니다.');\n+      return;\n+    }\n+\n+    try {\n+      const response = await deleteAdmin(selectedAdmin.adminId);\n+      \n+      // API 응답 구조 확인: statusCode가 200이고 message가 \"success\"일 때만 성공\n+      if (response?.data?.statusCode === 200 && response?.data?.message === \"success\") {\n+        toast.success('관리자가 삭제되었습니다.');\n+        closePopup();\n+        setRefreshTrigger(prev => prev + 1);\n+      } else {\n+        // statusCode가 200이 아니거나 message가 \"success\"가 아닌 경우\n+        const errorMessage = response?.data?.error?.customMessage || \n+                            response?.data?.message || \n+                            '삭제 처리 중 오류가 발생했습니다.';\n+        toast.error(`관리자 삭제에 실패했습니다. (${errorMessage})`);\n+      }\n+    } catch (error: any) {\n+      console.error('관리자 삭제 에러:', error);\n+      \n+      // callApi에서 던진 에러 처리\n+      const errorMessage = error?.data?.error?.customMessage || \n+                          error?.data?.message ||\n+                          error?.response?.data?.error?.customMessage || \n+                          error?.response?.data?.message || \n+                          error?.message || \n+                          '네트워크 오류가 발생했습니다.';\n+      \n+      toast.error(`관리자 삭제에 실패했습니다. (${errorMessage})`);\n+    }\n+  };\n+\n+  // 저장 핸들러\n+  const handleSave = async () => {\n+    if (!validateForm()) {\n+      return;\n+    }\n+\n+    try {\n+      if (isEditMode) {\n+        // 수정 모드\n+        if (!selectedAdmin?.adminId) {\n+          toast.error('관리자 정보를 찾을 수 없습니다.');\n+          return;\n+        }\n+\n+        const updateData: any = {\n+          email: formData.email,\n+          name: formData.name,\n+          cellphone: formData.phone,\n+          memo: formData.memo, // 비고 추가\n+        };\n+\n+        // 비밀번호 변경이 있는 경우에만 포함\n+        if (showPasswordChange && formData.password) {\n+          updateData.password = formData.password;\n+        }\n+\n+        console.log('수정할 관리자 ID:', selectedAdmin.adminId);\n+        console.log('수정 데이터:', updateData);\n+\n+        const response = await updateAdmin(selectedAdmin.adminId, updateData);\n+        \n+        // API 응답 구조 확인: statusCode가 200이고 message가 \"success\"일 때만 성공\n+        if (response?.data?.statusCode === 200 && response?.data?.message === \"success\") {\n+          toast.success('관리자 정보가 수정되었습니다.');\n+          closePopup();\n+          setRefreshTrigger(prev => prev + 1);\n+        } else {\n+          // statusCode가 200이 아니거나 message가 \"success\"가 아닌 경우\n+          const errorMessage = response?.data?.error?.customMessage || \n+                              response?.data?.message || \n+                              '수정 처리 중 오류가 발생했습니다.';\n+          toast.error(`관리자 정보 수정에 실패했습니다. (${errorMessage})`);\n+        }\n+      } else {\n+        // 생성 모드\n+        const createData = {\n+          adminId: formData.username,\n+          password: formData.password,\n+          name: formData.name,\n+          email: formData.email,\n+          cellphone: formData.phone,\n+          memo: formData.memo, // 비고 추가\n+        };\n+\n+        const response = await createAdmin(createData);\n+        \n+        // API 응답 구조 확인: statusCode가 200이고 message가 \"success\"일 때만 성공\n+        if (response?.data?.statusCode === 200 && response?.data?.message === \"success\") {\n+          toast.success('새 관리자가 등록되었습니다.');\n+          closePopup();\n+          setRefreshTrigger(prev => prev + 1);\n+        } else {\n+          // statusCode가 200이 아니거나 message가 \"success\"가 아닌 경우\n+          const errorMessage = response?.data?.error?.customMessage || \n+                              response?.data?.message || \n+                              '등록 처리 중 오류가 발생했습니다.';\n+          toast.error(`관리자 등록에 실패했습니다. (${errorMessage})`);\n+        }\n+      }\n+      \n+    } catch (error: any) {\n+      console.error('관리자 저장 에러:', error);\n+      \n+      // callApi에서 던진 에러 처리\n+      const errorMessage = error?.data?.error?.customMessage || \n+                          error?.data?.message ||\n+                          error?.response?.data?.error?.customMessage || \n+                          error?.response?.data?.message || \n+                          error?.message || \n+                          '네트워크 오류가 발생했습니다.';\n+      \n+      if (isEditMode) {\n+        toast.error(`관리자 정보 수정에 실패했습니다. (${errorMessage})`);\n+      } else {\n+        toast.error(`관리자 등록에 실패했습니다. (${errorMessage})`);\n+      }\n+      // 실패 시에는 팝업을 닫지 않음\n+    }\n+  };\n+\n+  // 비밀번호 변경 버튼 클릭\n+  const handlePasswordChangeClick = () => {\n+    setIsPasswordPopupOpen(true);\n+  };\n+\n+  // 비밀번호 팝업 닫기\n+  const closePasswordPopup = () => {\n+    setIsPasswordPopupOpen(false);\n+  };\n+\n+  // 컬럼 정의\n+  const columns: ColumnDefinition<AdminData>[] = [\n+    {\n+      header: 'No',\n+      accessor: 'no',\n+      formatter: (value) => value?.toString() || '',\n+    },\n+    {\n+      header: '가입일',\n+      accessor: 'createAt' as keyof AdminData,\n+      formatter: (value) => {\n+        if (!value) return '';\n+        return dayjs(value).format('YYYY.MM.DD');\n+      },\n+    },\n+    {\n+      header: '최근접속',\n+      accessor: 'lastLoginTime' as keyof AdminData,\n+      formatter: (value) => {\n+        if (!value) return '';\n+        return dayjs(value).format('MM.DD HH:mm');\n+      },\n+    },\n+    {\n+      header: '이름',\n+      accessor: 'name',\n+      formatter: (value) => value || '',\n+    },\n+    {\n+      header: '아이디',\n+      accessor: 'adminId' as keyof AdminData,\n+      formatter: (value) => value || '',\n+    },\n+    {\n+      header: '이메일',\n+      accessor: 'email',\n+      formatter: (value) => value || '',\n+    },\n+    {\n+      header: '전화번호',\n+      accessor: 'cellphone' as keyof AdminData,\n+      formatter: (value) => value || '',\n+    },\n+    {\n+      header: '비고',\n+      accessor: 'memo',\n+      formatter: (value) => value || '',\n+    },\n+  ];\n+\n+  // 실제 API 함수\n+  const fetchAdminData = async (params: FetchParams): Promise<FetchResult<AdminData>> => {\n+    try {\n+      console.log('fetchAdminData API 호출:', params);\n+      \n+      // 더미 API 호출\n+      const response = await getAdminList(params);\n+      \n+      // 실제 API 응답 구조에 맞게 처리\n+      // response.data = { statusCode, message, data: [...], metadata: {...} }\n+      let responseData = response.data?.data || response.data;\n+      \n+      // 배열이 아닌 경우 배열로 변환\n+      if (!Array.isArray(responseData)) {\n+        if (responseData?.items && Array.isArray(responseData.items)) {\n+          responseData = responseData.items;\n+        } else if (responseData && typeof responseData === 'object') {\n+          responseData = [responseData];\n+        } else {\n+          responseData = [];\n+        }\n+      }\n+      \n+      // 각 아이템에 id가 없는 경우 생성하고 no 필드도 추가\n+      responseData = responseData.map((item: any, index: number) => ({\n+        ...item,\n+        id: item.id || index + 1, // id가 없으면 index 기반으로 생성\n+        no: item.no || index + 1,  // no가 없으면 index 기반으로 생성\n+        // 하위 호환성을 위한 필드 매핑\n+        username: item.adminId || item.username,\n+        phone: item.cellphone || item.phone,\n+        joinDate: item.createAt || item.joinDate,\n+        lastAccess: item.lastLoginTime || item.lastAccess,\n+      }));\n+      \n+      // API 응답을 FetchResult 형태로 변환\n+      const result: FetchResult<AdminData> = {\n+        data: responseData,\n+        totalItems: response.data?.metadata?.totalCnt || responseData.length,\n+        allItems: response.data?.metadata?.allCnt || responseData.length,\n+      };\n+      \n+      return result;\n+      \n+    } catch (error) {\n+      \n+      // 에러 시 빈 결과 반환\n+      return {\n+        data: [],\n+        totalItems: 0,\n+        allItems: 0,\n+      };\n+    }\n+  };\n+\n+  // 관리자 추가 핸들러\n+  const handleAddAdmin = () => {\n+    openAddPopup();\n+  };\n+\n+  // 행 클릭 핸들러\n+  const handleRowClick = (item: AdminData, index: number) => {\n+    openEditPopup(item);\n+  };\n+\n+  return (\n+    <CMSLayout currentPath=\"/cms/admin\">\n+      <GenericListUI<AdminData>\n+        ref={listRef}\n+        title=\"관리자 회원관리\"\n+        columns={columns}\n+        fetchData={fetchAdminData}\n+        excelFileName=\"AdminList\"\n+        keyExtractor={(item, index) => {\n+          // id는 이제 항상 존재하지만 안전하게 처리\n+          return item.id ? item.id.toString() : `admin-${index}`;\n+        }}\n+        enableSearch={true}\n+        searchPlaceholder=\"이름, 아이디, 이메일, 전화번호 검색\"\n+        enableDateFilter={false}\n+        dateRangeOptions={['금월', '지난달', '1년', '지정']}\n+        itemsPerPageOptions={[10, 20, 50, 100]}\n+        themeMode=\"light\"\n+        onRowClick={handleRowClick}\n+        refreshTrigger={refreshTrigger}\n+        addButton={{\n+          label: '관리자 추가',\n+          onClick: handleAddAdmin,\n+        }}\n+      />\n+\n+      <AdminFormPopup\n+        isOpen={isPopupOpen}\n+        isEditMode={isEditMode}\n+        formData={formData}\n+        formErrors={formErrors}\n+        showPasswordChange={showPasswordChange}\n+        onClose={closePopup}\n+        onSave={handleSave}\n+        onDelete={handleDelete}\n+        onInputChange={handleInputChange}\n+        onPasswordChangeClick={handlePasswordChangeClick}\n+      />\n+\n+      <PasswordPopup\n+        adminId={selectedAdmin?.adminId || ''}\n+        isOpen={isPasswordPopupOpen}\n+        onClose={closePasswordPopup}\n+        onPasswordChanged={() => setRefreshTrigger(prev => prev + 1)}\n+      />\n+    </CMSLayout>\n+  );\n+};\n+\n+export default AdminManagementPage;\n"
                },
                {
                    "date": 1759912858959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,619 +1,51 @@\n-import React, { useState, useRef } from 'react';\n+import React, { useState, useRef, useEffect } from 'react';\n import { toast } from 'react-toastify';\n import CMSLayout from '../../../components/CMSLayout';\n import GenericListUI, { FetchParams, FetchResult } from '../../../components/CustomList/GenericListUI';\n import { ColumnDefinition } from '../../../components/CustomList/GenericDataTable';\n import AdminFormPopup, { AdminFormData } from './AdminFormPopup';\n import PasswordPopup from './PasswordPopup';\n+import { dbManager, Staff } from '../../../utils/indexedDB';\n+import { isSystemInInitialState } from '../../../utils/systemInit';\n+import { SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n+import styled from 'styled-components';\n+import { AppColors } from '../../../styles/colors';\n+import { AppTextStyles } from '../../../styles/textStyles';\n import dayjs from 'dayjs';\n \n-// 관리자 데이터 타입 정의\n-interface AdminData {\n-  id?: number; // id를 optional로 변경\n-  no?: number; // no도 optional로 변경\n-  adminId: string; // API 응답의 adminId 필드\n-  name: string;\n-  email: string;\n-  cellphone?: string; // API 응답의 cellphone 필드\n-  memo?: string;\n-  createAt?: string; // API 응답의 createAt 필드\n-  lastLoginTime?: string; // API 응답의 lastLoginTime 필드\n-  // 기존 필드들은 하위 호환성을 위해 유지\n-  joinDate?: string;\n-  lastAccess?: string;\n-  username?: string;\n-  phone?: string;\n-}\n+const SystemAdminNotice = styled.div`\n+  background-color: ${AppColors.warning}10;\n+  border: 1px solid ${AppColors.warning};\n+  border-radius: 8px;\n+  padding: 16px;\n+  margin-bottom: 24px;\n+  display: flex;\n+  align-items: center;\n+  gap: 12px;\n+`;\n \n-// 더미 데이터\n-const dummyAdminData: AdminData[] = [\n-  {\n-    id: 1,\n-    no: 1,\n-    adminId: 'lavida01',\n-    name: '관리자',\n-    email: 'admin@lavida.com',\n-    cellphone: '010-1234-5678',\n-    memo: '최고 관리자',\n-    createAt: '2024-01-01T09:00:00Z',\n-    lastLoginTime: '2024-03-15T14:30:00Z',\n-    username: 'lavida01',\n-    phone: '010-1234-5678',\n-    joinDate: '2024-01-01T09:00:00Z',\n-    lastAccess: '2024-03-15T14:30:00Z',\n-  },\n-  {\n-    id: 2,\n-    no: 2,\n-    adminId: 'admin02',\n-    name: '김관리',\n-    email: 'kim@lavida.com',\n-    cellphone: '010-2345-6789',\n-    memo: '일반 관리자',\n-    createAt: '2024-02-01T10:00:00Z',\n-    lastLoginTime: '2024-03-14T16:20:00Z',\n-    username: 'admin02',\n-    phone: '010-2345-6789',\n-    joinDate: '2024-02-01T10:00:00Z',\n-    lastAccess: '2024-03-14T16:20:00Z',\n-  },\n-  {\n-    id: 3,\n-    no: 3,\n-    adminId: 'admin03',\n-    name: '이운영',\n-    email: 'lee@lavida.com',\n-    cellphone: '010-3456-7890',\n-    memo: '운영 관리자',\n-    createAt: '2024-02-15T11:00:00Z',\n-    lastLoginTime: '2024-03-13T09:15:00Z',\n-    username: 'admin03',\n-    phone: '010-3456-7890',\n-    joinDate: '2024-02-15T11:00:00Z',\n-    lastAccess: '2024-03-13T09:15:00Z',\n-  },\n-];\n+const NoticeIcon = styled.span`\n+  font-size: 20px;\n+`;\n \n-// 더미 API 함수들\n-const getAdminList = async (params?: any): Promise<any> => {\n-  // 실제 API 호출 시뮬레이션을 위한 delay\n-  await new Promise(resolve => setTimeout(resolve, 500));\n-  \n-  return {\n-    data: {\n-      statusCode: 200,\n-      message: \"success\",\n-      data: dummyAdminData,\n-      metadata: {\n-        totalCnt: dummyAdminData.length,\n-        allCnt: dummyAdminData.length,\n-      }\n-    }\n-  };\n-};\n+const NoticeContent = styled.div`\n+  flex: 1;\n+`;\n \n-const createAdmin = async (data: any): Promise<any> => {\n-  await new Promise(resolve => setTimeout(resolve, 500));\n-  \n-  // 새로운 관리자 데이터를 더미 데이터에 추가\n-  const newAdmin: AdminData = {\n-    id: dummyAdminData.length + 1,\n-    no: dummyAdminData.length + 1,\n-    adminId: data.adminId,\n-    name: data.name,\n-    email: data.email,\n-    cellphone: data.cellphone,\n-    memo: data.memo,\n-    createAt: new Date().toISOString(),\n-    lastLoginTime: undefined,\n-    username: data.adminId,\n-    phone: data.cellphone,\n-    joinDate: new Date().toISOString(),\n-    lastAccess: undefined,\n-  };\n-  \n-  dummyAdminData.push(newAdmin);\n-  \n-  return {\n-    data: {\n-      statusCode: 200,\n-      message: \"success\",\n-      data: newAdmin\n-    }\n-  };\n-};\n+const NoticeTitle = styled.div`\n+  font-weight: 600;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.warning};\n+  margin-bottom: 4px;\n+`;\n \n-const updateAdmin = async (adminId: string, data: any): Promise<any> => {\n-  await new Promise(resolve => setTimeout(resolve, 500));\n-  \n-  const adminIndex = dummyAdminData.findIndex(admin => admin.adminId === adminId);\n-  if (adminIndex !== -1) {\n-    dummyAdminData[adminIndex] = {\n-      ...dummyAdminData[adminIndex],\n-      ...data,\n-      // 업데이트 시간 갱신\n-      updateAt: new Date().toISOString(),\n-    };\n-  }\n-  \n-  return {\n-    data: {\n-      statusCode: 200,\n-      message: \"success\",\n-      data: dummyAdminData[adminIndex]\n-    }\n-  };\n-};\n+const NoticeMessage = styled.div`\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  color: ${AppColors.onSurface};\n+  line-height: 1.4;\n+`;\n \n-const deleteAdmin = async (adminId: string): Promise<any> => {\n-  await new Promise(resolve => setTimeout(resolve, 500));\n-  \n-  const adminIndex = dummyAdminData.findIndex(admin => admin.adminId === adminId);\n-  if (adminIndex !== -1) {\n-    dummyAdminData.splice(adminIndex, 1);\n-  }\n-  \n-  return {\n-    data: {\n-      statusCode: 200,\n-      message: \"success\"\n-    }\n-  };\n-};\n-\n-const AdminManagementPage: React.FC = () => {\n-  const [refreshTrigger, setRefreshTrigger] = useState(0);\n-  const listRef = useRef<{ refetch: () => void }>(null);\n-  \n-  // 팝업 상태\n-  const [isPopupOpen, setIsPopupOpen] = useState(false);\n-  const [isEditMode, setIsEditMode] = useState(false);\n-  const [selectedAdmin, setSelectedAdmin] = useState<AdminData | null>(null);\n-  const [showPasswordChange, setShowPasswordChange] = useState(false);\n-  const [isPasswordPopupOpen, setIsPasswordPopupOpen] = useState(false);\n-  \n-  // 폼 데이터\n-  const [formData, setFormData] = useState<AdminFormData>({\n-    username: '',\n-    email: '',\n-    name: '',\n-    phone: '',\n-    password: '',\n-    confirmPassword: '',\n-    memo: '',\n-  });\n-  \n-  // 폼 에러\n-  const [formErrors, setFormErrors] = useState<Partial<AdminFormData>>({});\n-\n-  // 폼 초기화\n-  const resetForm = () => {\n-    setFormData({\n-      username: '',\n-      email: '',\n-      name: '',\n-      phone: '',\n-      password: '',\n-      confirmPassword: '',\n-      memo: '',\n-    });\n-    setFormErrors({});\n-    setShowPasswordChange(false);\n-  };\n-\n-  // 폼 유효성 검사\n-  const validateForm = (): boolean => {\n-    const errors: Partial<AdminFormData> = {};\n-\n-    // 아이디 검증 (AppIdTextField가 내부적으로 검증)\n-    if (!formData.username.trim()) {\n-      errors.username = '아이디를 입력해주세요.';\n-    } else {\n-      // 영문자와 숫자를 포함한 6~20자 검증\n-      const idPattern = /^(?=.*[A-Za-z])(?=.*[0-9])[A-Za-z0-9]{6,20}$/;\n-      if (!idPattern.test(formData.username)) {\n-        errors.username = '아이디는 영문자와 숫자를 포함한 6~20자여야 합니다.';\n-      }\n-    }\n-\n-    // 이메일 검증 (AppEmailTextField가 내부적으로 검증)\n-    if (!formData.email.trim()) {\n-      errors.email = '이메일을 입력해주세요.';\n-    } else {\n-      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n-      if (!emailPattern.test(formData.email)) {\n-        errors.email = '올바른 이메일 형식을 입력해주세요.';\n-      }\n-    }\n-\n-    // 이름 검증\n-    if (!formData.name.trim()) {\n-      errors.name = '이름을 입력해주세요.';\n-    }\n-\n-    // 전화번호 검증 (AppGPhoneTextField가 내부적으로 검증)\n-    if (!formData.phone.trim()) {\n-      errors.phone = '전화번호를 입력해주세요.';\n-    } else if (formData.phone.length < 8 || formData.phone.length > 15) {\n-      errors.phone = '연락처는 8자리에서 15자리까지 입력해주세요.';\n-    }\n-\n-    // 신규 등록 시 또는 비밀번호 변경 모드일 때만 비밀번호 검증\n-    if (!isEditMode || showPasswordChange) {\n-      // 비밀번호 검증 (AppPwdTextField가 내부적으로 검증)\n-      if (!formData.password.trim()) {\n-        errors.password = '비밀번호를 입력해주세요.';\n-      } else {\n-        const pwdPattern = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/;\n-        if (!pwdPattern.test(formData.password)) {\n-          errors.password = '비밀번호는 영문자, 숫자, 특수문자를 포함하여 8자리 이상이어야 합니다.';\n-        }\n-      }\n-\n-      // 비밀번호 확인 검증\n-      if (!formData.confirmPassword.trim()) {\n-        errors.confirmPassword = '비밀번호 확인을 입력해주세요.';\n-      } else if (formData.password !== formData.confirmPassword) {\n-        errors.confirmPassword = '비밀번호가 일치하지 않습니다.';\n-      }\n-    }\n-\n-    setFormErrors(errors);\n-    return Object.keys(errors).length === 0;\n-  };\n-\n-  // 폼 데이터 변경 핸들러\n-  const handleInputChange = (field: keyof AdminFormData, value: string) => {\n-    setFormData(prev => ({ ...prev, [field]: value }));\n-    // 해당 필드의 에러 제거\n-    if (formErrors[field]) {\n-      setFormErrors(prev => ({ ...prev, [field]: undefined }));\n-    }\n-  };\n-\n-  // 팝업 열기 (신규 등록)\n-  const openAddPopup = () => {\n-    setIsEditMode(false);\n-    setSelectedAdmin(null);\n-    resetForm();\n-    setIsPopupOpen(true);\n-  };\n-\n-  // 팝업 열기 (수정)\n-  const openEditPopup = (admin: AdminData) => {\n-    setIsEditMode(true);\n-    setSelectedAdmin(admin);\n-    setFormData({\n-      username: admin.adminId || admin.username || '', // adminId를 username 폼 필드에 매핑\n-      email: admin.email,\n-      name: admin.name,\n-      phone: admin.cellphone || admin.phone || '', // cellphone을 phone 폼 필드에 매핑\n-      password: '',\n-      confirmPassword: '',\n-      memo: admin.memo || '',\n-    });\n-    setFormErrors({});\n-    setShowPasswordChange(false);\n-    setIsPopupOpen(true);\n-  };\n-\n-  // 팝업 닫기\n-  const closePopup = () => {\n-    setIsPopupOpen(false);\n-    resetForm();\n-  };\n-\n-  // 삭제 핸들러\n-  const handleDelete = async () => {\n-    if (!selectedAdmin?.adminId) {\n-      toast.error('관리자 정보를 찾을 수 없습니다.');\n-      return;\n-    }\n-\n-    try {\n-      const response = await deleteAdmin(selectedAdmin.adminId);\n-      \n-      // API 응답 구조 확인: statusCode가 200이고 message가 \"success\"일 때만 성공\n-      if (response?.data?.statusCode === 200 && response?.data?.message === \"success\") {\n-        toast.success('관리자가 삭제되었습니다.');\n-        closePopup();\n-        setRefreshTrigger(prev => prev + 1);\n-      } else {\n-        // statusCode가 200이 아니거나 message가 \"success\"가 아닌 경우\n-        const errorMessage = response?.data?.error?.customMessage || \n-                            response?.data?.message || \n-                            '삭제 처리 중 오류가 발생했습니다.';\n-        toast.error(`관리자 삭제에 실패했습니다. (${errorMessage})`);\n-      }\n-    } catch (error: any) {\n-      console.error('관리자 삭제 에러:', error);\n-      \n-      // callApi에서 던진 에러 처리\n-      const errorMessage = error?.data?.error?.customMessage || \n-                          error?.data?.message ||\n-                          error?.response?.data?.error?.customMessage || \n-                          error?.response?.data?.message || \n-                          error?.message || \n-                          '네트워크 오류가 발생했습니다.';\n-      \n-      toast.error(`관리자 삭제에 실패했습니다. (${errorMessage})`);\n-    }\n-  };\n-\n-  // 저장 핸들러\n-  const handleSave = async () => {\n-    if (!validateForm()) {\n-      return;\n-    }\n-\n-    try {\n-      if (isEditMode) {\n-        // 수정 모드\n-        if (!selectedAdmin?.adminId) {\n-          toast.error('관리자 정보를 찾을 수 없습니다.');\n-          return;\n-        }\n-\n-        const updateData: any = {\n-          email: formData.email,\n-          name: formData.name,\n-          cellphone: formData.phone,\n-          memo: formData.memo, // 비고 추가\n-        };\n-\n-        // 비밀번호 변경이 있는 경우에만 포함\n-        if (showPasswordChange && formData.password) {\n-          updateData.password = formData.password;\n-        }\n-\n-        console.log('수정할 관리자 ID:', selectedAdmin.adminId);\n-        console.log('수정 데이터:', updateData);\n-\n-        const response = await updateAdmin(selectedAdmin.adminId, updateData);\n-        \n-        // API 응답 구조 확인: statusCode가 200이고 message가 \"success\"일 때만 성공\n-        if (response?.data?.statusCode === 200 && response?.data?.message === \"success\") {\n-          toast.success('관리자 정보가 수정되었습니다.');\n-          closePopup();\n-          setRefreshTrigger(prev => prev + 1);\n-        } else {\n-          // statusCode가 200이 아니거나 message가 \"success\"가 아닌 경우\n-          const errorMessage = response?.data?.error?.customMessage || \n-                              response?.data?.message || \n-                              '수정 처리 중 오류가 발생했습니다.';\n-          toast.error(`관리자 정보 수정에 실패했습니다. (${errorMessage})`);\n-        }\n-      } else {\n-        // 생성 모드\n-        const createData = {\n-          adminId: formData.username,\n-          password: formData.password,\n-          name: formData.name,\n-          email: formData.email,\n-          cellphone: formData.phone,\n-          memo: formData.memo, // 비고 추가\n-        };\n-\n-        const response = await createAdmin(createData);\n-        \n-        // API 응답 구조 확인: statusCode가 200이고 message가 \"success\"일 때만 성공\n-        if (response?.data?.statusCode === 200 && response?.data?.message === \"success\") {\n-          toast.success('새 관리자가 등록되었습니다.');\n-          closePopup();\n-          setRefreshTrigger(prev => prev + 1);\n-        } else {\n-          // statusCode가 200이 아니거나 message가 \"success\"가 아닌 경우\n-          const errorMessage = response?.data?.error?.customMessage || \n-                              response?.data?.message || \n-                              '등록 처리 중 오류가 발생했습니다.';\n-          toast.error(`관리자 등록에 실패했습니다. (${errorMessage})`);\n-        }\n-      }\n-      \n-    } catch (error: any) {\n-      console.error('관리자 저장 에러:', error);\n-      \n-      // callApi에서 던진 에러 처리\n-      const errorMessage = error?.data?.error?.customMessage || \n-                          error?.data?.message ||\n-                          error?.response?.data?.error?.customMessage || \n-                          error?.response?.data?.message || \n-                          error?.message || \n-                          '네트워크 오류가 발생했습니다.';\n-      \n-      if (isEditMode) {\n-        toast.error(`관리자 정보 수정에 실패했습니다. (${errorMessage})`);\n-      } else {\n-        toast.error(`관리자 등록에 실패했습니다. (${errorMessage})`);\n-      }\n-      // 실패 시에는 팝업을 닫지 않음\n-    }\n-  };\n-\n-  // 비밀번호 변경 버튼 클릭\n-  const handlePasswordChangeClick = () => {\n-    setIsPasswordPopupOpen(true);\n-  };\n-\n-  // 비밀번호 팝업 닫기\n-  const closePasswordPopup = () => {\n-    setIsPasswordPopupOpen(false);\n-  };\n-\n-  // 컬럼 정의\n-  const columns: ColumnDefinition<AdminData>[] = [\n-    {\n-      header: 'No',\n-      accessor: 'no',\n-      formatter: (value) => value?.toString() || '',\n-    },\n-    {\n-      header: '가입일',\n-      accessor: 'createAt' as keyof AdminData,\n-      formatter: (value) => {\n-        if (!value) return '';\n-        return dayjs(value).format('YYYY.MM.DD');\n-      },\n-    },\n-    {\n-      header: '최근접속',\n-      accessor: 'lastLoginTime' as keyof AdminData,\n-      formatter: (value) => {\n-        if (!value) return '';\n-        return dayjs(value).format('MM.DD HH:mm');\n-      },\n-    },\n-    {\n-      header: '이름',\n-      accessor: 'name',\n-      formatter: (value) => value || '',\n-    },\n-    {\n-      header: '아이디',\n-      accessor: 'adminId' as keyof AdminData,\n-      formatter: (value) => value || '',\n-    },\n-    {\n-      header: '이메일',\n-      accessor: 'email',\n-      formatter: (value) => value || '',\n-    },\n-    {\n-      header: '전화번호',\n-      accessor: 'cellphone' as keyof AdminData,\n-      formatter: (value) => value || '',\n-    },\n-    {\n-      header: '비고',\n-      accessor: 'memo',\n-      formatter: (value) => value || '',\n-    },\n-  ];\n-\n-  // 실제 API 함수\n-  const fetchAdminData = async (params: FetchParams): Promise<FetchResult<AdminData>> => {\n-    try {\n-      console.log('fetchAdminData API 호출:', params);\n-      \n-      // 더미 API 호출\n-      const response = await getAdminList(params);\n-      \n-      // 실제 API 응답 구조에 맞게 처리\n-      // response.data = { statusCode, message, data: [...], metadata: {...} }\n-      let responseData = response.data?.data || response.data;\n-      \n-      // 배열이 아닌 경우 배열로 변환\n-      if (!Array.isArray(responseData)) {\n-        if (responseData?.items && Array.isArray(responseData.items)) {\n-          responseData = responseData.items;\n-        } else if (responseData && typeof responseData === 'object') {\n-          responseData = [responseData];\n-        } else {\n-          responseData = [];\n-        }\n-      }\n-      \n-      // 각 아이템에 id가 없는 경우 생성하고 no 필드도 추가\n-      responseData = responseData.map((item: any, index: number) => ({\n-        ...item,\n-        id: item.id || index + 1, // id가 없으면 index 기반으로 생성\n-        no: item.no || index + 1,  // no가 없으면 index 기반으로 생성\n-        // 하위 호환성을 위한 필드 매핑\n-        username: item.adminId || item.username,\n-        phone: item.cellphone || item.phone,\n-        joinDate: item.createAt || item.joinDate,\n-        lastAccess: item.lastLoginTime || item.lastAccess,\n-      }));\n-      \n-      // API 응답을 FetchResult 형태로 변환\n-      const result: FetchResult<AdminData> = {\n-        data: responseData,\n-        totalItems: response.data?.metadata?.totalCnt || responseData.length,\n-        allItems: response.data?.metadata?.allCnt || responseData.length,\n-      };\n-      \n-      return result;\n-      \n-    } catch (error) {\n-      \n-      // 에러 시 빈 결과 반환\n-      return {\n-        data: [],\n-        totalItems: 0,\n-        allItems: 0,\n-      };\n-    }\n-  };\n-\n-  // 관리자 추가 핸들러\n-  const handleAddAdmin = () => {\n-    openAddPopup();\n-  };\n-\n-  // 행 클릭 핸들러\n-  const handleRowClick = (item: AdminData, index: number) => {\n-    openEditPopup(item);\n-  };\n-\n-  return (\n-    <CMSLayout currentPath=\"/cms/admin\">\n-      <GenericListUI<AdminData>\n-        ref={listRef}\n-        title=\"관리자 회원관리\"\n-        columns={columns}\n-        fetchData={fetchAdminData}\n-        excelFileName=\"AdminList\"\n-        keyExtractor={(item, index) => {\n-          // id는 이제 항상 존재하지만 안전하게 처리\n-          return item.id ? item.id.toString() : `admin-${index}`;\n-        }}\n-        enableSearch={true}\n-        searchPlaceholder=\"이름, 아이디, 이메일, 전화번호 검색\"\n-        enableDateFilter={false}\n-        dateRangeOptions={['금월', '지난달', '1년', '지정']}\n-        itemsPerPageOptions={[10, 20, 50, 100]}\n-        themeMode=\"light\"\n-        onRowClick={handleRowClick}\n-        refreshTrigger={refreshTrigger}\n-        addButton={{\n-          label: '관리자 추가',\n-          onClick: handleAddAdmin,\n-        }}\n-      />\n-\n-      <AdminFormPopup\n-        isOpen={isPopupOpen}\n-        isEditMode={isEditMode}\n-        formData={formData}\n-        formErrors={formErrors}\n-        showPasswordChange={showPasswordChange}\n-        onClose={closePopup}\n-        onSave={handleSave}\n-        onDelete={handleDelete}\n-        onInputChange={handleInputChange}\n-        onPasswordChangeClick={handlePasswordChangeClick}\n-      />\n-\n-      <PasswordPopup\n-        adminId={selectedAdmin?.adminId || ''}\n-        isOpen={isPasswordPopupOpen}\n-        onClose={closePasswordPopup}\n-        onPasswordChanged={() => setRefreshTrigger(prev => prev + 1)}\n-      />\n-    </CMSLayout>\n-  );\n-};\n-\n-export default AdminManagementPage;\n-import React, { useState, useRef } from 'react';\n-import { toast } from 'react-toastify';\n-import GenericListUI, { FetchParams, FetchResult } from '../../../components/CustomList/GenericListUI';\n-import { ColumnDefinition } from '../../../components/CustomList/GenericDataTable';\n-import AdminFormPopup, { AdminFormData } from './AdminFormPopup';\n-import PasswordPopup from './PasswordPopup';\n-import dayjs from 'dayjs';\n-\n // 관리자 데이터 타입 정의\n interface AdminData {\n   id?: number; // id를 optional로 변경\n   no?: number; // no도 optional로 변경\n@@ -1161,9 +593,9 @@\n     openEditPopup(item);\n   };\n \n   return (\n-    <>\n+    <CMSLayout currentPath=\"/cms/admin\">\n       <GenericListUI<AdminData>\n         ref={listRef}\n         title=\"관리자 회원관리\"\n         columns={columns}\n@@ -1205,9 +637,9 @@\n         isOpen={isPasswordPopupOpen}\n         onClose={closePasswordPopup}\n         onPasswordChanged={() => setRefreshTrigger(prev => prev + 1)}\n       />\n-    </>\n+    </CMSLayout>\n   );\n };\n \n export default AdminManagementPage;\n"
                }
            ],
            "date": 1757827860790,
            "name": "Commit-0",
            "content": "import React, { useState, useRef } from 'react';\nimport { toast } from 'react-toastify';\nimport GenericListUI, { FetchParams, FetchResult } from '../../../components/CustomList/GenericListUI';\nimport { ColumnDefinition } from '../../../components/CustomList/GenericDataTable';\nimport AdminFormPopup, { AdminFormData } from './AdminFormPopup';\nimport PasswordPopup from './PasswordPopup';\nimport dayjs from 'dayjs';\n\n// 관리자 데이터 타입 정의\ninterface AdminData {\n  id?: number; // id를 optional로 변경\n  no?: number; // no도 optional로 변경\n  adminId: string; // API 응답의 adminId 필드\n  name: string;\n  email: string;\n  cellphone?: string; // API 응답의 cellphone 필드\n  memo?: string;\n  createAt?: string; // API 응답의 createAt 필드\n  lastLoginTime?: string; // API 응답의 lastLoginTime 필드\n  // 기존 필드들은 하위 호환성을 위해 유지\n  joinDate?: string;\n  lastAccess?: string;\n  username?: string;\n  phone?: string;\n}\n\n// 더미 데이터\nconst dummyAdminData: AdminData[] = [\n  {\n    id: 1,\n    no: 1,\n    adminId: 'lavida01',\n    name: '관리자',\n    email: 'admin@lavida.com',\n    cellphone: '010-1234-5678',\n    memo: '최고 관리자',\n    createAt: '2024-01-01T09:00:00Z',\n    lastLoginTime: '2024-03-15T14:30:00Z',\n    username: 'lavida01',\n    phone: '010-1234-5678',\n    joinDate: '2024-01-01T09:00:00Z',\n    lastAccess: '2024-03-15T14:30:00Z',\n  },\n  {\n    id: 2,\n    no: 2,\n    adminId: 'admin02',\n    name: '김관리',\n    email: 'kim@lavida.com',\n    cellphone: '010-2345-6789',\n    memo: '일반 관리자',\n    createAt: '2024-02-01T10:00:00Z',\n    lastLoginTime: '2024-03-14T16:20:00Z',\n    username: 'admin02',\n    phone: '010-2345-6789',\n    joinDate: '2024-02-01T10:00:00Z',\n    lastAccess: '2024-03-14T16:20:00Z',\n  },\n  {\n    id: 3,\n    no: 3,\n    adminId: 'admin03',\n    name: '이운영',\n    email: 'lee@lavida.com',\n    cellphone: '010-3456-7890',\n    memo: '운영 관리자',\n    createAt: '2024-02-15T11:00:00Z',\n    lastLoginTime: '2024-03-13T09:15:00Z',\n    username: 'admin03',\n    phone: '010-3456-7890',\n    joinDate: '2024-02-15T11:00:00Z',\n    lastAccess: '2024-03-13T09:15:00Z',\n  },\n];\n\n// 더미 API 함수들\nconst getAdminList = async (params?: any): Promise<any> => {\n  // 실제 API 호출 시뮬레이션을 위한 delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  return {\n    data: {\n      statusCode: 200,\n      message: \"success\",\n      data: dummyAdminData,\n      metadata: {\n        totalCnt: dummyAdminData.length,\n        allCnt: dummyAdminData.length,\n      }\n    }\n  };\n};\n\nconst createAdmin = async (data: any): Promise<any> => {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  // 새로운 관리자 데이터를 더미 데이터에 추가\n  const newAdmin: AdminData = {\n    id: dummyAdminData.length + 1,\n    no: dummyAdminData.length + 1,\n    adminId: data.adminId,\n    name: data.name,\n    email: data.email,\n    cellphone: data.cellphone,\n    memo: data.memo,\n    createAt: new Date().toISOString(),\n    lastLoginTime: undefined,\n    username: data.adminId,\n    phone: data.cellphone,\n    joinDate: new Date().toISOString(),\n    lastAccess: undefined,\n  };\n  \n  dummyAdminData.push(newAdmin);\n  \n  return {\n    data: {\n      statusCode: 200,\n      message: \"success\",\n      data: newAdmin\n    }\n  };\n};\n\nconst updateAdmin = async (adminId: string, data: any): Promise<any> => {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  const adminIndex = dummyAdminData.findIndex(admin => admin.adminId === adminId);\n  if (adminIndex !== -1) {\n    dummyAdminData[adminIndex] = {\n      ...dummyAdminData[adminIndex],\n      ...data,\n      // 업데이트 시간 갱신\n      updateAt: new Date().toISOString(),\n    };\n  }\n  \n  return {\n    data: {\n      statusCode: 200,\n      message: \"success\",\n      data: dummyAdminData[adminIndex]\n    }\n  };\n};\n\nconst deleteAdmin = async (adminId: string): Promise<any> => {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  const adminIndex = dummyAdminData.findIndex(admin => admin.adminId === adminId);\n  if (adminIndex !== -1) {\n    dummyAdminData.splice(adminIndex, 1);\n  }\n  \n  return {\n    data: {\n      statusCode: 200,\n      message: \"success\"\n    }\n  };\n};\n\nconst AdminManagementPage: React.FC = () => {\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n  const listRef = useRef<{ refetch: () => void }>(null);\n  \n  // 팝업 상태\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [selectedAdmin, setSelectedAdmin] = useState<AdminData | null>(null);\n  const [showPasswordChange, setShowPasswordChange] = useState(false);\n  const [isPasswordPopupOpen, setIsPasswordPopupOpen] = useState(false);\n  \n  // 폼 데이터\n  const [formData, setFormData] = useState<AdminFormData>({\n    username: '',\n    email: '',\n    name: '',\n    phone: '',\n    password: '',\n    confirmPassword: '',\n    memo: '',\n  });\n  \n  // 폼 에러\n  const [formErrors, setFormErrors] = useState<Partial<AdminFormData>>({});\n\n  // 폼 초기화\n  const resetForm = () => {\n    setFormData({\n      username: '',\n      email: '',\n      name: '',\n      phone: '',\n      password: '',\n      confirmPassword: '',\n      memo: '',\n    });\n    setFormErrors({});\n    setShowPasswordChange(false);\n  };\n\n  // 폼 유효성 검사\n  const validateForm = (): boolean => {\n    const errors: Partial<AdminFormData> = {};\n\n    // 아이디 검증 (AppIdTextField가 내부적으로 검증)\n    if (!formData.username.trim()) {\n      errors.username = '아이디를 입력해주세요.';\n    } else {\n      // 영문자와 숫자를 포함한 6~20자 검증\n      const idPattern = /^(?=.*[A-Za-z])(?=.*[0-9])[A-Za-z0-9]{6,20}$/;\n      if (!idPattern.test(formData.username)) {\n        errors.username = '아이디는 영문자와 숫자를 포함한 6~20자여야 합니다.';\n      }\n    }\n\n    // 이메일 검증 (AppEmailTextField가 내부적으로 검증)\n    if (!formData.email.trim()) {\n      errors.email = '이메일을 입력해주세요.';\n    } else {\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailPattern.test(formData.email)) {\n        errors.email = '올바른 이메일 형식을 입력해주세요.';\n      }\n    }\n\n    // 이름 검증\n    if (!formData.name.trim()) {\n      errors.name = '이름을 입력해주세요.';\n    }\n\n    // 전화번호 검증 (AppGPhoneTextField가 내부적으로 검증)\n    if (!formData.phone.trim()) {\n      errors.phone = '전화번호를 입력해주세요.';\n    } else if (formData.phone.length < 8 || formData.phone.length > 15) {\n      errors.phone = '연락처는 8자리에서 15자리까지 입력해주세요.';\n    }\n\n    // 신규 등록 시 또는 비밀번호 변경 모드일 때만 비밀번호 검증\n    if (!isEditMode || showPasswordChange) {\n      // 비밀번호 검증 (AppPwdTextField가 내부적으로 검증)\n      if (!formData.password.trim()) {\n        errors.password = '비밀번호를 입력해주세요.';\n      } else {\n        const pwdPattern = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/;\n        if (!pwdPattern.test(formData.password)) {\n          errors.password = '비밀번호는 영문자, 숫자, 특수문자를 포함하여 8자리 이상이어야 합니다.';\n        }\n      }\n\n      // 비밀번호 확인 검증\n      if (!formData.confirmPassword.trim()) {\n        errors.confirmPassword = '비밀번호 확인을 입력해주세요.';\n      } else if (formData.password !== formData.confirmPassword) {\n        errors.confirmPassword = '비밀번호가 일치하지 않습니다.';\n      }\n    }\n\n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  // 폼 데이터 변경 핸들러\n  const handleInputChange = (field: keyof AdminFormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // 해당 필드의 에러 제거\n    if (formErrors[field]) {\n      setFormErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  };\n\n  // 팝업 열기 (신규 등록)\n  const openAddPopup = () => {\n    setIsEditMode(false);\n    setSelectedAdmin(null);\n    resetForm();\n    setIsPopupOpen(true);\n  };\n\n  // 팝업 열기 (수정)\n  const openEditPopup = (admin: AdminData) => {\n    setIsEditMode(true);\n    setSelectedAdmin(admin);\n    setFormData({\n      username: admin.adminId || admin.username || '', // adminId를 username 폼 필드에 매핑\n      email: admin.email,\n      name: admin.name,\n      phone: admin.cellphone || admin.phone || '', // cellphone을 phone 폼 필드에 매핑\n      password: '',\n      confirmPassword: '',\n      memo: admin.memo || '',\n    });\n    setFormErrors({});\n    setShowPasswordChange(false);\n    setIsPopupOpen(true);\n  };\n\n  // 팝업 닫기\n  const closePopup = () => {\n    setIsPopupOpen(false);\n    resetForm();\n  };\n\n  // 삭제 핸들러\n  const handleDelete = async () => {\n    if (!selectedAdmin?.adminId) {\n      toast.error('관리자 정보를 찾을 수 없습니다.');\n      return;\n    }\n\n    try {\n      const response = await deleteAdmin(selectedAdmin.adminId);\n      \n      // API 응답 구조 확인: statusCode가 200이고 message가 \"success\"일 때만 성공\n      if (response?.data?.statusCode === 200 && response?.data?.message === \"success\") {\n        toast.success('관리자가 삭제되었습니다.');\n        closePopup();\n        setRefreshTrigger(prev => prev + 1);\n      } else {\n        // statusCode가 200이 아니거나 message가 \"success\"가 아닌 경우\n        const errorMessage = response?.data?.error?.customMessage || \n                            response?.data?.message || \n                            '삭제 처리 중 오류가 발생했습니다.';\n        toast.error(`관리자 삭제에 실패했습니다. (${errorMessage})`);\n      }\n    } catch (error: any) {\n      console.error('관리자 삭제 에러:', error);\n      \n      // callApi에서 던진 에러 처리\n      const errorMessage = error?.data?.error?.customMessage || \n                          error?.data?.message ||\n                          error?.response?.data?.error?.customMessage || \n                          error?.response?.data?.message || \n                          error?.message || \n                          '네트워크 오류가 발생했습니다.';\n      \n      toast.error(`관리자 삭제에 실패했습니다. (${errorMessage})`);\n    }\n  };\n\n  // 저장 핸들러\n  const handleSave = async () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      if (isEditMode) {\n        // 수정 모드\n        if (!selectedAdmin?.adminId) {\n          toast.error('관리자 정보를 찾을 수 없습니다.');\n          return;\n        }\n\n        const updateData: any = {\n          email: formData.email,\n          name: formData.name,\n          cellphone: formData.phone,\n          memo: formData.memo, // 비고 추가\n        };\n\n        // 비밀번호 변경이 있는 경우에만 포함\n        if (showPasswordChange && formData.password) {\n          updateData.password = formData.password;\n        }\n\n        console.log('수정할 관리자 ID:', selectedAdmin.adminId);\n        console.log('수정 데이터:', updateData);\n\n        const response = await updateAdmin(selectedAdmin.adminId, updateData);\n        \n        // API 응답 구조 확인: statusCode가 200이고 message가 \"success\"일 때만 성공\n        if (response?.data?.statusCode === 200 && response?.data?.message === \"success\") {\n          toast.success('관리자 정보가 수정되었습니다.');\n          closePopup();\n          setRefreshTrigger(prev => prev + 1);\n        } else {\n          // statusCode가 200이 아니거나 message가 \"success\"가 아닌 경우\n          const errorMessage = response?.data?.error?.customMessage || \n                              response?.data?.message || \n                              '수정 처리 중 오류가 발생했습니다.';\n          toast.error(`관리자 정보 수정에 실패했습니다. (${errorMessage})`);\n        }\n      } else {\n        // 생성 모드\n        const createData = {\n          adminId: formData.username,\n          password: formData.password,\n          name: formData.name,\n          email: formData.email,\n          cellphone: formData.phone,\n          memo: formData.memo, // 비고 추가\n        };\n\n        const response = await createAdmin(createData);\n        \n        // API 응답 구조 확인: statusCode가 200이고 message가 \"success\"일 때만 성공\n        if (response?.data?.statusCode === 200 && response?.data?.message === \"success\") {\n          toast.success('새 관리자가 등록되었습니다.');\n          closePopup();\n          setRefreshTrigger(prev => prev + 1);\n        } else {\n          // statusCode가 200이 아니거나 message가 \"success\"가 아닌 경우\n          const errorMessage = response?.data?.error?.customMessage || \n                              response?.data?.message || \n                              '등록 처리 중 오류가 발생했습니다.';\n          toast.error(`관리자 등록에 실패했습니다. (${errorMessage})`);\n        }\n      }\n      \n    } catch (error: any) {\n      console.error('관리자 저장 에러:', error);\n      \n      // callApi에서 던진 에러 처리\n      const errorMessage = error?.data?.error?.customMessage || \n                          error?.data?.message ||\n                          error?.response?.data?.error?.customMessage || \n                          error?.response?.data?.message || \n                          error?.message || \n                          '네트워크 오류가 발생했습니다.';\n      \n      if (isEditMode) {\n        toast.error(`관리자 정보 수정에 실패했습니다. (${errorMessage})`);\n      } else {\n        toast.error(`관리자 등록에 실패했습니다. (${errorMessage})`);\n      }\n      // 실패 시에는 팝업을 닫지 않음\n    }\n  };\n\n  // 비밀번호 변경 버튼 클릭\n  const handlePasswordChangeClick = () => {\n    setIsPasswordPopupOpen(true);\n  };\n\n  // 비밀번호 팝업 닫기\n  const closePasswordPopup = () => {\n    setIsPasswordPopupOpen(false);\n  };\n\n  // 컬럼 정의\n  const columns: ColumnDefinition<AdminData>[] = [\n    {\n      header: 'No',\n      accessor: 'no',\n      formatter: (value) => value?.toString() || '',\n    },\n    {\n      header: '가입일',\n      accessor: 'createAt' as keyof AdminData,\n      formatter: (value) => {\n        if (!value) return '';\n        return dayjs(value).format('YYYY.MM.DD');\n      },\n    },\n    {\n      header: '최근접속',\n      accessor: 'lastLoginTime' as keyof AdminData,\n      formatter: (value) => {\n        if (!value) return '';\n        return dayjs(value).format('MM.DD HH:mm');\n      },\n    },\n    {\n      header: '이름',\n      accessor: 'name',\n      formatter: (value) => value || '',\n    },\n    {\n      header: '아이디',\n      accessor: 'adminId' as keyof AdminData,\n      formatter: (value) => value || '',\n    },\n    {\n      header: '이메일',\n      accessor: 'email',\n      formatter: (value) => value || '',\n    },\n    {\n      header: '전화번호',\n      accessor: 'cellphone' as keyof AdminData,\n      formatter: (value) => value || '',\n    },\n    {\n      header: '비고',\n      accessor: 'memo',\n      formatter: (value) => value || '',\n    },\n  ];\n\n  // 실제 API 함수\n  const fetchAdminData = async (params: FetchParams): Promise<FetchResult<AdminData>> => {\n    try {\n      console.log('fetchAdminData API 호출:', params);\n      \n      // 더미 API 호출\n      const response = await getAdminList(params);\n      \n      // 실제 API 응답 구조에 맞게 처리\n      // response.data = { statusCode, message, data: [...], metadata: {...} }\n      let responseData = response.data?.data || response.data;\n      \n      // 배열이 아닌 경우 배열로 변환\n      if (!Array.isArray(responseData)) {\n        if (responseData?.items && Array.isArray(responseData.items)) {\n          responseData = responseData.items;\n        } else if (responseData && typeof responseData === 'object') {\n          responseData = [responseData];\n        } else {\n          responseData = [];\n        }\n      }\n      \n      // 각 아이템에 id가 없는 경우 생성하고 no 필드도 추가\n      responseData = responseData.map((item: any, index: number) => ({\n        ...item,\n        id: item.id || index + 1, // id가 없으면 index 기반으로 생성\n        no: item.no || index + 1,  // no가 없으면 index 기반으로 생성\n        // 하위 호환성을 위한 필드 매핑\n        username: item.adminId || item.username,\n        phone: item.cellphone || item.phone,\n        joinDate: item.createAt || item.joinDate,\n        lastAccess: item.lastLoginTime || item.lastAccess,\n      }));\n      \n      // API 응답을 FetchResult 형태로 변환\n      const result: FetchResult<AdminData> = {\n        data: responseData,\n        totalItems: response.data?.metadata?.totalCnt || responseData.length,\n        allItems: response.data?.metadata?.allCnt || responseData.length,\n      };\n      \n      return result;\n      \n    } catch (error) {\n      \n      // 에러 시 빈 결과 반환\n      return {\n        data: [],\n        totalItems: 0,\n        allItems: 0,\n      };\n    }\n  };\n\n  // 관리자 추가 핸들러\n  const handleAddAdmin = () => {\n    openAddPopup();\n  };\n\n  // 행 클릭 핸들러\n  const handleRowClick = (item: AdminData, index: number) => {\n    openEditPopup(item);\n  };\n\n  return (\n    <>\n      <GenericListUI<AdminData>\n        ref={listRef}\n        title=\"관리자 회원관리\"\n        columns={columns}\n        fetchData={fetchAdminData}\n        excelFileName=\"AdminList\"\n        keyExtractor={(item, index) => {\n          // id는 이제 항상 존재하지만 안전하게 처리\n          return item.id ? item.id.toString() : `admin-${index}`;\n        }}\n        enableSearch={true}\n        searchPlaceholder=\"이름, 아이디, 이메일, 전화번호 검색\"\n        enableDateFilter={false}\n        dateRangeOptions={['금월', '지난달', '1년', '지정']}\n        itemsPerPageOptions={[10, 20, 50, 100]}\n        themeMode=\"light\"\n        onRowClick={handleRowClick}\n        refreshTrigger={refreshTrigger}\n        addButton={{\n          label: '관리자 추가',\n          onClick: handleAddAdmin,\n        }}\n      />\n\n      <AdminFormPopup\n        isOpen={isPopupOpen}\n        isEditMode={isEditMode}\n        formData={formData}\n        formErrors={formErrors}\n        showPasswordChange={showPasswordChange}\n        onClose={closePopup}\n        onSave={handleSave}\n        onDelete={handleDelete}\n        onInputChange={handleInputChange}\n        onPasswordChangeClick={handlePasswordChangeClick}\n      />\n\n      <PasswordPopup\n        adminId={selectedAdmin?.adminId || ''}\n        isOpen={isPasswordPopupOpen}\n        onClose={closePasswordPopup}\n        onPasswordChanged={() => setRefreshTrigger(prev => prev + 1)}\n      />\n    </>\n  );\n};\n\nexport default AdminManagementPage;\n"
        }
    ]
}