{
    "sourceFile": "src/pages/CMS/AdminManagement/PasswordPopup.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757827860790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757827860790,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport styled from \"styled-components\";\nimport CmsPopup from \"../../../components/CmsPopup\";\nimport { CmsPopupBtnType } from \"../../../components/CmsPopupBtn\";\nimport { AppPwdTextField, PwdFieldType } from \"../../../customComponents/AppPwdTextField\";\nimport { AppColors } from \"../../../styles/colors\";\n\n// 더미 API 함수\nconst updateAdmin = async (adminId: string, data: any): Promise<any> => {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  return {\n    data: {\n      statusCode: 200,\n      message: \"success\"\n    }\n  };\n};\n\ninterface PasswordPopupProps {\n  adminId: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onPasswordChanged?: () => void; // 비밀번호 변경 성공 시 호출될 콜백\n}\n\nconst PasswordPopup: React.FC<PasswordPopupProps> = ({ adminId, isOpen, onClose, onPasswordChanged }) => {\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [pwdError, setPwdError] = useState<string | null>(null);\n  const [confirmPwdError, setConfirmPwdError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (isOpen) {\n      setPassword(\"\");\n      setConfirmPassword(\"\");\n      setPwdError(null);\n      setConfirmPwdError(null);\n    }\n  }, [isOpen]);\n\n  const validatePassword = (pwd: string) => {\n    // 영문, 숫자, 특수문자 각각 1개 이상 포함, 8자 이상\n    const regex = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/;\n    return regex.test(pwd);\n  };\n\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const newPassword = e.target.value;\n    setPassword(newPassword);\n\n    if (newPassword) {\n      if (!validatePassword(newPassword)) {\n        setPwdError(\"비밀번호는 영문자, 숫자, 특수문자를 포함하여 8자리 이상이어야 합니다\");\n      } else {\n        setPwdError(null);\n      }\n    } else {\n      setPwdError(null);\n    }\n\n    // 비밀번호 확인 필드 검증 업데이트\n    if (confirmPassword) {\n      if (newPassword !== confirmPassword) {\n        setConfirmPwdError(\"비밀번호가 일치하지 않습니다\");\n      } else {\n        setConfirmPwdError(null);\n      }\n    }\n  };\n\n  const handleConfirmPasswordChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const newConfirmPassword = e.target.value;\n    setConfirmPassword(newConfirmPassword);\n\n    if (newConfirmPassword) {\n      if (password !== newConfirmPassword) {\n        setConfirmPwdError(\"비밀번호가 일치하지 않습니다\");\n      } else {\n        setConfirmPwdError(null);\n      }\n    } else {\n      setConfirmPwdError(null);\n    }\n  };\n\n  const handleSubmit = async () => {\n    let valid = true;\n\n    if (!password || !validatePassword(password)) {\n      setPwdError(\"비밀번호는 영문자, 숫자, 특수문자를 포함하여 8자리 이상이어야 합니다\");\n      valid = false;\n    } else {\n      setPwdError(null);\n    }\n\n    if (password !== confirmPassword) {\n      setConfirmPwdError(\"비밀번호가 일치하지 않습니다\");\n      valid = false;\n    } else {\n      setConfirmPwdError(null);\n    }\n\n    if (!valid) return;\n\n    try {\n      await updateAdmin(adminId, {\n        password: password,\n      });\n\n      toast.success(\"비밀번호가 성공적으로 변경되었습니다.\");\n      onClose();\n      onPasswordChanged?.(); // 비밀번호 변경 성공 시 콜백 호출\n    } catch (error) {\n      console.error(\"비밀번호 변경 에러:\", error);\n      toast.error(\"비밀번호 변경 중 오류가 발생했습니다.\");\n    }\n  };\n\n  return (\n    <CmsPopup \n      title=\"비밀번호 변경\" \n      isOpen={isOpen} \n      onClose={onClose} \n      backgroundColor=\"#fff\" \n      isWide={false}\n      height={\"300px\"}\n      showRequiredMark={true}\n      rightButtons={[\n          {\n          label: '변경',\n          onClick: handleSubmit,\n          type: CmsPopupBtnType.PRIMARY,\n        },\n        {\n          label: '취소',\n          onClick: onClose,\n          type: CmsPopupBtnType.SECONDARY,\n        },\n      \n      ]}\n    >\n      <FormWrapper>\n        <DescriptionText>\n          새 비밀번호를 입력해 주세요. <br />\n          계정 보안을 위해 정기적인 변경을 권장합니다.\n        </DescriptionText>\n\n        <AppPwdTextField\n          value={password}\n          onChange={handlePasswordChange}\n          fieldType={PwdFieldType.PASSWORD}\n          label=\"*새 비밀번호\"\n          errorMessage={pwdError ?? undefined}\n          showValidationMessage={false}\n        />\n\n        <AppPwdTextField\n          value={confirmPassword}\n          onChange={handleConfirmPasswordChange}\n          fieldType={PwdFieldType.PASSWORD_CONFIRM}\n          originalPassword={password}\n          label=\"*새 비밀번호 확인\"\n          errorMessage={confirmPwdError ?? undefined}\n          showValidationMessage={false}\n        />\n      </FormWrapper>\n    </CmsPopup>\n  );\n};\n\nexport default PasswordPopup;\n\nconst FormWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 20px 0;\n`;\n\nconst DescriptionText = styled.p`\n  font-size: 16px;\n  color: ${AppColors.onInput3};\n  margin: 0;\n  line-height: 1.5;\n  text-align: left;\n`;\n"
        }
    ]
}