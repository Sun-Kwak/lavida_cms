{
    "sourceFile": "src/pages/CMS/AdminManagement/AdminFormPopup.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757830071430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757830071430,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport CmsPopup from '../../../components/CmsPopup';\nimport { CmsPopupBtnType } from '../../../components/CmsPopupBtn';\nimport CmsPopupBtn from '../../../components/CmsPopupBtn';\nimport Modal from '../../../components/Modal';\nimport { AppIdTextField } from '../../../customComponents/AppIdTextField';\nimport { AppEmailTextField } from '../../../customComponents/AppEmailTextField';\nimport { AppTextField } from '../../../customComponents/AppTextField';\nimport { AppGPhoneTextField } from '../../../customComponents/AppGPhoneTextField';\nimport { AppPwdTextField, PwdFieldType } from '../../../customComponents/AppPwdTextField';\n\n// 관리자 폼 데이터 타입\nexport interface AdminFormData {\n  username: string;\n  email: string;\n  name: string;\n  phone: string;\n  password: string;\n  confirmPassword: string;\n  memo: string;\n}\n\ninterface AdminFormPopupProps {\n  isOpen: boolean;\n  isEditMode: boolean;\n  formData: AdminFormData;\n  formErrors: Partial<AdminFormData>;\n  showPasswordChange: boolean;\n  onClose: () => void;\n  onSave: () => void;\n  onDelete?: () => void;\n  onInputChange: (field: keyof AdminFormData, value: string) => void;\n  onPasswordChangeClick: () => void;\n}\n\n// Styled Components\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 20px 0;\n`;\n\nconst PasswordChangeButtonContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 8px;\n`;\n\nconst PasswordChangeButton = styled.button`\n  background: none;\n  border: none;\n  color: #37bbd6; /* 브랜드 컬러 */\n  text-decoration: underline;\n  font-size: 14px;\n  cursor: pointer;\n  padding: 0;\n  \n  &:hover {\n    color: #2a9bb5; /* 브랜드 컬러 호버 */\n  }\n`;\n\nconst ModalButtonContainer = styled.div`\n  display: flex;\n  gap: 12px;\n  width: 100%;\n  \n  & > * {\n    flex: 1;\n  }\n`;\n\nconst AdminFormPopup: React.FC<AdminFormPopupProps> = ({\n  isOpen,\n  isEditMode,\n  formData,\n  formErrors,\n  showPasswordChange,\n  onClose,\n  onSave,\n  onDelete,\n  onInputChange,\n  onPasswordChangeClick,\n}) => {\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  // 삭제 확인 모달 열기\n  const handleDeleteClick = () => {\n    setShowDeleteModal(true);\n  };\n\n  // 삭제 확인\n  const handleDeleteConfirm = () => {\n    setShowDeleteModal(false);\n    if (onDelete) {\n      onDelete();\n    }\n  };\n\n  // 삭제 취소\n  const handleDeleteCancel = () => {\n    setShowDeleteModal(false);\n  };\n  // 전화번호 변경 핸들러 (AppGPhoneTextField용)\n  const handlePhoneChange = (value: string, isValid: boolean) => {\n    onInputChange('phone', value);\n  };\n\n  const renderForm = () => (\n    <FormContainer>\n      <AppIdTextField\n        value={formData.username}\n        onChange={(e) => onInputChange('username', e.target.value)}\n        label=\"*아이디\"\n        errorMessage={formErrors.username}\n        readOnly={isEditMode}\n        showValidationMessage={false}\n      />\n\n      <AppEmailTextField\n        value={formData.email}\n        onChange={(e) => onInputChange('email', e.target.value)}\n        label=\"*이메일\"\n        errorMessage={formErrors.email}\n        showValidationMessage={false}\n      />\n\n      <AppTextField\n        value={formData.name}\n        onChange={(e) => onInputChange('name', e.target.value)}\n        label=\"*이름\"\n        placeholder=\"이름을 입력해주세요\"\n        errorMessage={formErrors.name}\n      />\n\n      <AppGPhoneTextField\n        value={formData.phone}\n        onChange={handlePhoneChange}\n        label=\"*전화번호\"\n        errorMessage={formErrors.phone}\n      />\n\n      {(!isEditMode || showPasswordChange) && (\n        <>\n          <AppPwdTextField\n            value={formData.password}\n            onChange={(e) => onInputChange('password', e.target.value)}\n            fieldType={PwdFieldType.PASSWORD}\n            label=\"*비밀번호\"\n            errorMessage={formErrors.password}\n            showValidationMessage={false}\n          />\n\n          <AppPwdTextField\n            value={formData.confirmPassword}\n            onChange={(e) => onInputChange('confirmPassword', e.target.value)}\n            fieldType={PwdFieldType.PASSWORD_CONFIRM}\n            originalPassword={formData.password}\n            label=\"*비밀번호 확인\"\n            errorMessage={formErrors.confirmPassword}\n            showValidationMessage={false}\n          />\n        </>\n      )}\n\n      <div>\n        <AppTextField\n          value={formData.memo}\n          onChange={(e) => onInputChange('memo', e.target.value)}\n          label=\"비고\"\n          placeholder=\"비고를 입력해주세요\"\n          errorMessage={formErrors.memo}\n          multiline\n          height=\"150px\"\n        />\n        \n        {isEditMode && !showPasswordChange && (\n          <PasswordChangeButtonContainer>\n            <PasswordChangeButton onClick={onPasswordChangeClick}>\n              비밀번호 변경\n            </PasswordChangeButton>\n          </PasswordChangeButtonContainer>\n        )}\n      </div>\n    </FormContainer>\n  );\n\n  return (\n    <CmsPopup\n      title={isEditMode ? '관리자 정보 수정' : '관리자 등록'}\n      isOpen={isOpen}\n      onClose={onClose}\n      width=\"600px\"\n      showRequiredMark={true}\n      leftButtons={[\n        ...(isEditMode ? [{\n          label: '삭제',\n          onClick: handleDeleteClick,\n          type: CmsPopupBtnType.PRIMARY,\n        }] : [])\n      ]}\n      rightButtons={[\n           {\n          label: isEditMode ? '수정' : '등록',\n          onClick: onSave,\n          type: CmsPopupBtnType.PRIMARY,\n        },\n        {\n          label: '취소',\n          onClick: onClose,\n          type: CmsPopupBtnType.SECONDARY,\n        },\n      ]}\n    >\n      {renderForm()}\n      \n      {/* 삭제 확인 모달 */}\n      <Modal\n        isOpen={showDeleteModal}\n        onClose={handleDeleteCancel}\n        header=\"관리자 삭제\"\n        body={`정말로 \"${formData.name}\" 관리자를 삭제하시겠습니까?\\n이 작업은 되돌릴 수 없습니다.`}\n        bgColor=\"#ffffff\"\n        zIndex={10002}\n        footer={\n          <ModalButtonContainer>\n            <CmsPopupBtn\n              type={CmsPopupBtnType.SECONDARY}\n              onClick={handleDeleteCancel}\n            >\n              취소\n            </CmsPopupBtn>\n            <CmsPopupBtn\n              type={CmsPopupBtnType.PRIMARY}\n              onClick={handleDeleteConfirm}\n            >\n              삭제\n            </CmsPopupBtn>\n          </ModalButtonContainer>\n        }\n      />\n    </CmsPopup>\n  );\n};\n\nexport default AdminFormPopup;\n"
        }
    ]
}