{
    "sourceFile": "src/pages/CMS/Assets/LockerManagement.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1760163881525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760165866469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,95 @@\n   border-radius: 12px;\n   border: 1px solid ${AppColors.borderLight};\n `;\n \n+const ActionSection = styled.div`\n+  display: flex;\n+  gap: 16px;\n+  margin-bottom: 24px;\n+  align-items: center;\n+`;\n+\n+const ActionButton = styled.button`\n+  padding: 8px 16px;\n+  border: 1px solid ${AppColors.primary};\n+  border-radius: 6px;\n+  background-color: ${AppColors.primary};\n+  color: ${AppColors.onPrimary};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  cursor: pointer;\n+  transition: all 0.2s ease;\n+\n+  &:hover {\n+    background-color: ${AppColors.secondary};\n+  }\n+\n+  &:disabled {\n+    background-color: ${AppColors.borderLight};\n+    color: ${AppColors.onInput2};\n+    cursor: not-allowed;\n+  }\n+`;\n+\n+const SecondaryButton = styled(ActionButton)`\n+  background-color: ${AppColors.surface};\n+  color: ${AppColors.primary};\n+\n+  &:hover {\n+    background-color: ${AppColors.primary + '10'};\n+  }\n+`;\n+\n+const Input = styled.input`\n+  padding: 8px 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 6px;\n+  background-color: ${AppColors.surface};\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  width: 100px;\n+\n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+`;\n+\n+const Modal = styled.div<{ $isOpen: boolean }>`\n+  position: fixed;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  bottom: 0;\n+  background-color: rgba(0, 0, 0, 0.5);\n+  display: ${props => props.$isOpen ? 'flex' : 'none'};\n+  align-items: center;\n+  justify-content: center;\n+  z-index: 1000;\n+`;\n+\n+const ModalContent = styled.div`\n+  background-color: ${AppColors.background};\n+  padding: 24px;\n+  border-radius: 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  min-width: 300px;\n+`;\n+\n+const ModalTitle = styled.h3`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.onSurface};\n+  margin-bottom: 16px;\n+`;\n+\n+const ModalButtons = styled.div`\n+  display: flex;\n+  gap: 12px;\n+  justify-content: flex-end;\n+  margin-top: 20px;\n+`;\n+\n const FilterSection = styled.div`\n   display: flex;\n   gap: 16px;\n   margin-bottom: 24px;\n@@ -57,9 +144,9 @@\n   gap: 16px;\n   margin-bottom: 32px;\n `;\n \n-const LockerItem = styled.div<{ $status: 'available' | 'occupied' | 'maintenance' }>`\n+const LockerItem = styled.div<{ $status: 'available' | 'occupied' | 'maintenance' | 'pending' }>`\n   aspect-ratio: 1;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n@@ -71,8 +158,10 @@\n       case 'occupied':\n         return AppColors.error;\n       case 'maintenance':\n         return AppColors.warning;\n+      case 'pending':\n+        return AppColors.info;\n       default:\n         return AppColors.borderLight;\n     }\n   }};\n@@ -84,8 +173,10 @@\n       case 'occupied':\n         return AppColors.error + '10';\n       case 'maintenance':\n         return AppColors.warning + '10';\n+      case 'pending':\n+        return AppColors.info + '10';\n       default:\n         return AppColors.surface;\n     }\n   }};\n@@ -104,9 +195,9 @@\n   color: ${AppColors.onSurface};\n   margin-bottom: 4px;\n `;\n \n-const LockerStatus = styled.div<{ $status: 'available' | 'occupied' | 'maintenance' }>`\n+const LockerStatus = styled.div<{ $status: 'available' | 'occupied' | 'maintenance' | 'pending' }>`\n   font-size: ${AppTextStyles.label2.fontSize};\n   color: ${props => {\n     switch (props.$status) {\n       case 'available':\n@@ -114,8 +205,10 @@\n       case 'occupied':\n         return AppColors.error;\n       case 'maintenance':\n         return AppColors.warning;\n+      case 'pending':\n+        return AppColors.info;\n       default:\n         return AppColors.onInput2;\n     }\n   }};\n@@ -145,47 +238,77 @@\n   font-size: ${AppTextStyles.body2.fontSize};\n   color: ${AppColors.onSurface};\n `;\n \n+// 라커 타입 정의\n+interface Locker {\n+  id: number;\n+  number: string;\n+  status: 'available' | 'occupied' | 'maintenance' | 'pending';\n+  branchId: string;\n+  userId?: string;\n+}\n+\n+// 지점 타입 정의\n+interface Branch {\n+  id: string;\n+  name: string;\n+}\n+\n const LockerManagement: React.FC = () => {\n-  const [selectedFloor, setSelectedFloor] = useState<string>('1');\n-  const [selectedType, setSelectedType] = useState<string>('all');\n+  const [selectedBranch, setSelectedBranch] = useState<string>('branch1');\n+  const [lockers, setLockers] = useState<Locker[]>([]);\n+  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n+  const [addCount, setAddCount] = useState<number>(1);\n+  const [selectedLocker, setSelectedLocker] = useState<Locker | null>(null);\n \n-  // 샘플 락커 데이터\n-  const generateLockers = () => {\n-    const lockers = [];\n-    const totalLockers = selectedFloor === '1' ? 120 : 80;\n+  // 지점 데이터\n+  const branches: Branch[] = [\n+    { id: 'branch1', name: '강남점' },\n+    { id: 'branch2', name: '홍대점' },\n+    { id: 'branch3', name: '신촌점' },\n+  ];\n+\n+  // 지점별 라커 데이터 초기화\n+  const initializeLockers = () => {\n+    const initialLockers: Locker[] = [];\n     \n-    for (let i = 1; i <= totalLockers; i++) {\n-      const lockerNumber = `${selectedFloor}${i.toString().padStart(3, '0')}`;\n-      let status: 'available' | 'occupied' | 'maintenance';\n-      \n-      // 임의로 상태 배정\n-      const rand = Math.random();\n-      if (rand < 0.6) {\n-        status = 'occupied';\n-      } else if (rand < 0.9) {\n-        status = 'available';\n-      } else {\n-        status = 'maintenance';\n+    branches.forEach(branch => {\n+      // 각 지점마다 초기 라커 20개씩 생성\n+      for (let i = 1; i <= 20; i++) {\n+        let status: 'available' | 'occupied' | 'maintenance' | 'pending';\n+        \n+        // 임의로 상태 배정\n+        const rand = Math.random();\n+        if (rand < 0.5) {\n+          status = 'occupied';\n+        } else if (rand < 0.8) {\n+          status = 'available';\n+        } else if (rand < 0.9) {\n+          status = 'maintenance';\n+        } else {\n+          status = 'pending';\n+        }\n+        \n+        initialLockers.push({\n+          id: parseInt(`${branch.id.slice(-1)}${i.toString().padStart(3, '0')}`),\n+          number: i.toString(),\n+          status,\n+          branchId: branch.id,\n+          userId: status === 'occupied' ? `user${Math.floor(Math.random() * 100)}` : undefined\n+        });\n       }\n-      \n-      lockers.push({\n-        number: lockerNumber,\n-        status,\n-        type: i <= totalLockers / 2 ? 'standard' : 'large'\n-      });\n-    }\n+    });\n     \n-    return lockers;\n+    setLockers(initialLockers);\n   };\n \n-  const lockers = generateLockers();\n+  // 컴포넌트 마운트 시 라커 초기화\n+  React.useEffect(() => {\n+    initializeLockers();\n+  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n \n-  const filteredLockers = lockers.filter(locker => {\n-    if (selectedType === 'all') return true;\n-    return locker.type === selectedType;\n-  });\n+  const currentBranchLockers = lockers.filter(locker => locker.branchId === selectedBranch);\n \n   const getStatusText = (status: string) => {\n     switch (status) {\n       case 'available':\n@@ -193,42 +316,67 @@\n       case 'occupied':\n         return '사용중';\n       case 'maintenance':\n         return '점검중';\n+      case 'pending':\n+        return '승인요청';\n       default:\n         return '알 수 없음';\n     }\n   };\n \n-  const handleLockerClick = (lockerNumber: string, status: string) => {\n-    alert(`락커 ${lockerNumber} - 상태: ${getStatusText(status)}`);\n+  const handleAddLockers = () => {\n+    const maxNumber = Math.max(...currentBranchLockers.map(l => parseInt(l.number)), 0);\n+    const newLockers: Locker[] = [];\n+    \n+    for (let i = 1; i <= addCount; i++) {\n+      const newNumber = maxNumber + i;\n+      newLockers.push({\n+        id: parseInt(`${selectedBranch.slice(-1)}${newNumber.toString().padStart(3, '0')}`),\n+        number: newNumber.toString(),\n+        status: 'available',\n+        branchId: selectedBranch\n+      });\n+    }\n+    \n+    setLockers(prev => [...prev, ...newLockers]);\n+    setIsAddModalOpen(false);\n+    setAddCount(1);\n   };\n \n+  const handleToggleMaintenance = (locker: Locker) => {\n+    setLockers(prev => prev.map(l => \n+      l.id === locker.id \n+        ? { ...l, status: l.status === 'maintenance' ? 'available' : 'maintenance' }\n+        : l\n+    ));\n+  };\n+\n+  const handleDeleteLocker = (locker: Locker) => {\n+    if (window.confirm(`라커 ${locker.number}번을 삭제하시겠습니까?`)) {\n+      setLockers(prev => prev.filter(l => l.id !== locker.id));\n+    }\n+  };\n+\n+  const handleLockerClick = (locker: Locker) => {\n+    setSelectedLocker(locker);\n+  };\n+\n   return (\n     <Container>\n-      <Title>락커 관리</Title>\n+      <Title>라커 관리</Title>\n       <Content>\n         <FilterSection>\n-          <FilterLabel>층수:</FilterLabel>\n+          <FilterLabel>지점:</FilterLabel>\n           <FilterSelect\n-            value={selectedFloor}\n-            onChange={(e) => setSelectedFloor(e.target.value)}\n+            value={selectedBranch}\n+            onChange={(e) => setSelectedBranch(e.target.value)}\n           >\n-            <option value=\"1\">1층</option>\n-            <option value=\"2\">2층</option>\n-            <option value=\"3\">3층</option>\n+            {branches.map(branch => (\n+              <option key={branch.id} value={branch.id}>{branch.name}</option>\n+            ))}\n           </FilterSelect>\n \n-          <FilterLabel>타입:</FilterLabel>\n-          <FilterSelect\n-            value={selectedType}\n-            onChange={(e) => setSelectedType(e.target.value)}\n-          >\n-            <option value=\"all\">전체</option>\n-            <option value=\"standard\">일반형</option>\n-            <option value=\"large\">대형</option>\n-          </FilterSelect>\n-\n           <StatusLegend>\n             <LegendItem>\n               <LegendColor $color={AppColors.success} />\n               <LegendText>사용가능</LegendText>\n@@ -240,25 +388,97 @@\n             <LegendItem>\n               <LegendColor $color={AppColors.warning} />\n               <LegendText>점검중</LegendText>\n             </LegendItem>\n+            <LegendItem>\n+              <LegendColor $color={AppColors.info} />\n+              <LegendText>승인요청</LegendText>\n+            </LegendItem>\n           </StatusLegend>\n         </FilterSection>\n \n+        <ActionSection>\n+          <ActionButton onClick={() => setIsAddModalOpen(true)}>\n+            라커 추가\n+          </ActionButton>\n+          <Input\n+            type=\"number\"\n+            min=\"1\"\n+            max=\"50\"\n+            value={addCount}\n+            onChange={(e) => setAddCount(parseInt(e.target.value) || 1)}\n+            placeholder=\"추가 개수\"\n+          />\n+        </ActionSection>\n+\n         <LockerGrid>\n-          {filteredLockers.map((locker) => (\n+          {currentBranchLockers.map((locker) => (\n             <LockerItem\n-              key={locker.number}\n+              key={locker.id}\n               $status={locker.status}\n-              onClick={() => handleLockerClick(locker.number, locker.status)}\n+              onClick={() => handleLockerClick(locker)}\n             >\n               <LockerNumber>{locker.number}</LockerNumber>\n               <LockerStatus $status={locker.status}>\n                 {getStatusText(locker.status)}\n               </LockerStatus>\n             </LockerItem>\n           ))}\n         </LockerGrid>\n+\n+        {/* 라커 추가 모달 */}\n+        <Modal $isOpen={isAddModalOpen}>\n+          <ModalContent>\n+            <ModalTitle>라커 추가</ModalTitle>\n+            <p>추가할 라커 개수: {addCount}개</p>\n+            <p>번호: {Math.max(...currentBranchLockers.map(l => parseInt(l.number)), 0) + 1}번부터</p>\n+            <ModalButtons>\n+              <SecondaryButton onClick={() => setIsAddModalOpen(false)}>\n+                취소\n+              </SecondaryButton>\n+              <ActionButton onClick={handleAddLockers}>\n+                추가\n+              </ActionButton>\n+            </ModalButtons>\n+          </ModalContent>\n+        </Modal>\n+\n+        {/* 라커 상세 모달 */}\n+        <Modal $isOpen={!!selectedLocker}>\n+          <ModalContent>\n+            <ModalTitle>라커 {selectedLocker?.number}번</ModalTitle>\n+            <p>상태: {selectedLocker ? getStatusText(selectedLocker.status) : ''}</p>\n+            {selectedLocker?.userId && (\n+              <p>사용자: {selectedLocker.userId}</p>\n+            )}\n+            <ModalButtons>\n+              <SecondaryButton onClick={() => setSelectedLocker(null)}>\n+                닫기\n+              </SecondaryButton>\n+              {selectedLocker && selectedLocker.status !== 'occupied' && (\n+                <ActionButton \n+                  onClick={() => {\n+                    handleToggleMaintenance(selectedLocker);\n+                    setSelectedLocker(null);\n+                  }}\n+                >\n+                  {selectedLocker.status === 'maintenance' ? '점검 완료' : '점검중으로 변경'}\n+                </ActionButton>\n+              )}\n+              {selectedLocker && selectedLocker.status === 'available' && (\n+                <ActionButton \n+                  onClick={() => {\n+                    handleDeleteLocker(selectedLocker);\n+                    setSelectedLocker(null);\n+                  }}\n+                  style={{ backgroundColor: AppColors.error }}\n+                >\n+                  삭제\n+                </ActionButton>\n+              )}\n+            </ModalButtons>\n+          </ModalContent>\n+        </Modal>\n       </Content>\n     </Container>\n   );\n };\n"
                },
                {
                    "date": 1760165987562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import React, { useState } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n+import { dbManager, type Branch } from '../../../utils/indexedDB';\n \n const Container = styled.div`\n   padding: 24px;\n   background-color: ${AppColors.surface};\n@@ -247,65 +248,82 @@\n   branchId: string;\n   userId?: string;\n }\n \n-// 지점 타입 정의\n-interface Branch {\n-  id: string;\n-  name: string;\n-}\n-\n const LockerManagement: React.FC = () => {\n-  const [selectedBranch, setSelectedBranch] = useState<string>('branch1');\n+  const [selectedBranch, setSelectedBranch] = useState<string>('');\n   const [lockers, setLockers] = useState<Locker[]>([]);\n+  const [branches, setBranches] = useState<Branch[]>([]);\n   const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n   const [addCount, setAddCount] = useState<number>(1);\n   const [selectedLocker, setSelectedLocker] = useState<Locker | null>(null);\n \n-  // 지점 데이터\n-  const branches: Branch[] = [\n-    { id: 'branch1', name: '강남점' },\n-    { id: 'branch2', name: '홍대점' },\n-    { id: 'branch3', name: '신촌점' },\n-  ];\n+  // 지점 데이터 로드\n+  const loadBranches = async () => {\n+    try {\n+      const branchData = await dbManager.getAllBranches();\n+      // '전체' 지점 제외하고 실제 지점만 사용\n+      const filteredBranches = branchData.filter(branch => branch.name !== '전체');\n+      setBranches(filteredBranches);\n+      \n+      // 첫 번째 지점을 기본 선택\n+      if (filteredBranches.length > 0) {\n+        setSelectedBranch(filteredBranches[0].id);\n+      }\n+    } catch (error) {\n+      console.error('지점 데이터 로드 실패:', error);\n+    }\n+  };\n \n   // 지점별 라커 데이터 초기화\n-  const initializeLockers = () => {\n-    const initialLockers: Locker[] = [];\n-    \n-    branches.forEach(branch => {\n-      // 각 지점마다 초기 라커 20개씩 생성\n-      for (let i = 1; i <= 20; i++) {\n-        let status: 'available' | 'occupied' | 'maintenance' | 'pending';\n-        \n-        // 임의로 상태 배정\n-        const rand = Math.random();\n-        if (rand < 0.5) {\n-          status = 'occupied';\n-        } else if (rand < 0.8) {\n-          status = 'available';\n-        } else if (rand < 0.9) {\n-          status = 'maintenance';\n-        } else {\n-          status = 'pending';\n+  const initializeLockers = async () => {\n+    try {\n+      const branchData = await dbManager.getAllBranches();\n+      const filteredBranches = branchData.filter(branch => branch.name !== '전체');\n+      \n+      const initialLockers: Locker[] = [];\n+      \n+      filteredBranches.forEach(branch => {\n+        // 각 지점마다 초기 라커 20개씩 생성\n+        for (let i = 1; i <= 20; i++) {\n+          let status: 'available' | 'occupied' | 'maintenance' | 'pending';\n+          \n+          // 임의로 상태 배정\n+          const rand = Math.random();\n+          if (rand < 0.5) {\n+            status = 'occupied';\n+          } else if (rand < 0.8) {\n+            status = 'available';\n+          } else if (rand < 0.9) {\n+            status = 'maintenance';\n+          } else {\n+            status = 'pending';\n+          }\n+          \n+          initialLockers.push({\n+            id: parseInt(`${branch.id.slice(-1)}${i.toString().padStart(3, '0')}`),\n+            number: i.toString(),\n+            status,\n+            branchId: branch.id,\n+            userId: status === 'occupied' ? `user${Math.floor(Math.random() * 100)}` : undefined\n+          });\n         }\n-        \n-        initialLockers.push({\n-          id: parseInt(`${branch.id.slice(-1)}${i.toString().padStart(3, '0')}`),\n-          number: i.toString(),\n-          status,\n-          branchId: branch.id,\n-          userId: status === 'occupied' ? `user${Math.floor(Math.random() * 100)}` : undefined\n-        });\n-      }\n-    });\n-    \n-    setLockers(initialLockers);\n+      });\n+      \n+      setLockers(initialLockers);\n+    } catch (error) {\n+      console.error('라커 데이터 초기화 실패:', error);\n+    }\n   };\n \n-  // 컴포넌트 마운트 시 라커 초기화\n+  // 컴포넌트 마운트 시 데이터 로드\n   React.useEffect(() => {\n-    initializeLockers();\n+    const initData = async () => {\n+      await loadBranches();\n+      await initializeLockers();\n+    };\n+    \n+    initData();\n   }, []); // eslint-disable-line react-hooks/exhaustive-deps\n \n   const currentBranchLockers = lockers.filter(locker => locker.branchId === selectedBranch);\n \n@@ -370,11 +388,15 @@\n           <FilterSelect\n             value={selectedBranch}\n             onChange={(e) => setSelectedBranch(e.target.value)}\n           >\n-            {branches.map(branch => (\n-              <option key={branch.id} value={branch.id}>{branch.name}</option>\n-            ))}\n+            {branches.length === 0 ? (\n+              <option value=\"\">지점 로딩 중...</option>\n+            ) : (\n+              branches.map(branch => (\n+                <option key={branch.id} value={branch.id}>{branch.name}</option>\n+              ))\n+            )}\n           </FilterSelect>\n \n           <StatusLegend>\n             <LegendItem>\n"
                },
                {
                    "date": 1760166065387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Branch } from '../../../utils/indexedDB';\n+import CustomDropdown from '../../../components/CustomDropdown';\n \n const Container = styled.div`\n   padding: 24px;\n   background-color: ${AppColors.surface};\n@@ -123,23 +124,8 @@\n   color: ${AppColors.onSurface};\n   font-weight: 500;\n `;\n \n-const FilterSelect = styled.select`\n-  padding: 8px 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 6px;\n-  background-color: ${AppColors.surface};\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  cursor: pointer;\n-\n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-  }\n-`;\n-\n const LockerGrid = styled.div`\n   display: grid;\n   grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n   gap: 16px;\n@@ -324,8 +310,17 @@\n     \n     initData();\n   }, []); // eslint-disable-line react-hooks/exhaustive-deps\n \n+  // 지점 옵션 변환 함수\n+  const getBranchOptions = () => {\n+    return branches.map(branch => ({\n+      value: branch.id,\n+      label: branch.name,\n+      description: branch.address\n+    }));\n+  };\n+\n   const currentBranchLockers = lockers.filter(locker => locker.branchId === selectedBranch);\n \n   const getStatusText = (status: string) => {\n     switch (status) {\n@@ -384,20 +379,18 @@\n       <Title>라커 관리</Title>\n       <Content>\n         <FilterSection>\n           <FilterLabel>지점:</FilterLabel>\n-          <FilterSelect\n-            value={selectedBranch}\n-            onChange={(e) => setSelectedBranch(e.target.value)}\n-          >\n-            {branches.length === 0 ? (\n-              <option value=\"\">지점 로딩 중...</option>\n-            ) : (\n-              branches.map(branch => (\n-                <option key={branch.id} value={branch.id}>{branch.name}</option>\n-              ))\n-            )}\n-          </FilterSelect>\n+          <div style={{ minWidth: '200px' }}>\n+            <CustomDropdown\n+              value={selectedBranch}\n+              onChange={(value: string) => setSelectedBranch(value)}\n+              options={getBranchOptions()}\n+              placeholder={branches.length === 0 ? \"지점 로딩 중...\" : \"지점을 선택하세요\"}\n+              disabled={branches.length === 0}\n+              inModal={false}\n+            />\n+          </div>\n \n           <StatusLegend>\n             <LegendItem>\n               <LegendColor $color={AppColors.success} />\n"
                },
                {
                    "date": 1761376104773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Branch } from '../../../utils/indexedDB';\n import CustomDropdown from '../../../components/CustomDropdown';\n+import { SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n \n const Container = styled.div`\n   padding: 24px;\n   background-color: ${AppColors.surface};\n@@ -124,8 +125,28 @@\n   color: ${AppColors.onSurface};\n   font-weight: 500;\n `;\n \n+const PriceEditButton = styled.button`\n+  position: absolute;\n+  top: 4px;\n+  right: 4px;\n+  width: 20px;\n+  height: 20px;\n+  border: none;\n+  border-radius: 50%;\n+  background-color: ${AppColors.primary};\n+  color: ${AppColors.onPrimary};\n+  font-size: 10px;\n+  cursor: pointer;\n+  opacity: 0;\n+  transition: opacity 0.2s ease;\n+  \n+  &:hover {\n+    background-color: ${AppColors.secondary};\n+  }\n+`;\n+\n const LockerGrid = styled.div`\n   display: grid;\n   grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n   gap: 16px;\n@@ -168,13 +189,19 @@\n     }\n   }};\n   cursor: pointer;\n   transition: all 0.2s ease;\n+  position: relative;\n+  padding: 8px;\n \n   &:hover {\n     transform: translateY(-2px);\n     box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n   }\n+\n+  &:hover ${PriceEditButton} {\n+    opacity: 1;\n+  }\n `;\n \n const LockerNumber = styled.div`\n   font-size: ${AppTextStyles.body1.fontSize};\n@@ -220,8 +247,49 @@\n   border-radius: 4px;\n   background-color: ${props => props.$color};\n `;\n \n+const LockerPrice = styled.div`\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  color: ${AppColors.primary};\n+  font-weight: 600;\n+  margin-top: 2px;\n+`;\n+\n+const PermissionNotice = styled.div`\n+  background-color: ${AppColors.warning + '15'};\n+  border: 1px solid ${AppColors.warning};\n+  border-radius: 8px;\n+  padding: 12px;\n+  margin-bottom: 16px;\n+  color: ${AppColors.warning};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  display: flex;\n+  align-items: center;\n+  gap: 8px;\n+`;\n+\n+const PriceInputGroup = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  gap: 8px;\n+  margin: 16px 0;\n+`;\n+\n+const PriceInput = styled.input`\n+  padding: 8px 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 6px;\n+  background-color: ${AppColors.surface};\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+\n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+`;\n+\n const LegendText = styled.span`\n   font-size: ${AppTextStyles.body2.fontSize};\n   color: ${AppColors.onSurface};\n `;\n@@ -232,81 +300,117 @@\n   number: string;\n   status: 'available' | 'occupied' | 'maintenance' | 'pending';\n   branchId: string;\n   userId?: string;\n+  price: number; // 라커 가격 추가\n }\n \n+// 사용자 정보 타입\n+interface UserInfo {\n+  id: string;\n+  name: string;\n+  permission: string;\n+  branchId: string;\n+  loginId: string;\n+}\n+\n const LockerManagement: React.FC = () => {\n   const [selectedBranch, setSelectedBranch] = useState<string>('');\n   const [lockers, setLockers] = useState<Locker[]>([]);\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n   const [addCount, setAddCount] = useState<number>(1);\n+  const [addPrice, setAddPrice] = useState<number>(50000); // 기본 가격 5만원\n   const [selectedLocker, setSelectedLocker] = useState<Locker | null>(null);\n+  const [isPriceModalOpen, setIsPriceModalOpen] = useState(false);\n+  const [editPrice, setEditPrice] = useState<number>(0);\n+  const [currentUserInfo, setCurrentUserInfo] = useState<UserInfo | null>(null);\n+  const [hasPermission, setHasPermission] = useState(false);\n \n+  // 권한 확인 함수\n+  const checkPermission = async () => {\n+    try {\n+      const adminId = sessionStorage.getItem('adminId');\n+      if (!adminId) {\n+        setHasPermission(false);\n+        return;\n+      }\n+\n+      const allStaff = await dbManager.getAllStaff();\n+      const user = allStaff.find(staff => staff.loginId === adminId);\n+      \n+      if (!user) {\n+        setHasPermission(false);\n+        return;\n+      }\n+\n+      setCurrentUserInfo(user);\n+\n+      // MASTER 권한 또는 시스템 관리자, 또는 EDITOR 권한만 라커 관리 가능\n+      const isMaster = user.permission === 'MASTER';\n+      const isSystemAdmin = adminId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n+      const isEditor = user.permission === 'EDITOR';\n+      \n+      setHasPermission(isMaster || isSystemAdmin || isEditor);\n+\n+      // EDITOR인 경우 본인 지점으로 자동 설정\n+      if (isEditor && !isMaster && !isSystemAdmin) {\n+        setSelectedBranch(user.branchId);\n+      }\n+    } catch (error) {\n+      console.error('권한 확인 실패:', error);\n+      setHasPermission(false);\n+    }\n+  };\n+\n+  // 현재 사용자가 선택된 지점에 대한 편집 권한이 있는지 확인\n+  const canEditBranch = (branchId: string): boolean => {\n+    if (!currentUserInfo) return false;\n+    \n+    const isMaster = currentUserInfo.permission === 'MASTER';\n+    const isSystemAdmin = currentUserInfo.loginId === SYSTEM_ADMIN_CONFIG.SYSTEM_ADMIN_LOGIN_ID;\n+    const isEditorOfBranch = currentUserInfo.permission === 'EDITOR' && currentUserInfo.branchId === branchId;\n+    \n+    return isMaster || isSystemAdmin || isEditorOfBranch;\n+  };\n+\n   // 지점 데이터 로드\n   const loadBranches = async () => {\n     try {\n       const branchData = await dbManager.getAllBranches();\n       // '전체' 지점 제외하고 실제 지점만 사용\n       const filteredBranches = branchData.filter(branch => branch.name !== '전체');\n       setBranches(filteredBranches);\n       \n-      // 첫 번째 지점을 기본 선택\n-      if (filteredBranches.length > 0) {\n-        setSelectedBranch(filteredBranches[0].id);\n+      // EDITOR 권한이 아닌 경우 첫 번째 지점을 기본 선택\n+      if (filteredBranches.length > 0 && !selectedBranch) {\n+        if (!currentUserInfo || currentUserInfo.permission !== 'EDITOR') {\n+          setSelectedBranch(filteredBranches[0].id);\n+        }\n       }\n     } catch (error) {\n       console.error('지점 데이터 로드 실패:', error);\n     }\n   };\n \n-  // 지점별 라커 데이터 초기화\n-  const initializeLockers = async () => {\n+  // 라커 데이터 로드 (더미 데이터 제거, 실제 저장된 라커만 로드)\n+  const loadLockers = async () => {\n     try {\n-      const branchData = await dbManager.getAllBranches();\n-      const filteredBranches = branchData.filter(branch => branch.name !== '전체');\n-      \n-      const initialLockers: Locker[] = [];\n-      \n-      filteredBranches.forEach(branch => {\n-        // 각 지점마다 초기 라커 20개씩 생성\n-        for (let i = 1; i <= 20; i++) {\n-          let status: 'available' | 'occupied' | 'maintenance' | 'pending';\n-          \n-          // 임의로 상태 배정\n-          const rand = Math.random();\n-          if (rand < 0.5) {\n-            status = 'occupied';\n-          } else if (rand < 0.8) {\n-            status = 'available';\n-          } else if (rand < 0.9) {\n-            status = 'maintenance';\n-          } else {\n-            status = 'pending';\n-          }\n-          \n-          initialLockers.push({\n-            id: parseInt(`${branch.id.slice(-1)}${i.toString().padStart(3, '0')}`),\n-            number: i.toString(),\n-            status,\n-            branchId: branch.id,\n-            userId: status === 'occupied' ? `user${Math.floor(Math.random() * 100)}` : undefined\n-          });\n-        }\n-      });\n-      \n-      setLockers(initialLockers);\n+      // 실제 저장된 라커 데이터가 있다면 로드\n+      // 현재는 빈 배열로 시작 (더미 데이터 제거)\n+      setLockers([]);\n     } catch (error) {\n-      console.error('라커 데이터 초기화 실패:', error);\n+      console.error('라커 데이터 로드 실패:', error);\n+      setLockers([]);\n     }\n   };\n \n   // 컴포넌트 마운트 시 데이터 로드\n   React.useEffect(() => {\n     const initData = async () => {\n+      await checkPermission();\n       await loadBranches();\n-      await initializeLockers();\n+      await loadLockers();\n     };\n     \n     initData();\n   }, []); // eslint-disable-line react-hooks/exhaustive-deps\n@@ -337,8 +441,14 @@\n     }\n   };\n \n   const handleAddLockers = () => {\n+    // 권한 확인\n+    if (!canEditBranch(selectedBranch)) {\n+      alert('라커 추가 권한이 없습니다.');\n+      return;\n+    }\n+\n     const maxNumber = Math.max(...currentBranchLockers.map(l => parseInt(l.number)), 0);\n     const newLockers: Locker[] = [];\n     \n     for (let i = 1; i <= addCount; i++) {\n@@ -346,9 +456,10 @@\n       newLockers.push({\n         id: parseInt(`${selectedBranch.slice(-1)}${newNumber.toString().padStart(3, '0')}`),\n         number: newNumber.toString(),\n         status: 'available',\n-        branchId: selectedBranch\n+        branchId: selectedBranch,\n+        price: addPrice // 설정된 가격으로 추가\n       });\n     }\n     \n     setLockers(prev => [...prev, ...newLockers]);\n@@ -356,16 +467,28 @@\n     setAddCount(1);\n   };\n \n   const handleToggleMaintenance = (locker: Locker) => {\n+    // 권한 확인\n+    if (!canEditBranch(locker.branchId)) {\n+      alert('라커 상태 변경 권한이 없습니다.');\n+      return;\n+    }\n+\n     setLockers(prev => prev.map(l => \n       l.id === locker.id \n         ? { ...l, status: l.status === 'maintenance' ? 'available' : 'maintenance' }\n         : l\n     ));\n   };\n \n   const handleDeleteLocker = (locker: Locker) => {\n+    // 권한 확인\n+    if (!canEditBranch(locker.branchId)) {\n+      alert('라커 삭제 권한이 없습니다.');\n+      return;\n+    }\n+\n     if (window.confirm(`라커 ${locker.number}번을 삭제하시겠습니까?`)) {\n       setLockers(prev => prev.filter(l => l.id !== locker.id));\n     }\n   };\n@@ -373,21 +496,63 @@\n   const handleLockerClick = (locker: Locker) => {\n     setSelectedLocker(locker);\n   };\n \n+  const handlePriceEdit = (locker: Locker) => {\n+    // 권한 확인\n+    if (!canEditBranch(locker.branchId)) {\n+      alert('라커 가격 수정 권한이 없습니다.');\n+      return;\n+    }\n+\n+    setSelectedLocker(locker);\n+    setEditPrice(locker.price);\n+    setIsPriceModalOpen(true);\n+  };\n+\n+  const handlePriceUpdate = () => {\n+    if (!selectedLocker) return;\n+\n+    setLockers(prev => prev.map(l => \n+      l.id === selectedLocker.id \n+        ? { ...l, price: editPrice }\n+        : l\n+    ));\n+    \n+    setIsPriceModalOpen(false);\n+    setSelectedLocker(null);\n+    setEditPrice(0);\n+  };\n+\n+  const formatPrice = (price: number): string => {\n+    return new Intl.NumberFormat('ko-KR').format(price) + '원';\n+  };\n+\n   return (\n     <Container>\n       <Title>라커 관리</Title>\n       <Content>\n+        {!hasPermission && (\n+          <PermissionNotice>\n+            ⚠️ 라커 관리 권한이 없습니다. MASTER 또는 EDITOR 권한이 필요합니다.\n+          </PermissionNotice>\n+        )}\n+\n+        {currentUserInfo && currentUserInfo.permission === 'EDITOR' && (\n+          <PermissionNotice>\n+            ℹ️ EDITOR 권한으로 소속 지점({branches.find(b => b.id === currentUserInfo.branchId)?.name})의 라커만 관리할 수 있습니다.\n+          </PermissionNotice>\n+        )}\n+\n         <FilterSection>\n           <FilterLabel>지점:</FilterLabel>\n           <div style={{ minWidth: '200px' }}>\n             <CustomDropdown\n               value={selectedBranch}\n               onChange={(value: string) => setSelectedBranch(value)}\n               options={getBranchOptions()}\n               placeholder={branches.length === 0 ? \"지점 로딩 중...\" : \"지점을 선택하세요\"}\n-              disabled={branches.length === 0}\n+              disabled={branches.length === 0 || (currentUserInfo?.permission === 'EDITOR')}\n               inModal={false}\n             />\n           </div>\n \n@@ -410,33 +575,60 @@\n             </LegendItem>\n           </StatusLegend>\n         </FilterSection>\n \n-        <ActionSection>\n-          <ActionButton onClick={() => setIsAddModalOpen(true)}>\n-            라커 추가\n-          </ActionButton>\n-          <Input\n-            type=\"number\"\n-            min=\"1\"\n-            max=\"50\"\n-            value={addCount}\n-            onChange={(e) => setAddCount(parseInt(e.target.value) || 1)}\n-            placeholder=\"추가 개수\"\n-          />\n-        </ActionSection>\n+        {hasPermission && canEditBranch(selectedBranch) && (\n+          <ActionSection>\n+            <ActionButton onClick={() => setIsAddModalOpen(true)}>\n+              라커 추가\n+            </ActionButton>\n+            <Input\n+              type=\"number\"\n+              min=\"1\"\n+              max=\"50\"\n+              value={addCount}\n+              onChange={(e) => setAddCount(parseInt(e.target.value) || 1)}\n+              placeholder=\"추가 개수\"\n+            />\n+            <PriceInput\n+              type=\"number\"\n+              min=\"0\"\n+              step=\"1000\"\n+              value={addPrice}\n+              onChange={(e) => setAddPrice(parseInt(e.target.value) || 0)}\n+              placeholder=\"가격\"\n+            />\n+            <span style={{ fontSize: AppTextStyles.body2.fontSize, color: AppColors.onSurface }}>\n+              원\n+            </span>\n+          </ActionSection>\n+        )}\n \n         <LockerGrid>\n           {currentBranchLockers.map((locker) => (\n             <LockerItem\n               key={locker.id}\n               $status={locker.status}\n               onClick={() => handleLockerClick(locker)}\n             >\n+              {hasPermission && canEditBranch(locker.branchId) && (\n+                <PriceEditButton\n+                  onClick={(e) => {\n+                    e.stopPropagation();\n+                    handlePriceEdit(locker);\n+                  }}\n+                  title=\"가격 수정\"\n+                >\n+                  ₩\n+                </PriceEditButton>\n+              )}\n               <LockerNumber>{locker.number}</LockerNumber>\n               <LockerStatus $status={locker.status}>\n                 {getStatusText(locker.status)}\n               </LockerStatus>\n+              <LockerPrice>\n+                {formatPrice(locker.price)}\n+              </LockerPrice>\n             </LockerItem>\n           ))}\n         </LockerGrid>\n \n@@ -445,8 +637,20 @@\n           <ModalContent>\n             <ModalTitle>라커 추가</ModalTitle>\n             <p>추가할 라커 개수: {addCount}개</p>\n             <p>번호: {Math.max(...currentBranchLockers.map(l => parseInt(l.number)), 0) + 1}번부터</p>\n+            <p>가격: {formatPrice(addPrice)}</p>\n+            <PriceInputGroup>\n+              <label>라커 가격:</label>\n+              <PriceInput\n+                type=\"number\"\n+                min=\"0\"\n+                step=\"1000\"\n+                value={addPrice}\n+                onChange={(e) => setAddPrice(parseInt(e.target.value) || 0)}\n+                placeholder=\"가격을 입력하세요\"\n+              />\n+            </PriceInputGroup>\n             <ModalButtons>\n               <SecondaryButton onClick={() => setIsAddModalOpen(false)}>\n                 취소\n               </SecondaryButton>\n@@ -456,21 +660,51 @@\n             </ModalButtons>\n           </ModalContent>\n         </Modal>\n \n+        {/* 라커 가격 수정 모달 */}\n+        <Modal $isOpen={isPriceModalOpen}>\n+          <ModalContent>\n+            <ModalTitle>라커 {selectedLocker?.number}번 가격 수정</ModalTitle>\n+            <PriceInputGroup>\n+              <label>라커 가격:</label>\n+              <PriceInput\n+                type=\"number\"\n+                min=\"0\"\n+                step=\"1000\"\n+                value={editPrice}\n+                onChange={(e) => setEditPrice(parseInt(e.target.value) || 0)}\n+                placeholder=\"가격을 입력하세요\"\n+              />\n+              <span style={{ fontSize: AppTextStyles.label2.fontSize, color: AppColors.onInput1 }}>\n+                현재 가격: {selectedLocker ? formatPrice(selectedLocker.price) : ''}\n+              </span>\n+            </PriceInputGroup>\n+            <ModalButtons>\n+              <SecondaryButton onClick={() => setIsPriceModalOpen(false)}>\n+                취소\n+              </SecondaryButton>\n+              <ActionButton onClick={handlePriceUpdate}>\n+                수정\n+              </ActionButton>\n+            </ModalButtons>\n+          </ModalContent>\n+        </Modal>\n+\n         {/* 라커 상세 모달 */}\n-        <Modal $isOpen={!!selectedLocker}>\n+        <Modal $isOpen={!!selectedLocker && !isPriceModalOpen}>\n           <ModalContent>\n             <ModalTitle>라커 {selectedLocker?.number}번</ModalTitle>\n             <p>상태: {selectedLocker ? getStatusText(selectedLocker.status) : ''}</p>\n+            <p>가격: {selectedLocker ? formatPrice(selectedLocker.price) : ''}</p>\n             {selectedLocker?.userId && (\n               <p>사용자: {selectedLocker.userId}</p>\n             )}\n             <ModalButtons>\n               <SecondaryButton onClick={() => setSelectedLocker(null)}>\n                 닫기\n               </SecondaryButton>\n-              {selectedLocker && selectedLocker.status !== 'occupied' && (\n+              {selectedLocker && hasPermission && canEditBranch(selectedLocker.branchId) && selectedLocker.status !== 'occupied' && (\n                 <ActionButton \n                   onClick={() => {\n                     handleToggleMaintenance(selectedLocker);\n                     setSelectedLocker(null);\n@@ -478,9 +712,9 @@\n                 >\n                   {selectedLocker.status === 'maintenance' ? '점검 완료' : '점검중으로 변경'}\n                 </ActionButton>\n               )}\n-              {selectedLocker && selectedLocker.status === 'available' && (\n+              {selectedLocker && hasPermission && canEditBranch(selectedLocker.branchId) && selectedLocker.status === 'available' && (\n                 <ActionButton \n                   onClick={() => {\n                     handleDeleteLocker(selectedLocker);\n                     setSelectedLocker(null);\n"
                },
                {
                    "date": 1761376273402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,28 +125,8 @@\n   color: ${AppColors.onSurface};\n   font-weight: 500;\n `;\n \n-const PriceEditButton = styled.button`\n-  position: absolute;\n-  top: 4px;\n-  right: 4px;\n-  width: 20px;\n-  height: 20px;\n-  border: none;\n-  border-radius: 50%;\n-  background-color: ${AppColors.primary};\n-  color: ${AppColors.onPrimary};\n-  font-size: 10px;\n-  cursor: pointer;\n-  opacity: 0;\n-  transition: opacity 0.2s ease;\n-  \n-  &:hover {\n-    background-color: ${AppColors.secondary};\n-  }\n-`;\n-\n const LockerGrid = styled.div`\n   display: grid;\n   grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n   gap: 16px;\n@@ -196,12 +176,8 @@\n   &:hover {\n     transform: translateY(-2px);\n     box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n   }\n-\n-  &:hover ${PriceEditButton} {\n-    opacity: 1;\n-  }\n `;\n \n const LockerNumber = styled.div`\n   font-size: ${AppTextStyles.body1.fontSize};\n@@ -300,11 +276,16 @@\n   number: string;\n   status: 'available' | 'occupied' | 'maintenance' | 'pending';\n   branchId: string;\n   userId?: string;\n-  price: number; // 라커 가격 추가\n }\n \n+// 지점별 라커 설정 타입\n+interface BranchLockerSettings {\n+  branchId: string;\n+  price: number; // 지점별 라커 가격\n+}\n+\n // 사용자 정보 타입\n interface UserInfo {\n   id: string;\n   name: string;\n@@ -318,15 +299,32 @@\n   const [lockers, setLockers] = useState<Locker[]>([]);\n   const [branches, setBranches] = useState<Branch[]>([]);\n   const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n   const [addCount, setAddCount] = useState<number>(1);\n-  const [addPrice, setAddPrice] = useState<number>(50000); // 기본 가격 5만원\n   const [selectedLocker, setSelectedLocker] = useState<Locker | null>(null);\n-  const [isPriceModalOpen, setIsPriceModalOpen] = useState(false);\n-  const [editPrice, setEditPrice] = useState<number>(0);\n+  const [isPriceSettingModalOpen, setIsPriceSettingModalOpen] = useState(false);\n+  const [branchLockerSettings, setBranchLockerSettings] = useState<BranchLockerSettings[]>([]);\n   const [currentUserInfo, setCurrentUserInfo] = useState<UserInfo | null>(null);\n   const [hasPermission, setHasPermission] = useState(false);\n \n+  // 지점별 라커 가격 가져오기\n+  const getBranchLockerPrice = (branchId: string): number => {\n+    const setting = branchLockerSettings.find(s => s.branchId === branchId);\n+    return setting?.price || 50000; // 기본값 5만원\n+  };\n+\n+  // 지점별 라커 가격 설정\n+  const setBranchLockerPrice = (branchId: string, price: number) => {\n+    setBranchLockerSettings(prev => {\n+      const existing = prev.find(s => s.branchId === branchId);\n+      if (existing) {\n+        return prev.map(s => s.branchId === branchId ? { ...s, price } : s);\n+      } else {\n+        return [...prev, { branchId, price }];\n+      }\n+    });\n+  };\n+\n   // 권한 확인 함수\n   const checkPermission = async () => {\n     try {\n       const adminId = sessionStorage.getItem('adminId');\n@@ -456,10 +454,9 @@\n       newLockers.push({\n         id: parseInt(`${selectedBranch.slice(-1)}${newNumber.toString().padStart(3, '0')}`),\n         number: newNumber.toString(),\n         status: 'available',\n-        branchId: selectedBranch,\n-        price: addPrice // 설정된 가격으로 추가\n+        branchId: selectedBranch\n       });\n     }\n     \n     setLockers(prev => [...prev, ...newLockers]);\n@@ -496,32 +493,20 @@\n   const handleLockerClick = (locker: Locker) => {\n     setSelectedLocker(locker);\n   };\n \n-  const handlePriceEdit = (locker: Locker) => {\n+  const handlePriceSettingOpen = () => {\n     // 권한 확인\n-    if (!canEditBranch(locker.branchId)) {\n-      alert('라커 가격 수정 권한이 없습니다.');\n+    if (!canEditBranch(selectedBranch)) {\n+      alert('라커 가격 설정 권한이 없습니다.');\n       return;\n     }\n-\n-    setSelectedLocker(locker);\n-    setEditPrice(locker.price);\n-    setIsPriceModalOpen(true);\n+    setIsPriceSettingModalOpen(true);\n   };\n \n-  const handlePriceUpdate = () => {\n-    if (!selectedLocker) return;\n-\n-    setLockers(prev => prev.map(l => \n-      l.id === selectedLocker.id \n-        ? { ...l, price: editPrice }\n-        : l\n-    ));\n-    \n-    setIsPriceModalOpen(false);\n-    setSelectedLocker(null);\n-    setEditPrice(0);\n+  const handlePriceSettingUpdate = (newPrice: number) => {\n+    setBranchLockerPrice(selectedBranch, newPrice);\n+    setIsPriceSettingModalOpen(false);\n   };\n \n   const formatPrice = (price: number): string => {\n     return new Intl.NumberFormat('ko-KR').format(price) + '원';\n@@ -577,8 +562,11 @@\n         </FilterSection>\n \n         {hasPermission && canEditBranch(selectedBranch) && (\n           <ActionSection>\n+            <ActionButton onClick={handlePriceSettingOpen}>\n+              금액 설정\n+            </ActionButton>\n             <ActionButton onClick={() => setIsAddModalOpen(true)}>\n               라커 추가\n             </ActionButton>\n             <Input\n@@ -588,18 +576,10 @@\n               value={addCount}\n               onChange={(e) => setAddCount(parseInt(e.target.value) || 1)}\n               placeholder=\"추가 개수\"\n             />\n-            <PriceInput\n-              type=\"number\"\n-              min=\"0\"\n-              step=\"1000\"\n-              value={addPrice}\n-              onChange={(e) => setAddPrice(parseInt(e.target.value) || 0)}\n-              placeholder=\"가격\"\n-            />\n             <span style={{ fontSize: AppTextStyles.body2.fontSize, color: AppColors.onSurface }}>\n-              원\n+              현재 라커 가격: {formatPrice(getBranchLockerPrice(selectedBranch))}\n             </span>\n           </ActionSection>\n         )}\n \n@@ -609,94 +589,80 @@\n               key={locker.id}\n               $status={locker.status}\n               onClick={() => handleLockerClick(locker)}\n             >\n-              {hasPermission && canEditBranch(locker.branchId) && (\n-                <PriceEditButton\n-                  onClick={(e) => {\n-                    e.stopPropagation();\n-                    handlePriceEdit(locker);\n-                  }}\n-                  title=\"가격 수정\"\n-                >\n-                  ₩\n-                </PriceEditButton>\n-              )}\n               <LockerNumber>{locker.number}</LockerNumber>\n               <LockerStatus $status={locker.status}>\n                 {getStatusText(locker.status)}\n               </LockerStatus>\n               <LockerPrice>\n-                {formatPrice(locker.price)}\n+                {formatPrice(getBranchLockerPrice(locker.branchId))}\n               </LockerPrice>\n             </LockerItem>\n           ))}\n         </LockerGrid>\n \n-        {/* 라커 추가 모달 */}\n-        <Modal $isOpen={isAddModalOpen}>\n+        {/* 지점별 라커 가격 설정 모달 */}\n+        <Modal $isOpen={isPriceSettingModalOpen}>\n           <ModalContent>\n-            <ModalTitle>라커 추가</ModalTitle>\n-            <p>추가할 라커 개수: {addCount}개</p>\n-            <p>번호: {Math.max(...currentBranchLockers.map(l => parseInt(l.number)), 0) + 1}번부터</p>\n-            <p>가격: {formatPrice(addPrice)}</p>\n+            <ModalTitle>\n+              {branches.find(b => b.id === selectedBranch)?.name} 라커 가격 설정\n+            </ModalTitle>\n             <PriceInputGroup>\n               <label>라커 가격:</label>\n               <PriceInput\n                 type=\"number\"\n                 min=\"0\"\n                 step=\"1000\"\n-                value={addPrice}\n-                onChange={(e) => setAddPrice(parseInt(e.target.value) || 0)}\n+                defaultValue={getBranchLockerPrice(selectedBranch)}\n                 placeholder=\"가격을 입력하세요\"\n+                id=\"branchPriceInput\"\n               />\n+              <span style={{ fontSize: AppTextStyles.label2.fontSize, color: AppColors.onInput1 }}>\n+                현재 가격: {formatPrice(getBranchLockerPrice(selectedBranch))}\n+              </span>\n             </PriceInputGroup>\n             <ModalButtons>\n-              <SecondaryButton onClick={() => setIsAddModalOpen(false)}>\n+              <SecondaryButton onClick={() => setIsPriceSettingModalOpen(false)}>\n                 취소\n               </SecondaryButton>\n-              <ActionButton onClick={handleAddLockers}>\n-                추가\n+              <ActionButton \n+                onClick={() => {\n+                  const input = document.getElementById('branchPriceInput') as HTMLInputElement;\n+                  const newPrice = parseInt(input.value) || 0;\n+                  handlePriceSettingUpdate(newPrice);\n+                }}\n+              >\n+                설정\n               </ActionButton>\n             </ModalButtons>\n           </ModalContent>\n         </Modal>\n \n-        {/* 라커 가격 수정 모달 */}\n-        <Modal $isOpen={isPriceModalOpen}>\n+        {/* 라커 추가 모달 */}\n+        <Modal $isOpen={isAddModalOpen}>\n           <ModalContent>\n-            <ModalTitle>라커 {selectedLocker?.number}번 가격 수정</ModalTitle>\n-            <PriceInputGroup>\n-              <label>라커 가격:</label>\n-              <PriceInput\n-                type=\"number\"\n-                min=\"0\"\n-                step=\"1000\"\n-                value={editPrice}\n-                onChange={(e) => setEditPrice(parseInt(e.target.value) || 0)}\n-                placeholder=\"가격을 입력하세요\"\n-              />\n-              <span style={{ fontSize: AppTextStyles.label2.fontSize, color: AppColors.onInput1 }}>\n-                현재 가격: {selectedLocker ? formatPrice(selectedLocker.price) : ''}\n-              </span>\n-            </PriceInputGroup>\n+            <ModalTitle>라커 추가</ModalTitle>\n+            <p>추가할 라커 개수: {addCount}개</p>\n+            <p>번호: {Math.max(...currentBranchLockers.map(l => parseInt(l.number)), 0) + 1}번부터</p>\n+            <p>라커 가격: {formatPrice(getBranchLockerPrice(selectedBranch))}</p>\n             <ModalButtons>\n-              <SecondaryButton onClick={() => setIsPriceModalOpen(false)}>\n+              <SecondaryButton onClick={() => setIsAddModalOpen(false)}>\n                 취소\n               </SecondaryButton>\n-              <ActionButton onClick={handlePriceUpdate}>\n-                수정\n+              <ActionButton onClick={handleAddLockers}>\n+                추가\n               </ActionButton>\n             </ModalButtons>\n           </ModalContent>\n         </Modal>\n \n         {/* 라커 상세 모달 */}\n-        <Modal $isOpen={!!selectedLocker && !isPriceModalOpen}>\n+        <Modal $isOpen={!!selectedLocker}>\n           <ModalContent>\n             <ModalTitle>라커 {selectedLocker?.number}번</ModalTitle>\n             <p>상태: {selectedLocker ? getStatusText(selectedLocker.status) : ''}</p>\n-            <p>가격: {selectedLocker ? formatPrice(selectedLocker.price) : ''}</p>\n+            <p>가격: {selectedLocker ? formatPrice(getBranchLockerPrice(selectedLocker.branchId)) : ''}</p>\n             {selectedLocker?.userId && (\n               <p>사용자: {selectedLocker.userId}</p>\n             )}\n             <ModalButtons>\n"
                },
                {
                    "date": 1761376552460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,14 +278,8 @@\n   branchId: string;\n   userId?: string;\n }\n \n-// 지점별 라커 설정 타입\n-interface BranchLockerSettings {\n-  branchId: string;\n-  price: number; // 지점별 라커 가격\n-}\n-\n // 사용자 정보 타입\n interface UserInfo {\n   id: string;\n   name: string;\n@@ -301,30 +295,18 @@\n   const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n   const [addCount, setAddCount] = useState<number>(1);\n   const [selectedLocker, setSelectedLocker] = useState<Locker | null>(null);\n   const [isPriceSettingModalOpen, setIsPriceSettingModalOpen] = useState(false);\n-  const [branchLockerSettings, setBranchLockerSettings] = useState<BranchLockerSettings[]>([]);\n   const [currentUserInfo, setCurrentUserInfo] = useState<UserInfo | null>(null);\n   const [hasPermission, setHasPermission] = useState(false);\n \n-  // 지점별 라커 가격 가져오기\n-  const getBranchLockerPrice = (branchId: string): number => {\n-    const setting = branchLockerSettings.find(s => s.branchId === branchId);\n-    return setting?.price || 50000; // 기본값 5만원\n+  // 현재 선택된 지점의 라커 가격을 동기화하여 가져오기\n+  const getCurrentBranchLockerPrice = (): number => {\n+    if (!selectedBranch) return 5000;\n+    const branch = branches.find(b => b.id === selectedBranch);\n+    return branch?.lockerPrice || 5000;\n   };\n \n-  // 지점별 라커 가격 설정\n-  const setBranchLockerPrice = (branchId: string, price: number) => {\n-    setBranchLockerSettings(prev => {\n-      const existing = prev.find(s => s.branchId === branchId);\n-      if (existing) {\n-        return prev.map(s => s.branchId === branchId ? { ...s, price } : s);\n-      } else {\n-        return [...prev, { branchId, price }];\n-      }\n-    });\n-  };\n-\n   // 권한 확인 함수\n   const checkPermission = async () => {\n     try {\n       const adminId = sessionStorage.getItem('adminId');\n@@ -502,11 +484,22 @@\n     }\n     setIsPriceSettingModalOpen(true);\n   };\n \n-  const handlePriceSettingUpdate = (newPrice: number) => {\n-    setBranchLockerPrice(selectedBranch, newPrice);\n-    setIsPriceSettingModalOpen(false);\n+  const handlePriceSettingUpdate = async (newPrice: number) => {\n+    try {\n+      const success = await dbManager.updateLockerPrice(selectedBranch, newPrice);\n+      if (success) {\n+        // 지점 데이터를 다시 로드하여 UI 업데이트\n+        await loadBranches();\n+        setIsPriceSettingModalOpen(false);\n+      } else {\n+        alert('라커 가격 설정에 실패했습니다.');\n+      }\n+    } catch (error) {\n+      console.error('라커 가격 설정 실패:', error);\n+      alert('라커 가격 설정 중 오류가 발생했습니다.');\n+    }\n   };\n \n   const formatPrice = (price: number): string => {\n     return new Intl.NumberFormat('ko-KR').format(price) + '원';\n@@ -577,9 +570,9 @@\n               onChange={(e) => setAddCount(parseInt(e.target.value) || 1)}\n               placeholder=\"추가 개수\"\n             />\n             <span style={{ fontSize: AppTextStyles.body2.fontSize, color: AppColors.onSurface }}>\n-              현재 라커 가격: {formatPrice(getBranchLockerPrice(selectedBranch))}\n+              현재 라커 가격: {formatPrice(getCurrentBranchLockerPrice())}\n             </span>\n           </ActionSection>\n         )}\n \n@@ -594,9 +587,9 @@\n               <LockerStatus $status={locker.status}>\n                 {getStatusText(locker.status)}\n               </LockerStatus>\n               <LockerPrice>\n-                {formatPrice(getBranchLockerPrice(locker.branchId))}\n+                {formatPrice(getCurrentBranchLockerPrice())}\n               </LockerPrice>\n             </LockerItem>\n           ))}\n         </LockerGrid>\n@@ -612,14 +605,14 @@\n               <PriceInput\n                 type=\"number\"\n                 min=\"0\"\n                 step=\"1000\"\n-                defaultValue={getBranchLockerPrice(selectedBranch)}\n+                defaultValue={getCurrentBranchLockerPrice()}\n                 placeholder=\"가격을 입력하세요\"\n                 id=\"branchPriceInput\"\n               />\n               <span style={{ fontSize: AppTextStyles.label2.fontSize, color: AppColors.onInput1 }}>\n-                현재 가격: {formatPrice(getBranchLockerPrice(selectedBranch))}\n+                현재 가격: {formatPrice(getCurrentBranchLockerPrice())}\n               </span>\n             </PriceInputGroup>\n             <ModalButtons>\n               <SecondaryButton onClick={() => setIsPriceSettingModalOpen(false)}>\n@@ -643,9 +636,9 @@\n           <ModalContent>\n             <ModalTitle>라커 추가</ModalTitle>\n             <p>추가할 라커 개수: {addCount}개</p>\n             <p>번호: {Math.max(...currentBranchLockers.map(l => parseInt(l.number)), 0) + 1}번부터</p>\n-            <p>라커 가격: {formatPrice(getBranchLockerPrice(selectedBranch))}</p>\n+            <p>라커 가격: {formatPrice(getCurrentBranchLockerPrice())}</p>\n             <ModalButtons>\n               <SecondaryButton onClick={() => setIsAddModalOpen(false)}>\n                 취소\n               </SecondaryButton>\n@@ -660,9 +653,9 @@\n         <Modal $isOpen={!!selectedLocker}>\n           <ModalContent>\n             <ModalTitle>라커 {selectedLocker?.number}번</ModalTitle>\n             <p>상태: {selectedLocker ? getStatusText(selectedLocker.status) : ''}</p>\n-            <p>가격: {selectedLocker ? formatPrice(getBranchLockerPrice(selectedLocker.branchId)) : ''}</p>\n+            <p>가격: {formatPrice(getCurrentBranchLockerPrice())}</p>\n             {selectedLocker?.userId && (\n               <p>사용자: {selectedLocker.userId}</p>\n             )}\n             <ModalButtons>\n"
                },
                {
                    "date": 1761376897636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,23 +62,8 @@\n     background-color: ${AppColors.primary + '10'};\n   }\n `;\n \n-const Input = styled.input`\n-  padding: 8px 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 6px;\n-  background-color: ${AppColors.surface};\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-  width: 100px;\n-\n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-  }\n-`;\n-\n const Modal = styled.div<{ $isOpen: boolean }>`\n   position: fixed;\n   top: 0;\n   left: 0;\n@@ -119,8 +104,15 @@\n   margin-bottom: 24px;\n   align-items: center;\n `;\n \n+const LegendColor = styled.div<{ $color: string }>`\n+  width: 16px;\n+  height: 16px;\n+  border-radius: 4px;\n+  background-color: ${props => props.$color};\n+`;\n+\n const FilterLabel = styled.label`\n   font-size: ${AppTextStyles.body2.fontSize};\n   color: ${AppColors.onSurface};\n   font-weight: 500;\n@@ -204,27 +196,8 @@\n   }};\n   font-weight: 500;\n `;\n \n-const StatusLegend = styled.div`\n-  display: flex;\n-  gap: 24px;\n-  align-items: center;\n-`;\n-\n-const LegendItem = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 8px;\n-`;\n-\n-const LegendColor = styled.div<{ $color: string }>`\n-  width: 16px;\n-  height: 16px;\n-  border-radius: 4px;\n-  background-color: ${props => props.$color};\n-`;\n-\n const LockerPrice = styled.div`\n   font-size: ${AppTextStyles.label2.fontSize};\n   color: ${AppColors.primary};\n   font-weight: 600;\n@@ -264,11 +237,29 @@\n     border-color: ${AppColors.primary};\n   }\n `;\n \n-const LegendText = styled.span`\n+const StatNumber = styled.span`\n+  color: ${AppColors.primary};\n+  font-weight: 600;\n+`;\n+\n+const StatusStats = styled.div`\n+  display: flex;\n+  gap: 24px;\n+  align-items: center;\n+  background-color: ${AppColors.surface};\n+  padding: 12px 16px;\n+  border-radius: 8px;\n+  border: 1px solid ${AppColors.borderLight};\n+`;\n+\n+const StatItem = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 8px;\n   font-size: ${AppTextStyles.body2.fontSize};\n-  color: ${AppColors.onSurface};\n+  font-weight: 500;\n `;\n \n // 라커 타입 정의\n interface Locker {\n@@ -405,8 +396,19 @@\n   };\n \n   const currentBranchLockers = lockers.filter(locker => locker.branchId === selectedBranch);\n \n+  // 상태별 통계 계산\n+  const getLockerStats = () => {\n+    const total = currentBranchLockers.length;\n+    const available = currentBranchLockers.filter(l => l.status === 'available').length;\n+    const occupied = currentBranchLockers.filter(l => l.status === 'occupied').length;\n+    const maintenance = currentBranchLockers.filter(l => l.status === 'maintenance').length;\n+    const pending = currentBranchLockers.filter(l => l.status === 'pending').length;\n+    \n+    return { total, available, occupied, maintenance, pending };\n+  };\n+\n   const getStatusText = (status: string) => {\n     switch (status) {\n       case 'available':\n         return '사용가능';\n@@ -484,8 +486,18 @@\n     }\n     setIsPriceSettingModalOpen(true);\n   };\n \n+  const handleAddModalOpen = () => {\n+    // 권한 확인\n+    if (!canEditBranch(selectedBranch)) {\n+      alert('라커 추가 권한이 없습니다.');\n+      return;\n+    }\n+    setAddCount(1); // 모달 열 때 수량 초기화\n+    setIsAddModalOpen(true);\n+  };\n+\n   const handlePriceSettingUpdate = async (newPrice: number) => {\n     try {\n       const success = await dbManager.updateLockerPrice(selectedBranch, newPrice);\n       if (success) {\n@@ -533,44 +545,47 @@\n               inModal={false}\n             />\n           </div>\n \n-          <StatusLegend>\n-            <LegendItem>\n-              <LegendColor $color={AppColors.success} />\n-              <LegendText>사용가능</LegendText>\n-            </LegendItem>\n-            <LegendItem>\n-              <LegendColor $color={AppColors.error} />\n-              <LegendText>사용중</LegendText>\n-            </LegendItem>\n-            <LegendItem>\n-              <LegendColor $color={AppColors.warning} />\n-              <LegendText>점검중</LegendText>\n-            </LegendItem>\n-            <LegendItem>\n-              <LegendColor $color={AppColors.info} />\n-              <LegendText>승인요청</LegendText>\n-            </LegendItem>\n-          </StatusLegend>\n+          {/* 상태별 통계 표시 */}\n+          {selectedBranch && (\n+            <StatusStats>\n+              <StatItem>\n+                <span>총 라커:</span>\n+                <StatNumber>{getLockerStats().total}개</StatNumber>\n+              </StatItem>\n+              <StatItem>\n+                <LegendColor $color={AppColors.success} />\n+                <span>사용가능:</span>\n+                <StatNumber>{getLockerStats().available}개</StatNumber>\n+              </StatItem>\n+              <StatItem>\n+                <LegendColor $color={AppColors.error} />\n+                <span>사용중:</span>\n+                <StatNumber>{getLockerStats().occupied}개</StatNumber>\n+              </StatItem>\n+              <StatItem>\n+                <LegendColor $color={AppColors.warning} />\n+                <span>점검중:</span>\n+                <StatNumber>{getLockerStats().maintenance}개</StatNumber>\n+              </StatItem>\n+              <StatItem>\n+                <LegendColor $color={AppColors.info} />\n+                <span>승인요청:</span>\n+                <StatNumber>{getLockerStats().pending}개</StatNumber>\n+              </StatItem>\n+            </StatusStats>\n+          )}\n         </FilterSection>\n \n         {hasPermission && canEditBranch(selectedBranch) && (\n           <ActionSection>\n             <ActionButton onClick={handlePriceSettingOpen}>\n               금액 설정\n             </ActionButton>\n-            <ActionButton onClick={() => setIsAddModalOpen(true)}>\n+            <ActionButton onClick={handleAddModalOpen}>\n               라커 추가\n             </ActionButton>\n-            <Input\n-              type=\"number\"\n-              min=\"1\"\n-              max=\"50\"\n-              value={addCount}\n-              onChange={(e) => setAddCount(parseInt(e.target.value) || 1)}\n-              placeholder=\"추가 개수\"\n-            />\n             <span style={{ fontSize: AppTextStyles.body2.fontSize, color: AppColors.onSurface }}>\n               현재 라커 가격: {formatPrice(getCurrentBranchLockerPrice())}\n             </span>\n           </ActionSection>\n@@ -634,17 +649,30 @@\n         {/* 라커 추가 모달 */}\n         <Modal $isOpen={isAddModalOpen}>\n           <ModalContent>\n             <ModalTitle>라커 추가</ModalTitle>\n-            <p>추가할 라커 개수: {addCount}개</p>\n-            <p>번호: {Math.max(...currentBranchLockers.map(l => parseInt(l.number)), 0) + 1}번부터</p>\n+            <PriceInputGroup>\n+              <label>추가할 라커 개수:</label>\n+              <PriceInput\n+                type=\"number\"\n+                min=\"1\"\n+                max=\"50\"\n+                value={addCount}\n+                onChange={(e) => setAddCount(parseInt(e.target.value) || 1)}\n+                placeholder=\"추가할 개수를 입력하세요\"\n+              />\n+            </PriceInputGroup>\n+            <p>번호: {Math.max(...currentBranchLockers.map(l => parseInt(l.number)), 0) + 1}번부터 {Math.max(...currentBranchLockers.map(l => parseInt(l.number)), 0) + addCount}번까지</p>\n             <p>라커 가격: {formatPrice(getCurrentBranchLockerPrice())}</p>\n             <ModalButtons>\n-              <SecondaryButton onClick={() => setIsAddModalOpen(false)}>\n+              <SecondaryButton onClick={() => {\n+                setIsAddModalOpen(false);\n+                setAddCount(1);\n+              }}>\n                 취소\n               </SecondaryButton>\n               <ActionButton onClick={handleAddLockers}>\n-                추가\n+                {addCount}개 추가\n               </ActionButton>\n             </ModalButtons>\n           </ModalContent>\n         </Modal>\n"
                },
                {
                    "date": 1761377685338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n import React, { useState } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n-import { dbManager, type Branch } from '../../../utils/indexedDB';\n+import { dbManager, type Branch, type Member, type Locker } from '../../../utils/indexedDB';\n import CustomDropdown from '../../../components/CustomDropdown';\n import { SYSTEM_ADMIN_CONFIG } from '../../../constants/staffConstants';\n+import Modal from '../../../components/Modal';\n \n const Container = styled.div`\n   padding: 24px;\n   background-color: ${AppColors.surface};\n@@ -62,9 +63,9 @@\n     background-color: ${AppColors.primary + '10'};\n   }\n `;\n \n-const Modal = styled.div<{ $isOpen: boolean }>`\n+const ModalOverlay = styled.div<{ $isOpen: boolean }>`\n   position: fixed;\n   top: 0;\n   left: 0;\n   right: 0;\n@@ -260,17 +261,183 @@\n   font-size: ${AppTextStyles.body2.fontSize};\n   font-weight: 500;\n `;\n \n-// 라커 타입 정의\n-interface Locker {\n-  id: number;\n-  number: string;\n-  status: 'available' | 'occupied' | 'maintenance' | 'pending';\n-  branchId: string;\n-  userId?: string;\n-}\n+// 라커 배정 모달 스타일\n+const AssignmentModalContainer = styled.div`\n+  display: flex;\n+  gap: 24px;\n+  height: 600px;\n+  min-width: 900px;\n+  width: 100%;\n+  overflow: hidden;\n+`;\n \n+const LeftPanel = styled.div`\n+  flex: 1;\n+  border-right: 1px solid ${AppColors.borderLight};\n+  padding-right: 24px;\n+  min-width: 0;\n+  display: flex;\n+  flex-direction: column;\n+`;\n+\n+const RightPanel = styled.div`\n+  flex: 1;\n+  padding-left: 24px;\n+  min-width: 0;\n+  display: flex;\n+  flex-direction: column;\n+`;\n+\n+const PanelTitle = styled.h3`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 600;\n+  margin-bottom: 16px;\n+  color: ${AppColors.onBackground};\n+  border-bottom: 2px solid ${AppColors.primary};\n+  padding-bottom: 8px;\n+`;\n+\n+const SearchInput = styled.input`\n+  width: 100%;\n+  padding: 12px 16px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  margin-bottom: 16px;\n+  box-sizing: border-box;\n+  \n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+    box-shadow: 0 0 0 2px ${AppColors.primary}20;\n+  }\n+`;\n+\n+const SearchResults = styled.div`\n+  flex: 1;\n+  overflow-y: auto;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  width: 100%;\n+  box-sizing: border-box;\n+  min-height: 0;\n+`;\n+\n+const MemberItem = styled.div<{ $selected: boolean }>`\n+  padding: 12px 16px;\n+  border-bottom: 1px solid ${AppColors.borderLight};\n+  cursor: pointer;\n+  transition: all 0.2s;\n+  background: ${props => props.$selected ? AppColors.primary : 'transparent'};\n+  color: ${props => props.$selected ? AppColors.onPrimary : AppColors.onSurface};\n+  \n+  &:hover {\n+    background: ${props => props.$selected ? AppColors.primary : `${AppColors.primary}10`};\n+  }\n+  \n+  &:last-child {\n+    border-bottom: none;\n+  }\n+`;\n+\n+const MemberName = styled.div`\n+  font-weight: 600;\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  margin-bottom: 4px;\n+`;\n+\n+const MemberInfo = styled.div`\n+  font-size: ${AppTextStyles.body3.fontSize};\n+  opacity: 0.8;\n+  line-height: 1.4;\n+`;\n+\n+const SelectedMemberCard = styled.div`\n+  background: ${AppColors.surface};\n+  border: 2px solid ${AppColors.primary};\n+  border-radius: 12px;\n+  padding: 16px;\n+  margin-bottom: 16px;\n+  width: 100%;\n+  box-sizing: border-box;\n+`;\n+\n+const SelectedMemberName = styled.div`\n+  font-size: ${AppTextStyles.title3.fontSize};\n+  font-weight: 700;\n+  color: ${AppColors.primary};\n+  margin-bottom: 8px;\n+`;\n+\n+const SelectedMemberDetails = styled.div`\n+  display: grid;\n+  grid-template-columns: 1fr 1fr;\n+  gap: 8px;\n+  font-size: ${AppTextStyles.body3.fontSize};\n+  color: ${AppColors.onInput1};\n+`;\n+\n+const FormGroup = styled.div`\n+  margin-bottom: 16px;\n+`;\n+\n+const FormLabel = styled.label`\n+  display: block;\n+  font-size: ${AppTextStyles.body2.fontSize};\n+  font-weight: 500;\n+  color: ${AppColors.onSurface};\n+  margin-bottom: 8px;\n+`;\n+\n+const Select = styled.select`\n+  width: 100%;\n+  padding: 8px 12px;\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 6px;\n+  background-color: ${AppColors.surface};\n+  color: ${AppColors.onSurface};\n+  font-size: ${AppTextStyles.body2.fontSize};\n+\n+  &:focus {\n+    outline: none;\n+    border-color: ${AppColors.primary};\n+  }\n+`;\n+\n+const AmountDisplay = styled.div`\n+  background: ${AppColors.surface};\n+  border: 1px solid ${AppColors.borderLight};\n+  border-radius: 8px;\n+  padding: 12px;\n+  margin: 16px 0;\n+  text-align: center;\n+`;\n+\n+const AmountText = styled.div`\n+  font-size: ${AppTextStyles.body1.fontSize};\n+  color: ${AppColors.onSurface};\n+  margin-bottom: 4px;\n+`;\n+\n+const AmountValue = styled.div`\n+  font-size: ${AppTextStyles.title2.fontSize};\n+  font-weight: 600;\n+  color: ${AppColors.primary};\n+`;\n+\n+const WarningText = styled.div`\n+  background: #fff3cd;\n+  border: 1px solid #ffeaa7;\n+  border-radius: 8px;\n+  padding: 12px;\n+  margin: 16px 0;\n+  color: #856404;\n+  font-size: 14px;\n+  text-align: center;\n+`;\n+\n // 사용자 정보 타입\n interface UserInfo {\n   id: string;\n   name: string;\n@@ -289,8 +456,17 @@\n   const [isPriceSettingModalOpen, setIsPriceSettingModalOpen] = useState(false);\n   const [currentUserInfo, setCurrentUserInfo] = useState<UserInfo | null>(null);\n   const [hasPermission, setHasPermission] = useState(false);\n \n+  // 라커 배정 관련 상태\n+  const [isAssignmentModalOpen, setIsAssignmentModalOpen] = useState(false);\n+  const [selectedLockerForAssignment, setSelectedLockerForAssignment] = useState<Locker | null>(null);\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [searchResults, setSearchResults] = useState<Member[]>([]);\n+  const [selectedMember, setSelectedMember] = useState<Member | null>(null);\n+  const [selectedMonths, setSelectedMonths] = useState(1);\n+  const [paymentMethod, setPaymentMethod] = useState('card');\n+\n   // 현재 선택된 지점의 라커 가격을 동기화하여 가져오기\n   const getCurrentBranchLockerPrice = (): number => {\n     if (!selectedBranch) return 5000;\n     const branch = branches.find(b => b.id === selectedBranch);\n@@ -362,14 +538,20 @@\n       console.error('지점 데이터 로드 실패:', error);\n     }\n   };\n \n-  // 라커 데이터 로드 (더미 데이터 제거, 실제 저장된 라커만 로드)\n+  // 라커 데이터 로드\n   const loadLockers = async () => {\n     try {\n-      // 실제 저장된 라커 데이터가 있다면 로드\n-      // 현재는 빈 배열로 시작 (더미 데이터 제거)\n-      setLockers([]);\n+      if (!selectedBranch) {\n+        setLockers([]);\n+        return;\n+      }\n+      \n+      console.log('라커 데이터 로딩 시작:', selectedBranch);\n+      const branchLockers = await dbManager.getLockersByBranch(selectedBranch);\n+      console.log('로드된 라커 데이터:', branchLockers);\n+      setLockers(branchLockers);\n     } catch (error) {\n       console.error('라커 데이터 로드 실패:', error);\n       setLockers([]);\n     }\n@@ -385,8 +567,15 @@\n     \n     initData();\n   }, []); // eslint-disable-line react-hooks/exhaustive-deps\n \n+  // 지점 변경 시 라커 데이터 다시 로드\n+  React.useEffect(() => {\n+    if (selectedBranch) {\n+      loadLockers();\n+    }\n+  }, [selectedBranch]); // eslint-disable-line react-hooks/exhaustive-deps\n+\n   // 지점 옵션 변환 함수\n   const getBranchOptions = () => {\n     return branches.map(branch => ({\n       value: branch.id,\n@@ -422,63 +611,212 @@\n         return '알 수 없음';\n     }\n   };\n \n-  const handleAddLockers = () => {\n+  const handleAddLockers = async () => {\n     // 권한 확인\n     if (!canEditBranch(selectedBranch)) {\n       alert('라커 추가 권한이 없습니다.');\n       return;\n     }\n \n-    const maxNumber = Math.max(...currentBranchLockers.map(l => parseInt(l.number)), 0);\n-    const newLockers: Locker[] = [];\n-    \n-    for (let i = 1; i <= addCount; i++) {\n-      const newNumber = maxNumber + i;\n-      newLockers.push({\n-        id: parseInt(`${selectedBranch.slice(-1)}${newNumber.toString().padStart(3, '0')}`),\n-        number: newNumber.toString(),\n-        status: 'available',\n-        branchId: selectedBranch\n-      });\n+    try {\n+      const selectedBranchData = branches.find(b => b.id === selectedBranch);\n+      if (!selectedBranchData) {\n+        alert('지점 정보를 찾을 수 없습니다.');\n+        return;\n+      }\n+\n+      const maxNumber = Math.max(...currentBranchLockers.map(l => parseInt(l.number)), 0);\n+      const newLockersData: Omit<Locker, 'id' | 'createdAt' | 'updatedAt'>[] = [];\n+      \n+      for (let i = 1; i <= addCount; i++) {\n+        const newNumber = (maxNumber + i).toString();\n+        newLockersData.push({\n+          number: newNumber,\n+          status: 'available',\n+          branchId: selectedBranch,\n+          branchName: selectedBranchData.name,\n+          isActive: true\n+        });\n+      }\n+      \n+      console.log('라커 추가 시작:', newLockersData);\n+      const addedLockers = await dbManager.addMultipleLockers(newLockersData);\n+      console.log('라커 추가 완료:', addedLockers);\n+      \n+      // 라커 목록 새로고침\n+      await loadLockers();\n+      \n+      setIsAddModalOpen(false);\n+      setAddCount(1);\n+      \n+      alert(`${addCount}개의 라커가 성공적으로 추가되었습니다.`);\n+    } catch (error) {\n+      console.error('라커 추가 실패:', error);\n+      alert('라커 추가 중 오류가 발생했습니다.');\n     }\n-    \n-    setLockers(prev => [...prev, ...newLockers]);\n-    setIsAddModalOpen(false);\n-    setAddCount(1);\n   };\n \n-  const handleToggleMaintenance = (locker: Locker) => {\n+  const handleToggleMaintenance = async (locker: Locker) => {\n     // 권한 확인\n     if (!canEditBranch(locker.branchId)) {\n       alert('라커 상태 변경 권한이 없습니다.');\n       return;\n     }\n \n-    setLockers(prev => prev.map(l => \n-      l.id === locker.id \n-        ? { ...l, status: l.status === 'maintenance' ? 'available' : 'maintenance' }\n-        : l\n-    ));\n+    try {\n+      const newStatus = locker.status === 'maintenance' ? 'available' : 'maintenance';\n+      await dbManager.updateLocker(locker.id, { status: newStatus });\n+      \n+      // 라커 목록 새로고침\n+      await loadLockers();\n+      \n+      alert(`라커 ${locker.number}번이 ${newStatus === 'maintenance' ? '점검중' : '사용가능'} 상태로 변경되었습니다.`);\n+    } catch (error) {\n+      console.error('라커 상태 변경 실패:', error);\n+      alert('라커 상태 변경 중 오류가 발생했습니다.');\n+    }\n   };\n \n-  const handleDeleteLocker = (locker: Locker) => {\n+  const handleDeleteLocker = async (locker: Locker) => {\n     // 권한 확인\n     if (!canEditBranch(locker.branchId)) {\n       alert('라커 삭제 권한이 없습니다.');\n       return;\n     }\n \n     if (window.confirm(`라커 ${locker.number}번을 삭제하시겠습니까?`)) {\n-      setLockers(prev => prev.filter(l => l.id !== locker.id));\n+      try {\n+        await dbManager.deleteLocker(locker.id);\n+        \n+        // 라커 목록 새로고침\n+        await loadLockers();\n+        \n+        alert(`라커 ${locker.number}번이 삭제되었습니다.`);\n+      } catch (error) {\n+        console.error('라커 삭제 실패:', error);\n+        alert('라커 삭제 중 오류가 발생했습니다.');\n+      }\n     }\n   };\n \n   const handleLockerClick = (locker: Locker) => {\n-    setSelectedLocker(locker);\n+    // 사용 가능한 라커인 경우 배정 모달 열기\n+    if (locker.status === 'available' && hasPermission && canEditBranch(locker.branchId)) {\n+      setSelectedLockerForAssignment(locker);\n+      setIsAssignmentModalOpen(true);\n+      setSelectedMember(null);\n+      setSearchQuery('');\n+      setSearchResults([]);\n+      setSelectedMonths(1);\n+      setPaymentMethod('card');\n+    } else {\n+      // 기존 상세 모달 열기\n+      setSelectedLocker(locker);\n+    }\n   };\n \n+  // 회원 검색 함수\n+  const handleMemberSearch = async (query: string) => {\n+    setSearchQuery(query);\n+    \n+    if (!query.trim()) {\n+      setSearchResults([]);\n+      return;\n+    }\n+\n+    try {\n+      const members = await dbManager.getAllMembers();\n+      const filtered = members.filter(member => \n+        member.isActive && (\n+          member.name.toLowerCase().includes(query.toLowerCase()) ||\n+          member.phone?.includes(query) ||\n+          member.email?.toLowerCase().includes(query.toLowerCase())\n+        )\n+      );\n+      setSearchResults(filtered.slice(0, 10)); // 최대 10개만 표시\n+    } catch (error) {\n+      console.error('회원 검색 실패:', error);\n+      setSearchResults([]);\n+    }\n+  };\n+\n+  // 회원 선택 함수\n+  const handleMemberSelect = (member: Member) => {\n+    setSelectedMember(member);\n+    setSearchQuery(member.name);\n+    setSearchResults([]);\n+  };\n+\n+  // 라커 배정 처리 함수\n+  const handleAssignLocker = async () => {\n+    if (!selectedMember || !selectedLockerForAssignment) {\n+      alert('회원과 라커를 선택해주세요.');\n+      return;\n+    }\n+\n+    try {\n+      const monthlyPrice = getCurrentBranchLockerPrice();\n+      const totalAmount = monthlyPrice * selectedMonths;\n+      \n+      // 결제 정보를 결제 이력에 추가\n+      const paymentData = {\n+        memberId: selectedMember.id,\n+        memberName: selectedMember.name,\n+        branchId: selectedLockerForAssignment.branchId,\n+        branchName: selectedLockerForAssignment.branchName,\n+        coach: selectedMember.coach,\n+        coachName: selectedMember.coachName,\n+        products: [{\n+          id: `locker_${selectedLockerForAssignment.id}`,\n+          name: `라커 ${selectedLockerForAssignment.number}번 (${selectedMonths}개월)`,\n+          price: totalAmount,\n+          quantity: 1,\n+          description: `라커 ${selectedLockerForAssignment.number}번 ${selectedMonths}개월 이용`\n+        }],\n+        totalAmount: totalAmount,\n+        paidAmount: totalAmount,\n+        unpaidAmount: 0,\n+        paymentStatus: 'completed' as const,\n+        paymentMethod: paymentMethod,\n+        paymentDate: new Date(),\n+        paymentType: 'asset' as const,\n+        memo: `라커 ${selectedLockerForAssignment.number}번 배정`\n+      };\n+\n+      // 결제 정보 저장\n+      const paymentId = await dbManager.addPayment(paymentData);\n+      console.log('결제 정보 저장 완료:', paymentId);\n+\n+      // 라커 배정\n+      await dbManager.assignLockerToUser(\n+        selectedLockerForAssignment.id,\n+        selectedMember.id,\n+        selectedMember.name,\n+        selectedMonths,\n+        paymentId\n+      );\n+\n+      // 라커 목록 새로고침\n+      await loadLockers();\n+\n+      setIsAssignmentModalOpen(false);\n+      setSelectedLockerForAssignment(null);\n+      setSelectedMember(null);\n+      \n+      alert(`라커 ${selectedLockerForAssignment.number}번이 ${selectedMember.name}님에게 배정되었습니다.`);\n+    } catch (error) {\n+      console.error('라커 배정 실패:', error);\n+      alert('라커 배정 중 오류가 발생했습니다.');\n+    }\n+  };\n+\n+  // 총 금액 계산\n+  const getTotalAmount = () => {\n+    return getCurrentBranchLockerPrice() * selectedMonths;\n+  };\n+\n   const handlePriceSettingOpen = () => {\n     // 권한 확인\n     if (!canEditBranch(selectedBranch)) {\n       alert('라커 가격 설정 권한이 없습니다.');\n@@ -609,9 +947,9 @@\n           ))}\n         </LockerGrid>\n \n         {/* 지점별 라커 가격 설정 모달 */}\n-        <Modal $isOpen={isPriceSettingModalOpen}>\n+        <ModalOverlay $isOpen={isPriceSettingModalOpen}>\n           <ModalContent>\n             <ModalTitle>\n               {branches.find(b => b.id === selectedBranch)?.name} 라커 가격 설정\n             </ModalTitle>\n@@ -643,12 +981,12 @@\n                 설정\n               </ActionButton>\n             </ModalButtons>\n           </ModalContent>\n-        </Modal>\n+        </ModalOverlay>\n \n         {/* 라커 추가 모달 */}\n-        <Modal $isOpen={isAddModalOpen}>\n+        <ModalOverlay $isOpen={isAddModalOpen}>\n           <ModalContent>\n             <ModalTitle>라커 추가</ModalTitle>\n             <PriceInputGroup>\n               <label>추가할 라커 개수:</label>\n@@ -674,18 +1012,189 @@\n                 {addCount}개 추가\n               </ActionButton>\n             </ModalButtons>\n           </ModalContent>\n-        </Modal>\n+        </ModalOverlay>\n \n+        {/* 라커 배정 모달 */}\n+        <Modal\n+          isOpen={isAssignmentModalOpen}\n+          onClose={() => {\n+            setIsAssignmentModalOpen(false);\n+            setSelectedLockerForAssignment(null);\n+            setSelectedMember(null);\n+            setSearchQuery('');\n+            setSearchResults([]);\n+          }}\n+          width=\"min(95vw, 1000px)\"\n+          header={`라커 ${selectedLockerForAssignment?.number}번 배정`}\n+          body={\n+            <AssignmentModalContainer>\n+              <LeftPanel>\n+                <PanelTitle>회원 검색 및 선택</PanelTitle>\n+                \n+                {!selectedMember ? (\n+                  <>\n+                    <SearchInput\n+                      type=\"text\"\n+                      placeholder=\"회원명, 전화번호, 이메일로 검색...\"\n+                      value={searchQuery}\n+                      onChange={(e) => handleMemberSearch(e.target.value)}\n+                    />\n+                    \n+                    <SearchResults>\n+                      {searchResults.map((member) => (\n+                        <MemberItem\n+                          key={member.id}\n+                          $selected={false}\n+                          onClick={() => handleMemberSelect(member)}\n+                        >\n+                          <MemberName>{member.name}</MemberName>\n+                          <MemberInfo>\n+                            {member.phone && <div>전화: {member.phone}</div>}\n+                            {member.email && <div>이메일: {member.email}</div>}\n+                            {member.birth && <div>생년월일: {member.birth}</div>}\n+                          </MemberInfo>\n+                        </MemberItem>\n+                      ))}\n+                      \n+                      {searchQuery && searchResults.length === 0 && (\n+                        <div style={{ padding: '20px', textAlign: 'center', color: AppColors.onInput1 }}>\n+                          검색 결과가 없습니다.\n+                        </div>\n+                      )}\n+                    </SearchResults>\n+                  </>\n+                ) : (\n+                  <SelectedMemberCard>\n+                    <SelectedMemberName>\n+                      {selectedMember.name}\n+                      <button \n+                        onClick={() => {\n+                          setSelectedMember(null);\n+                          setSearchQuery('');\n+                          setSearchResults([]);\n+                        }}\n+                        style={{ \n+                          float: 'right', \n+                          background: 'none', \n+                          border: 'none', \n+                          fontSize: '14px', \n+                          cursor: 'pointer',\n+                          color: AppColors.primary\n+                        }}\n+                      >\n+                        변경\n+                      </button>\n+                    </SelectedMemberName>\n+                    <SelectedMemberDetails>\n+                      {selectedMember.phone && <div>전화: {selectedMember.phone}</div>}\n+                      {selectedMember.email && <div>이메일: {selectedMember.email}</div>}\n+                      {selectedMember.birth && <div>생년월일: {selectedMember.birth}</div>}\n+                      {selectedMember.address && <div>주소: {selectedMember.address}</div>}\n+                    </SelectedMemberDetails>\n+                  </SelectedMemberCard>\n+                )}\n+              </LeftPanel>\n+              \n+              <RightPanel>\n+                <PanelTitle>라커 배정 정보</PanelTitle>\n+                \n+                {!selectedMember ? (\n+                  <WarningText>\n+                    먼저 왼쪽에서 회원을 선택해주세요.\n+                  </WarningText>\n+                ) : (\n+                  <>\n+                    <FormGroup>\n+                      <FormLabel>라커 번호</FormLabel>\n+                      <PriceInput\n+                        type=\"text\"\n+                        value={selectedLockerForAssignment?.number || ''}\n+                        readOnly\n+                        style={{ backgroundColor: AppColors.borderLight }}\n+                      />\n+                    </FormGroup>\n+\n+                    <FormGroup>\n+                      <FormLabel>이용 기간</FormLabel>\n+                      <Select\n+                        value={selectedMonths}\n+                        onChange={(e) => setSelectedMonths(parseInt(e.target.value))}\n+                      >\n+                        <option value={1}>1개월</option>\n+                        <option value={2}>2개월</option>\n+                        <option value={3}>3개월</option>\n+                        <option value={4}>4개월</option>\n+                        <option value={5}>5개월</option>\n+                        <option value={6}>6개월</option>\n+                        <option value={12}>12개월</option>\n+                      </Select>\n+                    </FormGroup>\n+\n+                    <FormGroup>\n+                      <FormLabel>결제 방법</FormLabel>\n+                      <Select\n+                        value={paymentMethod}\n+                        onChange={(e) => setPaymentMethod(e.target.value)}\n+                      >\n+                        <option value=\"card\">카드</option>\n+                        <option value=\"cash\">현금</option>\n+                        <option value=\"transfer\">계좌이체</option>\n+                      </Select>\n+                    </FormGroup>\n+\n+                    <AmountDisplay>\n+                      <AmountText>총 결제 금액</AmountText>\n+                      <AmountValue>{formatPrice(getTotalAmount())}</AmountValue>\n+                      <div style={{ fontSize: AppTextStyles.label2.fontSize, color: AppColors.onInput1, marginTop: '8px' }}>\n+                        월 {formatPrice(getCurrentBranchLockerPrice())} × {selectedMonths}개월\n+                      </div>\n+                    </AmountDisplay>\n+\n+                    <div style={{ fontSize: AppTextStyles.body3.fontSize, color: AppColors.onInput1 }}>\n+                      <div>시작일: {new Date().toLocaleDateString('ko-KR')}</div>\n+                      <div>종료일: {new Date(Date.now() + selectedMonths * 30 * 24 * 60 * 60 * 1000).toLocaleDateString('ko-KR')}</div>\n+                    </div>\n+                  </>\n+                )}\n+              </RightPanel>\n+            </AssignmentModalContainer>\n+          }\n+          footer={\n+            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '12px' }}>\n+              <SecondaryButton onClick={() => {\n+                setIsAssignmentModalOpen(false);\n+                setSelectedLockerForAssignment(null);\n+                setSelectedMember(null);\n+                setSearchQuery('');\n+                setSearchResults([]);\n+              }}>\n+                취소\n+              </SecondaryButton>\n+              <ActionButton \n+                onClick={handleAssignLocker}\n+                disabled={!selectedMember}\n+              >\n+                라커 배정\n+              </ActionButton>\n+            </div>\n+          }\n+        />\n+\n         {/* 라커 상세 모달 */}\n-        <Modal $isOpen={!!selectedLocker}>\n+        <ModalOverlay $isOpen={!!selectedLocker}>\n           <ModalContent>\n             <ModalTitle>라커 {selectedLocker?.number}번</ModalTitle>\n             <p>상태: {selectedLocker ? getStatusText(selectedLocker.status) : ''}</p>\n             <p>가격: {formatPrice(getCurrentBranchLockerPrice())}</p>\n-            {selectedLocker?.userId && (\n-              <p>사용자: {selectedLocker.userId}</p>\n+            {selectedLocker?.userName && (\n+              <>\n+                <p>사용자: {selectedLocker.userName}</p>\n+                {selectedLocker.startDate && <p>시작일: {selectedLocker.startDate}</p>}\n+                {selectedLocker.endDate && <p>종료일: {selectedLocker.endDate}</p>}\n+                {selectedLocker.months && <p>이용기간: {selectedLocker.months}개월</p>}\n+              </>\n             )}\n             <ModalButtons>\n               <SecondaryButton onClick={() => setSelectedLocker(null)}>\n                 닫기\n@@ -712,9 +1221,9 @@\n                 </ActionButton>\n               )}\n             </ModalButtons>\n           </ModalContent>\n-        </Modal>\n+        </ModalOverlay>\n       </Content>\n     </Container>\n   );\n };\n"
                },
                {
                    "date": 1761377906221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useState } from 'react';\n import styled from 'styled-components';\n+import { toast } from 'react-toastify';\n import { AppColors } from '../../../styles/colors';\n import { AppTextStyles } from '../../../styles/textStyles';\n import { dbManager, type Branch, type Member, type Locker } from '../../../utils/indexedDB';\n import CustomDropdown from '../../../components/CustomDropdown';\n@@ -614,16 +615,16 @@\n \n   const handleAddLockers = async () => {\n     // 권한 확인\n     if (!canEditBranch(selectedBranch)) {\n-      alert('라커 추가 권한이 없습니다.');\n+      toast.error('라커 추가 권한이 없습니다.');\n       return;\n     }\n \n     try {\n       const selectedBranchData = branches.find(b => b.id === selectedBranch);\n       if (!selectedBranchData) {\n-        alert('지점 정보를 찾을 수 없습니다.');\n+        toast.error('지점 정보를 찾을 수 없습니다.');\n         return;\n       }\n \n       const maxNumber = Math.max(...currentBranchLockers.map(l => parseInt(l.number)), 0);\n@@ -649,19 +650,19 @@\n       \n       setIsAddModalOpen(false);\n       setAddCount(1);\n       \n-      alert(`${addCount}개의 라커가 성공적으로 추가되었습니다.`);\n+      toast.success(`${addCount}개의 라커가 성공적으로 추가되었습니다.`);\n     } catch (error) {\n       console.error('라커 추가 실패:', error);\n-      alert('라커 추가 중 오류가 발생했습니다.');\n+      toast.error('라커 추가 중 오류가 발생했습니다.');\n     }\n   };\n \n   const handleToggleMaintenance = async (locker: Locker) => {\n     // 권한 확인\n     if (!canEditBranch(locker.branchId)) {\n-      alert('라커 상태 변경 권한이 없습니다.');\n+      toast.error('라커 상태 변경 권한이 없습니다.');\n       return;\n     }\n \n     try {\n@@ -670,19 +671,19 @@\n       \n       // 라커 목록 새로고침\n       await loadLockers();\n       \n-      alert(`라커 ${locker.number}번이 ${newStatus === 'maintenance' ? '점검중' : '사용가능'} 상태로 변경되었습니다.`);\n+      toast.success(`라커 ${locker.number}번이 ${newStatus === 'maintenance' ? '점검중' : '사용가능'} 상태로 변경되었습니다.`);\n     } catch (error) {\n       console.error('라커 상태 변경 실패:', error);\n-      alert('라커 상태 변경 중 오류가 발생했습니다.');\n+      toast.error('라커 상태 변경 중 오류가 발생했습니다.');\n     }\n   };\n \n   const handleDeleteLocker = async (locker: Locker) => {\n     // 권한 확인\n     if (!canEditBranch(locker.branchId)) {\n-      alert('라커 삭제 권한이 없습니다.');\n+      toast.error('라커 삭제 권한이 없습니다.');\n       return;\n     }\n \n     if (window.confirm(`라커 ${locker.number}번을 삭제하시겠습니까?`)) {\n@@ -691,12 +692,12 @@\n         \n         // 라커 목록 새로고침\n         await loadLockers();\n         \n-        alert(`라커 ${locker.number}번이 삭제되었습니다.`);\n+        toast.success(`라커 ${locker.number}번이 삭제되었습니다.`);\n       } catch (error) {\n         console.error('라커 삭제 실패:', error);\n-        alert('라커 삭제 중 오류가 발생했습니다.');\n+        toast.error('라커 삭제 중 오류가 발생했습니다.');\n       }\n     }\n   };\n \n@@ -750,9 +751,9 @@\n \n   // 라커 배정 처리 함수\n   const handleAssignLocker = async () => {\n     if (!selectedMember || !selectedLockerForAssignment) {\n-      alert('회원과 라커를 선택해주세요.');\n+      toast.warning('회원과 라커를 선택해주세요.');\n       return;\n     }\n \n     try {\n@@ -803,12 +804,12 @@\n       setIsAssignmentModalOpen(false);\n       setSelectedLockerForAssignment(null);\n       setSelectedMember(null);\n       \n-      alert(`라커 ${selectedLockerForAssignment.number}번이 ${selectedMember.name}님에게 배정되었습니다.`);\n+      toast.success(`라커 ${selectedLockerForAssignment.number}번이 ${selectedMember.name}님에게 배정되었습니다.`);\n     } catch (error) {\n       console.error('라커 배정 실패:', error);\n-      alert('라커 배정 중 오류가 발생했습니다.');\n+      toast.error('라커 배정 중 오류가 발생했습니다.');\n     }\n   };\n \n   // 총 금액 계산\n@@ -818,18 +819,18 @@\n \n   const handlePriceSettingOpen = () => {\n     // 권한 확인\n     if (!canEditBranch(selectedBranch)) {\n-      alert('라커 가격 설정 권한이 없습니다.');\n+      toast.error('라커 가격 설정 권한이 없습니다.');\n       return;\n     }\n     setIsPriceSettingModalOpen(true);\n   };\n \n   const handleAddModalOpen = () => {\n     // 권한 확인\n     if (!canEditBranch(selectedBranch)) {\n-      alert('라커 추가 권한이 없습니다.');\n+      toast.error('라커 추가 권한이 없습니다.');\n       return;\n     }\n     setAddCount(1); // 모달 열 때 수량 초기화\n     setIsAddModalOpen(true);\n@@ -841,14 +842,15 @@\n       if (success) {\n         // 지점 데이터를 다시 로드하여 UI 업데이트\n         await loadBranches();\n         setIsPriceSettingModalOpen(false);\n+        toast.success('라커 가격이 성공적으로 설정되었습니다.');\n       } else {\n-        alert('라커 가격 설정에 실패했습니다.');\n+        toast.error('라커 가격 설정에 실패했습니다.');\n       }\n     } catch (error) {\n       console.error('라커 가격 설정 실패:', error);\n-      alert('라커 가격 설정 중 오류가 발생했습니다.');\n+      toast.error('라커 가격 설정 중 오류가 발생했습니다.');\n     }\n   };\n \n   const formatPrice = (price: number): string => {\n"
                },
                {
                    "date": 1761377971127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -584,9 +584,11 @@\n       description: branch.address\n     }));\n   };\n \n-  const currentBranchLockers = lockers.filter(locker => locker.branchId === selectedBranch);\n+  const currentBranchLockers = lockers\n+    .filter(locker => locker.branchId === selectedBranch)\n+    .sort((a, b) => parseInt(a.number) - parseInt(b.number));\n \n   // 상태별 통계 계산\n   const getLockerStats = () => {\n     const total = currentBranchLockers.length;\n"
                },
                {
                    "date": 1761378052182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -411,9 +411,9 @@\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n   padding: 12px;\n   margin: 16px 0;\n-  text-align: center;\n+  text-align: left;\n `;\n \n const AmountText = styled.div`\n   font-size: ${AppTextStyles.body1.fontSize};\n@@ -434,9 +434,9 @@\n   padding: 12px;\n   margin: 16px 0;\n   color: #856404;\n   font-size: 14px;\n-  text-align: center;\n+  text-align: left;\n `;\n \n // 사용자 정보 타입\n interface UserInfo {\n"
                },
                {
                    "date": 1761378168505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,8 +287,9 @@\n   padding-left: 24px;\n   min-width: 0;\n   display: flex;\n   flex-direction: column;\n+  text-align: left;\n `;\n \n const PanelTitle = styled.h3`\n   font-size: ${AppTextStyles.title3.fontSize};\n@@ -1154,9 +1155,9 @@\n                         월 {formatPrice(getCurrentBranchLockerPrice())} × {selectedMonths}개월\n                       </div>\n                     </AmountDisplay>\n \n-                    <div style={{ fontSize: AppTextStyles.body3.fontSize, color: AppColors.onInput1 }}>\n+                    <div style={{ fontSize: AppTextStyles.body3.fontSize, color: AppColors.onInput1, textAlign: 'left' }}>\n                       <div>시작일: {new Date().toLocaleDateString('ko-KR')}</div>\n                       <div>종료일: {new Date(Date.now() + selectedMonths * 30 * 24 * 60 * 60 * 1000).toLocaleDateString('ko-KR')}</div>\n                     </div>\n                   </>\n"
                },
                {
                    "date": 1761378296050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -391,23 +391,8 @@\n   color: ${AppColors.onSurface};\n   margin-bottom: 8px;\n `;\n \n-const Select = styled.select`\n-  width: 100%;\n-  padding: 8px 12px;\n-  border: 1px solid ${AppColors.borderLight};\n-  border-radius: 6px;\n-  background-color: ${AppColors.surface};\n-  color: ${AppColors.onSurface};\n-  font-size: ${AppTextStyles.body2.fontSize};\n-\n-  &:focus {\n-    outline: none;\n-    border-color: ${AppColors.primary};\n-  }\n-`;\n-\n const AmountDisplay = styled.div`\n   background: ${AppColors.surface};\n   border: 1px solid ${AppColors.borderLight};\n   border-radius: 8px;\n@@ -1121,32 +1106,36 @@\n                     </FormGroup>\n \n                     <FormGroup>\n                       <FormLabel>이용 기간</FormLabel>\n-                      <Select\n-                        value={selectedMonths}\n-                        onChange={(e) => setSelectedMonths(parseInt(e.target.value))}\n-                      >\n-                        <option value={1}>1개월</option>\n-                        <option value={2}>2개월</option>\n-                        <option value={3}>3개월</option>\n-                        <option value={4}>4개월</option>\n-                        <option value={5}>5개월</option>\n-                        <option value={6}>6개월</option>\n-                        <option value={12}>12개월</option>\n-                      </Select>\n+                      <CustomDropdown\n+                        value={selectedMonths.toString()}\n+                        onChange={(value: string) => setSelectedMonths(parseInt(value))}\n+                        options={[\n+                          { value: '1', label: '1개월' },\n+                          { value: '2', label: '2개월' },\n+                          { value: '3', label: '3개월' },\n+                          { value: '4', label: '4개월' },\n+                          { value: '5', label: '5개월' },\n+                          { value: '6', label: '6개월' },\n+                          { value: '12', label: '12개월' }\n+                        ]}\n+                        inModal={true}\n+                      />\n                     </FormGroup>\n \n                     <FormGroup>\n                       <FormLabel>결제 방법</FormLabel>\n-                      <Select\n+                      <CustomDropdown\n                         value={paymentMethod}\n-                        onChange={(e) => setPaymentMethod(e.target.value)}\n-                      >\n-                        <option value=\"card\">카드</option>\n-                        <option value=\"cash\">현금</option>\n-                        <option value=\"transfer\">계좌이체</option>\n-                      </Select>\n+                        onChange={(value: string) => setPaymentMethod(value)}\n+                        options={[\n+                          { value: 'card', label: '카드' },\n+                          { value: 'cash', label: '현금' },\n+                          { value: 'transfer', label: '계좌이체' }\n+                        ]}\n+                        inModal={true}\n+                      />\n                     </FormGroup>\n \n                     <AmountDisplay>\n                       <AmountText>총 결제 금액</AmountText>\n"
                },
                {
                    "date": 1761378612875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -688,8 +688,30 @@\n       }\n     }\n   };\n \n+  const handleUnassignLocker = async (locker: Locker) => {\n+    // 권한 확인\n+    if (!canEditBranch(locker.branchId)) {\n+      toast.error('라커 해제 권한이 없습니다.');\n+      return;\n+    }\n+\n+    if (window.confirm(`라커 ${locker.number}번의 배정을 해제하시겠습니까?`)) {\n+      try {\n+        await dbManager.unassignLocker(locker.id);\n+        \n+        // 라커 목록 새로고침\n+        await loadLockers();\n+        \n+        toast.success(`라커 ${locker.number}번의 배정이 해제되었습니다.`);\n+      } catch (error) {\n+        console.error('라커 해제 실패:', error);\n+        toast.error('라커 해제 중 오류가 발생했습니다.');\n+      }\n+    }\n+  };\n+\n   const handleLockerClick = (locker: Locker) => {\n     // 사용 가능한 라커인 경우 배정 모달 열기\n     if (locker.status === 'available' && hasPermission && canEditBranch(locker.branchId)) {\n       setSelectedLockerForAssignment(locker);\n@@ -1192,8 +1214,19 @@\n             <ModalButtons>\n               <SecondaryButton onClick={() => setSelectedLocker(null)}>\n                 닫기\n               </SecondaryButton>\n+              {selectedLocker && hasPermission && canEditBranch(selectedLocker.branchId) && selectedLocker.status === 'occupied' && (\n+                <ActionButton \n+                  onClick={() => {\n+                    handleUnassignLocker(selectedLocker);\n+                    setSelectedLocker(null);\n+                  }}\n+                  style={{ backgroundColor: AppColors.warning }}\n+                >\n+                  라커 해제\n+                </ActionButton>\n+              )}\n               {selectedLocker && hasPermission && canEditBranch(selectedLocker.branchId) && selectedLocker.status !== 'occupied' && (\n                 <ActionButton \n                   onClick={() => {\n                     handleToggleMaintenance(selectedLocker);\n"
                },
                {
                    "date": 1761913200146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,15 +121,17 @@\n `;\n \n const LockerGrid = styled.div`\n   display: grid;\n-  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n+  grid-template-columns: repeat(auto-fill, 140px);\n   gap: 16px;\n   margin-bottom: 32px;\n+  justify-content: start;\n `;\n \n const LockerItem = styled.div<{ $status: 'available' | 'occupied' | 'maintenance' | 'pending' }>`\n-  aspect-ratio: 1;\n+  width: 140px;\n+  height: 140px;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   justify-content: center;\n@@ -165,8 +167,9 @@\n   cursor: pointer;\n   transition: all 0.2s ease;\n   position: relative;\n   padding: 8px;\n+  box-sizing: border-box;\n \n   &:hover {\n     transform: translateY(-2px);\n     box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n@@ -205,8 +208,28 @@\n   font-weight: 600;\n   margin-top: 2px;\n `;\n \n+const LockerUserInfo = styled.div`\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  color: ${AppColors.onSurface};\n+  text-align: center;\n+  margin-top: 4px;\n+  line-height: 1.2;\n+`;\n+\n+const LockerUserName = styled.div`\n+  font-weight: 600;\n+  color: ${AppColors.error};\n+  font-size: ${AppTextStyles.label1.fontSize};\n+`;\n+\n+const LockerPeriod = styled.div`\n+  font-size: ${AppTextStyles.label2.fontSize};\n+  color: ${AppColors.onInput1};\n+  margin-top: 2px;\n+`;\n+\n const PermissionNotice = styled.div`\n   background-color: ${AppColors.warning + '15'};\n   border: 1px solid ${AppColors.warning};\n   border-radius: 8px;\n@@ -951,11 +974,25 @@\n               <LockerNumber>{locker.number}</LockerNumber>\n               <LockerStatus $status={locker.status}>\n                 {getStatusText(locker.status)}\n               </LockerStatus>\n-              <LockerPrice>\n-                {formatPrice(getCurrentBranchLockerPrice())}\n-              </LockerPrice>\n+              {locker.status === 'occupied' && locker.userName ? (\n+                <LockerUserInfo>\n+                  <LockerUserName>{locker.userName}</LockerUserName>\n+                  {locker.endDate && (\n+                    <LockerPeriod>\n+                      ~{new Date(locker.endDate).toLocaleDateString('ko-KR', { \n+                        month: 'short', \n+                        day: 'numeric' \n+                      })}\n+                    </LockerPeriod>\n+                  )}\n+                </LockerUserInfo>\n+              ) : (\n+                <LockerPrice>\n+                  {formatPrice(getCurrentBranchLockerPrice())}\n+                </LockerPrice>\n+              )}\n             </LockerItem>\n           ))}\n         </LockerGrid>\n \n"
                }
            ],
            "date": 1760163881525,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../../../styles/colors';\nimport { AppTextStyles } from '../../../styles/textStyles';\n\nconst Container = styled.div`\n  padding: 24px;\n  background-color: ${AppColors.surface};\n  min-height: 100vh;\n`;\n\nconst Title = styled.h1`\n  font-size: ${AppTextStyles.title1.fontSize};\n  font-weight: 700;\n  color: ${AppColors.onSurface};\n  margin-bottom: 24px;\n`;\n\nconst Content = styled.div`\n  background-color: ${AppColors.background};\n  padding: 32px;\n  border-radius: 12px;\n  border: 1px solid ${AppColors.borderLight};\n`;\n\nconst FilterSection = styled.div`\n  display: flex;\n  gap: 16px;\n  margin-bottom: 24px;\n  align-items: center;\n`;\n\nconst FilterLabel = styled.label`\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onSurface};\n  font-weight: 500;\n`;\n\nconst FilterSelect = styled.select`\n  padding: 8px 12px;\n  border: 1px solid ${AppColors.borderLight};\n  border-radius: 6px;\n  background-color: ${AppColors.surface};\n  color: ${AppColors.onSurface};\n  font-size: ${AppTextStyles.body2.fontSize};\n  cursor: pointer;\n\n  &:focus {\n    outline: none;\n    border-color: ${AppColors.primary};\n  }\n`;\n\nconst LockerGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n  gap: 16px;\n  margin-bottom: 32px;\n`;\n\nconst LockerItem = styled.div<{ $status: 'available' | 'occupied' | 'maintenance' }>`\n  aspect-ratio: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  border: 2px solid ${props => {\n    switch (props.$status) {\n      case 'available':\n        return AppColors.success;\n      case 'occupied':\n        return AppColors.error;\n      case 'maintenance':\n        return AppColors.warning;\n      default:\n        return AppColors.borderLight;\n    }\n  }};\n  border-radius: 8px;\n  background-color: ${props => {\n    switch (props.$status) {\n      case 'available':\n        return AppColors.success + '10';\n      case 'occupied':\n        return AppColors.error + '10';\n      case 'maintenance':\n        return AppColors.warning + '10';\n      default:\n        return AppColors.surface;\n    }\n  }};\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  }\n`;\n\nconst LockerNumber = styled.div`\n  font-size: ${AppTextStyles.body1.fontSize};\n  font-weight: 600;\n  color: ${AppColors.onSurface};\n  margin-bottom: 4px;\n`;\n\nconst LockerStatus = styled.div<{ $status: 'available' | 'occupied' | 'maintenance' }>`\n  font-size: ${AppTextStyles.label2.fontSize};\n  color: ${props => {\n    switch (props.$status) {\n      case 'available':\n        return AppColors.success;\n      case 'occupied':\n        return AppColors.error;\n      case 'maintenance':\n        return AppColors.warning;\n      default:\n        return AppColors.onInput2;\n    }\n  }};\n  font-weight: 500;\n`;\n\nconst StatusLegend = styled.div`\n  display: flex;\n  gap: 24px;\n  align-items: center;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst LegendColor = styled.div<{ $color: string }>`\n  width: 16px;\n  height: 16px;\n  border-radius: 4px;\n  background-color: ${props => props.$color};\n`;\n\nconst LegendText = styled.span`\n  font-size: ${AppTextStyles.body2.fontSize};\n  color: ${AppColors.onSurface};\n`;\n\nconst LockerManagement: React.FC = () => {\n  const [selectedFloor, setSelectedFloor] = useState<string>('1');\n  const [selectedType, setSelectedType] = useState<string>('all');\n\n  // 샘플 락커 데이터\n  const generateLockers = () => {\n    const lockers = [];\n    const totalLockers = selectedFloor === '1' ? 120 : 80;\n    \n    for (let i = 1; i <= totalLockers; i++) {\n      const lockerNumber = `${selectedFloor}${i.toString().padStart(3, '0')}`;\n      let status: 'available' | 'occupied' | 'maintenance';\n      \n      // 임의로 상태 배정\n      const rand = Math.random();\n      if (rand < 0.6) {\n        status = 'occupied';\n      } else if (rand < 0.9) {\n        status = 'available';\n      } else {\n        status = 'maintenance';\n      }\n      \n      lockers.push({\n        number: lockerNumber,\n        status,\n        type: i <= totalLockers / 2 ? 'standard' : 'large'\n      });\n    }\n    \n    return lockers;\n  };\n\n  const lockers = generateLockers();\n\n  const filteredLockers = lockers.filter(locker => {\n    if (selectedType === 'all') return true;\n    return locker.type === selectedType;\n  });\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'available':\n        return '사용가능';\n      case 'occupied':\n        return '사용중';\n      case 'maintenance':\n        return '점검중';\n      default:\n        return '알 수 없음';\n    }\n  };\n\n  const handleLockerClick = (lockerNumber: string, status: string) => {\n    alert(`락커 ${lockerNumber} - 상태: ${getStatusText(status)}`);\n  };\n\n  return (\n    <Container>\n      <Title>락커 관리</Title>\n      <Content>\n        <FilterSection>\n          <FilterLabel>층수:</FilterLabel>\n          <FilterSelect\n            value={selectedFloor}\n            onChange={(e) => setSelectedFloor(e.target.value)}\n          >\n            <option value=\"1\">1층</option>\n            <option value=\"2\">2층</option>\n            <option value=\"3\">3층</option>\n          </FilterSelect>\n\n          <FilterLabel>타입:</FilterLabel>\n          <FilterSelect\n            value={selectedType}\n            onChange={(e) => setSelectedType(e.target.value)}\n          >\n            <option value=\"all\">전체</option>\n            <option value=\"standard\">일반형</option>\n            <option value=\"large\">대형</option>\n          </FilterSelect>\n\n          <StatusLegend>\n            <LegendItem>\n              <LegendColor $color={AppColors.success} />\n              <LegendText>사용가능</LegendText>\n            </LegendItem>\n            <LegendItem>\n              <LegendColor $color={AppColors.error} />\n              <LegendText>사용중</LegendText>\n            </LegendItem>\n            <LegendItem>\n              <LegendColor $color={AppColors.warning} />\n              <LegendText>점검중</LegendText>\n            </LegendItem>\n          </StatusLegend>\n        </FilterSection>\n\n        <LockerGrid>\n          {filteredLockers.map((locker) => (\n            <LockerItem\n              key={locker.number}\n              $status={locker.status}\n              onClick={() => handleLockerClick(locker.number, locker.status)}\n            >\n              <LockerNumber>{locker.number}</LockerNumber>\n              <LockerStatus $status={locker.status}>\n                {getStatusText(locker.status)}\n              </LockerStatus>\n            </LockerItem>\n          ))}\n        </LockerGrid>\n      </Content>\n    </Container>\n  );\n};\n\nexport default LockerManagement;\n"
        }
    ]
}