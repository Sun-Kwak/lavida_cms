{
    "sourceFile": "src/elements/InputElement.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757743166533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757743166533,
            "name": "Commit-0",
            "content": "import styled from 'styled-components';\nimport React from 'react';\nimport { DeviceType } from '../types/device';\nimport { AppColors } from '../styles/colors';\nimport { AppTextStyles } from '../styles/textStyles';\nimport { InputStyles } from '../constants/componentConstants';\n\nexport interface BaseInputElementProps {\n  radius?: string;\n  padding?: string;\n  height?: string;\n  fontSize?: string;\n  paddingRight?: string;\n  $hasSuffix?: boolean;\n  $device: DeviceType;\n  background?: string;\n  autoComplete?: string;\n  $readOnlyBackground?: string; // 추가\n  $readOnlyColor?: string;      // 추가\n  inputMode?: string; // 추가\n  placeholderColor?: string; // 추가\n  focusBorderColor?: string; // 추가\n}\n\n// Textarea 전용 props\ninterface TextareaElementProps extends BaseInputElementProps {\n  rows?: number;\n  maxRows?: number;\n  resize?: 'none' | 'vertical' | 'horizontal' | 'both';\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n}\n\n/** 단일 라인 input 필드 */\nexport const StyledInput = styled.input.withConfig({\n  shouldForwardProp: (prop) => !['placeholderColor', 'focusBorderColor'].includes(prop),\n})<BaseInputElementProps & { \n  border?: string; \n  focusBorderColor?: string;\n  placeholderColor?: string;\n}>`\n  background: ${({ background, readOnly, $readOnlyBackground }) =>\n    readOnly\n      ? $readOnlyBackground || '#f5f5f5'\n      : background || AppColors.surface};\n  color: ${({ readOnly, $readOnlyColor }) =>\n    readOnly\n      ? $readOnlyColor || '#666'\n      : AppColors.onSurface};\n  padding: ${({ padding, $device }) => padding || InputStyles.padding[$device]};\n  padding-right: ${({ paddingRight, $hasSuffix, $device }) =>\n    paddingRight ||\n    ($hasSuffix ? InputStyles.paddingRightWithSuffix[$device] : InputStyles.padding[$device])};\n\n  border: ${({ border }) => border ?? `1px solid ${AppColors.borderLight}`};\n  border-radius: ${({ radius, $device }) => radius || InputStyles.radius[$device]};\n  font-size: ${({ fontSize }) => fontSize || AppTextStyles.body1.fontSize};\n  width: 100%;\n  height: ${({ height, $device }) => height || InputStyles.height[$device]};\n  box-sizing: border-box;\n\n  &:focus {\n    border-color: ${({ focusBorderColor }) => focusBorderColor || AppColors.onSurface};\n    outline: none;\n  }\n\n  /* 자동완성 스타일 제거 - 투명한 배경 사용 */\n  &:-webkit-autofill,\n  &:-webkit-autofill:hover,\n  &:-webkit-autofill:focus,\n  &:-webkit-autofill:active {\n    -webkit-box-shadow: 0 0 0 30px transparent inset !important;\n    -webkit-text-fill-color: ${({ readOnly, $readOnlyColor }) =>\n      readOnly ? $readOnlyColor || '#666' : AppColors.onSurface} !important;\n    transition: background-color 5000s ease-in-out 0s;\n  }\n\n  &::placeholder {\n    color: ${({ placeholderColor }) => placeholderColor || '#cdcdcd'};\n    opacity: 1;\n  }\n\n  ${({ readOnly }) =>\n    readOnly &&\n    `\n    cursor: default;\n    `}\n`;\n\n/** 멀티라인 textarea 필드 (자동 높이 조절) */\nconst RawTextarea = styled.textarea.withConfig({\n  shouldForwardProp: (prop) => !['placeholderColor', 'focusBorderColor'].includes(prop),\n})<BaseInputElementProps & { \n  border?: string; \n  focusBorderColor?: string;\n  placeholderColor?: string;\n}>`\n  background: ${({ background, readOnly, $readOnlyBackground }) =>\n    readOnly\n      ? $readOnlyBackground || '#f5f5f5'\n      : background || AppColors.surface};\n  color: ${({ readOnly, $readOnlyColor }) =>\n    readOnly\n      ? $readOnlyColor || '#666'\n      : AppColors.onSurface};\n  padding: ${({ padding, $device }) => padding || InputStyles.padding[$device]};\n  padding-right: ${({ paddingRight, $hasSuffix, $device }) =>\n    paddingRight ||\n    ($hasSuffix ? InputStyles.paddingRightWithSuffix[$device] : InputStyles.padding[$device])};\n\n  border: ${({ border }) => border ?? `1px solid ${AppColors.borderLight}`};\n  border-radius: ${({ radius, $device }) => radius || InputStyles.radius[$device]};\n  font-size: ${({ fontSize }) => fontSize || AppTextStyles.body1.fontSize};\n  width: 100%;\n  height: ${({ height }) => height || 'auto'};\n  min-height: ${({ height }) => height || '80px'};\n  resize: none;\n  overflow: hidden;\n  overflow-y: auto;\n  line-height: 1.5;\n  box-sizing: border-box;\n\n  /* 스크롤바가 border-radius 영역을 벗어나지 않도록 설정 */\n  &::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: transparent;\n    border-radius: ${({ radius, $device }) => radius || InputStyles.radius[$device]};\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: #ccc;\n    border-radius: 4px;\n  }\n\n  &::-webkit-scrollbar-thumb:hover {\n    background: #999;\n  }\n\n  white-space: pre-wrap;\n  word-break: break-word;\n\n  &:focus {\n    border-color: ${({ focusBorderColor }) => focusBorderColor || AppColors.onSurface};\n    outline: none;\n  }\n\n  &::placeholder {\n    color: ${({ placeholderColor }) => placeholderColor || AppColors.iconDisabled};\n  }\n\n  ${({ readOnly }) =>\n    readOnly &&\n    `\n    cursor: default;\n  `}\n`;\n\n/** 고정 높이 Textarea 컴포넌트 */\nexport const StyledTextarea: React.FC<TextareaElementProps> = ({\n  value,\n  onChange,\n  ...rest\n}) => {\n  return (\n    <RawTextarea\n      value={value}\n      onChange={onChange}\n      {...rest}\n    />\n  );\n};\n\n"
        }
    ]
}