{
    "sourceFile": "src/customComponents/AppDropdownField.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757743588517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757743588517,
            "name": "Commit-0",
            "content": "'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { KeyboardArrowDown } from '@mui/icons-material';\nimport { AppColors } from '../styles/colors';\nimport { DeviceType } from '../types/device';\nimport { useDevice } from '../context/DeviceContext';\nimport { InputStyles } from '../constants/componentConstants';\n\nconst Container = styled.div<{ $device: DeviceType }>`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: ${({ $device }) => InputStyles.containerPadding[$device]};\n  align-items: flex-start;\n  position: relative;\n`;\n\nconst OutlinedLabel = styled.label<{ \n  $device: DeviceType; \n  $hasValue: boolean; \n  $isFocused: boolean;\n  $labelBackgroundColor?: string;\n  $labelTextColor?: string;\n  $errorLabelColor?: string;\n  $readOnlyLabelColor?: string;\n  $hasError?: boolean;\n  $isReadOnly?: boolean;\n}>`\n  position: absolute;\n  left: 12px;\n  top: ${({ $hasValue, $isFocused, $hasError }) => ($hasValue || $isFocused || $hasError ? '-8px' : '50%')};\n  transform: ${({ $hasValue, $isFocused, $hasError }) => ($hasValue || $isFocused || $hasError ? 'translateY(0)' : 'translateY(-50%)')};\n  background-color: ${({ $hasValue, $isFocused, $hasError, $labelBackgroundColor }) => \n    ($hasValue || $isFocused || $hasError) ? ($labelBackgroundColor || AppColors.input) : 'transparent'};\n  padding: 0 4px;\n  font-size: ${({ $hasValue, $isFocused, $hasError, $device }) => {\n    const baseSize = $device === 'mobile' ? '14px' : '16px';\n    return ($hasValue || $isFocused || $hasError) ? '12px' : baseSize;\n  }};\n  color: ${({ $hasError, $isReadOnly, $labelTextColor, $errorLabelColor, $readOnlyLabelColor }) => {\n    if ($hasError && $errorLabelColor) return $errorLabelColor;\n    if ($isReadOnly && $readOnlyLabelColor) return $readOnlyLabelColor;\n    if ($labelTextColor) return $labelTextColor;\n    return AppColors.onInput2;\n  }};\n  transition: all 0.2s ease-in-out;\n  cursor: pointer;\n  z-index: 1;\n  pointer-events: none;\n`;\n\nconst DropdownContainer = styled.div<{\n  $radius?: string;\n  $height?: string;\n  $borderColor?: string;\n  $focusBorderColor?: string;\n  $errorBorderColor?: string;\n  $readOnlyBorderColor?: string;\n  $hasError?: boolean;\n  $isReadOnly?: boolean;\n  $isFocused?: boolean;\n  $background?: string;\n  $readOnlyBackground?: string;\n}>`\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: ${({ $height }) => $height || '48px'};\n  border-radius: ${({ $radius }) => $radius || '12px'};\n  border: ${({ $hasError, $isReadOnly, $isFocused, $errorBorderColor, $readOnlyBorderColor, $focusBorderColor, $borderColor }) => {\n    if ($hasError && $errorBorderColor) return `1px solid ${$errorBorderColor}`;\n    if ($isReadOnly && $readOnlyBorderColor) return `1px solid ${$readOnlyBorderColor}`;\n    if ($isFocused && $focusBorderColor) return `1px solid ${$focusBorderColor}`;\n    if ($borderColor) return `1px solid ${$borderColor}`;\n    return `1px solid ${AppColors.onInput1}`;\n  }};\n  background-color: ${({ $isReadOnly, $background, $readOnlyBackground }) => {\n    if ($isReadOnly && $readOnlyBackground) return $readOnlyBackground;\n    if ($background) return $background;\n    return AppColors.input;\n  }};\n  cursor: ${({ $isReadOnly }) => $isReadOnly ? 'default' : 'pointer'};\n  transition: all 0.2s ease-in-out;\n  box-sizing: border-box;\n`;\n\nconst SelectedValue = styled.div<{\n  $padding?: string;\n  $placeholderColor?: string;\n  $inputTextColor?: string;\n  $readOnlyTextColor?: string;\n  $isReadOnly?: boolean;\n  $isPlaceholder?: boolean;\n}>`\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  width: 100%;\n  height: 100%;\n  padding: ${({ $padding }) => $padding || '16px'};\n  padding-right: 40px; /* 화살표 아이콘 공간 확보 */\n  font-size: 16px;\n  line-height: 1;\n  color: ${({ $isPlaceholder, $isReadOnly, $placeholderColor, $inputTextColor, $readOnlyTextColor }) => {\n    if ($isPlaceholder && $placeholderColor) return $placeholderColor;\n    if ($isReadOnly && $readOnlyTextColor) return $readOnlyTextColor;\n    if ($inputTextColor) return $inputTextColor;\n    return $isPlaceholder ? AppColors.onInput1 : AppColors.onInput3;\n  }};\n  user-select: none;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  box-sizing: border-box;\n`;\n\nconst ArrowIcon = styled.div<{\n  $isOpen: boolean;\n  $isReadOnly?: boolean;\n}>`\n  position: absolute;\n  right: 12px;\n  top: 50%;\n  transform: translateY(-50%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: ${({ $isReadOnly }) => $isReadOnly ? AppColors.onInput5 : AppColors.onInput2};\n  transition: transform 0.2s ease-in-out;\n  pointer-events: none;\n  \n  ${({ $isOpen }) => $isOpen && 'transform: translateY(-50%) rotate(180deg);'}\n`;\n\nconst DropdownList = styled.div<{\n  $isOpen: boolean;\n  $radius?: string;\n  $maxHeight?: string;\n}>`\n  position: absolute;\n  top: calc(100% + 4px);\n  left: 0;\n  right: 0;\n  background-color: ${AppColors.input};\n  border: 1px solid ${AppColors.onInput1};\n  border-radius: ${({ $radius }) => $radius || '12px'};\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n  max-height: ${({ $maxHeight }) => $maxHeight || '200px'};\n  overflow-y: auto;\n  opacity: ${({ $isOpen }) => $isOpen ? 1 : 0};\n  visibility: ${({ $isOpen }) => $isOpen ? 'visible' : 'hidden'};\n  transform: ${({ $isOpen }) => $isOpen ? 'translateY(0)' : 'translateY(-8px)'};\n  transition: all 0.2s ease-in-out;\n`;\n\nconst DropdownItem = styled.div<{\n  $isSelected?: boolean;\n  $isHovered?: boolean;\n}>`\n  padding: 12px 16px;\n  font-size: 16px;\n  color: ${({ $isSelected }) => $isSelected ? AppColors.onInput3 : AppColors.onInput2};\n  background-color: ${({ $isHovered, $isSelected }) => {\n    if ($isSelected) return AppColors.onInput1 + '20'; // 20% opacity\n    if ($isHovered) return AppColors.onInput1 + '10'; // 10% opacity\n    return 'transparent';\n  }};\n  cursor: pointer;\n  transition: background-color 0.15s ease-in-out;\n  \n  &:hover {\n    background-color: ${AppColors.onInput1}20;\n  }\n  \n  &:first-child {\n    border-top-left-radius: 12px;\n    border-top-right-radius: 12px;\n  }\n  \n  &:last-child {\n    border-bottom-left-radius: 12px;\n    border-bottom-right-radius: 12px;\n  }\n  \n  &:only-child {\n    border-radius: 12px;\n  }\n`;\n\nconst ErrorText = styled.span<{ $errorColor?: string }>`\n  color: ${({ $errorColor }) => $errorColor || AppColors.onInput4};\n  font-size: 12px;\n  margin-top: 4px;\n  margin-left: 4px;\n  display: block;\n  text-align: left;\n  width: 100%;\n`;\n\nconst DividerWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  /* padding: 8px 16px; */\n`;\n\nconst SimpleDivider = styled.div<{ $color?: string }>`\n  width: 100%;\n  height: 1px;\n  background-color: ${({ $color }) => $color || AppColors.onInput1};\n`;\n\nexport interface DropdownOption {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\n// 다국어 텍스트 객체\nconst dropdownTexts = {\n  ko: {\n    defaultPlaceholder: '선택해주세요'\n  },\n  en: {\n    defaultPlaceholder: 'Please select'\n  }\n};\n\nexport interface AppDropdownFieldProps {\n  value: string;\n  onChange: (value: string) => void;\n  options: DropdownOption[];\n  placeholder?: string;\n  label?: string;\n  errorMessage?: string;\n  readOnly?: boolean;\n  disabled?: boolean;\n  maxHeight?: string;\n  language?: 'ko' | 'en'; // 언어 설정\n  \n  // AppTextField와 동일한 스타일링 props\n  radius?: string;\n  height?: string;\n  padding?: string;\n  borderColor?: string;\n  focusBorderColor?: string;\n  placeholderColor?: string;\n  labelBackgroundColor?: string;\n  labelTextColor?: string;\n  inputTextColor?: string;\n  errorBorderColor?: string;\n  errorLabelColor?: string;\n  readOnlyBorderColor?: string;\n  readOnlyLabelColor?: string;\n  readOnlyTextColor?: string;\n  background?: string;\n  readOnlyBackground?: string;\n}\n\nexport const AppDropdownField: React.FC<AppDropdownFieldProps> = ({\n  value,\n  onChange,\n  options,\n  placeholder,\n  label,\n  errorMessage,\n  readOnly = false,\n  disabled = false,\n  maxHeight,\n  language = 'ko',\n  \n  // 스타일링 props - AppTextField와 동일한 기본값\n  radius = \"12px\",\n  height = \"48px\",\n  padding = \"16px\",\n  borderColor = AppColors.onInput1,\n  focusBorderColor = AppColors.onInput1,\n  placeholderColor = AppColors.onInput1,\n  labelBackgroundColor = AppColors.input,\n  labelTextColor = AppColors.onInput2,\n  inputTextColor = AppColors.onInput3,\n  errorBorderColor = AppColors.onInput4,\n  errorLabelColor = AppColors.onInput4,\n  readOnlyBorderColor = AppColors.onInput5,\n  readOnlyLabelColor = AppColors.onInput5,\n  readOnlyTextColor = AppColors.onInput5,\n  background = AppColors.input,\n  readOnlyBackground = AppColors.input,\n}) => {\n  const texts = dropdownTexts[language];\n  const finalPlaceholder = placeholder || texts.defaultPlaceholder;\n  const device = useDevice();\n  const [isOpen, setIsOpen] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  \n  const selectedOption = options.find(option => option.value === value);\n  const displayValue = selectedOption?.label || '';\n  const isPlaceholder = !selectedOption;\n  \n  // 외부 클릭 감지하여 드롭다운 닫기\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n        setIsFocused(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const handleToggle = () => {\n    if (readOnly || disabled) return;\n    \n    setIsOpen(!isOpen);\n    setIsFocused(!isOpen); // 열릴 때 focused, 닫힐 때 unfocused\n  };\n\n  const handleSelect = (optionValue: string) => {\n    if (readOnly || disabled) return;\n    \n    onChange(optionValue);\n    setIsOpen(false);\n    setIsFocused(false);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (readOnly || disabled) return;\n    \n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      handleToggle();\n    } else if (event.key === 'Escape') {\n      setIsOpen(false);\n      setIsFocused(false);\n    }\n  };\n\n  return (\n    <Container ref={containerRef} $device={device}>\n      {label && (\n        <OutlinedLabel\n          $device={device}\n          $hasValue={!!value}\n          $isFocused={isFocused}\n          $labelBackgroundColor={labelBackgroundColor}\n          $labelTextColor={labelTextColor}\n          $errorLabelColor={errorLabelColor}\n          $readOnlyLabelColor={readOnlyLabelColor}\n          $hasError={!!errorMessage}\n          $isReadOnly={readOnly}\n        >\n          {label}\n        </OutlinedLabel>\n      )}\n      \n      <DropdownContainer\n        $radius={radius}\n        $height={height}\n        $borderColor={borderColor}\n        $focusBorderColor={errorMessage ? errorBorderColor : focusBorderColor}\n        $errorBorderColor={errorBorderColor}\n        $readOnlyBorderColor={readOnlyBorderColor}\n        $hasError={!!errorMessage}\n        $isReadOnly={readOnly}\n        $isFocused={isFocused}\n        $background={background}\n        $readOnlyBackground={readOnlyBackground}\n        onClick={handleToggle}\n        onKeyDown={handleKeyDown}\n        tabIndex={readOnly || disabled ? -1 : 0}\n        role=\"combobox\"\n        aria-expanded={isOpen}\n        aria-haspopup=\"listbox\"\n      >\n        <SelectedValue\n          $padding={padding}\n          $placeholderColor={placeholderColor}\n          $inputTextColor={inputTextColor}\n          $readOnlyTextColor={readOnlyTextColor}\n          $isReadOnly={readOnly}\n          $isPlaceholder={isPlaceholder}\n        >\n          {displayValue || (\n            // outlined 라벨이 있고, 라벨이 dropdown 내부에 있을 때는 placeholder 숨김\n            label && !value && !isFocused && !errorMessage ? '' : finalPlaceholder\n          )}\n        </SelectedValue>\n        \n        <ArrowIcon $isOpen={isOpen} $isReadOnly={readOnly}>\n          <KeyboardArrowDown />\n        </ArrowIcon>\n        \n        <DropdownList\n          $isOpen={isOpen && !readOnly && !disabled}\n          $radius={radius}\n          $maxHeight={maxHeight}\n          role=\"listbox\"\n        >\n          {options.map((option, index) => (\n            <React.Fragment key={option.value}>\n              <DropdownItem\n                $isSelected={option.value === value}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleSelect(option.value);\n                }}\n                role=\"option\"\n                aria-selected={option.value === value}\n              >\n                {option.label}\n              </DropdownItem>\n              {/* 마지막 옵션이 아닌 경우에만 Divider 추가 */}\n              {index < options.length - 1 && (\n                <DividerWrapper>\n                  <SimpleDivider $color={AppColors.onInput1} />\n                </DividerWrapper>\n              )}\n            </React.Fragment>\n          ))}\n        </DropdownList>\n      </DropdownContainer>\n      \n      {errorMessage && (\n        <ErrorText $errorColor={errorBorderColor}>\n          {errorMessage}\n        </ErrorText>\n      )}\n    </Container>\n  );\n};\n"
        }
    ]
}