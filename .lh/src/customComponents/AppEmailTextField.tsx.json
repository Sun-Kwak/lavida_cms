{
    "sourceFile": "src/customComponents/AppEmailTextField.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757743589841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757743589841,
            "name": "Commit-0",
            "content": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { AppTextField } from './AppTextField';\nimport { AuthButton } from './AuthButton';\n\n// 다국어 텍스트 객체\nconst texts = {\n  ko: {\n    email: \"이메일\",\n    placeholder: \"이메일을 입력해주세요\",\n    authButton: \"인증요청\",\n    errorMessage: \"올바른 이메일 형식을 입력해주세요\",\n    validMessage: \"✓ 유효한 이메일입니다\"\n  },\n  en: {\n    email: \"Email\",\n    placeholder: \"Please enter your email\",\n    authButton: \"Request Auth\",\n    errorMessage: \"Please enter a valid email format\",\n    validMessage: \"✓ Valid email\"\n  },\n};\n\nexport interface AppEmailTextFieldProps {\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n  label?: string;\n  placeholder?: string;\n  errorMessage?: string;\n  readOnly?: boolean;\n  \n  // 이메일 validation 관련\n  onValidationChange?: (isValid: boolean) => void;\n  showValidationMessage?: boolean;\n  \n  // 인증 버튼 관련\n  showAuthButton?: boolean;\n  onAuthRequest?: () => void;\n  authButtonText?: string;\n  \n  // 기타 TextField props\n  autoComplete?: string;\n  autoFocus?: boolean;\n  \n  // 언어 설정\n  language?: 'ko' | 'en';\n}\n\nexport const AppEmailTextField: React.FC<AppEmailTextFieldProps> = ({\n  value,\n  onChange,\n  label,\n  placeholder,\n  errorMessage,\n  readOnly = false,\n  onValidationChange,\n  showValidationMessage = true,\n  showAuthButton = false,\n  onAuthRequest,\n  authButtonText,\n  autoComplete = \"email\",\n  autoFocus = false,\n  language = 'ko',\n}) => {\n  const [internalError, setInternalError] = useState<string>('');\n\n  const t = texts[language];\n  \n  // 기본값 설정 (언어에 따라)\n  const displayLabel = label || t.email;\n  const displayPlaceholder = placeholder || t.placeholder;\n  const displayAuthButtonText = authButtonText || t.authButton;\n\n  // 이메일 validation\n  const validateEmail = (email: string) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  const isEmailValid = validateEmail(value);\n\n  // validation 상태 변경 시 콜백 호출\n  useEffect(() => {\n    if (onValidationChange) {\n      onValidationChange(isEmailValid);\n    }\n  }, [isEmailValid, onValidationChange]);\n\n  // 내부 에러 메시지 처리\n  useEffect(() => {\n    if (value && !isEmailValid && showValidationMessage) {\n      setInternalError(t.errorMessage);\n    } else {\n      setInternalError('');\n    }\n  }, [value, isEmailValid, showValidationMessage, t.errorMessage]);\n\n  // 한글 입력 방지 처리\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const inputValue = e.target.value;\n    // 한글 제거 (한글 유니코드 범위: \\u3130-\\u318F, \\uAC00-\\uD7AF)\n    const filteredValue = inputValue.replace(/[\\u3130-\\u318F\\uAC00-\\uD7AF]/g, '');\n    \n    // 필터링된 값으로 이벤트 객체 수정\n    e.target.value = filteredValue;\n    onChange(e);\n  };\n\n  // 외부에서 전달된 errorMessage가 우선\n  const displayErrorMessage = errorMessage || internalError;\n\n  const rightElement = showAuthButton ? (\n    <AuthButton \n      isActive={isEmailValid && !readOnly}\n      onClick={onAuthRequest}\n    >\n      {displayAuthButtonText}\n    </AuthButton>\n  ) : undefined;\n\n  // const validationMessage = showValidationMessage && value && !displayErrorMessage && isEmailValid ? (\n  //   <div style={{ \n  //     fontSize: '12px', \n  //     color: AppColors.onInput2, \n  //     marginTop: '4px',\n  //     paddingLeft: '16px',\n  //     textAlign: 'left'\n  //   }}>\n  //     {t.validMessage}\n  //   </div>\n  // ) : null;\n\n  return (\n    <div>\n      <AppTextField\n        value={value}\n        onChange={handleChange}\n        label={displayLabel}\n        placeholder={displayPlaceholder}\n        errorMessage={displayErrorMessage}\n        readOnly={readOnly}\n        rightElement={rightElement}\n        autoComplete={autoComplete}\n        autoFocus={autoFocus}\n        type=\"email\"\n        inputMode=\"email\"\n      />\n      {/* {validationMessage} */}\n    </div>\n  );\n};\n"
        }
    ]
}