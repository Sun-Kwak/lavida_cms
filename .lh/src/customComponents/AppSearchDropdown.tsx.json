{
    "sourceFile": "src/customComponents/AppSearchDropdown.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1761911845245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761911975019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,8 +333,16 @@\n       onSearch(internalSearchTerm.trim());\n     }\n   };\n \n+  // Enter 키 핸들러\n+  const handleKeyDown = (e: React.KeyboardEvent) => {\n+    if (e.key === 'Enter') {\n+      e.preventDefault();\n+      handleSearch();\n+    }\n+  };\n+\n   // 검색 버튼 클릭\n   const handleSearchButtonClick = (e: React.MouseEvent) => {\n     e.preventDefault();\n     e.stopPropagation();\n@@ -436,9 +444,9 @@\n         isOpen={isModalOpen} \n         onClose={closeModal}\n         header=\"직원 검색\"\n         body={\n-          <>\n+          <div onKeyDown={handleKeyDown}>\n             <SearchContainer>\n               <AppTextField\n                 value={internalSearchTerm}\n                 onChange={handleSearchTermChange}\n@@ -472,9 +480,9 @@\n                   {renderResults()}\n                 </ResultsList>\n               </CustomSearchContainer>\n             )}\n-          </>\n+          </div>\n         }\n         width=\"500px\"\n       />\n     </>\n"
                },
                {
                    "date": 1761912042217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,9 @@\n   border: 1px solid ${AppColors.onInput1};\n   border-radius: 12px;\n   max-height: 400px;\n   overflow: hidden;\n+  margin-bottom: 20px;\n `;\n \n const ResultsList = styled.div`\n   max-height: 350px;\n"
                },
                {
                    "date": 1761912583487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import React, { useState, ReactNode } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '../styles/colors';\n-import { AppTextField } from './AppTextField';\n import Modal from '../components/Modal';\n \n // 스타일 컴포넌트들\n const ClickableInputContainer = styled.div`\n@@ -423,15 +422,39 @@\n \n   return (\n     <>\n       <ClickableInputContainer onClick={openModal}>\n-        <AppTextField\n+        <input\n           value={selectedValue}\n           onChange={() => {}}\n           placeholder={finalPlaceholder}\n-          errorMessage={finalErrorMessage}\n           readOnly={true}\n+          disabled={disabled}\n+          style={{\n+            width: '100%',\n+            height: '48px',\n+            padding: '0 48px 0 16px',\n+            border: `1px solid ${finalErrorMessage ? '#dc3545' : '#ddd'}`,\n+            borderRadius: '12px',\n+            fontSize: '14px',\n+            boxSizing: 'border-box',\n+            cursor: disabled ? 'not-allowed' : 'pointer',\n+            backgroundColor: disabled ? '#f5f5f5' : 'white',\n+            color: disabled ? '#999' : '#333',\n+            outline: 'none',\n+            transition: 'all 0.2s ease'\n+          }}\n         />\n+        {finalErrorMessage && (\n+          <div style={{ \n+            color: '#dc3545', \n+            fontSize: '12px', \n+            marginTop: '4px',\n+            marginLeft: '4px'\n+          }}>\n+            {finalErrorMessage}\n+          </div>\n+        )}\n         {selectedValue && !disabled && (\n           <ClearButton onClick={handleClear} title={texts.clearButton}>\n             <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n               <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n@@ -447,13 +470,24 @@\n         header=\"직원 검색\"\n         body={\n           <div onKeyDown={handleKeyDown}>\n             <SearchContainer>\n-              <AppTextField\n+              <input\n                 value={internalSearchTerm}\n                 onChange={handleSearchTermChange}\n                 placeholder={finalPlaceholder}\n                 autoFocus={true}\n+                style={{\n+                  width: '100%',\n+                  height: '48px',\n+                  padding: '0 48px 0 16px',\n+                  border: '1px solid #ddd',\n+                  borderRadius: '12px',\n+                  fontSize: '14px',\n+                  boxSizing: 'border-box',\n+                  outline: 'none',\n+                  transition: 'all 0.2s ease'\n+                }}\n               />\n               <SearchButton\n                 onClick={handleSearchButtonClick}\n                 disabled={!internalSearchTerm.trim()}\n"
                },
                {
                    "date": 1761912890129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,8 +241,9 @@\n   getItemLabel?: (item: SearchResultItem) => string;\n   getItemId?: (item: SearchResultItem) => string | number;\n   autoFocus?: boolean;\n   language?: 'ko' | 'en';\n+  header?: string; // 모달 헤더 제목\n   \n   // Validation 관련\n   isValidSelection?: boolean; // 현재 선택된 값이 유효한지 여부\n   validationErrorMessage?: string; // validation 실패 시 에러 메시지\n@@ -267,8 +268,9 @@\n   getItemLabel,\n   getItemId,\n   autoFocus = false,\n   language = 'ko',\n+  header = '검색', // 기본값 설정\n   \n   // Validation 관련\n   isValidSelection = true,\n   validationErrorMessage,\n@@ -466,9 +468,9 @@\n \n       <Modal \n         isOpen={isModalOpen} \n         onClose={closeModal}\n-        header=\"직원 검색\"\n+        header={header}\n         body={\n           <div onKeyDown={handleKeyDown}>\n             <SearchContainer>\n               <input\n"
                }
            ],
            "date": 1761911845245,
            "name": "Commit-0",
            "content": "import React, { useState, ReactNode } from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '../styles/colors';\nimport { AppTextField } from './AppTextField';\nimport Modal from '../components/Modal';\n\n// 스타일 컴포넌트들\nconst ClickableInputContainer = styled.div`\n  position: relative;\n  cursor: pointer;\n  \n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  margin-bottom: 16px;\n`;\n\nconst SearchButton = styled.button`\n  position: absolute;\n  right: 12px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: none;\n  border: none;\n  color: ${AppColors.onInput2};\n  cursor: pointer;\n  padding: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    color: ${AppColors.primary};\n    background-color: ${AppColors.onInput1};\n  }\n  \n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.5;\n  }\n`;\n\nconst CustomSearchContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background: white;\n  border: 1px solid ${AppColors.onInput1};\n  border-radius: 12px;\n  max-height: 400px;\n  overflow: hidden;\n`;\n\nconst ResultsList = styled.div`\n  max-height: 350px;\n  overflow-y: auto;\n  padding: 8px;\n  \n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n  \n  &::-webkit-scrollbar-track {\n    background: ${AppColors.onInput1};\n    border-radius: 3px;\n  }\n  \n  &::-webkit-scrollbar-thumb {\n    background: ${AppColors.onInput2};\n    border-radius: 3px;\n  }\n  \n  &::-webkit-scrollbar-thumb:hover {\n    background: ${AppColors.onInput3};\n  }\n`;\n\nconst ResultItem = styled.div`\n  padding: 12px;\n  cursor: pointer;\n  border-radius: 8px;\n  margin-bottom: 4px;\n  transition: all 0.2s ease;\n  border: 1px solid transparent;\n  \n  &:hover {\n    background-color: ${AppColors.onInput1};\n    border-color: ${AppColors.onInput2};\n  }\n  \n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst StringItem = styled.div`\n  color: ${AppColors.onInput3};\n  font-size: 14px;\n  line-height: 1.4;\n`;\n\nconst CardItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  text-align: left;\n`;\n\nconst CardTitle = styled.div`\n  font-weight: 600;\n  color: ${AppColors.onInput3};\n  font-size: 14px;\n  text-align: left;\n`;\n\nconst CardSubtitle = styled.div`\n  font-size: 12px;\n  color: ${AppColors.onInput2};\n  text-align: left;\n`;\n\nconst CardDescription = styled.div`\n  font-size: 12px;\n  color: ${AppColors.onInput2};\n  line-height: 1.3;\n`;\n\nconst EmptyState = styled.div`\n  padding: 20px;\n  text-align: center;\n  color: ${AppColors.onInput2};\n  font-size: 14px;\n`;\n\nconst LoadingState = styled.div`\n  padding: 20px;\n  text-align: center;\n  color: ${AppColors.onInput2};\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n`;\n\nconst LoadingSpinner = styled.div`\n  width: 16px;\n  height: 16px;\n  border: 2px solid ${AppColors.onInput1};\n  border-top: 2px solid ${AppColors.primary};\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  \n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n\nconst ClearButton = styled.button`\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: none;\n  border: none;\n  color: ${AppColors.onInput2};\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  &:hover {\n    color: ${AppColors.primary};\n    background-color: ${AppColors.onInput1};\n  }\n`;\n\nexport interface SearchCardItem {\n  id: string | number;\n  title: string;\n  subtitle?: string;\n  description?: string;\n  data?: any;\n}\n\nexport interface SearchStringItem {\n  id: string | number;\n  label: string;\n  data?: any;\n}\n\nexport type SearchResultItem = SearchCardItem | SearchStringItem | string;\n\n// 다국어 텍스트 객체\nconst searchDropdownTexts = {\n  ko: {\n    defaultLabel: '검색',\n    defaultPlaceholder: '검색어를 입력하세요',\n    noResults: '검색 결과가 없습니다.',\n    searching: '검색 중...',\n    validationError: '유효한 검색 결과를 선택해주세요.',\n    searchButton: '검색',\n    clearButton: '지우기',\n    selectItem: '항목 선택'\n  },\n  en: {\n    defaultLabel: 'Search',\n    defaultPlaceholder: 'Enter search term',\n    noResults: 'No search results found.',\n    searching: 'Searching...',\n    validationError: 'Please select a valid search result.',\n    searchButton: 'Search',\n    clearButton: 'Clear',\n    selectItem: 'Select item'\n  }\n};\n\nexport interface AppSearchDropdownProps {\n  selectedValue?: string;\n  searchTerm?: string;\n  onSearchTermChange?: (searchTerm: string) => void;\n  onSearch: (searchTerm: string) => void | Promise<void>;\n  onSelectItem?: (item: SearchResultItem) => void;\n  onClear?: () => void;\n  results: SearchResultItem[];\n  label?: string;\n  placeholder?: string;\n  errorMessage?: string;\n  disabled?: boolean;\n  loading?: boolean;\n  emptyMessage?: string;\n  renderItem?: (item: SearchResultItem, index: number) => ReactNode;\n  getItemLabel?: (item: SearchResultItem) => string;\n  getItemId?: (item: SearchResultItem) => string | number;\n  autoFocus?: boolean;\n  language?: 'ko' | 'en';\n  \n  // Validation 관련\n  isValidSelection?: boolean; // 현재 선택된 값이 유효한지 여부\n  validationErrorMessage?: string; // validation 실패 시 에러 메시지\n  showValidationError?: boolean; // validation 에러를 표시할지 여부\n}\n\nexport const AppSearchDropdown: React.FC<AppSearchDropdownProps> = ({\n  selectedValue = '',\n  searchTerm = '',\n  onSearchTermChange,\n  onSearch,\n  onSelectItem,\n  onClear,\n  results = [],\n  label,\n  placeholder,\n  errorMessage,\n  disabled = false,\n  loading = false,\n  emptyMessage,\n  renderItem,\n  getItemLabel,\n  getItemId,\n  autoFocus = false,\n  language = 'ko',\n  \n  // Validation 관련\n  isValidSelection = true,\n  validationErrorMessage,\n  showValidationError = false,\n}) => {\n  const texts = searchDropdownTexts[language];\n  \n  // 다국어 적용된 기본값들\n  const finalPlaceholder = placeholder || texts.defaultPlaceholder;\n  const finalEmptyMessage = emptyMessage || texts.noResults;\n  const finalValidationErrorMessage = validationErrorMessage || texts.validationError;\n  \n  // 상태 관리\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [internalSearchTerm, setInternalSearchTerm] = useState('');\n  const [hasSearched, setHasSearched] = useState(false);\n\n  // 기본 함수들\n  const defaultGetItemId = (item: SearchResultItem): string | number => {\n    if (typeof item === 'string') return item;\n    if ('id' in item) return item.id;\n    return String(item);\n  };\n\n  const finalGetItemId = getItemId || defaultGetItemId;\n\n  // 최종 에러 메시지 결정\n  const finalErrorMessage = showValidationError && !isValidSelection \n    ? finalValidationErrorMessage\n    : errorMessage;\n\n  // 모달 열기\n  const openModal = () => {\n    if (disabled) return;\n    setIsModalOpen(true);\n    setInternalSearchTerm('');\n    setHasSearched(false);\n  };\n\n  // 모달 닫기\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setInternalSearchTerm('');\n    setHasSearched(false);\n  };\n\n  // 검색어 변경 핸들러\n  const handleSearchTermChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const newSearchTerm = e.target.value;\n    setInternalSearchTerm(newSearchTerm);\n    setHasSearched(false);\n    \n    if (onSearchTermChange) {\n      onSearchTermChange(newSearchTerm);\n    }\n  };\n\n  // 검색 실행\n  const handleSearch = () => {\n    if (internalSearchTerm.trim()) {\n      setHasSearched(true);\n      onSearch(internalSearchTerm.trim());\n    }\n  };\n\n  // 검색 버튼 클릭\n  const handleSearchButtonClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    handleSearch();\n  };\n\n  // 아이템 선택\n  const handleItemSelect = (item: SearchResultItem) => {\n    closeModal();\n    \n    if (onSelectItem) {\n      onSelectItem(item);\n    }\n  };\n\n  // 선택 해제\n  const handleClear = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onClear) {\n      onClear();\n    }\n  };\n\n  // 기본 아이템 렌더링\n  const defaultRenderItem = (item: SearchResultItem, index: number) => {\n    if (typeof item === 'string') {\n      return <StringItem>{item}</StringItem>;\n    }\n    \n    if ('title' in item) {\n      return (\n        <CardItem>\n          <CardTitle>{item.title}</CardTitle>\n          {item.subtitle && <CardSubtitle>{item.subtitle}</CardSubtitle>}\n          {item.description && <CardDescription>{item.description}</CardDescription>}\n        </CardItem>\n      );\n    }\n    \n    if ('label' in item) {\n      return <StringItem>{item.label}</StringItem>;\n    }\n    \n    return <StringItem>{String(item)}</StringItem>;\n  };\n\n  const finalRenderItem = renderItem || defaultRenderItem;\n\n  // 결과 상태 렌더링\n  const renderResults = () => {\n    if (loading) {\n      return (\n        <LoadingState>\n          <LoadingSpinner />\n          {texts.searching}\n        </LoadingState>\n      );\n    }\n\n    if (results.length === 0) {\n      return <EmptyState>{finalEmptyMessage}</EmptyState>;\n    }\n\n    return results.map((item, index) => {\n      const itemId = finalGetItemId(item);\n      \n      return (\n        <ResultItem\n          key={`${itemId}-${index}`}\n          onClick={() => handleItemSelect(item)}\n        >\n          {finalRenderItem(item, index)}\n        </ResultItem>\n      );\n    });\n  };\n\n  return (\n    <>\n      <ClickableInputContainer onClick={openModal}>\n        <AppTextField\n          value={selectedValue}\n          onChange={() => {}}\n          placeholder={finalPlaceholder}\n          errorMessage={finalErrorMessage}\n          readOnly={true}\n        />\n        {selectedValue && !disabled && (\n          <ClearButton onClick={handleClear} title={texts.clearButton}>\n            <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n              <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n              <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n            </svg>\n          </ClearButton>\n        )}\n      </ClickableInputContainer>\n\n      <Modal \n        isOpen={isModalOpen} \n        onClose={closeModal}\n        header=\"직원 검색\"\n        body={\n          <>\n            <SearchContainer>\n              <AppTextField\n                value={internalSearchTerm}\n                onChange={handleSearchTermChange}\n                placeholder={finalPlaceholder}\n                autoFocus={true}\n              />\n              <SearchButton\n                onClick={handleSearchButtonClick}\n                disabled={!internalSearchTerm.trim()}\n                title={texts.searchButton}\n              >\n                <svg \n                  width=\"16\" \n                  height=\"16\" \n                  viewBox=\"0 0 24 24\" \n                  fill=\"none\" \n                  stroke=\"currentColor\" \n                  strokeWidth=\"2\" \n                  strokeLinecap=\"round\" \n                  strokeLinejoin=\"round\"\n                >\n                  <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n                  <path d=\"m21 21-4.35-4.35\"></path>\n                </svg>\n              </SearchButton>\n            </SearchContainer>\n\n            {hasSearched && (\n              <CustomSearchContainer>\n                <ResultsList>\n                  {renderResults()}\n                </ResultsList>\n              </CustomSearchContainer>\n            )}\n          </>\n        }\n        width=\"500px\"\n      />\n    </>\n  );\n};\n"
        }
    ]
}